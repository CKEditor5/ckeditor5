{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./packages/ckeditor5-utils/src/ckeditorerror.js","webpack:///./packages/ckeditor5-core/src/plugin.js","webpack:///./packages/ckeditor5-engine/src/model/range.js","webpack:///./node_modules/lodash-es/last.js","webpack:///./packages/ckeditor5-engine/src/model/position.js","webpack:///./packages/ckeditor5-engine/src/view/position.js","webpack:///./packages/ckeditor5-utils/src/mix.js","webpack:///./packages/ckeditor5-ui/src/view.js","webpack:///./packages/ckeditor5-core/src/command.js","webpack:///./packages/ckeditor5-utils/src/emittermixin.js","webpack:///./packages/ckeditor5-utils/src/keyboard.js","webpack:///./packages/ckeditor5-engine/src/view/range.js","webpack:///./packages/ckeditor5-engine/src/view/filler.js","webpack:///./packages/ckeditor5-utils/src/observablemixin.js","webpack:///./packages/ckeditor5-ui/src/button/buttonview.js","webpack:///./packages/ckeditor5-engine/src/model/element.js","webpack:///./packages/ckeditor5-engine/src/model/text.js","webpack:///./packages/ckeditor5-engine/src/view/text.js","webpack:///./packages/ckeditor5-engine/src/model/operation/moveoperation.js","webpack:///./packages/ckeditor5-engine/src/model/operation/splitoperation.js","webpack:///./node_modules/lodash-es/_root.js","webpack:///./packages/ckeditor5-utils/src/comparearrays.js","webpack:///./packages/ckeditor5-utils/src/env.js","webpack:///./packages/ckeditor5-utils/src/dom/global.js","webpack:///./packages/ckeditor5-utils/src/dom/istext.js","webpack:///./packages/ckeditor5-engine/src/model/operation/mergeoperation.js","webpack:///./packages/ckeditor5-engine/src/model/operation/operation.js","webpack:///./packages/ckeditor5-utils/src/collection.js","webpack:///./packages/ckeditor5-engine/src/view/element.js","webpack:///./node_modules/lodash-es/isObject.js","webpack:///./node_modules/lodash-es/isObjectLike.js","webpack:///./packages/ckeditor5-utils/src/focustracker.js","webpack:///./packages/ckeditor5-engine/src/model/liveposition.js","webpack:///./packages/ckeditor5-utils/src/isiterable.js","webpack:///./node_modules/lodash-es/isEqual.js","webpack:///./packages/ckeditor5-engine/src/model/operation/attributeoperation.js","webpack:///./packages/ckeditor5-utils/src/uid.js","webpack:///./packages/ckeditor5-engine/src/model/textproxy.js","webpack:///./packages/ckeditor5-engine/src/model/operation/utils.js","webpack:///./packages/ckeditor5-utils/src/keystrokehandler.js","webpack:///./packages/ckeditor5-utils/src/first.js","webpack:///./packages/ckeditor5-engine/src/model/operation/insertoperation.js","webpack:///./packages/ckeditor5-engine/src/view/selection.js","webpack:///./packages/ckeditor5-utils/src/dom/rect.js","webpack:///./node_modules/lodash-es/_Symbol.js","webpack:///./node_modules/lodash-es/_coreJsData.js","webpack:///./node_modules/lodash-es/_isMasked.js","webpack:///./node_modules/lodash-es/_baseIsNative.js","webpack:///./node_modules/lodash-es/_getValue.js","webpack:///./node_modules/lodash-es/_getNative.js","webpack:///./packages/ckeditor5-engine/src/view/observer/observer.js","webpack:///./packages/ckeditor5-engine/src/model/treewalker.js","webpack:///./packages/ckeditor5-engine/src/view/observer/domeventobserver.js","webpack:///./node_modules/lodash-es/_getRawTag.js","webpack:///./node_modules/lodash-es/_objectToString.js","webpack:///./node_modules/lodash-es/_baseGetTag.js","webpack:///./packages/ckeditor5-engine/src/view/textproxy.js","webpack:///./packages/ckeditor5-ui/src/focuscycler.js","webpack:///./packages/ckeditor5-engine/src/view/matcher.js","webpack:///./packages/ckeditor5-ui/src/viewcollection.js","webpack:///./packages/ckeditor5-utils/src/tomap.js","webpack:///./node_modules/lodash-es/isArray.js","webpack:///./packages/ckeditor5-ui/src/template.js","webpack:///./node_modules/lodash-es/_copyObject.js","webpack:///./packages/ckeditor5-engine/src/view/node.js","webpack:///./packages/ckeditor5-engine/src/model/node.js","webpack:///./packages/ckeditor5-engine/src/model/nodelist.js","webpack:///./packages/ckeditor5-engine/src/view/treewalker.js","webpack:///./packages/ckeditor5-engine/src/model/operation/markeroperation.js","webpack:///./packages/ckeditor5-engine/src/model/operation/renameoperation.js","webpack:///./packages/ckeditor5-ui/src/dropdown/dropdownpanelview.js","webpack:///./packages/ckeditor5-ui/src/dropdown/dropdownview.js","webpack:///./packages/ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js","webpack:///./packages/ckeditor5-ui/src/list/listseparatorview.js","webpack:///./packages/ckeditor5-ui/src/dropdown/utils.js","webpack:///./node_modules/lodash-es/_DataView.js","webpack:///./node_modules/lodash-es/_Promise.js","webpack:///./node_modules/lodash-es/_Set.js","webpack:///./node_modules/lodash-es/_WeakMap.js","webpack:///./node_modules/lodash-es/_getTag.js","webpack:///./node_modules/lodash-es/_nodeUtil.js","webpack:///./packages/ckeditor5-utils/src/diff.js","webpack:///./packages/ckeditor5-utils/src/dom/isnode.js","webpack:///./node_modules/lodash-es/_toSource.js","webpack:///./packages/ckeditor5-engine/src/model/documentfragment.js","webpack:///./packages/ckeditor5-engine/src/view/documentfragment.js","webpack:///./packages/ckeditor5-engine/src/model/liverange.js","webpack:///./packages/ckeditor5-utils/src/dom/emittermixin.js","webpack:///./node_modules/lodash-es/eq.js","webpack:///./node_modules/lodash-es/_listCacheClear.js","webpack:///./node_modules/lodash-es/_assocIndexOf.js","webpack:///./node_modules/lodash-es/_listCacheDelete.js","webpack:///./node_modules/lodash-es/_listCacheGet.js","webpack:///./node_modules/lodash-es/_listCacheHas.js","webpack:///./node_modules/lodash-es/_listCacheSet.js","webpack:///./node_modules/lodash-es/_ListCache.js","webpack:///./node_modules/lodash-es/_Map.js","webpack:///./packages/ckeditor5-engine/src/view/containerelement.js","webpack:///./packages/ckeditor5-utils/src/dom/indexof.js","webpack:///./packages/ckeditor5-utils/src/dom/getancestors.js","webpack:///./packages/ckeditor5-engine/src/view/domconverter.js","webpack:///./packages/ckeditor5-utils/src/dom/getcommonancestor.js","webpack:///./packages/ckeditor5-ui/src/icon/iconview.js","webpack:///./node_modules/lodash-es/isBuffer.js","webpack:///./packages/ckeditor5-utils/src/dom/isrange.js","webpack:///./packages/ckeditor5-clipboard/src/datatransfer.js","webpack:///./packages/ckeditor5-clipboard/src/clipboardobserver.js","webpack:///./packages/ckeditor5-clipboard/src/utils/viewtoplaintext.js","webpack:///./packages/ckeditor5-clipboard/src/clipboard.js","webpack:///./packages/ckeditor5-clipboard/src/utils/normalizeclipboarddata.js","webpack:///./packages/ckeditor5-clipboard/src/utils/plaintexttohtml.js","webpack:///./node_modules/lodash-es/_getPrototype.js","webpack:///./node_modules/lodash-es/_isPrototype.js","webpack:///./node_modules/lodash-es/isArrayLike.js","webpack:///./node_modules/lodash-es/_baseUnary.js","webpack:///./packages/ckeditor5-engine/src/view/editableelement.js","webpack:///./packages/ckeditor5-engine/src/view/observer/domeventdata.js","webpack:///./node_modules/lodash-es/_arrayEach.js","webpack:///./node_modules/lodash-es/_baseAssign.js","webpack:///./node_modules/lodash-es/_baseAssignIn.js","webpack:///./node_modules/lodash-es/_copyArray.js","webpack:///./node_modules/lodash-es/_copySymbols.js","webpack:///./node_modules/lodash-es/_getSymbolsIn.js","webpack:///./node_modules/lodash-es/_copySymbolsIn.js","webpack:///./node_modules/lodash-es/_getAllKeysIn.js","webpack:///./node_modules/lodash-es/_initCloneArray.js","webpack:///./node_modules/lodash-es/_cloneArrayBuffer.js","webpack:///./node_modules/lodash-es/_cloneDataView.js","webpack:///./node_modules/lodash-es/_cloneRegExp.js","webpack:///./node_modules/lodash-es/_cloneSymbol.js","webpack:///./node_modules/lodash-es/_cloneTypedArray.js","webpack:///./node_modules/lodash-es/_initCloneByTag.js","webpack:///./node_modules/lodash-es/_baseCreate.js","webpack:///./node_modules/lodash-es/_initCloneObject.js","webpack:///./node_modules/lodash-es/_baseIsMap.js","webpack:///./node_modules/lodash-es/isMap.js","webpack:///./node_modules/lodash-es/_baseIsSet.js","webpack:///./node_modules/lodash-es/isSet.js","webpack:///./node_modules/lodash-es/_baseClone.js","webpack:///./node_modules/lodash-es/_nativeKeysIn.js","webpack:///./node_modules/lodash-es/_baseKeysIn.js","webpack:///./node_modules/lodash-es/keysIn.js","webpack:///./node_modules/lodash-es/_nativeKeys.js","webpack:///./node_modules/lodash-es/_baseKeys.js","webpack:///./node_modules/lodash-es/keys.js","webpack:///./node_modules/lodash-es/_arrayFilter.js","webpack:///./node_modules/lodash-es/_getSymbols.js","webpack:///./node_modules/lodash-es/_defineProperty.js","webpack:///./node_modules/lodash-es/_Uint8Array.js","webpack:///./packages/ckeditor5-utils/src/dom/iswindow.js","webpack:///./node_modules/lodash-es/_stackClear.js","webpack:///./node_modules/lodash-es/_stackDelete.js","webpack:///./node_modules/lodash-es/_stackGet.js","webpack:///./node_modules/lodash-es/_stackHas.js","webpack:///./node_modules/lodash-es/_stackSet.js","webpack:///./node_modules/lodash-es/_Stack.js","webpack:///./packages/ckeditor5-utils/src/spy.js","webpack:///./packages/ckeditor5-utils/src/eventinfo.js","webpack:///./node_modules/lodash-es/isPlainObject.js","webpack:///./node_modules/lodash-es/isFunction.js","webpack:///./packages/ckeditor5-paragraph/src/paragraphcommand.js","webpack:///./packages/ckeditor5-paragraph/src/paragraph.js","webpack:///./packages/ckeditor5-ui/src/toolbar/toolbarview.js","webpack:///./packages/ckeditor5-ui/src/bindings/preventdefault.js","webpack:///./packages/ckeditor5-ui/src/bindings/clickoutsidehandler.js","webpack:///./packages/ckeditor5-utils/src/priorities.js","webpack:///./packages/ckeditor5-basic-styles/src/attributecommand.js","webpack:///./packages/ckeditor5-utils/src/dom/tounit.js","webpack:///./packages/ckeditor5-utils/src/version.js","webpack:///./node_modules/lodash-es/_getAllKeys.js","webpack:///./packages/ckeditor5-utils/src/count.js","webpack:///./packages/ckeditor5-engine/src/model/operation/rootattributeoperation.js","webpack:///./node_modules/lodash-es/identity.js","webpack:///./node_modules/lodash-es/_apply.js","webpack:///./node_modules/lodash-es/_overRest.js","webpack:///./node_modules/lodash-es/constant.js","webpack:///./node_modules/lodash-es/_baseSetToString.js","webpack:///./node_modules/lodash-es/_shortOut.js","webpack:///./node_modules/lodash-es/_setToString.js","webpack:///./node_modules/lodash-es/_baseRest.js","webpack:///./node_modules/lodash-es/_isIterateeCall.js","webpack:///./node_modules/lodash-es/_createAssigner.js","webpack:///./node_modules/lodash-es/assignIn.js","webpack:///./packages/ckeditor5-ui/src/button/switchbuttonview.js","webpack:///./packages/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js","webpack:///./packages/ckeditor5-ui/src/model.js","webpack:///./node_modules/lodash-es/_freeGlobal.js","webpack:///./node_modules/lodash-es/_overArg.js","webpack:///./node_modules/lodash-es/_baseAssignValue.js","webpack:///./node_modules/lodash-es/_assignValue.js","webpack:///./node_modules/lodash-es/stubArray.js","webpack:///./node_modules/lodash-es/_arrayPush.js","webpack:///./node_modules/lodash-es/isLength.js","webpack:///./node_modules/lodash-es/_isIndex.js","webpack:///./node_modules/lodash-es/_baseGetAllKeys.js","webpack:///./packages/ckeditor5-utils/src/objecttomap.js","webpack:///./packages/ckeditor5-engine/src/view/documentselection.js","webpack:///./packages/ckeditor5-utils/src/fastdiff.js","webpack:///./packages/ckeditor5-utils/src/dom/getborderwidths.js","webpack:///./node_modules/lodash-es/_nativeCreate.js","webpack:///./node_modules/lodash-es/_hashClear.js","webpack:///./node_modules/lodash-es/_hashDelete.js","webpack:///./node_modules/lodash-es/_hashGet.js","webpack:///./node_modules/lodash-es/_hashHas.js","webpack:///./node_modules/lodash-es/_hashSet.js","webpack:///./node_modules/lodash-es/_Hash.js","webpack:///./node_modules/lodash-es/_mapCacheClear.js","webpack:///./node_modules/lodash-es/_isKeyable.js","webpack:///./node_modules/lodash-es/_getMapData.js","webpack:///./node_modules/lodash-es/_mapCacheDelete.js","webpack:///./node_modules/lodash-es/_mapCacheGet.js","webpack:///./node_modules/lodash-es/_mapCacheHas.js","webpack:///./node_modules/lodash-es/_mapCacheSet.js","webpack:///./node_modules/lodash-es/_MapCache.js","webpack:///./node_modules/lodash-es/_setCacheAdd.js","webpack:///./node_modules/lodash-es/_setCacheHas.js","webpack:///./node_modules/lodash-es/_SetCache.js","webpack:///./node_modules/lodash-es/_arraySome.js","webpack:///./node_modules/lodash-es/_cacheHas.js","webpack:///./node_modules/lodash-es/_equalArrays.js","webpack:///./node_modules/lodash-es/_mapToArray.js","webpack:///./node_modules/lodash-es/_setToArray.js","webpack:///./node_modules/lodash-es/_equalByTag.js","webpack:///./node_modules/lodash-es/_equalObjects.js","webpack:///./node_modules/lodash-es/_baseIsEqualDeep.js","webpack:///./node_modules/lodash-es/_baseIsEqual.js","webpack:///./node_modules/lodash-es/_baseTimes.js","webpack:///./node_modules/lodash-es/_baseIsArguments.js","webpack:///./node_modules/lodash-es/isArguments.js","webpack:///./node_modules/lodash-es/_arrayLikeKeys.js","webpack:///./node_modules/lodash-es/_baseIsTypedArray.js","webpack:///./node_modules/lodash-es/isTypedArray.js","webpack:///./packages/ckeditor5-enter/src/utils.js","webpack:///./packages/ckeditor5-enter/src/enterobserver.js","webpack:///./packages/ckeditor5-utils/src/dom/position.js","webpack:///./packages/ckeditor5-utils/src/dom/getpositionedancestor.js","webpack:///./node_modules/lodash-es/isSymbol.js","webpack:///./packages/ckeditor5-ui/src/tooltip/tooltipview.js","webpack:///./packages/ckeditor5-engine/src/view/placeholder.js","webpack:///./packages/ckeditor5-ui/src/label/labelview.js","webpack:///./packages/ckeditor5-undo/theme/icons/undo.svg","webpack:///./packages/ckeditor5-undo/theme/icons/redo.svg","webpack:///./packages/ckeditor5-undo/src/undoui.js","webpack:///./packages/ckeditor5-undo/src/undo.js","webpack:///(webpack)/buildin/harmony-module.js","webpack:///./node_modules/lodash-es/isElement.js","webpack:///./packages/ckeditor5-utils/src/dom/setdatainelement.js","webpack:///./packages/ckeditor5-ui/src/toolbar/toolbarseparatorview.js","webpack:///./packages/ckeditor5-ui/theme/icons/dropdown-arrow.svg","webpack:///./packages/ckeditor5-basic-styles/theme/icons/bold.svg","webpack:///./packages/ckeditor5-basic-styles/src/bold/boldui.js","webpack:///./packages/ckeditor5-basic-styles/src/bold.js","webpack:///./packages/ckeditor5-basic-styles/theme/icons/italic.svg","webpack:///./packages/ckeditor5-basic-styles/src/italic/italicui.js","webpack:///./packages/ckeditor5-basic-styles/src/italic.js","webpack:///./packages/ckeditor5-core/src/editor/utils/dataapimixin.js","webpack:///./packages/ckeditor5-engine/src/dataprocessor/basichtmlwriter.js","webpack:///./packages/ckeditor5-ui/src/editorui/editoruiview.js","webpack:///./packages/ckeditor5-utils/src/dom/getdatafromelement.js","webpack:///./packages/ckeditor5-utils/src/config.js","webpack:///./packages/ckeditor5-engine/src/view/rooteditableelement.js","webpack:///./packages/ckeditor5-engine/src/view/document.js","webpack:///./packages/ckeditor5-engine/src/view/attributeelement.js","webpack:///./packages/ckeditor5-engine/src/view/emptyelement.js","webpack:///./packages/ckeditor5-engine/src/view/uielement.js","webpack:///./packages/ckeditor5-engine/src/view/downcastwriter.js","webpack:///./packages/ckeditor5-utils/src/dom/insertat.js","webpack:///./packages/ckeditor5-utils/src/dom/remove.js","webpack:///./packages/ckeditor5-engine/src/view/renderer.js","webpack:///./node_modules/lodash-es/isEqualWith.js","webpack:///./packages/ckeditor5-engine/src/view/observer/mutationobserver.js","webpack:///./packages/ckeditor5-engine/src/view/observer/keyobserver.js","webpack:///./packages/ckeditor5-engine/src/view/observer/fakeselectionobserver.js","webpack:///./packages/ckeditor5-engine/src/view/observer/selectionobserver.js","webpack:///./packages/ckeditor5-engine/src/view/observer/focusobserver.js","webpack:///./packages/ckeditor5-engine/src/view/observer/compositionobserver.js","webpack:///./packages/ckeditor5-engine/src/view/observer/inputobserver.js","webpack:///./packages/ckeditor5-utils/src/dom/scroll.js","webpack:///./packages/ckeditor5-engine/src/view/view.js","webpack:///./packages/ckeditor5-engine/src/conversion/mapper.js","webpack:///./packages/ckeditor5-engine/src/conversion/modelconsumable.js","webpack:///./packages/ckeditor5-engine/src/conversion/downcastdispatcher.js","webpack:///./packages/ckeditor5-engine/src/model/selection.js","webpack:///./packages/ckeditor5-engine/src/model/documentselection.js","webpack:///./packages/ckeditor5-engine/src/conversion/conversionhelpers.js","webpack:///./node_modules/lodash-es/cloneDeep.js","webpack:///./packages/ckeditor5-engine/src/conversion/downcasthelpers.js","webpack:///./packages/ckeditor5-engine/src/conversion/upcasthelpers.js","webpack:///./packages/ckeditor5-engine/src/controller/editingcontroller.js","webpack:///./packages/ckeditor5-core/src/plugincollection.js","webpack:///./packages/ckeditor5-core/src/commandcollection.js","webpack:///./packages/ckeditor5-utils/src/translation-service.js","webpack:///./packages/ckeditor5-utils/src/locale.js","webpack:///./packages/ckeditor5-engine/src/conversion/viewconsumable.js","webpack:///./packages/ckeditor5-engine/src/model/schema.js","webpack:///./packages/ckeditor5-engine/src/conversion/upcastdispatcher.js","webpack:///./packages/ckeditor5-engine/src/controller/datacontroller.js","webpack:///./packages/ckeditor5-engine/src/conversion/conversion.js","webpack:///./packages/ckeditor5-engine/src/model/batch.js","webpack:///./packages/ckeditor5-engine/src/model/operation/detachoperation.js","webpack:///./packages/ckeditor5-engine/src/model/rootelement.js","webpack:///./packages/ckeditor5-engine/src/model/writer.js","webpack:///./packages/ckeditor5-engine/src/model/differ.js","webpack:///./packages/ckeditor5-engine/src/model/history.js","webpack:///./packages/ckeditor5-utils/src/unicode.js","webpack:///./packages/ckeditor5-engine/src/model/document.js","webpack:///./packages/ckeditor5-engine/src/model/markercollection.js","webpack:///./packages/ckeditor5-engine/src/model/utils/insertcontent.js","webpack:///./packages/ckeditor5-engine/src/model/utils/deletecontent.js","webpack:///./packages/ckeditor5-engine/src/model/utils/modifyselection.js","webpack:///./packages/ckeditor5-engine/src/model/utils/getselectedcontent.js","webpack:///./packages/ckeditor5-engine/src/model/utils/selection-post-fixer.js","webpack:///./packages/ckeditor5-engine/src/model/model.js","webpack:///./packages/ckeditor5-core/src/editingkeystrokehandler.js","webpack:///./packages/ckeditor5-core/src/editor/editor.js","webpack:///./packages/ckeditor5-ui/src/componentfactory.js","webpack:///./packages/ckeditor5-core/src/editor/editorui.js","webpack:///./packages/ckeditor5-ui/src/editableui/editableuiview.js","webpack:///./packages/ckeditor5-ui/src/editableui/inline/inlineeditableuiview.js","webpack:///(webpack)/buildin/global.js","webpack:///./packages/ckeditor5-ui/src/list/listview.js","webpack:///./packages/ckeditor5-ui/src/list/listitemview.js","webpack:///./node_modules/lodash-es/stubFalse.js","webpack:///./node_modules/lodash-es/_cloneBuffer.js","webpack:///./packages/ckeditor5-basic-styles/src/bold/boldediting.js","webpack:///./packages/ckeditor5-basic-styles/src/italic/italicediting.js","webpack:///./packages/ckeditor5-typing/src/utils/changebuffer.js","webpack:///./packages/ckeditor5-typing/src/inputcommand.js","webpack:///./packages/ckeditor5-typing/src/utils/injectunsafekeystrokeshandling.js","webpack:///./packages/ckeditor5-typing/src/utils/utils.js","webpack:///./packages/ckeditor5-utils/src/difftochanges.js","webpack:///./packages/ckeditor5-typing/src/utils/injecttypingmutationshandling.js","webpack:///./packages/ckeditor5-typing/src/input.js","webpack:///./packages/ckeditor5-typing/src/deletecommand.js","webpack:///./packages/ckeditor5-typing/src/deleteobserver.js","webpack:///./packages/ckeditor5-typing/src/delete.js","webpack:///./packages/ckeditor5-typing/src/typing.js","webpack:///./packages/ckeditor5-engine/src/model/operation/nooperation.js","webpack:///./packages/ckeditor5-engine/src/model/operation/transform.js","webpack:///./packages/ckeditor5-undo/src/basecommand.js","webpack:///./packages/ckeditor5-undo/src/undocommand.js","webpack:///./packages/ckeditor5-undo/src/redocommand.js","webpack:///./packages/ckeditor5-undo/src/undoediting.js","webpack:///./packages/ckeditor5-enter/src/entercommand.js","webpack:///./packages/ckeditor5-enter/src/enter.js","webpack:///./packages/ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus.js","webpack:///./packages/ckeditor5-ui/src/toolbar/normalizetoolbarconfig.js","webpack:///./packages/ckeditor5-enter/src/shiftentercommand.js","webpack:///./packages/ckeditor5-enter/src/shiftenter.js","webpack:///./packages/ckeditor5-essentials/src/essentials.js","webpack:///./packages/ckeditor5-heading/src/headingcommand.js","webpack:///./packages/ckeditor5-heading/src/headingediting.js","webpack:///./packages/ckeditor5-core/src/editor/utils/elementapimixin.js","webpack:///./packages/ckeditor5-core/src/editor/utils/attachtoform.js","webpack:///./packages/ckeditor5-heading/src/utils.js","webpack:///./packages/ckeditor5-heading/src/headingui.js","webpack:///./packages/ckeditor5-heading/src/heading.js","webpack:///./packages/ckeditor5-engine/src/view/observer/clickobserver.js","webpack:///./packages/ckeditor5-utils/src/elementreplacer.js","webpack:///./packages/ckeditor5-editor-classic/src/classiceditorui.js","webpack:///./packages/ckeditor5-ui/src/editorui/boxed/boxededitoruiview.js","webpack:///./packages/ckeditor5-ui/src/panel/sticky/stickypanelview.js","webpack:///./packages/ckeditor5-editor-classic/src/classiceditoruiview.js","webpack:///./packages/ckeditor5-editor-classic/src/classiceditor.js","webpack:///./node_modules/lodash-es/cloneDeepWith.js","webpack:///./node_modules/lodash-es/clone.js","webpack:///./node_modules/lodash-es/now.js","webpack:///./node_modules/lodash-es/toNumber.js","webpack:///./node_modules/lodash-es/debounce.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/md5.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/constants.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/mathml.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/configuration.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/textcache.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/listeners.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/serviceprovider.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/latex.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/stringmanager.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/util.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/image.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/accessibility.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/parser.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/editorlistener.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/contentmanager.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/customeditors.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/jsvariables.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/event.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/popupmessage.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/modal.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/polyfills.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/core.src.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration-js/src/integrationmodel.js","webpack:///./node_modules/@wiris/ckeditor5-mathml/src/mathmlschema.js","webpack:///./packages/ckeditor5-engine/src/dataprocessor/xmldataprocessor.js","webpack:///./node_modules/@wiris/ckeditor5-mathml/src/conversion/mathmldataprocessor.js","webpack:///./node_modules/@wiris/ckeditor5-mathml/src/mathml.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/conversion/custommathmldataprocessor.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/integration.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/commands/mathtype.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/commands/chemtype.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/theme/icons/formula.svg","webpack:///./node_modules/@wiris/mathtype-ckeditor5/theme/icons/chem.svg","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/plugin.js","webpack:///./node_modules/umberto/source/ckeditor5/12.3.1/_snippets/features/mathtype.js","webpack:///./node_modules/@wiris/mathtype-ckeditor5/src/conversion/downcast.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","CKEditorError","attachLinkToDocumentation","DOCUMENTATION_URL","Error","[object Object]","message","context","data","JSON","stringify","super","this","type","matchedErrorName","match","Plugin","_ckeditor_ckeditor5_utils_src_observablemixin__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_mix__WEBPACK_IMPORTED_MODULE_1__","editor","stopListening","Range","_position__WEBPACK_IMPORTED_MODULE_0__","_treewalker__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_comparearrays__WEBPACK_IMPORTED_MODULE_3__","start","end","_createAt","stickiness","isCollapsed","iterator","boundaries","ignoreElementEnd","isEqual","isFlat","startParentPath","getParentPath","endParentPath","root","position","isAfter","isBefore","otherRange","loose","containsStart","containsPosition","containsEnd","item","pos","_createBefore","ranges","isIntersecting","push","commonRangeStart","commonRangeEnd","diffAt","getCommonPath","length","posParent","parent","path","howMany","maxOffset","offset","getShiftedBy","slice","options","treeWalker","nextPosition","operation","_getTransformedByInsertOperation","_getTransformedByMoveOperation","_getTransformedBySplitOperation","_getTransformedByMergeOperation","operations","result","getTransformedByOperation","splice","range","j","next","containsRange","getCommonAncestor","toJSON","constructor","spread","_getTransformedByInsertion","sourcePosition","targetPosition","_getTransformedByMove","insertionPosition","deletionPosition","insertPosition","newPos","moveRange","_createFromPositionAndShift","_getTransformedByDeletion","differenceSet","getDifference","difference","common","getIntersection","transformedCommon","_getCombined","deletePosition","newStart","newEnd","shift","element","offsetSize","clone","ref","sort","a","b","refIndex","indexOf","json","doc","fromJSON","lodash_es_last","array","undefined","position_Position","is","ckeditorerror","Array","getPath","concat","newOffset","getChild","offsetToIndex","index","textNode","node","model_text","startOffset","nodeAfter","nodeBefore","isAtStart","isAtEnd","otherPosition","comparearrays","skip","startPosition","treewalker","getAncestors","includeSelf","cmp","Math","min","ancestorsA","ancestorsB","shifted","compareWith","left","right","leftParent","thisParentPath","posParentPath","movedRange","splitPosition","moveTargetPosition","graveyardPosition","transformed","source","target","combined","from","itemOrPosition","_createAfter","endOffset","graveyard","getRoot","rootName","Position","_treewalker__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_comparearrays__WEBPACK_IMPORTED_MODULE_1__","_editableelement__WEBPACK_IMPORTED_MODULE_3__","childCount","editableElement","editable","thisPath","otherPath","offsetInText","mix","baseClass","mixins","forEach","mixin","getOwnPropertyNames","getOwnPropertySymbols","sourceDescriptor","getOwnPropertyDescriptor","View","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_0__","_viewcollection__WEBPACK_IMPORTED_MODULE_1__","_template__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_dom_emittermixin__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_observablemixin__WEBPACK_IMPORTED_MODULE_4__","_ckeditor_ckeditor5_utils_src_collection__WEBPACK_IMPORTED_MODULE_5__","_ckeditor_ckeditor5_utils_src_mix__WEBPACK_IMPORTED_MODULE_6__","_ckeditor_ckeditor5_utils_src_isiterable__WEBPACK_IMPORTED_MODULE_7__","locale","isRendered","_viewCollections","_unboundChildren","createCollection","on","evt","collection","decorate","bindTemplate","_bindTemplate","add","children","child","remove","definition","template","extend","render","registerChild","getViews","map","destroy","_revertData","revert","Command","set","_disableStack","Set","listenTo","model","document","refresh","isEnabled","stop","priority","forceDisabled","clearForceDisabled","id","size","forceDisable","delete","off","return","_getEmitterListenedTo","_setEmitterId","_eventinfo__WEBPACK_IMPORTED_MODULE_0__","_uid__WEBPACK_IMPORTED_MODULE_1__","_priorities__WEBPACK_IMPORTED_MODULE_2__","_listeningTo","_emitterId","EmitterMixin","event","callback","wasFired","args","emitter","emitterInfo","eventCallbacks","emitters","_getEmitterId","emitterId","callbacks","eventName","events","getEvents","childEventName","newEventNodes","childEvents","substr","lastIndexOf","createEventNamespace","lists","getCallbacksListsForNamespace","callbackDefinition","added","removeCallback","pop","eventOrInfo","eventInfo","getCallbacksForEvent","_events","callbackArgs","apply","called","_delegations","destinations","passAllDestinations","fireDelegatedEvents","to","nameOrFunction","Map","clear","listeningEmitter","listenedToEmitterId","eventNode","callbacksLists","childCallbacksLists","fireArgs","delegatedInfo","fire","keyCodes","getCode","parseKeystroke","getEnvKeystrokeText","_ckeditorerror__WEBPACK_IMPORTED_MODULE_0__","_env__WEBPACK_IMPORTED_MODULE_1__","macGlyphsToModifiers","⌘","⇧","⌥","modifiersToMacGlyphs","ctrl","alt","arrowleft","arrowup","arrowright","arrowdown","backspace","enter","space","esc","tab","cmd","code","letter","String","fromCharCode","toLowerCase","generateKnownKeyCodes","keyCode","altKey","ctrlKey","shiftKey","keystroke","splitKeystrokeText","reduce","sum","isMac","split","getLastMatchingPosition","enlargeTrimSkip","direction","nodeAfterStart","nodeBeforeEnd","startElement","endElement","_createFromParentsAndOffsets","BR_FILLER","NBSP_FILLER","INLINE_FILLER_LENGTH","INLINE_FILLER","startsWithFiller","isInlineFiller","getDataWithoutFiller","isBlockFiller","injectQuirksHandling","_ckeditor_ckeditor5_utils_src_keyboard__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_dom_istext__WEBPACK_IMPORTED_MODULE_1__","domDocument","fillerBr","createElement","dataset","ckeFiller","createTextNode","domNode","domText","templateBlockFillers","WeakMap","blockFiller","templateBlockFiller","window","isEqualNode","view","jumpOverInlineFiller","domSelection","domTarget","ownerDocument","defaultView","getSelection","rangeCount","getRangeAt","collapsed","domParent","startContainer","domOffset","collapse","_emittermixin__WEBPACK_IMPORTED_MODULE_0__","_ckeditorerror__WEBPACK_IMPORTED_MODULE_1__","lodash_es__WEBPACK_IMPORTED_MODULE_2__","lodash_es__WEBPACK_IMPORTED_MODULE_3__","observablePropertiesSymbol","boundObservablesSymbol","boundPropertiesSymbol","ObservableMixin","keys","initObservable","properties","has","configurable","oldValue","newValue","bindProperties","isStringArray","boundProperties","propertyName","bindings","binding","bindTo","toMany","bindToMany","_observable","_bindProperties","_to","_bindings","unbindProperties","boundObservables","toObservable","toProperty","toProperties","toPropertyBindings","boundObservable","methodName","originalMethod","observable","parsedArgs","parsed","lastObservable","parseBindToArgs","bindingsKeys","numberOfBindings","toBindings","updateBoundObservableProperty","attachBindToListeners","chain","toPropertyName","bindingsToObservable","updateBoundObservables","updateBindToBound","observables","attribute","observableAndAttributePairs","getBindingTargets","arr","every","propertyValue","ButtonView","_view__WEBPACK_IMPORTED_MODULE_0__","_icon_iconview__WEBPACK_IMPORTED_MODULE_1__","_tooltip_tooltipview__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_uid__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_keyboard__WEBPACK_IMPORTED_MODULE_4__","ariaLabelUid","tooltipView","_createTooltipView","labelView","_createLabelView","iconView","extendTemplate","attributes","class","_getTooltipString","setTemplate","tag","if","tabindex","aria-labelledby","aria-disabled","aria-pressed","isToggleable","mousedown","preventDefault","click","icon","focus","style","text","tooltip","label","Function","Element","_node__WEBPACK_IMPORTED_MODULE_0__","_nodelist__WEBPACK_IMPORTED_MODULE_1__","_text__WEBPACK_IMPORTED_MODULE_2__","_textproxy__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_isiterable__WEBPACK_IMPORTED_MODULE_4__","attrs","_children","_insertChild","isEmpty","cutType","replace","getNode","getNodeIndex","getNodeStartOffset","relativePath","deep","_clone","getAttributes","nodes","items","normalize","_remove","_insertNodes","_removeNodes","Text","_data","_textData","_fireChange","otherNode","MoveOperation","_operation__WEBPACK_IMPORTED_MODULE_0__","_position__WEBPACK_IMPORTED_MODULE_1__","_range__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_comparearrays__WEBPACK_IMPORTED_MODULE_4__","_utils__WEBPACK_IMPORTED_MODULE_5__","baseVersion","newTargetPosition","getMovedRangeStart","sourceElement","targetElement","sourceOffset","targetOffset","className","SplitOperation","_mergeoperation__WEBPACK_IMPORTED_MODULE_1__","_position__WEBPACK_IMPORTED_MODULE_2__","_range__WEBPACK_IMPORTED_MODULE_3__","_utils__WEBPACK_IMPORTED_MODULE_4__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_5__","getInsertionPosition","Number","POSITIVE_INFINITY","splitElement","newElement","sourceRange","_freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__","freeSelf","self","compareArrays","minLen","userAgent","navigator","env","isEdge","isGecko","isSafari","isAndroid","features","isRegExpUnicodePropertySupported","isSupported","search","RegExp","error","isText","obj","toString","MergeOperation","_splitoperation__WEBPACK_IMPORTED_MODULE_1__","mergedElement","_createIn","_createOn","Operation","isDocumentOperation","batch","assign","__className","Collection","_uid__WEBPACK_IMPORTED_MODULE_2__","_mix__WEBPACK_IMPORTED_MODULE_3__","_items","_itemMap","_idProperty","idProperty","_bindToExternalToInternalMap","_bindToInternalToExternalMap","_skippedIndexesFromExternal","first","last","itemId","idOrIndex","itemOrId","subject","itemDoesNotExist","externalItem","ctx","find","filter","_bindToCollection","externalCollection","as","Class","_setUpBindToBinding","using","callbackOrProperty","factory","addItem","isExternalBoundToThis","externalItemBound","finalIndex","skipped","getIndex","_text__WEBPACK_IMPORTED_MODULE_1__","_textproxy__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_objecttomap__WEBPACK_IMPORTED_MODULE_3__","_matcher__WEBPACK_IMPORTED_MODULE_5__","lodash_es__WEBPACK_IMPORTED_MODULE_6__","_attrs","parseAttributes","_classes","classString","parseClasses","_styles","parseInlineStyles","_customProperties","entries","getAttribute","join","styleString","otherElement","patterns","matcher","classes","styles","childrenClone","getChildren","cloned","getFillerOffset","count","isArray","stylesMap","stylesString","quoteType","propertyNameStart","propertyValueStart","charAt","char","trim","classesSet","classesString","classArray","FocusTracker","_dom_emittermixin__WEBPACK_IMPORTED_MODULE_0__","_observablemixin__WEBPACK_IMPORTED_MODULE_1__","_ckeditorerror__WEBPACK_IMPORTED_MODULE_2__","_elements","_nextEventLoopTimeout","_focus","useCapture","_blur","focusedElement","clearTimeout","isFocused","setTimeout","LivePosition","_ckeditor_ckeditor5_utils_src_emittermixin__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_utils_src_mix__WEBPACK_IMPORTED_MODULE_2__","oldPosition","toPosition","isIterable","lodash_es_isEqual","other","_baseIsEqual","attributeoperation_AttributeOperation","getItems","shallow","hasAttribute","utils","uid","uuid","floor","random","substring","TextProxy","isPartial","parentFirst","ancestors","getAttributeKeys","_insert","_move","_setAttribute","_normalizeNodes","_documentfragment__WEBPACK_IMPORTED_MODULE_4__","_nodelist__WEBPACK_IMPORTED_MODULE_5__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_6__","_splitNodeAtPosition","_mergeNodesAtIndex","removed","_removeChildren","_removeAttribute","normalized","prev","_haveSameAttributes","mergedNode","offsetDiff","firstPart","secondPart","nodeA","nodeB","iteratorA","iteratorB","attr","done","KeystrokeHandler","_keyboard__WEBPACK_IMPORTED_MODULE_1__","_listener","keyEvtData","stopPropagation","iterable","iteratorItem","InsertOperation","_nodelist__WEBPACK_IMPORTED_MODULE_2__","_moveoperation__WEBPACK_IMPORTED_MODULE_3__","_text__WEBPACK_IMPORTED_MODULE_5__","_element__WEBPACK_IMPORTED_MODULE_6__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_7__","shouldReceiveAttributes","insert","gyPosition","originalNodes","Selection","_range__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_utils_src_mix__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_emittermixin__WEBPACK_IMPORTED_MODULE_4__","_node__WEBPACK_IMPORTED_MODULE_5__","_ckeditor_ckeditor5_utils_src_count__WEBPACK_IMPORTED_MODULE_7__","_ckeditor_ckeditor5_utils_src_isiterable__WEBPACK_IMPORTED_MODULE_8__","_documentselection__WEBPACK_IMPORTED_MODULE_9__","selectable","placeOrOffset","_ranges","_lastRangeBackward","_isFake","_fakeSelectionLabel","setTo","isFake","fakeSelectionLabel","anchor","isBackward","firstRange","getFirstRange","lastRange","getLastRange","otherSelection","thisRange","found","numOfRangesA","getRanges","rangeA","getTrimmed","rangeB","nextSibling","previousSibling","_setRanges","_setFakeOptions","fake","backward","newFocus","_addRange","newRanges","isLastBackward","_pushRange","storedRange","addedRange","intersectingRange","Rect","_isrange__WEBPACK_IMPORTED_MODULE_0__","_iswindow__WEBPACK_IMPORTED_MODULE_1__","_getborderwidths__WEBPACK_IMPORTED_MODULE_2__","_istext__WEBPACK_IMPORTED_MODULE_3__","lodash_es__WEBPACK_IMPORTED_MODULE_4__","rectProperties","isSourceRange","_source","writable","copyRectProperties","getDomRangeRects","getBoundingClientRect","innerWidth","innerHeight","top","bottom","width","height","x","y","anotherRect","rect","max","getArea","visibleRect","isBody","parentNode","commonAncestorContainer","parentRect","intersectionRect","prop","intersectRect","scrollBarWidth","scrollBarHeight","documentElement","clientWidth","clientHeight","borderWidths","offsetWidth","offsetHeight","moveBy","rects","clientRects","getClientRects","elementOrRange","body","_coreJsData","maskSrcKey","exec","IE_PROTO","_isMasked","func","reIsHostCtor","funcProto","objectProto","funcToString","_baseIsNative_hasOwnProperty","reIsNative","_baseIsNative","isObject","isFunction","test","_toSource","_getValue","Observer","_ckeditor_ckeditor5_utils_src_dom_emittermixin__WEBPACK_IMPORTED_MODULE_0__","disable","TreeWalker","_text__WEBPACK_IMPORTED_MODULE_0__","_textproxy__WEBPACK_IMPORTED_MODULE_1__","_element__WEBPACK_IMPORTED_MODULE_2__","_position__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_4__","singleCharacters","_boundaryStartParent","_boundaryEndParent","_visitedParent","prevPosition","prevVisitedParent","_next","_previous","previousPosition","formatReturnValue","charactersCount","offsetInTextNode","DomEventObserver","_observer__WEBPACK_IMPORTED_MODULE_0__","_domeventdata__WEBPACK_IMPORTED_MODULE_1__","domElement","domEventType","domEvent","onDomEvent","eventType","additionalData","_getRawTag_hasOwnProperty","nativeObjectToString","symToStringTag","_Symbol","_getRawTag","isOwn","unmasked","e","_objectToString_nativeObjectToString","_objectToString","nullTag","undefinedTag","_baseGetTag_symToStringTag","FocusCycler","_ckeditor_ckeditor5_utils_src_dom_global__WEBPACK_IMPORTED_MODULE_0__","actions","keystrokeHandler","cancel","focusables","isFocusable","_getFocusableItem","previous","current","focusTracker","viewIndex","focused","step","collectionLength","getComputedStyle","display","Matcher","pattern","_patterns","singleElement","isElementMatching","results","matchName","matchAttributes","getClassNames","hasClass","matchClasses","hasStyle","getStyle","matchStyles","ViewCollection","_ckeditor_ckeditor5_utils_src_collection__WEBPACK_IMPORTED_MODULE_1__","_parentElement","insertBefore","elementOrDocFragment","dest","evtName","delegate","stopDelegating","toMap","_objecttomap__WEBPACK_IMPORTED_MODULE_0__","lodash_es__WEBPACK_IMPORTED_MODULE_1__","Template","_ckeditor_ckeditor5_utils_src_emittermixin__WEBPACK_IMPORTED_MODULE_2__","_view__WEBPACK_IMPORTED_MODULE_3__","_viewcollection__WEBPACK_IMPORTED_MODULE_4__","_ckeditor_ckeditor5_utils_src_dom_isnode__WEBPACK_IMPORTED_MODULE_5__","lodash_es__WEBPACK_IMPORTED_MODULE_7__","xhtmlNs","def","_isRendered","_renderNode","intoFragment","isApplying","revertData","_revertTemplateFromNode","isView","isTemplate","eventNameOrFunctionOrAttribute","TemplateToBinding","eventNameOrFunction","valueIfTrue","TemplateIfBinding","extendObjectValueArray","eventListeners","childIndex","childDef","isInvalid","_renderText","_renderElement","createElementNS","_renderAttributes","_renderElementChildren","_setUpListeners","textContent","hasTemplateBinding","_bindToObservable","schema","updater","getTextUpdater","attrName","attrValue","domAttrValue","attrNs","valueToBind","shouldExtend","unshift","getAttributeUpdater","_renderStyleAttribute","isFalsy","val","arrayValueReducer","setAttributeNS","styleName","styleValue","getStyleUpdater","container","createDocumentFragment","isViewCollection","setParent","appendChild","childRevertData","childNodes","revertBindings","schemaItem","domEvtName","domSelector","activateDomEventListener","syncValueSchemaValue","templateBinding","activateAttributeListener","revertBinding","removeAttribute","setAttribute","TemplateBinding","domEvt","matches","getValue","some","getValueSchemaValue","el","removeAttributeNS","normalizePlainTextDefinition","normalizeTextDefinition","listeners","arrayify","normalizeListeners","normalizeAttributes","cur","ext","_assignValue_js__WEBPACK_IMPORTED_MODULE_0__","_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__","props","customizer","isNew","Node","getChildIndex","nodePath","_ckeditor_ckeditor5_utils_src_tomap__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_utils_src_comparearrays__WEBPACK_IMPORTED_MODULE_2__","getChildStartOffset","NodeList","_nodes","totalOffset","nodeList","indexStart","_element__WEBPACK_IMPORTED_MODULE_0__","_formatReturnValue","textLength","textProxy","MarkerOperation","oldRange","newRange","markers","affectsData","_markers","RenameOperation","_element__WEBPACK_IMPORTED_MODULE_1__","oldName","newName","dropdownpanelview_DropdownPanelView","selectstart","lastChild","focusLast","dropdownview_DropdownView","buttonView","panelView","focustracker","keystrokes","keystrokehandler","isOpen","panelPosition","_getOptimalPosition","fitInViewport","positions","_panelPositions","closeDropdown","southEast","southWest","northEast","northWest","defaultPanelPositions","uiLanguageDirection","buttonRect","panelRect","dropdownbuttonview_DropdownButtonView","buttonview","arrowView","_createArrowView","aria-haspopup","iconview","content","dropdown_arrow","listseparatorview_ListSeparatorView","createDropdown","ButtonClass","dropdownView","clickoutsidehandler","activator","contextElements","closeDropdownOnBlur","switchbuttonview","closeDropdownOnExecute","focusDropdownContentsOnArrows","addDefaultBehavior","addToolbarToDropdown","buttons","toolbarView","toolbarview","addListToDropdown","listView","listview","listItemView","listitemview","_DataView","_getNative","_root","_Promise","_Set","_WeakMap","dataViewCtorString","mapCtorString","_Map","promiseCtorString","setCtorString","weakMapCtorString","getTag","_baseGetTag","ArrayBuffer","resolve","Ctor","ctorString","freeExports","nodeType","freeModule","freeProcess","process","nodeUtil","types","require","diff","_src_fastdiff__WEBPACK_IMPORTED_MODULE_0__","aLength","bLength","fastDiff","_delete","tmp","delta","es","fp","snake","k","y1","y2","dir","isNode","Document","DocumentFragment","_nodelist__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_isiterable__WEBPACK_IMPORTED_MODULE_3__","LiveRange","_range__WEBPACK_IMPORTED_MODULE_0__","_createFromRanges","boundariesChanged","contentChanged","doesOperationChangeRangeContent","toRange","_isnode__WEBPACK_IMPORTED_MODULE_2__","_iswindow__WEBPACK_IMPORTED_MODULE_3__","DomEmitterMixin","rest","proxy","_getProxyEmitter","ProxyEmitter","attach","detach","getNodeUID","_domNode","_domListeners","domListener","_createDomListener","addEventListener","removeListener","removeEventListener","_listCacheClear","__data__","_assocIndexOf","eq","_listCacheDelete","_listCacheGet","_listCacheHas","_listCacheSet","ListCache","entry","_getNative_js__WEBPACK_IMPORTED_MODULE_0__","_root_js__WEBPACK_IMPORTED_MODULE_1__","ContainerElement","DOCUMENT_NODE","domconverter_DomConverter","filler","preElements","blockElements","_domToViewMapping","_viewToDomMapping","_fakeSelectionMapping","viewDocumentSelection","selection","viewElement","unbindDomElement","domFragment","viewFragment","viewNode","textData","_processDataFromViewText","mapViewToDom","bindDocumentFragments","bindElements","withChildren","viewChildrenToDom","fillerPositionOffset","childView","viewToDom","viewRange","domStart","viewPositionToDom","domEnd","domRange","createRange","setStart","setEnd","viewPosition","viewParent","findCorrespondingDomText","domBefore","domAfter","istext","uiElement","getParentUIElement","_processDataFromDomText","view_text","isComment","mapDomToView","isDocumentFragment","documentfragment","viewName","keepOriginalCase","tagName","view_element","domChildrenToView","_appendChild","domChild","viewChild","domToView","viewSelection","fakeSelectionToView","isDomSelectionBackward","viewRanges","domRangeToView","viewStart","domPositionToView","viewEnd","endContainer","findCorrespondingViewText","viewBefore","domElementOrDocumentFragment","isElement","firstChild","documentFragmentOrElement","viewText","viewEditable","domEditable","activeElement","scrollX","scrollY","global","scrollPositions","forEachDomNodeAncestor","scrollLeft","scrollTop","scrollTo","ELEMENT_NODE","DOCUMENT_FRAGMENT_NODE","COMMENT_NODE","anchorNode","anchorOffset","focusNode","focusOffset","_isDomSelectionPositionCorrect","includes","prevNode","_getTouchingViewTextNode","_nodeEndsWithSpace","nextNode","_hasDomParentOfType","_getTouchingInlineDomNode","shouldLeftTrim","_checkShouldLeftTrimDomText","shouldRightTrim","_checkShouldRightTrimDomText","getNext","topmostParent","createTreeWalker","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","acceptNode","FILTER_ACCEPT","FILTER_SKIP","currentNode","touchingNode","lca","boundaryParent","parents","IconView","viewBox","_updateXMLContent","_colorFillPaths","svg","DOMParser","parseFromString","querySelector","innerHTML","fillColor","querySelectorAll","fill","_root_js__WEBPACK_IMPORTED_MODULE_0__","_stubFalse_js__WEBPACK_IMPORTED_MODULE_1__","Buffer","isBuffer","isRange","DataTransfer","nativeDataTransfer","files","kind","getAsFile","getFiles","_native","getData","setData","clipboardobserver_ClipboardObserver","domeventobserver","viewDocument","handleInput","targetRanges","dropRange","eventinfo","dataTransfer","evtData","clipboardData","domDoc","clientX","clientY","caretRangeFromPoint","rangeParent","rangeOffset","domConverter","getDropViewRange","smallPaddingElements","clipboard_Clipboard","src_plugin","pluginName","modelDocument","editing","onCopyCut","toView","getSelectedContent","method","_htmlDataProcessor","htmldataprocessor","addObserver","isReadOnly","fullMatch","spaces","normalizeClipboardData","plainTextToHtml","scrollToTheSelection","dataController","modelFragment","toModel","insertContent","toData","viewToPlainText","viewItem","childText","deleteContent","_overArg_js__WEBPACK_IMPORTED_MODULE_0__","getPrototype","getPrototypeOf","_isFunction_js__WEBPACK_IMPORTED_MODULE_0__","_isLength_js__WEBPACK_IMPORTED_MODULE_1__","EditableElement","_containerelement__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_observablemixin__WEBPACK_IMPORTED_MODULE_3__","documentSymbol","getCustomProperty","_document","_setCustomProperty","DomEventData","lodash_es__WEBPACK_IMPORTED_MODULE_0__","_arrayEach","iteratee","_baseAssign","_copyObject","_baseAssignIn","lodash_es_keysIn","_copyArray","_copySymbols","_getSymbols","_getSymbolsIn","_arrayPush","_getPrototype","stubArray","_copySymbolsIn","_getAllKeysIn","_baseGetAllKeys","_initCloneArray_hasOwnProperty","_initCloneArray","input","_cloneArrayBuffer","arrayBuffer","byteLength","_Uint8Array","_cloneDataView","dataView","isDeep","buffer","byteOffset","reFlags","_cloneRegExp","regexp","lastIndex","symbolProto","symbolValueOf","valueOf","_cloneSymbol","symbol","_cloneTypedArray","typedArray","boolTag","dateTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","_initCloneByTag","objectCreate","_baseCreate","proto","_initCloneObject","_isPrototype","_baseIsMap_mapTag","_baseIsMap","isObjectLike","_getTag","nodeIsMap","_nodeUtil","isMap","lodash_es_isMap","_baseUnary","_baseIsSet_setTag","_baseIsSet","nodeIsSet","isSet","lodash_es_isSet","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","argsTag","funcTag","genTag","objectTag","cloneableTags","baseClone","bitmask","stack","isFull","isArr","isFunc","_cloneBuffer","_Stack","stacked","subValue","keysFunc","_getAllKeys","keysIn","_assignValue","_nativeKeysIn","_baseKeysIn_hasOwnProperty","_baseKeysIn","isProto","isArrayLike","_arrayLikeKeys","_nativeKeys","_overArg","_baseKeys_hasOwnProperty","_baseKeys","_arrayFilter","predicate","resIndex","propertyIsEnumerable","nativeGetSymbols","getSymbols","Uint8Array","isWindow","stringifiedObject","_stackClear","_ListCache","_stackDelete","_stackGet","_stackHas","LARGE_ARRAY_SIZE","_stackSet","pairs","_MapCache","Stack","src_spy","spy","eventinfo_EventInfo","_baseGetTag_js__WEBPACK_IMPORTED_MODULE_0__","_getPrototype_js__WEBPACK_IMPORTED_MODULE_1__","_isObjectLike_js__WEBPACK_IMPORTED_MODULE_2__","objectCtorString","_isObject_js__WEBPACK_IMPORTED_MODULE_1__","asyncTag","proxyTag","paragraphcommand_ParagraphCommand","command","block","getSelectedBlocks","checkCanBecomeParagraph","change","writer","blocks","rename","checkChild","paragraph_Paragraph","commands","register","inheritAllFrom","conversion","elementToElement","for","modelWriter","paragraphLikeElements","converterPriority","upcastDispatcher","conversionApi","consumable","isParagraphable","modelCursor","wrapInParagraph","modelRange","registerPostFixer","_autoparagraphEmptyRoots","enqueueChange","getRootNames","insertElement","paragraph","convertItem","createPositionAt","createContext","toolbarview_ToolbarView","_focusCycler","focuscycler","focusPrevious","focusNext","role","aria-label","focusFirst","config","toolbarseparatorview","console","warn","clickOutsideHandler","contextElement","contains","priorities","normal","highest","high","low","lowest","AttributeCommand","_ckeditor_ckeditor5_core_src_command__WEBPACK_IMPORTED_MODULE_0__","attributeKey","_getValueFromFirstAllowedNode","checkAttributeInSelection","forceValue","setSelectionAttribute","removeSelectionAttribute","getValidRanges","checkAttribute","toUnit","unit","ckeditor5_package_json__WEBPACK_IMPORTED_MODULE_0__","windowOrGlobal","CKEDITOR_VERSION","_baseGetAllKeys_js__WEBPACK_IMPORTED_MODULE_0__","_getSymbols_js__WEBPACK_IMPORTED_MODULE_1__","_keys_js__WEBPACK_IMPORTED_MODULE_2__","_","RootAttributeOperation","lodash_es_identity","_apply","thisArg","nativeMax","_overRest","transform","arguments","otherArgs","lodash_es_constant","_baseSetToString","_defineProperty","string","HOT_COUNT","HOT_SPAN","nativeNow","Date","now","_setToString","lastCalled","stamp","remaining","_shortOut","_baseRest","_isIterateeCall","_isIndex","_createAssigner","assigner","sources","guard","assignIn","SwitchButtonView","_buttonview__WEBPACK_IMPORTED_MODULE_1__","toggleSwitchView","_createToggleView","HtmlDataProcessor","_basichtmlwriter__WEBPACK_IMPORTED_MODULE_0__","_view_domconverter__WEBPACK_IMPORTED_MODULE_1__","_view_filler__WEBPACK_IMPORTED_MODULE_2__","_domParser","_domConverter","_htmlWriter","getHtml","_toDom","fragment","Model","_ckeditor_ckeditor5_utils_src_mix__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_observablemixin__WEBPACK_IMPORTED_MODULE_1__","freeGlobal","arg","_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__","_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_0__","_eq_js__WEBPACK_IMPORTED_MODULE_1__","objValue","values","MAX_SAFE_INTEGER","reIsUint","_arrayPush_js__WEBPACK_IMPORTED_MODULE_0__","_isArray_js__WEBPACK_IMPORTED_MODULE_1__","symbolsFunc","objectToMap","DocumentSelection","_selection__WEBPACK_IMPORTED_MODULE_0__","_selection","getFirstPosition","getLastPosition","getSelectedElement","isSimilar","setFocus","atomicChanges","changeIndexes","arr1","arr2","firstIndex","findFirstDifferenceIndex","lastIndexOld","lastIndexNew","oldArrayReversed","cutAndReverse","newArrayReversed","findChangeBoundaryIndexes","newLength","changeIndexesToAtomicChanges","newArray","changeIndexesToChanges","reverse","getBorderWidths","parseInt","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","_nativeCreate","_hashClear","_hashDelete","HASH_UNDEFINED","_hashGet_hasOwnProperty","_hashGet","_hashHas_hasOwnProperty","_hashHas","_hashSet_HASH_UNDEFINED","_hashSet","Hash","_Hash","_mapCacheClear","hash","_isKeyable","_getMapData","_mapCacheDelete","_mapCacheGet","_mapCacheHas","_mapCacheSet","MapCache","_setCacheAdd","_setCacheHas","SetCache","_SetCache","_arraySome","_cacheHas","cache","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","_equalArrays","equalFunc","arrLength","othLength","seen","arrValue","othValue","compared","othIndex","_mapToArray","_setToArray","_equalByTag_COMPARE_PARTIAL_FLAG","_equalByTag_COMPARE_UNORDERED_FLAG","errorTag","_equalByTag","convert","_equalObjects_COMPARE_PARTIAL_FLAG","_equalObjects_hasOwnProperty","_equalObjects","objProps","objLength","skipCtor","objCtor","othCtor","_baseIsEqualDeep_COMPARE_PARTIAL_FLAG","arrayTag","_baseIsEqualDeep_hasOwnProperty","_baseIsEqualDeep","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","isTypedArray","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","baseIsEqual","_baseTimes","_baseIsArguments","isArguments_hasOwnProperty","lodash_es_isArguments","_arrayLikeKeys_hasOwnProperty","inherited","isArg","isBuff","isType","skipIndexes","typedArrayTags","_baseIsTypedArray","isLength","nodeIsTypedArray","getCopyOnEnterAttributes","allAttributes","getAttributeProperties","copyOnEnter","EnterObserver","_ckeditor_ckeditor5_engine_src_view_observer_observer__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_engine_src_view_observer_domeventdata__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_utils_src_keyboard__WEBPACK_IMPORTED_MODULE_2__","once","isSoft","getOptimalPosition","limiter","positionedElementAncestor","parentElement","getPositionedAncestor","elementRect","targetRect","bestPosition","limiterRect","getVisible","viewportRect","bestPositionRect","bestPositionName","maxLimiterIntersectArea","maxViewportIntersectArea","elementRectArea","positionName","positionRect","getPosition","limiterIntersectArea","viewportIntersectArea","limiterViewportIntersectRect","getIntersectionArea","setBestPosition","getBestPosition","getAbsoluteRectCoordinates","ancestorPosition","ancestorBorderWidths","getborderwidths","moveTo","_isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__","TooltipView","enablePlaceholder","documentPlaceholders","isDirectHost","updateDocumentPlaceholders","hidePlaceholder","removeClass","placeholders","wasViewModified","updatePlaceholder","hostElement","getChildPlaceholderHostSubstitute","isEmptyish","selectionAnchor","needsPlaceholder","addClass","showPlaceholder","LabelView","undo","redo","undoui_UndoUI","localizedUndoIcon","localizedRedoIcon","_addButton","Icon","ui","componentFactory","execute","undo_Undo","requires","undoediting","originalModule","webpackPolyfill","_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__","_isPlainObject_js__WEBPACK_IMPORTED_MODULE_1__","setDataInElement","HTMLTextAreaElement","ToolbarSeparatorView","bold","BOLD","boldui_BoldUI","bold_Bold","boldediting","italic","ITALIC","italicui_ItalicUI","italic_Italic","italicediting","DataApiMixin","BasicHtmlWriter","implementation","createHTMLDocument","EditorUIView","_template__WEBPACK_IMPORTED_MODULE_1__","_renderBodyCollection","_bodyCollectionContainer","bodyElement","getDataFromElement","config_Config","configurations","defaultConfigurations","_config","define","_setObjectToTarget","_setToTarget","_getFromSource","isDefine","isPlainObject","parts","part","cloneDeepWith","leaveDOMReferences","cloneConfig","configuration","rootNameSymbol","rooteditableelement_RootEditableElement","editableelement","_name","document_Document","documentselection","roots","_postFixers","postFixer","wasFixed","observablemixin","DEFAULT_PRIORITY","attributeelement_AttributeElement","_priority","_id","_clonesGroup","nonUiChildrenCount","emptyelement_EmptyElement","emptyelement_getFillerOffset","view_node","uielement_UIElement","uielement_getFillerOffset","toDomElement","injectUiElementHandling","keyboard","domSelectionCollapsed","jumpedOverAnyUiElement","nextViewPosition","newDomPosition","jumpOverUiElement","downcastwriter_DowncastWriter","_cloneGroups","_setTo","_setFocus","attributeElement","containerelement","renderFunction","_addClass","_removeClass","_setStyle","_removeStyle","_removeCustomProperty","positionOrRange","view_position","_breakAttributes","_breakAttributesRange","view_range","move","positionOffset","positionParent","_removeFromClonedElementsGroup","mergeAttributes","mergeTextNodes","newPosition","validateNodesToInsert","errorContext","validNodesToInsert","validNode","isiterable","getParentContainer","_addToClonedElementsGroup","endPosition","rangeOrItem","validateRangeContainer","breakStart","breakEnd","parentContainer","mergePosition","walker","getWalker","rangeToRemove","ancestor","countBefore","_hasNonUiChildren","_wrapPosition","setSelection","_wrapRange","_unwrapChildren","groupName","view_selection","wrapElement","wrapPositions","isAttribute","isUI","_wrapAttributeElement","shouldABeOutsideB","newAttribute","_wrapChildren","offsetChange","unwrapElement","unwrapPositions","unwrapped","_unwrapAttributeElement","movePositionToTextNode","breakTextNode","fakePosition","createAttributeElement","wrapRange","wrap","wrapper","toWrap","canBeJoined","getStyleNames","setStyle","toUnwrap","removeStyle","forceSplitText","rangeStart","rangeEnd","isContainerOrFragment","offsetAfter","clonedNode","nodesToMove","group","getIdentity","textToMove","t1","t2","nodeBeforeLength","insertAt","nodeToInsert","removeChild","renderer_Renderer","domDocuments","markedAttributes","markedChildren","markedTexts","_inlineFiller","_fakeSelectionContainer","inlineFillerPosition","_updateChildrenMappings","_isSelectionInInlineFiller","_removeInlineFiller","_getInlineFillerPosition","_needsInlineFillerAtSelection","_updateAttrs","_updateChildren","_updateText","fillerDomPosition","view_filler","addInlineFiller","_updateSelection","_updateFocus","actualDomChildren","expectedDomChildren","_diffNodeLists","_findReplaceActions","counter","equal","action","insertIndex","deleteIndex","_updateElementMappings","firstPos","selectionPosition","domFillerNode","selectionParent","selectionOffset","findAncestor","isEditable","newDomText","actualText","expectedText","fastdiff","insertData","deleteData","domAttrKeys","viewAttrKeys","nodesToUnbind","_markDescendantTextToSync","domChildList","fakeSelectionContainer","childList","filterOutFakeSelectionContainer","src_diff","actualDomChild","expectedDomChild","actualDom","expectedDom","newActions","actualSlice","expectedSlice","areSimilar","_removeDomSelection","_removeFakeSelection","domRoot","_updateFakeSelection","_updateDomSelection","removeAllRanges","selectNodeContents","addRange","bindFakeSelection","_domSelectionNeedsUpdate","childAtOffset","fixGeckoSelectionAfterBr","isDomSelectionCorrect","oldViewSelection","domSelectionToView","activeDomElement","domParentOrArray","nodeAfterFiller","fillerNode","node1","node2","isnode","lodash_es_isEqualWith","mutationobserver_MutationObserver","observer","characterData","characterDataOldValue","subtree","renderer","_renderer","_domElements","_mutationObserver","MutationObserver","_onMutations","takeRecords","observe","enable","disconnect","domMutations","mutatedTexts","mutatedElements","mutation","_isBogusBrMutation","oldText","newText","viewMutations","mutatedText","markToSync","viewChildren","newViewChildren","sameNodes","oldChildren","newChildren","viewSelectionAnchor","viewSelectionFocus","child1","child2","forceRender","addedNode","removedNodes","addedNodes","keyobserver_KeyObserver","metaKey","fakeselectionobserver_FakeSelectionObserver","_fireSelectionChangeDoneDebounced","debounce","_isArrowKeyCode","_handleSelectionMove","newSelection","oldSelection","selectionobserver_SelectionObserver","mutationObserver","getObserver","_documents","WeakSet","_clearInfiniteLoopInterval","setInterval","_clearInfiniteLoop","_loopbackCounter","_handleSelectionChange","clearInterval","flush","newViewSelection","focusobserver_FocusObserver","_renderTimeoutId","selectedEditable","compositionobserver_CompositionObserver","isComposing","inputobserver_InputObserver","scrollViewportToShowTarget","viewportOffset","targetWindow","getWindow","currentWindow","currentFrame","firstAncestorToScroll","scrollAncestorsToShowRect","getParentElement","getRectRelativeToWindow","scrollWindowToShowRect","frameElement","targetShiftedDownRect","targetShiftedUpRect","dom_rect","excludeScrollbarsAndBorders","isAbove","isBelow","isLeftOf","isRightOf","getRect","parentWindow","firstRect","secondRect","isrange","relativeWindow","frame","frameRect","scrollAncestorsToShowTarget","view_View","domconverter","domRoots","_initialDomRootAttributes","_observers","_ongoingChange","_postFixersInProgress","_renderingDisabled","_hasChangedSinceTheLastRendering","_writer","_render","viewRoot","initialDomRootAttributes","updateContenteditableAttribute","viewRangeToDom","isRenderingInProgress","callbackResult","_callPostFixers","flag","disableObservers","enableObservers","mapper_Mapper","_modelToViewMapping","_viewToModelMapping","_viewToModelLengthCallbacks","_markerNameToElements","_elementToMarkerNames","_unboundMarkerNames","viewContainer","modelPosition","_findPositionIn","viewBlock","findMappedViewAncestor","modelParent","modelOffset","_toModelOffset","model_position","modelElement","toModelElement","markerName","toViewElement","elements","names","nameToElements","elementToNames","markerNames","model_range","toModelPosition","toViewPosition","mapper","isPhantom","boundElements","getElementsWithSameId","viewElementName","lengthCallback","viewOffset","getModelLength","len","expectedOffset","lastLength","_moveViewPositionToTextNode","emittermixin","modelconsumable_ModelConsumable","_consumable","_textProxyRegistry","_normalizeConsumableType","textproxy","_getSymbolForTextProxy","itemConsumables","startMap","endMap","_addSymbolForTextProxy","downcastdispatcher_DowncastDispatcher","dispatcher","differ","getMarkersToRemove","convertMarkerRemove","getChanges","convertInsert","convertRemove","convertAttribute","attributeOldValue","attributeNewValue","flushUnboundMarkerNames","markerRange","getRange","convertMarkerAdd","getMarkersToAdd","_createInsertConsumable","_testAndFire","_clearConversionApi","_createConsumableForRange","markersAtSelection","getMarkersAtPosition","_createSelectionConsumable","marker","shouldMarkerChangeBeConverted","containsItem","selection_Selection","model_node","anyNewRange","_removeAllRanges","directChange","_popRange","attributeKeys","model_element","visited","startBlock","getParentBlock","isUnvisitedBlockContainer","endBlock","isTouching","selected","parentBlock","findAncestorBlock","limitStartPosition","limitEndPosition","_checkRange","isBlock","hasParentLimit","isLimit","storePrefix","documentselection_LiveSelection","hasOwnRange","isGravityOverridden","getTopMostBlocks","containsEntireContent","_updateMarkers","_updateAttributes","_getStoredAttributes","overrideGravity","restoreGravity","startsWith","_model","_attributePriority","_fixGraveyardRangesData","_hasChangedRange","_overriddenGravityRegister","liveRange","_fixGraveyardSelection","_validateSelectionRange","changeParent","isNoLongerEmpty","storedAttributes","clearAttributesStoredInElement","_getDefaultRange","optionsOrPlaceOrOffset","overrideUid","src_uid","_prepareRange","liverange","fromRange","selectionRange","clearAll","newAttributes","tomap","_getSurroundingAttributes","oldAttributes","_setAttributesTo","changed","newKey","oldKey","getAttrsIfCharacter","removedRangeStart","positionCandidate","getNearestSelectionRange","ConversionHelpers","dispatchers","_dispatchers","conversionHelper","lodash_es_cloneDeep","_baseClone","downcasthelpers_DowncastHelpers","normalizeToElementConfig","elementCreator","consume","downcastElementToElement","modelValue","getFromAttributeCreator","oldViewElement","newViewElement","viewWriter","toViewRange","unwrap","downcastAttributeToElement","normalizeToAttributeConfig","attributeCreator","oldAttribute","changeAttribute","downcastAttributeToAttribute","isOpening","viewStartElement","viewEndElement","bindElementToMarker","insertUIElement","markerNameToElements","unbindElementFromMarkerName","createRangeOn","clearClonedElementsGroup","downcastMarkerToElement","highlightDescriptor","descriptor","prepareDescriptor","createViewElementFromHighlightDescriptor","rangeAfterWrap","highlightText","highlightElement","viewHighlightElement","removeHighlight","downcastMarkerToHighlight","viewElementType","modelData","viewElementDefinition","createContainerElement","createUIElement","createViewElementFromDefinition","modelAttributeValue","upcasthelpers_UpcastHelpers","upcastElementToElement","normalizeModelAttributeConfig","converter","prepareToAttributeConverter","elementName","getViewElementNameFromConfig","upcastElementToAttribute","viewKey","keyName","normalizeViewAttributeKeyValueConfig","upcastAttributeToAttribute","oldModel","data-name","normalizeToMarkerConfig","upcastElementToMarker","view_matcher","matcherResult","getModelElement","splitResult","splitToAllowedParent","convertChildren","getSplitParts","createPositionBefore","createPositionAfter","cursorParent","prepareToElementConverter","viewAttributeKeyToCopy","defaultModelValue","modelKey","onlyViewNameIsDefined","modelAttribute","setAttributeOn","editingcontroller_EditingController","downcastDispatcher","_disableRendering","convertChanges","convertSelection","modelSelection","toModelRange","convertSelectionChange","createText","modelEnd","createRangeIn","unbindViewElement","brokenPosition","breakAttributes","plugincollection_PluginCollection","availablePlugins","_editor","_availablePlugins","_plugins","PluginConstructor","plugin","errorMsg","plugins","removePlugins","that","loading","loaded","pluginConstructors","mapToAvailableConstructors","removePluginConstructors","missingPlugins","pluginNameOrConstructor","getPluginConstructor","getMissingPluginNames","Promise","reject","all","loadPlugin","then","initPlugins","RequiredPluginConstructorOrName","RequiredPluginConstructor","requiredBy","_add","instantiatePlugin","catch","err","loadedPlugins","promise","PluginConstructorOrName","promises","pluginInstance","plugin1","plugin2","commandcollection_CommandCollection","_commands","commandName","translate","language","translationKey","numberOfLanguages","CKEDITOR_TRANSLATIONS","hasTranslation","RTL_LANGUAGE_CODES","locale_Locale","uiLanguage","contentLanguage","getLanguageDirection","contentLanguageDirection","_t","str","translatedString","languageCode","ViewConsumable","_consumables","consumables","elementConsumables","viewconsumable_ViewElementConsumables","instance","consumablesFromElement","createFrom","_canConsumeName","_test","_consume","_revert","consumableName","schema_Schema","_sourceDefinitions","_attributeProperties","SchemaContext","getDefinition","itemName","_clearCache","_compiledDefinitions","_compile","getDefinitions","isInline","_checkContextMatch","attributeName","allowAttributes","positionOrBaseElement","elementToMerge","checkMerge","retValue","selectionOrRangeOrPosition","rangeCommonAncestor","getMinimalFlatRanges","convertToMinimalFlatRanges","_getValidRangesForRange","backwardWalker","forwardWalker","forward","combineWalkers","removeDisallowedAttributes","compiledDefinitions","sourceRules","itemNames","compileBaseItemRule","compileAllowContentOf","compileAllowWhere","compileAllowAttributesOf","compileInheritPropertiesFrom","cleanUpAllowIn","cleanUpAllowAttributes","contextItemIndex","contextItem","getItem","allowIn","parentRule","mapContextItem","query","getNames","endsWith","sourceItemRules","itemRule","allowContentOf","allowWhere","allowAttributesOf","inheritTypesFrom","sourceItemRule","typeNames","copyTypes","copyProperty","inheritFrom","makeInheritAllWork","allowContentOfItemName","getAllowedChildren","allowedItem","allowWhereItemName","allowedIn","allowAttributeOfItem","inheritAttributes","inheritPropertiesOfItem","existingItems","itemToCheck","getValues","ctxItem","upcastdispatcher_UpcastDispatcher","_splitParts","_modelCursor","_convertItem","_convertChildren","_splitToAllowedParent","_getSplitParts","contextDefinition","append","createContextTree","store","documentFragment","_removeEmptyElements","modelItem","markerElements","markerElement","currentPosition","extractMarkersFromModelFragment","nextModelCursor","allowedParent","findAllowedParent","treeWalkerValue","originalPart","splitPart","_registerSplitPair","list","anyRemoved","datacontroller_DataController","dataProcessor","processor","_checkIfRootsExists","hasContent","ignoreWhitespaces","modelElementOrFragment","viewDocumentFragment","clearBindings","elementRange","intersection","_getMarkersRelativeToElement","version","initialData","main","modelRoot","parse","newData","viewElementOrFragment","rootNames","conversion_Conversion","downcastDispatchers","upcastDispatchers","_helpers","_downcast","_createConversionHelpers","isDowncast","_upcast","alias","_getAllUpcastDefinitions","attributeToElement","elementToAttribute","attributeToAttribute","helpers","_getUpcastDefinition","upcastAlso","upcastAlsoItem","Batch","op","detachoperation_DetachOperation","operation_operation","operation_utils","rootelement_RootElement","_doc","writer_Writer","model_documentfragment","_assertWriterUsedCorrectly","isSameTree","insertoperation","addOperation","applyOperation","rangeRootPosition","usingOperation","updateMarker","addMarker","itemOrRange","setAttributeOnRange","setAttributeOnItem","removeAttributesFromItem","_addOperationForAffectedMarkers","moveoperation","flat","applyRemoveOperation","_merge","_mergeDetached","createPositionFromPath","createSelection","merge","mergeoperation","renameOperation","renameoperation","limitElement","firstSplitElement","firstCopyElement","splitoperation","elementOrString","shiftedRange","applyMarkerOperation","_set","markerOrName","currentMarker","_refresh","hasUsingOperationDefined","affectsDataDefined","currentRange","updatedRange","managedUsingOperations","keyOrObjectOrIterable","_setSelectionAttribute","keyOrIterableOfKeys","_removeSelectionAttribute","_overrideGravity","_restoreGravity","storeKey","_getStoreAttributeKey","_currentWriter","isAffected","elementBefore","elementAfter","affectedInLeftElement","affectedInRightElement","affectedAfterLeftElement","affectedBeforeRightElement","valueBefore","valueAfter","lastSplitPosition","attributeoperation","previousValue","rootattributeoperation","markeroperation","rootA","rootB","differ_Differ","markerCollection","_markerCollection","_changesInElement","_elementSnapshots","_changedMarkers","_changeCount","_cachedChanges","_cachedChangesWithGraveyard","_isInInsertedElement","_markRemove","_markInsert","getMarkersIntersectingRange","bufferMarkerChange","_markAttribute","sourceParentInserted","targetParentInserted","graveyardParent","mergedIntoElement","buffered","includeChangesInGraveyard","diffSet","changes","snapshotChildren","elementChildren","_getChildrenSnapshot","_generateActionsFromChanges","_getInsertDiff","_getRemoveDiff","elementAttributes","snapshotAttributes","_getAttributesDiff","changeCount","prevDiff","thisDiff","isConsecutiveTextRemove","isConsecutiveTextAdd","isConsecutiveAttributeChange","_changesInGraveyardFilter","changeItem","_markChange","_removeAllNestedChanges","_makeSnapshot","_getChangesForElement","_handleChange","inc","nodesToHandle","old","incEnd","oldEnd","intersectionLength","howManyAfter","attributePart","diffs","snapshot","oldChildrenLength","oldChildrenHandled","repeat","posInGy","rangeInGy","History","_operations","_undoPairs","_undoneOperations","undoneOperation","undoingOperation","isInsideSurrogatePair","character","isHighSurrogateHalf","isLowSurrogateHalf","isInsideCombinedSymbol","isCombiningMark","graveyardName","model_document_Document","history","_hasSelectionChangedFromTheLastChangeBlock","createRoot","bufferOperation","_hasDocumentChangedFromTheLastChangeBlock","hasDataChanges","reset","defaultRoot","_getDefaultRoot","validateTextNodePosition","rangeBoundary","markercollection_MarkerCollection","markercollection_Marker","oldMarker","hasChanged","_attachLiveRange","_managedUsingOperations","_affectsData","_destroyMarker","prefix","_detachLiveRange","_liveRange","insertcontent_Insertion","canMergeWith","_filterAttributesOf","_affectedStart","_affectedEnd","parentContext","_handleNode","isFirst","isLast","nodeToSelect","_handleObject","_checkAndSplitToAllowedPosition","_mergeSiblingsOf","_handleDisallowedNode","_tryAutoparagraphing","handleNodes","livePos","liveposition","fromPosition","_setAffectedBoundaries","mergeLeft","_canMergeLeft","mergeRight","_canMergeRight","mergePosLeft","mergePosRight","livePosition","_getAllowedIn","tempPos","selRange","doNotResetEntireContent","getLimitElement","shouldEntireContentBeReplacedWithParagraph","insertParagraph","replaceEntireContentWithParagraph","startPos","endPos","leaveUnmerged","mergeBranches","startParent","endParent","leftPos","rightPos","rangeToCheck","checkCanBeMerged","parentToRemove","collapseSelectionAt","isTextAllowed","isParagraphAllowed","shouldAutoparagraph","validSelectionRange","doNotAutoparagraph","wordBoundaryCharacters","modifySelection","isForward","searchEnd","getSearchRange","tryExtendingTo","setSelectionFocus","isAtWordBoundary","isAtNodeBoundary","boundaryChar","getCorrectWordBreakPosition","getCorrectPosition","offsetToCheck","removeRangeContent","parentsToCheck","itemRange","parentToCheck","removeRange","injectSelectionPostFixer","correctedRange","tryFixingRange","fixedRanges","selectionStart","selectionEnd","selectionPostFixer","originalPosition","nearestSelectionRange","fixedPosition","tryFixingCollapsedRange","isTextAllowedOnStart","isTextAllowedOnEnd","startLimitElement","endLimitElement","startIsOnBlock","endIsOnBlock","checkSelectionOnNonLimitElements","isStartObject","fixedStart","isEndObject","fixedEnd","isStartInLimit","isEndInLimit","bothInSameParent","expandStart","isInObject","expandEnd","findOutermostLimitAncestor","tryFixingNonCollapsedRage","startingNode","isLimitNode","model_Model","_pendingChanges","_validate","addChildCheck","childDefinition","_runPendingChanges","batchOrType","_execute","insertion","nodesToInsert","getSelectionRange","affectedRange","getAffectedRange","frag","commonPath","commonParent","getNodeByPath","flatSubtreeRange","appendText","leftExcessRange","rangeOrElement","intersectingMarker","ret","currentBatch","callbackReturnValue","_handleChangeBlock","editingkeystrokehandler_EditingKeystrokeHandler","editor_Editor","builtinPlugins","defaultConfig","languageConfig","state","addAlias","extraPlugins","init","readyPromise","componentfactory_ComponentFactory","_components","originalName","getNormalized","editorui_EditorUI","_editableElementsMap","update","ckeditorInstance","_editableElements","editorUI","editableuiview_EditableUIView","editingView","lang","_editableElement","_hasExternalElement","_editingView","_updateIsFocusedClasses","updateAfterRender","inlineeditableuiview_InlineEditableUIView","g","ListView","_ckeditor_ckeditor5_utils_src_focustracker__WEBPACK_IMPORTED_MODULE_1__","_focuscycler__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_keystrokehandler__WEBPACK_IMPORTED_MODULE_3__","ListItemView","allocUnsafe","copy","BoldEditing","_ckeditor_ckeditor5_core_src_plugin__WEBPACK_IMPORTED_MODULE_0__","_attributecommand__WEBPACK_IMPORTED_MODULE_1__","setAttributeProperties","isFormatting","font-weight","ItalicEditing","font-style","ChangeBuffer","limit","isLocked","_changeCallback","_batch","_reset","_selectionChangeCallback","createBatch","ignoreLock","inputcommand_InputCommand","undoStepSize","_buffer","_batches","textInsertions","resultRange","isCollapsedRange","lock","unlock","injectUnsafeKeystrokesHandling","latestCompositionSelection","inputCommand","handleUnsafeKeystroke","isSelectionUnchanged","keyData","safeKeycodes","isSafeKeystroke","deleteSelectionContent","isFlatSelection","getSingleTextNodeChange","output","lastOperation","pushLast","isContinuationOf","expected","diffToChanges","compareChildNodes","oldChild","newChild","injecttypingmutationshandling_MutationHandler","mutations","containerChildrenMutated","_handleContainerChildrenMutations","_handleTextMutation","_handleTextNodeInsertion","mutationsCommonAncestor","commonAncestor","getMutationsContainer","domMutationCommonAncestor","freshDomConverter","modelFromCurrentDom","currentModel","modelFromDomChildren","currentModelChildren","lastDomChild","lastCurrentChild","isSafeForTextMutation","diffResult","firstChangeAt","insertions","deletions","calculateChanges","modelSelectionRange","insertText","viewPos","modelPos","insertedText","lastChangeAt","input_Input","handle","injectTypingMutationsHandling","deletecommand_DeleteCommand","_shouldEntireContentBeReplacedWithParagraph","sequence","_replaceEntireContentWithParagraph","limitElementFirstChild","deleteobserver_DeleteObserver","fireViewDeleteEvent","originalEvent","domeventdata","hasWordModifier","inputType","selectionToRemove","delete_Delete","deleteCommandParams","domSelectionAfterDeletion","typing_Typing","nooperation_NoOperation","transformations","setTransformation","OperationA","OperationB","transformationFunction","aGroup","noUpdateTransformation","getTransformation","transformSets","operationsA","operationsB","contextFactory","transform_ContextFactory","useRelations","forceWeakRemove","setOriginalOperations","originalOperations","nextTransformIndex","nextBaseVersionA","nextBaseVersionB","originalOperationsACount","originalOperationsBCount","opA","indexB","opB","newOpsA","getContext","newOpsB","updateRelation","newOpA","padWithNoOps","brokenOperationsACount","brokenOperationsBCount","updateBaseVersions","_history","_useRelations","_forceWeakRemove","_relations","takeFrom","originalOperation","_setRelation","affectedLeft","affectedRight","side","wasInLeftElement","wasStartBeforeMergedElement","wasEndBeforeMergedElement","wasInRightElement","aIsStrong","aWasUndone","_wasUndone","bWasUndone","abRelation","_getRelation","baRelation","originalOp","wasUndone","isUndoneOperation","origB","undoneB","getUndoneOperation","origA","relationsA","relation","_getComplementaryAttributeOperations","insertOperation","insertValue","_moveTargetIntoMovedRange","_makeMoveOperationsFromRanges","hasSameParentAs","moveOp","_breakRangeByMoveOperation","aNewRange","aToGraveyard","bToGraveyard","removedRange","mergeInside","mergeSplittingElement","getReversed","aCompB","shouldSpread","rightRange","movesGraveyardElement","gyMoveSource","splitNodesMoveSource","gyMoveTarget","gyMove","splitNodesMoveTargetPath","splitNodesMoveTarget","splitNodesMove","renamePath","splitPath","additionalSplit","rangeToMove","gyElementMoved","newParentPosition","newTargetPath","howManyRemoved","aInGraveyard","bInGraveyard","newPositionPath","basecommand_BaseCommand","_stack","_createdBatches","docSelection","selectionRanges","transformSelectionRange","batchToUndo","undoingBatch","operationsToUndo","operationToUndo","nextBaseVersion","historyOperations","getOperations","reversedOperations","setOperationAsUndone","getTransformedByOperations","undocommand_UndoCommand","batchIndex","findIndex","_undo","_restoreSelection","redocommand_RedoCommand","redoingBatch","undoediting_UndoEditing","_batchRegistry","_undoCommand","_redoCommand","isRedoBatch","isUndoBatch","addBatch","clearStack","undoneBatch","entercommand_EnterCommand","isSelectionEmpty","attributesToCopy","splitBlock","isContainedWithinOneElement","enterBlock","splitPos","enter_Enter","enterobserver","enableToolbarKeyboardFocus","origin","originKeystrokeHandler","originFocusTracker","toolbar","beforeFocus","afterBlur","normalizeToolbarConfig","shiftentercommand_ShiftEnterCommand","insertBreak","softBreakAction","anchorPos","isInsideLimitElement","breakLineElement","shiftenter_ShiftEnter","createEmptyElement","essentials_Essentials","clipboard","typing","headingcommand_HeadingCommand","modelElements","heading","checkCanBecomeHeading","headingediting_HeadingEditing","defaultModelElement","title","option","_addDefaultH1Conversion","enterCommand","_ckeditor_ckeditor5_utils_src_dom_setdatainelement__WEBPACK_IMPORTED_MODULE_1__","ElementApiMixin","attachToForm","updateSourceElement","form","originalSubmit","onSubmit","submit","getLocalizedOptions","localizedTitles","Paragraph","Heading 1","Heading 2","Heading 3","Heading 4","Heading 5","Heading 6","headingui_HeadingUI","src_utils","defaultTitle","dropdownTooltip","titles","itemDefinitions","headingCommand","paragraphCommand","withText","commandValue","isOn","areEnabled","para","whichModel","heading_Heading","headingediting","ClickObserver","_domeventobserver__WEBPACK_IMPORTED_MODULE_0__","ElementReplacer","_replacedElements","classiceditorui_ClassicEditorUI","editorui","_toolbarConfig","normalizetoolbarconfig","_elementReplacer","elementreplacer","replacementElement","editingRoot","setEditableElement","attachDomRoot","_initPlaceholder","_initToolbar","restore","detachDomRoot","stickyPanel","limiterElement","viewportTopOffset","fillFromConfig","enabletoolbarkeyboardfocus","placeholderText","placeholder","boxededitoruiview_BoxedEditorUIView","editoruiview","_voiceLabelView","_createVoiceLabel","voiceLabel","labelview","toPx","tounit","stickypanelview_StickyPanelView","src_view","_contentPanelPlaceholder","isSticky","_panelRect","_contentPanel","_hasViewportTopOffset","_isStickyToTheLimiter","limiterBottomOffset","marginLeft","_checkIfShouldBeSticky","_limiterRect","isActive","_marginLeft","classiceditoruiview_ClassicEditorUIView","inlineeditableuiview","classiceditor_ClassicEditor","editor_editor","sourceElementOrData","attachtoform","getdatafromelement","getInitialData","dataapimixin","elementapimixin","_baseClone_js__WEBPACK_IMPORTED_MODULE_0__","lodash_es_now","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","lodash_es_toNumber","isSymbol","isBinary","FUNC_ERROR_TEXT","nativeMin","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","md5","_unused_webpack_default_export","HxOverrides","__name__","dateStr","date","getMonth","getDate","h","getHours","mi","getMinutes","getSeconds","getFullYear","strDate","setTime","setUTCHours","setUTCMinutes","setUTCSeconds","cca","charCodeAt","iter","hasNext","IntIter","__class__","Std","v","js","Boot","__instanceof","__string_rec","isNaN","parseFloat","com","wiris","JsPluginTools","tryReady","ev","getInstance","haxe","Timer","delay","$bind","bypassEncapsulation","md5encode","Md5","encode","doLoad","ready","Lib","readyState","Log","trace","infos","__trace","__clear_trace","doEncode","str2blks","olda","oldb","oldc","oldd","ff","gg","hh","ii","addme","rhex","cmn","bitXOR","bitOR","bitAND","q","rol","num","cnt","nblk","blks","_g1","_g","lsw","time_ms","me","run","f","measure","t0","getTime","$_","scope","__unhtml","msg","fileName","lineNumber","getElementById","log","isClass","isEnum","__ename__","getClass","__enum__","i1","tostr","s2","hasp","__interfLoop","cc","cl","intf","__interfaces__","__super__","Int","ceil","Float","Bool","Dynamic","Enum","__cast","debug","alert","eval","setErrorHandler","onerror","NaN","NEGATIVE_INFINITY","isFinite","Boolean","Void","url","line","Constants","safeXmlCharactersEntities","tagOpener","tagCloser","doubleQuote","realDoubleQuote","safeBadBlackboardCharacters","ltElement","gtElement","ampElement","safeGoodBlackboardCharacters","xmlCharacters","ampersand","quote","safeXmlCharacters","mathml_MathML","expression","reversed","_wrs_blackboard","returnValue","currentEntity","mathml","toReturn","codePointAt","util_Util","fixedCharCodeAt","innerText","customEditor","annotationEncoding","mathmlWithAnnotation","closeSemanticsIndex","endIndexInline","endIndexNonInline","endIndex","beginMathMLContent","endMathmlContent","mathmlContent","mathmlWithoutAnnotation","openAnnotationTag","startAnnotationIndex","differentAnnotationFound","differentAnnotationIndex","endAnnotationIndex","removeSemantics","mathmlWithoutSemantics","startSemantics","startAnnotation","characters","mathTagStart","mathTagEnd","mathTagEndline","semanticsTagStart","annotationTagStart","mathTagEndIndex","mathTagEndlineIndex","firstTagCloser","semanticsIndex","mmlTagStart","annotationIndex","startIndex","mathML","classIndex","classTagEndIndex","firstCloseTagIndex","firstCloseTagInlineIndex","empty","mathTagEndArray","Configuration","_properties","updateProperty","TextCache","Listeners","listener","cancelled","defaultPrevented","serviceprovider_ServiceProvider","_listeners","parameters","_parameters","servicePaths","_servicePaths","service","serviceName","integrationPath","_integrationPath","location","href","configurationURI","createServiceURI","createImageURI","showImageURI","getMathMLURI","serviceURI","URI","serverPath","getServerURL","setServicePath","postVariables","currentPath","httpRequest","createHttpRequest","open","setRequestHeader","send","httpBuildQuery","responseText","response","serviceUrl","getServicePath","getUrl","extension","serverExtension","concatenateUrl","server","latex_Latex","_cache","mml","jsonResponse","getService","latex","status","latexHtmlEntitiesEncoded","htmlEntities","mathmlWithSemantics","addAnnotation","populate","includeLatexOnSemantics","latexCache","saveLatex","mathTagBegin","openTarget","closeTarget","closeAnnotation","safeXmlDecode","caretPosition","latexTags","close","startNode","getNextLatexPosition","nodeValue","isPrevious","endNode","tagLength","StringManager","strings","eventTarget","createEvent","eventObject","initEvent","dispatchEvent","createEventObject","fireEvent","callBackFunction","attachEvent","detachEvent","doubleClickHandler","mousedownHandler","mouseupHandler","addEvent","realEvent","srcElement","containsClass","currentClasses","newClassName","xitpos","valpos","startquote","endquote","newvalue","creator","html","objectCode","recursiveParamsFix","attributesParsed","nodeName","param","NAME","VALUE","replaceChild","applet","specified","createObject","path1","path2","separator","textarea","XMLHttpRequest","ActiveXObject","oc","urlEncode","s1","compareStrings","an","bn","idx","hi","ss","kv","decodeURIComponent","clearString","encodeURIComponent","imgCode","convertToXml","convertToSafeXml","imgObject","dataMathML","removeAnnotation","safeXmlEncode","staticNodeLengths","IMG","BR","toUpperCase","getNodeLength","isIframe","forceGetSelection","windowTarget","contentWindow","htmlText","getSelectedItem","execCommand","temporalObject","pasteHTML","textNodeValues","getLatexFromTextNode","autoClosed","endString","PLUS","SLASH","NUMBER","LOWER","UPPER","PLUS_URL_SAFE","SLASH_URL_SAFE","b64String","placeHolders","decode64","bytes","int32","selectionEndSub","textareaStart","parameter","sep","image_Image","img","attributesToRemove","originImg","destImg","customEditorAttributeName","originAttribute","uri","ar","base64String","svgString","getMetricsFromSvgString","src","b64ToByteArray","getMetricsFromBytes","urlToAssArray","cw","ch","baseline","cb","dpi","verticalAlign","maxWidth","setImgSize","base64","typ","readBytes","readInt32","readByte","round","accessibility_Accessibility","containClass","accessibleText","accessibleJsonResponse","parser_Parser","wirisProperties","align","metrics","centerbaseline","mathmlSubstring","createImageSrc","mathMLToAccessible","createShowImageSrc","format","baseParts","initParseSaveMode","initParseEditMode","parseMathmlToLatex","parseMathmlToImg","codeImgTransform","imgList","getElementsByNameFromString","token","carry","mathmlStartToken","mathmlStart","mathmlEnd","latexStartPosition","latexEndPosition","replaceText","htmlEntitiesDecode","codeEndParsedEditMode","endParseEditMode","endParseSaveMode","decodedLatex","getMathMLFromLatex","dataMd5","renderParams","dataObject","formula","propertiesToString","patternLength","characterNextPosition","xmlCode","mathmlToImgObject","createObjectCode","getWIRISImageOutput","imageMathmlAtrribute","isMathmlInAttribute","mathMLEntities","Config","EditorListener","isContentChanged","waitingForChanges","contentmanager_ContentManager","contentManagerAttributes","editorAttributes","customEditors","environment","editorListener","ua","deviceProperties","isIOS","modalDialogInstance","isNewElement","integrationModel","isEditorLoaded","updateTitle","insertEditor","jsEditor","JsEditor","newInstance","insertInto","contentContainer","rtl","getEditorModel","isRTL","addEditorListener","hideKeyboard","formulaDisplayDiv","getElementsByClassName","handleOpenedIosSoftkeyboard","handleClosedIosSoftkeyboard","script","editorUrl","urlObject","protocol","port","hostname","pathname","stats","getElementsByTagName","setMathML","focusDisabled","setMathMLWithCallback","setWaitingForChanges","setIsContentChanged","onFocus","isFormulaEmpty","updateFormula","getMathMLWithSemantics","getActiveEditor","addCustomEditorClassAttribute","editors","removeCustomEditorClassAttribute","mathmlEntitiesEncoded","notifyWindowClosed","setEmptyMathML","updateToolbar","_wrs_int_wirisProperties","setToolbar","getToolbar","setTitle","setParams","getIsContentChanged","keyboardEvent","cancelAction","submitButton","cancelButton","CustomEditors","activeEditor","editorName","editorParams","confVariable","customEditorName","jsvariables","imageCustomEditorName","imageClassName","CASClassName","Event","PopUpMessage","popupMessageAttributes","overlayElement","overlayWrapper","overlay","buttonArea","buttonSubmitArguments","submitString","closeButton","createButton","closeAction","buttonCancelArguments","cancelString","blur","_wrs_modalWindow","cancelCallback","closeCallback","modal_ModalDialog","modalDialogAttributes","iosSoftkeyboardOpened","iosMeasureUnit","iosDivHeight","deviceWidth","outerWidth","deviceHeight","outerHeight","landscape","portrait","isLandscape","isPortrait","isMobile","instanceId","orientation","isDesktop","created","previousState","websiteBeforeLockParameters","getElementId","titleBar","closeDiv","stackDiv","maximizeDiv","minimizeDiv","controls","buttonContainer","createSubmitButton","submitAction","contentManager","popupStrings","popupupProperties","popup","hasChanges","showPopUpMessage","getElement","recalculateScrollBar","createModalWindowDesktop","createResizeButtons","addListeners","maximize","createModalWindowAndroid","createModalWindowIos","scrollbarWidth","resizerBR","resizerTL","activateResizeStateBR","activateResizeStateTL","mouseEvent","initializeResizeProperties","leftOption","resizeDataObject","eventClient","X","Y","initialWidth","initialHeight","leftScale","initialRight","initialBottom","restoreWebsiteScale","lockWebsiteScroll","restoreState","setContainerHeight","newListener","onOpen","addListener","saveModalProperties","unlockWebsiteScroll","viewportmeta","contentAttrsToUpdate","contentAttrsValuesToUpdate","setMetaAttrFunc","viewportelement","contentAttrs","contentAttr","attrArray","finalContentMeta","oldAttrs","isAttrToUpdate","bodyStylePosition","bodyStyleOverflow","overflow","htmlStyleOverflow","windowScrollX","windowScrollY","orientationChangeAndroidSoftkeyboard","orientationChangeIosSoftkeyboard","minimize","restoreModalProperties","setResizeButtonsVisibility","recalculatePosition","recalculateScale","removeListeners","setSize","setPosition","recalculateSize","visibility","startDrag","stopDrag","drag","onWindowResize","onKeyDown","removeEvent","changedTouches","dragDataObject","lastDrag","isIE11","limitWindow","getLimitWindow","limitY","minPointer","maxPointer","limitX","dragX","dragY","scaleMultiplier","maxHeight","contStyleBottom","contStyleRight","pageXOffset","offSetToolbarY","offSetToolbarX","minPointerY","maxPointerY","inner","outer","widthOuter","widthInner","sizeModificated","hasScrollBar","getScrollBarWidth","inputField","portraitMode","show","second","varArgs","nextSource","nextKey","core_src_Core","coreProperties","editMode","modalDialog","addEditor","editionProperties","temporalImage","latexRange","browser","serviceProviderProperties","globalListeners","_globalListeners","initialized","_initialized","integrationEnvironment","serviceProviderListener","jsConfiguration","jsonConfiguration","addConfiguration","beforeUpdateEvent","focusElement","returnObject","getLatexFromMathML","fillNonLatexNode","afterUpdateEvent","insertElementOnSelection","nodeDocument","setStartAfter","updateTextArea","editorSelection","deleteContents","splitText","placeCaretAfterNode","select","insertNode","getSelectedItemOnTextarea","updateExistingTextOnTextarea","removeImgDataAttributes","selectedItem","getMathmlFromTextNode","latexResult","leftOffset","previousNode","moveToElementText","moveEnd","defaultEditorAttributesArray","defaultEditorAttributes","tempAttribute","serverEditorParameters","cliendEditorParameters","editorParameters","setContentManager","setModalDialogInstance","setIntegrationModel","integrationmodel_IntegrationModel","integrationModelProperties","configurationService","scriptName","callbackMethodArguments","editorObject","managesLanguage","temporalImageResizing","core","integrationParameters","getLanguage","callbackFunction","getServerLanguageFromService","configurationIndex","subsTring","serviceParametersURI","setCore","setEnvironment","col","openModalDialog","util","EditorUtils","beforeUpdateFormula","insertFormula","afterUpdateFormula","addElementEvents","getCustomEditors","openExistingFormulaEditor","fixAfterResize","getBrowserLanguage","userLanguage","addEvents","viewElements","viewMath","modelMath","mathmlschema_attributes","mathmlschema_schema","realName","modelName","needsCasting","allowsText","xmldataprocessor_XmlDataProcessor","namespaces","basichtmlwriter","nsp","parsedDocument","parserError","mathmldataprocessor_MathmlDataProcessor","frontier","closest","domParser","out","src_mathml_MathML","addAttributeCheck","contextArray","custommathmldataprocessor_CustomMathmlDataProcessor","mathPattern","innerStartIndex","closeStartIndex","htmlPieces","mathmlPieces","piece","acc","integration_CKEditor5Integration","ckeditorIntegrationModelProperties","integrationFolderName","wirislistenersdisabled","checkElement","wirisActive","setTarget","customEditorAttr","addEditorListeners","openNewFormulaEditor","getCore","mathmlDP","modelElementNew","modelElementOld","pivot","descendants","findText","insertMathml","mathtype_MathType","integration","chemtype_ChemType","chem","WirisPlugin","Core","Parser","Image","MathML","Util","IntegrationModel","Latex","classiceditor","essentials","math","htmlDataProcessor","mathString","imgHtml","initParse","imgElement","imgAttributes","downcast","integrationProperties","detail","clickobserver","classList"],"mappings":"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","file":"features/mathtype/snippet.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 372);\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/ckeditorerror\n */\n\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL =\n\t'https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html';\n\n/**\n * The CKEditor error class.\n *\n * You should throw `CKEditorError` when:\n *\n * * An unexpected situation occurred and the editor (most probably) will not work properly. Such exception will be handled\n * by the {@link module:watchdog/watchdog~Watchdog watchdog} (if it is integrated),\n * * If the editor is incorrectly integrated or the editor API is used in the wrong way. This way you will give\n * feedback to the developer as soon as possible. Keep in mind that for common integration issues which should not\n * stop editor initialization (like missing upload adapter, wrong name of a toolbar component) we use `console.warn()` with\n * {@link module:utils/ckeditorerror~attachLinkToDocumentation `attachLinkToDocumentation()`}\n * to improve developers experience and let them see the working editor as soon as possible.\n *\n *\t\t/**\n *\t\t * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\n *\t\t *\n *\t\t * @error plugin-load\n *\t\t * @param pluginName The name of the plugin that could not be loaded.\n *\t\t * @param moduleName The name of the module which tried to load this plugin.\n *\t\t * /\n *\t\tthrow new CKEditorError( 'plugin-load: It was not possible to load the \"{$pluginName}\" plugin in module \"{$moduleName}', {\n *\t\t\tpluginName: 'foo',\n *\t\t\tmoduleName: 'bar'\n *\t\t} );\n *\n * @extends Error\n */\nexport default class CKEditorError extends Error {\n\t/**\n\t * Creates an instance of the CKEditorError class.\n\t *\n\t * @param {String} message The error message in an `error-name: Error message.` format.\n\t * During the minification process the \"Error message\" part will be removed to limit the code size\n\t * and a link to this error documentation will be added to the `message`.\n\t * @param {Object|null} context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}\n\t * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also\n\t * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).\n\t * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility\n\t * to check if the object works as the context.\n\t * @param {Object} [data] Additional data describing the error. A stringified version of this object\n\t * will be appended to the error message, so the data are quickly visible in the console. The original\n\t * data object will also be later available under the {@link #data} property.\n\t */\n\tconstructor( message, context, data ) {\n\t\tmessage = attachLinkToDocumentation( message );\n\n\t\tif ( data ) {\n\t\t\tmessage += ' ' + JSON.stringify( data );\n\t\t}\n\n\t\tsuper( message );\n\n\t\t/**\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = 'CKEditorError';\n\n\t\t/**\n\t\t * A context of the error by which the Watchdog is able to determine which editor crashed.\n\t\t *\n\t\t * @type {Object|null}\n\t\t */\n\t\tthis.context = context;\n\n\t\t/**\n\t\t * The additional error data passed to the constructor. Undefined if none was passed.\n\t\t *\n\t\t * @type {Object|undefined}\n\t\t */\n\t\tthis.data = data;\n\t}\n\n\t/**\n\t * Checks if the error is of the `CKEditorError` type.\n\t */\n\tis( type ) {\n\t\treturn type === 'CKEditorError';\n\t}\n}\n\n/**\n * Attaches the link to the documentation at the end of the error message. Use whenever you log a warning or error on the\n * console. It is also used by {@link module:utils/ckeditorerror~CKEditorError}.\n *\n *\t\t /**\n *\t\t  * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t  * name does not exist so it was omitted when rendering the toolbar.\n *\t\t  *\n *\t\t  * @error toolbarview-item-unavailable\n *\t\t  * @param {String} name The name of the component.\n *\t\t  * /\n *\t\t console.warn( attachLinkToDocumentation(\n *\t\t \t'toolbarview-item-unavailable: The requested toolbar item is unavailable.' ), { name } );\n *\n * @param {String} message Message to be logged.\n * @returns {String}\n */\nexport function attachLinkToDocumentation( message ) {\n\tconst matchedErrorName = message.match( /^([^:]+):/ );\n\n\tif ( !matchedErrorName ) {\n\t\treturn message;\n\t}\n\n\treturn message + ` Read more: ${ DOCUMENTATION_URL }#error-${ matchedErrorName[ 1 ] }\\n`;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/plugin\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor plugin classes.\n *\n * @implements module:core/plugin~PluginInterface\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * Note that most editors implement the {@link module:core/editor/editorwithui~EditorWithUI} interface in addition\n\t\t * to the base {@link module:core/editor/editor~Editor} interface. However, editors with an external UI\n\t\t * (i.e. Bootstrap-based) or a headless editor may not implement the {@link module:core/editor/editorwithui~EditorWithUI}\n\t\t * interface.\n\t\t *\n\t\t * Because of above, to make plugins more universal, it is recommended to split features into:\n\t\t *  - The \"editing\" part that only uses the {@link module:core/editor/editor~Editor} interface.\n\t\t *  - The \"UI\" part that uses both the {@link module:core/editor/editor~Editor} interface and\n\t\t *  the {@link module:core/editor/editorwithui~EditorWithUI} interface.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n}\n\nmix( Plugin, ObservableMixin );\n\n/**\n * The base interface for CKEditor plugins.\n *\n * In its minimal form a plugin can be a simple function that accepts {@link module:core/editor/editor~Editor the editor}\n * as a parameter:\n *\n *\t\t// A simple plugin that enables a data processor.\n *\t\tfunction MyPlugin( editor ) {\n *\t\t\teditor.data.processor = new MyDataProcessor();\n *\t\t}\n *\n * In most cases however, you will want to inherit from the {@link module:core/plugin~Plugin} class which implements the\n * {@link module:utils/observablemixin~ObservableMixin} and is, therefore, more convenient:\n *\n *\t\tclass MyPlugin extends Plugin {\n *\t\t\tinit() {\n *\t\t\t\t// `listenTo()` and `editor` are available thanks to `Plugin`.\n *\t\t\t\t// By using `listenTo()` you will ensure that the listener is removed when\n *\t\t\t\t// the plugin is destroyed.\n *\t\t\t\tthis.listenTo( this.editor.data, 'ready', () => {\n *\t\t\t\t\t// Do something when the data is ready.\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n * The plugin can also implement methods (e.g. {@link module:core/plugin~PluginInterface#init `init()`} or\n * {@link module:core/plugin~PluginInterface#destroy `destroy()`}) which, when present, will be used to properly\n * initialize and destroy the plugin.\n *\n * **Note:** When defined as a plain function, the plugin acts as a constructor and will be\n * called in parallel with other plugins' {@link module:core/plugin~PluginInterface#constructor constructors}.\n * This means the code of that plugin will be executed **before** {@link module:core/plugin~PluginInterface#init `init()`} and\n * {@link module:core/plugin~PluginInterface#afterInit `afterInit()`} methods of other plugins and, for instance,\n * you cannot use it to extend other plugins' {@glink framework/guides/architecture/editing-engine#schema schema}\n * rules as they are defined later on during the `init()` stage.\n *\n * @interface PluginInterface\n */\n\n/**\n * Creates a new plugin instance. This is the first step of the plugin initialization.\n * See also {@link #init} and {@link #afterInit}.\n *\n * A plugin is always instantiated after its {@link module:core/plugin~PluginInterface.requires dependencies} and the\n * {@link #init} and {@link #afterInit} methods are called in the same order.\n *\n * Usually, you will want to put your plugin's initialization code in the {@link #init} method.\n * The constructor can be understood as \"before init\" and used in special cases, just like\n * {@link #afterInit} serves the special \"after init\" scenarios (e.g.the code which depends on other\n * plugins, but which does not {@link module:core/plugin~PluginInterface.requires explicitly require} them).\n *\n * @method #constructor\n * @param {module:core/editor/editor~Editor} editor\n */\n\n/**\n * An array of plugins required by this plugin.\n *\n * To keep the plugin class definition tight it is recommended to define this property as a static getter:\n *\n *\t\timport Image from './image.js';\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ Image ];\n *\t\t\t}\n *\t\t}\n *\n * @static\n * @readonly\n * @member {Array.<Function>|undefined} module:core/plugin~PluginInterface.requires\n */\n\n/**\n * An optional name of the plugin. If set, the plugin will be available in\n * {@link module:core/plugincollection~PluginCollection#get} by its\n * name and its constructor. If not, then only by its constructor.\n *\n * The name should reflect the constructor name.\n *\n * To keep the plugin class definition tight it is recommended to define this property as a static getter:\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get pluginName() {\n *\t\t\t\treturn 'ImageCaption';\n *\t\t\t}\n *\t\t}\n *\n * Note: The native `Function.name` property could not be used to keep the plugin name because\n * it will be mangled during code minification.\n *\n * Naming a plugin is necessary to enable removing it through the\n * {@link module:core/editor/editorconfig~EditorConfig#removePlugins `config.removePlugins`} option.\n *\n * @static\n * @readonly\n * @member {String|undefined} module:core/plugin~PluginInterface.pluginName\n */\n\n/**\n * The second stage (after plugin {@link #constructor}) of plugin initialization.\n * Unlike the plugin constructor this method can be asynchronous.\n *\n * A plugin's `init()` method is called after its {@link module:core/plugin~PluginInterface.requires dependencies} are initialized,\n * so in the same order as constructors of these plugins.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #init\n * @returns {null|Promise}\n */\n\n/**\n * The third (and last) stage of plugin initialization. See also {@link #constructor} and {@link #init}.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #afterInit\n * @returns {null|Promise}\n */\n\n/**\n * Destroys the plugin.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #destroy\n * @returns {null|Promise}\n */\n\n/**\n * Array of loaded plugins.\n *\n * @typedef {Array.<module:core/plugin~PluginInterface>} module:core/plugin~LoadedPlugins\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/range\n */\n\nimport Position from './position';\nimport TreeWalker from './treewalker';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\n/**\n * Represents a range in the model tree.\n *\n * A range is defined by its {@link module:engine/model/range~Range#start} and {@link module:engine/model/range~Range#end}\n * positions.\n *\n * You can create range instances via its constructor or the `createRange*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n */\nexport default class Range {\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t */\n\tconstructor( start, end = null ) {\n\t\t/**\n\t\t * Start position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position}\n\t\t */\n\t\tthis.start = Position._createAt( start );\n\n\t\t/**\n\t\t * End position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position}\n\t\t */\n\t\tthis.end = end ? Position._createAt( end ) : Position._createAt( start );\n\n\t\t// If the range is collapsed, treat in a similar way as a position and set its boundaries stickiness to 'toNone'.\n\t\t// In other case, make the boundaries stick to the \"inside\" of the range.\n\t\tthis.start.stickiness = this.isCollapsed ? 'toNone' : 'toNext';\n\t\tthis.end.stickiness = this.isCollapsed ? 'toNone' : 'toPrevious';\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n\t * them together with additional information like length or {@link module:engine/model/position~Position positions},\n\t * grouped as {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t * It iterates over all {@link module:engine/model/textproxy~TextProxy text contents} that are inside the range\n\t * and all the {@link module:engine/model/element~Element}s that are entered into when iterating over this range.\n\t *\n\t * This iterator uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range\n\t * and `ignoreElementEnd` option set to `true`.\n\t *\n\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\n\t}\n\n\t/**\n\t * Returns whether the range is collapsed, that is if {@link #start} and\n\t * {@link #end} positions are equal.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.start.isEqual( this.end );\n\t}\n\n\t/**\n\t * Returns whether this range is flat, that is if {@link #start} position and\n\t * {@link #end} position are in the same {@link module:engine/model/position~Position#parent}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isFlat() {\n\t\tconst startParentPath = this.start.getParentPath();\n\t\tconst endParentPath = this.end.getParentPath();\n\n\t\treturn compareArrays( startParentPath, endParentPath ) == 'same';\n\t}\n\n\t/**\n\t * Range root element.\n\t *\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.start.root;\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position Position to check.\n\t * @returns {Boolean} `true` if given {@link module:engine/model/position~Position position} is contained\n\t * in this range,`false` otherwise.\n\t */\n\tcontainsPosition( position ) {\n\t\treturn position.isAfter( this.start ) && position.isBefore( this.end );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link ~Range range}.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to check.\n\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n\t * @returns {Boolean} `true` if given {@link ~Range range} boundaries are contained by this range, `false` otherwise.\n\t */\n\tcontainsRange( otherRange, loose = false ) {\n\t\tif ( otherRange.isCollapsed ) {\n\t\t\tloose = false;\n\t\t}\n\n\t\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\n\t\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\n\n\t\treturn containsStart && containsEnd;\n\t}\n\n\t/**\n\t * Checks whether given {@link module:engine/model/item~Item} is inside this range.\n\t *\n\t * @param {module:engine/model/item~Item} item Model item to check.\n\t */\n\tcontainsItem( item ) {\n\t\tconst pos = Position._createBefore( item );\n\n\t\treturn this.containsPosition( pos ) || this.start.isEqual( pos );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\trange.is( 'range' ); // -> true\n\t *\t\trange.is( 'model:range' ); // -> true\n\t *\n\t *\t\trange.is( 'view:range' ); // -> false\n\t *\t\trange.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'range' || type == 'model:range';\n\t}\n\n\t/**\n\t * Two ranges are equal if their {@link #start} and {@link #end} positions are equal.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise.\n\t */\n\tisEqual( otherRange ) {\n\t\treturn this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end );\n\t}\n\n\t/**\n\t * Checks and returns whether this range intersects with given range.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges intersect, `false` otherwise.\n\t */\n\tisIntersecting( otherRange ) {\n\t\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\n\t}\n\n\t/**\n\t * Computes which part(s) of this {@link ~Range range} is not a part of given {@link ~Range range}.\n\t * Returned array contains zero, one or two {@link ~Range ranges}.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n\t *\t\tlet transformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has no ranges because `otherRange` contains `range`\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 3 ] ) );\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has one range: from [ 3 ] to [ 4, 0, 1 ]\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 4 ] ) );\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3 ] and from [ 4 ] to [ 4, 0, 1 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to differentiate against.\n\t * @returns {Array.<module:engine/model/range~Range>} The difference between ranges.\n\t */\n\tgetDifference( otherRange ) {\n\t\tconst ranges = [];\n\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect.\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the start to the middle of this range.\n\t\t\t\tranges.push( new Range( this.start, otherRange.start ) );\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the middle of this range to the end.\n\t\t\t\tranges.push( new Range( otherRange.end, this.end ) );\n\t\t\t}\n\t\t} else {\n\t\t\t// Ranges do not intersect, return the original range.\n\t\t\tranges.push( new Range( this.start, this.end ) );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an intersection of this {@link ~Range range} and given {@link ~Range range}.\n\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 2 ] ) );\n\t *\t\tlet transformed = range.getIntersection( otherRange ); // null - ranges have no common part\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n\t *\t\ttransformed = range.getIntersection( otherRange ); // range from [ 3 ] to [ 4, 0, 1 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to check for intersection.\n\t * @returns {module:engine/model/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n\t */\n\tgetIntersection( otherRange ) {\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect, so a common range will be returned.\n\t\t\t// At most, it will be same as this range.\n\t\t\tlet commonRangeStart = this.start;\n\t\t\tlet commonRangeEnd = this.end;\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means thaNt we have to\n\t\t\t\t// shrink common range to the given range start.\n\t\t\t\tcommonRangeStart = otherRange.start;\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// shrink common range to the given range end.\n\t\t\t\tcommonRangeEnd = otherRange.end;\n\t\t\t}\n\n\t\t\treturn new Range( commonRangeStart, commonRangeEnd );\n\t\t}\n\n\t\t// Ranges do not intersect, so they do not have common part.\n\t\treturn null;\n\t}\n\n\t/**\n\t * Computes and returns the smallest set of {@link #isFlat flat} ranges, that covers this range in whole.\n\t *\n\t * See an example of a model structure (`[` and `]` are range boundaries):\n\t *\n\t *\t\troot                                                            root\n\t *\t\t |- element DIV                         DIV             P2              P3             DIV\n\t *\t\t |   |- element H                   H        P1        f o o           b a r       H         P4\n\t *\t\t |   |   |- \"fir[st\"             fir[st     lorem                               se]cond     ipsum\n\t *\t\t |   |- element P1\n\t *\t\t |   |   |- \"lorem\"                                              ||\n\t *\t\t |- element P2                                                   ||\n\t *\t\t |   |- \"foo\"                                                    VV\n\t *\t\t |- element P3\n\t *\t\t |   |- \"bar\"                                                   root\n\t *\t\t |- element DIV                         DIV             [P2             P3]             DIV\n\t *\t\t |   |- element H                   H       [P1]       f o o           b a r        H         P4\n\t *\t\t |   |   |- \"se]cond\"            fir[st]    lorem                               [se]cond     ipsum\n\t *\t\t |   |- element P4\n\t *\t\t |   |   |- \"ipsum\"\n\t *\n\t * As it can be seen, letters contained in the range are: `stloremfoobarse`, spread across different parents.\n\t * We are looking for minimal set of flat ranges that contains the same nodes.\n\t *\n\t * Minimal flat ranges for above range `( [ 0, 0, 3 ], [ 3, 0, 2 ] )` will be:\n\t *\n\t *\t\t( [ 0, 0, 3 ], [ 0, 0, 5 ] ) = \"st\"\n\t *\t\t( [ 0, 1 ], [ 0, 2 ] ) = element P1 (\"lorem\")\n\t *\t\t( [ 1 ], [ 3 ] ) = element P2, element P3 (\"foobar\")\n\t *\t\t( [ 3, 0, 0 ], [ 3, 0, 2 ] ) = \"se\"\n\t *\n\t * **Note:** if an {@link module:engine/model/element~Element element} is not wholly contained in this range, it won't be returned\n\t * in any of the returned flat ranges. See in the example how `H` elements at the beginning and at the end of the range\n\t * were omitted. Only their parts that were wholly in the range were returned.\n\t *\n\t * **Note:** this method is not returning flat ranges that contain no nodes.\n\t *\n\t * @returns {Array.<module:engine/model/range~Range>} Array of flat ranges covering this range.\n\t */\n\tgetMinimalFlatRanges() {\n\t\tconst ranges = [];\n\t\tconst diffAt = this.start.getCommonPath( this.end ).length;\n\n\t\tconst pos = Position._createAt( this.start );\n\t\tlet posParent = pos.parent;\n\n\t\t// Go up.\n\t\twhile ( pos.path.length > diffAt + 1 ) {\n\t\t\tconst howMany = posParent.maxOffset - pos.offset;\n\n\t\t\tif ( howMany !== 0 ) {\n\t\t\t\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\n\t\t\t}\n\n\t\t\tpos.path = pos.path.slice( 0, -1 );\n\t\t\tpos.offset++;\n\t\t\tposParent = posParent.parent;\n\t\t}\n\n\t\t// Go down.\n\t\twhile ( pos.path.length <= this.end.path.length ) {\n\t\t\tconst offset = this.end.path[ pos.path.length - 1 ];\n\t\t\tconst howMany = offset - pos.offset;\n\n\t\t\tif ( howMany !== 0 ) {\n\t\t\t\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\n\t\t\t}\n\n\t\t\tpos.offset = offset;\n\t\t\tpos.path.push( 0 );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n\t *\n\t * For example, to iterate over all items in the entire document root:\n\t *\n\t *\t\t// Create a range spanning over the entire root content:\n\t *\t\tconst range = editor.model.createRangeIn( editor.model.document.getRoot() );\n\t *\n\t *\t\t// Iterate over all items in this range:\n\t *\t\tfor ( const value of range.getWalker() ) {\n\t *\t\t\tconsole.log( value.item );\n\t *\t\t}\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @param {module:engine/model/position~Position} [options.startPosition]\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n\t * them.\n\t *\n\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n\t * set to `true`. However it returns only {@link module:engine/model/item~Item model items},\n\t * not {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @method getItems\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/model/item~Item>}\n\t */\n\t* getItems( options = {} ) {\n\t\toptions.boundaries = this;\n\t\toptions.ignoreElementEnd = true;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.item;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/model/position~Position positions} that are boundaries or\n\t * contained in this range.\n\t *\n\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n\t * {@link module:engine/model/position~Position positions}, not {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/model/position~Position>}\n\t */\n\t* getPositions( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tyield treeWalker.position;\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.nextPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by given `operation`.\n\t *\n\t * **Note:** transformation may break one range into multiple ranges (for example, when a part of the range is\n\t * moved to a different part of document tree). For this reason, an array is returned by this method and it\n\t * may contain one or more `Range` instances.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to transform range by.\n\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n\t */\n\tgetTransformedByOperation( operation ) {\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert':\n\t\t\t\treturn this._getTransformedByInsertOperation( operation );\n\t\t\tcase 'move':\n\t\t\tcase 'remove':\n\t\t\tcase 'reinsert':\n\t\t\t\treturn this._getTransformedByMoveOperation( operation );\n\t\t\tcase 'split':\n\t\t\t\treturn [ this._getTransformedBySplitOperation( operation ) ];\n\t\t\tcase 'merge':\n\t\t\t\treturn [ this._getTransformedByMergeOperation( operation ) ];\n\t\t}\n\n\t\treturn [ new Range( this.start, this.end ) ];\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by multiple `operations`.\n\t *\n\t * @see ~Range#getTransformedByOperation\n\t * @param {Iterable.<module:engine/model/operation/operation~Operation>} operations Operations to transform the range by.\n\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n\t */\n\tgetTransformedByOperations( operations ) {\n\t\tconst ranges = [ new Range( this.start, this.end ) ];\n\n\t\tfor ( const operation of operations ) {\n\t\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\t\tconst result = ranges[ i ].getTransformedByOperation( operation );\n\n\t\t\t\tranges.splice( i, 1, ...result );\n\t\t\t\ti += result.length - 1;\n\t\t\t}\n\t\t}\n\n\t\t// It may happen that a range is split into two, and then the part of second \"piece\" is moved into first\n\t\t// \"piece\". In this case we will have incorrect third range, which should not be included in the result --\n\t\t// because it is already included in the first \"piece\". In this loop we are looking for all such ranges that\n\t\t// are inside other ranges and we simply remove them.\n\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\tconst range = ranges[ i ];\n\n\t\t\tfor ( let j = i + 1; j < ranges.length; j++ ) {\n\t\t\t\tconst next = ranges[ j ];\n\n\t\t\t\tif ( range.containsRange( next ) || next.containsRange( range ) || range.isEqual( next ) ) {\n\t\t\t\t\tranges.splice( j, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of the range's both ends (in which the entire range is contained).\n\t *\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor() {\n\t\treturn this.start.getCommonAncestor( this.end );\n\t}\n\n\t/**\n\t * Converts `Range` to plain object and returns it.\n\t *\n\t * @returns {Object} `Node` converted to plain object.\n\t */\n\ttoJSON() {\n\t\treturn {\n\t\t\tstart: this.start.toJSON(),\n\t\t\tend: this.end.toJSON()\n\t\t};\n\t}\n\n\t/**\n\t * Returns a new range that is equal to current range.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.start, this.end );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by insert operation.\n\t *\n\t * One or more ranges may be returned as a result of this transformation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n\t * @returns {Array.<module:engine/model/range~Range>}\n\t */\n\t_getTransformedByInsertOperation( operation, spread = false ) {\n\t\treturn this._getTransformedByInsertion( operation.position, operation.howMany, spread );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by move operation.\n\t *\n\t * One or more ranges may be returned as a result of this transformation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n\t * @returns {Array.<module:engine/model/range~Range>}\n\t */\n\t_getTransformedByMoveOperation( operation, spread = false ) {\n\t\tconst sourcePosition = operation.sourcePosition;\n\t\tconst howMany = operation.howMany;\n\t\tconst targetPosition = operation.targetPosition;\n\n\t\treturn this._getTransformedByMove( sourcePosition, targetPosition, howMany, spread );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by split operation.\n\t *\n\t * Always one range is returned. The transformation is done in a way to not break the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getTransformedBySplitOperation( operation ) {\n\t\tconst start = this.start._getTransformedBySplitOperation( operation );\n\t\tlet end = this.end._getTransformedBySplitOperation( operation );\n\n\t\tif ( this.end.isEqual( operation.insertionPosition ) ) {\n\t\t\tend = this.end.getShiftedBy( 1 );\n\t\t}\n\n\t\t// Below may happen when range contains graveyard element used by split operation.\n\t\tif ( start.root != end.root ) {\n\t\t\t// End position was next to the moved graveyard element and was moved with it.\n\t\t\t// Fix it by using old `end` which has proper `root`.\n\t\t\tend = this.end.getShiftedBy( -1 );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by merge operation.\n\t *\n\t * Always one range is returned. The transformation is done in a way to not break the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getTransformedByMergeOperation( operation ) {\n\t\t// Special case when the marker is set on \"the closing tag\" of an element. Marker can be set like that during\n\t\t// transformations, especially when a content of a few block elements were removed. For example:\n\t\t//\n\t\t// {} is the transformed range, [] is the removed range.\n\t\t// <p>F[o{o</p><p>B}ar</p><p>Xy]z</p>\n\t\t//\n\t\t// <p>Fo{o</p><p>B}ar</p><p>z</p>\n\t\t// <p>F{</p><p>B}ar</p><p>z</p>\n\t\t// <p>F{</p>}<p>z</p>\n\t\t// <p>F{}z</p>\n\t\t//\n\t\tif ( this.start.isEqual( operation.targetPosition ) && this.end.isEqual( operation.deletionPosition ) ) {\n\t\t\treturn new Range( this.start );\n\t\t}\n\n\t\tlet start = this.start._getTransformedByMergeOperation( operation );\n\t\tlet end = this.end._getTransformedByMergeOperation( operation );\n\n\t\tif ( start.root != end.root ) {\n\t\t\t// This happens when the end position was next to the merged (deleted) element.\n\t\t\t// Then, the end position was moved to the graveyard root. In this case we need to fix\n\t\t\t// the range cause its boundaries would be in different roots.\n\t\t\tend = this.end.getShiftedBy( -1 );\n\t\t}\n\n\t\tif ( start.isAfter( end ) ) {\n\t\t\t// This happens in three following cases:\n\t\t\t//\n\t\t\t// Case 1: Merge operation source position is before the target position (due to some transformations, OT, etc.)\n\t\t\t//         This means that start can be moved before the end of the range.\n\t\t\t//\n\t\t\t// Before: <p>a{a</p><p>b}b</p><p>cc</p>\n\t\t\t// Merge:  <p>b}b</p><p>cca{a</p>\n\t\t\t// Fix:    <p>{b}b</p><p>ccaa</p>\n\t\t\t//\n\t\t\t// Case 2: Range start is before merged node but not directly.\n\t\t\t//         Result should include all nodes that were in the original range.\n\t\t\t//\n\t\t\t// Before: <p>aa</p>{<p>cc</p><p>b}b</p>\n\t\t\t// Merge:  <p>aab}b</p>{<p>cc</p>\n\t\t\t// Fix:    <p>aa{bb</p><p>cc</p>}\n\t\t\t//\n\t\t\t//         The range is expanded by an additional `b` letter but it is better than dropping the whole `cc` paragraph.\n\t\t\t//\n\t\t\t// Case 3: Range start is directly before merged node.\n\t\t\t//         Resulting range should include only nodes from the merged element:\n\t\t\t//\n\t\t\t// Before: <p>aa</p>{<p>b}b</p><p>cc</p>\n\t\t\t// Merge:  <p>aab}b</p>{<p>cc</p>\n\t\t\t// Fix:    <p>aa{b}b</p><p>cc</p>\n\t\t\t//\n\n\t\t\tif ( operation.sourcePosition.isBefore( operation.targetPosition ) ) {\n\t\t\t\t// Case 1.\n\t\t\t\tstart = Position._createAt( end );\n\t\t\t\tstart.offset = 0;\n\t\t\t} else {\n\t\t\t\tif ( !operation.deletionPosition.isEqual( start ) ) {\n\t\t\t\t\t// Case 2.\n\t\t\t\t\tend = operation.deletionPosition;\n\t\t\t\t}\n\n\t\t\t\t// In both case 2 and 3 start is at the end of the merge-to element.\n\t\t\t\tstart = operation.targetPosition;\n\t\t\t}\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Returns an array containing one or two {@link ~Range ranges} that are a result of transforming this\n\t * {@link ~Range range} by inserting `howMany` nodes at `insertPosition`. Two {@link ~Range ranges} are\n\t * returned if the insertion was inside this {@link ~Range range} and `spread` is set to `true`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 1 ] ), 2 );\n\t *\t\t// transformed array has one range from [ 4, 7 ] to [ 6, 0, 1 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 4, 0, 0 ] ), 4 );\n\t *\t\t// transformed array has one range from [ 2, 7 ] to [ 4, 0, 5 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4 );\n\t *\t\t// transformed array has one range, which is equal to original range\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4, true );\n\t *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3, 2 ] and from [ 3, 6 ] to [ 4, 0, 1 ]\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @param {Boolean} [spread] Flag indicating whether this {~Range range} should be spread if insertion\n\t * was inside the range. Defaults to `false`.\n\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany, spread = false ) {\n\t\tif ( spread && this.containsPosition( insertPosition ) ) {\n\t\t\t// Range has to be spread. The first part is from original start to the spread point.\n\t\t\t// The other part is from spread point to the original end, but transformed by\n\t\t\t// insertion to reflect insertion changes.\n\n\t\t\treturn [\n\t\t\t\tnew Range( this.start, insertPosition ),\n\t\t\t\tnew Range(\n\t\t\t\t\tinsertPosition.getShiftedBy( howMany ),\n\t\t\t\t\tthis.end._getTransformedByInsertion( insertPosition, howMany )\n\t\t\t\t)\n\t\t\t];\n\t\t} else {\n\t\t\tconst range = new Range( this.start, this.end );\n\n\t\t\trange.start = range.start._getTransformedByInsertion( insertPosition, howMany );\n\t\t\trange.end = range.end._getTransformedByInsertion( insertPosition, howMany );\n\n\t\t\treturn [ range ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array containing {@link ~Range ranges} that are a result of transforming this\n\t * {@link ~Range range} by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position from which nodes are moved.\n\t * @param {module:engine/model/position~Position} targetPosition Position to where nodes are moved.\n\t * @param {Number} howMany How many nodes are moved.\n\t * @param {Boolean} [spread=false] Whether the range should be spread if the move points inside the range.\n\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany, spread = false ) {\n\t\t// Special case for transforming a collapsed range. Just transform it like a position.\n\t\tif ( this.isCollapsed ) {\n\t\t\tconst newPos = this.start._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\n\t\t\treturn [ new Range( newPos ) ];\n\t\t}\n\n\t\t// Special case for transformation when a part of the range is moved towards the range.\n\t\t//\n\t\t// Examples:\n\t\t//\n\t\t// <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p></div><p>c[d</p><p>e]f</p>\n\t\t// <p>e[f</p><div><p>a]b</p><p>cd</p></div> --> <p>e[f</p><p>a]b</p><div><p>cd</p></div>\n\t\t//\n\t\t// Without this special condition, the default algorithm leaves an \"artifact\" range from one of `differenceSet` parts:\n\t\t//\n\t\t// <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p>{</div>}<p>c[d</p><p>e]f</p>\n\t\t//\n\t\t// This special case is applied only if the range is to be kept together (not spread).\n\t\tconst moveRange = Range._createFromPositionAndShift( sourcePosition, howMany );\n\t\tconst insertPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( this.containsPosition( targetPosition ) && !spread ) {\n\t\t\tif ( moveRange.containsPosition( this.start ) || moveRange.containsPosition( this.end ) ) {\n\t\t\t\tconst start = this.start._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\t\t\t\tconst end = this.end._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\n\t\t\t\treturn [ new Range( start, end ) ];\n\t\t\t}\n\t\t}\n\n\t\t// Default algorithm.\n\t\tlet result;\n\n\t\tconst differenceSet = this.getDifference( moveRange );\n\t\tlet difference = null;\n\n\t\tconst common = this.getIntersection( moveRange );\n\n\t\tif ( differenceSet.length == 1 ) {\n\t\t\t// `moveRange` and this range may intersect but may be separate.\n\t\t\tdifference = new Range(\n\t\t\t\tdifferenceSet[ 0 ].start._getTransformedByDeletion( sourcePosition, howMany ),\n\t\t\t\tdifferenceSet[ 0 ].end._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t);\n\t\t} else if ( differenceSet.length == 2 ) {\n\t\t\t// `moveRange` is inside this range.\n\t\t\tdifference = new Range(\n\t\t\t\tthis.start,\n\t\t\t\tthis.end._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t);\n\t\t} // else, `moveRange` contains this range.\n\n\t\tif ( difference ) {\n\t\t\tresult = difference._getTransformedByInsertion( insertPosition, howMany, common !== null || spread );\n\t\t} else {\n\t\t\tresult = [];\n\t\t}\n\n\t\tif ( common ) {\n\t\t\tconst transformedCommon = new Range(\n\t\t\t\tcommon.start._getCombined( moveRange.start, insertPosition ),\n\t\t\t\tcommon.end._getCombined( moveRange.start, insertPosition )\n\t\t\t);\n\n\t\t\tif ( result.length == 2 ) {\n\t\t\t\tresult.splice( 1, 0, transformedCommon );\n\t\t\t} else {\n\t\t\t\tresult.push( transformedCommon );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns a copy of this range that is transformed by deletion of `howMany` nodes from `deletePosition`.\n\t *\n\t * If the deleted range is intersecting with the transformed range, the transformed range will be shrank.\n\t *\n\t * If the deleted range contains transformed range, `null` will be returned.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} deletionPosition Position from which nodes are removed.\n\t * @param {Number} howMany How many nodes are removed.\n\t * @returns {module:engine/model/range~Range|null} Result of the transformation.\n\t */\n\t_getTransformedByDeletion( deletePosition, howMany ) {\n\t\tlet newStart = this.start._getTransformedByDeletion( deletePosition, howMany );\n\t\tlet newEnd = this.end._getTransformedByDeletion( deletePosition, howMany );\n\n\t\tif ( newStart == null && newEnd == null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( newStart == null ) {\n\t\t\tnewStart = deletePosition;\n\t\t}\n\n\t\tif ( newEnd == null ) {\n\t\t\tnewEnd = deletePosition;\n\t\t}\n\n\t\treturn new Range( newStart, newEnd );\n\t}\n\n\t/**\n\t * Creates a new range, spreading from specified {@link module:engine/model/position~Position position} to a position moved by\n\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} position Beginning of the range.\n\t * @param {Number} shift How long the range should be.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createFromPositionAndShift( position, shift ) {\n\t\tconst start = position;\n\t\tconst end = position.getShiftedBy( shift );\n\n\t\treturn shift > 0 ? new this( start, end ) : new this( end, start );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @protected\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createIn( element ) {\n\t\treturn new this( Position._createAt( element, 0 ), Position._createAt( element, element.maxOffset ) );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/model/item~Item model item} and ends after it.\n\t *\n\t * @protected\n\t * @param {module:engine/model/item~Item} item\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createOn( item ) {\n\t\treturn this._createFromPositionAndShift( Position._createBefore( item ), item.offsetSize );\n\t}\n\n\t/**\n\t * Combines all ranges from the passed array into a one range. At least one range has to be passed.\n\t * Passed ranges must not have common parts.\n\t *\n\t * The first range from the array is a reference range. If other ranges start or end on the exactly same position where\n\t * the reference range, they get combined into one range.\n\t *\n\t *\t\t[  ][]  [    ][ ][             ][ ][]  [  ]  // Passed ranges, shown sorted\n\t *\t\t[    ]                                       // The result of the function if the first range was a reference range.\n\t *\t            [                           ]        // The result of the function if the third-to-seventh range was a reference range.\n\t *\t                                           [  ]  // The result of the function if the last range was a reference range.\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to combine.\n\t * @returns {module:engine/model/range~Range} Combined range.\n\t */\n\tstatic _createFromRanges( ranges ) {\n\t\tif ( ranges.length === 0 ) {\n\t\t\t/**\n\t\t\t * At least one range has to be passed to\n\t\t\t * {@link module:engine/model/range~Range._createFromRanges `Range._createFromRanges()`}.\n\t\t\t *\n\t\t\t * @error range-create-from-ranges-empty-array\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'range-create-from-ranges-empty-array: At least one range has to be passed.',\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if ( ranges.length == 1 ) {\n\t\t\treturn ranges[ 0 ].clone();\n\t\t}\n\n\t\t// 1. Set the first range in `ranges` array as a reference range.\n\t\t// If we are going to return just a one range, one of the ranges need to be the reference one.\n\t\t// Other ranges will be stuck to that range, if possible.\n\t\tconst ref = ranges[ 0 ];\n\n\t\t// 2. Sort all the ranges so it's easier to process them.\n\t\tranges.sort( ( a, b ) => {\n\t\t\treturn a.start.isAfter( b.start ) ? 1 : -1;\n\t\t} );\n\n\t\t// 3. Check at which index the reference range is now.\n\t\tconst refIndex = ranges.indexOf( ref );\n\n\t\t// 4. At this moment we don't need the original range.\n\t\t// We are going to modify the result and we need to return a new instance of Range.\n\t\t// We have to create a copy of the reference range.\n\t\tconst result = new this( ref.start, ref.end );\n\n\t\t// 5. Ranges should be checked and glued starting from the range that is closest to the reference range.\n\t\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\n\t\tif ( refIndex > 0 ) {\n\t\t\tfor ( let i = refIndex - 1; true; i++ ) {\n\t\t\t\tif ( ranges[ i ].end.isEqual( result.start ) ) {\n\t\t\t\t\tresult.start = Position._createAt( ranges[ i ].start );\n\t\t\t\t} else {\n\t\t\t\t\t// If ranges are not starting/ending at the same position there is no point in looking further.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 6. Ranges should be checked and glued starting from the range that is closest to the reference range.\n\t\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\n\t\tfor ( let i = refIndex + 1; i < ranges.length; i++ ) {\n\t\t\tif ( ranges[ i ].start.isEqual( result.end ) ) {\n\t\t\t\tresult.end = Position._createAt( ranges[ i ].end );\n\t\t\t} else {\n\t\t\t\t// If ranges are not starting/ending at the same position there is no point in looking further.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates a `Range` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Range`.\n\t * @param {module:engine/model/document~Document} doc Document object that will be range owner.\n\t * @returns {module:engine/model/element~Element} `Range` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\treturn new this( Position.fromJSON( json.start, doc ), Position.fromJSON( json.end, doc ) );\n\t}\n}\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/position\n */\n\nimport TreeWalker from './treewalker';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Text from './text';\nimport { last } from 'lodash-es';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Represents a position in the model tree.\n *\n * A position is represented by its {@link module:engine/model/position~Position#root} and\n * a {@link module:engine/model/position~Position#path} in that root.\n *\n * You can create position instances via its constructor or the `createPosition*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n *\n * **Note:** Position is based on offsets, not indexes. This means that a position between two text nodes\n * `foo` and `bar` has offset `3`, not `1`. See {@link module:engine/model/position~Position#path} for more information.\n *\n * Since a position in the model is represented by a {@link module:engine/model/position~Position#root position root} and\n * {@link module:engine/model/position~Position#path position path} it is possible to create positions placed in non-existing places.\n * This requirement is important for operational transformation algorithms.\n *\n * Also, {@link module:engine/model/operation/operation~Operation operations}\n * kept in the {@link module:engine/model/document~Document#history document history}\n * are storing positions (and ranges) which were correct when those operations were applied, but may not be correct\n * after the document has changed.\n *\n * When changes are applied to the model, it may also happen that {@link module:engine/model/position~Position#parent position parent}\n * will change even if position path has not changed. Keep in mind, that if a position leads to non-existing element,\n * {@link module:engine/model/position~Position#parent} and some other properties and methods will throw errors.\n *\n * In most cases, position with wrong path is caused by an error in code, but it is sometimes needed, as described above.\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t */\n\tconstructor( root, path, stickiness = 'toNone' ) {\n\t\tif ( !root.is( 'element' ) && !root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * Position root is invalid.\n\t\t\t *\n\t\t\t * Positions can only be anchored in elements or document fragments.\n\t\t\t *\n\t\t\t * @error model-position-root-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-root-invalid: Position root invalid.',\n\t\t\t\troot\n\t\t\t);\n\t\t}\n\n\t\tif ( !( path instanceof Array ) || path.length === 0 ) {\n\t\t\t/**\n\t\t\t * Position path must be an array with at least one item.\n\t\t\t *\n\t\t\t * @error model-position-path-incorrect-format\n\t\t\t * @param path\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-path-incorrect-format: Position path must be an array with at least one item.',\n\t\t\t\troot,\n\t\t\t\t{ path }\n\t\t\t);\n\t\t}\n\n\t\t// Normalize the root and path (if element was passed).\n\t\tpath = root.getPath().concat( path );\n\t\troot = root.root;\n\n\t\t/**\n\t\t * Root of the position path.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t\t * module:engine/model/position~Position#root\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Position of the node in the tree. **Path contains offsets, not indexes.**\n\t\t *\n\t\t * Position can be placed before, after or in a {@link module:engine/model/node~Node node} if that node has\n\t\t * {@link module:engine/model/node~Node#offsetSize} greater than `1`. Items in position path are\n\t\t * {@link module:engine/model/node~Node#startOffset starting offsets} of position ancestors, starting from direct root children,\n\t\t * down to the position offset in it's parent.\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P            before: [ 0 ]         after: [ 1 ]\n\t\t *\t\t  |- UL           before: [ 1 ]         after: [ 2 ]\n\t\t *\t\t     |- LI        before: [ 1, 0 ]      after: [ 1, 1 ]\n\t\t *\t\t     |  |- foo    before: [ 1, 0, 0 ]   after: [ 1, 0, 3 ]\n\t\t *\t\t     |- LI        before: [ 1, 1 ]      after: [ 1, 2 ]\n\t\t *\t\t        |- bar    before: [ 1, 1, 0 ]   after: [ 1, 1, 3 ]\n\t\t *\n\t\t * `foo` and `bar` are representing {@link module:engine/model/text~Text text nodes}. Since text nodes has offset size\n\t\t * greater than `1` you can place position offset between their start and end:\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P\n\t\t *\t\t  |- UL\n\t\t *\t\t     |- LI\n\t\t *\t\t     |  |- f^o|o  ^ has path: [ 1, 0, 1 ]   | has path: [ 1, 0, 2 ]\n\t\t *\t\t     |- LI\n\t\t *\t\t        |- b^a|r  ^ has path: [ 1, 1, 1 ]   | has path: [ 1, 1, 2 ]\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<Number>} module:engine/model/position~Position#path\n\t\t */\n\t\tthis.path = path;\n\n\t\t/**\n\t\t * Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n\t\t *\n\t\t * @member {module:engine/model/position~PositionStickiness} module:engine/model/position~Position#stickiness\n\t\t */\n\t\tthis.stickiness = stickiness;\n\t}\n\n\t/**\n\t * Offset at which this position is located in its {@link module:engine/model/position~Position#parent parent}. It is equal\n\t * to the last item in position {@link module:engine/model/position~Position#path path}.\n\t *\n\t * @type {Number}\n\t */\n\tget offset() {\n\t\treturn last( this.path );\n\t}\n\n\t/**\n\t * @param {Number} newOffset\n\t */\n\tset offset( newOffset ) {\n\t\tthis.path[ this.path.length - 1 ] = newOffset;\n\t}\n\n\t/**\n\t * Parent element of this position.\n\t *\n\t * Keep in mind that `parent` value is calculated when the property is accessed.\n\t * If {@link module:engine/model/position~Position#path position path}\n\t * leads to a non-existing element, `parent` property will throw error.\n\t *\n\t * Also it is a good idea to cache `parent` property if it is used frequently in an algorithm (i.e. in a long loop).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget parent() {\n\t\tlet parent = this.root;\n\n\t\tfor ( let i = 0; i < this.path.length - 1; i++ ) {\n\t\t\tparent = parent.getChild( parent.offsetToIndex( this.path[ i ] ) );\n\n\t\t\tif ( !parent ) {\n\t\t\t\tthrow new CKEditorError( 'model-position-path-incorrect: The position\\'s path is incorrect.', this, { position: this } );\n\t\t\t}\n\t\t}\n\n\t\tif ( parent.is( 'text' ) ) {\n\t\t\t/**\n\t\t\t * The position's path is incorrect. This means that a position does not point to\n\t\t\t * a correct place in the tree and hence, some of its methods and getters cannot work correctly.\n\t\t\t *\n\t\t\t * **Note**: Unlike DOM and view positions, in the model, the\n\t\t\t * {@link module:engine/model/position~Position#parent position's parent} is always an element or a document fragment.\n\t\t\t * The last offset in the {@link module:engine/model/position~Position#path position's path} is the point in this element where\n\t\t\t * this position points.\n\t\t\t *\n\t\t\t * Read more about model positions and offsets in\n\t\t\t * the {@glink framework/guides/architecture/editing-engine#indexes-and-offsets Editing engine architecture guide}.\n\t\t\t *\n\t\t\t * @error position-incorrect-path\n\t\t\t * @param {module:engine/model/position~Position} position The incorrect position.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-path-incorrect: The position\\'s path is incorrect.', this, { position: this } );\n\t\t}\n\n\t\treturn parent;\n\t}\n\n\t/**\n\t * Position {@link module:engine/model/position~Position#offset offset} converted to an index in position's parent node. It is\n\t * equal to the {@link module:engine/model/node~Node#index index} of a node after this position. If position is placed\n\t * in text node, position index is equal to the index of that text node.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget index() {\n\t\treturn this.parent.offsetToIndex( this.offset );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/model/text~Text text node} instance in which this position is placed or `null` if this\n\t * position is not in a text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/text~Text|null}\n\t */\n\tget textNode() {\n\t\tconst node = this.parent.getChild( this.index );\n\n\t\treturn ( node instanceof Text && node.startOffset < this.offset ) ? node : null;\n\t}\n\n\t/**\n\t * Node directly after this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\treturn this.textNode === null ? this.parent.getChild( this.index ) : null;\n\t}\n\n\t/**\n\t * Node directly before this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {Node}\n\t */\n\tget nodeBefore() {\n\t\treturn this.textNode === null ? this.parent.getChild( this.index - 1 ) : null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\treturn this.offset == this.parent.maxOffset;\n\t}\n\n\t/**\n\t * Checks whether this position is before or after given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/model/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root != otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tconst result = compareArrays( this.path, otherPosition.path );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'same':\n\t\t\t\treturn 'same';\n\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\treturn this.path[ result ] < otherPosition.path[ result ] ? 'before' : 'after';\n\t\t}\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/model/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' );\n\t * \t\t// <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } );\n\t * \t\t// <paragraph>foo[]</paragraph> -> <paragraph>[]foo</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => false );\n\t * \t\t// Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/model/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns a path to this position's parent. Parent path is equal to position {@link module:engine/model/position~Position#path path}\n\t * but without the last item.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @returns {Array.<Number>} Path to the parent.\n\t */\n\tgetParentPath() {\n\t\treturn this.path.slice( 0, -1 );\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and its ancestors.\n\t *\n\t * @returns {Array.<module:engine/model/item~Item>} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the slice of two position {@link #path paths} which is identical. The {@link #root roots}\n\t * of these two paths must be identical.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {Array.<Number>} The common path.\n\t */\n\tgetCommonPath( position ) {\n\t\tif ( this.root != position.root ) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// We find on which tree-level start and end have the lowest common ancestor\n\t\tconst cmp = compareArrays( this.path, position.path );\n\t\t// If comparison returned string it means that arrays are same.\n\t\tconst diffAt = ( typeof cmp == 'string' ) ? Math.min( this.path.length, position.path.length ) : cmp;\n\n\t\treturn this.path.slice( 0, diffAt );\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions. The {@link #root roots} of these two positions must be identical.\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns a new instance of `Position`, that has same {@link #parent parent} but it's offset\n\t * is shifted by `shift` value (can be a negative value).\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {Number} shift Offset shift. Can be a negative value.\n\t * @returns {module:engine/model/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = this.clone();\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Checks whether this position is after given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @see module:engine/model/position~Position#isBefore\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before given position.\n\t *\n\t * **Note:** watch out when using negation of the value returned by this method, because the negation will also\n\t * be `true` if positions are in different roots and you might not expect this. You should probably use\n\t * `a.isAfter( b ) || a.isEqual( b )` or `!a.isBefore( p ) && a.root == b.root` in most scenarios. If your\n\t * condition uses multiple `isAfter` and `isBefore` checks, build them so they do not use negated values, i.e.:\n\t *\n\t *\t\tif ( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do A.\n\t *\t\t} else {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * or, if you have only one if-branch:\n\t *\n\t *\t\tif ( !( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * rather than:\n\t *\n\t *\t\tif ( !a.isBefore( b ) || && !c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t} else {\n\t *\t\t\t// do A.\n\t *\t\t}\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is equal to given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'same';\n\t}\n\n\t/**\n\t * Checks whether this position is touching given position. Positions touch when there are no text nodes\n\t * or empty nodes in a range between them. Technically, those positions are not equal but in many cases\n\t * they are very similar or even indistinguishable.\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions touch.\n\t */\n\tisTouching( otherPosition ) {\n\t\tlet left = null;\n\t\tlet right = null;\n\t\tconst compare = this.compareWith( otherPosition );\n\n\t\tswitch ( compare ) {\n\t\t\tcase 'same':\n\t\t\t\treturn true;\n\n\t\t\tcase 'before':\n\t\t\t\tleft = Position._createAt( this );\n\t\t\t\tright = Position._createAt( otherPosition );\n\t\t\t\tbreak;\n\n\t\t\tcase 'after':\n\t\t\t\tleft = Position._createAt( otherPosition );\n\t\t\t\tright = Position._createAt( this );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\t\t// Cached for optimization purposes.\n\t\tlet leftParent = left.parent;\n\n\t\twhile ( left.path.length + right.path.length ) {\n\t\t\tif ( left.isEqual( right ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( left.path.length > right.path.length ) {\n\t\t\t\tif ( left.offset !== leftParent.maxOffset ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tleft.path = left.path.slice( 0, -1 );\n\t\t\t\tleftParent = leftParent.parent;\n\t\t\t\tleft.offset++;\n\t\t\t} else {\n\t\t\t\tif ( right.offset !== 0 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tright.path = right.path.slice( 0, -1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tposition.is( 'position' ); // -> true\n\t *\t\tposition.is( 'model:position' ); // -> true\n\t *\n\t *\t\tposition.is( 'view:position' ); // -> false\n\t *\t\tposition.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'position' || type == 'model:position';\n\t}\n\n\t/**\n\t * Checks if two positions are in the same parent.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} position Position to compare with.\n\t * @returns {Boolean} `true` if positions have the same parent, `false` otherwise.\n\t */\n\thasSameParentAs( position ) {\n\t\tif ( this.root !== position.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisParentPath = this.getParentPath();\n\t\tconst posParentPath = position.getParentPath();\n\n\t\treturn compareArrays( thisParentPath, posParentPath ) == 'same';\n\t}\n\n\t/**\n\t * Returns a copy of this position that is transformed by given `operation`.\n\t *\n\t * The new position's parameters are updated accordingly to the effect of the `operation`.\n\t *\n\t * For example, if `n` nodes are inserted before the position, the returned position {@link ~Position#offset} will be\n\t * increased by `n`. If the position was in a merged element, it will be accordingly moved to the new element, etc.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to transform by.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\tgetTransformedByOperation( operation ) {\n\t\tlet result;\n\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert':\n\t\t\t\tresult = this._getTransformedByInsertOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'move':\n\t\t\tcase 'remove':\n\t\t\tcase 'reinsert':\n\t\t\t\tresult = this._getTransformedByMoveOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'split':\n\t\t\t\tresult = this._getTransformedBySplitOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'merge':\n\t\t\t\tresult = this._getTransformedByMergeOperation( operation );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult = Position._createAt( this );\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by an insert operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByInsertOperation( operation ) {\n\t\treturn this._getTransformedByInsertion( operation.position, operation.howMany );\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by a move operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByMoveOperation( operation ) {\n\t\treturn this._getTransformedByMove( operation.sourcePosition, operation.targetPosition, operation.howMany );\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by a split operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedBySplitOperation( operation ) {\n\t\tconst movedRange = operation.movedRange;\n\n\t\tconst isContained = movedRange.containsPosition( this ) ||\n\t\t\t( movedRange.start.isEqual( this ) && this.stickiness == 'toNext' );\n\n\t\tif ( isContained ) {\n\t\t\treturn this._getCombined( operation.splitPosition, operation.moveTargetPosition );\n\t\t} else {\n\t\t\tif ( operation.graveyardPosition ) {\n\t\t\t\treturn this._getTransformedByMove( operation.graveyardPosition, operation.insertionPosition, 1 );\n\t\t\t} else {\n\t\t\t\treturn this._getTransformedByInsertion( operation.insertionPosition, 1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by merge operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByMergeOperation( operation ) {\n\t\tconst movedRange = operation.movedRange;\n\t\tconst isContained = movedRange.containsPosition( this ) || movedRange.start.isEqual( this );\n\n\t\tlet pos;\n\n\t\tif ( isContained ) {\n\t\t\tpos = this._getCombined( operation.sourcePosition, operation.targetPosition );\n\n\t\t\tif ( operation.sourcePosition.isBefore( operation.targetPosition ) ) {\n\t\t\t\t// Above happens during OT when the merged element is moved before the merged-to element.\n\t\t\t\tpos = pos._getTransformedByDeletion( operation.deletionPosition, 1 );\n\t\t\t}\n\t\t} else if ( this.isEqual( operation.deletionPosition ) ) {\n\t\t\tpos = Position._createAt( operation.deletionPosition );\n\t\t} else {\n\t\t\tpos = this._getTransformedByMove( operation.deletionPosition, operation.graveyardPosition, 1 );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by removing `howMany` nodes starting from `deletePosition`.\n\t * It may happen that this position is in a removed node. If that is the case, `null` is returned instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} deletePosition Position before the first removed node.\n\t * @param {Number} howMany How many nodes are removed.\n\t * @returns {module:engine/model/position~Position|null} Transformed position or `null`.\n\t */\n\t_getTransformedByDeletion( deletePosition, howMany ) {\n\t\tconst transformed = Position._createAt( this );\n\n\t\t// This position can't be affected if deletion was in a different root.\n\t\tif ( this.root != deletePosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are removed from the node that is pointed by this position...\n\t\t\tif ( deletePosition.offset < this.offset ) {\n\t\t\t\t// And are removed from before an offset of that position...\n\t\t\t\tif ( deletePosition.offset + howMany > this.offset ) {\n\t\t\t\t\t// Position is in removed range, it's no longer in the tree.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Decrement the offset accordingly.\n\t\t\t\t\ttransformed.offset -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are removed from a node that is on a path to this position...\n\t\t\tconst i = deletePosition.path.length - 1;\n\n\t\t\tif ( deletePosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are removed from before next node of that path...\n\t\t\t\tif ( deletePosition.offset + howMany > this.path[ i ] ) {\n\t\t\t\t\t// If the next node of that path is removed return null\n\t\t\t\t\t// because the node containing this position got removed.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, decrement index on that path.\n\t\t\t\t\ttransformed.path[ i ] -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by inserting `howMany` nodes at `insertPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany ) {\n\t\tconst transformed = Position._createAt( this );\n\n\t\t// This position can't be affected if insertion was in a different root.\n\t\tif ( this.root != insertPosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are inserted in the node that is pointed by this position...\n\t\t\tif ( insertPosition.offset < this.offset || ( insertPosition.offset == this.offset && this.stickiness != 'toPrevious' ) ) {\n\t\t\t\t// And are inserted before an offset of that position...\n\t\t\t\t// \"Push\" this positions offset.\n\t\t\t\ttransformed.offset += howMany;\n\t\t\t}\n\t\t} else if ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are inserted in a node that is on a path to this position...\n\t\t\tconst i = insertPosition.path.length - 1;\n\n\t\t\tif ( insertPosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are inserted before next node of that path...\n\t\t\t\t// \"Push\" the index on that path.\n\t\t\t\ttransformed.path[ i ] += howMany;\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position before the first element to move.\n\t * @param {module:engine/model/position~Position} targetPosition Position where moved elements will be inserted.\n\t * @param {Number} howMany How many consecutive nodes to move, starting from `sourcePosition`.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany ) {\n\t\t// Update target position, as it could be affected by nodes removal.\n\t\ttargetPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( sourcePosition.isEqual( targetPosition ) ) {\n\t\t\t// If `targetPosition` is equal to `sourcePosition` this isn't really any move. Just return position as it is.\n\t\t\treturn Position._createAt( this );\n\t\t}\n\n\t\t// Moving a range removes nodes from their original position. We acknowledge this by proper transformation.\n\t\tconst transformed = this._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tconst isMoved = transformed === null ||\n\t\t\t( sourcePosition.isEqual( this ) && this.stickiness == 'toNext' ) ||\n\t\t\t( sourcePosition.getShiftedBy( howMany ).isEqual( this ) && this.stickiness == 'toPrevious' );\n\n\t\tif ( isMoved ) {\n\t\t\t// This position is inside moved range (or sticks to it).\n\t\t\t// In this case, we calculate a combination of this position, move source position and target position.\n\t\t\treturn this._getCombined( sourcePosition, targetPosition );\n\t\t} else {\n\t\t\t// This position is not inside a removed range.\n\t\t\t//\n\t\t\t// In next step, we simply reflect inserting `howMany` nodes, which might further affect the position.\n\t\t\treturn transformed._getTransformedByInsertion( targetPosition, howMany );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a new position that is a combination of this position and given positions.\n\t *\n\t * The combined position is a copy of this position transformed by moving a range starting at `source` position\n\t * to the `target` position. It is expected that this position is inside the moved range.\n\t *\n\t * Example:\n\t *\n\t *\t\tlet original = model.createPositionFromPath( root, [ 2, 3, 1 ] );\n\t *\t\tlet source = model.createPositionFromPath( root, [ 2, 2 ] );\n\t *\t\tlet target = model.createPositionFromPath( otherRoot, [ 1, 1, 3 ] );\n\t *\t\toriginal._getCombined( source, target ); // path is [ 1, 1, 4, 1 ], root is `otherRoot`\n\t *\n\t * Explanation:\n\t *\n\t * We have a position `[ 2, 3, 1 ]` and move some nodes from `[ 2, 2 ]` to `[ 1, 1, 3 ]`. The original position\n\t * was inside moved nodes and now should point to the new place. The moved nodes will be after\n\t * positions `[ 1, 1, 3 ]`, `[ 1, 1, 4 ]`, `[ 1, 1, 5 ]`. Since our position was in the second moved node,\n\t * the transformed position will be in a sub-tree of a node at `[ 1, 1, 4 ]`. Looking at original path, we\n\t * took care of `[ 2, 3 ]` part of it. Now we have to add the rest of the original path to the transformed path.\n\t * Finally, the transformed position will point to `[ 1, 1, 4, 1 ]`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} source Beginning of the moved range.\n\t * @param {module:engine/model/position~Position} target Position where the range is moved.\n\t * @returns {module:engine/model/position~Position} Combined position.\n\t */\n\t_getCombined( source, target ) {\n\t\tconst i = source.path.length - 1;\n\n\t\t// The first part of a path to combined position is a path to the place where nodes were moved.\n\t\tconst combined = Position._createAt( target );\n\t\tcombined.stickiness = this.stickiness;\n\n\t\t// Then we have to update the rest of the path.\n\n\t\t// Fix the offset because this position might be after `from` position and we have to reflect that.\n\t\tcombined.offset = combined.offset + this.path[ i ] - source.offset;\n\n\t\t// Then, add the rest of the path.\n\t\t// If this position is at the same level as `from` position nothing will get added.\n\t\tcombined.path = combined.path.concat( this.path.slice( i + 1 ) );\n\n\t\treturn combined;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\treturn {\n\t\t\troot: this.root.toJSON(),\n\t\t\tpath: Array.from( this.path ),\n\t\t\tstickiness: this.stickiness\n\t\t};\n\t}\n\n\t/**\n\t * Returns a new position that is equal to current position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.root, this.path, this.stickiness );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/model/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/model/item~Item model item} and `'before'` or `'after'` (sets position before or after given model item).\n\t *\n\t * This method is a shortcut to other factory methods such as:\n\t *\n\t * * {@link module:engine/model/position~Position._createBefore},\n\t * * {@link module:engine/model/position~Position._createAfter}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when the\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness. Used only when the\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @protected\n\t */\n\tstatic _createAt( itemOrPosition, offset, stickiness = 'toNone' ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn new Position( itemOrPosition.root, itemOrPosition.path, itemOrPosition.stickiness );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.maxOffset;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this._createBefore( node, stickiness );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this._createAfter( node, stickiness );\n\t\t\t} else if ( offset !== 0 && !offset ) {\n\t\t\t\t/**\n\t\t\t\t * {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}\n\t\t\t\t * requires the offset to be specified when the first parameter is a model item.\n\t\t\t\t *\n\t\t\t\t * @error model-createPositionAt-offset-required\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-createPositionAt-offset-required: ' +\n\t\t\t\t\t'Model#createPositionAt() requires the offset when the first parameter is a model item.',\n\t\t\t\t\t[ this, itemOrPosition ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( !node.is( 'element' ) && !node.is( 'documentFragment' ) ) {\n\t\t\t\t/**\n\t\t\t\t * Position parent have to be a model element or model document fragment.\n\t\t\t\t *\n\t\t\t\t * @error model-position-parent-incorrect\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-position-parent-incorrect: Position parent have to be a element or document fragment.',\n\t\t\t\t\t[ this, itemOrPosition ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst path = node.getPath();\n\n\t\t\tpath.push( offset );\n\n\t\t\treturn new this( node.root, path, stickiness );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position, after given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * @returns {module:engine/model/position~Position}\n\t * @protected\n\t */\n\tstatic _createAfter( item, stickiness ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root element.\n\t\t\t *\n\t\t\t * @error model-position-after-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-after-root: You cannot make a position after root.',\n\t\t\t\t[ this, item ],\n\t\t\t\t{ root: item }\n\t\t\t);\n\t\t}\n\n\t\treturn this._createAt( item.parent, item.endOffset, stickiness );\n\t}\n\n\t/**\n\t * Creates a new position, before the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * @returns {module:engine/model/position~Position}\n\t * @protected\n\t */\n\tstatic _createBefore( item, stickiness ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position before a root element.\n\t\t\t *\n\t\t\t * @error model-position-before-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-before-root: You cannot make a position before root.',\n\t\t\t\titem,\n\t\t\t\t{ root: item }\n\t\t\t);\n\t\t}\n\n\t\treturn this._createAt( item.parent, item.startOffset, stickiness );\n\t}\n\n\t/**\n\t * Creates a `Position` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Position`.\n\t * @param {module:engine/model/document~Document} doc Document object that will be position owner.\n\t * @returns {module:engine/model/position~Position} `Position` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\tif ( json.root === '$graveyard' ) {\n\t\t\tconst pos = new Position( doc.graveyard, json.path );\n\t\t\tpos.stickiness = json.stickiness;\n\n\t\t\treturn pos;\n\t\t}\n\n\t\tif ( !doc.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create position for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error model-position-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-fromjson-no-root: Cannot create position for document. Root with specified name does not exist.',\n\t\t\t\tdoc,\n\t\t\t\t{ rootName: json.root }\n\t\t\t);\n\t\t}\n\n\t\treturn new Position( doc.getRoot( json.root ), json.path, json.stickiness );\n\t}\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/model/position~PositionRelation\n */\n\n/**\n * Represents how position is \"sticking\" with neighbour nodes. Used to define how position should be transformed (moved)\n * in edge cases. Possible values: `'toNone'`, `'toNext'`, `'toPrevious'`.\n *\n * Examples:\n *\n *\t\tInsert. Position is at | and nodes are inserted at the same position, marked as ^:\n *\n *\t\t- sticks to none:           <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to next node:      <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to previous node:  <p>f|^oo</p>  ->  <p>f|baroo</p>\n *\n *\n *\t\tMove. Position is at | and range [oo] is moved to position ^:\n *\n *\t\t- sticks to none:           <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to none:           <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to next node:      <p>f|[oo]</p><p>b^ar</p>  ->  <p>f</p><p>b|ooar</p>\n *\t\t- sticks to next node:      <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to previous node:  <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to previous node:  <p>f[oo]|</p><p>b^ar</p>  ->  <p>f</p><p>boo|ar</p>\n *\n * @typedef {String} module:engine/model/position~PositionStickiness\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/position\n */\n\nimport TreeWalker from './treewalker';\n\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EditableElement from './editableelement';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Position in the view tree. Position is represented by its parent node and an offset in this parent.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} parent Position parent.\n\t * @param {Number} offset Position offset.\n\t */\n\tconstructor( parent, offset ) {\n\t\t/**\n\t\t * Position parent.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t\t * module:engine/view/position~Position#parent\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * Position offset.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} module:engine/view/position~Position#offset\n\t\t */\n\t\tthis.offset = offset;\n\t}\n\n\t/**\n\t * Node directly after the position. Equals `null` when there is no node after position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\tif ( this.parent.is( 'text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset ) || null;\n\t}\n\n\t/**\n\t * Node directly before the position. Equals `null` when there is no node before position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeBefore() {\n\t\tif ( this.parent.is( 'text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset - 1 ) || null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\tconst endOffset = this.parent.is( 'text' ) ? this.parent.data.length : this.parent.childCount;\n\n\t\treturn this.offset === endOffset;\n\t}\n\n\t/**\n\t * Position's root, that is the root of the position's parent element.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.parent.root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this position, or `null` if\n\t * position is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tlet editable = this.parent;\n\n\t\twhile ( !( editable instanceof EditableElement ) ) {\n\t\t\tif ( editable.parent ) {\n\t\t\t\teditable = editable.parent;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn editable;\n\t}\n\n\t/**\n\t * Returns a new instance of Position with offset incremented by `shift` value.\n\t *\n\t * @param {Number} shift How position offset should get changed. Accepts negative values.\n\t * @returns {module:engine/view/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = Position._createAt( this );\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/view/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } ); // <p>foo[]</p> -> <p>{}foo</p>\n\t * \t\tgetLastMatchingPosition( value => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/view/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and it's ancestors.\n\t *\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions.\n\t *\n\t * @param {module:engine/view/position~Position} position\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tposition.is( 'position' ); // -> true\n\t *\t\tposition.is( 'view:position' ); // -> true\n\t *\n\t *\t\tposition.is( 'model:position' ); // -> false\n\t *\t\tposition.is( 'element' ); // -> false\n\t *\t\tposition.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'position' || type == 'view:position';\n\t}\n\n\t/**\n\t * Checks whether this position equals given position.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn ( this.parent == otherPosition.parent && this.offset == otherPosition.offset );\n\t}\n\n\t/**\n\t * Checks whether this position is located before given position. When method returns `false` it does not mean that\n\t * this position is after give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isAfter\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is located after given position. When method returns `false` it does not mean that\n\t * this position is before give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isBefore\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before, after or in same position that other position. Two positions may be also\n\t * different when they are located in separate roots.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/view/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root !== otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tif ( this.isEqual( otherPosition ) ) {\n\t\t\treturn 'same';\n\t\t}\n\n\t\t// Get path from root to position's parent element.\n\t\tconst thisPath = this.parent.is( 'node' ) ? this.parent.getPath() : [];\n\t\tconst otherPath = otherPosition.parent.is( 'node' ) ? otherPosition.parent.getPath() : [];\n\n\t\t// Add the positions' offsets to the parents offsets.\n\t\tthisPath.push( this.offset );\n\t\totherPath.push( otherPosition.offset );\n\n\t\t// Compare both path arrays to find common ancestor.\n\t\tconst result = compareArrays( thisPath, otherPath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < otherPath[ result ] ? 'before' : 'after';\n\t\t}\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this positions as a start position.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}\n\t * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\tclone() {\n\t\treturn new Position( this.parent, this.offset );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link module:engine/view/position~Position._createBefore},\n\t * * {@link module:engine/view/position~Position._createAfter}.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tstatic _createAt( itemOrPosition, offset ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn new this( itemOrPosition.parent, itemOrPosition.offset );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.is( 'text' ) ? node.data.length : node.childCount;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this._createBefore( node );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this._createAfter( node );\n\t\t\t} else if ( offset !== 0 && !offset ) {\n\t\t\t\t/**\n\t\t\t\t * {@link module:engine/view/view~View#createPositionAt `View#createPositionAt()`}\n\t\t\t\t * requires the offset to be specified when the first parameter is a view item.\n\t\t\t\t *\n\t\t\t\t * @error view-createPositionAt-offset-required\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-createPositionAt-offset-required: ' +\n\t\t\t\t\t'View#createPositionAt() requires the offset when the first parameter is a view item.',\n\t\t\t\t\tnode\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn new Position( node, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic _createAfter( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText + item.data.length );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root.\n\t\t\t *\n\t\t\t * @error view-position-after-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-after-root: You can not make position after root.', item, { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index + 1 );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic _createBefore( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You cannot make a position before a root.\n\t\t\t *\n\t\t\t * @error view-position-before-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-before-root: You can not make position before root.', item, { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index );\n\t}\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/view/position~PositionRelation\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/mix\n */\n\n/**\n * Copies enumerable properties and symbols from the objects given as 2nd+ parameters to the\n * prototype of first object (a constructor).\n *\n *\t\tclass Editor {\n *\t\t\t...\n *\t\t}\n *\n *\t\tconst SomeMixin = {\n *\t\t\ta() {\n *\t\t\t\treturn 'a';\n *\t\t\t}\n *\t\t};\n *\n *\t\tmix( Editor, SomeMixin, ... );\n *\n *\t\tnew Editor().a(); // -> 'a'\n *\n * Note: Properties which already exist in the base class will not be overriden.\n *\n * @param {Function} [baseClass] Class which prototype will be extended.\n * @param {Object} [...mixins] Objects from which to get properties.\n */\nexport default function mix( baseClass, ...mixins ) {\n\tmixins.forEach( mixin => {\n\t\tObject.getOwnPropertyNames( mixin ).concat( Object.getOwnPropertySymbols( mixin ) )\n\t\t\t.forEach( key => {\n\t\t\t\tif ( key in baseClass.prototype ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceDescriptor = Object.getOwnPropertyDescriptor( mixin, key );\n\t\t\t\tsourceDescriptor.enumerable = false;\n\n\t\t\t\tObject.defineProperty( baseClass.prototype, key, sourceDescriptor );\n\t\t\t} );\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/view\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ViewCollection from './viewcollection';\nimport Template from './template';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\nimport '../theme/globals/globals.css';\n\n/**\n * The basic view class, which represents an HTML element created out of a\n * {@link module:ui/view~View#template}. Views are building blocks of the user interface and handle\n * interaction\n *\n * Views {@link module:ui/view~View#registerChild aggregate} children in\n * {@link module:ui/view~View#createCollection collections} and manage the life cycle of DOM\n * listeners e.g. by handling rendering and destruction.\n *\n * See the {@link module:ui/template~TemplateDefinition} syntax to learn more about shaping view\n * elements, attributes and listeners.\n *\n *\t\tclass SampleView extends View {\n *\t\t\tconstructor( locale ) {\n *\t\t\t\tsuper( locale );\n *\n *\t\t\t\tconst bind = this.bindTemplate;\n *\n *\t\t\t\t// Views define their interface (state) using observable attributes.\n *\t\t\t\tthis.set( 'elementClass', 'bar' );\n *\n *\t\t\t\tthis.setTemplate( {\n *\t\t\t\t\ttag: 'p',\n *\n *\t\t\t\t\t// The element of the view can be defined with its children.\n *\t\t\t\t\tchildren: [\n *\t\t\t\t\t\t'Hello',\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\ttag: 'b',\n *\t\t\t\t\t\t\tchildren: [ 'world!' ]\n *\t\t\t\t\t\t}\n *\t\t\t\t\t],\n *\t\t\t\t\tattributes: {\n *\t\t\t\t\t\tclass: [\n *\t\t\t\t\t\t\t'foo',\n *\n *\t\t\t\t\t\t\t// Observable attributes control the state of the view in DOM.\n *\t\t\t\t\t\t\tbind.to( 'elementClass' )\n *\t\t\t\t\t\t]\n *\t\t\t\t\t},\n *\t\t\t\t\ton: {\n *\t\t\t\t\t\t// Views listen to DOM events and propagate them.\n *\t\t\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t\t\t}\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst view = new SampleView( locale );\n *\n *\t\tview.render();\n *\n *\t\t// Append <p class=\"foo bar\">Hello<b>world</b></p> to the <body>\n *\t\tdocument.body.appendChild( view.element );\n *\n *\t\t// Change the class attribute to <p class=\"foo baz\">Hello<b>world</b></p>\n *\t\tview.elementClass = 'baz';\n *\n *\t\t// Respond to the \"click\" event in DOM by executing a custom action.\n *\t\tview.on( 'clicked', () => {\n *\t\t\tconsole.log( 'The view has been clicked!' );\n *\t\t} );\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\t/**\n\t * Creates an instance of the {@link module:ui/view~View} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t */\n\tconstructor( locale ) {\n\t\t/**\n\t\t * An HTML element of the view. `null` until {@link #render rendered}\n\t\t * from the {@link #template}.\n\t\t *\n\t\t *\t\tclass SampleView extends View {\n\t\t *\t\t\tconstructor() {\n\t\t *\t\t\t\tsuper();\n\t\t *\n\t\t *\t\t\t\t// A template instance the #element will be created from.\n\t\t *\t\t\t\tthis.setTemplate( {\n\t\t *\t\t\t\t\ttag: 'p'\n\t\t *\n\t\t *\t\t\t\t\t// ...\n\t\t *\t\t\t\t} );\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t *\t\tconst view = new SampleView();\n\t\t *\n\t\t *\t\t// Renders the #template.\n\t\t *\t\tview.render();\n\t\t *\n\t\t *\t\t// Append the HTML element of the view to <body>.\n\t\t *\t\tdocument.body.appendChild( view.element );\n\t\t *\n\t\t * **Note**: The element of the view can also be assigned directly:\n\t\t *\n\t\t *\t\tview.element = document.querySelector( '#my-container' );\n\t\t *\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis.element = null;\n\n\t\t/**\n\t\t * Set `true` when the view has already been {@link module:ui/view~View#render rendered}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isRendered\n\t\t */\n\t\tthis.isRendered = false;\n\n\t\t/**\n\t\t * A set of tools to localize the user interface.\n\t\t *\n\t\t * Also see {@link module:core/editor/editor~Editor#locale}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * Note: If {@link #locale} instance hasn't been passed to the view this method may not\n\t\t * be available.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method\n\t\t */\n\t\tthis.t = locale && locale.t;\n\n\t\t/**\n\t\t * Collections registered with {@link #createCollection}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set.<module:ui/viewcollection~ViewCollection>}\n\t\t */\n\t\tthis._viewCollections = new Collection();\n\n\t\t/**\n\t\t * A collection of view instances, which have been added directly\n\t\t * into the {@link module:ui/template~Template#children}.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._unboundChildren = this.createCollection();\n\n\t\t// Pass parent locale to its children.\n\t\tthis._viewCollections.on( 'add', ( evt, collection ) => {\n\t\t\tcollection.locale = locale;\n\t\t} );\n\n\t\t/**\n\t\t * Template of this view. It provides the {@link #element} representing\n\t\t * the view in DOM, which is {@link #render rendered}.\n\t\t *\n\t\t * @member {module:ui/template~Template} #template\n\t\t */\n\n\t\t/**\n\t\t * Cached {@link module:ui/template~BindChain bind chain} object created by the\n\t\t * {@link #template}. See {@link #bindTemplate}.\n\t\t *\n\t\t * @private\n\t\t * @member {Object} #_bindTemplate\n\t\t */\n\n\t\tthis.decorate( 'render' );\n\t}\n\n\t/**\n\t * Shorthand for {@link module:ui/template~Template.bind}, a binding\n\t * {@link module:ui/template~BindChain interface} pre–configured for the view instance.\n\t *\n\t * It provides {@link module:ui/template~BindChain#to `to()`} and\n\t * {@link module:ui/template~BindChain#if `if()`} methods that initialize bindings with\n\t * observable attributes and attach DOM listeners.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tconst bind = this.bindTemplate;\n\t *\n\t *\t\t\t\t// These {@link module:utils/observablemixin~Observable observable} attributes will control\n\t *\t\t\t\t// the state of the view in DOM.\n\t *\t\t\t\tthis.set( {\n\t *\t\t\t\t\telementClass: 'foo',\n\t *\t\t\t\t \tisEnabled: true\n\t *\t\t\t\t } );\n\t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\t// The class HTML attribute will follow elementClass\n\t *\t\t\t\t\t\t// and isEnabled view attributes.\n\t *\t\t\t\t\t\tclass: [\n\t *\t\t\t\t\t\t\tbind.to( 'elementClass' )\n\t *\t\t\t\t\t\t\tbind.if( 'isEnabled', 'present-when-enabled' )\n\t *\t\t\t\t\t\t]\n\t *\t\t\t\t\t},\n\t *\n\t *\t\t\t\t\ton: {\n\t *\t\t\t\t\t\t// The view will fire the \"clicked\" event upon clicking <p> in DOM.\n\t *\t\t\t\t\t\tclick: bind.to( 'clicked' )\n\t *\t\t\t\t\t}\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * @method #bindTemplate\n\t */\n\tget bindTemplate() {\n\t\tif ( this._bindTemplate ) {\n\t\t\treturn this._bindTemplate;\n\t\t}\n\n\t\treturn ( this._bindTemplate = Template.bind( this, this ) );\n\t}\n\n\t/**\n\t * Creates a new collection of views, which can be used as\n\t * {@link module:ui/template~Template#children} of this view.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.items = this.createCollection();\n \t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n\t *\t\t\t\t\t// `items` collection will render here.\n\t *\t\t\t\t\tchildren: this.items\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView( locale );\n\t *\t\tconst child = new ChildView( locale );\n\t *\n\t *\t\tview.render();\n\t *\n\t *\t\t// It will append <p></p> to the <body>.\n\t *\t\tdocument.body.appendChild( view.element );\n\t *\n\t *\t\t// From now on the child is nested under its parent, which is also reflected in DOM.\n\t *\t\t// <p><child#element></p>\n\t *\t\tview.items.add( child );\n\t *\n\t * @returns {module:ui/viewcollection~ViewCollection} A new collection of view instances.\n\t */\n\tcreateCollection() {\n\t\tconst collection = new ViewCollection();\n\n\t\tthis._viewCollections.add( collection );\n\n\t\treturn collection;\n\t}\n\n\t/**\n\t * Registers a new child view under the view instance. Once registered, a child\n\t * view is managed by its parent, including {@link #render rendering}\n\t * and {@link #destroy destruction}.\n\t *\n\t * To revert this, use {@link #deregisterChild}.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.childA = new SomeChildView( locale );\n\t *\t\t\t\tthis.childB = new SomeChildView( locale );\n\t *\n\t *\t\t\t\tthis.setTemplate( { tag: 'p' } );\n\t *\n\t *\t\t\t\t// Register the children.\n\t *\t\t\t\tthis.registerChild( [ this.childA, this.childB ] );\n\t *\t\t\t}\n\t *\n\t *\t\t\trender() {\n\t *\t\t\t\tsuper.render();\n\t *\n\t *\t\t\t\tthis.element.appendChild( this.childA.element );\n\t *\t\t\t\tthis.element.appendChild( this.childB.element );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView( locale );\n\t *\n\t *\t\tview.render();\n\t *\n\t *\t\t// Will append <p><childA#element><b></b><childB#element></p>.\n\t *\t\tdocument.body.appendChild( view.element );\n\t *\n\t * **Note**: There's no need to add child views if they're already referenced in the\n\t * {@link #template}:\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.childA = new SomeChildView( locale );\n\t *\t\t\t\tthis.childB = new SomeChildView( locale );\n\t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n \t *\t\t\t\t\t// These children will be added automatically. There's no\n \t *\t\t\t\t\t// need to call {@link #registerChild} for any of them.\n\t *\t\t\t\t\tchildren: [ this.childA, this.childB ]\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\n\t *\t\t\t// ...\n\t *\t\t}\n\t *\n\t * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Children views to be registered.\n\t */\n\tregisterChild( children ) {\n\t\tif ( !isIterable( children ) ) {\n\t\t\tchildren = [ children ];\n\t\t}\n\n\t\tfor ( const child of children ) {\n\t\t\tthis._unboundChildren.add( child );\n\t\t}\n\t}\n\n\t/**\n\t * The opposite of {@link #registerChild}. Removes a child view from this view instance.\n\t * Once removed, the child is no longer managed by its parent, e.g. it can safely\n\t * become a child of another parent view.\n\t *\n\t * @see #registerChild\n\t * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Child views to be removed.\n\t */\n\tderegisterChild( children ) {\n\t\tif ( !isIterable( children ) ) {\n\t\t\tchildren = [ children ];\n\t\t}\n\n\t\tfor ( const child of children ) {\n\t\t\tthis._unboundChildren.remove( child );\n\t\t}\n\t}\n\n\t/**\n\t * Sets the {@link #template} of the view with with given definition.\n\t *\n\t * A shorthand for:\n\t *\n\t *\t\tview.setTemplate( definition );\n\t *\n\t * @param {module:ui/template~TemplateDefinition} definition Definition of view's template.\n\t */\n\tsetTemplate( definition ) {\n\t\tthis.template = new Template( definition );\n\t}\n\n\t/**\n\t * {@link module:ui/template~Template.extend Extends} the {@link #template} of the view with\n\t * with given definition.\n\t *\n\t * A shorthand for:\n\t *\n\t *\t\tTemplate.extend( view.template, definition );\n\t *\n\t * **Note**: Is requires the {@link #template} to be already set. See {@link #setTemplate}.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} definition Definition which\n\t * extends the {@link #template}.\n\t */\n\textendTemplate( definition ) {\n\t\tTemplate.extend( this.template, definition );\n\t}\n\n\t/**\n\t * Recursively renders the view.\n\t *\n\t * Once the view is rendered:\n\t * * the {@link #element} becomes an HTML element out of {@link #template},\n\t * * the {@link #isRendered} flag is set `true`.\n\t *\n\t * **Note**: The children of the view:\n\t * * defined directly in the {@link #template}\n\t * * residing in collections created by the {@link #createCollection} method,\n\t * * and added by {@link #registerChild}\n\t * are also rendered in the process.\n\t *\n\t * In general, `render()` method is the right place to keep the code which refers to the\n\t * {@link #element} and should be executed at the very beginning of the view's life cycle.\n\t *\n\t * It is possible to {@link module:ui/template~Template.extend} the {@link #template} before\n\t * the view is rendered. To allow an early customization of the view (e.g. by its parent),\n\t * such references should be done in `render()`.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor() {\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\t// ...\n\t *\t\t\t\t} );\n\t *\t\t\t},\n\t *\n\t *\t\t\trender() {\n\t *\t\t\t\t// View#element becomes available.\n\t *\t\t\t\tsuper.render();\n\t *\n\t *\t\t\t\t// The \"scroll\" listener depends on #element.\n\t *\t\t\t\tthis.listenTo( window, 'scroll', () => {\n\t *\t\t\t\t\t// A reference to #element would render the #template and make it non-extendable.\n\t *\t\t\t\t\tif ( window.scrollY > 0 ) {\n\t *\t\t\t\t\t\tthis.element.scrollLeft = 100;\n\t *\t\t\t\t\t} else {\n\t *\t\t\t\t\t\tthis.element.scrollLeft = 0;\n\t *\t\t\t\t\t}\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView();\n\t *\n\t *\t\t// Let's customize the view before it gets rendered.\n\t *\t\tview.extendTemplate( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: [\n\t *\t\t\t\t\t'additional-class'\n\t *\t\t\t\t]\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Late rendering allows customization of the view.\n\t *\t\tview.render();\n\t */\n\trender() {\n\t\tif ( this.isRendered ) {\n\t\t\t/**\n\t\t\t * This View has already been rendered.\n\t\t\t *\n\t\t\t * @error ui-view-render-rendered\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-view-render-already-rendered: This View has already been rendered.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\t// Render #element of the view.\n\t\tif ( this.template ) {\n\t\t\tthis.element = this.template.render();\n\n\t\t\t// Auto–register view children from #template.\n\t\t\tthis.registerChild( this.template.getViews() );\n\t\t}\n\n\t\tthis.isRendered = true;\n\t}\n\n\t/**\n\t * Recursively destroys the view instance and child views added by {@link #registerChild} and\n\t * residing in collections created by the {@link #createCollection}.\n\t *\n\t * Destruction disables all event listeners:\n\t * * created on the view, e.g. `view.on( 'event', () => {} )`,\n\t * * defined in the {@link #template} for DOM events.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\n\t\tthis._viewCollections.map( c => c.destroy() );\n\n\t\t// Template isn't obligatory for views.\n\t\tif ( this.template && this.template._revertData ) {\n\t\t\tthis.template.revert( this.element );\n\t\t}\n\t}\n\n\t/**\n\t * Event fired by the {@link #render} method. Actual rendering is executed as a listener to\n\t * this event with the default priority.\n\t *\n\t * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n\t *\n\t * @event render\n\t */\n}\n\nmix( View, DomEmitterMixin );\nmix( View, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/command\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor commands.\n *\n * Commands are the main way to manipulate editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n *\n * By default commands are disabled when the editor is in {@link module:core/editor/editor~Editor#isReadOnly read-only} mode.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Command {\n\t/**\n\t * Creates a new `Command` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor on which this command will be used.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor on which this command will be used.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The value of the command. A concrete command class should define what it represents for it.\n\t\t *\n\t\t * For example, the `'bold'` command's value indicates whether the selection starts in a bolded text.\n\t\t * And the value of the `'link'` command may be an object with links details.\n\t\t *\n\t\t * It is possible for a command to have no value (e.g. for stateless actions such as `'imageUpload'`).\n\t\t *\n\t\t * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member #value\n\t\t */\n\t\tthis.set( 'value', undefined );\n\n\t\t/**\n\t\t * Flag indicating whether a command is enabled or disabled.\n\t\t * A disabled command will do nothing when executed.\n\t\t *\n\t\t * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n\t\t *\n\t\t * It is possible to disable a command from \"outside\". For instance, in your integration you may want to disable\n\t\t * a certain set of commands for the time being. To do that, you can use the fact that `isEnabled` is observable\n\t\t * and it fires the `set:isEnabled` event every time anyone tries to modify its value:\n\t\t *\n\t\t *\t\tfunction disableCommand( cmd ) {\n\t\t *\t\t\tcmd.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t *\n\t\t *\t\t\tcmd.isEnabled = false;\n\t\t *\n\t\t *\t\t\t// Make it possible to enable the command again.\n\t\t *\t\t\treturn () => {\n\t\t *\t\t\t\tcmd.off( 'set:isEnabled', forceDisable );\n\t\t *\t\t\t\tcmd.refresh();\n\t\t *\t\t\t};\n\t\t *\n\t\t *\t\t\tfunction forceDisable( evt ) {\n\t\t *\t\t\t\tevt.return = false;\n\t\t *\t\t\t\tevt.stop();\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t *\t\t// Usage:\n\t\t *\n\t\t *\t\t// Disabling the command.\n\t\t *\t\tconst enableBold = disableCommand( editor.commands.get( 'bold' ) );\n\t\t *\n\t\t *\t\t// Enabling the command again.\n\t\t *\t\tenableBold();\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', false );\n\n\t\t/**\n\t\t * Holds identifiers for {@link #forceDisabled} mechanism.\n\t\t *\n\t\t * @type {Set.<String>}\n\t\t * @private\n\t\t */\n\t\tthis._disableStack = new Set();\n\n\t\tthis.decorate( 'execute' );\n\n\t\t// By default every command is refreshed when changes are applied to the model.\n\t\tthis.listenTo( this.editor.model.document, 'change', () => {\n\t\t\tthis.refresh();\n\t\t} );\n\n\t\tthis.on( 'execute', evt => {\n\t\t\tif ( !this.isEnabled ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// By default commands are disabled when the editor is in read-only mode.\n\t\tthis.listenTo( editor, 'change:isReadOnly', ( evt, name, value ) => {\n\t\t\tif ( value ) {\n\t\t\t\tthis.forceDisabled( 'readOnlyMode' );\n\t\t\t} else {\n\t\t\t\tthis.clearForceDisabled( 'readOnlyMode' );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties\n\t * in this method.\n\t *\n\t * This method is automatically called when\n\t * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n\t */\n\trefresh() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Disables the command.\n\t *\n\t * Command may be disabled by multiple features or algorithms (at once). When disabling a command, unique id should be passed\n\t * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the command.\n\t * The command becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n\t *\n\t * Disabling and enabling a command:\n\t *\n\t *\t\tcommand.isEnabled; // -> true\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> false\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * Command disabled by multiple features:\n\t *\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.forceDisabled( 'OtherFeature' );\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> false\n\t *\t\tcommand.clearForceDisabled( 'OtherFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * Multiple disabling with the same identifier is redundant:\n\t *\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * **Note:** some commands or algorithms may have more complex logic when it comes to enabling or disabling certain commands,\n\t * so the command might be still disabled after {@link #clearForceDisabled} was used.\n\t *\n\t * @param {String} id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the command.\n\t */\n\tforceDisabled( id ) {\n\t\tthis._disableStack.add( id );\n\n\t\tif ( this._disableStack.size == 1 ) {\n\t\t\tthis.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t\tthis.isEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * Clears forced disable previously set through {@link #clearForceDisabled}. See {@link #clearForceDisabled}.\n\t *\n\t * @param {String} id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n\t */\n\tclearForceDisabled( id ) {\n\t\tthis._disableStack.delete( id );\n\n\t\tif ( this._disableStack.size == 0 ) {\n\t\t\tthis.off( 'set:isEnabled', forceDisable );\n\t\t\tthis.refresh();\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}\n\t * to the command.\n\t *\n\t * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n\t * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n\t *\n\t * In order to see how to disable a command from \"outside\" see the {@link #isEnabled} documentation.\n\t *\n\t * @fires execute\n\t */\n\texecute() {}\n\n\t/**\n\t * Destroys the command.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Event fired by the {@link #execute} method. The command action is a listener to this event so it's\n\t * possible to change/cancel the behavior of the command by listening to this event.\n\t *\n\t * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n\t *\n\t * **Note:** This event is fired even if command is disabled. However, it is automatically blocked\n\t * by a high priority listener in order to prevent command execution.\n\t *\n\t * @event execute\n\t */\n}\n\nmix( Command, ObservableMixin );\n\n// Helper function that forces command to be disabled.\nfunction forceDisable( evt ) {\n\tevt.return = false;\n\tevt.stop();\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/emittermixin\n */\n\nimport EventInfo from './eventinfo';\nimport uid from './uid';\nimport priorities from './priorities';\n\n// To check if component is loaded more than once.\nimport './version';\n\nconst _listeningTo = Symbol( 'listeningTo' );\nconst _emitterId = Symbol( 'emitterId' );\n\n/**\n * Mixin that injects the {@link ~Emitter events API} into its host.\n *\n * @mixin EmitterMixin\n * @implements module:utils/emittermixin~Emitter\n */\nconst EmitterMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\ton( event, callback, options = {} ) {\n\t\tthis.listenTo( this, event, callback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tonce( event, callback, options ) {\n\t\tlet wasFired = false;\n\n\t\tconst onceCallback = function( event, ...args ) {\n\t\t\t// Ensure the callback is called only once even if the callback itself leads to re-firing the event\n\t\t\t// (which would call the callback again).\n\t\t\tif ( !wasFired ) {\n\t\t\t\twasFired = true;\n\n\t\t\t\t// Go off() at the first call.\n\t\t\t\tevent.off();\n\n\t\t\t\t// Go with the original callback.\n\t\t\t\tcallback.call( this, event, ...args );\n\t\t\t}\n\t\t};\n\n\t\t// Make a similar on() call, simply replacing the callback.\n\t\tthis.listenTo( this, event, onceCallback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\toff( event, callback ) {\n\t\tthis.stopListening( this, event, callback );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tlistenTo( emitter, event, callback, options = {} ) {\n\t\tlet emitterInfo, eventCallbacks;\n\n\t\t// _listeningTo contains a list of emitters that this object is listening to.\n\t\t// This list has the following format:\n\t\t//\n\t\t// _listeningTo: {\n\t\t//     emitterId: {\n\t\t//         emitter: emitter,\n\t\t//         callbacks: {\n\t\t//             event1: [ callback1, callback2, ... ]\n\t\t//             ....\n\t\t//         }\n\t\t//     },\n\t\t//     ...\n\t\t// }\n\n\t\tif ( !this[ _listeningTo ] ) {\n\t\t\tthis[ _listeningTo ] = {};\n\t\t}\n\n\t\tconst emitters = this[ _listeningTo ];\n\n\t\tif ( !_getEmitterId( emitter ) ) {\n\t\t\t_setEmitterId( emitter );\n\t\t}\n\n\t\tconst emitterId = _getEmitterId( emitter );\n\n\t\tif ( !( emitterInfo = emitters[ emitterId ] ) ) {\n\t\t\temitterInfo = emitters[ emitterId ] = {\n\t\t\t\temitter,\n\t\t\t\tcallbacks: {}\n\t\t\t};\n\t\t}\n\n\t\tif ( !( eventCallbacks = emitterInfo.callbacks[ event ] ) ) {\n\t\t\teventCallbacks = emitterInfo.callbacks[ event ] = [];\n\t\t}\n\n\t\teventCallbacks.push( callback );\n\n\t\t// Finally register the callback to the event.\n\t\tcreateEventNamespace( emitter, event );\n\t\tconst lists = getCallbacksListsForNamespace( emitter, event );\n\t\tconst priority = priorities.get( options.priority );\n\n\t\tconst callbackDefinition = {\n\t\t\tcallback,\n\t\t\tpriority\n\t\t};\n\n\t\t// Add the callback to all callbacks list.\n\t\tfor ( const callbacks of lists ) {\n\t\t\t// Add the callback to the list in the right priority position.\n\t\t\tlet added = false;\n\n\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\tif ( callbacks[ i ].priority < priority ) {\n\t\t\t\t\tcallbacks.splice( i, 0, callbackDefinition );\n\t\t\t\t\tadded = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add at the end, if right place was not found.\n\t\t\tif ( !added ) {\n\t\t\t\tcallbacks.push( callbackDefinition );\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\tconst emitters = this[ _listeningTo ];\n\t\tlet emitterId = emitter && _getEmitterId( emitter );\n\t\tconst emitterInfo = emitters && emitterId && emitters[ emitterId ];\n\t\tconst eventCallbacks = emitterInfo && event && emitterInfo.callbacks[ event ];\n\n\t\t// Stop if nothing has been listened.\n\t\tif ( !emitters || ( emitter && !emitterInfo ) || ( event && !eventCallbacks ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// All params provided. off() that single callback.\n\t\tif ( callback ) {\n\t\t\tremoveCallback( emitter, event, callback );\n\t\t}\n\t\t// Only `emitter` and `event` provided. off() all callbacks for that event.\n\t\telse if ( eventCallbacks ) {\n\t\t\twhile ( ( callback = eventCallbacks.pop() ) ) {\n\t\t\t\tremoveCallback( emitter, event, callback );\n\t\t\t}\n\n\t\t\tdelete emitterInfo.callbacks[ event ];\n\t\t}\n\t\t// Only `emitter` provided. off() all events for that emitter.\n\t\telse if ( emitterInfo ) {\n\t\t\tfor ( event in emitterInfo.callbacks ) {\n\t\t\t\tthis.stopListening( emitter, event );\n\t\t\t}\n\t\t\tdelete emitters[ emitterId ];\n\t\t}\n\t\t// No params provided. off() all emitters.\n\t\telse {\n\t\t\tfor ( emitterId in emitters ) {\n\t\t\t\tthis.stopListening( emitters[ emitterId ].emitter );\n\t\t\t}\n\t\t\tdelete this[ _listeningTo ];\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfire( eventOrInfo, ...args ) {\n\t\tconst eventInfo = eventOrInfo instanceof EventInfo ? eventOrInfo : new EventInfo( this, eventOrInfo );\n\t\tconst event = eventInfo.name;\n\t\tlet callbacks = getCallbacksForEvent( this, event );\n\n\t\t// Record that the event passed this emitter on its path.\n\t\teventInfo.path.push( this );\n\n\t\t// Handle event listener callbacks first.\n\t\tif ( callbacks ) {\n\t\t\t// Arguments passed to each callback.\n\t\t\tconst callbackArgs = [ eventInfo, ...args ];\n\n\t\t\t// Copying callbacks array is the easiest and most secure way of preventing infinite loops, when event callbacks\n\t\t\t// are added while processing other callbacks. Previous solution involved adding counters (unique ids) but\n\t\t\t// failed if callbacks were added to the queue before currently processed callback.\n\t\t\t// If this proves to be too inefficient, another method is to change `.on()` so callbacks are stored if same\n\t\t\t// event is currently processed. Then, `.fire()` at the end, would have to add all stored events.\n\t\t\tcallbacks = Array.from( callbacks );\n\n\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\tcallbacks[ i ].callback.apply( this, callbackArgs );\n\n\t\t\t\t// Remove the callback from future requests if off() has been called.\n\t\t\t\tif ( eventInfo.off.called ) {\n\t\t\t\t\t// Remove the called mark for the next calls.\n\t\t\t\t\tdelete eventInfo.off.called;\n\n\t\t\t\t\tremoveCallback( this, event, callbacks[ i ].callback );\n\t\t\t\t}\n\n\t\t\t\t// Do not execute next callbacks if stop() was called.\n\t\t\t\tif ( eventInfo.stop.called ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Delegate event to other emitters if needed.\n\t\tif ( this._delegations ) {\n\t\t\tconst destinations = this._delegations.get( event );\n\t\t\tconst passAllDestinations = this._delegations.get( '*' );\n\n\t\t\tif ( destinations ) {\n\t\t\t\tfireDelegatedEvents( destinations, eventInfo, args );\n\t\t\t}\n\n\t\t\tif ( passAllDestinations ) {\n\t\t\t\tfireDelegatedEvents( passAllDestinations, eventInfo, args );\n\t\t\t}\n\t\t}\n\n\t\treturn eventInfo.return;\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdelegate( ...events ) {\n\t\treturn {\n\t\t\tto: ( emitter, nameOrFunction ) => {\n\t\t\t\tif ( !this._delegations ) {\n\t\t\t\t\tthis._delegations = new Map();\n\t\t\t\t}\n\n\t\t\t\t// Originally there was a for..of loop which unfortunately caused an error in Babel that didn't allow\n\t\t\t\t// build an application. See: https://github.com/ckeditor/ckeditor5-react/issues/40.\n\t\t\t\tevents.forEach( eventName => {\n\t\t\t\t\tconst destinations = this._delegations.get( eventName );\n\n\t\t\t\t\tif ( !destinations ) {\n\t\t\t\t\t\tthis._delegations.set( eventName, new Map( [ [ emitter, nameOrFunction ] ] ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestinations.set( emitter, nameOrFunction );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstopDelegating( event, emitter ) {\n\t\tif ( !this._delegations ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !event ) {\n\t\t\tthis._delegations.clear();\n\t\t} else if ( !emitter ) {\n\t\t\tthis._delegations.delete( event );\n\t\t} else {\n\t\t\tconst destinations = this._delegations.get( event );\n\n\t\t\tif ( destinations ) {\n\t\t\t\tdestinations.delete( emitter );\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default EmitterMixin;\n\n/**\n * Emitter/listener interface.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/emittermixin~EmitterMixin} mixin.\n *\n * @interface Emitter\n */\n\n/**\n * Registers a callback function to be executed when an event is fired.\n *\n * Shorthand for {@link #listenTo `this.listenTo( this, event, callback, options )`} (it makes the emitter\n * listen on itself).\n *\n * @method #on\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Registers a callback function to be executed on the next time the event is fired only. This is similar to\n * calling {@link #on} followed by {@link #off} in the callback.\n *\n * @method #once\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops executing the callback on the given event.\n * Shorthand for {@link #stopListening `this.stopListening( this, event, callback )`}.\n *\n * @method #off\n * @param {String} event The name of the event.\n * @param {Function} callback The function to stop being called.\n */\n\n/**\n * Registers a callback function to be executed when an event is fired in a specific (emitter) object.\n *\n * Events can be grouped in namespaces using `:`.\n * When namespaced event is fired, it additionally fires all callbacks for that namespace.\n *\n *\t\t// myEmitter.on( ... ) is a shorthand for myEmitter.listenTo( myEmitter, ... ).\n *\t\tmyEmitter.on( 'myGroup', genericCallback );\n *\t\tmyEmitter.on( 'myGroup:myEvent', specificCallback );\n *\n *\t\t// genericCallback is fired.\n *\t\tmyEmitter.fire( 'myGroup' );\n *\t\t// both genericCallback and specificCallback are fired.\n *\t\tmyEmitter.fire( 'myGroup:myEvent' );\n *\t\t// genericCallback is fired even though there are no callbacks for \"foo\".\n *\t\tmyEmitter.fire( 'myGroup:foo' );\n *\n * An event callback can {@link module:utils/eventinfo~EventInfo#stop stop the event} and\n * set the {@link module:utils/eventinfo~EventInfo#return return value} of the {@link #fire} method.\n *\n * @method #listenTo\n * @param {module:utils/emittermixin~Emitter} emitter The object that fires the event.\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops listening for events. It can be used at different levels:\n *\n * * To stop listening to a specific callback.\n * * To stop listening to a specific event.\n * * To stop listening to all events fired by a specific object.\n * * To stop listening to all events fired by all objects.\n *\n * @method #stopListening\n * @param {module:utils/emittermixin~Emitter} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n * for all events from `emitter`.\n * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n * `event`.\n */\n\n/**\n * Fires an event, executing all callbacks registered for it.\n *\n * The first parameter passed to callbacks is an {@link module:utils/eventinfo~EventInfo} object,\n * followed by the optional `args` provided in the `fire()` method call.\n *\n * @method #fire\n * @param {String|module:utils/eventinfo~EventInfo} eventOrInfo The name of the event or `EventInfo` object if event is delegated.\n * @param {...*} [args] Additional arguments to be passed to the callbacks.\n * @returns {*} By default the method returns `undefined`. However, the return value can be changed by listeners\n * through modification of the {@link module:utils/eventinfo~EventInfo#return `evt.return`}'s property (the event info\n * is the first param of every callback).\n */\n\n/**\n * Delegates selected events to another {@link module:utils/emittermixin~Emitter}. For instance:\n *\n *\t\temitterA.delegate( 'eventX' ).to( emitterB );\n *\t\temitterA.delegate( 'eventX', 'eventY' ).to( emitterC );\n *\n * then `eventX` is delegated (fired by) `emitterB` and `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventX', data );\n *\n * and `eventY` is delegated (fired by) `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventY', data );\n *\n * @method #delegate\n * @param {...String} events Event names that will be delegated to another emitter.\n * @returns {module:utils/emittermixin~EmitterMixinDelegateChain}\n */\n\n/**\n * Stops delegating events. It can be used at different levels:\n *\n * * To stop delegating all events.\n * * To stop delegating a specific event to all emitters.\n * * To stop delegating a specific event to a specific emitter.\n *\n * @method #stopDelegating\n * @param {String} [event] The name of the event to stop delegating. If omitted, stops it all delegations.\n * @param {module:utils/emittermixin~Emitter} [emitter] (requires `event`) The object to stop delegating a particular event to.\n * If omitted, stops delegation of `event` to all emitters.\n */\n\n/**\n * Checks if `listeningEmitter` listens to an emitter with given `listenedToEmitterId` and if so, returns that emitter.\n * If not, returns `null`.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} listeningEmitter An emitter that listens.\n * @param {String} listenedToEmitterId Unique emitter id of emitter listened to.\n * @returns {module:utils/emittermixin~Emitter|null}\n */\nexport function _getEmitterListenedTo( listeningEmitter, listenedToEmitterId ) {\n\tif ( listeningEmitter[ _listeningTo ] && listeningEmitter[ _listeningTo ][ listenedToEmitterId ] ) {\n\t\treturn listeningEmitter[ _listeningTo ][ listenedToEmitterId ].emitter;\n\t}\n\n\treturn null;\n}\n\n/**\n * Sets emitter's unique id.\n *\n * **Note:** `_emitterId` can be set only once.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} emitter An emitter for which id will be set.\n * @param {String} [id] Unique id to set. If not passed, random unique id will be set.\n */\nexport function _setEmitterId( emitter, id ) {\n\tif ( !emitter[ _emitterId ] ) {\n\t\temitter[ _emitterId ] = id || uid();\n\t}\n}\n\n/**\n * Returns emitter's unique id.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} emitter An emitter which id will be returned.\n */\nexport function _getEmitterId( emitter ) {\n\treturn emitter[ _emitterId ];\n}\n\n// Gets the internal `_events` property of the given object.\n// `_events` property store all lists with callbacks for registered event names.\n// If there were no events registered on the object, empty `_events` object is created.\nfunction getEvents( source ) {\n\tif ( !source._events ) {\n\t\tObject.defineProperty( source, '_events', {\n\t\t\tvalue: {}\n\t\t} );\n\t}\n\n\treturn source._events;\n}\n\n// Creates event node for generic-specific events relation architecture.\nfunction makeEventNode() {\n\treturn {\n\t\tcallbacks: [],\n\t\tchildEvents: []\n\t};\n}\n\n// Creates an architecture for generic-specific events relation.\n// If needed, creates all events for given eventName, i.e. if the first registered event\n// is foo:bar:abc, it will create foo:bar:abc, foo:bar and foo event and tie them together.\n// It also copies callbacks from more generic events to more specific events when\n// specific events are created.\nfunction createEventNamespace( source, eventName ) {\n\tconst events = getEvents( source );\n\n\t// First, check if the event we want to add to the structure already exists.\n\tif ( events[ eventName ] ) {\n\t\t// If it exists, we don't have to do anything.\n\t\treturn;\n\t}\n\n\t// In other case, we have to create the structure for the event.\n\t// Note, that we might need to create intermediate events too.\n\t// I.e. if foo:bar:abc is being registered and we only have foo in the structure,\n\t// we need to also register foo:bar.\n\n\t// Currently processed event name.\n\tlet name = eventName;\n\t// Name of the event that is a child event for currently processed event.\n\tlet childEventName = null;\n\n\t// Array containing all newly created specific events.\n\tconst newEventNodes = [];\n\n\t// While loop can't check for ':' index because we have to handle generic events too.\n\t// In each loop, we truncate event name, going from the most specific name to the generic one.\n\t// I.e. foo:bar:abc -> foo:bar -> foo.\n\twhile ( name !== '' ) {\n\t\tif ( events[ name ] ) {\n\t\t\t// If the currently processed event name is already registered, we can be sure\n\t\t\t// that it already has all the structure created, so we can break the loop here\n\t\t\t// as no more events need to be registered.\n\t\t\tbreak;\n\t\t}\n\n\t\t// If this event is not yet registered, create a new object for it.\n\t\tevents[ name ] = makeEventNode();\n\t\t// Add it to the array with newly created events.\n\t\tnewEventNodes.push( events[ name ] );\n\n\t\t// Add previously processed event name as a child of this event.\n\t\tif ( childEventName ) {\n\t\t\tevents[ name ].childEvents.push( childEventName );\n\t\t}\n\n\t\tchildEventName = name;\n\t\t// If `.lastIndexOf()` returns -1, `.substr()` will return '' which will break the loop.\n\t\tname = name.substr( 0, name.lastIndexOf( ':' ) );\n\t}\n\n\tif ( name !== '' ) {\n\t\t// If name is not empty, we found an already registered event that was a parent of the\n\t\t// event we wanted to register.\n\n\t\t// Copy that event's callbacks to newly registered events.\n\t\tfor ( const node of newEventNodes ) {\n\t\t\tnode.callbacks = events[ name ].callbacks.slice();\n\t\t}\n\n\t\t// Add last newly created event to the already registered event.\n\t\tevents[ name ].childEvents.push( childEventName );\n\t}\n}\n\n// Gets an array containing callbacks list for a given event and it's more specific events.\n// I.e. if given event is foo:bar and there is also foo:bar:abc event registered, this will\n// return callback list of foo:bar and foo:bar:abc (but not foo).\nfunction getCallbacksListsForNamespace( source, eventName ) {\n\tconst eventNode = getEvents( source )[ eventName ];\n\n\tif ( !eventNode ) {\n\t\treturn [];\n\t}\n\n\tlet callbacksLists = [ eventNode.callbacks ];\n\n\tfor ( let i = 0; i < eventNode.childEvents.length; i++ ) {\n\t\tconst childCallbacksLists = getCallbacksListsForNamespace( source, eventNode.childEvents[ i ] );\n\n\t\tcallbacksLists = callbacksLists.concat( childCallbacksLists );\n\t}\n\n\treturn callbacksLists;\n}\n\n// Get the list of callbacks for a given event, but only if there any callbacks have been registered.\n// If there are no callbacks registered for given event, it checks if this is a specific event and looks\n// for callbacks for it's more generic version.\nfunction getCallbacksForEvent( source, eventName ) {\n\tlet event;\n\n\tif ( !source._events || !( event = source._events[ eventName ] ) || !event.callbacks.length ) {\n\t\t// There are no callbacks registered for specified eventName.\n\t\t// But this could be a specific-type event that is in a namespace.\n\t\tif ( eventName.indexOf( ':' ) > -1 ) {\n\t\t\t// If the eventName is specific, try to find callback lists for more generic event.\n\t\t\treturn getCallbacksForEvent( source, eventName.substr( 0, eventName.lastIndexOf( ':' ) ) );\n\t\t} else {\n\t\t\t// If this is a top-level generic event, return null;\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn event.callbacks;\n}\n\n// Fires delegated events for given map of destinations.\n//\n// @private\n// * @param {Map.<utils.Emitter>} destinations A map containing `[ {@link utils.Emitter}, \"event name\" ]` pair destinations.\n// * @param {utils.EventInfo} eventInfo The original event info object.\n// * @param {Array.<*>} fireArgs Arguments the original event was fired with.\nfunction fireDelegatedEvents( destinations, eventInfo, fireArgs ) {\n\tfor ( let [ emitter, name ] of destinations ) {\n\t\tif ( !name ) {\n\t\t\tname = eventInfo.name;\n\t\t} else if ( typeof name == 'function' ) {\n\t\t\tname = name( eventInfo.name );\n\t\t}\n\n\t\tconst delegatedInfo = new EventInfo( eventInfo.source, name );\n\n\t\tdelegatedInfo.path = [ ...eventInfo.path ];\n\n\t\temitter.fire( delegatedInfo, ...fireArgs );\n\t}\n}\n\n// Removes callback from emitter for given event.\n//\n// @param {module:utils/emittermixin~Emitter} emitter\n// @param {String} event\n// @param {Function} callback\nfunction removeCallback( emitter, event, callback ) {\n\tconst lists = getCallbacksListsForNamespace( emitter, event );\n\n\tfor ( const callbacks of lists ) {\n\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\tif ( callbacks[ i ].callback == callback ) {\n\t\t\t\t// Remove the callback from the list (fixing the next index).\n\t\t\t\tcallbacks.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * The return value of {@link ~EmitterMixin#delegate}.\n *\n * @interface module:utils/emittermixin~EmitterMixinDelegateChain\n */\n\n/**\n * Selects destination for {@link module:utils/emittermixin~EmitterMixin#delegate} events.\n *\n * @method #to\n * @param {module:utils/emittermixin~Emitter} emitter An `EmitterMixin` instance which is the destination for delegated events.\n * @param {String|Function} [nameOrFunction] A custom event name or function which converts the original name string.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils related to keyboard support.\n *\n * @module utils/keyboard\n */\n\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\n\nconst macGlyphsToModifiers = {\n\t'⌘': 'ctrl',\n\t'⇧': 'shift',\n\t'⌥': 'alt'\n};\n\nconst modifiersToMacGlyphs = {\n\t'ctrl': '⌘',\n\t'shift': '⇧',\n\t'alt': '⌥'\n};\n\n/**\n * Object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\nexport const keyCodes = generateKnownKeyCodes();\n\n/**\n * Converts a key name or a {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} Key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\nexport function getCode( key ) {\n\tlet keyCode;\n\n\tif ( typeof key == 'string' ) {\n\t\tkeyCode = keyCodes[ key.toLowerCase() ];\n\n\t\tif ( !keyCode ) {\n\t\t\t/**\n\t\t\t * Unknown key name. Only key names contained by the {@link module:utils/keyboard~keyCodes} can be used.\n\t\t\t *\n\t\t\t * @errror keyboard-unknown-key\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'keyboard-unknown-key: Unknown key name.',\n\t\t\t\tnull, { key }\n\t\t\t);\n\t\t}\n\t} else {\n\t\tkeyCode = key.keyCode +\n\t\t\t( key.altKey ? keyCodes.alt : 0 ) +\n\t\t\t( key.ctrlKey ? keyCodes.ctrl : 0 ) +\n\t\t\t( key.shiftKey ? keyCodes.shift : 0 );\n\t}\n\n\treturn keyCode;\n}\n\n/**\n * Parses keystroke and returns a keystroke code that will match the code returned by\n * link {@link module:utils/keyboard.getCode} for a corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * @param {String|Array.<Number|String>} keystroke Keystroke definition.\n * @returns {Number} Keystroke code.\n */\nexport function parseKeystroke( keystroke ) {\n\tif ( typeof keystroke == 'string' ) {\n\t\tkeystroke = splitKeystrokeText( keystroke );\n\t}\n\n\treturn keystroke\n\t\t.map( key => ( typeof key == 'string' ) ? getCode( key ) : key )\n\t\t.reduce( ( key, sum ) => sum + key, 0 );\n}\n\n/**\n * It translates any keystroke string text like `\"CTRL+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on Mac OSX.\n *\n * @param {String} keystroke Keystroke text.\n * @returns {String} Keystroke text specific for the environment.\n */\nexport function getEnvKeystrokeText( keystroke ) {\n\tif ( !env.isMac ) {\n\t\treturn keystroke;\n\t}\n\n\treturn splitKeystrokeText( keystroke )\n\t\t// Replace modifiers (e.g. \"ctrl\") with Mac glyphs (e.g. \"⌘\") first.\n\t\t.map( key => modifiersToMacGlyphs[ key.toLowerCase() ] || key )\n\n\t\t// Decide whether to put \"+\" between keys in the keystroke or not.\n\t\t.reduce( ( value, key ) => {\n\t\t\tif ( value.slice( -1 ) in macGlyphsToModifiers ) {\n\t\t\t\treturn value + key;\n\t\t\t} else {\n\t\t\t\treturn value + '+' + key;\n\t\t\t}\n\t\t} );\n}\n\nfunction generateKnownKeyCodes() {\n\tconst keyCodes = {\n\t\tarrowleft: 37,\n\t\tarrowup: 38,\n\t\tarrowright: 39,\n\t\tarrowdown: 40,\n\t\tbackspace: 8,\n\t\tdelete: 46,\n\t\tenter: 13,\n\t\tspace: 32,\n\t\tesc: 27,\n\t\ttab: 9,\n\n\t\t// The idea about these numbers is that they do not collide with any real key codes, so we can use them\n\t\t// like bit masks.\n\t\tctrl: 0x110000,\n\t\t// Has the same code as ctrl, because their behaviour should be unified across the editor.\n\t\t// See http://ckeditor.github.io/editor-recommendations/general-policies#ctrl-vs-cmd\n\t\tcmd: 0x110000,\n\t\tshift: 0x220000,\n\t\talt: 0x440000\n\t};\n\n\t// a-z\n\tfor ( let code = 65; code <= 90; code++ ) {\n\t\tconst letter = String.fromCharCode( code );\n\n\t\tkeyCodes[ letter.toLowerCase() ] = code;\n\t}\n\n\t// 0-9\n\tfor ( let code = 48; code <= 57; code++ ) {\n\t\tkeyCodes[ code - 48 ] = code;\n\t}\n\n\t// F1-F12\n\tfor ( let code = 112; code <= 123; code++ ) {\n\t\tkeyCodes[ 'f' + ( code - 111 ) ] = code;\n\t}\n\n\treturn keyCodes;\n}\n\nfunction splitKeystrokeText( keystroke ) {\n\treturn keystroke.split( /\\s*\\+\\s*/ );\n}\n\n/**\n * Information about a keystroke.\n *\n * @interface module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode).\n *\n * @member {Number} module:utils/keyboard~KeystrokeInfo#keyCode\n */\n\n/**\n * Whether the <kbd>Alt</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#altKey\n */\n\n/**\n * Whether the <kbd>Ctrl</kbd> or <kbd>Cmd</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#ctrlKey\n */\n\n/**\n * Whether the <kbd>Shift</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#shiftKey\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/range\n */\n\nimport Position from './position';\nimport TreeWalker from './treewalker';\n\n/**\n * Range in the view tree. A range is represented by its start and end {@link module:engine/view/position~Position positions}.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Range {\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** Constructor creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at the `start` position.\n\t */\n\tconstructor( start, end = null ) {\n\t\t/**\n\t\t * Start position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position}\n\t\t */\n\t\tthis.start = start.clone();\n\n\t\t/**\n\t\t * End position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position}\n\t\t */\n\t\tthis.end = end ? end.clone() : start.clone();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n\t * them together with additional information like length or {@link module:engine/view/position~Position positions},\n\t * grouped as {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * This iterator uses {@link module:engine/view/treewalker~TreeWalker TreeWalker} with `boundaries` set to this range and\n\t * `ignoreElementEnd` option\n\t * set to `true`.\n\t *\n\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\n\t}\n\n\t/**\n\t * Returns whether the range is collapsed, that is it start and end positions are equal.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.start.isEqual( this.end );\n\t}\n\n\t/**\n\t * Returns whether this range is flat, that is if {@link module:engine/view/range~Range#start start} position and\n\t * {@link module:engine/view/range~Range#end end} position are in the same {@link module:engine/view/position~Position#parent parent}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isFlat() {\n\t\treturn this.start.parent === this.end.parent;\n\t}\n\n\t/**\n\t * Range root element.\n\t *\n\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.start.root;\n\t}\n\n\t/**\n\t * Creates a maximal range that has the same content as this range but is expanded in both ways (at the beginning\n\t * and at the end).\n\t *\n\t * For example:\n\t *\n\t *\t\t<p>Foo</p><p><b>{Bar}</b></p> -> <p>Foo</p>[<p><b>Bar</b>]</p>\n\t *\t\t<p><b>foo</b>{bar}<span></span></p> -> <p><b>foo[</b>bar<span></span>]</p>\n\t *\n\t * Note that in the sample above:\n\t *\n\t * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n\t * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n\t * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n\t *\n\t * @returns {module:engine/view/range~Range} Enlarged range.\n\t */\n\tgetEnlarged() {\n\t\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\n\t\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip );\n\n\t\t// Fix positions, in case if they are in Text node.\n\t\tif ( start.parent.is( 'text' ) && start.isAtStart ) {\n\t\t\tstart = Position._createBefore( start.parent );\n\t\t}\n\n\t\tif ( end.parent.is( 'text' ) && end.isAtEnd ) {\n\t\t\tend = Position._createAfter( end.parent );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a minimum range that has the same content as this range but is trimmed in both ways (at the beginning\n\t * and at the end).\n\t *\n\t * For example:\n\t *\n\t *\t\t<p>Foo</p>[<p><b>Bar</b>]</p> -> <p>Foo</p><p><b>{Bar}</b></p>\n\t *\t\t<p><b>foo[</b>bar<span></span>]</p> -> <p><b>foo</b>{bar}<span></span></p>\n\t *\n\t * Note that in the sample above:\n\t *\n\t * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n\t * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n\t * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n\t *\n\t * @returns {module:engine/view/range~Range} Shrink range.\n\t */\n\tgetTrimmed() {\n\t\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip );\n\n\t\tif ( start.isAfter( this.end ) || start.isEqual( this.end ) ) {\n\t\t\treturn new Range( start, start );\n\t\t}\n\n\t\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\n\t\tconst nodeAfterStart = start.nodeAfter;\n\t\tconst nodeBeforeEnd = end.nodeBefore;\n\n\t\t// Because TreeWalker prefers positions next to text node, we need to move them manually into these text nodes.\n\t\tif ( nodeAfterStart && nodeAfterStart.is( 'text' ) ) {\n\t\t\tstart = new Position( nodeAfterStart, 0 );\n\t\t}\n\n\t\tif ( nodeBeforeEnd && nodeBeforeEnd.is( 'text' ) ) {\n\t\t\tend = new Position( nodeBeforeEnd, nodeBeforeEnd.data.length );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Two ranges are equal if their start and end positions are equal.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise\n\t */\n\tisEqual( otherRange ) {\n\t\treturn this == otherRange || ( this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end ) );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/view/position~Position position}.\n\t *\n\t * @param {module:engine/view/position~Position} position Position to check.\n\t * @returns {Boolean} `true` if given {@link module:engine/view/position~Position position} is contained in this range,\n\t * `false` otherwise.\n\t */\n\tcontainsPosition( position ) {\n\t\treturn position.isAfter( this.start ) && position.isBefore( this.end );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/view/range~Range range}.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to check.\n\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n\t * @returns {Boolean} `true` if given {@link module:engine/view/range~Range range} boundaries are contained by this range, `false`\n\t * otherwise.\n\t */\n\tcontainsRange( otherRange, loose = false ) {\n\t\tif ( otherRange.isCollapsed ) {\n\t\t\tloose = false;\n\t\t}\n\n\t\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\n\t\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\n\n\t\treturn containsStart && containsEnd;\n\t}\n\n\t/**\n\t * Computes which part(s) of this {@link module:engine/view/range~Range range} is not a part of given\n\t * {@link module:engine/view/range~Range range}.\n\t * Returned array contains zero, one or two {@link module:engine/view/range~Range ranges}.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet foo = downcastWriter.createText( 'foo' );\n\t *\t\tlet img = downcastWriter.createContainerElement( 'img' );\n\t *\t\tlet bar = downcastWriter.createText( 'bar' );\n\t *\t\tlet p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n\t *\n\t *\t\tlet range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n\t *\t\tlet otherRange = view.createRange( // \"oo\", img, \"ba\" are in range.\n\t *\t\t\tview.createPositionAt( foo, 1 ),\n\t *\t\t\tview.createPositionAt( bar, 2 )\n\t *\t\t);\n\t *\t\tlet transformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has no ranges because `otherRange` contains `range`\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has one range: from ( p, 2 ) to ( bar, 1 )\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( p, 1 ), view.createPositionAt( p, 2 ) ); // img is in range.\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has two ranges: from ( foo, 1 ) to ( p, 1 ) and from ( p, 2 ) to ( bar, 1 )\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to differentiate against.\n\t * @returns {Array.<module:engine/view/range~Range>} The difference between ranges.\n\t */\n\tgetDifference( otherRange ) {\n\t\tconst ranges = [];\n\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect.\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the start to the middle of this range.\n\t\t\t\tranges.push( new Range( this.start, otherRange.start ) );\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the middle of this range to the end.\n\t\t\t\tranges.push( new Range( otherRange.end, this.end ) );\n\t\t\t}\n\t\t} else {\n\t\t\t// Ranges do not intersect, return the original range.\n\t\t\tranges.push( this.clone() );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an intersection of this {@link module:engine/view/range~Range range} and given {@link module:engine/view/range~Range range}.\n\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet foo = downcastWriter.createText( 'foo' );\n\t *\t\tlet img = downcastWriter.createContainerElement( 'img' );\n\t *\t\tlet bar = downcastWriter.createText( 'bar' );\n\t *\t\tlet p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n\t *\n\t *\t\tlet range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n\t *\t\tlet otherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n\t *\t\tlet transformed = range.getIntersection( otherRange ); // range from ( foo, 1 ) to ( p, 2 ).\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( bar, 1 ), view.createPositionAt( bar, 3 ); \"ar\" is in range.\n\t *\t\ttransformed = range.getIntersection( otherRange ); // null - no common part.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to check for intersection.\n\t * @returns {module:engine/view/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n\t */\n\tgetIntersection( otherRange ) {\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect, so a common range will be returned.\n\t\t\t// At most, it will be same as this range.\n\t\t\tlet commonRangeStart = this.start;\n\t\t\tlet commonRangeEnd = this.end;\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means thaNt we have to\n\t\t\t\t// shrink common range to the given range start.\n\t\t\t\tcommonRangeStart = otherRange.start;\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// shrink common range to the given range end.\n\t\t\t\tcommonRangeEnd = otherRange.end;\n\t\t\t}\n\n\t\t\treturn new Range( commonRangeStart, commonRangeEnd );\n\t\t}\n\n\t\t// Ranges do not intersect, so they do not have common part.\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @param {module:engine/view/position~Position} [options.startPosition]\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t * @returns {module:engine/view/treewalker~TreeWalker}\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of range's both ends (in which the entire range is contained).\n\t *\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor() {\n\t\treturn this.start.getCommonAncestor( this.end );\n\t}\n\n\t/**\n\t * Clones this range.\n\t *\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tclone() {\n\t\treturn new Range( this.start, this.end );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n\t * them.\n\t *\n\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n\t * set to `true`. However it returns only {@link module:engine/view/item~Item items},\n\t * not {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/view/item~Item>}\n\t */\n\t* getItems( options = {} ) {\n\t\toptions.boundaries = this;\n\t\toptions.ignoreElementEnd = true;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.item;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/view/position~Position positions} that are boundaries or\n\t * contained in this range.\n\t *\n\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n\t * {@link module:engine/view/position~Position positions}, not {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/view/position~Position>}\n\t */\n\t* getPositions( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tyield treeWalker.position;\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.nextPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\trange.is( 'range' ); // -> true\n\t *\t\trange.is( 'view:range' ); // -> true\n\t *\n\t *\t\trange.is( 'model:range' ); // -> false\n\t *\t\trange.is( 'element' ); // -> false\n\t *\t\trange.is( 'selection' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'range' || type == 'view:range';\n\t}\n\n\t/**\n\t * Checks and returns whether this range intersects with the given range.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} True if ranges intersect.\n\t */\n\tisIntersecting( otherRange ) {\n\t\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\n\t}\n\n\t/**\n\t * Creates a range from the given parents and offsets.\n\t *\n\t * @protected\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} startElement Start position\n\t * parent element.\n\t * @param {Number} startOffset Start position offset.\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} endElement End position\n\t * parent element.\n\t * @param {Number} endOffset End position offset.\n\t * @returns {module:engine/view/range~Range} Created range.\n\t */\n\tstatic _createFromParentsAndOffsets( startElement, startOffset, endElement, endOffset ) {\n\t\treturn new this(\n\t\t\tnew Position( startElement, startOffset ),\n\t\t\tnew Position( endElement, endOffset )\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new range, spreading from specified {@link module:engine/view/position~Position position} to a position moved by\n\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n\t *\n\t * @protected\n\t * @param {module:engine/view/position~Position} position Beginning of the range.\n\t * @param {Number} shift How long the range should be.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createFromPositionAndShift( position, shift ) {\n\t\tconst start = position;\n\t\tconst end = position.getShiftedBy( shift );\n\n\t\treturn shift > 0 ? new this( start, end ) : new this( end, start );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @protected\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createIn( element ) {\n\t\treturn this._createFromParentsAndOffsets( element, 0, element, element.childCount );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createOn( item ) {\n\t\tconst size = item.is( 'textProxy' ) ? item.offsetSize : 1;\n\n\t\treturn this._createFromPositionAndShift( Position._createBefore( item ), size );\n\t}\n}\n\n// Function used by getEnlarged and getTrimmed methods.\nfunction enlargeTrimSkip( value ) {\n\tif ( value.item.is( 'attributeElement' ) || value.item.is( 'uiElement' ) ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window */\n\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\n\n/**\n * Set of utils related to block and inline fillers handling.\n *\n * Browsers do not allow to put caret in elements which does not have height. Because of it, we need to fill all\n * empty elements which should be selectable with elements or characters called \"fillers\". Unfortunately there is no one\n * universal filler, this is why two types are uses:\n *\n * * Block filler is an element which fill block elements, like `<p>`. CKEditor uses `<br>` as a block filler during the editing,\n * as browsers do natively. So instead of an empty `<p>` there will be `<p><br></p>`. The advantage of block filler is that\n * it is transparent for the selection, so when the caret is before the `<br>` and user presses right arrow he will be\n * moved to the next paragraph, not after the `<br>`. The disadvantage is that it breaks a block, so it can not be used\n * in the middle of a line of text. The {@link module:engine/view/filler~BR_FILLER `<br>` filler} can be replaced with any other\n * character in the data output, for instance {@link module:engine/view/filler~NBSP_FILLER non-breaking space}.\n *\n * * Inline filler is a filler which does not break a line of text, so it can be used inside the text, for instance in the empty\n * `<b>` surrendered by text: `foo<b></b>bar`, if we want to put the caret there. CKEditor uses a sequence of the zero-width\n * spaces as an {@link module:engine/view/filler~INLINE_FILLER inline filler} having the predetermined\n * {@link module:engine/view/filler~INLINE_FILLER_LENGTH length}. A sequence is used, instead of a single character to\n * avoid treating random zero-width spaces as the inline filler. Disadvantage of the inline filler is that it is not\n * transparent for the selection. The arrow key moves the caret between zero-width spaces characters, so the additional\n * code is needed to handle the caret.\n *\n * Both inline and block fillers are handled by the {@link module:engine/view/renderer~Renderer renderer} and are not present in the\n * view.\n *\n * @module engine/view/filler\n */\n\n/**\n * `<br>` filler creator. This is a function which creates `<br data-cke-filler=\"true\">` element.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~NBSP_FILLER\n * @function\n */\nexport const BR_FILLER = domDocument => {\n\tconst fillerBr = domDocument.createElement( 'br' );\n\tfillerBr.dataset.ckeFiller = true;\n\n\treturn fillerBr;\n};\n\n/**\n * Non-breaking space filler creator. This is a function which creates `&nbsp;` text node.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~BR_FILLER\n * @function\n */\nexport const NBSP_FILLER = domDocument => domDocument.createTextNode( '\\u00A0' );\n\n/**\n * Length of the {@link module:engine/view/filler~INLINE_FILLER INLINE_FILLER}.\n */\nexport const INLINE_FILLER_LENGTH = 7;\n\n/**\n * Inline filler which is sequence of the zero width spaces.\n */\nexport let INLINE_FILLER = '';\n\nfor ( let i = 0; i < INLINE_FILLER_LENGTH; i++ ) {\n\tINLINE_FILLER += '\\u200b';\n}\n\n/**\n * Checks if the node is a text node which starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n *\t\tstartsWithFiller( document.createTextNode( INLINE_FILLER ) ); // true\n *\t\tstartsWithFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // true\n *\t\tstartsWithFiller( document.createTextNode( 'foo' ) ); // false\n *\t\tstartsWithFiller( document.createElement( 'p' ) ); // false\n *\n * @param {Node} domNode DOM node.\n * @returns {Boolean} True if the text node starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function startsWithFiller( domNode ) {\n\treturn isText( domNode ) && ( domNode.data.substr( 0, INLINE_FILLER_LENGTH ) === INLINE_FILLER );\n}\n\n/**\n * Checks if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n *\t\tisInlineFiller( document.createTextNode( INLINE_FILLER ) ); // true\n *\t\tisInlineFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // false\n *\n * @param {Text} domText DOM text node.\n * @returns {Boolean} True if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function isInlineFiller( domText ) {\n\treturn domText.data.length == INLINE_FILLER_LENGTH && startsWithFiller( domText );\n}\n\n/**\n * Get string data from the text node, removing an {@link module:engine/view/filler~INLINE_FILLER inline filler} from it,\n * if text node contains it.\n *\n *\t\tgetDataWithoutFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ) == 'foo' // true\n *\t\tgetDataWithoutFiller( document.createTextNode( 'foo' ) ) == 'foo' // true\n *\n * @param {Text} domText DOM text node, possible with inline filler.\n * @returns {String} Data without filler.\n */\nexport function getDataWithoutFiller( domText ) {\n\tif ( startsWithFiller( domText ) ) {\n\t\treturn domText.data.slice( INLINE_FILLER_LENGTH );\n\t} else {\n\t\treturn domText.data;\n\t}\n}\n\n// Cache block fillers templates to improve performance.\nconst templateBlockFillers = new WeakMap();\n\n/**\n * Checks if the node is an instance of the block filler of the given type.\n *\n *\t\tconst brFillerInstance = BR_FILLER( document );\n *\t\tisBlockFiller( brFillerInstance, BR_FILLER ); // true\n *\n * @param {Node} domNode DOM node to check.\n * @param {Function} blockFiller Block filler creator.\n * @returns {Boolean} True if text node contains only {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function isBlockFiller( domNode, blockFiller ) {\n\tlet templateBlockFiller = templateBlockFillers.get( blockFiller );\n\n\tif ( !templateBlockFiller ) {\n\t\ttemplateBlockFiller = blockFiller( window.document );\n\t\ttemplateBlockFillers.set( blockFiller, templateBlockFiller );\n\t}\n\n\treturn domNode.isEqualNode( templateBlockFiller );\n}\n\n/**\n * Assign key observer which move cursor from the end of the inline filler to the beginning of it when\n * the left arrow is pressed, so the filler does not break navigation.\n *\n * @param {module:engine/view/view~View} view View controller instance we should inject quirks handling on.\n */\nexport function injectQuirksHandling( view ) {\n\tview.document.on( 'keydown', jumpOverInlineFiller );\n}\n\n// Move cursor from the end of the inline filler to the beginning of it when, so the filler does not break navigation.\nfunction jumpOverInlineFiller( evt, data ) {\n\tif ( data.keyCode == keyCodes.arrowleft ) {\n\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\tif ( domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed ) {\n\t\t\tconst domParent = domSelection.getRangeAt( 0 ).startContainer;\n\t\t\tconst domOffset = domSelection.getRangeAt( 0 ).startOffset;\n\n\t\t\tif ( startsWithFiller( domParent ) && domOffset <= INLINE_FILLER_LENGTH ) {\n\t\t\t\tdomSelection.collapse( domParent, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/observablemixin\n */\n\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport { extend, isObject } from 'lodash-es';\n\nconst observablePropertiesSymbol = Symbol( 'observableProperties' );\nconst boundObservablesSymbol = Symbol( 'boundObservables' );\nconst boundPropertiesSymbol = Symbol( 'boundProperties' );\n\n/**\n * Mixin that injects the \"observable properties\" and data binding functionality described in the\n * {@link ~Observable} interface.\n *\n * Read more about the concept of observables in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables \"Event system and observables\"}\n * section of the {@glink framework/guides/architecture/core-editor-architecture \"Core editor architecture\"} guide,\n * * {@glink framework/guides/deep-dive/observables \"Observables\" deep dive} guide.\n *\n * @mixin ObservableMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/observablemixin~Observable\n */\nconst ObservableMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tset( name, value ) {\n\t\t// If the first parameter is an Object, iterate over its properties.\n\t\tif ( isObject( name ) ) {\n\t\t\tObject.keys( name ).forEach( property => {\n\t\t\t\tthis.set( property, name[ property ] );\n\t\t\t}, this );\n\n\t\t\treturn;\n\t\t}\n\n\t\tinitObservable( this );\n\n\t\tconst properties = this[ observablePropertiesSymbol ];\n\n\t\tif ( ( name in this ) && !properties.has( name ) ) {\n\t\t\t/**\n\t\t\t * Cannot override an existing property.\n\t\t\t *\n\t\t\t * This error is thrown when trying to {@link ~Observable#set set} an property with\n\t\t\t * a name of an already existing property. For example:\n\t\t\t *\n\t\t\t *\t\tlet observable = new Model();\n\t\t\t *\t\tobservable.property = 1;\n\t\t\t *\t\tobservable.set( 'property', 2 );\t\t\t// throws\n\t\t\t *\n\t\t\t *\t\tobservable.set( 'property', 1 );\n\t\t\t *\t\tobservable.set( 'property', 2 );\t\t\t// ok, because this is an existing property.\n\t\t\t *\n\t\t\t * @error observable-set-cannot-override\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-set-cannot-override: Cannot override an existing property.', this );\n\t\t}\n\n\t\tObject.defineProperty( this, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget() {\n\t\t\t\treturn properties.get( name );\n\t\t\t},\n\n\t\t\tset( value ) {\n\t\t\t\tconst oldValue = properties.get( name );\n\n\t\t\t\t// Fire `set` event before the new value will be set to make it possible\n\t\t\t\t// to override observable property without affecting `change` event.\n\t\t\t\t// See https://github.com/ckeditor/ckeditor5-utils/issues/171.\n\t\t\t\tlet newValue = this.fire( 'set:' + name, name, value, oldValue );\n\n\t\t\t\tif ( newValue === undefined ) {\n\t\t\t\t\tnewValue = value;\n\t\t\t\t}\n\n\t\t\t\t// Allow undefined as an initial value like A.define( 'x', undefined ) (#132).\n\t\t\t\t// Note: When properties map has no such own property, then its value is undefined.\n\t\t\t\tif ( oldValue !== newValue || !properties.has( name ) ) {\n\t\t\t\t\tproperties.set( name, newValue );\n\t\t\t\t\tthis.fire( 'change:' + name, name, newValue, oldValue );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tthis[ name ] = value;\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbind( ...bindProperties ) {\n\t\tif ( !bindProperties.length || !isStringArray( bindProperties ) ) {\n\t\t\t/**\n\t\t\t * All properties must be strings.\n\t\t\t *\n\t\t\t * @error observable-bind-wrong-properties\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-wrong-properties: All properties must be strings.', this );\n\t\t}\n\n\t\tif ( ( new Set( bindProperties ) ).size !== bindProperties.length ) {\n\t\t\t/**\n\t\t\t * Properties must be unique.\n\t\t\t *\n\t\t\t * @error observable-bind-duplicate-properties\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-duplicate-properties: Properties must be unique.', this );\n\t\t}\n\n\t\tinitObservable( this );\n\n\t\tconst boundProperties = this[ boundPropertiesSymbol ];\n\n\t\tbindProperties.forEach( propertyName => {\n\t\t\tif ( boundProperties.has( propertyName ) ) {\n\t\t\t\t/**\n\t\t\t\t * Cannot bind the same property more that once.\n\t\t\t\t *\n\t\t\t\t * @error observable-bind-rebind\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'observable-bind-rebind: Cannot bind the same property more that once.', this );\n\t\t\t}\n\t\t} );\n\n\t\tconst bindings = new Map();\n\n\t\t// @typedef {Object} Binding\n\t\t// @property {Array} property Property which is bound.\n\t\t// @property {Array} to Array of observable–property components of the binding (`{ observable: ..., property: .. }`).\n\t\t// @property {Array} callback A function which processes `to` components.\n\t\tbindProperties.forEach( a => {\n\t\t\tconst binding = { property: a, to: [] };\n\n\t\t\tboundProperties.set( a, binding );\n\t\t\tbindings.set( a, binding );\n\t\t} );\n\n\t\t// @typedef {Object} BindChain\n\t\t// @property {Function} to See {@link ~ObservableMixin#_bindTo}.\n\t\t// @property {Function} toMany See {@link ~ObservableMixin#_bindToMany}.\n\t\t// @property {module:utils/observablemixin~Observable} _observable The observable which initializes the binding.\n\t\t// @property {Array} _bindProperties Array of `_observable` properties to be bound.\n\t\t// @property {Array} _to Array of `to()` observable–properties (`{ observable: toObservable, properties: ...toProperties }`).\n\t\t// @property {Map} _bindings Stores bindings to be kept in\n\t\t// {@link ~ObservableMixin#_boundProperties}/{@link ~ObservableMixin#_boundObservables}\n\t\t// initiated in this binding chain.\n\t\treturn {\n\t\t\tto: bindTo,\n\t\t\ttoMany: bindToMany,\n\n\t\t\t_observable: this,\n\t\t\t_bindProperties: bindProperties,\n\t\t\t_to: [],\n\t\t\t_bindings: bindings\n\t\t};\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tunbind( ...unbindProperties ) {\n\t\t// Nothing to do here if not inited yet.\n\t\tif ( !( observablePropertiesSymbol in this ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst boundProperties = this[ boundPropertiesSymbol ];\n\t\tconst boundObservables = this[ boundObservablesSymbol ];\n\n\t\tif ( unbindProperties.length ) {\n\t\t\tif ( !isStringArray( unbindProperties ) ) {\n\t\t\t\t/**\n\t\t\t\t * Properties must be strings.\n\t\t\t\t *\n\t\t\t\t * @error observable-unbind-wrong-properties\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'observable-unbind-wrong-properties: Properties must be strings.', this );\n\t\t\t}\n\n\t\t\tunbindProperties.forEach( propertyName => {\n\t\t\t\tconst binding = boundProperties.get( propertyName );\n\n\t\t\t\t// Nothing to do if the binding is not defined\n\t\t\t\tif ( !binding ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet toObservable, toProperty, toProperties, toPropertyBindings;\n\n\t\t\t\tbinding.to.forEach( to => {\n\t\t\t\t\t// TODO: ES6 destructuring.\n\t\t\t\t\ttoObservable = to[ 0 ];\n\t\t\t\t\ttoProperty = to[ 1 ];\n\t\t\t\t\ttoProperties = boundObservables.get( toObservable );\n\t\t\t\t\ttoPropertyBindings = toProperties[ toProperty ];\n\n\t\t\t\t\ttoPropertyBindings.delete( binding );\n\n\t\t\t\t\tif ( !toPropertyBindings.size ) {\n\t\t\t\t\t\tdelete toProperties[ toProperty ];\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !Object.keys( toProperties ).length ) {\n\t\t\t\t\t\tboundObservables.delete( toObservable );\n\t\t\t\t\t\tthis.stopListening( toObservable, 'change' );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tboundProperties.delete( propertyName );\n\t\t\t} );\n\t\t} else {\n\t\t\tboundObservables.forEach( ( bindings, boundObservable ) => {\n\t\t\t\tthis.stopListening( boundObservable, 'change' );\n\t\t\t} );\n\n\t\t\tboundObservables.clear();\n\t\t\tboundProperties.clear();\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdecorate( methodName ) {\n\t\tconst originalMethod = this[ methodName ];\n\n\t\tif ( !originalMethod ) {\n\t\t\t/**\n\t\t\t * Cannot decorate an undefined method.\n\t\t\t *\n\t\t\t * @error observablemixin-cannot-decorate-undefined\n\t\t\t * @param {Object} object The object which method should be decorated.\n\t\t\t * @param {String} methodName Name of the method which does not exist.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'observablemixin-cannot-decorate-undefined: Cannot decorate an undefined method.',\n\t\t\t\tthis,\n\t\t\t\t{ object: this, methodName }\n\t\t\t);\n\t\t}\n\n\t\tthis.on( methodName, ( evt, args ) => {\n\t\t\tevt.return = originalMethod.apply( this, args );\n\t\t} );\n\n\t\tthis[ methodName ] = function( ...args ) {\n\t\t\treturn this.fire( methodName, args );\n\t\t};\n\t}\n};\n\nextend( ObservableMixin, EmitterMixin );\n\nexport default ObservableMixin;\n\n// Init symbol properties needed to for the observable mechanism to work.\n//\n// @private\n// @param {module:utils/observablemixin~ObservableMixin} observable\nfunction initObservable( observable ) {\n\t// Do nothing if already inited.\n\tif ( observablePropertiesSymbol in observable ) {\n\t\treturn;\n\t}\n\n\t// The internal hash containing the observable's state.\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, observablePropertiesSymbol, {\n\t\tvalue: new Map()\n\t} );\n\n\t// Map containing bindings to external observables. It shares the binding objects\n\t// (`{ observable: A, property: 'a', to: ... }`) with {@link module:utils/observablemixin~ObservableMixin#_boundProperties} and\n\t// it is used to observe external observables to update own properties accordingly.\n\t// See {@link module:utils/observablemixin~ObservableMixin#bind}.\n\t//\n\t//\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n\t//\t\tconsole.log( A._boundObservables );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\tB: {\n\t//\t\t\t\t\tx: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\ty: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t}\n\t//\t\t\t} )\n\t//\n\t//\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n\t//\t\tconsole.log( A._boundObservables );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\tB: {\n\t//\t\t\t\t\tx: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\ty: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\tz: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t},\n\t//\t\t\t\tC: {\n\t//\t\t\t\t\tw: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t}\n\t//\t\t\t} )\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, boundObservablesSymbol, {\n\t\tvalue: new Map()\n\t} );\n\n\t// Object that stores which properties of this observable are bound and how. It shares\n\t// the binding objects (`{ observable: A, property: 'a', to: ... }`) with {@link utils.ObservableMixin#_boundObservables}.\n\t// This data structure is a reverse of {@link utils.ObservableMixin#_boundObservables} and it is helpful for\n\t// {@link utils.ObservableMixin#unbind}.\n\t//\n\t// See {@link utils.ObservableMixin#bind}.\n\t//\n\t//\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n\t//\t\tconsole.log( A._boundProperties );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t} )\n\t//\n\t//\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n\t//\t\tconsole.log( A._boundProperties );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\td: { observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t} )\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, boundPropertiesSymbol, {\n\t\tvalue: new Map()\n\t} );\n}\n\n// A chaining for {@link module:utils/observablemixin~ObservableMixin#bind} providing `.to()` interface.\n//\n// @private\n// @param {...[Observable|String|Function]} args Arguments of the `.to( args )` binding.\nfunction bindTo( ...args ) {\n\tconst parsedArgs = parseBindToArgs( ...args );\n\tconst bindingsKeys = Array.from( this._bindings.keys() );\n\tconst numberOfBindings = bindingsKeys.length;\n\n\t// Eliminate A.bind( 'x' ).to( B, C )\n\tif ( !parsedArgs.callback && parsedArgs.to.length > 1 ) {\n\t\t/**\n\t\t * Binding multiple observables only possible with callback.\n\t\t *\n\t\t * @error observable-bind-no-callback\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'observable-bind-to-no-callback: Binding multiple observables only possible with callback.',\n\t\t\tthis\n\t\t);\n\t}\n\n\t// Eliminate A.bind( 'x', 'y' ).to( B, callback )\n\tif ( numberOfBindings > 1 && parsedArgs.callback ) {\n\t\t/**\n\t\t * Cannot bind multiple properties and use a callback in one binding.\n\t\t *\n\t\t * @error observable-bind-to-extra-callback\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'observable-bind-to-extra-callback: Cannot bind multiple properties and use a callback in one binding.',\n\t\t\tthis\n\t\t);\n\t}\n\n\tparsedArgs.to.forEach( to => {\n\t\t// Eliminate A.bind( 'x', 'y' ).to( B, 'a' )\n\t\tif ( to.properties.length && to.properties.length !== numberOfBindings ) {\n\t\t\t/**\n\t\t\t * The number of properties must match.\n\t\t\t *\n\t\t\t * @error observable-bind-to-properties-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-to-properties-length: The number of properties must match.', this );\n\t\t}\n\n\t\t// When no to.properties specified, observing source properties instead i.e.\n\t\t// A.bind( 'x', 'y' ).to( B ) -> Observe B.x and B.y\n\t\tif ( !to.properties.length ) {\n\t\t\tto.properties = this._bindProperties;\n\t\t}\n\t} );\n\n\tthis._to = parsedArgs.to;\n\n\t// Fill {@link BindChain#_bindings} with callback. When the callback is set there's only one binding.\n\tif ( parsedArgs.callback ) {\n\t\tthis._bindings.get( bindingsKeys[ 0 ] ).callback = parsedArgs.callback;\n\t}\n\n\tattachBindToListeners( this._observable, this._to );\n\n\t// Update observable._boundProperties and observable._boundObservables.\n\tupdateBindToBound( this );\n\n\t// Set initial values of bound properties.\n\tthis._bindProperties.forEach( propertyName => {\n\t\tupdateBoundObservableProperty( this._observable, propertyName );\n\t} );\n}\n\n// Binds to an attribute in a set of iterable observables.\n//\n// @private\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @param {Function} callback\nfunction bindToMany( observables, attribute, callback ) {\n\tif ( this._bindings.size > 1 ) {\n\t\t/**\n\t\t * Binding one attribute to many observables only possible with one attribute.\n\t\t *\n\t\t * @error observable-bind-to-many-not-one-binding\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-many-not-one-binding: Cannot bind multiple properties with toMany().', this );\n\t}\n\n\tthis.to(\n\t\t// Bind to #attribute of each observable...\n\t\t...getBindingTargets( observables, attribute ),\n\t\t// ...using given callback to parse attribute values.\n\t\tcallback\n\t);\n}\n\n// Returns an array of binding components for\n// {@link Observable#bind} from a set of iterable observables.\n//\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @returns {Array.<String|Observable>}\nfunction getBindingTargets( observables, attribute ) {\n\tconst observableAndAttributePairs = observables.map( observable => [ observable, attribute ] );\n\n\t// Merge pairs to one-dimension array of observables and attributes.\n\treturn Array.prototype.concat.apply( [], observableAndAttributePairs );\n}\n\n// Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\nfunction isStringArray( arr ) {\n\treturn arr.every( a => typeof a == 'string' );\n}\n\n// Parses and validates {@link Observable#bind}`.to( args )` arguments and returns\n// an object with a parsed structure. For example\n//\n//\t\tA.bind( 'x' ).to( B, 'a', C, 'b', call );\n//\n// becomes\n//\n//\t\t{\n//\t\t\tto: [\n//\t\t\t\t{ observable: B, properties: [ 'a' ] },\n//\t\t\t\t{ observable: C, properties: [ 'b' ] },\n//\t\t\t],\n//\t\t\tcallback: call\n// \t\t}\n//\n// @private\n// @param {...*} args Arguments of {@link Observable#bind}`.to( args )`.\n// @returns {Object}\nfunction parseBindToArgs( ...args ) {\n\t// Eliminate A.bind( 'x' ).to()\n\tif ( !args.length ) {\n\t\t/**\n\t\t * Invalid argument syntax in `to()`.\n\t\t *\n\t\t * @error observable-bind-to-parse-error\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-parse-error: Invalid argument syntax in `to()`.', null );\n\t}\n\n\tconst parsed = { to: [] };\n\tlet lastObservable;\n\n\tif ( typeof args[ args.length - 1 ] == 'function' ) {\n\t\tparsed.callback = args.pop();\n\t}\n\n\targs.forEach( a => {\n\t\tif ( typeof a == 'string' ) {\n\t\t\tlastObservable.properties.push( a );\n\t\t} else if ( typeof a == 'object' ) {\n\t\t\tlastObservable = { observable: a, properties: [] };\n\t\t\tparsed.to.push( lastObservable );\n\t\t} else {\n\t\t\tthrow new CKEditorError( 'observable-bind-to-parse-error: Invalid argument syntax in `to()`.', null );\n\t\t}\n\t} );\n\n\treturn parsed;\n}\n\n// Synchronizes {@link module:utils/observablemixin#_boundObservables} with {@link Binding}.\n//\n// @private\n// @param {Binding} binding A binding to store in {@link Observable#_boundObservables}.\n// @param {Observable} toObservable A observable, which is a new component of `binding`.\n// @param {String} toPropertyName A name of `toObservable`'s property, a new component of the `binding`.\nfunction updateBoundObservables( observable, binding, toObservable, toPropertyName ) {\n\tconst boundObservables = observable[ boundObservablesSymbol ];\n\tconst bindingsToObservable = boundObservables.get( toObservable );\n\tconst bindings = bindingsToObservable || {};\n\n\tif ( !bindings[ toPropertyName ] ) {\n\t\tbindings[ toPropertyName ] = new Set();\n\t}\n\n\t// Pass the binding to a corresponding Set in `observable._boundObservables`.\n\tbindings[ toPropertyName ].add( binding );\n\n\tif ( !bindingsToObservable ) {\n\t\tboundObservables.set( toObservable, bindings );\n\t}\n}\n\n// Synchronizes {@link Observable#_boundProperties} and {@link Observable#_boundObservables}\n// with {@link BindChain}.\n//\n// Assuming the following binding being created\n//\n// \t\tA.bind( 'a', 'b' ).to( B, 'x', 'y' );\n//\n// the following bindings were initialized by {@link Observable#bind} in {@link BindChain#_bindings}:\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [] },\n// \t\t\tb: { observable: A, property: 'b', to: [] },\n// \t\t}\n//\n// Iterate over all bindings in this chain and fill their `to` properties with\n// corresponding to( ... ) arguments (components of the binding), so\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [ B, 'x' ] },\n// \t\t\tb: { observable: A, property: 'b', to: [ B, 'y' ] },\n// \t\t}\n//\n// Then update the structure of {@link Observable#_boundObservables} with updated\n// binding, so it becomes:\n//\n// \t\tMap( {\n// \t\t\tB: {\n// \t\t\t\tx: Set( [\n// \t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] }\n// \t\t\t\t] ),\n// \t\t\t\ty: Set( [\n// \t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n// \t\t\t\t] )\n//\t\t\t}\n// \t\t} )\n//\n// @private\n// @param {BindChain} chain The binding initialized by {@link Observable#bind}.\nfunction updateBindToBound( chain ) {\n\tlet toProperty;\n\n\tchain._bindings.forEach( ( binding, propertyName ) => {\n\t\t// Note: For a binding without a callback, this will run only once\n\t\t// like in A.bind( 'x', 'y' ).to( B, 'a', 'b' )\n\t\t// TODO: ES6 destructuring.\n\t\tchain._to.forEach( to => {\n\t\t\ttoProperty = to.properties[ binding.callback ? 0 : chain._bindProperties.indexOf( propertyName ) ];\n\n\t\t\tbinding.to.push( [ to.observable, toProperty ] );\n\t\t\tupdateBoundObservables( chain._observable, binding, to.observable, toProperty );\n\t\t} );\n\t} );\n}\n\n// Updates an property of a {@link Observable} with a value\n// determined by an entry in {@link Observable#_boundProperties}.\n//\n// @private\n// @param {Observable} observable A observable which property is to be updated.\n// @param {String} propertyName An property to be updated.\nfunction updateBoundObservableProperty( observable, propertyName ) {\n\tconst boundProperties = observable[ boundPropertiesSymbol ];\n\tconst binding = boundProperties.get( propertyName );\n\tlet propertyValue;\n\n\t// When a binding with callback is created like\n\t//\n\t// \t\tA.bind( 'a' ).to( B, 'b', C, 'c', callback );\n\t//\n\t// collect B.b and C.c, then pass them to callback to set A.a.\n\tif ( binding.callback ) {\n\t\tpropertyValue = binding.callback.apply( observable, binding.to.map( to => to[ 0 ][ to[ 1 ] ] ) );\n\t} else {\n\t\tpropertyValue = binding.to[ 0 ];\n\t\tpropertyValue = propertyValue[ 0 ][ propertyValue[ 1 ] ];\n\t}\n\n\tif ( observable.hasOwnProperty( propertyName ) ) {\n\t\tobservable[ propertyName ] = propertyValue;\n\t} else {\n\t\tobservable.set( propertyName, propertyValue );\n\t}\n}\n\n// Starts listening to changes in {@link BindChain._to} observables to update\n// {@link BindChain._observable} {@link BindChain._bindProperties}. Also sets the\n// initial state of {@link BindChain._observable}.\n//\n// @private\n// @param {BindChain} chain The chain initialized by {@link Observable#bind}.\nfunction attachBindToListeners( observable, toBindings ) {\n\ttoBindings.forEach( to => {\n\t\tconst boundObservables = observable[ boundObservablesSymbol ];\n\t\tlet bindings;\n\n\t\t// If there's already a chain between the observables (`observable` listens to\n\t\t// `to.observable`), there's no need to create another `change` event listener.\n\t\tif ( !boundObservables.get( to.observable ) ) {\n\t\t\tobservable.listenTo( to.observable, 'change', ( evt, propertyName ) => {\n\t\t\t\tbindings = boundObservables.get( to.observable )[ propertyName ];\n\n\t\t\t\t// Note: to.observable will fire for any property change, react\n\t\t\t\t// to changes of properties which are bound only.\n\t\t\t\tif ( bindings ) {\n\t\t\t\t\tbindings.forEach( binding => {\n\t\t\t\t\t\tupdateBoundObservableProperty( observable, binding.property );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n}\n\n/**\n * Interface which adds \"observable properties\" and data binding functionality.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/observablemixin~ObservableMixin} mixin.\n *\n * Read more about the usage of this interface in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables \"Event system and observables\"}\n * section of the {@glink framework/guides/architecture/core-editor-architecture \"Core editor architecture\"} guide,\n * * {@glink framework/guides/deep-dive/observables \"Observables\" deep dive} guide.\n *\n * @interface Observable\n * @extends module:utils/emittermixin~Emitter\n */\n\n/**\n * Fired when a property changed value.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `${ propertyName } has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} );\n *\n *\t\tobservable.prop = 2; // -> 'prop has changed from 1 to 2'\n *\n * @event change:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Fired when a property value is going to be set but is not set yet (before the `change` event is fired).\n *\n * You can control the final value of the property by using\n * the {@link module:utils/eventinfo~EventInfo#return event's `return` property}.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'set:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `Value is going to be changed from ${ oldValue } to ${ newValue }` );\n *\t\t\tconsole.log( `Current property value is ${ observable[ propertyName ] }` );\n *\n *\t\t\t// Let's override the value.\n *\t\t\tevt.return = 3;\n *\t\t} );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `Value has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} );\n *\n *\t\tobservable.prop = 2; // -> 'Value is going to be changed from 1 to 2'\n *\t\t                     // -> 'Current property value is 1'\n *\t\t                     // -> 'Value has changed from 1 to 3'\n *\n * **Note:** Event is fired even when the new value is the same as the old value.\n *\n * @event set:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Creates and sets the value of an observable property of this object. Such an property becomes a part\n * of the state and is be observable.\n *\n * It accepts also a single object literal containing key/value pairs with properties to be set.\n *\n * This method throws the `observable-set-cannot-override` error if the observable instance already\n * have a property with the given property name. This prevents from mistakenly overriding existing\n * properties and methods, but means that `foo.set( 'bar', 1 )` may be slightly slower than `foo.bar = 1`.\n *\n * @method #set\n * @param {String|Object} name The property's name or object with `name=>value` pairs.\n * @param {*} [value] The property's value (if `name` was passed in the first parameter).\n */\n\n/**\n * Binds {@link #set obvervable properties} to other objects implementing the\n * {@link module:utils/observablemixin~Observable} interface.\n *\n * Read more in the {@glink framework/guides/deep-dive/observables#property-bindings dedicated guide}\n * covering the topic of property bindings with some additional examples.\n *\n * Let's consider two objects: a `button` and an associated `command` (both `Observable`).\n *\n * A simple property binding could be as follows:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isEnabled' );\n *\n * or even shorter:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command );\n *\n * which works in the following way:\n *\n * * `button.isEnabled` **instantly equals** `command.isEnabled`,\n * * whenever `command.isEnabled` changes, `button.isEnabled` will immediately reflect its value.\n *\n * **Note**: To release the binding use {@link module:utils/observablemixin~Observable#unbind}.\n *\n * You can also \"rename\" the property in the binding by specifying the new name in the `to()` chain:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isWorking' );\n *\n * It is possible to bind more than one property at a time to shorten the code:\n *\n *\t\tbutton.bind( 'isEnabled', 'value' ).to( command );\n *\n * which corresponds to:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command );\n *\t\tbutton.bind( 'value' ).to( command );\n *\n * The binding can include more than one observable, combining multiple data sources in a custom callback:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isEnabled', ui, 'isVisible',\n *\t\t\t( isCommandEnabled, isUIVisible ) => isCommandEnabled && isUIVisible );\n *\n * It is also possible to bind to the same property in an array of observables.\n * To bind a `button` to multiple commands (also `Observables`) so that each and every one of them\n * must be enabled for the button to become enabled, use the following code:\n *\n *\t\tbutton.bind( 'isEnabled' ).toMany( [ commandA, commandB, commandC ], 'isEnabled',\n *\t\t\t( isAEnabled, isBEnabled, isCEnabled ) => isAEnabled && isBEnabled && isCEnabled );\n *\n * @method #bind\n * @param {...String} bindProperties Observable properties that will be bound to another observable(s).\n * @returns {Object} The bind chain with the `to()` and `toMany()` methods.\n */\n\n/**\n * Removes the binding created with {@link #bind}.\n *\n *\t\t// Removes the binding for the 'a' property.\n *\t\tA.unbind( 'a' );\n *\n *\t\t// Removes bindings for all properties.\n *\t\tA.unbind();\n *\n * @method #unbind\n * @param {...String} [unbindProperties] Observable properties to be unbound. All the bindings will\n * be released if no properties provided.\n */\n\n/**\n * Turns the given methods of this object into event-based ones. This means that the new method will fire an event\n * (named after the method) and the original action will be plugged as a listener to that event.\n *\n * Read more in the {@glink framework/guides/deep-dive/observables#decorating-object-methods dedicated guide}\n * covering the topic of decorating methods with some additional examples.\n *\n * Decorating the method does not change its behavior (it only adds an event),\n * but it allows to modify it later on by listening to the method's event.\n *\n * For example, to cancel the method execution the event can be {@link module:utils/eventinfo~EventInfo#stop stopped}:\n *\n *\t\tclass Foo {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.decorate( 'method' );\n *\t\t\t}\n *\n *\t\t\tmethod() {\n *\t\t\t\tconsole.log( 'called!' );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst foo = new Foo();\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.stop();\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method(); // Nothing is logged.\n *\n *\n * **Note**: The high {@link module:utils/priorities~PriorityString priority} listener\n * has been used to execute this particular callback before the one which calls the original method\n * (which uses the \"normal\" priority).\n *\n * It is also possible to change the returned value:\n *\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.return = 'Foo!';\n *\t\t} );\n *\n *\t\tfoo.method(); // -> 'Foo'\n *\n * Finally, it is possible to access and modify the arguments the method is called with:\n *\n *\t\tmethod( a, b ) {\n *\t\t\tconsole.log( `${ a }, ${ b }`  );\n *\t\t}\n *\n *\t\t// ...\n *\n *\t\tfoo.on( 'method', ( evt, args ) => {\n *\t\t\targs[ 0 ] = 3;\n *\n *\t\t\tconsole.log( args[ 1 ] ); // -> 2\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method( 1, 2 ); // -> '3, 2'\n *\n * @method #decorate\n * @param {String} methodName Name of the method to decorate.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/button/buttonview\n */\n\nimport View from '../view';\nimport IconView from '../icon/iconview';\nimport TooltipView from '../tooltip/tooltipview';\n\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport { getEnvKeystrokeText } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\nimport '../../theme/components/button/button.css';\n\n/**\n * The button view class.\n *\n *\t\tconst view = new ButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true,\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/view~View\n * @implements module:ui/button/button~Button\n */\nexport default class ButtonView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tconst ariaLabelUid = uid();\n\n\t\t// Implement the Button interface.\n\t\tthis.set( 'class' );\n\t\tthis.set( 'labelStyle' );\n\t\tthis.set( 'icon' );\n\t\tthis.set( 'isEnabled', true );\n\t\tthis.set( 'isOn', false );\n\t\tthis.set( 'isVisible', true );\n\t\tthis.set( 'isToggleable', false );\n\t\tthis.set( 'keystroke' );\n\t\tthis.set( 'label' );\n\t\tthis.set( 'tabindex', -1 );\n\t\tthis.set( 'tooltip' );\n\t\tthis.set( 'tooltipPosition', 's' );\n\t\tthis.set( 'type', 'button' );\n\t\tthis.set( 'withText', false );\n\n\t\t/**\n\t\t * Collection of the child views inside of the button {@link #element}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\t/**\n\t\t * Tooltip of the button view. It is configurable using the {@link #tooltip tooltip attribute}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/tooltip/tooltipview~TooltipView} #tooltipView\n\t\t */\n\t\tthis.tooltipView = this._createTooltipView();\n\n\t\t/**\n\t\t * Label of the button view. It is configurable using the {@link #label label attribute}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #labelView\n\t\t */\n\t\tthis.labelView = this._createLabelView( ariaLabelUid );\n\n\t\t/**\n\t\t * The icon view of the button. Will be added to {@link #children} when the\n\t\t * {@link #icon icon attribute} is defined.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/icon/iconview~IconView} #iconView\n\t\t */\n\t\tthis.iconView = new IconView();\n\n\t\tthis.iconView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-button__icon'\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Tooltip of the button bound to the template.\n\t\t *\n\t\t * @see #tooltip\n\t\t * @see #_getTooltipString\n\t\t * @private\n\t\t * @observable\n\t\t * @member {Boolean} #_tooltipString\n\t\t */\n\t\tthis.bind( '_tooltipString' ).to(\n\t\t\tthis, 'tooltip',\n\t\t\tthis, 'label',\n\t\t\tthis, 'keystroke',\n\t\t\tthis._getTooltipString.bind( this )\n\t\t);\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'button',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isEnabled', 'ck-disabled', value => !value ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-hidden', value => !value ),\n\t\t\t\t\tbind.to( 'isOn', value => value ? 'ck-on' : 'ck-off' ),\n\t\t\t\t\tbind.if( 'withText', 'ck-button_with-text' )\n\t\t\t\t],\n\t\t\t\ttype: bind.to( 'type', value => value ? value : 'button' ),\n\t\t\t\ttabindex: bind.to( 'tabindex' ),\n\t\t\t\t'aria-labelledby': `ck-editor__aria-label_${ ariaLabelUid }`,\n\t\t\t\t'aria-disabled': bind.if( 'isEnabled', true, value => !value ),\n\t\t\t\t'aria-pressed': bind.to( 'isOn', value => this.isToggleable ? String( value ) : false )\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\tmousedown: bind.to( evt => {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t} ),\n\n\t\t\t\tclick: bind.to( evt => {\n\t\t\t\t\t// We can't make the button disabled using the disabled attribute, because it won't be focusable.\n\t\t\t\t\t// Though, shouldn't this condition be moved to the button controller?\n\t\t\t\t\tif ( this.isEnabled ) {\n\t\t\t\t\t\tthis.fire( 'execute' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Prevent the default when button is disabled, to block e.g.\n\t\t\t\t\t\t// automatic form submitting. See ckeditor/ckeditor5-link#74.\n\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tif ( this.icon ) {\n\t\t\tthis.iconView.bind( 'content' ).to( this, 'icon' );\n\t\t\tthis.children.add( this.iconView );\n\t\t}\n\n\t\tthis.children.add( this.tooltipView );\n\t\tthis.children.add( this.labelView );\n\t}\n\n\t/**\n\t * Focuses the {@link #element} of the button.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/tooltip/tooltipview~TooltipView} instance and binds it with button\n\t * attributes.\n\t *\n\t * @private\n\t * @returns {module:ui/tooltip/tooltipview~TooltipView}\n\t */\n\t_createTooltipView() {\n\t\tconst tooltipView = new TooltipView();\n\n\t\ttooltipView.bind( 'text' ).to( this, '_tooltipString' );\n\t\ttooltipView.bind( 'position' ).to( this, 'tooltipPosition' );\n\n\t\treturn tooltipView;\n\t}\n\n\t/**\n\t * Creates a label view instance and binds it with button attributes.\n\t *\n\t * @private\n\t * @param {String} ariaLabelUid The aria label UID.\n\t * @returns {module:ui/view~View}\n\t */\n\t_createLabelView( ariaLabelUid ) {\n\t\tconst labelView = new View();\n\t\tconst bind = this.bindTemplate;\n\n\t\tlabelView.setTemplate( {\n\t\t\ttag: 'span',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button__label'\n\t\t\t\t],\n\t\t\t\tstyle: bind.to( 'labelStyle' ),\n\t\t\t\tid: `ck-editor__aria-label_${ ariaLabelUid }`,\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: this.bindTemplate.to( 'label' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn labelView;\n\t}\n\n\t/**\n\t * Gets the text for the {@link #tooltipView} from the combination of\n\t * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\n\t *\n\t * @private\n\t * @see #tooltip\n\t * @see #_tooltipString\n\t * @param {Boolean|String|Function} tooltip Button tooltip.\n\t * @param {String} label Button label.\n\t * @param {String} keystroke Button keystroke.\n\t * @returns {String}\n\t */\n\t_getTooltipString( tooltip, label, keystroke ) {\n\t\tif ( tooltip ) {\n\t\t\tif ( typeof tooltip == 'string' ) {\n\t\t\t\treturn tooltip;\n\t\t\t} else {\n\t\t\t\tif ( keystroke ) {\n\t\t\t\t\tkeystroke = getEnvKeystrokeText( keystroke );\n\t\t\t\t}\n\n\t\t\t\tif ( tooltip instanceof Function ) {\n\t\t\t\t\treturn tooltip( label, keystroke );\n\t\t\t\t} else {\n\t\t\t\t\treturn `${ label }${ keystroke ? ` (${ keystroke })` : '' }`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/element\n */\n\nimport Node from './node';\nimport NodeList from './nodelist';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Model element. Type of {@link module:engine/model/node~Node node} that has a {@link module:engine/model/element~Element#name name} and\n * {@link module:engine/model/element~Element#getChildren child nodes}.\n *\n * **Important**: see {@link module:engine/model/node~Node} to read about restrictions using `Element` and `Node` API.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a model element.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createElement} method instead.\n\t *\n\t * @protected\n\t * @param {String} name Element's name.\n\t * @param {Object} [attrs] Element's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n\t * One or more nodes to be inserted as children of created element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Element name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:engine/model/element~Element#name\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * List of children nodes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/element~Element#_children\n\t\t */\n\t\tthis._children = new NodeList();\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Number of this element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._children.maxOffset;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\telement.is( 'element' ); // -> true\n\t *\t\telement.is( 'node' ); // -> true\n\t *\t\telement.is( 'model:element' ); // -> true\n\t *\t\telement.is( 'model:node' ); // -> true\n\t *\n\t *\t\telement.is( 'view:element' ); // -> false\n\t *\t\telement.is( 'documentSelection' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/model/element~Element#name name}:\n\t *\n\t *\t\telement.is( 'image' ); // -> true if this is an <image> element\n\t *\t\telement.is( 'element', 'image' ); // -> same as above\n\t *\t\ttext.is( 'image' ); -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^model:/, '' );\n\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'element' || cutType == this.name || super.is( type );\n\t\t} else {\n\t\t\treturn cutType == 'element' && name == this.name;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/model/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children.getNode( index );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all of this element's children.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an index of the given child node. Returns `null` if given node is not a child of this element.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number} Child node's index in this element.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.getNodeIndex( node );\n\t}\n\n\t/**\n\t * Returns the starting offset of given child. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n\t * given node is not a child of this element.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number} Child node's starting offset.\n\t */\n\tgetChildStartOffset( node ) {\n\t\treturn this._children.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n\t * too high, returns {@link module:engine/model/element~Element#getChildIndex index after last child}.\n\t *\n\t *\t\tconst textNode = new Text( 'foo' );\n\t *\t\tconst pElement = new Element( 'p' );\n\t *\t\tconst divElement = new Element( [ textNode, pElement ] );\n\t *\t\tdivElement.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n\t *\t\tdivElement.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n\t *\t\tdivElement.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n\t *\t\tdivElement.offsetToIndex( 2 ); // Returns 0.\n\t *\t\tdivElement.offsetToIndex( 3 ); // Returns 1.\n\t *\t\tdivElement.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number}\n\t */\n\toffsetToIndex( offset ) {\n\t\treturn this._children.offsetToIndex( offset );\n\t}\n\n\t/**\n\t * Returns a descendant node by its path relative to this element.\n\t *\n\t *\t\t// <this>a<b>c</b></this>\n\t *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n\t *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n\t *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n\t *\n\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n\t * @returns {module:engine/model/node~Node}\n\t */\n\tgetNodeByPath( relativePath ) {\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\tfor ( const index of relativePath ) {\n\t\t\tnode = node.getChild( node.offsetToIndex( index ) );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Converts `Element` instance to plain object and returns it. Takes care of converting all of this element's children.\n\t *\n\t * @returns {Object} `Element` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.name = this.name;\n\n\t\tif ( this._children.length > 0 ) {\n\t\t\tjson.children = [];\n\n\t\t\tfor ( const node of this._children ) {\n\t\t\t\tjson.children.push( node.toJSON() );\n\t\t\t}\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this element and returns it. Created element has the same name and attributes as the original element.\n\t * If clone is deep, the original element's children are also cloned. If not, then empty element is removed.\n\t *\n\t * @protected\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any child.\n\t */\n\t_clone( deep = false ) {\n\t\tconst children = deep ? Array.from( this._children ).map( node => node._clone( true ) ) : null;\n\n\t\treturn new Element( this.name, this.getAttributes(), children );\n\t}\n\n\t/**\n\t * {@link module:engine/model/element~Element#_insertChild Inserts} one or more nodes at the end of this element.\n\t *\n\t * @see module:engine/model/writer~Writer#append\n\t * @protected\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} nodes Nodes to be inserted.\n\t */\n\t_appendChild( nodes ) {\n\t\tthis._insertChild( this.childCount, nodes );\n\t}\n\n\t/**\n\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n\t * to this element.\n\t *\n\t * @see module:engine/model/writer~Writer#insert\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_insertChild( index, items ) {\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t}\n\n\t\tthis._children._insertNodes( index, nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index and sets\n\t * {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n\t *\n\t * @see module:engine/model/writer~Writer#remove\n\t * @protected\n\t * @param {Number} index Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tconst nodes = this._children._removeNodes( index, howMany );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tnode.parent = null;\n\t\t}\n\n\t\treturn nodes;\n\t}\n\n\t/**\n\t * Creates an `Element` instance from given plain object (i.e. parsed JSON string).\n\t * Converts `Element` children to proper nodes.\n\t *\n\t * @param {Object} json Plain object to be converted to `Element`.\n\t * @returns {module:engine/model/element~Element} `Element` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\tlet children = null;\n\n\t\tif ( json.children ) {\n\t\t\tchildren = [];\n\n\t\t\tfor ( const child of json.children ) {\n\t\t\t\tif ( child.name ) {\n\t\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new Element( json.name, json.attributes, children );\n\t}\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<String|module:engine/model/item~Item>}\n// @returns {Iterable.<module:engine/model/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data, node.getAttributes() );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/text\n */\n\nimport Node from './node';\n\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a text node.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n\t *\n\t * @protected\n\t * @param {String} data Node's text.\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( data, attrs ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Text data contained in this text node.\n\t\t *\n\t\t * @protected\n\t\t * @type {String}\n\t\t */\n\t\tthis._data = data || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Returns a text data contained in the node.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\ttext.is( 'text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'model:text' ); // -> true\n\t *\t\ttext.is( 'model:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'view:text' ); // -> false\n\t *\t\ttext.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || type == 'model:text' || super.is( type );\n\t}\n\n\t/**\n\t * Converts `Text` instance to plain object and returns it.\n\t *\n\t * @returns {Object} `Text` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.data = this.data;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data, this.getAttributes() );\n\t}\n\n\t/**\n\t * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Text`.\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new Text( json.data, json.attributes );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/text\n */\n\nimport Node from './node';\n\n/**\n * Tree view text node.\n *\n * The constructor of this class shouldn't be used directly. To create new Text instances\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a tree view text node.\n\t *\n\t * @protected\n\t * @param {String} data The text's data.\n\t */\n\tconstructor( data ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The text content.\n\t\t *\n\t\t * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} module:engine/view/text~Text#_textData\n\t\t */\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\ttext.is( 'text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'view:text' ); // -> true\n\t *\t\ttext.is( 'view:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'model:text' ); // -> false\n\t *\t\ttext.is( 'element' ); // -> false\n\t *\t\ttext.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || type == 'view:text' || super.is( type );\n\t}\n\n\t/**\n\t * The text content.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._textData;\n\t}\n\n\t/**\n\t * This getter is required when using the addition assignment operator on protected property:\n\t *\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst bar = downcastWriter.createText( 'bar' );\n\t *\n\t *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n\t *\t\tconsole.log( foo.data ); // prints: 'foobar'\n\t *\n\t * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n\t *\n\t * @protected\n\t * @type {String}\n\t */\n\tget _data() {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t *\n\t * @protected\n\t * @fires change:text\n\t * @param {String} data New data for the text node.\n\t */\n\tset _data( data ) {\n\t\tthis._fireChange( 'text', this );\n\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks if this text node is similar to other text node.\n\t * Both nodes should have the same data to be considered as similar.\n\t *\n\t * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherNode ) {\n\t\tif ( !( otherNode instanceof Text ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this === otherNode || this.data === otherNode.data;\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/moveoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { _move } from './utils';\n\n/**\n * Operation to move a range of {@link module:engine/model/item~Item model items}\n * to given {@link module:engine/model/position~Position target position}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MoveOperation extends Operation {\n\t/**\n\t * Creates a move operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition\n\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n\t * `sourcePosition` with offset shifted by `howMany`.\n\t * @param {module:engine/model/position~Position} targetPosition Position at which moved nodes will be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( sourcePosition, howMany, targetPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\t\t// `'toNext'` because `sourcePosition` is a bit like a start of the moved range.\n\t\tthis.sourcePosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Offset size of moved range.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/moveoperation~MoveOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position at which moved nodes will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#targetPosition\n\t\t */\n\t\tthis.targetPosition = targetPosition.clone();\n\t\tthis.targetPosition.stickiness = 'toNone';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.targetPosition.root.rootName == '$graveyard' ) {\n\t\t\treturn 'remove';\n\t\t} else if ( this.sourcePosition.root.rootName == '$graveyard' ) {\n\t\t\treturn 'reinsert';\n\t\t}\n\n\t\treturn 'move';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion );\n\t}\n\n\t/**\n\t * Returns the start position of the moved range after it got moved. This may be different than\n\t * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition} in some cases, i.e. when a range is moved\n\t * inside the same parent but {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition targetPosition}\n\t * is after {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition sourcePosition}.\n\t *\n\t *\t\t vv              vv\n\t *\t\tabcdefg ===> adefbcg\n\t *\t\t     ^          ^\n\t *\t\t     targetPos\tmovedRangeStart\n\t *\t\t     offset 6\toffset 4\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetMovedRangeStart() {\n\t\treturn this.targetPosition._getTransformedByDeletion( this.sourcePosition, this.howMany );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst newTargetPosition = this.sourcePosition._getTransformedByInsertion( this.targetPosition, this.howMany );\n\n\t\treturn new this.constructor( this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst sourceElement = this.sourcePosition.parent;\n\t\tconst targetElement = this.targetPosition.parent;\n\t\tconst sourceOffset = this.sourcePosition.offset;\n\t\tconst targetOffset = this.targetPosition.offset;\n\n\t\t// Validate whether move operation has correct parameters.\n\t\t// Validation is pretty complex but move operation is one of the core ways to manipulate the document state.\n\t\t// We expect that many errors might be connected with one of scenarios described below.\n\t\tif ( sourceOffset + this.howMany > sourceElement.maxOffset ) {\n\t\t\t/**\n\t\t\t * The nodes which should be moved do not exist.\n\t\t\t *\n\t\t\t * @error move-operation-nodes-do-not-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'move-operation-nodes-do-not-exist: The nodes which should be moved do not exist.', this\n\t\t\t);\n\t\t} else if ( sourceElement === targetElement && sourceOffset < targetOffset && targetOffset < sourceOffset + this.howMany ) {\n\t\t\t/**\n\t\t\t * Trying to move a range of nodes into the middle of that range.\n\t\t\t *\n\t\t\t * @error move-operation-range-into-itself\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'move-operation-range-into-itself: Trying to move a range of nodes to the inside of that range.', this\n\t\t\t);\n\t\t} else if ( this.sourcePosition.root == this.targetPosition.root ) {\n\t\t\tif ( compareArrays( this.sourcePosition.getParentPath(), this.targetPosition.getParentPath() ) == 'prefix' ) {\n\t\t\t\tconst i = this.sourcePosition.path.length - 1;\n\n\t\t\t\tif ( this.targetPosition.path[ i ] >= sourceOffset && this.targetPosition.path[ i ] < sourceOffset + this.howMany ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Trying to move a range of nodes into one of nodes from that range.\n\t\t\t\t\t *\n\t\t\t\t\t * @error move-operation-node-into-itself\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'move-operation-node-into-itself: Trying to move a range of nodes into one of nodes from that range.', this\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t_move( Range._createFromPositionAndShift( this.sourcePosition, this.howMany ), this.targetPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = this.sourcePosition.toJSON();\n\t\tjson.targetPosition = this.targetPosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MoveOperation';\n\t}\n\n\t/**\n\t * Creates `MoveOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst sourcePosition = Position.fromJSON( json.sourcePosition, document );\n\t\tconst targetPosition = Position.fromJSON( json.targetPosition, document );\n\n\t\treturn new this( sourcePosition, json.howMany, targetPosition, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/splitoperation\n */\n\nimport Operation from './operation';\nimport MergeOperation from './mergeoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _insert, _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to split {@link module:engine/model/element~Element an element} at given\n * {@link module:engine/model/operation/splitoperation~SplitOperation#splitPosition split position} into two elements,\n * both containing a part of the element's original content.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class SplitOperation extends Operation {\n\t/**\n\t * Creates a split operation.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition Position at which an element should be split.\n\t * @param {Number} howMany Total offset size of elements that are in the split element after `position`.\n\t * @param {module:engine/model/position~Position|null} graveyardPosition Position in the graveyard root before the element which\n\t * should be used as a parent of the nodes after `position`. If it is not set, a copy of the the `position` parent will be used.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( splitPosition, howMany, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position at which an element should be split.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#splitPosition\n\t\t */\n\t\tthis.splitPosition = splitPosition.clone();\n\t\t// Keep position sticking to the next node. This way any new content added at the place where the element is split\n\t\t// will be left in the original element.\n\t\tthis.splitPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Total offset size of elements that are in the split element after `position`.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/splitoperation~SplitOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position at which the clone of split element (or element from graveyard) will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#insertionPosition\n\t\t */\n\t\tthis.insertionPosition = SplitOperation.getInsertionPosition( splitPosition );\n\t\tthis.insertionPosition.stickiness = 'toNone';\n\n\t\t/**\n\t\t * Position in the graveyard root before the element which should be used as a parent of the nodes after `position`.\n\t\t * If it is not set, a copy of the the `position` parent will be used.\n\t\t *\n\t\t * The default behavior is to clone the split element. Element from graveyard is used during undo.\n\t\t *\n\t\t * @member {module:engine/model/position~Position|null} #graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition ? graveyardPosition.clone() : null;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tthis.graveyardPosition.stickiness = 'toNext';\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'split';\n\t}\n\n\t/**\n\t * Position inside the new clone of a split element.\n\t *\n\t * This is a position where nodes that are after the split position will be moved to.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget moveTargetPosition() {\n\t\tconst path = this.insertionPosition.path.slice();\n\t\tpath.push( 0 );\n\n\t\treturn new Position( this.insertionPosition.root, path );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the split element that will be moved to the new element.\n\t * The range starts at {@link ~#splitPosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.splitPosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.splitPosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst split = new this.constructor( this.splitPosition, this.howMany, this.graveyardPosition, this.baseVersion );\n\t\tsplit.insertionPosition = this.insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.splitPosition.root.document.graveyard;\n\t\tconst graveyardPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MergeOperation( this.moveTargetPosition, this.howMany, this.splitPosition, graveyardPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.splitPosition.parent;\n\t\tconst offset = this.splitPosition.offset;\n\n\t\t// Validate whether split operation has correct parameters.\n\t\tif ( !element || element.maxOffset < offset ) {\n\t\t\t/**\n\t\t\t * Split position is invalid.\n\t\t\t *\n\t\t\t * @error split-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-position-invalid: Split position is invalid.', this );\n\t\t} else if ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Cannot split root element.\n\t\t\t *\n\t\t\t * @error split-operation-split-in-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-split-in-root: Cannot split root element.', this );\n\t\t} else if ( this.howMany != element.maxOffset - this.splitPosition.offset ) {\n\t\t\t/**\n\t\t\t * Split operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error split-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-how-many-invalid: Split operation specifies wrong number of nodes to move.', this );\n\t\t} else if ( this.graveyardPosition && !this.graveyardPosition.nodeAfter ) {\n\t\t\t/**\n\t\t\t * Graveyard position invalid.\n\t\t\t *\n\t\t\t * @error split-operation-graveyard-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-graveyard-position-invalid: Graveyard position invalid.', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst splitElement = this.splitPosition.parent;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\t_move( Range._createFromPositionAndShift( this.graveyardPosition, 1 ), this.insertionPosition );\n\t\t} else {\n\t\t\tconst newElement = splitElement._clone();\n\n\t\t\t_insert( this.insertionPosition, newElement );\n\t\t}\n\n\t\tconst sourceRange = new Range(\n\t\t\tPosition._createAt( splitElement, this.splitPosition.offset ),\n\t\t\tPosition._createAt( splitElement, splitElement.maxOffset )\n\t\t);\n\n\t\t_move( sourceRange, this.moveTargetPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.splitPosition = this.splitPosition.toJSON();\n\t\tjson.insertionPosition = this.insertionPosition.toJSON();\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tjson.graveyardPosition = this.graveyardPosition.toJSON();\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'SplitOperation';\n\t}\n\n\t/**\n\t * Helper function that returns a default insertion position basing on given `splitPosition`. The default insertion\n\t * position is after the split element.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic getInsertionPosition( splitPosition ) {\n\t\tconst path = splitPosition.path.slice( 0, -1 );\n\t\tpath[ path.length - 1 ]++;\n\n\t\treturn new Position( splitPosition.root, path );\n\t}\n\n\t/**\n\t * Creates `SplitOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst splitPosition = Position.fromJSON( json.splitPosition, document );\n\t\tconst insertionPosition = Position.fromJSON( json.insertionPosition, document );\n\t\tconst graveyardPosition = json.graveyardPosition ? Position.fromJSON( json.graveyardPosition, document ) : null;\n\n\t\tconst split = new this( splitPosition, json.howMany, graveyardPosition, json.baseVersion );\n\t\tsplit.insertionPosition = insertionPosition;\n\n\t\treturn split;\n\t}\n}\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/comparearrays\n */\n\n/**\n * Compares how given arrays relate to each other. One array can be: same as another array, prefix of another array\n * or completely different. If arrays are different, first index at which they differ is returned. Otherwise,\n * a flag specifying the relation is returned. Flags are negative numbers, so whenever a number >= 0 is returned\n * it means that arrays differ.\n *\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 2 ] );\t\t// 'same'\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 2, 1 ] );\t\t// 'prefix'\n *\t\tcompareArrays( [ 0, 2 ], [ 0 ] );\t\t\t// 'extension'\n *\t\tcompareArrays( [ 0, 2 ], [ 1, 2 ] );\t\t// 0\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 1 ] );\t\t// 1\n *\n * @param {Array} a Array that is compared.\n * @param {Array} b Array to compare with.\n * @returns {module:utils/comparearrays~ArrayRelation} How array `a` is related to `b`.\n */\nexport default function compareArrays( a, b ) {\n\tconst minLen = Math.min( a.length, b.length );\n\n\tfor ( let i = 0; i < minLen; i++ ) {\n\t\tif ( a[ i ] != b[ i ] ) {\n\t\t\t// The arrays are different.\n\t\t\treturn i;\n\t\t}\n\t}\n\n\t// Both arrays were same at all points.\n\tif ( a.length == b.length ) {\n\t\t// If their length is also same, they are the same.\n\t\treturn 'same';\n\t} else if ( a.length < b.length ) {\n\t\t// Compared array is shorter so it is a prefix of the other array.\n\t\treturn 'prefix';\n\t} else {\n\t\t// Compared array is longer so it is an extension of the other array.\n\t\treturn 'extension';\n\t}\n}\n\n/**\n * @typedef {'extension'|'same'|'prefix'} module:utils/comparearrays~ArrayRelation\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals navigator:false */\n\n/**\n * @module utils/env\n */\n\nconst userAgent = navigator.userAgent.toLowerCase();\n\n/**\n * A namespace containing environment and browser information.\n *\n * @namespace\n */\nconst env = {\n\t/**\n\t * Indicates that the application is running on Macintosh.\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisMac: isMac( userAgent ),\n\n\t/**\n\t * Indicates that the application is running in Microsoft Edge.\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisEdge: isEdge( userAgent ),\n\n\t/**\n\t * Indicates that the application is running in Firefox (Gecko).\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisGecko: isGecko( userAgent ),\n\n\t/**\n\t * Indicates that the application is running in Safari.\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisSafari: isSafari( userAgent ),\n\n\t/**\n\t * Indicates that the application is running on Android mobile device.\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisAndroid: isAndroid( userAgent ),\n\n\t/**\n\t * Environment features information.\n\t *\n\t * @memberOf module:utils/env~env\n\t * @namespace\n\t */\n\tfeatures: {\n\t\t/**\n\t\t * Indicates that the environment supports ES2018 Unicode property escapes — like `\\p{P}` or `\\p{L}`.\n\t\t * More information about unicode properties might be found\n\t\t * [in Unicode Standard Annex #44](https://www.unicode.org/reports/tr44/#GC_Values_Table).\n\t\t *\n\t\t * @type {Boolean}\n\t\t */\n\t\tisRegExpUnicodePropertySupported: isRegExpUnicodePropertySupported()\n\t}\n};\n\nexport default env;\n\n/**\n * Checks if User Agent represented by the string is running on Macintosh.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is running on Macintosh or not.\n */\nexport function isMac( userAgent ) {\n\treturn userAgent.indexOf( 'macintosh' ) > -1;\n}\n\n/**\n * Checks if User Agent represented by the string is Microsoft Edge.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Edge or not.\n */\nexport function isEdge( userAgent ) {\n\treturn !!userAgent.match( /edge\\/(\\d+.?\\d*)/ );\n}\n\n/**\n * Checks if User Agent represented by the string is Firefox (Gecko).\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Firefox or not.\n */\nexport function isGecko( userAgent ) {\n\treturn !!userAgent.match( /gecko\\/\\d+/ );\n}\n\n/**\n * Checks if User Agent represented by the string is Safari.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Safari or not.\n */\nexport function isSafari( userAgent ) {\n\treturn userAgent.indexOf( ' applewebkit/' ) > -1 && userAgent.indexOf( 'chrome' ) === -1;\n}\n\n/**\n * Checks if User Agent represented by the string is Android mobile device.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Safari or not.\n */\nexport function isAndroid( userAgent ) {\n\treturn userAgent.indexOf( 'android' ) > -1;\n}\n\n/**\n * Checks if the current environment supports ES2018 Unicode properties like `\\p{P}` or `\\p{L}`.\n * More information about unicode properties might be found\n * [in Unicode Standard Annex #44](https://www.unicode.org/reports/tr44/#GC_Values_Table).\n *\n * @returns {Boolean}\n */\nexport function isRegExpUnicodePropertySupported() {\n\tlet isSupported = false;\n\n\t// Feature detection for Unicode properties. Added in ES2018. Currently Firefox and Edge do not support it.\n\t// See https://github.com/ckeditor/ckeditor5-mention/issues/44#issuecomment-487002174.\n\n\ttry {\n\t\t// Usage of regular expression literal cause error during build (ckeditor/ckeditor5-dev#534).\n\t\tisSupported = 'ć'.search( new RegExp( '[\\\\p{L}]', 'u' ) ) === 0;\n\t} catch ( error ) {\n\t\t// Firefox throws a SyntaxError when the group is unsupported.\n\t}\n\n\treturn isSupported;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window, document */\n\n/**\n * @module utils/dom/global\n */\n\n/**\n * A helper (module) giving an access to the global DOM objects such as `window` and\n * `document`. Accessing these objects using this helper allows easy and bulletproof\n * testing, i.e. stubbing native properties:\n *\n *\t\timport global from 'ckeditor5/utils/dom/global.js';\n *\n *\t\t// This stub will work for any code using global module.\n *\t\ttestUtils.sinon.stub( global, 'window', {\n *\t\t\tinnerWidth: 10000\n *\t\t} );\n *\n *\t\tconsole.log( global.window.innerWidth );\n */\nexport default { window, document };\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/istext\n */\n\n/**\n * Checks if the object is a native DOM Text node.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isText( obj ) {\n\treturn Object.prototype.toString.call( obj ) == '[object Text]';\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/mergeoperation\n */\n\nimport Operation from './operation';\nimport SplitOperation from './splitoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to merge two {@link module:engine/model/element~Element elements}.\n *\n * The merged element is the parent of {@link ~MergeOperation#sourcePosition} and it is merged into the parent of\n * {@link ~MergeOperation#targetPosition}. All nodes from the merged element are moved to {@link ~MergeOperation#targetPosition}.\n *\n * The merged element is moved to the graveyard at {@link ~MergeOperation#graveyardPosition}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MergeOperation extends Operation {\n\t/**\n\t * Creates a merge operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition Position inside the merged element. All nodes from that\n\t * element after that position will be moved to {@link ~#targetPosition}.\n\t * @param {Number} howMany Summary offset size of nodes which will be moved from the merged element to the new parent.\n\t * @param {module:engine/model/position~Position} targetPosition Position which the nodes from the merged elements will be moved to.\n\t * @param {module:engine/model/position~Position} graveyardPosition Position in graveyard to which the merged element will be moved.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( sourcePosition, howMany, targetPosition, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position inside the merged element. All nodes from that element after that position will be moved to {@link ~#targetPosition}.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\t\t// This is, and should always remain, the first position in its parent.\n\t\tthis.sourcePosition.stickiness = 'toPrevious';\n\n\t\t/**\n\t\t * Summary offset size of nodes which will be moved from the merged element to the new parent.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/mergeoperation~MergeOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position which the nodes from the merged elements will be moved to.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#targetPosition\n\t\t */\n\t\tthis.targetPosition = targetPosition.clone();\n\t\t// Except of a rare scenario in `MergeOperation` x `MergeOperation` transformation,\n\t\t// this is, and should always remain, the last position in its parent.\n\t\tthis.targetPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Position in graveyard to which the merged element will be moved.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition.clone();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'merge';\n\t}\n\n\t/**\n\t * Position before the merged element (which will be deleted).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget deletionPosition() {\n\t\treturn new Position( this.sourcePosition.root, this.sourcePosition.path.slice( 0, -1 ) );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the merged element that will be moved to {@link ~MergeOperation#sourcePosition}.\n\t * The range starts at {@link ~MergeOperation#sourcePosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.sourcePosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.sourcePosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.sourcePosition, this.howMany, this.targetPosition, this.graveyardPosition, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tgetReversed() {\n\t\t// Positions in this method are transformed by this merge operation because the split operation bases on\n\t\t// the context after this merge operation happened (because split operation reverses it).\n\t\t// So we need to acknowledge that the merge operation happened and those positions changed a little.\n\t\tconst targetPosition = this.targetPosition._getTransformedByMergeOperation( this );\n\n\t\tconst path = this.sourcePosition.path.slice( 0, -1 );\n\t\tconst insertionPosition = new Position( this.sourcePosition.root, path )._getTransformedByMergeOperation( this );\n\n\t\tconst split = new SplitOperation( targetPosition, this.howMany, this.graveyardPosition, this.baseVersion + 1 );\n\t\tsplit.insertionPosition = insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst sourceElement = this.sourcePosition.parent;\n\t\tconst targetElement = this.targetPosition.parent;\n\n\t\t// Validate whether merge operation has correct parameters.\n\t\tif ( !sourceElement.parent ) {\n\t\t\t/**\n\t\t\t * Merge source position is invalid. The element to be merged must have a parent node.\n\t\t\t *\n\t\t\t * @error merge-operation-source-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-source-position-invalid: Merge source position is invalid.', this );\n\t\t} else if ( !targetElement.parent ) {\n\t\t\t/**\n\t\t\t * Merge target position is invalid. The element to be merged must have a parent node.\n\t\t\t *\n\t\t\t * @error merge-operation-target-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-target-position-invalid: Merge target position is invalid.', this );\n\t\t} else if ( this.howMany != sourceElement.maxOffset ) {\n\t\t\t/**\n\t\t\t * Merge operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error merge-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-how-many-invalid: Merge operation specifies wrong number of nodes to move.', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst mergedElement = this.sourcePosition.parent;\n\t\tconst sourceRange = Range._createIn( mergedElement );\n\n\t\t_move( sourceRange, this.targetPosition );\n\t\t_move( Range._createOn( mergedElement ), this.graveyardPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = json.sourcePosition.toJSON();\n\t\tjson.targetPosition = json.targetPosition.toJSON();\n\t\tjson.graveyardPosition = json.graveyardPosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MergeOperation';\n\t}\n\n\t/**\n\t * Creates `MergeOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst sourcePosition = Position.fromJSON( json.sourcePosition, document );\n\t\tconst targetPosition = Position.fromJSON( json.targetPosition, document );\n\t\tconst graveyardPosition = Position.fromJSON( json.graveyardPosition, document );\n\n\t\treturn new this( sourcePosition, json.howMany, targetPosition, graveyardPosition, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/operation\n */\n\n/**\n * Abstract base operation class.\n *\n * @abstract\n */\nexport default class Operation {\n\t/**\n\t * Base operation constructor.\n\t *\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( baseVersion ) {\n\t\t/**\n\t\t * {@link module:engine/model/document~Document#version} on which operation can be applied. If you try to\n\t\t * {@link module:engine/model/model~Model#applyOperation apply} operation with different base version than the\n\t\t * {@link module:engine/model/document~Document#version document version} the\n\t\t * {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n\t\t *\n\t\t * @member {Number}\n\t\t */\n\t\tthis.baseVersion = baseVersion;\n\n\t\t/**\n\t\t * Defines whether operation is executed on attached or detached {@link module:engine/model/item~Item items}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isDocumentOperation\n\t\t */\n\t\tthis.isDocumentOperation = this.baseVersion !== null;\n\n\t\t/**\n\t\t * {@link module:engine/model/batch~Batch Batch} to which the operation is added or `null` if the operation is not\n\t\t * added to any batch yet.\n\t\t *\n\t\t * @member {module:engine/model/batch~Batch|null} #batch\n\t\t */\n\t\tthis.batch = null;\n\n\t\t/**\n\t\t * Operation type.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #type\n\t\t */\n\n\t\t/**\n\t\t * Creates and returns an operation that has the same parameters as this operation.\n\t\t *\n\t\t * @method #clone\n\t\t * @returns {module:engine/model/operation/operation~Operation} Clone of this operation.\n\t\t */\n\n\t\t/**\n\t\t * Creates and returns a reverse operation. Reverse operation when executed right after\n\t\t * the original operation will bring back tree model state to the point before the original\n\t\t * operation execution. In other words, it reverses changes done by the original operation.\n\t\t *\n\t\t * Keep in mind that tree model state may change since executing the original operation,\n\t\t * so reverse operation will be \"outdated\". In that case you will need to transform it by\n\t\t * all operations that were executed after the original operation.\n\t\t *\n\t\t * @method #getReversed\n\t\t * @returns {module:engine/model/operation/operation~Operation} Reversed operation.\n\t\t */\n\n\t\t/**\n\t\t * Executes the operation - modifications described by the operation properties will be applied to the model tree.\n\t\t *\n\t\t * @protected\n\t\t * @method #_execute\n\t\t */\n\t}\n\n\t/**\n\t * Checks whether the operation's parameters are correct and the operation can be correctly executed. Throws\n\t * an error if operation is not valid.\n\t *\n\t * @protected\n\t * @method #_validate\n\t */\n\t_validate() {\n\t}\n\n\t/**\n\t * Custom toJSON method to solve child-parent circular dependencies.\n\t *\n\t * @method #toJSON\n\t * @returns {Object} Clone of this object with the operation property replaced with string.\n\t */\n\ttoJSON() {\n\t\t// This method creates only a shallow copy, all nested objects should be defined separately.\n\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/1477.\n\t\tconst json = Object.assign( {}, this );\n\n\t\tjson.__className = this.constructor.className;\n\n\t\t// Remove reference to the parent `Batch` to avoid circular dependencies.\n\t\tdelete json.batch;\n\n\t\t// Only document operations are shared with other clients so it is not necessary to keep this information.\n\t\tdelete json.isDocumentOperation;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Name of the operation class used for serialization.\n\t *\n\t * @type {String}\n\t */\n\tstatic get className() {\n\t\treturn 'Operation';\n\t}\n\n\t/**\n\t * Creates Operation object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} doc Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/operation~Operation}\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new this( json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/collection\n */\n\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport uid from './uid';\nimport mix from './mix';\n\n/**\n * Collections are ordered sets of objects. Items in the collection can be retrieved by their indexes\n * in the collection (like in an array) or by their ids.\n *\n * If an object without an `id` property is being added to the collection, the `id` property will be generated\n * automatically. Note that the automatically generated id is unique only within this single collection instance.\n *\n * By default an item in the collection is identified by its `id` property. The name of the identifier can be\n * configured through the constructor of the collection.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Collection {\n\t/**\n\t * Creates a new Collection instance.\n\t *\n\t * @param {Object} [options={}] The options object.\n\t * @param {String} [options.idProperty='id'] The name of the property which is considered to identify an item.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * The internal list of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Object[]}\n\t\t */\n\t\tthis._items = [];\n\n\t\t/**\n\t\t * The internal map of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._itemMap = new Map();\n\n\t\t/**\n\t\t * The name of the property which is considered to identify an item.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._idProperty = options.idProperty || 'id';\n\n\t\t/**\n\t\t * A helper mapping external items of a bound collection ({@link #bindTo})\n\t\t * and actual items of this collection. It provides information\n\t\t * necessary to properly remove items bound to another collection.\n\t\t *\n\t\t * See {@link #_bindToInternalToExternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToExternalToInternalMap = new WeakMap();\n\n\t\t/**\n\t\t * A helper mapping items of this collection to external items of a bound collection\n\t\t * ({@link #bindTo}). It provides information necessary to manage the bindings, e.g.\n\t\t * to avoid loops in two–way bindings.\n\t\t *\n\t\t * See {@link #_bindToExternalToInternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToInternalToExternalMap = new WeakMap();\n\n\t\t/**\n\t\t * Stores indexes of skipped items from bound external collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Array}\n\t\t */\n\t\tthis._skippedIndexesFromExternal = [];\n\n\t\t/**\n\t\t * A collection instance this collection is bound to as a result\n\t\t * of calling {@link #bindTo} method.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/collection~Collection} #_bindToCollection\n\t\t */\n\t}\n\n\t/**\n\t * The number of items available in the collection.\n\t *\n\t * @member {Number} #length\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * Returns the first item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The first item or `null` if collection is empty.\n\t */\n\tget first() {\n\t\treturn this._items[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the last item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The last item or `null` if collection is empty.\n\t */\n\tget last() {\n\t\treturn this._items[ this.length - 1 ] || null;\n\t}\n\n\t/**\n\t * Adds an item into the collection.\n\t *\n\t * If the item does not have an id, then it will be automatically generated and set on the item.\n\t *\n\t * @chainable\n\t * @param {Object} item\n\t * @param {Number} [index] The position of the item in the collection. The item\n\t * is pushed to the collection when `index` not specified.\n\t * @fires add\n\t */\n\tadd( item, index ) {\n\t\tlet itemId;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( ( idProperty in item ) ) {\n\t\t\titemId = item[ idProperty ];\n\n\t\t\tif ( typeof itemId != 'string' ) {\n\t\t\t\t/**\n\t\t\t\t * This item's id should be a string.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-invalid-id\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-invalid-id', this );\n\t\t\t}\n\n\t\t\tif ( this.get( itemId ) ) {\n\t\t\t\t/**\n\t\t\t\t * This item already exists in the collection.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-item-already-exists\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-item-already-exists', this );\n\t\t\t}\n\t\t} else {\n\t\t\titem[ idProperty ] = itemId = uid();\n\t\t}\n\n\t\t// TODO: Use ES6 default function argument.\n\t\tif ( index === undefined ) {\n\t\t\tindex = this._items.length;\n\t\t} else if ( index > this._items.length || index < 0 ) {\n\t\t\t/**\n\t\t\t * The index number has invalid value.\n\t\t\t *\n\t\t\t * @error collection-add-item-bad-index\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-add-item-invalid-index', this );\n\t\t}\n\n\t\tthis._items.splice( index, 0, item );\n\n\t\tthis._itemMap.set( itemId, item );\n\n\t\tthis.fire( 'add', item, index );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets item by its id or index.\n\t *\n\t * @param {String|Number} idOrIndex The item id or index in the collection.\n\t * @returns {Object|null} The requested item or `null` if such item does not exist.\n\t */\n\tget( idOrIndex ) {\n\t\tlet item;\n\n\t\tif ( typeof idOrIndex == 'string' ) {\n\t\t\titem = this._itemMap.get( idOrIndex );\n\t\t} else if ( typeof idOrIndex == 'number' ) {\n\t\t\titem = this._items[ idOrIndex ];\n\t\t} else {\n\t\t\t/**\n\t\t\t * Index or id must be given.\n\t\t\t *\n\t\t\t * @error collection-get-invalid-arg\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-get-invalid-arg: Index or id must be given.', this );\n\t\t}\n\n\t\treturn item || null;\n\t}\n\n\t/**\n\t * Returns a boolean indicating whether the collection contains an item.\n\t *\n\t * @param {Object|String} itemOrId The item or its id in the collection.\n\t * @returns {Boolean} `true` if the collection contains the item, `false` otherwise.\n\t */\n\thas( itemOrId ) {\n\t\tif ( typeof itemOrId == 'string' ) {\n\t\t\treturn this._itemMap.has( itemOrId );\n\t\t} else { // Object\n\t\t\tconst idProperty = this._idProperty;\n\t\t\tconst id = itemOrId[ idProperty ];\n\n\t\t\treturn this._itemMap.has( id );\n\t\t}\n\t}\n\n\t/**\n\t * Gets index of item in the collection.\n\t * When item is not defined in the collection then index will be equal -1.\n\t *\n\t * @param {Object|String} itemOrId The item or its id in the collection.\n\t * @returns {Number} Index of given item.\n\t */\n\tgetIndex( itemOrId ) {\n\t\tlet item;\n\n\t\tif ( typeof itemOrId == 'string' ) {\n\t\t\titem = this._itemMap.get( itemOrId );\n\t\t} else {\n\t\t\titem = itemOrId;\n\t\t}\n\n\t\treturn this._items.indexOf( item );\n\t}\n\n\t/**\n\t * Removes an item from the collection.\n\t *\n\t * @param {Object|Number|String} subject The item to remove, its id or index in the collection.\n\t * @returns {Object} The removed item.\n\t * @fires remove\n\t */\n\tremove( subject ) {\n\t\tlet index, id, item;\n\t\tlet itemDoesNotExist = false;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( typeof subject == 'string' ) {\n\t\t\tid = subject;\n\t\t\titem = this._itemMap.get( id );\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tindex = this._items.indexOf( item );\n\t\t\t}\n\t\t} else if ( typeof subject == 'number' ) {\n\t\t\tindex = subject;\n\t\t\titem = this._items[ index ];\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tid = item[ idProperty ];\n\t\t\t}\n\t\t} else {\n\t\t\titem = subject;\n\t\t\tid = item[ idProperty ];\n\t\t\tindex = this._items.indexOf( item );\n\t\t\titemDoesNotExist = ( index == -1 || !this._itemMap.get( id ) );\n\t\t}\n\n\t\tif ( itemDoesNotExist ) {\n\t\t\t/**\n\t\t\t * Item not found.\n\t\t\t *\n\t\t\t * @error collection-remove-404\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-remove-404: Item not found.', this );\n\t\t}\n\n\t\tthis._items.splice( index, 1 );\n\t\tthis._itemMap.delete( id );\n\n\t\tconst externalItem = this._bindToInternalToExternalMap.get( item );\n\t\tthis._bindToInternalToExternalMap.delete( item );\n\t\tthis._bindToExternalToInternalMap.delete( externalItem );\n\n\t\tthis.fire( 'remove', item, index );\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Executes the callback for each item in the collection and composes an array or values returned by this callback.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Array} The result of mapping.\n\t */\n\tmap( callback, ctx ) {\n\t\treturn this._items.map( callback, ctx );\n\t}\n\n\t/**\n\t * Finds the first item in the collection for which the `callback` returns a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object} The item for which `callback` returned a true value.\n\t */\n\tfind( callback, ctx ) {\n\t\treturn this._items.find( callback, ctx );\n\t}\n\n\t/**\n\t * Returns an array with items for which the `callback` returned a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object[]} The array with matching items.\n\t */\n\tfilter( callback, ctx ) {\n\t\treturn this._items.filter( callback, ctx );\n\t}\n\n\t/**\n\t * Removes all items from the collection and destroys the binding created using\n\t * {@link #bindTo}.\n\t */\n\tclear() {\n\t\tif ( this._bindToCollection ) {\n\t\t\tthis.stopListening( this._bindToCollection );\n\t\t\tthis._bindToCollection = null;\n\t\t}\n\n\t\twhile ( this.length ) {\n\t\t\tthis.remove( 0 );\n\t\t}\n\t}\n\n\t/**\n\t * Binds and synchronizes the collection with another one.\n\t *\n\t * The binding can be a simple factory:\n\t *\n\t *\t\tclass FactoryClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).as( FactoryClass );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 1 ).label ); // 'bar'\n\t *\n\t *\t\tsource.remove( 0 );\n\t *\t\tconsole.log( target.length ); // 1\n\t *\t\tconsole.log( target.get( 0 ).label ); // 'bar'\n\t *\n\t * or the factory driven by a custom callback:\n\t *\n\t *\t\tclass FooClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tclass BarClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( ( item ) => {\n\t *\t\t\tif ( item.label == 'foo' ) {\n\t *\t\t\t\treturn new FooClass( item );\n\t *\t\t\t} else {\n\t *\t\t\t\treturn new BarClass( item );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ) instanceof FooClass ); // true\n\t *\t\tconsole.log( target.get( 1 ) instanceof BarClass ); // true\n\t *\n\t * or the factory out of property name:\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( 'label' );\n\t *\n\t *\t\tsource.add( { label: { value: 'foo' } } );\n\t *\t\tsource.add( { label: { value: 'bar' } } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ).value ); // 'foo'\n\t *\t\tconsole.log( target.get( 1 ).value ); // 'bar'\n\t *\n\t * It's possible to skip specified items by returning falsy value:\n\t *\n\t *\t\tconst source = new Collection();\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( item => {\n\t *\t\t\tif ( item.hidden ) {\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn item;\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { hidden: true } );\n\t *\t\tsource.add( { hidden: false } );\n\t *\n\t *\t\tconsole.log( source.length ); // 2\n\t *\t\tconsole.log( target.length ); // 1\n\t *\n\t * **Note**: {@link #clear} can be used to break the binding.\n\t *\n\t * @param {module:utils/collection~Collection} externalCollection A collection to be bound.\n\t * @returns {Object}\n\t * @returns {module:utils/collection~CollectionBindToChain} The binding chain object.\n\t */\n\tbindTo( externalCollection ) {\n\t\tif ( this._bindToCollection ) {\n\t\t\t/**\n\t\t\t * The collection cannot be bound more than once.\n\t\t\t *\n\t\t\t * @error collection-bind-to-rebind\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-bind-to-rebind: The collection cannot be bound more than once.', this );\n\t\t}\n\n\t\tthis._bindToCollection = externalCollection;\n\n\t\treturn {\n\t\t\tas: Class => {\n\t\t\t\tthis._setUpBindToBinding( item => new Class( item ) );\n\t\t\t},\n\n\t\t\tusing: callbackOrProperty => {\n\t\t\t\tif ( typeof callbackOrProperty == 'function' ) {\n\t\t\t\t\tthis._setUpBindToBinding( item => callbackOrProperty( item ) );\n\t\t\t\t} else {\n\t\t\t\t\tthis._setUpBindToBinding( item => item[ callbackOrProperty ] );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Finalizes and activates a binding initiated by {#bindTo}.\n\t *\n\t * @protected\n\t * @param {Function} factory A function which produces collection items.\n\t */\n\t_setUpBindToBinding( factory ) {\n\t\tconst externalCollection = this._bindToCollection;\n\n\t\t// Adds the item to the collection once a change has been done to the external collection.\n\t\t//\n\t\t// @private\n\t\tconst addItem = ( evt, externalItem, index ) => {\n\t\t\tconst isExternalBoundToThis = externalCollection._bindToCollection == this;\n\t\t\tconst externalItemBound = externalCollection._bindToInternalToExternalMap.get( externalItem );\n\n\t\t\t// If an external collection is bound to this collection, which makes it a 2–way binding,\n\t\t\t// and the particular external collection item is already bound, don't add it here.\n\t\t\t// The external item has been created **out of this collection's item** and (re)adding it will\n\t\t\t// cause a loop.\n\t\t\tif ( isExternalBoundToThis && externalItemBound ) {\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, externalItemBound );\n\t\t\t\tthis._bindToInternalToExternalMap.set( externalItemBound, externalItem );\n\t\t\t} else {\n\t\t\t\tconst item = factory( externalItem );\n\n\t\t\t\t// When there is no item we need to remember skipped index first and then we can skip this item.\n\t\t\t\tif ( !item ) {\n\t\t\t\t\tthis._skippedIndexesFromExternal.push( index );\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Lets try to put item at the same index as index in external collection\n\t\t\t\t// but when there are a skipped items in one or both collections we need to recalculate this index.\n\t\t\t\tlet finalIndex = index;\n\n\t\t\t\t// When we try to insert item after some skipped items from external collection we need\n\t\t\t\t// to include this skipped items and decrease index.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal' ]\n\t\t\t\t// internal -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We can't just add 'D' to internal at the same index as index in external because\n\t\t\t\t// this will produce empty indexes what is invalid:\n\t\t\t\t// internal -> [ 'A', empty, empty, 'D' ]\n\t\t\t\t//\n\t\t\t\t// So we need to include skipped items and decrease index\n\t\t\t\t// internal -> [ 'A', 'D' ]\n\t\t\t\tfor ( const skipped of this._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\t\tfinalIndex--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We need to take into consideration that external collection could skip some items from\n\t\t\t\t// internal collection.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external' ]\n\t\t\t\t// external -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We need to include skipped items and place new item after them:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external', 'D' ]\n\t\t\t\tfor ( const skipped of externalCollection._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( finalIndex >= skipped ) {\n\t\t\t\t\t\tfinalIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, item );\n\t\t\t\tthis._bindToInternalToExternalMap.set( item, externalItem );\n\t\t\t\tthis.add( item, finalIndex );\n\n\t\t\t\t// After adding new element to internal collection we need update indexes\n\t\t\t\t// of skipped items in external collection.\n\t\t\t\tfor ( let i = 0; i < externalCollection._skippedIndexesFromExternal.length; i++ ) {\n\t\t\t\t\tif ( finalIndex <= externalCollection._skippedIndexesFromExternal[ i ] ) {\n\t\t\t\t\t\texternalCollection._skippedIndexesFromExternal[ i ]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Load the initial content of the collection.\n\t\tfor ( const externalItem of externalCollection ) {\n\t\t\taddItem( null, externalItem, externalCollection.getIndex( externalItem ) );\n\t\t}\n\n\t\t// Synchronize the with collection as new items are added.\n\t\tthis.listenTo( externalCollection, 'add', addItem );\n\n\t\t// Synchronize the with collection as new items are removed.\n\t\tthis.listenTo( externalCollection, 'remove', ( evt, externalItem, index ) => {\n\t\t\tconst item = this._bindToExternalToInternalMap.get( externalItem );\n\n\t\t\tif ( item ) {\n\t\t\t\tthis.remove( item );\n\t\t\t}\n\n\t\t\t// After removing element from external collection we need update/remove indexes\n\t\t\t// of skipped items in internal collection.\n\t\t\tthis._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce( ( result, skipped ) => {\n\t\t\t\tif ( index < skipped ) {\n\t\t\t\t\tresult.push( skipped - 1 );\n\t\t\t\t}\n\n\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\tresult.push( skipped );\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [] );\n\t\t} );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Fired when an item is added to the collection.\n\t *\n\t * @event add\n\t * @param {Object} item The added item.\n\t */\n\n\t/**\n\t * Fired when an item is removed from the collection.\n\t *\n\t * @event remove\n\t * @param {Object} item The removed item.\n\t * @param {Number} index Index from which item was removed.\n\t */\n}\n\nmix( Collection, EmitterMixin );\n\n/**\n * An object returned by the {@link module:utils/collection~Collection#bindTo `bindTo()`} method\n * providing functions that specify the type of the binding.\n *\n * See the {@link module:utils/collection~Collection#bindTo `bindTo()`} documentation for examples.\n *\n * @interface module:utils/collection~CollectionBindToChain\n */\n\n/**\n * Creates a callback or a property binding.\n *\n * @method #using\n * @param {Function|String} callbackOrProperty  When the function is passed, it should return\n * the collection items. When the string is provided, the property value is used to create the bound collection items.\n */\n\n/**\n * Creates the class factory binding in which items of the source collection are passed to\n * the constructor of the specified class.\n *\n * @method #as\n * @param {Function} Class The class constructor used to create instances in the factory.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/element\n */\n\nimport Node from './node';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport objectToMap from '@ckeditor/ckeditor5-utils/src/objecttomap';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Matcher from './matcher';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * View element.\n *\n * The editing engine does not define a fixed semantics of its elements (it is \"DTD-free\").\n * This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. When creating an element you should use one of the following methods:\n *\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `downcastWriter#createContainerElement()`}\n * in order to create a {@link module:engine/view/containerelement~ContainerElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `downcastWriter#createAttributeElement()`}\n * in order to create a {@link module:engine/view/attributeelement~AttributeElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`}\n * in order to create a {@link module:engine/view/emptyelement~EmptyElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}\n * in order to create a {@link module:engine/view/uielement~UIElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`}\n * in order to create a {@link module:engine/view/editableelement~EditableElement}.\n *\n * Note that for view elements which are not created from the model, like elements from mutations, paste or\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element.\n * In such cases the {@link module:engine/view/upcastwriter~UpcastWriter#createElement `UpcastWriter#createElement()`} method\n * should be used to create generic view elements.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a view element.\n\t *\n\t * Attributes can be passed in various formats:\n\t *\n\t *\t\tnew Element( 'div', { class: 'editor', contentEditable: 'true' } ); // object\n\t *\t\tnew Element( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n\t *\t\tnew Element( 'div', mapOfAttributes ); // map\n\t *\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Name of the element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Map of attributes, where attributes names are keys and attributes values are values.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} #_attrs\n\t\t */\n\t\tthis._attrs = parseAttributes( attrs );\n\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\n\t\t/**\n\t\t * Set of classes associated with element instance.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set}\n\t\t */\n\t\tthis._classes = new Set();\n\n\t\tif ( this._attrs.has( 'class' ) ) {\n\t\t\t// Remove class attribute and handle it by class set.\n\t\t\tconst classString = this._attrs.get( 'class' );\n\t\t\tparseClasses( this._classes, classString );\n\t\t\tthis._attrs.delete( 'class' );\n\t\t}\n\n\t\t/**\n\t\t * Map of styles.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} module:engine/view/element~Element#_styles\n\t\t */\n\t\tthis._styles = new Map();\n\n\t\tif ( this._attrs.has( 'style' ) ) {\n\t\t\t// Remove style attribute and handle it by styles map.\n\t\t\tparseInlineStyles( this._styles, this._attrs.get( 'style' ) );\n\t\t\tthis._attrs.delete( 'style' );\n\t\t}\n\n\t\t/**\n\t\t * Map of custom properties.\n\t\t * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map}\n\t\t */\n\t\tthis._customProperties = new Map();\n\t}\n\n\t/**\n\t * Number of element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._children.length === 0;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\telement.is( 'element' ); // -> true\n\t *\t\telement.is( 'node' ); // -> true\n\t *\t\telement.is( 'view:element' ); // -> true\n\t *\t\telement.is( 'view:node' ); // -> true\n\t *\n\t *\t\telement.is( 'model:element' ); // -> false\n\t *\t\telement.is( 'documentSelection' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/view/element~Element#name name}:\n\t *\n\t *\t\telement.is( 'img' ); // -> true if this is an <img> element\n\t *\t\telement.is( 'element', 'img' ); // -> same as above\n\t *\t\ttext.is( 'img' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'element' || cutType == this.name || super.is( type );\n\t\t} else {\n\t\t\treturn cutType == 'element' && name == this.name;\n\t\t}\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\n\t *\n\t * @returns {Iterable.<String>} Keys for attributes.\n\t */\n\t* getAttributeKeys() {\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield 'class';\n\t\t}\n\n\t\tif ( this._styles.size > 0 ) {\n\t\t\tyield 'style';\n\t\t}\n\n\t\tyield* this._attrs.keys();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this element's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getAttributes() {\n\t\tyield* this._attrs.entries();\n\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield [ 'class', this.getAttribute( 'class' ) ];\n\t\t}\n\n\t\tif ( this._styles.size > 0 ) {\n\t\t\tyield [ 'style', this.getAttribute( 'style' ) ];\n\t\t}\n\t}\n\n\t/**\n\t * Gets attribute by key. If attribute is not present - returns undefined.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {String|undefined} Attribute value.\n\t */\n\tgetAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\treturn [ ...this._classes ].join( ' ' );\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\tif ( this._styles.size > 0 ) {\n\t\t\t\tlet styleString = '';\n\n\t\t\t\tfor ( const [ property, value ] of this._styles ) {\n\t\t\t\t\tstyleString += `${ property }:${ value };`;\n\t\t\t\t}\n\n\t\t\t\treturn styleString;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns a boolean indicating whether an attribute with the specified key exists in the element.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} `true` if attribute with the specified key exists in the element, false otherwise.\n\t */\n\thasAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\treturn this._classes.size > 0;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\treturn this._styles.size > 0;\n\t\t}\n\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t * Both elements should have the same name and attributes to be considered as similar. Two similar elements\n\t * can contain different set of children nodes.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\tif ( !( otherElement instanceof Element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If exactly the same Element is provided - return true immediately.\n\t\tif ( this === otherElement ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check element name.\n\t\tif ( this.name != otherElement.name ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check number of attributes, classes and styles.\n\t\tif ( this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size ||\n\t\t\tthis._styles.size !== otherElement._styles.size ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes are the same.\n\t\tfor ( const [ key, value ] of this._attrs ) {\n\t\t\tif ( !otherElement._attrs.has( key ) || otherElement._attrs.get( key ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if classes are the same.\n\t\tfor ( const className of this._classes ) {\n\t\t\tif ( !otherElement._classes.has( className ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles are the same.\n\t\tfor ( const [ property, value ] of this._styles ) {\n\t\t\tif ( !otherElement._styles.has( property ) || otherElement._styles.get( property ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns true if class is present.\n\t * If more then one class is provided - returns true only when all classes are present.\n\t *\n\t *\t\telement.hasClass( 'foo' ); // Returns true if 'foo' class is present.\n\t *\t\telement.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\n\t *\n\t * @param {...String} className\n\t */\n\thasClass( ...className ) {\n\t\tfor ( const name of className ) {\n\t\t\tif ( !this._classes.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns iterator that contains all class names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetClassNames() {\n\t\treturn this._classes.keys();\n\t}\n\n\t/**\n\t * Returns style value for given property.\n\t * Undefined is returned if style does not exist.\n\t *\n\t * @param {String} property\n\t * @returns {String|undefined}\n\t */\n\tgetStyle( property ) {\n\t\treturn this._styles.get( property );\n\t}\n\n\t/**\n\t * Returns iterator that contains all style names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetStyleNames() {\n\t\treturn this._styles.keys();\n\t}\n\n\t/**\n\t * Returns true if style keys are present.\n\t * If more then one style property is provided - returns true only when all properties are present.\n\t *\n\t *\t\telement.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\n\t *\t\telement.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\n\t *\n\t * @param {...String} property\n\t */\n\thasStyle( ...property ) {\n\t\tfor ( const name of property ) {\n\t\t\tif ( !this._styles.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns ancestor element that match specified pattern.\n\t * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\n\t *\n\t * @see module:engine/view/matcher~Matcher\n\t * @param {Object|String|RegExp|Function} patterns Patterns used to match correct ancestor.\n\t * See {@link module:engine/view/matcher~Matcher}.\n\t * @returns {module:engine/view/element~Element|null} Found element or `null` if no matching ancestor was found.\n\t */\n\tfindAncestor( ...patterns ) {\n\t\tconst matcher = new Matcher( ...patterns );\n\t\tlet parent = this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( matcher.match( parent ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the custom property value for the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @returns {*}\n\t */\n\tgetCustomProperty( key ) {\n\t\treturn this._customProperties.get( key );\n\t}\n\n\t/**\n\t * Returns an iterator which iterates over this element's custom properties.\n\t * Iterator provides `[ key, value ]` pairs for each stored property.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getCustomProperties() {\n\t\tyield* this._customProperties.entries();\n\t}\n\n\t/**\n\t * Returns identity string based on element's name, styles, classes and other attributes.\n\t * Two elements that {@link #isSimilar are similar} will have same identity string.\n\t * It has the following format:\n\t *\n\t *\t\t'name class=\"class1,class2\" style=\"style1:value1;style2:value2\" attr1=\"val1\" attr2=\"val2\"'\n \t *\n\t * For example:\n\t *\n\t *\t\tconst element = writer.createContainerElement( 'foo', {\n\t *\t\t\tbanana: '10',\n\t *\t\t\tapple: '20',\n\t *\t\t\tstyle: 'color: red; border-color: white;',\n\t *\t\t\tclass: 'baz'\n\t *\t\t} );\n\t *\n\t *\t\t// returns 'foo class=\"baz\" style=\"border-color:white;color:red\" apple=\"20\" banana=\"10\"'\n\t *\t\telement.getIdentity();\n\t *\n\t * NOTE: Classes, styles and other attributes are sorted alphabetically.\n\t *\n\t * @returns {String}\n\t */\n\tgetIdentity() {\n\t\tconst classes = Array.from( this._classes ).sort().join( ',' );\n\t\tconst styles = Array.from( this._styles ).map( i => `${ i[ 0 ] }:${ i[ 1 ] }` ).sort().join( ';' );\n\t\tconst attributes = Array.from( this._attrs ).map( i => `${ i[ 0 ] }=\"${ i[ 1 ] }\"` ).sort().join( ' ' );\n\n\t\treturn this.name +\n\t\t\t( classes == '' ? '' : ` class=\"${ classes }\"` ) +\n\t\t\t( styles == '' ? '' : ` style=\"${ styles }\"` ) +\n\t\t\t( attributes == '' ? '' : ` ${ attributes }` );\n\t}\n\n\t/**\n\t * Clones provided element.\n\t *\n\t * @protected\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/element~Element} Clone of this element.\n\t */\n\t_clone( deep = false ) {\n\t\tconst childrenClone = [];\n\n\t\tif ( deep ) {\n\t\t\tfor ( const child of this.getChildren() ) {\n\t\t\t\tchildrenClone.push( child._clone( deep ) );\n\t\t\t}\n\t\t}\n\n\t\t// ContainerElement and AttributeElement should be also cloned properly.\n\t\tconst cloned = new this.constructor( this.name, this._attrs, childrenClone );\n\n\t\t// Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\n\t\t// parse once again in constructor.\n\t\tcloned._classes = new Set( this._classes );\n\t\tcloned._styles = new Map( this._styles );\n\n\t\t// Clone custom properties.\n\t\tcloned._customProperties = new Map( this._customProperties );\n\n\t\t// Clone filler offset method.\n\t\t// We can't define this method in a prototype because it's behavior which\n\t\t// is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\n\t\tcloned.getFillerOffset = this.getFillerOffset;\n\n\t\treturn cloned;\n\t}\n\n\t/**\n\t * {@link module:engine/view/element~Element#_insertChild Insert} a child node or a list of child nodes at the end of this node\n\t * and sets the parent of these nodes to this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of appended nodes.\n\t */\n\t_appendChild( items ) {\n\t\treturn this._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\t_insertChild( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#remove\n\t * @protected\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Adds or overwrite attribute with a specified key and value.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setAttribute( key, value ) {\n\t\tvalue = String( value );\n\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( key == 'class' ) {\n\t\t\tparseClasses( this._classes, value );\n\t\t} else if ( key == 'style' ) {\n\t\t\tparseInlineStyles( this._styles, value );\n\t\t} else {\n\t\t\tthis._attrs.set( key, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} Returns true if an attribute existed and has been removed.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\t// Remove class attribute.\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\tthis._classes.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove style attribute.\n\t\tif ( key == 'style' ) {\n\t\t\tif ( this._styles.size > 0 ) {\n\t\t\t\tthis._styles.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove other attributes.\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Adds specified class.\n\t *\n\t *\t\telement._addClass( 'foo' ); // Adds 'foo' class.\n\t *\t\telement._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#addClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_addClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.add( name ) );\n\t}\n\n\t/**\n\t * Removes specified class.\n\t *\n\t *\t\telement._removeClass( 'foo' );  // Removes 'foo' class.\n\t *\t\telement._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.delete( name ) );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\telement._setStyle( 'color', 'red' );\n\t *\t\telement._setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t} );\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setStyle\n\t * @protected\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setStyle( property, value ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( isPlainObject( property ) ) {\n\t\t\tconst keys = Object.keys( property );\n\n\t\t\tfor ( const key of keys ) {\n\t\t\t\tthis._styles.set( key, property[ key ] );\n\t\t\t}\n\t\t} else {\n\t\t\tthis._styles.set( property, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes specified style.\n\t *\n\t *\t\telement._removeStyle( 'color' );  // Removes 'color' style.\n\t *\t\telement._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeStyle\n\t * @protected\n\t * @param {Array.<String>|String} property\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeStyle( property ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tproperty = Array.isArray( property ) ? property : [ property ];\n\t\tproperty.forEach( name => this._styles.delete( name ) );\n\t}\n\n\t/**\n\t * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t */\n\t_setCustomProperty( key, value ) {\n\t\tthis._customProperties.set( key, value );\n\t}\n\n\t/**\n\t * Removes the custom property stored under the given key.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\t_removeCustomProperty( key ) {\n\t\treturn this._customProperties.delete( key );\n\t}\n\n\t/**\n\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t *\n\t * @abstract\n\t * @method module:engine/view/element~Element#getFillerOffset\n\t */\n}\n\n// Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\n// as an object (instead of `Map`), the object is transformed to the map. Attributes with `null` value are removed.\n// Attributes with non-`String` value are converted to `String`.\n//\n// @param {Object|Map} attrs Attributes to parse.\n// @returns {Map} Parsed attributes.\nfunction parseAttributes( attrs ) {\n\tif ( isPlainObject( attrs ) ) {\n\t\tattrs = objectToMap( attrs );\n\t} else {\n\t\tattrs = new Map( attrs );\n\t}\n\n\tfor ( const [ key, value ] of attrs ) {\n\t\tif ( value === null ) {\n\t\t\tattrs.delete( key );\n\t\t} else if ( typeof value != 'string' ) {\n\t\t\tattrs.set( key, String( value ) );\n\t\t}\n\t}\n\n\treturn attrs;\n}\n\n// Parses inline styles and puts property - value pairs into styles map.\n// Styles map is cleared before insertion.\n//\n// @param {Map.<String, String>} stylesMap Map to insert parsed properties and values.\n// @param {String} stylesString Styles to parse.\nfunction parseInlineStyles( stylesMap, stylesString ) {\n\t// `null` if no quote was found in input string or last found quote was a closing quote. See below.\n\tlet quoteType = null;\n\tlet propertyNameStart = 0;\n\tlet propertyValueStart = 0;\n\tlet propertyName = null;\n\n\tstylesMap.clear();\n\n\t// Do not set anything if input string is empty.\n\tif ( stylesString === '' ) {\n\t\treturn;\n\t}\n\n\t// Fix inline styles that do not end with `;` so they are compatible with algorithm below.\n\tif ( stylesString.charAt( stylesString.length - 1 ) != ';' ) {\n\t\tstylesString = stylesString + ';';\n\t}\n\n\t// Seek the whole string for \"special characters\".\n\tfor ( let i = 0; i < stylesString.length; i++ ) {\n\t\tconst char = stylesString.charAt( i );\n\n\t\tif ( quoteType === null ) {\n\t\t\t// No quote found yet or last found quote was a closing quote.\n\t\t\tswitch ( char ) {\n\t\t\t\tcase ':':\n\t\t\t\t\t// Most of time colon means that property name just ended.\n\t\t\t\t\t// Sometimes however `:` is found inside property value (for example in background image url).\n\t\t\t\t\tif ( !propertyName ) {\n\t\t\t\t\t\t// Treat this as end of property only if property name is not already saved.\n\t\t\t\t\t\t// Save property name.\n\t\t\t\t\t\tpropertyName = stylesString.substr( propertyNameStart, i - propertyNameStart );\n\t\t\t\t\t\t// Save this point as the start of property value.\n\t\t\t\t\t\tpropertyValueStart = i + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\t// Opening quote found (this is an opening quote, because `quoteType` is `null`).\n\t\t\t\t\tquoteType = char;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ';': {\n\t\t\t\t\t// Property value just ended.\n\t\t\t\t\t// Use previously stored property value start to obtain property value.\n\t\t\t\t\tconst propertyValue = stylesString.substr( propertyValueStart, i - propertyValueStart );\n\n\t\t\t\t\tif ( propertyName ) {\n\t\t\t\t\t\t// Save parsed part.\n\t\t\t\t\t\tstylesMap.set( propertyName.trim(), propertyValue.trim() );\n\t\t\t\t\t}\n\n\t\t\t\t\tpropertyName = null;\n\n\t\t\t\t\t// Save this point as property name start. Property name starts immediately after previous property value ends.\n\t\t\t\t\tpropertyNameStart = i + 1;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( char === quoteType ) {\n\t\t\t// If a quote char is found and it is a closing quote, mark this fact by `null`-ing `quoteType`.\n\t\t\tquoteType = null;\n\t\t}\n\t}\n}\n\n// Parses class attribute and puts all classes into classes set.\n// Classes set s cleared before insertion.\n//\n// @param {Set.<String>} classesSet Set to insert parsed classes.\n// @param {String} classesString String with classes to parse.\nfunction parseClasses( classesSet, classesString ) {\n\tconst classArray = classesString.split( /\\s+/ );\n\tclassesSet.clear();\n\tclassArray.forEach( name => classesSet.add( name ) );\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global setTimeout, clearTimeout */\n\n/**\n * @module utils/focustracker\n */\n\nimport DomEmitterMixin from './dom/emittermixin';\nimport ObservableMixin from './observablemixin';\nimport CKEditorError from './ckeditorerror';\nimport mix from './mix';\n\n/**\n * Allows observing a group of `HTMLElement`s whether at least one of them is focused.\n *\n * Used by the {@link module:core/editor/editor~Editor} in order to track whether the focus is still within the application,\n * or were used outside of its UI.\n *\n * **Note** `focus` and `blur` listeners use event capturing, so it is only needed to register wrapper `HTMLElement`\n * which contain other `focusable` elements. But note that this wrapper element has to be focusable too\n * (have e.g. `tabindex=\"-1\"`).\n *\n * @mixes module:utils/dom/emittermixin~EmitterMixin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class FocusTracker {\n\tconstructor() {\n\t\t/**\n\t\t * True when one of the registered elements is focused.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The currently focused element.\n\t\t *\n\t\t * While {@link #isFocused `isFocused`} remains `true`, the focus can\n\t\t * move between different UI elements. This property tracks those\n\t\t * elements and tells which one is currently focused.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {HTMLElement|null}\n\t\t */\n\t\tthis.set( 'focusedElement', null );\n\n\t\t/**\n\t\t * List of registered elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<HTMLElement>}\n\t\t */\n\t\tthis._elements = new Set();\n\n\t\t/**\n\t\t * Event loop timeout.\n\t\t *\n\t\t * @private\n\t\t * @member {Number}\n\t\t */\n\t\tthis._nextEventLoopTimeout = null;\n\t}\n\n\t/**\n\t * Starts tracking the specified element.\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tadd( element ) {\n\t\tif ( this._elements.has( element ) ) {\n\t\t\tthrow new CKEditorError( 'focusTracker-add-element-already-exist', this );\n\t\t}\n\n\t\tthis.listenTo( element, 'focus', () => this._focus( element ), { useCapture: true } );\n\t\tthis.listenTo( element, 'blur', () => this._blur(), { useCapture: true } );\n\t\tthis._elements.add( element );\n\t}\n\n\t/**\n\t * Stops tracking the specified element and stops listening on this element.\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tremove( element ) {\n\t\tif ( element === this.focusedElement ) {\n\t\t\tthis._blur( element );\n\t\t}\n\n\t\tif ( this._elements.has( element ) ) {\n\t\t\tthis.stopListening( element );\n\t\t\tthis._elements.delete( element );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the focus tracker by:\n\t * - Disabling all event listeners attached to tracked elements.\n\t * - Removing all tracked elements that were previously added.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Stores currently focused element and set {#isFocused} as `true`.\n\t *\n\t * @private\n\t * @param {HTMLElement} element Element which has been focused.\n\t */\n\t_focus( element ) {\n\t\tclearTimeout( this._nextEventLoopTimeout );\n\n\t\tthis.focusedElement = element;\n\t\tthis.isFocused = true;\n\t}\n\n\t/**\n\t * Clears currently focused element and set {@link #isFocused} as `false`.\n\t * This method uses `setTimeout` to change order of fires `blur` and `focus` events.\n\t *\n\t * @private\n\t * @fires blur\n\t */\n\t_blur() {\n\t\tclearTimeout( this._nextEventLoopTimeout );\n\n\t\tthis._nextEventLoopTimeout = setTimeout( () => {\n\t\t\tthis.focusedElement = null;\n\t\t\tthis.isFocused = false;\n\t\t}, 0 );\n\t}\n\n\t/**\n\t * @event focus\n\t */\n\n\t/**\n\t * @event blur\n\t */\n}\n\nmix( FocusTracker, DomEmitterMixin );\nmix( FocusTracker, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/liveposition\n */\n\nimport Position from './position';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n *\n * @extends module:engine/model/position~Position\n */\nexport default class LivePosition extends Position {\n\t/**\n\t * Creates a live position.\n\t *\n\t * @see module:engine/model/position~Position\n\t * @param {module:engine/model/rootelement~RootElement} root\n\t * @param {Array.<Number>} path\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness]\n\t */\n\tconstructor( root, path, stickiness = 'toNone' ) {\n\t\tsuper( root, path, stickiness );\n\n\t\tif ( !this.root.is( 'rootElement' ) ) {\n\t\t\t/**\n\t\t\t * LivePosition's root has to be an instance of RootElement.\n\t\t\t *\n\t\t\t * @error liveposition-root-not-rootelement\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-liveposition-root-not-rootelement: LivePosition\\'s root has to be an instance of RootElement.',\n\t\t\t\troot\n\t\t\t);\n\t\t}\n\n\t\tbindWithDocument.call( this );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n\t * referring to it).\n\t */\n\tdetach() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tlivePosition.is( 'position' ); // -> true\n\t *\t\tlivePosition.is( 'model:position' ); // -> true\n\t *\t\tlivePosition.is( 'liveposition' ); // -> true\n\t *\t\tlivePosition.is( 'model:livePosition' ); // -> true\n\t *\n\t *\t\tlivePosition.is( 'view:position' ); // -> false\n\t *\t\tlivePosition.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'livePosition' || type == 'model:livePosition' || super.is( type );\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\ttoPosition() {\n\t\treturn new Position( this.root, this.path.slice(), this.stickiness );\n\t}\n\n\t/**\n\t * Creates a `LivePosition` instance that is equal to position.\n\t *\n\t * @param {module:engine/model/position~Position} position\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness]\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic fromPosition( position, stickiness ) {\n\t\treturn new this( position.root, position.path.slice(), stickiness ? stickiness : position.stickiness );\n\t}\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createAfter\n\t * @see module:engine/model/position~Position._createAfter\n\t * @param {module:engine/model/node~Node} node\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createBefore\n\t * @see module:engine/model/position~Position._createBefore\n\t * @param {module:engine/model/node~Node} node\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createAt\n\t * @see module:engine/model/position~Position._createAt\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset]\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * Fired when `LivePosition` instance is changed due to changes on {@link module:engine/model/document~Document}.\n\t *\n\t * @event module:engine/model/liveposition~LivePosition#change\n\t * @param {module:engine/model/position~Position} oldPosition Position equal to this live position before it got changed.\n\t */\n}\n\n// Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n// this position's {@link module:engine/model/position~Position#root root}.\n//\n// @private\nfunction bindWithDocument() {\n\tthis.listenTo(\n\t\tthis.root.document.model,\n\t\t'applyOperation',\n\t\t( event, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransform.call( this, operation );\n\t\t},\n\t\t{ priority: 'low' }\n\t);\n}\n\n// Updates this position accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform( operation ) {\n\tconst result = this.getTransformedByOperation( operation );\n\n\tif ( !this.isEqual( result ) ) {\n\t\tconst oldPosition = this.toPosition();\n\n\t\tthis.path = result.path;\n\t\tthis.root = result.root;\n\n\t\tthis.fire( 'change', oldPosition );\n\t}\n}\n\nmix( LivePosition, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/isiterable\n */\n\n/**\n * Checks if value implements iterator interface.\n *\n * @param {*} value The value to check.\n * @returns {Boolean} True if value implements iterator interface.\n */\nexport default function isIterable( value ) {\n\treturn !!( value && value[ Symbol.iterator ] );\n}\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/attributeoperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { _setAttribute } from './utils';\nimport { isEqual } from 'lodash-es';\n\n/**\n * Operation to change nodes' attribute.\n *\n * Using this class you can add, remove or change value of the attribute.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class AttributeOperation extends Operation {\n\t/**\n\t * Creates an operation that changes, removes or adds attributes.\n\t *\n\t * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\n\t * have an attribute with the same key as the added attribute.\n\t *\n\t * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\n\t * must have an attribute with that key added.\n\t *\n\t * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\n\t * operation's ranges must already have an attribute with given key and `oldValue` as value\n\t *\n\t * @param {module:engine/model/range~Range} range Range on which the operation should be applied. Must be a flat range.\n\t * @param {String} key Key of an attribute to change or remove.\n\t * @param {*} oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n\t * @param {*} newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( range, key, oldValue, newValue, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Range on which operation should be applied.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.range = range.clone();\n\n\t\t/**\n\t\t * Key of an attribute to change or remove.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/**\n\t\t * Old value of the attribute with given key or `null`, if attribute was not set before.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.oldValue = oldValue === undefined ? null : oldValue;\n\n\t\t/**\n\t\t * New value of the attribute with given key or `null`, if operation should remove attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.newValue = newValue === undefined ? null : newValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.oldValue === null ) {\n\t\t\treturn 'addAttribute';\n\t\t} else if ( this.newValue === null ) {\n\t\t\treturn 'removeAttribute';\n\t\t} else {\n\t\t\treturn 'changeAttribute';\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new AttributeOperation( this.range, this.key, this.oldValue, this.newValue, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tgetReversed() {\n\t\treturn new AttributeOperation( this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.range = this.range.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( !this.range.isFlat ) {\n\t\t\t/**\n\t\t\t * The range to change is not flat.\n\t\t\t *\n\t\t\t * @error attribute-operation-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'attribute-operation-range-not-flat: The range to change is not flat.', this );\n\t\t}\n\n\t\tfor ( const item of this.range.getItems( { shallow: true } ) ) {\n\t\t\tif ( this.oldValue !== null && !isEqual( item.getAttribute( this.key ), this.oldValue ) ) {\n\t\t\t\t/**\n\t\t\t\t * Changed node has different attribute value than operation's old attribute value.\n\t\t\t\t *\n\t\t\t\t * @error attribute-operation-wrong-old-value\n\t\t\t\t * @param {module:engine/model/item~Item} item\n\t\t\t\t * @param {String} key\n\t\t\t\t * @param {*} value\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'attribute-operation-wrong-old-value: Changed node has different attribute value than operation\\'s ' +\n\t\t\t\t\t'old attribute value.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ item, key: this.key, value: this.oldValue }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( this.oldValue === null && this.newValue !== null && item.hasAttribute( this.key ) ) {\n\t\t\t\t/**\n\t\t\t\t * The attribute with given key already exists for the given node.\n\t\t\t\t *\n\t\t\t\t * @error attribute-operation-attribute-exists\n\t\t\t\t * @param {module:engine/model/node~Node} node\n\t\t\t\t * @param {String} key\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'attribute-operation-attribute-exists: The attribute with given key already exists.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ node: item, key: this.key }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// If value to set is same as old value, don't do anything.\n\t\tif ( !isEqual( this.oldValue, this.newValue ) ) {\n\t\t\t// Execution.\n\t\t\t_setAttribute( this.range, this.key, this.newValue );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'AttributeOperation';\n\t}\n\n\t/**\n\t * Creates `AttributeOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new AttributeOperation( Range.fromJSON( json.range, document ), json.key, json.oldValue, json.newValue, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/uid\n */\n\n/**\n * Returns a unique id. This id consist of an 'e' character and a randomly generated string of 32 aphanumeric characters.\n * Each character in uid string represents a hexadecimal digit (base 16).\n *\n * @returns {String} A hexadecimal number representing the id.\n */\nexport default function uid() {\n\tlet uuid = 'e'; // Make sure that id does not start with number.\n\n\tfor ( let i = 0; i < 8; i++ ) {\n\t\tuuid += Math.floor( ( 1 + Math.random() ) * 0x10000 ).toString( 16 ).substring( 1 );\n\t}\n\n\treturn uuid;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/textproxy\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * `TextProxy` represents a part of {@link module:engine/model/text~Text text node}.\n *\n * Since {@link module:engine/model/position~Position positions} can be placed between characters of a text node,\n * {@link module:engine/model/range~Range ranges} may contain only parts of text nodes. When {@link module:engine/model/range~Range#getItems\n * getting items}\n * contained in such range, we need to represent a part of that text node, since returning the whole text node would be incorrect.\n * `TextProxy` solves this issue.\n *\n * `TextProxy` has an API similar to {@link module:engine/model/text~Text Text} and allows to do most of the common tasks performed\n * on model nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/model/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is not an instance of {@link module:engine/model/node~Node node}. Keep this in mind when using it as a\n * parameter of methods.\n *\n * **Note:** `TextProxy` is a readonly interface. If you want to perform changes on model data represented by a `TextProxy`\n * use {@link module:engine/model/writer~Writer model writer API}.\n *\n * **Note:** `TextProxy` instances are created on the fly, basing on the current state of model. Because of this, it is\n * highly unrecommended to store references to `TextProxy` instances. `TextProxy` instances are not refreshed when\n * model changes, so they might get invalidated. Instead, consider creating {@link module:engine/model/liveposition~LivePosition live\n * position}.\n *\n * `TextProxy` instances are created by {@link module:engine/model/treewalker~TreeWalker model tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy {\n\t/**\n\t * Creates a text proxy.\n\t *\n\t * @protected\n\t * @param {module:engine/model/text~Text} textNode Text node which part is represented by this text proxy.\n\t * @param {Number} offsetInText Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy\n\t * starts.\n\t * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n\t * @constructor\n\t */\n\tconstructor( textNode, offsetInText, length ) {\n\t\t/**\n\t\t * Text node which part is represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/text~Text}\n\t\t */\n\t\tthis.textNode = textNode;\n\n\t\tif ( offsetInText < 0 || offsetInText > textNode.offsetSize ) {\n\t\t\t/**\n\t\t\t * Given `offsetInText` value is incorrect.\n\t\t\t *\n\t\t\t * @error model-textproxy-wrong-offsetintext\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.', this );\n\t\t}\n\n\t\tif ( length < 0 || offsetInText + length > textNode.offsetSize ) {\n\t\t\t/**\n\t\t\t * Given `length` value is incorrect.\n\t\t\t *\n\t\t\t * @error model-textproxy-wrong-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-textproxy-wrong-length: Given length value is incorrect.', this );\n\t\t}\n\n\t\t/**\n\t\t * Text data represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.data = textNode.data.substring( offsetInText, offsetInText + length );\n\n\t\t/**\n\t\t * Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy starts.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.offsetInText = offsetInText;\n\t}\n\n\t/**\n\t * Offset at which this text proxy starts in it's parent.\n\t *\n\t * @see module:engine/model/node~Node#startOffset\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget startOffset() {\n\t\treturn this.textNode.startOffset !== null ? this.textNode.startOffset + this.offsetInText : null;\n\t}\n\n\t/**\n\t * Offset size of this text proxy. Equal to the number of characters represented by the text proxy.\n\t *\n\t * @see module:engine/model/node~Node#offsetSize\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Offset at which this text proxy ends in it's parent.\n\t *\n\t * @see module:engine/model/node~Node#endOffset\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget endOffset() {\n\t\treturn this.startOffset !== null ? this.startOffset + this.offsetSize : null;\n\t}\n\n\t/**\n\t * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/model/text~Text text node}\n\t * (`true`) or the whole text node (`false`).\n\t *\n\t * This is `false` when text proxy starts at the very beginning of {@link module:engine/model/textproxy~TextProxy#textNode textNode}\n\t * ({@link module:engine/model/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n\t * text node size.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isPartial() {\n\t\treturn this.offsetSize !== this.textNode.offsetSize;\n\t}\n\n\t/**\n\t * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tget parent() {\n\t\treturn this.textNode.parent;\n\t}\n\n\t/**\n\t * Root of this text proxy, which is same as root of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.textNode.root;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns text node represented by this text proxy or `null` if the text node\n\t * has no parent or is inside a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this.textNode.document;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\ttextProxy.is( 'textProxy' ); // -> true\n\t *\t\ttextProxy.is( 'model:textProxy' ); // -> true\n\t *\n\t *\t\ttextProxy.is( 'view:textProxy' ); // -> false\n\t *\t\ttextProxy.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'textProxy' || type == 'model:textProxy';\n\t}\n\n\t/**\n\t * Gets path to this text proxy.\n\t *\n\t * @see module:engine/model/node~Node#getPath\n\t * @returns {Array.<Number>}\n\t */\n\tgetPath() {\n\t\tconst path = this.textNode.getPath();\n\n\t\tif ( path.length > 0 ) {\n\t\t\tpath[ path.length - 1 ] += this.offsetInText;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this text proxy.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this text proxy will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Checks if this text proxy has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on text proxy, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this.textNode.hasAttribute( key );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on text proxy.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this.textNode.getAttribute( key );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attributes. Attributes are returned as arrays containing two\n\t * items. First one is attribute key and second is attribute value.\n\t *\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this.textNode.getAttributes();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this.textNode.getAttributeKeys();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/utils\n */\n\nimport Node from '../node';\nimport Text from '../text';\nimport TextProxy from '../textproxy';\nimport Range from '../range';\nimport DocumentFragment from '../documentfragment';\nimport NodeList from '../nodelist';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Contains functions used for composing model tree by {@link module:engine/model/operation/operation~Operation operations}.\n * Those functions are built on top of {@link module:engine/model/node~Node node}, and it's child classes', APIs.\n *\n * @protected\n * @namespace utils\n */\n\n/**\n * Inserts given nodes at given position.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.insert\n * @param {module:engine/model/position~Position} position Position at which nodes should be inserted.\n * @param {module:engine/model/node~NodeSet} nodes Nodes to insert.\n * @returns {module:engine/model/range~Range} Range spanning over inserted elements.\n */\nexport function _insert( position, nodes ) {\n\tnodes = _normalizeNodes( nodes );\n\n\t// We have to count offset before inserting nodes because they can get merged and we would get wrong offsets.\n\tconst offset = nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\tconst parent = position.parent;\n\n\t// Insertion might be in a text node, we should split it if that's the case.\n\t_splitNodeAtPosition( position );\n\tconst index = position.index;\n\n\t// Insert nodes at given index. After splitting we have a proper index and insertion is between nodes,\n\t// using basic `Element` API.\n\tparent._insertChild( index, nodes );\n\n\t// Merge text nodes, if possible. Merging is needed only at points where inserted nodes \"touch\" \"old\" nodes.\n\t_mergeNodesAtIndex( parent, index + nodes.length );\n\t_mergeNodesAtIndex( parent, index );\n\n\treturn new Range( position, position.getShiftedBy( offset ) );\n}\n\n/**\n * Removed nodes in given range. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils._remove\n * @param {module:engine/model/range~Range} range Range containing nodes to remove.\n * @returns {Array.<module:engine/model/node~Node>}\n */\nexport function _remove( range ) {\n\tif ( !range.isFlat ) {\n\t\t/**\n\t\t * Trying to remove a range which starts and ends in different element.\n\t\t *\n\t\t * @error operation-utils-remove-range-not-flat\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'operation-utils-remove-range-not-flat: ' +\n\t\t\t'Trying to remove a range which starts and ends in different element.',\n\t\t\tthis\n\t\t);\n\t}\n\n\tconst parent = range.start.parent;\n\n\t// Range may be inside text nodes, we have to split them if that's the case.\n\t_splitNodeAtPosition( range.start );\n\t_splitNodeAtPosition( range.end );\n\n\t// Remove the text nodes using basic `Element` API.\n\tconst removed = parent._removeChildren( range.start.index, range.end.index - range.start.index );\n\n\t// Merge text nodes, if possible. After some nodes were removed, node before and after removed range will be\n\t// touching at the position equal to the removed range beginning. We check merging possibility there.\n\t_mergeNodesAtIndex( parent, range.start.index );\n\n\treturn removed;\n}\n\n/**\n * Moves nodes in given range to given target position. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.move\n * @param {module:engine/model/range~Range} sourceRange Range containing nodes to move.\n * @param {module:engine/model/position~Position} targetPosition Position to which nodes should be moved.\n * @returns {module:engine/model/range~Range} Range containing moved nodes.\n */\nexport function _move( sourceRange, targetPosition ) {\n\tif ( !sourceRange.isFlat ) {\n\t\t/**\n\t\t * Trying to move a range which starts and ends in different element.\n\t\t *\n\t\t * @error operation-utils-move-range-not-flat\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'operation-utils-move-range-not-flat: ' +\n\t\t\t'Trying to move a range which starts and ends in different element.',\n\t\t\tthis\n\t\t);\n\t}\n\n\tconst nodes = _remove( sourceRange );\n\n\t// We have to fix `targetPosition` because model changed after nodes from `sourceRange` got removed and\n\t// that change might have an impact on `targetPosition`.\n\ttargetPosition = targetPosition._getTransformedByDeletion( sourceRange.start, sourceRange.end.offset - sourceRange.start.offset );\n\n\treturn _insert( targetPosition, nodes );\n}\n\n/**\n * Sets given attribute on nodes in given range. The attributes are only set on top-level nodes of the range, not on its children.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils._setAttribute\n * @param {module:engine/model/range~Range} range Range containing nodes that should have the attribute set. Must be a flat range.\n * @param {String} key Key of attribute to set.\n * @param {*} value Attribute value.\n */\nexport function _setAttribute( range, key, value ) {\n\t// Range might start or end in text nodes, so we have to split them.\n\t_splitNodeAtPosition( range.start );\n\t_splitNodeAtPosition( range.end );\n\n\t// Iterate over all items in the range.\n\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t// Iterator will return `TextProxy` instances but we know that those text proxies will\n\t\t// always represent full text nodes (this is guaranteed thanks to splitting we did before).\n\t\t// So, we can operate on those text proxies' text nodes.\n\t\tconst node = item.is( 'textProxy' ) ? item.textNode : item;\n\n\t\tif ( value !== null ) {\n\t\t\tnode._setAttribute( key, value );\n\t\t} else {\n\t\t\tnode._removeAttribute( key );\n\t\t}\n\n\t\t// After attributes changing it may happen that some text nodes can be merged. Try to merge with previous node.\n\t\t_mergeNodesAtIndex( node.parent, node.index );\n\t}\n\n\t// Try to merge last changed node with it's previous sibling (not covered by the loop above).\n\t_mergeNodesAtIndex( range.end.parent, range.end.index );\n}\n\n/**\n * Normalizes given object or an array of objects to an array of {@link module:engine/model/node~Node nodes}. See\n * {@link module:engine/model/node~NodeSet NodeSet} for details on how normalization is performed.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.normalizeNodes\n * @param {module:engine/model/node~NodeSet} nodes Objects to normalize.\n * @returns {Array.<module:engine/model/node~Node>} Normalized nodes.\n */\nexport function _normalizeNodes( nodes ) {\n\tconst normalized = [];\n\n\tif ( !( nodes instanceof Array ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Convert instances of classes other than Node.\n\tfor ( let i = 0; i < nodes.length; i++ ) {\n\t\tif ( typeof nodes[ i ] == 'string' ) {\n\t\t\tnormalized.push( new Text( nodes[ i ] ) );\n\t\t} else if ( nodes[ i ] instanceof TextProxy ) {\n\t\t\tnormalized.push( new Text( nodes[ i ].data, nodes[ i ].getAttributes() ) );\n\t\t} else if ( nodes[ i ] instanceof DocumentFragment || nodes[ i ] instanceof NodeList ) {\n\t\t\tfor ( const child of nodes[ i ] ) {\n\t\t\t\tnormalized.push( child );\n\t\t\t}\n\t\t} else if ( nodes[ i ] instanceof Node ) {\n\t\t\tnormalized.push( nodes[ i ] );\n\t\t}\n\t\t// Skip unrecognized type.\n\t}\n\n\t// Merge text nodes.\n\tfor ( let i = 1; i < normalized.length; i++ ) {\n\t\tconst node = normalized[ i ];\n\t\tconst prev = normalized[ i - 1 ];\n\n\t\tif ( node instanceof Text && prev instanceof Text && _haveSameAttributes( node, prev ) ) {\n\t\t\t// Doing this instead changing `prev.data` because `data` is readonly.\n\t\t\tnormalized.splice( i - 1, 2, new Text( prev.data + node.data, prev.getAttributes() ) );\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn normalized;\n}\n\n// Checks if nodes before and after given index in given element are {@link module:engine/model/text~Text text nodes} and\n// merges them into one node if they have same attributes.\n//\n// Merging is done by removing two text nodes and inserting a new text node containing data from both merged text nodes.\n//\n// @private\n// @param {module:engine/model/element~Element} element Parent element of nodes to merge.\n// @param {Number} index Index between nodes to merge.\nfunction _mergeNodesAtIndex( element, index ) {\n\tconst nodeBefore = element.getChild( index - 1 );\n\tconst nodeAfter = element.getChild( index );\n\n\t// Check if both of those nodes are text objects with same attributes.\n\tif ( nodeBefore && nodeAfter && nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) && _haveSameAttributes( nodeBefore, nodeAfter ) ) {\n\t\t// Append text of text node after index to the before one.\n\t\tconst mergedNode = new Text( nodeBefore.data + nodeAfter.data, nodeBefore.getAttributes() );\n\n\t\t// Remove separate text nodes.\n\t\telement._removeChildren( index - 1, 2 );\n\n\t\t// Insert merged text node.\n\t\telement._insertChild( index - 1, mergedNode );\n\t}\n}\n\n// Checks if given position is in a text node, and if so, splits the text node in two text nodes, each of them\n// containing a part of original text node.\n//\n// @private\n// @param {module:engine/model/position~Position} position Position at which node should be split.\nfunction _splitNodeAtPosition( position ) {\n\tconst textNode = position.textNode;\n\tconst element = position.parent;\n\n\tif ( textNode ) {\n\t\tconst offsetDiff = position.offset - textNode.startOffset;\n\t\tconst index = textNode.index;\n\n\t\telement._removeChildren( index, 1 );\n\n\t\tconst firstPart = new Text( textNode.data.substr( 0, offsetDiff ), textNode.getAttributes() );\n\t\tconst secondPart = new Text( textNode.data.substr( offsetDiff ), textNode.getAttributes() );\n\n\t\telement._insertChild( index, [ firstPart, secondPart ] );\n\t}\n}\n\n// Checks whether two given nodes have same attributes.\n//\n// @private\n// @param {module:engine/model/node~Node} nodeA Node to check.\n// @param {module:engine/model/node~Node} nodeB Node to check.\n// @returns {Boolean} `true` if nodes have same attributes, `false` otherwise.\nfunction _haveSameAttributes( nodeA, nodeB ) {\n\tconst iteratorA = nodeA.getAttributes();\n\tconst iteratorB = nodeB.getAttributes();\n\n\tfor ( const attr of iteratorA ) {\n\t\tif ( attr[ 1 ] !== nodeB.getAttribute( attr[ 0 ] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\titeratorB.next();\n\t}\n\n\treturn iteratorB.next().done;\n}\n\n/**\n * Value that can be normalized to an array of {@link module:engine/model/node~Node nodes}.\n *\n * Non-arrays are normalized as follows:\n * * {@link module:engine/model/node~Node Node} is left as is,\n * * {@link module:engine/model/textproxy~TextProxy TextProxy} and `String` are normalized to {@link module:engine/model/text~Text Text},\n * * {@link module:engine/model/nodelist~NodeList NodeList} is normalized to an array containing all nodes that are in that node list,\n * * {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment} is normalized to an array containing all of it's\n * * children.\n *\n * Arrays are processed item by item like non-array values and flattened to one array. Normalization always results in\n * a flat array of {@link module:engine/model/node~Node nodes}. Consecutive text nodes (or items normalized to text nodes) will be\n * merged if they have same attributes.\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/textproxy~TextProxy|String|\n * module:engine/model/nodelist~NodeList|module:engine/model/documentfragment~DocumentFragment|Iterable}\n * module:engine/model/node~NodeSet\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/keystrokehandler\n */\n\nimport DomEmitterMixin from './dom/emittermixin';\nimport { getCode, parseKeystroke } from './keyboard';\n\n/**\n * Keystroke handler allows registering callbacks for given keystrokes.\n *\n * The most frequent use of this class is through the {@link module:core/editor/editor~Editor#keystrokes `editor.keystrokes`}\n * property. It allows listening to keystrokes executed in the editing view:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+A', ( keyEvtData, cancel ) => {\n *\t\t\tconsole.log( 'Ctrl+A has been pressed' );\n *\t\t\tcancel();\n *\t\t} );\n *\n * However, this utility class can be used in various part of the UI. For instance, a certain {@link module:ui/view~View}\n * can use it like this:\n *\n *\t\tclass MyView extends View {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.keystrokes = new KeystrokeHandler();\n *\n * \t\t\t\tthis.keystrokes.set( 'tab', handleTabKey );\n *\t\t\t}\n *\n *\t\t\trender() {\n *\t\t\t\tsuper.render();\n *\n *\t\t\t\tthis.keystrokes.listenTo( this.element );\n *\t\t\t}\n *\t\t}\n *\n * That keystroke handler will listen to `keydown` events fired in this view's main element.\n *\n */\nexport default class KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Listener used to listen to events for easier keystroke handler destruction.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/dom/emittermixin~Emitter}\n\t\t */\n\t\tthis._listener = Object.create( DomEmitterMixin );\n\t}\n\n\t/**\n\t * Starts listening for `keydown` events from a given emitter.\n\t *\n\t * @param {module:utils/emittermixin~Emitter} emitter\n\t */\n\tlistenTo( emitter ) {\n\t\t// The #_listener works here as a kind of dispatcher. It groups the events coming from the same\n\t\t// keystroke so the listeners can be attached to them with different priorities.\n\t\t//\n\t\t// E.g. all the keystrokes with the `keyCode` of 42 coming from the `emitter` are propagated\n\t\t// as a `_keydown:42` event by the `_listener`. If there's a callback created by the `set`\n\t\t// method for this 42 keystroke, it listens to the `_listener#_keydown:42` event only and interacts\n\t\t// only with other listeners of this particular event, thus making it possible to prioritize\n\t\t// the listeners and safely cancel execution, when needed. Instead of duplicating the Emitter logic,\n\t\t// the KeystrokeHandler re–uses it to do its job.\n\t\tthis._listener.listenTo( emitter, 'keydown', ( evt, keyEvtData ) => {\n\t\t\tthis._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t\t} );\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function} callback A function called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a helper funcion to call both `preventDefault()` and `stopPropagation()` on the underlying event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tconst keyCode = parseKeystroke( keystroke );\n\t\tconst priority = options.priority;\n\n\t\t// Execute the passed callback on KeystrokeHandler#_keydown.\n\t\t// TODO: https://github.com/ckeditor/ckeditor5-utils/issues/144\n\t\tthis._listener.listenTo( this._listener, '_keydown:' + keyCode, ( evt, keyEvtData ) => {\n\t\t\tcallback( keyEvtData, () => {\n\t\t\t\t// Stop the event in the DOM: no listener in the web page\n\t\t\t\t// will be triggered by this event.\n\t\t\t\tkeyEvtData.preventDefault();\n\t\t\t\tkeyEvtData.stopPropagation();\n\n\t\t\t\t// Stop the event in the KeystrokeHandler: no more callbacks\n\t\t\t\t// will be executed for this keystroke.\n\t\t\t\tevt.stop();\n\t\t\t} );\n\n\t\t\t// Mark this keystroke as handled by the callback. See: #press.\n\t\t\tevt.return = true;\n\t\t}, { priority } );\n\t}\n\n\t/**\n\t * Triggers a keystroke handler for a specified key combination, if such a keystroke was {@link #set defined}.\n\t *\n\t * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEvtData Key event data.\n\t * @returns {Boolean} Whether the keystroke was handled.\n\t */\n\tpress( keyEvtData ) {\n\t\treturn !!this._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t}\n\n\t/**\n\t * Destroys the keystroke handler.\n\t */\n\tdestroy() {\n\t\tthis._listener.stopListening();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/first\n */\n\n/**\n * Returns first item of the given `iterable`.\n *\n * @param {Iterable.<*>} iterable\n * @returns {*}\n */\nexport default function first( iterable ) {\n\tconst iteratorItem = iterable.next();\n\n\tif ( iteratorItem.done ) {\n\t\treturn null;\n\t}\n\n\treturn iteratorItem.value;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/insertoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport NodeList from '../nodelist';\nimport MoveOperation from './moveoperation';\nimport { _insert, _normalizeNodes } from './utils';\nimport Text from '../text';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to insert one or more nodes at given position in the model.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class InsertOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of insertion.\n\t * @param {module:engine/model/node~NodeSet} nodes The list of nodes to be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, nodes, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position of insertion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/insertoperation~InsertOperation#position\n\t\t */\n\t\tthis.position = position.clone();\n\t\tthis.position.stickiness = 'toNone';\n\n\t\t/**\n\t\t * List of nodes to insert.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/operation/insertoperation~InsertOperation#nodeList\n\t\t */\n\t\tthis.nodes = new NodeList( _normalizeNodes( nodes ) );\n\n\t\t/**\n\t\t * Flag deciding how the operation should be transformed. If set to `true`, nodes might get additional attributes\n\t\t * during operational transformation. This happens when the operation insertion position is inside of a range\n\t\t * where attributes have changed.\n\t\t *\n\t\t * @member {Boolean} module:engine/model/operation/insertoperation~InsertOperation#shouldReceiveAttributes\n\t\t */\n\t\tthis.shouldReceiveAttributes = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'insert';\n\t}\n\n\t/**\n\t * Total offset size of inserted nodes.\n\t *\n\t * @returns {Number}\n\t */\n\tget howMany() {\n\t\treturn this.nodes.maxOffset;\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst nodes = new NodeList( [ ...this.nodes ].map( node => node._clone( true ) ) );\n\t\tconst insert = new InsertOperation( this.position, nodes, this.baseVersion );\n\n\t\tinsert.shouldReceiveAttributes = this.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.position.root.document.graveyard;\n\t\tconst gyPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MoveOperation( this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst targetElement = this.position.parent;\n\n\t\tif ( !targetElement || targetElement.maxOffset < this.position.offset ) {\n\t\t\t/**\n\t\t\t * Insertion position is invalid.\n\t\t\t *\n\t\t\t * @error insert-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insert-operation-position-invalid: Insertion position is invalid.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// What happens here is that we want original nodes be passed to writer because we want original nodes\n\t\t// to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n\t\t// to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n\t\t// get children. It is important that InsertOperation has the copy of original nodes in intact state.\n\t\tconst originalNodes = this.nodes;\n\t\tthis.nodes = new NodeList( [ ...originalNodes ].map( node => node._clone( true ) ) );\n\n\t\t_insert( this.position, originalNodes );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\t\tjson.nodes = this.nodes.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'InsertOperation';\n\t}\n\n\t/**\n\t * Creates `InsertOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json.nodes ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\tconst insert = new InsertOperation( Position.fromJSON( json.position, document ), children, json.baseVersion );\n\t\tinsert.shouldReceiveAttributes = json.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/selection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Range from './range';\nimport Position from './position';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport Node from './node';\nimport Element from './element';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport DocumentSelection from './documentselection';\n\n/**\n * Class representing an arbirtary selection in the view.\n * See also {@link module:engine/view/documentselection~DocumentSelection}.\n *\n * New selection instances can be created via the constructor or one these methods:\n *\n * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n *\n * A selection can consist of {@link module:engine/view/range~Range ranges} that can be set by using\n * the {@link module:engine/view/selection~Selection#setTo `Selection#setTo()`} method.\n */\nexport default class Selection {\n\t/**\n\t * Creates new selection instance.\n\t *\n\t * **Note**: The selection constructor is available as a factory method:\n\t *\n\t * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n\t * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tconstructor( selectable = null, placeOrOffset, options ) {\n\t\t/**\n\t\t * Stores all ranges that are selected.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Specifies whether selection instance is fake.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isFake = false;\n\n\t\t/**\n\t\t * Fake selection's label.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._fakeSelectionLabel = '';\n\n\t\tthis.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Returns true if selection instance is marked as `fake`.\n\t *\n\t * @see #setTo\n\t * @returns {Boolean}\n\t */\n\tget isFake() {\n\t\treturn this._isFake;\n\t}\n\n\t/**\n\t * Returns fake selection label.\n\t *\n\t * @see #setTo\n\t * @returns {String}\n\t */\n\tget fakeSelectionLabel() {\n\t\treturn this._fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n\t * {@link #focus focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n\t * It may be a bit unintuitive when there are multiple ranges in selection.\n\t *\n\t * @see #focus\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget anchor() {\n\t\tif ( !this._ranges.length ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\t\tconst anchor = this._lastRangeBackward ? range.end : range.start;\n\n\t\treturn anchor.clone();\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * @see #anchor\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget focus() {\n\t\tif ( !this._ranges.length ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\t\tconst focus = this._lastRangeBackward ? range.start : range.end;\n\n\t\treturn focus.clone();\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.rangeCount === 1 && this._ranges[ 0 ].isCollapsed;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus} precedes {@link #anchor}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n\t * if the selection is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tif ( this.anchor ) {\n\t\t\treturn this.anchor.editableElement;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns an iterable that contains copies of all ranges added to the selection.\n\t *\n\t * @returns {Iterable.<module:engine/view/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield range.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Returns copy of the first range in the selection. First range is the one which\n\t * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n\t * position of all other ranges (not to confuse with the first range added to the selection).\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? first.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n\t * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n\t * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? last.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the first position in the selection. First position is the position that\n\t * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst firstRange = this.getFirstRange();\n\n\t\treturn firstRange ? firstRange.start.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the last position in the selection. Last position is the position that\n\t * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? lastRange.end.clone() : null;\n\t}\n\n\t/**\n\t * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n\t * same number of ranges and all ranges from one selection equal to a range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.isFake != otherSelection.isFake ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isFake && this.fakeSelectionLabel != otherSelection.fakeSelectionLabel ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n\t * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n\t * equal to any trimmed range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n\t */\n\tisSimilar( otherSelection ) {\n\t\tif ( this.isBackward != otherSelection.isBackward ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst numOfRangesA = count( this.getRanges() );\n\t\tconst numOfRangesB = count( otherSelection.getRanges() );\n\n\t\t// If selections have different number of ranges, they cannot be similar.\n\t\tif ( numOfRangesA != numOfRangesB ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If both selections have no ranges, they are similar.\n\t\tif ( numOfRangesA == 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check if each range in one selection has a similar range in other selection.\n\t\tfor ( let rangeA of this.getRanges() ) {\n\t\t\trangeA = rangeA.getTrimmed();\n\n\t\t\tlet found = false;\n\n\t\t\tfor ( let rangeB of otherSelection.getRanges() ) {\n\t\t\t\trangeB = rangeB.getTrimmed();\n\n\t\t\t\tif ( rangeA.start.isEqual( rangeB.start ) && rangeA.end.isEqual( rangeB.end ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For `rangeA`, neither range in `otherSelection` was similar. So selections are not similar.\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// There were no ranges that weren't matched. Selections are similar.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/view/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = this.getFirstRange();\n\n\t\tlet nodeAfterStart = range.start.nodeAfter;\n\t\tlet nodeBeforeEnd = range.end.nodeBefore;\n\n\t\t// Handle the situation when selection position is at the beginning / at the end of a text node.\n\t\t// In such situation `.nodeAfter` and `.nodeBefore` are `null` but the selection still might be spanning\n\t\t// over one element.\n\t\t//\n\t\t// <p>Foo{<span class=\"widget\"></span>}bar</p> vs <p>Foo[<span class=\"widget\"></span>]bar</p>\n\t\t//\n\t\t// These are basically the same selections, only the difference is if the selection position is at\n\t\t// at the end/at the beginning of a text node or just before/just after the text node.\n\t\t//\n\t\tif ( range.start.parent.is( 'text' ) && range.start.isAtEnd && range.start.parent.nextSibling ) {\n\t\t\tnodeAfterStart = range.start.parent.nextSibling;\n\t\t}\n\n\t\tif ( range.end.parent.is( 'text' ) && range.end.isAtStart && range.end.parent.previousSibling ) {\n\t\t\tnodeBeforeEnd = range.end.parent.previousSibling;\n\t\t}\n\n\t\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t *\t \t// Sets selection to contents of DocumentSelection.\n\t *\t\tselection.setTo( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t *\t\tselection.setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tselection.setTo( paragraph, 'on' );\n\t *\n\t * \t\t// Clears selection. Removes all ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t * `Selection#setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\tselection.setTo( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tselection.setTo( range, { fake: true, label: 'foo' } );\n\t *\n\t * @fires change\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tsetTo( selectable, placeOrOffset, options ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Selection || selectable instanceof DocumentSelection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t\tthis._setFakeOptions( { fake: selectable.isFake, label: selectable.fakeSelectionLabel } );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], placeOrOffset && placeOrOffset.backward );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Node ) {\n\t\t\tconst backward = !!options && !!options.backward;\n\t\t\tlet range;\n\n\t\t\tif ( placeOrOffset === undefined ) {\n\t\t\t\t/**\n\t\t\t\t * selection.setTo requires the second parameter when the first parameter is a node.\n\t\t\t\t *\n\t\t\t\t * @error view-selection-setTo-required-second-parameter\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-selection-setTo-required-second-parameter: ' +\n\t\t\t\t\t'selection.setTo requires the second parameter when the first parameter is a node.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t} else if ( placeOrOffset == 'in' ) {\n\t\t\t\trange = Range._createIn( selectable );\n\t\t\t} else if ( placeOrOffset == 'on' ) {\n\t\t\t\trange = Range._createOn( selectable );\n\t\t\t} else {\n\t\t\t\trange = new Range( Position._createAt( selectable, placeOrOffset ) );\n\t\t\t}\n\n\t\t\tthis._setRanges( [ range ], backward );\n\t\t\tthis._setFakeOptions( options );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\t// Array.from() is used to prevent setting ranges to the old iterable\n\t\t\tthis._setRanges( selectable, placeOrOffset && placeOrOffset.backward );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set selection to given place.\n\t\t\t *\n\t\t\t * @error view-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-selection-setTo-not-selectable: Cannot set selection to given place.', this );\n\t\t}\n\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Moves {@link #focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @fires change\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error view-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tthis._ranges.pop();\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._addRange( new Range( newFocus, anchor ), true );\n\t\t} else {\n\t\t\tthis._addRange( new Range( anchor, newFocus ) );\n\t\t}\n\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'view:selection' ); // -> true\n\t *\n\t *\t\tselection.is( 'model:selection' ); // -> false\n\t *\t\tselection.is( 'element' ); // -> false\n\t *\t\tselection.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' || type == 'view:selection';\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link #anchor anchor} and {@link #focus focus}.\n\t * Accepts a flag describing in which way the selection is made.\n\t *\n\t * @private\n\t * @param {Iterable.<module:engine/view/range~Range>} newRanges Iterable object of ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end\n\t * (`false`) or backward - from end to start (`true`). Defaults to `false`.\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\t// New ranges should be copied to prevent removing them by setting them to `[]` first.\n\t\t// Only applies to situations when selection is set to the same selection or same selection's ranges.\n\t\tnewRanges = Array.from( newRanges );\n\n\t\tthis._ranges = [];\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._addRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\t}\n\n\t/**\n\t * Sets this selection instance to be marked as `fake`. A fake selection does not render as browser native selection\n\t * over selected elements and is hidden to the user. This way, no native selection UI artifacts are displayed to\n\t * the user and selection over elements can be represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM (and be\n\t * properly handled by screen readers).\n\t *\n\t * @private\n\t * @param {Object} [options] Options.\n\t * @param {Boolean} [options.fake] If set to true selection will be marked as `fake`.\n\t * @param {String} [options.label=''] Fake selection label.\n\t */\n\t_setFakeOptions( options = {} ) {\n\t\tthis._isFake = !!options.fake;\n\t\tthis._fakeSelectionLabel = options.fake ? options.label || '' : '';\n\t}\n\n\t/**\n\t * Adds a range to the selection. Added range is copied. This means that passed range is not saved in the\n\t * selection instance and you can safely operate on it.\n\t *\n\t * Accepts a flag describing in which way the selection is made - passed range might be selected from\n\t * {@link module:engine/view/range~Range#start start} to {@link module:engine/view/range~Range#end end}\n\t * or from {@link module:engine/view/range~Range#end end} to {@link module:engine/view/range~Range#start start}.\n\t * The flag is used to set {@link #anchor anchor} and {@link #focus focus} properties.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n\t * with ranges already stored in Selection instance.\n\t *\n\t * @private\n\t * @fires change\n\t * @param {module:engine/view/range~Range} range\n\t * @param {Boolean} [isBackward]\n\t */\n\t_addRange( range, isBackward = false ) {\n\t\tif ( !( range instanceof Range ) ) {\n\t\t\t/**\n\t\t\t * Selection range set to an object that is not an instance of {@link module:engine/view/range~Range}.\n\t\t\t *\n\t\t\t * @error view-selection-add-range-not-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-selection-add-range-not-range: ' +\n\t\t\t\t'Selection range set to an object that is not an instance of view.Range',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tthis._pushRange( range );\n\t\tthis._lastRangeBackward = !!isBackward;\n\t}\n\n\t/**\n\t * Adds range to selection - creates copy of given range so it can be safely used and modified.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n\t * with ranges already stored in selection instance.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t */\n\t_pushRange( range ) {\n\t\tfor ( const storedRange of this._ranges ) {\n\t\t\tif ( range.isIntersecting( storedRange ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range from selection.\n\t\t\t\t *\n\t\t\t\t * @error view-selection-range-intersects\n\t\t\t\t * @param {module:engine/view/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/view/range~Range} intersectingRange Range from selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-selection-range-intersects: Trying to add a range that intersects with another range from selection.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ addedRange: range, intersectingRange: storedRange }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._ranges.push( new Range( range.start, range.end ) );\n\t}\n\n\t/**\n\t * Fired whenever selection ranges are changed through {@link ~Selection Selection API}.\n\t *\n\t * @event change\n\t */\n}\n\nmix( Selection, EmitterMixin );\n\n/**\n * An entity that is used to set selection.\n *\n * See also {@link module:engine/view/selection~Selection#setTo}\n *\n * @typedef {\n *    module:engine/view/selection~Selection|\n *    module:engine/view/documentselection~DocumentSelection|\n *    module:engine/view/position~Position|\n *    Iterable.<module:engine/view/range~Range>|\n *    module:engine/view/range~Range|\n *    module:engine/view/item~Item|\n *    null\n * } module:engine/view/selection~Selectable\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/rect\n */\n\nimport isRange from './isrange';\nimport isWindow from './iswindow';\nimport getBorderWidths from './getborderwidths';\nimport isText from './istext';\nimport { isElement } from 'lodash-es';\n\nconst rectProperties = [ 'top', 'right', 'bottom', 'left', 'width', 'height' ];\n\n/**\n * A helper class representing a `ClientRect` object, e.g. value returned by\n * the native `object.getBoundingClientRect()` method. Provides a set of methods\n * to manipulate the rect and compare it against other rect instances.\n */\nexport default class Rect {\n\t/**\n\t * Creates an instance of rect.\n\t *\n\t *\t\t// Rect of an HTMLElement.\n\t *\t\tconst rectA = new Rect( document.body );\n\t *\n\t *\t\t// Rect of a DOM Range.\n\t *\t\tconst rectB = new Rect( document.getSelection().getRangeAt( 0 ) );\n\t *\n\t *\t\t// Rect of a window (web browser viewport).\n\t *\t\tconst rectC = new Rect( window );\n\t *\n\t *\t\t// Rect out of an object.\n\t *\t\tconst rectD = new Rect( { top: 0, right: 10, bottom: 10, left: 0, width: 10, height: 10 } );\n\t *\n\t *\t\t// Rect out of another Rect instance.\n\t *\t\tconst rectE = new Rect( rectD );\n\t *\n\t *\t\t// Rect out of a ClientRect.\n\t *\t\tconst rectF = new Rect( document.body.getClientRects().item( 0 ) );\n\t *\n\t * **Note**: By default a rect of an HTML element includes its CSS borders and scrollbars (if any)\n\t * ant the rect of a `window` includes scrollbars too. Use {@link #excludeScrollbarsAndBorders}\n\t * to get the inner part of the rect.\n\t *\n\t * @param {HTMLElement|Range|Window|ClientRect|module:utils/dom/rect~Rect|Object} source A source object to create the rect.\n\t */\n\tconstructor( source ) {\n\t\tconst isSourceRange = isRange( source );\n\n\t\t/**\n\t\t * The object this rect is for.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {HTMLElement|Range|ClientRect|module:utils/dom/rect~Rect|Object} #_source\n\t\t */\n\t\tObject.defineProperty( this, '_source', {\n\t\t\t// If the source is a Rect instance, copy it's #_source.\n\t\t\tvalue: source._source || source,\n\t\t\twritable: true,\n\t\t\tenumerable: false\n\t\t} );\n\n\t\tif ( isElement( source ) || isSourceRange ) {\n\t\t\t// The `Rect` class depends on `getBoundingClientRect` and `getClientRects` DOM methods. If the source\n\t\t\t// of a rect in an HTML element or a DOM range but it does not belong to any rendered DOM tree, these methods\n\t\t\t// will fail to obtain the geometry and the rect instance makes little sense to the features using it.\n\t\t\t// To get rid of this warning make sure the source passed to the constructor is a descendant of `window.document.body`.\n\t\t\t// @if CK_DEBUG // const sourceNode = isSourceRange ? source.startContainer : source;\n\t\t\t// @if CK_DEBUG // if ( !sourceNode.ownerDocument || !sourceNode.ownerDocument.body.contains( sourceNode ) ) {\n\t\t\t// @if CK_DEBUG // \tconsole.warn(\n\t\t\t// @if CK_DEBUG // \t\t'rect-source-not-in-dom: The source of this rect does not belong to any rendered DOM tree.',\n\t\t\t// @if CK_DEBUG // \t\t{ source } );\n\t\t\t// @if CK_DEBUG // }\n\n\t\t\tif ( isSourceRange ) {\n\t\t\t\tcopyRectProperties( this, Rect.getDomRangeRects( source )[ 0 ] );\n\t\t\t} else {\n\t\t\t\tcopyRectProperties( this, source.getBoundingClientRect() );\n\t\t\t}\n\t\t} else if ( isWindow( source ) ) {\n\t\t\tconst { innerWidth, innerHeight } = source;\n\n\t\t\tcopyRectProperties( this, {\n\t\t\t\ttop: 0,\n\t\t\t\tright: innerWidth,\n\t\t\t\tbottom: innerHeight,\n\t\t\t\tleft: 0,\n\t\t\t\twidth: innerWidth,\n\t\t\t\theight: innerHeight\n\t\t\t} );\n\t\t} else {\n\t\t\tcopyRectProperties( this, source );\n\t\t}\n\n\t\t/**\n\t\t * The \"top\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #top\n\t\t */\n\n\t\t/**\n\t\t * The \"right\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #right\n\t\t */\n\n\t\t/**\n\t\t * The \"bottom\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #bottom\n\t\t */\n\n\t\t/**\n\t\t * The \"left\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #left\n\t\t */\n\n\t\t/**\n\t\t * The \"width\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #width\n\t\t */\n\n\t\t/**\n\t\t * The \"height\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #height\n\t\t */\n\t}\n\n\t/**\n\t * Returns a clone of the rect.\n\t *\n\t * @returns {module:utils/dom/rect~Rect} A cloned rect.\n\t */\n\tclone() {\n\t\treturn new Rect( this );\n\t}\n\n\t/**\n\t * Moves the rect so that its upper–left corner lands in desired `[ x, y ]` location.\n\t *\n\t * @param {Number} x Desired horizontal location.\n\t * @param {Number} y Desired vertical location.\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\n\t */\n\tmoveTo( x, y ) {\n\t\tthis.top = y;\n\t\tthis.right = x + this.width;\n\t\tthis.bottom = y + this.height;\n\t\tthis.left = x;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves the rect in–place by a dedicated offset.\n\t *\n\t * @param {Number} x A horizontal offset.\n\t * @param {Number} y A vertical offset\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\n\t */\n\tmoveBy( x, y ) {\n\t\tthis.top += y;\n\t\tthis.right += x;\n\t\tthis.left += x;\n\t\tthis.bottom += y;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a new rect a a result of intersection with another rect.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect\n\t * @returns {module:utils/dom/rect~Rect}\n\t */\n\tgetIntersection( anotherRect ) {\n\t\tconst rect = {\n\t\t\ttop: Math.max( this.top, anotherRect.top ),\n\t\t\tright: Math.min( this.right, anotherRect.right ),\n\t\t\tbottom: Math.min( this.bottom, anotherRect.bottom ),\n\t\t\tleft: Math.max( this.left, anotherRect.left )\n\t\t};\n\n\t\trect.width = rect.right - rect.left;\n\t\trect.height = rect.bottom - rect.top;\n\n\t\tif ( rect.width < 0 || rect.height < 0 ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn new Rect( rect );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the area of intersection with another rect.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect [description]\n\t * @returns {Number} Area of intersection.\n\t */\n\tgetIntersectionArea( anotherRect ) {\n\t\tconst rect = this.getIntersection( anotherRect );\n\n\t\tif ( rect ) {\n\t\t\treturn rect.getArea();\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the area of the rect.\n\t *\n\t * @returns {Number}\n\t */\n\tgetArea() {\n\t\treturn this.width * this.height;\n\t}\n\n\t/**\n\t * Returns a new rect, a part of the original rect, which is actually visible to the user,\n\t * e.g. an original rect cropped by parent element rects which have `overflow` set in CSS\n\t * other than `\"visible\"`.\n\t *\n\t * If there's no such visible rect, which is when the rect is limited by one or many of\n\t * the ancestors, `null` is returned.\n\t *\n\t * @returns {module:utils/dom/rect~Rect|null} A visible rect instance or `null`, if there's none.\n\t */\n\tgetVisible() {\n\t\tconst source = this._source;\n\t\tlet visibleRect = this.clone();\n\n\t\t// There's no ancestor to crop <body> with the overflow.\n\t\tif ( !isBody( source ) ) {\n\t\t\tlet parent = source.parentNode || source.commonAncestorContainer;\n\n\t\t\t// Check the ancestors all the way up to the <body>.\n\t\t\twhile ( parent && !isBody( parent ) ) {\n\t\t\t\tconst parentRect = new Rect( parent );\n\t\t\t\tconst intersectionRect = visibleRect.getIntersection( parentRect );\n\n\t\t\t\tif ( intersectionRect ) {\n\t\t\t\t\tif ( intersectionRect.getArea() < visibleRect.getArea() ) {\n\t\t\t\t\t\t// Reduce the visible rect to the intersection.\n\t\t\t\t\t\tvisibleRect = intersectionRect;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// There's no intersection, the rect is completely invisible.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tparent = parent.parentNode;\n\t\t\t}\n\t\t}\n\n\t\treturn visibleRect;\n\t}\n\n\t/**\n\t * Checks if all property values ({@link #top}, {@link #left}, {@link #right},\n\t * {@link #bottom}, {@link #width} and {@link #height}) are the equal in both rect\n\t * instances.\n\t *\n\t * @param {module:utils/dom/rect~Rect} rect A rect instance to compare with.\n\t * @returns {Boolean} `true` when Rects are equal. `false` otherwise.\n\t */\n\tisEqual( anotherRect ) {\n\t\tfor ( const prop of rectProperties ) {\n\t\t\tif ( this[ prop ] !== anotherRect[ prop ] ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether a rect fully contains another rect instance.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect\n\t * @returns {Boolean} `true` if contains, `false` otherwise.\n\t */\n\tcontains( anotherRect ) {\n\t\tconst intersectRect = this.getIntersection( anotherRect );\n\n\t\treturn !!( intersectRect && intersectRect.isEqual( anotherRect ) );\n\t}\n\n\t/**\n\t * Excludes scrollbars and CSS borders from the rect.\n\t *\n\t * * Borders are removed when {@link #_source} is an HTML element.\n\t * * Scrollbars are excluded from HTML elements and the `window`.\n\t *\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been updated.\n\t */\n\texcludeScrollbarsAndBorders() {\n\t\tconst source = this._source;\n\t\tlet scrollBarWidth, scrollBarHeight;\n\n\t\tif ( isWindow( source ) ) {\n\t\t\tscrollBarWidth = source.innerWidth - source.document.documentElement.clientWidth;\n\t\t\tscrollBarHeight = source.innerHeight - source.document.documentElement.clientHeight;\n\t\t} else {\n\t\t\tconst borderWidths = getBorderWidths( this._source );\n\n\t\t\tscrollBarWidth = source.offsetWidth - source.clientWidth;\n\t\t\tscrollBarHeight = source.offsetHeight - source.clientHeight;\n\n\t\t\tthis.moveBy( borderWidths.left, borderWidths.top );\n\t\t}\n\n\t\t// Assuming LTR scrollbars. TODO: RTL.\n\t\tthis.width -= scrollBarWidth;\n\t\tthis.right -= scrollBarWidth;\n\n\t\tthis.height -= scrollBarHeight;\n\t\tthis.bottom -= scrollBarHeight;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns an array of rects of the given native DOM Range.\n\t *\n\t * @param {Range} range A native DOM range.\n\t * @returns {Array.<module:utils/dom/rect~Rect>} DOM Range rects.\n\t */\n\tstatic getDomRangeRects( range ) {\n\t\tconst rects = [];\n\t\t// Safari does not iterate over ClientRectList using for...of loop.\n\t\tconst clientRects = Array.from( range.getClientRects() );\n\n\t\tif ( clientRects.length ) {\n\t\t\tfor ( const rect of clientRects ) {\n\t\t\t\trects.push( new Rect( rect ) );\n\t\t\t}\n\t\t}\n\t\t// If there's no client rects for the Range, use parent container's bounding rect\n\t\t// instead and adjust rect's width to simulate the actual geometry of such range.\n\t\t// https://github.com/ckeditor/ckeditor5-utils/issues/153\n\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/317\n\t\telse {\n\t\t\tlet startContainer = range.startContainer;\n\n\t\t\tif ( isText( startContainer ) ) {\n\t\t\t\tstartContainer = startContainer.parentNode;\n\t\t\t}\n\n\t\t\tconst rect = new Rect( startContainer.getBoundingClientRect() );\n\t\t\trect.right = rect.left;\n\t\t\trect.width = 0;\n\n\t\t\trects.push( rect );\n\t\t}\n\n\t\treturn rects;\n\t}\n}\n\n// Acquires all the rect properties from the passed source.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} rect\n// @param {ClientRect|module:utils/dom/rect~Rect|Object} source\nfunction copyRectProperties( rect, source ) {\n\tfor ( const p of rectProperties ) {\n\t\trect[ p ] = source[ p ];\n\t}\n}\n\n// Checks if provided object is a <body> HTML element.\n//\n// @private\n// @param {HTMLElement|Range} elementOrRange\n// @returns {Boolean}\nfunction isBody( elementOrRange ) {\n\tif ( !isElement( elementOrRange ) ) {\n\t\treturn false;\n\t}\n\n\treturn elementOrRange === elementOrRange.ownerDocument.body;\n}\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/observer\n */\n\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Abstract base observer class. Observers are classes which listen to DOM events, do the preliminary\n * processing and fire events on the {@link module:engine/view/document~Document} objects.\n * Observers can also add features to the view, for instance by updating its status or marking elements\n * which need refresh on DOM events.\n *\n * @abstract\n */\nexport default class Observer {\n\t/**\n\t * Creates an instance of the observer.\n\t *\n\t * @param {module:engine/view/view~View} view\n\t */\n\tconstructor( view ) {\n\t\t/**\n\t\t * Instance of the view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/document~Document} object.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = view.document;\n\n\t\t/**\n\t\t * State of the observer. If it is disabled events will not be fired.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.isEnabled = false;\n\t}\n\n\t/**\n\t * Enables the observer. This method is called when the observer is registered to the\n\t * {@link module:engine/view/view~View} and after {@link module:engine/view/view~View#forceRender rendering}\n\t * (all observers are {@link #disable disabled} before rendering).\n\t *\n\t * A typical use case for disabling observers is that mutation observers need to be disabled for the rendering.\n\t * However, a child class may not need to be disabled, so it can implement an empty method.\n\t *\n\t * @see module:engine/view/observer/observer~Observer#disable\n\t */\n\tenable() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Disables the observer. This method is called before\n\t * {@link module:engine/view/view~View#forceRender rendering} to prevent firing events during rendering.\n\t *\n\t * @see module:engine/view/observer/observer~Observer#enable\n\t */\n\tdisable() {\n\t\tthis.isEnabled = false;\n\t}\n\n\t/**\n\t * Disables and destroys the observer, among others removes event listeners created by the observer.\n\t */\n\tdestroy() {\n\t\tthis.disable();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Starts observing the given root element.\n\t *\n\t * @method #observe\n\t * @param {HTMLElement} domElement\n\t * @param {String} name The name of the root element.\n\t */\n}\n\nmix( Observer, DomEmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/treewalker\n */\n\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Element from './element';\nimport Position from './position';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n\t/**\n\t * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n\t *\n\t * @constructor\n\t * @param {Object} [options={}] Object with configuration.\n\t * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\n\t * @param {module:engine/model/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {module:engine/model/position~Position} [options.startPosition] Starting position.\n\t * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all consecutive characters with the same attributes\n\t * should be returned one by one as multiple {@link module:engine/model/textproxy~TextProxy} (`true`) objects or as one\n\t * {@link module:engine/model/textproxy~TextProxy} (`false`).\n\t * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\n\t * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\n\t * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\n\t * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\n\t * each {@link module:engine/model/element~Element} will be returned once, while if the option is `false` they might be returned\n\t * twice: for `'elementStart'` and `'elementEnd'`.\n\t */\n\tconstructor( options = {} ) {\n\t\tif ( !options.boundaries && !options.startPosition ) {\n\t\t\t/**\n\t\t\t * Neither boundaries nor starting position of a `TreeWalker` have been defined.\n\t\t\t *\n\t\t\t * @error model-tree-walker-no-start-position\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.',\n\t\t\t\tnull\n\t\t\t);\n\t\t}\n\n\t\tconst direction = options.direction || 'forward';\n\n\t\tif ( direction != 'forward' && direction != 'backward' ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.',\n\t\t\t\toptions,\n\t\t\t\t{ direction }\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Walking direction. Defaults `'forward'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'backward'|'forward'} module:engine/model/treewalker~TreeWalker#direction\n\t\t */\n\t\tthis.direction = direction;\n\n\t\t/**\n\t\t * Iterator boundaries.\n\t\t *\n\t\t * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\n\t\t * on the start of boundary, then `{ done: true }` is returned.\n\t\t *\n\t\t * If boundaries are not defined they are set before first and after last child of the root node.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range} module:engine/model/treewalker~TreeWalker#boundaries\n\t\t */\n\t\tthis.boundaries = options.boundaries || null;\n\n\t\t/**\n\t\t * Iterator position. This is always static position, even if the initial position was a\n\t\t * {@link module:engine/model/liveposition~LivePosition live position}. If start position is not defined then position depends\n\t\t * on {@link #direction}. If direction is `'forward'` position starts form the beginning, when direction\n\t\t * is `'backward'` position starts from the end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/treewalker~TreeWalker#position\n\t\t */\n\t\tif ( options.startPosition ) {\n\t\t\tthis.position = options.startPosition.clone();\n\t\t} else {\n\t\t\tthis.position = Position._createAt( this.boundaries[ this.direction == 'backward' ? 'end' : 'start' ] );\n\t\t}\n\n\t\t// Reset position stickiness in case it was set to other value, as the stickiness is kept after cloning.\n\t\tthis.position.stickiness = 'toNone';\n\n\t\t/**\n\t\t * Flag indicating whether all consecutive characters with the same attributes should be\n\t\t * returned as one {@link module:engine/model/textproxy~TextProxy} (`true`) or one by one (`false`).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#singleCharacters\n\t\t */\n\t\tthis.singleCharacters = !!options.singleCharacters;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\n\t\t * iterated node will not be returned along with `elementEnd` tag.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#shallow\n\t\t */\n\t\tthis.shallow = !!options.shallow;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should ignore `elementEnd` tags. If the option is true walker will not\n\t\t * return a parent node of the start position. If this option is `true` each {@link module:engine/model/element~Element} will\n\t\t * be returned once, while if the option is `false` they might be returned twice:\n\t\t * for `'elementStart'` and `'elementEnd'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#ignoreElementEnd\n\t\t */\n\t\tthis.ignoreElementEnd = !!options.ignoreElementEnd;\n\n\t\t/**\n\t\t * Start boundary cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryStartParent\n\t\t */\n\t\tthis._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n\n\t\t/**\n\t\t * End boundary cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryEndParent\n\t\t */\n\t\tthis._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n\n\t\t/**\n\t\t * Parent of the most recently visited node. Cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t\t * module:engine/model/treewalker~TreeWalker#_visitedParent\n\t\t */\n\t\tthis._visitedParent = this.position.parent;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n\t *\n\t * For example:\n\t *\n\t * \t\twalker.skip( value => value.type == 'text' ); // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n\t * \t\twalker.skip( () => true ); // Move the position to the end: <paragraph>[]foo</paragraph> -> <paragraph>foo</paragraph>[]\n\t * \t\twalker.skip( () => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t */\n\tskip( skip ) {\n\t\tlet done, value, prevPosition, prevVisitedParent;\n\n\t\tdo {\n\t\t\tprevPosition = this.position;\n\t\t\tprevVisitedParent = this._visitedParent;\n\n\t\t\t( { done, value } = this.next() );\n\t\t} while ( !done && skip( value ) );\n\n\t\tif ( !done ) {\n\t\t\tthis.position = prevPosition;\n\t\t\tthis._visitedParent = prevVisitedParent;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the next tree walker's value.\n\t *\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} Next tree walker's value.\n\t */\n\tnext() {\n\t\tif ( this.direction == 'forward' ) {\n\t\t\treturn this._next();\n\t\t} else {\n\t\t\treturn this._previous();\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step forward in model. Moves the {@link #position} to the next position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_next() {\n\t\tconst previousPosition = this.position;\n\t\tconst position = this.position.clone();\n\t\tconst parent = this._visitedParent;\n\n\t\t// We are at the end of the root.\n\t\tif ( parent.parent === null && position.offset === parent.maxOffset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\tconst node = position.textNode ? position.textNode : position.nodeAfter;\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\t// Manual operations on path internals for optimization purposes. Here and in the rest of the method.\n\t\t\t\tposition.path.push( 0 );\n\t\t\t\tthis._visitedParent = node;\n\t\t\t} else {\n\t\t\t\tposition.offset++;\n\t\t\t}\n\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t} else if ( node instanceof Text ) {\n\t\t\tlet charactersCount;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tcharactersCount = 1;\n\t\t\t} else {\n\t\t\t\tlet offset = node.endOffset;\n\n\t\t\t\tif ( this._boundaryEndParent == parent && this.boundaries.end.offset < offset ) {\n\t\t\t\t\toffset = this.boundaries.end.offset;\n\t\t\t\t}\n\n\t\t\t\tcharactersCount = offset - position.offset;\n\t\t\t}\n\n\t\t\tconst offsetInTextNode = position.offset - node.startOffset;\n\t\t\tconst item = new TextProxy( node, offsetInTextNode, charactersCount );\n\n\t\t\tposition.offset += charactersCount;\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the end of current `parent`.\n\t\t\tposition.path.pop();\n\t\t\tposition.offset++;\n\t\t\tthis.position = position;\n\t\t\tthis._visitedParent = parent.parent;\n\n\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\treturn formatReturnValue( 'elementEnd', parent, previousPosition, position );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step backward in model. Moves the {@link #position} to the previous position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_previous() {\n\t\tconst previousPosition = this.position;\n\t\tconst position = this.position.clone();\n\t\tconst parent = this._visitedParent;\n\n\t\t// We are at the beginning of the root.\n\t\tif ( parent.parent === null && position.offset === 0 ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just before current position\n\t\tconst node = position.textNode ? position.textNode : position.nodeBefore;\n\n\t\tif ( node instanceof Element ) {\n\t\t\tposition.offset--;\n\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition.path.push( node.maxOffset );\n\t\t\t\tthis.position = position;\n\t\t\t\tthis._visitedParent = node;\n\n\t\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\t\treturn this._previous();\n\t\t\t\t} else {\n\t\t\t\t\treturn formatReturnValue( 'elementEnd', node, previousPosition, position );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t\t}\n\t\t} else if ( node instanceof Text ) {\n\t\t\tlet charactersCount;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tcharactersCount = 1;\n\t\t\t} else {\n\t\t\t\tlet offset = node.startOffset;\n\n\t\t\t\tif ( this._boundaryStartParent == parent && this.boundaries.start.offset > offset ) {\n\t\t\t\t\toffset = this.boundaries.start.offset;\n\t\t\t\t}\n\n\t\t\t\tcharactersCount = position.offset - offset;\n\t\t\t}\n\n\t\t\tconst offsetInTextNode = position.offset - node.startOffset;\n\t\t\tconst item = new TextProxy( node, offsetInTextNode - charactersCount, charactersCount );\n\n\t\t\tposition.offset -= charactersCount;\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the beginning of current `parent`.\n\t\t\tposition.path.pop();\n\t\t\tthis.position = position;\n\t\t\tthis._visitedParent = parent.parent;\n\n\t\t\treturn formatReturnValue( 'elementStart', parent, previousPosition, position, 1 );\n\t\t}\n\t}\n}\n\nfunction formatReturnValue( type, item, previousPosition, nextPosition, length ) {\n\treturn {\n\t\tdone: false,\n\t\tvalue: {\n\t\t\ttype,\n\t\t\titem,\n\t\t\tpreviousPosition,\n\t\t\tnextPosition,\n\t\t\tlength\n\t\t}\n\t};\n}\n\n/**\n * Type of the step made by {@link module:engine/model/treewalker~TreeWalker}.\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end of node,\n * `'character'` if walker traversed over a character, or `'text'` if walker traversed over multiple characters (available in\n * character merging mode, see {@link module:engine/model/treewalker~TreeWalker#constructor}).\n *\n * @typedef {'elementStart'|'elementEnd'|'character'|'text'} module:engine/model/treewalker~TreeWalkerValueType\n */\n\n/**\n * Object returned by {@link module:engine/model/treewalker~TreeWalker} when traversing tree model.\n *\n * @typedef {Object} module:engine/model/treewalker~TreeWalkerValue\n * @property {module:engine/model/treewalker~TreeWalkerValueType} type\n * @property {module:engine/model/item~Item} item Item between old and new positions of {@link module:engine/model/treewalker~TreeWalker}.\n * @property {module:engine/model/position~Position} previousPosition Previous position of the iterator.\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\n * position before the item.\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after item.\n * @property {module:engine/model/position~Position} nextPosition Next position of the iterator.\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after the item.\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\n * before the item.\n * @property {Number} [length] Length of the item. For `'elementStart'` and `'character'` it is 1. For `'text'` it is\n * the length of the text. For `'elementEnd'` it is `undefined`.\n */\n\n/**\n * Tree walking directions.\n *\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/domeventobserver\n */\n\nimport Observer from './observer';\nimport DomEventData from './domeventdata';\n\n/**\n * Base class for DOM event observers. This class handles\n * {@link module:engine/view/observer/observer~Observer#observe adding} listeners to DOM elements,\n * {@link module:engine/view/observer/observer~Observer#disable disabling} and\n * {@link module:engine/view/observer/observer~Observer#enable re-enabling} events.\n * Child class needs to define\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#domEventType DOM event type} and\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#onDomEvent callback}.\n *\n * For instance:\n *\n *\t\tclass ClickObserver extends DomEventObserver {\n *\t\t\t// It can also be defined as a normal property in the constructor.\n *\t\t\tget domEventType() {\n *\t\t\t\treturn 'click';\n *\t\t\t}\n *\n *\t\t\tonDomEvent( domEvent ) {\n *\t\t\t\tthis.fire( 'click', domEvent );\n *\t\t\t}\n *\t\t}\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DomEventObserver extends Observer {\n\t/**\n\t * Type of the DOM event the observer should listen on. Array of types can be defined\n\t * if the obsever should listen to multiple DOM events.\n\t *\n\t * @readonly\n\t * @member {String|Array.<String>} #domEventType\n\t */\n\n\t/**\n\t * Callback which should be called when the DOM event occurred. Note that the callback will not be called if\n\t * observer {@link #isEnabled is not enabled}.\n\t *\n\t * @see #domEventType\n\t * @abstract\n\t * @method #onDomEvent\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * If set to `true` DOM events will be listened on the capturing phase.\n\t\t * Default value is `false`.\n\t\t *\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.useCapture = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tconst types = typeof this.domEventType == 'string' ? [ this.domEventType ] : this.domEventType;\n\n\t\ttypes.forEach( type => {\n\t\t\tthis.listenTo( domElement, type, ( eventInfo, domEvent ) => {\n\t\t\t\tif ( this.isEnabled ) {\n\t\t\t\t\tthis.onDomEvent( domEvent );\n\t\t\t\t}\n\t\t\t}, { useCapture: this.useCapture } );\n\t\t} );\n\t}\n\n\t/**\n\t * Calls `Document#fire()` if observer {@link #isEnabled is enabled}.\n\t *\n\t * @see module:utils/emittermixin~EmitterMixin#fire\n\t * @param {String} eventType The event type (name).\n\t * @param {Event} domEvent The DOM event.\n\t * @param {Object} [additionalData] The additional data which should extend the\n\t * {@link module:engine/view/observer/domeventdata~DomEventData event data} object.\n\t */\n\tfire( eventType, domEvent, additionalData ) {\n\t\tif ( this.isEnabled ) {\n\t\t\tthis.document.fire( eventType, new DomEventData( this.view, domEvent, additionalData ) );\n\t\t}\n\t}\n}\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/textproxy\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * TextProxy is a wrapper for substring of {@link module:engine/view/text~Text}. Instance of this class is created by\n * {@link module:engine/view/treewalker~TreeWalker} when only a part of {@link module:engine/view/text~Text} needs to be returned.\n *\n * `TextProxy` has an API similar to {@link module:engine/view/text~Text Text} and allows to do most of the common tasks performed\n * on view nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/view/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is a readonly interface.\n *\n * **Note:** `TextProxy` instances are created on the fly basing on the current state of parent {@link module:engine/view/text~Text}.\n * Because of this it is highly unrecommended to store references to `TextProxy instances because they might get\n * invalidated due to operations on Document. Also TextProxy is not a {@link module:engine/view/node~Node} so it can not be\n * inserted as a child of {@link module:engine/view/element~Element}.\n *\n * `TextProxy` instances are created by {@link module:engine/view/treewalker~TreeWalker view tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy {\n\t/**\n\t * Creates a text proxy.\n\t *\n\t * @protected\n\t * @param {module:engine/view/text~Text} textNode Text node which part is represented by this text proxy.\n\t * @param {Number} offsetInText Offset in {@link module:engine/view/textproxy~TextProxy#textNode text node}\n\t * from which the text proxy starts.\n\t * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n\t * @constructor\n\t */\n\tconstructor( textNode, offsetInText, length ) {\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/text~Text} element which TextProxy is a substring.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/text~Text} module:engine/view/textproxy~TextProxy#textNode\n\t\t */\n\t\tthis.textNode = textNode;\n\n\t\tif ( offsetInText < 0 || offsetInText > textNode.data.length ) {\n\t\t\t/**\n\t\t\t * Given offsetInText value is incorrect.\n\t\t\t *\n\t\t\t * @error view-textproxy-wrong-offsetintext\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.', this );\n\t\t}\n\n\t\tif ( length < 0 || offsetInText + length > textNode.data.length ) {\n\t\t\t/**\n\t\t\t * Given length value is incorrect.\n\t\t\t *\n\t\t\t * @error view-textproxy-wrong-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-textproxy-wrong-length: Given length value is incorrect.', this );\n\t\t}\n\n\t\t/**\n\t\t * Text data represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:engine/view/textproxy~TextProxy#data\n\t\t */\n\t\tthis.data = textNode.data.substring( offsetInText, offsetInText + length );\n\n\t\t/**\n\t\t * Offset in the `textNode` where this `TextProxy` instance starts.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} module:engine/view/textproxy~TextProxy#offsetInText\n\t\t */\n\t\tthis.offsetInText = offsetInText;\n\t}\n\n\t/**\n\t * Offset size of this node.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/view/text~Text text node}\n\t * (`true`) or the whole text node (`false`).\n\t *\n\t * This is `false` when text proxy starts at the very beginning of {@link module:engine/view/textproxy~TextProxy#textNode textNode}\n\t * ({@link module:engine/view/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n\t * text node size.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isPartial() {\n\t\treturn this.data.length !== this.textNode.data.length;\n\t}\n\n\t/**\n\t * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tget parent() {\n\t\treturn this.textNode.parent;\n\t}\n\n\t/**\n\t * Root of this text proxy, which is same as root of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.textNode.root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/document~Document View document} that owns this text proxy, or `null` if the text proxy is inside\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this.textNode.document;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\ttextProxy.is( 'textProxy' ); // -> true\n\t *\t\ttextProxy.is( 'view:textProxy' ); // -> true\n\t *\n\t *\t\ttextProxy.is( 'model:textProxy' ); // -> false\n\t *\t\ttextProxy.is( 'element' ); // -> false\n\t *\t\ttextProxy.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'textProxy' || type == 'view:textProxy';\n\t}\n\n\t/**\n\t * Returns ancestors array of this text proxy.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` {#textNode} will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to\n\t * root element, otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this.textNode : this.parent;\n\n\t\twhile ( parent !== null ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/focuscycler\n */\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\n\n/**\n * A utility class that helps cycling over focusable {@link module:ui/view~View views} in a\n * {@link module:ui/viewcollection~ViewCollection} when the focus is tracked by the\n * {@link module:utils/focustracker~FocusTracker} instance. It helps implementing keyboard\n * navigation in HTML forms, toolbars, lists and the like.\n *\n * To work properly it requires:\n * * a collection of focusable (HTML `tabindex` attribute) views that implement the `focus()` method,\n * * an associated focus tracker to determine which view is focused.\n *\n * A simple cycler setup can look like this:\n *\n *\t\tconst focusables = new ViewCollection();\n *\t\tconst focusTracker = new FocusTracker();\n *\n *\t\t// Add focusable views to the focus tracker.\n *\t\tfocusTracker.add( ... );\n *\n * Then, the cycler can be used manually:\n *\n *\t\tconst cycler = new FocusCycler( { focusables, focusTracker } );\n *\n *\t\t// Will focus the first focusable view in #focusables.\n *\t\tcycler.focusFirst();\n *\n *\t\t// Will log the next focusable item in #focusables.\n *\t\tconsole.log( cycler.next );\n *\n * Alternatively, it can work side by side with the {@link module:utils/keystrokehandler~KeystrokeHandler}:\n *\n *\t\tconst keystrokeHandler = new KeystrokeHandler();\n *\n *\t\t// Activate the keystroke handler.\n *\t\tkeystrokeHandler.listenTo( sourceOfEvents );\n *\n *\t\tconst cycler = new FocusCycler( {\n *\t\t\tfocusables, focusTracker, keystrokeHandler,\n *\t\t\tactions: {\n *\t\t\t\t// When arrowup of arrowleft is detected by the #keystrokeHandler,\n *\t\t\t\t// focusPrevious() will be called on the cycler.\n *\t\t\t\tfocusPrevious: [ 'arrowup', 'arrowleft' ],\n *\t\t\t}\n *\t\t} );\n */\nexport default class FocusCycler {\n\t/**\n\t * Creates an instance of the focus cycler utility.\n\t *\n\t * @param {Object} options Configuration options.\n\t * @param {module:utils/collection~Collection|Object} options.focusables\n\t * @param {module:utils/focustracker~FocusTracker} options.focusTracker\n\t * @param {module:utils/keystrokehandler~KeystrokeHandler} [options.keystrokeHandler]\n\t * @param {Object} [options.actions]\n\t */\n\tconstructor( options ) {\n\t\tObject.assign( this, options );\n\n\t\t/**\n\t\t * A {@link module:ui/view~View view} collection that the cycler operates on.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection} #focusables\n\t\t */\n\n\t\t/**\n\t\t * A focus tracker instance that the cycler uses to determine the current focus\n\t\t * state in {@link #focusables}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * which can respond to certain keystrokes and cycle the focus.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler} #keystrokeHandler\n\t\t */\n\n\t\t/**\n\t\t * Actions that the cycler can take when a keystroke is pressed. Requires\n\t\t * `options.keystrokeHandler` to be passed and working. When an action is\n\t\t * performed, `preventDefault` and `stopPropagation` will be called on the event\n\t\t * the keystroke fired in the DOM.\n\t\t *\n\t\t *\t\tactions: {\n\t\t *\t\t\t// Will call #focusPrevious() when arrowleft or arrowup is pressed.\n\t\t *\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\t\t *\n\t\t *\t\t\t// Will call #focusNext() when arrowdown is pressed.\n\t\t *\t\t\tfocusNext: 'arrowdown'\n\t\t *\t\t}\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object} #actions\n\t\t */\n\n\t\tif ( options.actions && options.keystrokeHandler ) {\n\t\t\tfor ( const methodName in options.actions ) {\n\t\t\t\tlet actions = options.actions[ methodName ];\n\n\t\t\t\tif ( typeof actions == 'string' ) {\n\t\t\t\t\tactions = [ actions ];\n\t\t\t\t}\n\n\t\t\t\tfor ( const keystroke of actions ) {\n\t\t\t\t\toptions.keystrokeHandler.set( keystroke, ( data, cancel ) => {\n\t\t\t\t\t\tthis[ methodName ]();\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the first focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #first\n\t */\n\tget first() {\n\t\treturn this.focusables.find( isFocusable ) || null;\n\t}\n\n\t/**\n\t * Returns the last focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #last\n\t */\n\tget last() {\n\t\treturn this.focusables.filter( isFocusable ).slice( -1 )[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the next focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #next\n\t */\n\tget next() {\n\t\treturn this._getFocusableItem( 1 );\n\t}\n\n\t/**\n\t * Returns the previous focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #previous\n\t */\n\tget previous() {\n\t\treturn this._getFocusableItem( -1 );\n\t}\n\n\t/**\n\t * An index of the view in the {@link #focusables} which is focused according\n\t * to {@link #focusTracker}. Returns `null` when there is no such view.\n\t *\n\t * @readonly\n\t * @member {Number|null} #current\n\t */\n\tget current() {\n\t\tlet index = null;\n\n\t\t// There's no focused view in the focusables.\n\t\tif ( this.focusTracker.focusedElement === null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tthis.focusables.find( ( view, viewIndex ) => {\n\t\t\tconst focused = view.element === this.focusTracker.focusedElement;\n\n\t\t\tif ( focused ) {\n\t\t\t\tindex = viewIndex;\n\t\t\t}\n\n\t\t\treturn focused;\n\t\t} );\n\n\t\treturn index;\n\t}\n\n\t/**\n\t * Focuses the {@link #first} item in {@link #focusables}.\n\t */\n\tfocusFirst() {\n\t\tthis._focus( this.first );\n\t}\n\n\t/**\n\t * Focuses the {@link #last} item in {@link #focusables}.\n\t */\n\tfocusLast() {\n\t\tthis._focus( this.last );\n\t}\n\n\t/**\n\t * Focuses the {@link #next} item in {@link #focusables}.\n\t */\n\tfocusNext() {\n\t\tthis._focus( this.next );\n\t}\n\n\t/**\n\t * Focuses the {@link #previous} item in {@link #focusables}.\n\t */\n\tfocusPrevious() {\n\t\tthis._focus( this.previous );\n\t}\n\n\t/**\n\t * Focuses the given view if it exists.\n\t *\n\t * @protected\n\t * @param {module:ui/view~View} view\n\t */\n\t_focus( view ) {\n\t\tif ( view ) {\n\t\t\tview.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the next or previous focusable view in {@link #focusables} with respect\n\t * to {@link #current}.\n\t *\n\t * @protected\n\t * @param {Number} step Either `1` for checking forward from {@link #current} or\n\t * `-1` for checking backwards.\n\t * @returns {module:ui/view~View|null}\n\t */\n\t_getFocusableItem( step ) {\n\t\t// Cache for speed.\n\t\tconst current = this.current;\n\t\tconst collectionLength = this.focusables.length;\n\n\t\tif ( !collectionLength ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Start from the beginning if no view is focused.\n\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\tif ( current === null ) {\n\t\t\treturn this[ step === 1 ? 'first' : 'last' ];\n\t\t}\n\n\t\t// Cycle in both directions.\n\t\tlet index = ( current + collectionLength + step ) % collectionLength;\n\n\t\tdo {\n\t\t\tconst view = this.focusables.get( index );\n\n\t\t\t// TODO: Check if view is visible.\n\t\t\tif ( isFocusable( view ) ) {\n\t\t\t\treturn view;\n\t\t\t}\n\n\t\t\t// Cycle in both directions.\n\t\t\tindex = ( index + collectionLength + step ) % collectionLength;\n\t\t} while ( index !== current );\n\n\t\treturn null;\n\t}\n}\n\n// Checks whether a view is focusable.\n//\n// @private\n// @param {module:ui/view~View} view A view to be checked.\n// @returns {Boolean}\nfunction isFocusable( view ) {\n\treturn !!( view.focus && global.window.getComputedStyle( view.element ).display != 'none' );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/matcher\n */\n\n/**\n * View matcher class.\n * Instance of this class can be used to find {@link module:engine/view/element~Element elements} that match given pattern.\n */\nexport default class Matcher {\n\t/**\n\t * Creates new instance of Matcher.\n\t *\n\t * @param {String|RegExp|Object} [pattern] Match patterns. See {@link module:engine/view/matcher~Matcher#add add method} for\n\t * more information.\n\t */\n\tconstructor( ...pattern ) {\n\t\t/**\n\t\t * @private\n\t\t * @type {Array<String|RegExp|Object>}\n\t\t */\n\t\tthis._patterns = [];\n\n\t\tthis.add( ...pattern );\n\t}\n\n\t/**\n\t * Adds pattern or patterns to matcher instance.\n\t *\n\t *\t\t// String.\n\t *\t\tmatcher.add( 'div' );\n\t *\n\t *\t\t// Regular expression.\n\t *\t\tmatcher.add( /^\\w/ );\n\t *\n\t *\t\t// Single class.\n\t *\t\tmatcher.add( {\n\t *\t\t\tclasses: 'foobar'\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/view/matcher~MatcherPattern} for more examples.\n\t *\n\t * Multiple patterns can be added in one call:\n\t *\n\t * \t\tmatcher.add( 'div', { classes: 'foobar' } );\n\t *\n\t * @param {Object|String|RegExp|Function} pattern Object describing pattern details. If string or regular expression\n\t * is provided it will be used to match element's name. Pattern can be also provided in a form\n\t * of a function - then this function will be called with each {@link module:engine/view/element~Element element} as a parameter.\n\t * Function's return value will be stored under `match` key of the object returned from\n\t * {@link module:engine/view/matcher~Matcher#match match} or {@link module:engine/view/matcher~Matcher#matchAll matchAll} methods.\n\t * @param {String|RegExp} [pattern.name] Name or regular expression to match element's name.\n\t * @param {Object} [pattern.attributes] Object with key-value pairs representing attributes to match. Each object key\n\t * represents attribute name. Value under that key can be either:\n\t * * `true` - then attribute is just required (can be empty),\n\t * * a string - then attribute has to be equal, or\n\t * * a regular expression - then attribute has to match the expression.\n\t * @param {String|RegExp|Array} [pattern.classes] Class name or array of class names to match. Each name can be\n\t * provided in a form of string or regular expression.\n\t * @param {Object} [pattern.styles] Object with key-value pairs representing styles to match. Each object key\n\t * represents style name. Value under that key can be either a string or a regular expression and it will be used\n\t * to match style value.\n\t */\n\tadd( ...pattern ) {\n\t\tfor ( let item of pattern ) {\n\t\t\t// String or RegExp pattern is used as element's name.\n\t\t\tif ( typeof item == 'string' || item instanceof RegExp ) {\n\t\t\t\titem = { name: item };\n\t\t\t}\n\n\t\t\t// Single class name/RegExp can be provided.\n\t\t\tif ( item.classes && ( typeof item.classes == 'string' || item.classes instanceof RegExp ) ) {\n\t\t\t\titem.classes = [ item.classes ];\n\t\t\t}\n\n\t\t\tthis._patterns.push( item );\n\t\t}\n\t}\n\n\t/**\n\t * Matches elements for currently stored patterns. Returns match information about first found\n\t * {@link module:engine/view/element~Element element}, otherwise returns `null`.\n\t *\n\t * Example of returned object:\n\t *\n\t *\t\t{\n\t *\t\t\telement: <instance of found element>,\n\t *\t\t\tpattern: <pattern used to match found element>,\n\t *\t\t\tmatch: {\n\t *\t\t\t\tname: true,\n\t *\t\t\t\tattributes: [ 'title', 'href' ],\n\t *\t\t\t\tclasses: [ 'foo' ],\n\t *\t\t\t\tstyles: [ 'color', 'position' ]\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * @see module:engine/view/matcher~Matcher#add\n\t * @see module:engine/view/matcher~Matcher#matchAll\n\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n\t * @returns {Object|null} result\n\t * @returns {module:engine/view/element~Element} result.element Matched view element.\n\t * @returns {Object|String|RegExp|Function} result.pattern Pattern that was used to find matched element.\n\t * @returns {Object} result.match Object representing matched element parts.\n\t * @returns {Boolean} [result.match.name] True if name of the element was matched.\n\t * @returns {Array} [result.match.attributes] Array with matched attribute names.\n\t * @returns {Array} [result.match.classes] Array with matched class names.\n\t * @returns {Array} [result.match.styles] Array with matched style names.\n\t */\n\tmatch( ...element ) {\n\t\tfor ( const singleElement of element ) {\n\t\t\tfor ( const pattern of this._patterns ) {\n\t\t\t\tconst match = isElementMatching( singleElement, pattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\telement: singleElement,\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\tmatch\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Matches elements for currently stored patterns. Returns array of match information with all found\n\t * {@link module:engine/view/element~Element elements}. If no element is found - returns `null`.\n\t *\n\t * @see module:engine/view/matcher~Matcher#add\n\t * @see module:engine/view/matcher~Matcher#match\n\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n\t * @returns {Array.<Object>|null} Array with match information about found elements or `null`. For more information\n\t * see {@link module:engine/view/matcher~Matcher#match match method} description.\n\t */\n\tmatchAll( ...element ) {\n\t\tconst results = [];\n\n\t\tfor ( const singleElement of element ) {\n\t\t\tfor ( const pattern of this._patterns ) {\n\t\t\t\tconst match = isElementMatching( singleElement, pattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\tresults.push( {\n\t\t\t\t\t\telement: singleElement,\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\tmatch\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn results.length > 0 ? results : null;\n\t}\n\n\t/**\n\t * Returns the name of the element to match if there is exactly one pattern added to the matcher instance\n\t * and it matches element name defined by `string` (not `RegExp`). Otherwise, returns `null`.\n\t *\n\t * @returns {String|null} Element name trying to match.\n\t */\n\tgetElementName() {\n\t\tif ( this._patterns.length !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst pattern = this._patterns[ 0 ];\n\t\tconst name = pattern.name;\n\n\t\treturn ( typeof pattern != 'function' && name && !( name instanceof RegExp ) ) ? name : null;\n\t}\n}\n\n// Returns match information if {@link module:engine/view/element~Element element} is matching provided pattern.\n// If element cannot be matched to provided pattern - returns `null`.\n//\n// @param {module:engine/view/element~Element} element\n// @param {Object|String|RegExp|Function} pattern\n// @returns {Object|null} Returns object with match information or null if element is not matching.\nfunction isElementMatching( element, pattern ) {\n\t// If pattern is provided as function - return result of that function;\n\tif ( typeof pattern == 'function' ) {\n\t\treturn pattern( element );\n\t}\n\n\tconst match = {};\n\t// Check element's name.\n\tif ( pattern.name ) {\n\t\tmatch.name = matchName( pattern.name, element.name );\n\n\t\tif ( !match.name ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Check element's attributes.\n\tif ( pattern.attributes ) {\n\t\tmatch.attributes = matchAttributes( pattern.attributes, element );\n\n\t\tif ( !match.attributes ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Check element's classes.\n\tif ( pattern.classes ) {\n\t\tmatch.classes = matchClasses( pattern.classes, element );\n\n\t\tif ( !match.classes ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Check element's styles.\n\tif ( pattern.styles ) {\n\t\tmatch.styles = matchStyles( pattern.styles, element );\n\n\t\tif ( !match.styles ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if name can be matched by provided pattern.\n//\n// @param {String|RegExp} pattern\n// @param {String} name\n// @returns {Boolean} Returns `true` if name can be matched, `false` otherwise.\nfunction matchName( pattern, name ) {\n\t// If pattern is provided as RegExp - test against this regexp.\n\tif ( pattern instanceof RegExp ) {\n\t\treturn pattern.test( name );\n\t}\n\n\treturn pattern === name;\n}\n\n// Checks if attributes of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about attributes to match. Each key of the object will be\n// used as attribute name. Value of each key can be a string or regular expression to match against attribute value.\n// @param {module:engine/view/element~Element} element Element which attributes will be tested.\n// @returns {Array|null} Returns array with matched attribute names or `null` if no attributes were matched.\nfunction matchAttributes( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const name in patterns ) {\n\t\tconst pattern = patterns[ name ];\n\n\t\tif ( element.hasAttribute( name ) ) {\n\t\t\tconst attribute = element.getAttribute( name );\n\n\t\t\tif ( pattern === true ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else if ( pattern instanceof RegExp ) {\n\t\t\t\tif ( pattern.test( attribute ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if ( attribute === pattern ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if classes of provided element can be matched against provided patterns.\n//\n// @param {Array.<String|RegExp>} patterns Array of strings or regular expressions to match against element's classes.\n// @param {module:engine/view/element~Element} element Element which classes will be tested.\n// @returns {Array|null} Returns array with matched class names or `null` if no classes were matched.\nfunction matchClasses( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const pattern of patterns ) {\n\t\tif ( pattern instanceof RegExp ) {\n\t\t\tconst classes = element.getClassNames();\n\n\t\t\tfor ( const name of classes ) {\n\t\t\t\tif ( pattern.test( name ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( match.length === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else if ( element.hasClass( pattern ) ) {\n\t\t\tmatch.push( pattern );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if styles of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about styles to match. Each key of the object will be\n// used as style name. Value of each key can be a string or regular expression to match against style value.\n// @param {module:engine/view/element~Element} element Element which styles will be tested.\n// @returns {Array|null} Returns array with matched style names or `null` if no styles were matched.\nfunction matchStyles( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const name in patterns ) {\n\t\tconst pattern = patterns[ name ];\n\n\t\tif ( element.hasStyle( name ) ) {\n\t\t\tconst style = element.getStyle( name );\n\n\t\t\tif ( pattern instanceof RegExp ) {\n\t\t\t\tif ( pattern.test( style ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if ( style === pattern ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n/**\n * An entity that is a valid pattern recognized by a matcher. `MatcherPattern` is used by {@link ~Matcher} to recognize\n * if a view element fits in a group of view elements described by the pattern.\n *\n * `MatcherPattern` can be given as a `String`, a `RegExp`, an `Object` or a `Function`.\n *\n * If `MatcherPattern` is given as a `String` or `RegExp`, it will match any view element that has a matching name:\n *\n *\t\t// Match any element with name equal to 'div'.\n *\t\tconst pattern = 'div';\n *\n *\t\t// Match any element which name starts on 'p'.\n *\t\tconst pattern = /^p/;\n *\n * If `MatcherPattern` is given as an `Object`, all the object's properties will be matched with view element properties.\n *\n *\t\t// Match view element's name.\n *\t\tconst pattern = { name: /^p/ };\n *\n *\t\t// Match view element which has matching attributes.\n *\t\tconst pattern = {\n *\t\t\tattributes: {\n *\t\t\t\ttitle: 'foobar',\t// Attribute title should equal 'foobar'.\n *\t\t\t\tfoo: /^\\w+/,\t\t// Attribute foo should match /^\\w+/ regexp.\n *\t\t\t\tbar: true\t\t\t// Attribute bar should be set (can be empty).\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Match view element which has given class.\n *\t\tconst pattern = {\n *\t\t\tclasses: 'foobar'\n *\t\t};\n *\n *\t\t// Match view element class using regular expression.\n *\t\tconst pattern = {\n *\t\t\tclasses: /foo.../\n *\t\t};\n *\n *\t\t// Multiple classes to match.\n *\t\tconst pattern = {\n *\t\t\tclasses: [ 'baz', 'bar', /foo.../ ]\n *\t\t};\n *\n *\t\t// Match view element which has given styles.\n *\t\tconst pattern = {\n *\t\t\tstyles: {\n *\t\t\t\tposition: 'absolute',\n *\t\t\t\tcolor: /^\\w*blue$/\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Pattern with multiple properties.\n *\t\tconst pattern = {\n *\t\t\tname: 'span',\n *\t\t\tstyles: {\n *\t\t\t\t'font-weight': 'bold'\n *\t\t\t},\n *\t\t\tclasses: 'highlighted'\n *\t\t};\n *\n * If `MatcherPattern` is given as a `Function`, the function takes a view element as a first and only parameter and\n * the function should decide whether that element matches. If so, it should return what part of the view element has been matched.\n * Otherwise, the function should return `null`. The returned result will be included in `match` property of the object\n * returned by {@link ~Matcher#match} call.\n *\n *\t\t// Match an empty <div> element.\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'div' && element.childCount > 0 ) {\n *\t\t\t\t// Return which part of the element was matched.\n *\t\t\t\treturn { name: true };\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n *\t\t// Match a <p> element with big font (\"heading-like\" element).\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'p' ) {\n *\t\t\t\tconst fontSize = element.getStyle( 'font-size' );\n *\t\t\t\tconst size = fontSize.match( /(\\d+)/px );\n *\n *\t\t\t\tif ( size && Number( size[ 1 ] ) > 26 ) {\n *\t\t\t\t\treturn { name: true, attribute: [ 'font-size' ] };\n *\t\t\t\t}\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n * `MatcherPattern` is defined in a way that it is a superset of {@link module:engine/view/elementdefinition~ElementDefinition},\n * that is, every `ElementDefinition` also can be used as a `MatcherPattern`.\n *\n * @typedef {String|RegExp|Object|Function} module:engine/view/matcher~MatcherPattern\n *\n * @property {String|RegExp} [name] View element name to match.\n * @property {String|RegExp|Array.<String|RegExp>} [classes] View element's class name(s) to match.\n * @property {Object} [styles] Object with key-value pairs representing styles to match.\n * Each object key represents style name. Value can be given as `String` or `RegExp`.\n * @property {Object} [attributes] Object with key-value pairs representing attributes to match.\n * Each object key represents attribute name. Value can be given as `String` or `RegExp`.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/viewcollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\n\n/**\n * Collects {@link module:ui/view~View} instances.\n *\n *\t\tconst parentView = new ParentView( locale );\n *\t\tconst collection = new ViewCollection( locale );\n *\n *\t\tcollection.setParent( parentView.element );\n *\n *\t\tconst viewA = new ChildView( locale );\n *\t\tconst viewB = new ChildView( locale );\n *\n * View collection renders and manages view {@link module:ui/view~View#element elements}:\n *\n *\t\tcollection.add( viewA );\n *\t\tcollection.add( viewB );\n *\n *\t\tconsole.log( parentView.element.firsChild ); // -> viewA.element\n *\t\tconsole.log( parentView.element.lastChild ); // -> viewB.element\n *\n * It {@link module:ui/viewcollection~ViewCollection#delegate propagates} DOM events too:\n *\n *\t\t// Delegate #click and #keydown events from viewA and viewB to the parentView.\n *\t\tcollection.delegate( 'click' ).to( parentView );\n *\n *\t\tparentView.on( 'click', ( evt ) => {\n *\t\t\tconsole.log( `${ evt.source } has been clicked.` );\n *\t\t} );\n *\n *\t\t// This event will be delegated to the parentView.\n *\t\tviewB.fire( 'click' );\n *\n * **Note**: A view collection can be used directly in the {@link module:ui/template~TemplateDefinition definition}\n * of a {@link module:ui/template~Template template}.\n *\n * @extends module:utils/collection~Collection\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class ViewCollection extends Collection {\n\t/**\n\t * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The {@link module:core/editor/editor~Editor editor's locale} instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( {\n\t\t\t// An #id Number attribute should be legal and not break the `ViewCollection` instance.\n\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/93\n\t\t\tidProperty: 'viewUid'\n\t\t} );\n\n\t\t// Handle {@link module:ui/view~View#element} in DOM when a new view is added to the collection.\n\t\tthis.on( 'add', ( evt, view, index ) => {\n\t\t\tif ( !view.isRendered ) {\n\t\t\t\tview.render();\n\t\t\t}\n\n\t\t\tif ( view.element && this._parentElement ) {\n\t\t\t\tthis._parentElement.insertBefore( view.element, this._parentElement.children[ index ] );\n\t\t\t}\n\t\t} );\n\n\t\t// Handle {@link module:ui/view~View#element} in DOM when a view is removed from the collection.\n\t\tthis.on( 'remove', ( evt, view ) => {\n\t\t\tif ( view.element && this._parentElement ) {\n\t\t\t\tview.element.remove();\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The {@link module:core/editor/editor~Editor#locale editor's locale} instance.\n\t\t * See the view {@link module:ui/view~View#locale locale} property.\n\t\t *\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * A parent element within which child views are rendered and managed in DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis._parentElement = null;\n\t}\n\n\t/**\n\t * Destroys the view collection along with child views.\n\t * See the view {@link module:ui/view~View#destroy} method.\n\t */\n\tdestroy() {\n\t\tthis.map( view => view.destroy() );\n\t}\n\n\t/**\n\t * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and\n\t * {@link #remove removing} views in the collection synchronizes their\n\t * {@link module:ui/view~View#element elements} in the parent element.\n\t *\n\t * @param {HTMLElement} element A new parent element.\n\t */\n\tsetParent( elementOrDocFragment ) {\n\t\tthis._parentElement = elementOrDocFragment;\n\t}\n\n\t/**\n\t * Delegates selected events coming from within views in the collection to any\n\t * {@link module:utils/emittermixin~Emitter}.\n\t *\n\t * For the following views and collection:\n\t *\n\t *\t\tconst viewA = new View();\n\t *\t\tconst viewB = new View();\n\t *\t\tconst viewC = new View();\n\t *\n\t *\t\tconst views = parentView.createCollection();\n\t *\n\t *\t\tviews.delegate( 'eventX' ).to( viewB );\n\t *\t\tviews.delegate( 'eventX', 'eventY' ).to( viewC );\n\t *\n\t *\t\tviews.add( viewA );\n\t *\n\t * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:\n\t *\n\t *\t\tviewA.fire( 'eventX', customData );\n\t *\n\t * and `eventY` is delegated (fired by) `viewC` along with `customData`:\n\t *\n\t *\t\tviewA.fire( 'eventY', customData );\n\t *\n\t * See {@link module:utils/emittermixin~Emitter#delegate}.\n\t *\n\t * @param {...String} events {@link module:ui/view~View} event names to be delegated to another\n\t * {@link module:utils/emittermixin~Emitter}.\n\t * @returns {Object}\n\t * @returns {Function} return.to A function which accepts the destination of\n\t * {@link module:utils/emittermixin~Emitter#delegate delegated} events.\n\t */\n\tdelegate( ...events ) {\n\t\tif ( !events.length || !isStringArray( events ) ) {\n\t\t\t/**\n\t\t\t * All event names must be strings.\n\t\t\t *\n\t\t\t * @error ui-viewcollection-delegate-wrong-events\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-viewcollection-delegate-wrong-events: All event names must be strings.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Selects destination for {@link module:utils/emittermixin~Emitter#delegate} events.\n\t\t\t *\n\t\t\t * @memberOf module:ui/viewcollection~ViewCollection#delegate\n\t\t\t * @function module:ui/viewcollection~ViewCollection#delegate.to\n\t\t\t * @param {module:utils/emittermixin~Emitter} dest An `Emitter` instance which is\n\t\t\t * the destination for delegated events.\n\t\t\t */\n\t\t\tto: dest => {\n\t\t\t\t// Activate delegating on existing views in this collection.\n\t\t\t\tfor ( const view of this ) {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.delegate( evtName ).to( dest );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Activate delegating on future views in this collection.\n\t\t\t\tthis.on( 'add', ( evt, view ) => {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.delegate( evtName ).to( dest );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\t// Deactivate delegating when view is removed from this collection.\n\t\t\t\tthis.on( 'remove', ( evt, view ) => {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.stopDelegating( evtName, dest );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Removes a child view from the collection. If the {@link #setParent parent element} of the\n\t * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed\n\t * in DOM, reflecting the order of the collection.\n\t *\n\t * See the {@link #add} method.\n\t *\n\t * @method #remove\n\t * @param {module:ui/view~View|Number|String} subject The view to remove, its id or index in the collection.\n\t * @returns {Object} The removed view.\n\t */\n}\n\n// Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\nfunction isStringArray( arr ) {\n\treturn arr.every( a => typeof a == 'string' );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/tomap\n */\n\nimport objectToMap from './objecttomap';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * Transforms object or iterable to map. Iterable needs to be in the format acceptable by the `Map` constructor.\n *\n *\t\tmap = toMap( { 'foo': 1, 'bar': 2 } );\n *\t\tmap = toMap( [ [ 'foo', 1 ], [ 'bar', 2 ] ] );\n *\t\tmap = toMap( anotherMap );\n *\n * @param {Object|Iterable} data Object or iterable to transform.\n * @returns {Map} Map created from data.\n */\nexport default function toMap( data ) {\n\tif ( isPlainObject( data ) ) {\n\t\treturn objectToMap( data );\n\t} else {\n\t\treturn new Map( data );\n\t}\n}\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/template\n */\n\n/* global document */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport View from './view';\nimport ViewCollection from './viewcollection';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport { isObject, cloneDeepWith } from 'lodash-es';\n\nconst xhtmlNs = 'http://www.w3.org/1999/xhtml';\n\n/**\n * A basic Template class. It renders a DOM HTML element or text from a\n * {@link module:ui/template~TemplateDefinition definition} and supports element attributes, children,\n * bindings to {@link module:utils/observablemixin~Observable observables} and DOM event propagation.\n *\n * A simple template can look like this:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\tclass: 'foo',\n *\t\t\t\tstyle: {\n *\t\t\t\t\tbackgroundColor: 'yellow'\n *\t\t\t\t}\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t'A paragraph.'\n *\t\t\t]\n *\t\t} ).render();\n *\n * and it will render the following HTML element:\n *\n *\t\t<p class=\"foo\" style=\"background-color: yellow;\">A paragraph.</p>\n *\n * Additionally, the `observable` will always fire `clicked` upon clicking `<p>` in the DOM.\n *\n * See {@link module:ui/template~TemplateDefinition} to know more about templates and complex\n * template definitions.\n *\n* @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Template {\n\t/**\n\t * Creates an instance of the {@link ~Template} class.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} def The definition of the template.\n\t */\n\tconstructor( def ) {\n\t\tObject.assign( this, normalize( clone( def ) ) );\n\n\t\t/**\n\t\t * Indicates whether this particular Template instance has been\n\t\t * {@link #render rendered}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isRendered = false;\n\n\t\t/**\n\t\t * The tag (`tagName`) of this template, e.g. `div`. It also indicates that the template\n\t\t * renders to an HTML element.\n\t\t *\n\t\t * @member {String} #tag\n\t\t */\n\n\t\t/**\n\t\t * The text of the template. It also indicates that the template renders to a DOM text node.\n\t\t *\n\t\t * @member {Array.<String|module:ui/template~TemplateValueSchema>} #text\n\t\t */\n\n\t\t/**\n\t\t * The attributes of the template, e.g. `{ id: [ 'ck-id' ] }`, corresponding with\n\t\t * the attributes of an HTML element.\n\t\t *\n\t\t * **Note**: This property only makes sense when {@link #tag} is defined.\n\t\t *\n\t\t * @member {Object} #attributes\n\t\t */\n\n\t\t/**\n\t\t * The children of the template. They can be either:\n\t\t * * independent instances of {@link ~Template} (sub–templates),\n\t\t * * native DOM Nodes.\n\t\t *\n\t\t * **Note**: This property only makes sense when {@link #tag} is defined.\n\t\t *\n\t\t * @member {Array.<module:ui/template~Template|Node>} #children\n\t\t */\n\n\t\t/**\n\t\t * The DOM event listeners of the template.\n\t\t *\n\t\t * @member {Object} #eventListeners\n\t\t */\n\n\t\t/**\n\t\t * The data used by the {@link #revert} method to restore a node to its original state.\n\t\t *\n\t\t * See: {@link #apply}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/template~RenderData}\n\t\t */\n\t\tthis._revertData = null;\n\t}\n\n\t/**\n\t * Renders a DOM Node (an HTML element or text) out of the template.\n\t *\n\t *\t\tconst domNode = new Template( { ... } ).render();\n\t *\n\t * See: {@link #apply}.\n\t *\n\t * @returns {HTMLElement|Text}\n\t */\n\trender() {\n\t\tconst node = this._renderNode( {\n\t\t\tintoFragment: true\n\t\t} );\n\n\t\tthis._isRendered = true;\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Applies the template to an existing DOM Node, either HTML element or text.\n\t *\n\t * **Note:** No new DOM nodes will be created. Applying extends:\n\t *\n\t * {@link module:ui/template~TemplateDefinition attributes},\n\t * {@link module:ui/template~TemplateDefinition event listeners}, and\n\t * `textContent` of {@link module:ui/template~TemplateDefinition children} only.\n\t *\n\t * **Note:** Existing `class` and `style` attributes are extended when a template\n\t * is applied to an HTML element, while other attributes and `textContent` are overridden.\n\t *\n\t * **Note:** The process of applying a template can be easily reverted using the\n\t * {@link module:ui/template~Template#revert} method.\n\t *\n\t *\t\tconst element = document.createElement( 'div' );\n\t *\t\tconst observable = new Model( { divClass: 'my-div' } );\n\t *\t\tconst emitter = Object.create( EmitterMixin );\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tid: 'first-div',\n\t *\t\t\t\tclass: bind.to( 'divClass' )\n\t *\t\t\t},\n\t *\t\t\ton: {\n\t *\t\t\t\tclick: bind( 'elementClicked' ) // Will be fired by the observable.\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t'Div text.'\n\t *\t\t\t]\n\t *\t\t} ).apply( element );\n\t *\n\t *\t\tconsole.log( element.outerHTML ); // -> '<div id=\"first-div\" class=\"my-div\"></div>'\n\t *\n\t * @see module:ui/template~Template#render\n\t * @see module:ui/template~Template#revert\n\t * @param {Node} node Root node for the template to apply.\n\t */\n\tapply( node ) {\n\t\tthis._revertData = getEmptyRevertData();\n\n\t\tthis._renderNode( {\n\t\t\tnode,\n\t\t\tisApplying: true,\n\t\t\trevertData: this._revertData\n\t\t} );\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.\n\t *\n\t * @param {Node} node The root node for the template to revert. In most of the cases, it is the\n\t * same node used by {@link module:ui/template~Template#apply}.\n\t */\n\trevert( node ) {\n\t\tif ( !this._revertData ) {\n\t\t\t/**\n\t\t\t * Attempting to revert a template which has not been applied yet.\n\t\t\t *\n\t\t\t * @error ui-template-revert-not-applied\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-revert-not-applied: Attempting to revert a template which has not been applied yet.',\n\t\t\t\t[ this, node ]\n\t\t\t);\n\t\t}\n\n\t\tthis._revertTemplateFromNode( node, this._revertData );\n\t}\n\n\t/**\n\t * Returns an iterator which traverses the template in search of {@link module:ui/view~View}\n\t * instances and returns them one by one.\n\t *\n\t *\t\tconst viewFoo = new View();\n\t *\t\tconst viewBar = new View();\n\t *\t\tconst viewBaz = new View();\n\t *\t\tconst template = new Template( {\n\t *\t\t\ttag: 'div',\n\t *\t\t\tchildren: [\n\t *\t\t\t\tviewFoo,\n\t *\t\t\t\t{\n\t *\t\t\t\t\ttag: 'div',\n\t *\t\t\t\t\tchildren: [\n\t *\t\t\t\t\t\tviewBar\n\t *\t\t\t\t\t]\n\t *\t\t\t\t},\n\t *\t\t\t\tviewBaz\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Logs: viewFoo, viewBar, viewBaz\n\t *\t\tfor ( const view of template.getViews() ) {\n\t *\t\t\tconsole.log( view );\n\t *\t\t}\n\t *\n\t * @returns {Iterable.<module:ui/view~View>}\n\t */\n\t* getViews() {\n\t\tfunction* search( def ) {\n\t\t\tif ( def.children ) {\n\t\t\t\tfor ( const child of def.children ) {\n\t\t\t\t\tif ( isView( child ) ) {\n\t\t\t\t\t\tyield child;\n\t\t\t\t\t} else if ( isTemplate( child ) ) {\n\t\t\t\t\t\tyield* search( child );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tyield* search( this );\n\t}\n\n\t/**\n\t * An entry point to the interface which binds DOM nodes to\n\t * {@link module:utils/observablemixin~Observable observables}.\n\t * There are two types of bindings:\n\t *\n\t * * HTML element attributes or text `textContent` synchronized with attributes of an\n\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}\n\t * and {@link module:ui/template~BindChain#if}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\t// Binds the element \"class\" attribute to observable#classAttribute.\n\t *\t\t\t\tclass: bind.to( 'classAttribute' )\n\t *\t\t\t}\n\t *\t\t} ).render();\n\t *\n\t * * DOM events fired on HTML element propagated through\n\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\ton: {\n\t *\t\t\t\t// Will be fired by the observable.\n\t *\t\t\t\tclick: bind( 'elementClicked' )\n\t *\t\t\t}\n\t *\t\t} ).render();\n\t *\n\t * Also see {@link module:ui/view~View#bindTemplate}.\n\t *\n\t * @param {module:utils/observablemixin~Observable} observable An observable which provides boundable attributes.\n\t * @param {module:utils/emittermixin~Emitter} emitter An emitter that listens to observable attribute\n\t * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.\n\t * @returns {module:ui/template~BindChain}\n\t */\n\tstatic bind( observable, emitter ) {\n\t\treturn {\n\t\t\tto( eventNameOrFunctionOrAttribute, callback ) {\n\t\t\t\treturn new TemplateToBinding( {\n\t\t\t\t\teventNameOrFunction: eventNameOrFunctionOrAttribute,\n\t\t\t\t\tattribute: eventNameOrFunctionOrAttribute,\n\t\t\t\t\tobservable, emitter, callback\n\t\t\t\t} );\n\t\t\t},\n\n\t\t\tif( attribute, valueIfTrue, callback ) {\n\t\t\t\treturn new TemplateIfBinding( {\n\t\t\t\t\tobservable, emitter, attribute, valueIfTrue, callback\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Extends an existing {@link module:ui/template~Template} instance with some additional content\n\t * from another {@link module:ui/template~TemplateDefinition}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tconst template = new Template( {\n\t *\t\t\ttag: 'p',\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'a',\n\t *\t\t\t\tdata-x: bind.to( 'foo' )\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t{\n\t *\t\t\t\t\ttag: 'span',\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\tclass: 'b'\n\t *\t\t\t\t\t},\n\t *\t\t\t\t\tchildren: [\n\t *\t\t\t\t\t\t'Span'\n\t *\t\t\t\t\t]\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t } );\n\t *\n\t *\t\t// Instance-level extension.\n\t *\t\tTemplate.extend( template, {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'b',\n\t *\t\t\t\tdata-x: bind.to( 'bar' )\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t{\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\tclass: 'c'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Child extension.\n\t *\t\tTemplate.extend( template.children[ 0 ], {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'd'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * the `outerHTML` of `template.render()` is:\n\t *\n\t *\t\t<p class=\"a b\" data-x=\"{ observable.foo } { observable.bar }\">\n\t *\t\t\t<span class=\"b c d\">Span</span>\n\t *\t\t</p>\n\t *\n\t * @param {module:ui/template~Template} template An existing template instance to be extended.\n\t * @param {module:ui/template~TemplateDefinition} def Additional definition to be applied to a template.\n\t */\n\tstatic extend( template, def ) {\n\t\tif ( template._isRendered ) {\n\t\t\t/**\n\t\t\t * Extending a template after rendering may not work as expected. To make sure\n\t\t\t * the {@link module:ui/template~Template.extend extending} works for an element,\n\t\t\t * make sure it happens before {@link #render} is called.\n\t\t\t *\n\t\t\t * @error template-extend-render\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'template-extend-render: Attempting to extend a template which has already been rendered.',\n\t\t\t\t[ this, template ]\n\t\t\t);\n\t\t}\n\n\t\textendTemplate( template, normalize( clone( def ) ) );\n\t}\n\n\t/**\n\t * Renders a DOM Node (either an HTML element or text) out of the template.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderNode( data ) {\n\t\tlet isInvalid;\n\n\t\tif ( data.node ) {\n\t\t\t// When applying, a definition cannot have \"tag\" and \"text\" at the same time.\n\t\t\tisInvalid = this.tag && this.text;\n\t\t} else {\n\t\t\t// When rendering, a definition must have either \"tag\" or \"text\": XOR( this.tag, this.text ).\n\t\t\tisInvalid = this.tag ? this.text : !this.text;\n\t\t}\n\n\t\tif ( isInvalid ) {\n\t\t\t/**\n\t\t\t * Node definition cannot have the \"tag\" and \"text\" properties at the same time.\n\t\t\t * Node definition must have either \"tag\" or \"text\" when rendering a new Node.\n\t\t\t *\n\t\t\t * @error ui-template-wrong-syntax\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-wrong-syntax: Node definition must have either \"tag\" or \"text\" when rendering a new Node.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tif ( this.text ) {\n\t\t\treturn this._renderText( data );\n\t\t} else {\n\t\t\treturn this._renderElement( data );\n\t\t}\n\t}\n\n\t/**\n\t * Renders an HTML element out of the template.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderElement( data ) {\n\t\tlet node = data.node;\n\n\t\tif ( !node ) {\n\t\t\tnode = data.node = document.createElementNS( this.ns || xhtmlNs, this.tag );\n\t\t}\n\n\t\tthis._renderAttributes( data );\n\t\tthis._renderElementChildren( data );\n\t\tthis._setUpListeners( data );\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Renders a text node out of {@link module:ui/template~Template#text}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderText( data ) {\n\t\tlet node = data.node;\n\n\t\t// Save the original textContent to revert it in #revert().\n\t\tif ( node ) {\n\t\t\tdata.revertData.text = node.textContent;\n\t\t} else {\n\t\t\tnode = data.node = document.createTextNode( '' );\n\t\t}\n\n\t\t// Check if this Text Node is bound to Observable. Cases:\n\t\t//\n\t\t//\t\ttext: [ Template.bind( ... ).to( ... ) ]\n\t\t//\n\t\t//\t\ttext: [\n\t\t//\t\t\t'foo',\n\t\t//\t\t\tTemplate.bind( ... ).to( ... ),\n\t\t//\t\t\t...\n\t\t//\t\t]\n\t\t//\n\t\tif ( hasTemplateBinding( this.text ) ) {\n\t\t\tthis._bindToObservable( {\n\t\t\t\tschema: this.text,\n\t\t\t\tupdater: getTextUpdater( node ),\n\t\t\t\tdata\n\t\t\t} );\n\t\t}\n\t\t// Simply set text. Cases:\n\t\t//\n\t\t//\t\ttext: [ 'all', 'are', 'static' ]\n\t\t//\n\t\t//\t\ttext: [ 'foo' ]\n\t\t//\n\t\telse {\n\t\t\tnode.textContent = this.text.join( '' );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderAttributes( data ) {\n\t\tlet attrName, attrValue, domAttrValue, attrNs;\n\n\t\tif ( !this.attributes ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = data.node;\n\t\tconst revertData = data.revertData;\n\n\t\tfor ( attrName in this.attributes ) {\n\t\t\t// Current attribute value in DOM.\n\t\t\tdomAttrValue = node.getAttribute( attrName );\n\n\t\t\t// The value to be set.\n\t\t\tattrValue = this.attributes[ attrName ];\n\n\t\t\t// Save revert data.\n\t\t\tif ( revertData ) {\n\t\t\t\trevertData.attributes[ attrName ] = domAttrValue;\n\t\t\t}\n\n\t\t\t// Detect custom namespace:\n\t\t\t//\n\t\t\t//\t\tclass: {\n\t\t\t//\t\t\tns: 'abc',\n\t\t\t//\t\t\tvalue: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tattrNs = ( isObject( attrValue[ 0 ] ) && attrValue[ 0 ].ns ) ? attrValue[ 0 ].ns : null;\n\n\t\t\t// Activate binding if one is found. Cases:\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\tTemplate.bind( ... ).to( ... )\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t'bar',\n\t\t\t//\t\t\tTemplate.bind( ... ).to( ... ),\n\t\t\t//\t\t\t'baz'\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\t//\t\tclass: {\n\t\t\t//\t\t\tns: 'abc',\n\t\t\t//\t\t\tvalue: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tif ( hasTemplateBinding( attrValue ) ) {\n\t\t\t\t// Normalize attributes with additional data like namespace:\n\t\t\t\t//\n\t\t\t\t//\t\tclass: {\n\t\t\t\t//\t\t\tns: 'abc',\n\t\t\t\t//\t\t\tvalue: [ ... ]\n\t\t\t\t//\t\t}\n\t\t\t\t//\n\t\t\t\tconst valueToBind = attrNs ? attrValue[ 0 ].value : attrValue;\n\n\t\t\t\t// Extend the original value of attributes like \"style\" and \"class\",\n\t\t\t\t// don't override them.\n\t\t\t\tif ( revertData && shouldExtend( attrName ) ) {\n\t\t\t\t\tvalueToBind.unshift( domAttrValue );\n\t\t\t\t}\n\n\t\t\t\tthis._bindToObservable( {\n\t\t\t\t\tschema: valueToBind,\n\t\t\t\t\tupdater: getAttributeUpdater( node, attrName, attrNs ),\n\t\t\t\t\tdata\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Style attribute could be an Object so it needs to be parsed in a specific way.\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\twidth: '100px',\n\t\t\t//\t\t\theight: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\telse if ( attrName == 'style' && typeof attrValue[ 0 ] !== 'string' ) {\n\t\t\t\tthis._renderStyleAttribute( attrValue[ 0 ], data );\n\t\t\t}\n\n\t\t\t// Otherwise simply set the static attribute:\n\t\t\t//\n\t\t\t//\t\tclass: [ 'foo' ]\n\t\t\t//\n\t\t\t//\t\tclass: [ 'all', 'are', 'static' ]\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t{\n\t\t\t//\t\t\t\tns: 'abc',\n\t\t\t//\t\t\t\tvalue: [ 'foo' ]\n\t\t\t//\t\t\t}\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\telse {\n\t\t\t\t// Extend the original value of attributes like \"style\" and \"class\",\n\t\t\t\t// don't override them.\n\t\t\t\tif ( revertData && domAttrValue && shouldExtend( attrName ) ) {\n\t\t\t\t\tattrValue.unshift( domAttrValue );\n\t\t\t\t}\n\n\t\t\t\tattrValue = attrValue\n\t\t\t\t\t// Retrieve \"values\" from:\n\t\t\t\t\t//\n\t\t\t\t\t//\t\tclass: [\n\t\t\t\t\t//\t\t\t{\n\t\t\t\t\t//\t\t\t\tns: 'abc',\n\t\t\t\t\t//\t\t\t\tvalue: [ ... ]\n\t\t\t\t\t//\t\t\t}\n\t\t\t\t\t//\t\t]\n\t\t\t\t\t//\n\t\t\t\t\t.map( val => val ? ( val.value || val ) : val )\n\t\t\t\t\t// Flatten the array.\n\t\t\t\t\t.reduce( ( prev, next ) => prev.concat( next ), [] )\n\t\t\t\t\t// Convert into string.\n\t\t\t\t\t.reduce( arrayValueReducer, '' );\n\n\t\t\t\tif ( !isFalsy( attrValue ) ) {\n\t\t\t\t\tnode.setAttributeNS( attrNs, attrName, attrValue );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Renders the `style` attribute of an HTML element based on\n\t * {@link module:ui/template~Template#attributes}.\n\t *\n\t * A style attribute is an {Object} with static values:\n\t *\n\t *\t\tattributes: {\n\t *\t\t\tstyle: {\n\t *\t\t\t\tcolor: 'red'\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * or values bound to {@link module:ui/model~Model} properties:\n\t *\n\t *\t\tattributes: {\n\t *\t\t\tstyle: {\n\t *\t\t\t\tcolor: bind.to( ... )\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be\n\t * needed.\n\t *\n\t * @private\n\t * @param {Object} styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderStyleAttribute( styles, data ) {\n\t\tconst node = data.node;\n\n\t\tfor ( const styleName in styles ) {\n\t\t\tconst styleValue = styles[ styleName ];\n\n\t\t\t// Cases:\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\tcolor: bind.to( 'attribute' )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tif ( hasTemplateBinding( styleValue ) ) {\n\t\t\t\tthis._bindToObservable( {\n\t\t\t\t\tschema: [ styleValue ],\n\t\t\t\t\tupdater: getStyleUpdater( node, styleName ),\n\t\t\t\t\tdata\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Cases:\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\tcolor: 'red'\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\telse {\n\t\t\t\tnode.style[ styleName ] = styleValue;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderElementChildren( data ) {\n\t\tconst node = data.node;\n\t\tconst container = data.intoFragment ? document.createDocumentFragment() : node;\n\t\tconst isApplying = data.isApplying;\n\t\tlet childIndex = 0;\n\n\t\tfor ( const child of this.children ) {\n\t\t\tif ( isViewCollection( child ) ) {\n\t\t\t\tif ( !isApplying ) {\n\t\t\t\t\tchild.setParent( node );\n\n\t\t\t\t\t// Note: ViewCollection renders its children.\n\t\t\t\t\tfor ( const view of child ) {\n\t\t\t\t\t\tcontainer.appendChild( view.element );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( isView( child ) ) {\n\t\t\t\tif ( !isApplying ) {\n\t\t\t\t\tif ( !child.isRendered ) {\n\t\t\t\t\t\tchild.render();\n\t\t\t\t\t}\n\n\t\t\t\t\tcontainer.appendChild( child.element );\n\t\t\t\t}\n\t\t\t} else if ( isNode( child ) ) {\n\t\t\t\tcontainer.appendChild( child );\n\t\t\t} else {\n\t\t\t\tif ( isApplying ) {\n\t\t\t\t\tconst revertData = data.revertData;\n\t\t\t\t\tconst childRevertData = getEmptyRevertData();\n\n\t\t\t\t\trevertData.children.push( childRevertData );\n\n\t\t\t\t\tchild._renderNode( {\n\t\t\t\t\t\tnode: container.childNodes[ childIndex++ ],\n\t\t\t\t\t\tisApplying: true,\n\t\t\t\t\t\trevertData: childRevertData\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tcontainer.appendChild( child.render() );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( data.intoFragment ) {\n\t\t\tnode.appendChild( container );\n\t\t}\n\t}\n\n\t/**\n\t * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}\n\t * on an HTML element.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_setUpListeners( data ) {\n\t\tif ( !this.eventListeners ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const key in this.eventListeners ) {\n\t\t\tconst revertBindings = this.eventListeners[ key ].map( schemaItem => {\n\t\t\t\tconst [ domEvtName, domSelector ] = key.split( '@' );\n\n\t\t\t\treturn schemaItem.activateDomEventListener( domEvtName, domSelector, data );\n\t\t\t} );\n\n\t\t\tif ( data.revertData ) {\n\t\t\t\tdata.revertData.bindings.push( revertBindings );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}\n\t * activates the binding and sets its initial value.\n\t *\n\t * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or\n\t * text node `textContent`.\n\t *\n\t * @protected\n\t * @param {Object} options Binding options.\n\t * @param {module:ui/template~TemplateValueSchema} options.schema\n\t * @param {Function} options.updater A function which updates the DOM (like attribute or text).\n\t * @param {module:ui/template~RenderData} options.data Rendering data.\n\t */\n\t_bindToObservable( { schema, updater, data } ) {\n\t\tconst revertData = data.revertData;\n\n\t\t// Set initial values.\n\t\tsyncValueSchemaValue( schema, updater, data );\n\n\t\tconst revertBindings = schema\n\t\t\t// Filter \"falsy\" (false, undefined, null, '') value schema components out.\n\t\t\t.filter( item => !isFalsy( item ) )\n\t\t\t// Filter inactive bindings from schema, like static strings ('foo'), numbers (42), etc.\n\t\t\t.filter( item => item.observable )\n\t\t\t// Once only the actual binding are left, let the emitter listen to observable change:attribute event.\n\t\t\t// TODO: Reduce the number of listeners attached as many bindings may listen\n\t\t\t// to the same observable attribute.\n\t\t\t.map( templateBinding => templateBinding.activateAttributeListener( schema, updater, data ) );\n\n\t\tif ( revertData ) {\n\t\t\trevertData.bindings.push( revertBindings );\n\t\t}\n\t}\n\n\t/**\n\t * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to\n\t * return it to the original state.\n\t *\n\t * @protected\n\t * @param {HTMLElement|Text} node A node to be reverted.\n\t * @param {Object} revertData An object that stores information about what changes have been made by\n\t * {@link #apply} to the node. See {@link module:ui/template~RenderData#revertData} for more information.\n\t */\n\t_revertTemplateFromNode( node, revertData ) {\n\t\tfor ( const binding of revertData.bindings ) {\n\t\t\t// Each binding may consist of several observable+observable#attribute.\n\t\t\t// like the following has 2:\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t'x',\n\t\t\t//\t\t\tbind.to( 'foo' ),\n\t\t\t//\t\t\t'y',\n\t\t\t//\t\t\tbind.to( 'bar' )\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\tfor ( const revertBinding of binding ) {\n\t\t\t\trevertBinding();\n\t\t\t}\n\t\t}\n\n\t\tif ( revertData.text ) {\n\t\t\tnode.textContent = revertData.text;\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const attrName in revertData.attributes ) {\n\t\t\tconst attrValue = revertData.attributes[ attrName ];\n\n\t\t\t// When the attribute has **not** been set before #apply().\n\t\t\tif ( attrValue === null ) {\n\t\t\t\tnode.removeAttribute( attrName );\n\t\t\t} else {\n\t\t\t\tnode.setAttribute( attrName, attrValue );\n\t\t\t}\n\t\t}\n\n\t\tfor ( let i = 0; i < revertData.children.length; ++i ) {\n\t\t\tthis._revertTemplateFromNode( node.childNodes[ i ], revertData.children[ i ] );\n\t\t}\n\t}\n}\n\nmix( Template, EmitterMixin );\n\n/**\n * Describes a binding created by the {@link module:ui/template~Template.bind} interface.\n *\n * @protected\n */\nexport class TemplateBinding {\n\t/**\n\t * Creates an instance of the {@link module:ui/template~TemplateBinding} class.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} def The definition of the binding.\n\t */\n\tconstructor( def ) {\n\t\tObject.assign( this, def );\n\n\t\t/**\n\t\t * An observable instance of the binding. It either:\n\t\t *\n\t\t * * provides the attribute with the value,\n\t\t * * or passes the event when a corresponding DOM event is fired.\n\t\t *\n\t\t * @member {module:utils/observablemixin~ObservableMixin} module:ui/template~TemplateBinding#observable\n\t\t */\n\n\t\t/**\n\t\t * An {@link module:utils/emittermixin~Emitter} used by the binding to:\n\t\t *\n\t\t * * listen to the attribute change in the {@link module:ui/template~TemplateBinding#observable},\n\t\t * * or listen to the event in the DOM.\n\t\t *\n\t\t * @member {module:utils/emittermixin~EmitterMixin} module:ui/template~TemplateBinding#emitter\n\t\t */\n\n\t\t/**\n\t\t * The name of the {@link module:ui/template~TemplateBinding#observable observed attribute}.\n\t\t *\n\t\t * @member {String} module:ui/template~TemplateBinding#attribute\n\t\t */\n\n\t\t/**\n\t\t * A custom function to process the value of the {@link module:ui/template~TemplateBinding#attribute}.\n\t\t *\n\t\t * @member {Function} [module:ui/template~TemplateBinding#callback]\n\t\t */\n\t}\n\n\t/**\n\t * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the\n\t * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.\n\t *\n\t * @param {Node} [node] A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.\n\t * @returns {*} The value of {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}.\n\t */\n\tgetValue( node ) {\n\t\tconst value = this.observable[ this.attribute ];\n\n\t\treturn this.callback ? this.callback( value, node ) : value;\n\t}\n\n\t/**\n\t * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated\n\t * value of {@link module:ui/template~TemplateValueSchema}.\n\t *\n\t * @param {module:ui/template~TemplateValueSchema} schema A full schema to generate an attribute or text in the DOM.\n\t * @param {Function} updater A DOM updater function used to update the native DOM attribute or text.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t * @returns {Function} A function to sever the listener binding.\n\t */\n\tactivateAttributeListener( schema, updater, data ) {\n\t\tconst callback = () => syncValueSchemaValue( schema, updater, data );\n\n\t\tthis.emitter.listenTo( this.observable, 'change:' + this.attribute, callback );\n\n\t\t// Allows revert of the listener.\n\t\treturn () => {\n\t\t\tthis.emitter.stopListening( this.observable, 'change:' + this.attribute, callback );\n\t\t};\n\t}\n}\n\n/**\n * Describes either:\n *\n * * a binding to an {@link module:utils/observablemixin~Observable},\n * * or a native DOM event binding.\n *\n * It is created by the {@link module:ui/template~BindChain#to} method.\n *\n * @protected\n */\nexport class TemplateToBinding extends TemplateBinding {\n\t/**\n\t * Activates the listener for the native DOM event, which when fired, is propagated by\n\t * the {@link module:ui/template~TemplateBinding#emitter}.\n\t *\n\t * @param {String} domEvtName The name of the native DOM event.\n\t * @param {String} domSelector The selector in the DOM to filter delegated events.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t * @returns {Function} A function to sever the listener binding.\n\t */\n\tactivateDomEventListener( domEvtName, domSelector, data ) {\n\t\tconst callback = ( evt, domEvt ) => {\n\t\t\tif ( !domSelector || domEvt.target.matches( domSelector ) ) {\n\t\t\t\tif ( typeof this.eventNameOrFunction == 'function' ) {\n\t\t\t\t\tthis.eventNameOrFunction( domEvt );\n\t\t\t\t} else {\n\t\t\t\t\tthis.observable.fire( this.eventNameOrFunction, domEvt );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.emitter.listenTo( data.node, domEvtName, callback );\n\n\t\t// Allows revert of the listener.\n\t\treturn () => {\n\t\t\tthis.emitter.stopListening( data.node, domEvtName, callback );\n\t\t};\n\t}\n}\n\n/**\n * Describes a binding to {@link module:utils/observablemixin~ObservableMixin} created by the {@link module:ui/template~BindChain#if}\n * method.\n *\n * @protected\n */\nexport class TemplateIfBinding extends TemplateBinding {\n\t/**\n\t * @inheritDoc\n\t */\n\tgetValue( node ) {\n\t\tconst value = super.getValue( node );\n\n\t\treturn isFalsy( value ) ? false : ( this.valueIfTrue || true );\n\t}\n\n\t/**\n\t * The value of the DOM attribute or text to be set if the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable} is `true`.\n\t *\n\t * @member {String} [module:ui/template~TemplateIfBinding#valueIfTrue]\n\t */\n}\n\n// Checks whether given {@link module:ui/template~TemplateValueSchema} contains a\n// {@link module:ui/template~TemplateBinding}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @returns {Boolean}\nfunction hasTemplateBinding( schema ) {\n\tif ( !schema ) {\n\t\treturn false;\n\t}\n\n\t// Normalize attributes with additional data like namespace:\n\t//\n\t//\t\tclass: {\n\t//\t\t\tns: 'abc',\n\t//\t\t\tvalue: [ ... ]\n\t//\t\t}\n\t//\n\tif ( schema.value ) {\n\t\tschema = schema.value;\n\t}\n\n\tif ( Array.isArray( schema ) ) {\n\t\treturn schema.some( hasTemplateBinding );\n\t} else if ( schema instanceof TemplateBinding ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Assembles the value using {@link module:ui/template~TemplateValueSchema} and stores it in a form of\n// an Array. Each entry of the Array corresponds to one of {@link module:ui/template~TemplateValueSchema}\n// items.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\n// @returns {Array}\nfunction getValueSchemaValue( schema, node ) {\n\treturn schema.map( schemaItem => {\n\t\t// Process {@link module:ui/template~TemplateBinding} bindings.\n\t\tif ( schemaItem instanceof TemplateBinding ) {\n\t\t\treturn schemaItem.getValue( node );\n\t\t}\n\n\t\t// All static values like strings, numbers, and \"falsy\" values (false, null, undefined, '', etc.) just pass.\n\t\treturn schemaItem;\n\t} );\n}\n\n// A function executed each time the bound Observable attribute changes, which updates the DOM with a value\n// constructed from {@link module:ui/template~TemplateValueSchema}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Function} updater A function which updates the DOM (like attribute or text).\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\nfunction syncValueSchemaValue( schema, updater, { node } ) {\n\tlet value = getValueSchemaValue( schema, node );\n\n\t// Check if schema is a single Template.bind.if, like:\n\t//\n\t//\t\tclass: Template.bind.if( 'foo' )\n\t//\n\tif ( schema.length == 1 && schema[ 0 ] instanceof TemplateIfBinding ) {\n\t\tvalue = value[ 0 ];\n\t} else {\n\t\tvalue = value.reduce( arrayValueReducer, '' );\n\t}\n\n\tif ( isFalsy( value ) ) {\n\t\tupdater.remove();\n\t} else {\n\t\tupdater.set( value );\n\t}\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset `textContent`.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @returns {Object}\nfunction getTextUpdater( node ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tnode.textContent = value;\n\t\t},\n\n\t\tremove() {\n\t\t\tnode.textContent = '';\n\t\t}\n\t};\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset an attribute.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} attrName Name of the attribute to be modified.\n// @param {String} [ns=null] Namespace to use.\n// @returns {Object}\nfunction getAttributeUpdater( el, attrName, ns ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tel.setAttributeNS( ns, attrName, value );\n\t\t},\n\n\t\tremove() {\n\t\t\tel.removeAttributeNS( ns, attrName );\n\t\t}\n\t};\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of CSSStyleDeclaration to set or remove a style.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} styleName Name of the style to be modified.\n// @returns {Object}\nfunction getStyleUpdater( el, styleName ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tel.style[ styleName ] = value;\n\t\t},\n\n\t\tremove() {\n\t\t\tel.style[ styleName ] = null;\n\t\t}\n\t};\n}\n\n// Clones definition of the template.\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition}\nfunction clone( def ) {\n\tconst clone = cloneDeepWith( def, value => {\n\t\t// Don't clone the `Template.bind`* bindings because of the references to Observable\n\t\t// and DomEmitterMixin instances inside, which would also be traversed and cloned by greedy\n\t\t// cloneDeepWith algorithm. There's no point in cloning Observable/DomEmitterMixins\n\t\t// along with the definition.\n\t\t//\n\t\t// Don't clone Template instances if provided as a child. They're simply #render()ed\n\t\t// and nothing should interfere.\n\t\t//\n\t\t// Also don't clone View instances if provided as a child of the Template. The template\n\t\t// instance will be extracted from the View during the normalization and there's no need\n\t\t// to clone it.\n\t\tif ( value && ( value instanceof TemplateBinding || isTemplate( value ) || isView( value ) || isViewCollection( value ) ) ) {\n\t\t\treturn value;\n\t\t}\n\t} );\n\n\treturn clone;\n}\n\n// Normalizes given {@link module:ui/template~TemplateDefinition}.\n//\n// See:\n//  * {@link normalizeAttributes}\n//  * {@link normalizeListeners}\n//  * {@link normalizePlainTextDefinition}\n//  * {@link normalizeTextDefinition}\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition} Normalized definition.\nfunction normalize( def ) {\n\tif ( typeof def == 'string' ) {\n\t\tdef = normalizePlainTextDefinition( def );\n\t} else if ( def.text ) {\n\t\tnormalizeTextDefinition( def );\n\t}\n\n\tif ( def.on ) {\n\t\tdef.eventListeners = normalizeListeners( def.on );\n\n\t\t// Template mixes EmitterMixin, so delete #on to avoid collision.\n\t\tdelete def.on;\n\t}\n\n\tif ( !def.text ) {\n\t\tif ( def.attributes ) {\n\t\t\tnormalizeAttributes( def.attributes );\n\t\t}\n\n\t\tconst children = [];\n\n\t\tif ( def.children ) {\n\t\t\tif ( isViewCollection( def.children ) ) {\n\t\t\t\tchildren.push( def.children );\n\t\t\t} else {\n\t\t\t\tfor ( const child of def.children ) {\n\t\t\t\t\tif ( isTemplate( child ) || isView( child ) || isNode( child ) ) {\n\t\t\t\t\t\tchildren.push( child );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchildren.push( new Template( child ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdef.children = children;\n\t}\n\n\treturn def;\n}\n\n// Normalizes \"attributes\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tattributes: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: {\n//\t\t\t\tvalue: 'bar'\n//\t\t\t}\n//\t\t}\n//\n// becomes\n//\n//\t\tattributes: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: {\n//\t\t\t\tvalue: [ 'bar' ]\n//\t\t\t}\n//\t\t}\n//\n// @param {Object} attributes\nfunction normalizeAttributes( attributes ) {\n\tfor ( const a in attributes ) {\n\t\tif ( attributes[ a ].value ) {\n\t\t\tattributes[ a ].value = [].concat( attributes[ a ].value );\n\t\t}\n\n\t\tarrayify( attributes, a );\n\t}\n}\n\n// Normalizes \"on\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\ton: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// becomes\n//\n//\t\ton: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// @param {Object} listeners\n// @returns {Object} Object containing normalized listeners.\nfunction normalizeListeners( listeners ) {\n\tfor ( const l in listeners ) {\n\t\tarrayify( listeners, l );\n\t}\n\n\treturn listeners;\n}\n\n// Normalizes \"string\" {@link module:ui/template~TemplateDefinition}.\n//\n//\t\t\"foo\"\n//\n// becomes\n//\n//\t\t{ text: [ 'foo' ] },\n//\n// @param {String} def\n// @returns {module:ui/template~TemplateDefinition} Normalized template definition.\nfunction normalizePlainTextDefinition( def ) {\n\treturn {\n\t\ttext: [ def ]\n\t};\n}\n\n// Normalizes text {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tchildren: [\n//\t\t\t{ text: 'def' },\n//\t\t\t{ text: {@link module:ui/template~TemplateBinding} }\n//\t\t]\n//\n// becomes\n//\n//\t\tchildren: [\n//\t\t\t{ text: [ 'def' ] },\n//\t\t\t{ text: [ {@link module:ui/template~TemplateBinding} ] }\n//\t\t]\n//\n// @param {module:ui/template~TemplateDefinition} def\nfunction normalizeTextDefinition( def ) {\n\tif ( !Array.isArray( def.text ) ) {\n\t\tdef.text = [ def.text ];\n\t}\n}\n\n// Wraps an entry in Object in an Array, if not already one.\n//\n//\t\t{\n//\t\t\tx: 'y',\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// becomes\n//\n//\t\t{\n//\t\t\tx: [ 'y' ],\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// @param {Object} obj\n// @param {String} key\nfunction arrayify( obj, key ) {\n\tif ( !Array.isArray( obj[ key ] ) ) {\n\t\tobj[ key ] = [ obj[ key ] ];\n\t}\n}\n\n// A helper which concatenates the value avoiding unwanted\n// leading white spaces.\n//\n// @param {String} prev\n// @param {String} cur\n// @returns {String}\nfunction arrayValueReducer( prev, cur ) {\n\tif ( isFalsy( cur ) ) {\n\t\treturn prev;\n\t} else if ( isFalsy( prev ) ) {\n\t\treturn cur;\n\t} else {\n\t\treturn `${ prev } ${ cur }`;\n\t}\n}\n\n// Extends one object defined in the following format:\n//\n//\t\t{\n//\t\t\tkey1: [Array1],\n//\t\t\tkey2: [Array2],\n//\t\t\t...\n//\t\t\tkeyN: [ArrayN]\n//\t\t}\n//\n// with another object of the same data format.\n//\n// @param {Object} obj Base object.\n// @param {Object} ext Object extending base.\n// @returns {String}\nfunction extendObjectValueArray( obj, ext ) {\n\tfor ( const a in ext ) {\n\t\tif ( obj[ a ] ) {\n\t\t\tobj[ a ].push( ...ext[ a ] );\n\t\t} else {\n\t\t\tobj[ a ] = ext[ a ];\n\t\t}\n\t}\n}\n\n// A helper for {@link module:ui/template~Template#extend}. Recursively extends {@link module:ui/template~Template} instance\n// with content from {@link module:ui/template~TemplateDefinition}. See {@link module:ui/template~Template#extend} to learn more.\n//\n// @param {module:ui/template~Template} def A template instance to be extended.\n// @param {module:ui/template~TemplateDefinition} def A definition which is to extend the template instance.\n// @param {Object} Error context.\nfunction extendTemplate( template, def ) {\n\tif ( def.attributes ) {\n\t\tif ( !template.attributes ) {\n\t\t\ttemplate.attributes = {};\n\t\t}\n\n\t\textendObjectValueArray( template.attributes, def.attributes );\n\t}\n\n\tif ( def.eventListeners ) {\n\t\tif ( !template.eventListeners ) {\n\t\t\ttemplate.eventListeners = {};\n\t\t}\n\n\t\textendObjectValueArray( template.eventListeners, def.eventListeners );\n\t}\n\n\tif ( def.text ) {\n\t\ttemplate.text.push( ...def.text );\n\t}\n\n\tif ( def.children && def.children.length ) {\n\t\tif ( template.children.length != def.children.length ) {\n\t\t\t/**\n\t\t\t * The number of children in extended definition does not match.\n\t\t\t *\n\t\t\t * @error ui-template-extend-children-mismatch\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-extend-children-mismatch: The number of children in extended definition does not match.',\n\t\t\t\ttemplate\n\t\t\t);\n\t\t}\n\n\t\tlet childIndex = 0;\n\n\t\tfor ( const childDef of def.children ) {\n\t\t\textendTemplate( template.children[ childIndex++ ], childDef );\n\t\t}\n\t}\n}\n\n// Checks if value is \"falsy\".\n// Note: 0 (Number) is not \"falsy\" in this context.\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isFalsy( value ) {\n\treturn !value && value !== 0;\n}\n\n// Checks if the item is an instance of {@link module:ui/view~View}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isView( item ) {\n\treturn item instanceof View;\n}\n\n// Checks if the item is an instance of {@link module:ui/template~Template}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isTemplate( item ) {\n\treturn item instanceof Template;\n}\n\n// Checks if the item is an instance of {@link module:ui/viewcollection~ViewCollection}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isViewCollection( item ) {\n\treturn item instanceof ViewCollection;\n}\n\n// Creates an empty skeleton for {@link module:ui/template~Template#revert}\n// data.\n//\n// @private\nfunction getEmptyRevertData() {\n\treturn {\n\t\tchildren: [],\n\t\tbindings: [],\n\t\tattributes: {}\n\t};\n}\n\n// Checks whether an attribute should be extended when\n// {@link module:ui/template~Template#apply} is called.\n//\n// @private\n// @param {String} attrName Attribute name to check.\nfunction shouldExtend( attrName ) {\n\treturn attrName == 'class' || attrName == 'style';\n}\n\n/**\n * A definition of the {@link module:ui/template~Template}. It describes what kind of\n * node a template will render (HTML element or text), attributes of an element, DOM event\n * listeners and children.\n *\n * Also see:\n * * {@link module:ui/template~TemplateValueSchema} to learn about HTML element attributes,\n * * {@link module:ui/template~TemplateListenerSchema} to learn about DOM event listeners.\n *\n * A sample definition on an HTML element can look like this:\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\ttag: 'span',\n *\t\t\t\t\tattributes: { ... },\n *\t\t\t\t\tchildren: [ ... ],\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\ttext: 'static–text'\n *\t\t\t\t},\n *\t\t\t\t'also-static–text',\n *\t\t\t],\n *\t\t\tattributes: {\n *\t\t\t\tclass: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tid: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tstyle: {@link module:ui/template~TemplateValueSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\t'click': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// Document.querySelector format is also accepted.\n *\t\t\t\t'keyup@a.some-class': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t}\n *\t\t} );\n *\n * A {@link module:ui/view~View}, another {@link module:ui/template~Template} or a native DOM node\n * can also become a child of a template. When a view is passed, its {@link module:ui/view~View#element} is used:\n *\n *\t\tconst view = new SomeView();\n *\t\tconst childTemplate = new Template( { ... } );\n *\t\tconst childNode = document.createElement( 'b' );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: [\n *\t\t\t\t// view#element will be added as a child of this <p>.\n *\t\t\t\tview,\n *\n * \t\t\t\t// The output of childTemplate.render() will be added here.\n *\t\t\t\tchildTemplate,\n *\n *\t\t\t\t// Native DOM nodes are included directly in the rendered output.\n *\t\t\t\tchildNode\n *\t\t\t]\n *\t\t} );\n *\n * An entire {@link module:ui/viewcollection~ViewCollection} can be used as a child in the definition:\n *\n *\t\tconst collection = new ViewCollection();\n *\t\tcollection.add( someView );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: collection\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateDefinition\n * @type Object\n *\n * @property {String} tag See the template {@link module:ui/template~Template#tag} property.\n *\n * @property {Array.<module:ui/template~TemplateDefinition>} [children]\n * See the template {@link module:ui/template~Template#children} property.\n *\n * @property {Object.<String, module:ui/template~TemplateValueSchema>} [attributes]\n * See the template {@link module:ui/template~Template#attributes} property.\n *\n * @property {String|module:ui/template~TemplateValueSchema|Array.<String|module:ui/template~TemplateValueSchema>} [text]\n * See the template {@link module:ui/template~Template#text} property.\n *\n * @property {Object.<String, module:ui/template~TemplateListenerSchema>} [on]\n * See the template {@link module:ui/template~Template#eventListeners} property.\n */\n\n/**\n * Describes a value of an HTML element attribute or `textContent`. It allows combining multiple\n * data sources like static values and {@link module:utils/observablemixin~Observable} attributes.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn where to use it,\n * * {@link module:ui/template~Template.bind} to learn how to configure\n * {@link module:utils/observablemixin~Observable} attribute bindings,\n * * {@link module:ui/template~Template#render} to learn how to render a template,\n * * {@link module:ui/template~BindChain#to `to()`} and {@link module:ui/template~BindChain#if `if()`}\n * methods to learn more about bindings.\n *\n * Attribute values can be described in many different ways:\n *\n *\t\t// Bind helper will create bindings to attributes of the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// A plain string schema.\n *\t\t\t\t'class': 'static-text',\n *\n *\t\t\t\t// An object schema, binds to the \"foo\" attribute of the\n *\t\t\t\t// observable and follows its value.\n *\t\t\t\t'class': bind.to( 'foo' ),\n *\n *\t\t\t\t// An array schema, combines the above.\n *\t\t\t\t'class': [\n *\t\t\t\t\t'static-text',\n *\t\t\t\t\tbind.to( 'bar', () => { ... } ),\n *\n * \t\t\t\t\t// Bindings can also be conditional.\n *\t\t\t\t\tbind.if( 'baz', 'class-when-baz-is-true' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema, with a custom namespace, e.g. useful for creating SVGs.\n *\t\t\t\t'class': {\n *\t\t\t\t\tns: 'http://ns.url',\n *\t\t\t\t\tvalue: [\n *\t\t\t\t\t\tbind.if( 'baz', 'value-when-true' ),\n *\t\t\t\t\t\t'static-text'\n *\t\t\t\t\t]\n *\t\t\t\t},\n *\n *\t\t\t\t// An object schema, specific for styles.\n *\t\t\t\tstyle: {\n *\t\t\t\t\tcolor: 'red',\n *\t\t\t\t\tbackgroundColor: bind.to( 'qux', () => { ... } )\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * Text nodes can also have complex values:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\t// Will render a \"foo\" text node.\n *\t\tnew Template( {\n *\t\t\ttext: 'foo'\n *\t\t} );\n *\n *\t\t// Will render a \"static text: {observable.foo}\" text node.\n *\t\t// The text of the node will be updated as the \"foo\" attribute changes.\n *\t\tnew Template( {\n *\t\t\ttext: [\n *\t\t\t\t'static text: ',\n *\t\t\t\tbind.to( 'foo', () => { ... } )\n *\t\t\t]\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateValueSchema\n * @type {Object|String|Array}\n */\n\n/**\n * Describes an event listener attached to an HTML element. Such listener can propagate DOM events\n * through an {@link module:utils/observablemixin~Observable} instance, execute custom callbacks\n * or both, if necessary.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn more about template definitions,\n * * {@link module:ui/template~BindChain#to `to()`} method to learn more about bindings.\n *\n * Check out different ways of attaching event listeners below:\n *\n *\t\t// Bind helper will propagate events through the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\ton: {\n *\t\t\t\t// An object schema. The observable will fire the \"clicked\" event upon DOM \"click\".\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\n *\t\t\t\t// An object schema. It will work for \"click\" event on \"a.foo\" children only.\n *\t\t\t\t'click@a.foo': bind.to( 'clicked' )\n *\n *\t\t\t\t// An array schema, makes the observable propagate multiple events.\n *\t\t\t\tclick: [\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( 'executed' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema with a custom callback.\n *\t\t\t\t'click@a.foo': {\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( evt => {\n *\t\t\t\t\t\tconsole.log( `${ evt.target } has been clicked!` );\n *\t\t\t\t\t} }\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateListenerSchema\n * @type {Object|String|Array}\n */\n\n/**\n * The return value of {@link ~Template.bind `Template.bind()`}. It provides `to()` and `if()`\n * methods to create the {@link module:utils/observablemixin~Observable observable} attribute and event bindings.\n *\n * @interface module:ui/template~BindChain\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to either:\n *\n * * an HTML element attribute or a text node `textContent`, so it remains in sync with the observable\n * attribute as it changes,\n * * or an HTML element DOM event, so the DOM events are propagated through an observable.\n *\n * Some common use cases of `to()` bindings are presented below:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// class=\"...\" attribute gets bound to `observable#a`\n *\t\t\t\tclass: bind.to( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t// <p>...</p> gets bound to observable#b; always `toUpperCase()`.\n *\t\t\t\t{\n *\t\t\t\t\ttext: bind.to( 'b', ( value, node ) => value.toUpperCase() )\n *\t\t\t\t}\n *\t\t\t],\n *\t\t\ton: {\n *\t\t\t\tclick: [\n *\t\t\t\t\t// An observable will fire \"clicked\" upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\n *\t\t\t\t\t// A custom callback will be executed upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( () => {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t} )\n *\t\t\t\t]\n *\t\t\t}\n *\t\t} ).render();\n *\n * Learn more about using `to()` in the {@link module:ui/template~TemplateValueSchema} and\n * {@link module:ui/template~TemplateListenerSchema}.\n *\n * @method #to\n * @param {String|Function} eventNameOrFunctionOrAttribute An attribute name of\n * {@link module:utils/observablemixin~Observable} or a DOM event name or an event callback.\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to an HTML element attribute or a text\n * node `textContent` so it remains in sync with the observable attribute as it changes.\n *\n * Unlike {@link module:ui/template~BindChain#to}, it controls the presence of the attribute or `textContent`\n * depending on the \"falseness\" of an {@link module:utils/observablemixin~Observable} attribute.\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'input',\n *\t\t\tattributes: {\n *\t\t\t\t// <input checked> when `observable#a` is not undefined/null/false/''\n *\t\t\t\t// <input> when `observable#a` is undefined/null/false\n *\t\t\t\tchecked: bind.if( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\t// <input>\"b-is-not-set\"</input> when `observable#b` is undefined/null/false/''\n *\t\t\t\t\t// <input></input> when `observable#b` is not \"falsy\"\n *\t\t\t\t\ttext: bind.if( 'b', 'b-is-not-set', ( value, node ) => !value )\n *\t\t\t\t}\n *\t\t\t]\n *\t\t} ).render();\n *\n * Learn more about using `if()` in the {@link module:ui/template~TemplateValueSchema}.\n *\n * @method #if\n * @param {String} attribute An attribute name of {@link module:utils/observablemixin~Observable} used in the binding.\n * @param {String} [valueIfTrue] Value set when the {@link module:utils/observablemixin~Observable} attribute is not\n * undefined/null/false/'' (empty string).\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * The {@link module:ui/template~Template#_renderNode} configuration.\n *\n * @private\n * @interface module:ui/template~RenderData\n */\n\n/**\n * Tells {@link module:ui/template~Template#_renderNode} to render\n * children into `DocumentFragment` first and then append the fragment\n * to the parent element. It is a speed optimization.\n *\n * @member {Boolean} #intoFragment\n */\n\n/**\n * A node which is being rendered.\n *\n * @member {HTMLElement|Text} #node\n */\n\n/**\n * Indicates whether the {@module:ui/template~RenderNodeOptions#node} has\n * been provided by {@module:ui/template~Template#apply}.\n *\n * @member {Boolean} #isApplying\n */\n\n/**\n * An object storing the data that helps {@module:ui/template~Template#revert}\n * bringing back an element to its initial state, i.e. before\n * {@module:ui/template~Template#apply} was called.\n *\n * @member {Object} #revertData\n */\n","import assignValue from './_assignValue.js';\nimport baseAssignValue from './_baseAssignValue.js';\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nexport default copyObject;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/node\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { clone } from 'lodash-es';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Abstract tree view node class.\n *\n * This is an abstract class. Its constructor should not be used directly.\n * Use the {@link module:engine/view/element~Element} class to create view elements\n * or {@link module:engine/view/text~Text} class to create view text nodes.\n *\n * @abstract\n */\nexport default class Node {\n\t/**\n\t * Creates a tree view node.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Parent element. Null by default. Set by {@link module:engine/view/element~Element#_insertChild}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t\t */\n\t\tthis.parent = null;\n\t}\n\n\t/**\n\t * Index of the node in the parent element or null if the node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that view tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget index() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// No parent or child doesn't exist in parent's children.\n\t\tif ( ( pos = this.parent.getChildIndex( this ) ) == -1 ) {\n\t\t\t/**\n\t\t\t * The node's parent does not contain this node. It means that the document tree is corrupted.\n\t\t\t *\n\t\t\t * @error view-node-not-found-in-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-node-not-found-in-parent: The node\\'s parent does not contain this node.', this );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Node's next sibling, or `null` if it is the last child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nextSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\n\t}\n\n\t/**\n\t * Node's previous sibling, or `null` if it is the first child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget previousSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\n\t}\n\n\t/**\n\t * Top-most ancestor of the node. If the node has no parent it is the root itself.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\tlet root = this; // eslint-disable-line consistent-this\n\n\t\twhile ( root.parent ) {\n\t\t\troot = root.parent;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/document~Document View document} that owns this node, or `null` if the node is inside\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/document~Document|null}\n\t */\n\tget document() {\n\t\t// Parent might be Node, null or DocumentFragment.\n\t\tif ( this.parent instanceof Node ) {\n\t\t\treturn this.parent.document;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Gets a path to the node. The path is an array containing indices of consecutive ancestors of this node,\n\t * beginning from {@link module:engine/view/node~Node#root root}, down to this node's index.\n\t *\n\t *\t\tconst abc = downcastWriter.createText( 'abc' );\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst h1 = downcastWriter.createElement( 'h1', null, downcastWriter.createText( 'header' ) );\n\t *\t\tconst p = downcastWriter.createElement( 'p', null, [ abc, foo ] );\n\t *\t\tconst div = downcastWriter.createElement( 'div', null, [ h1, p ] );\n\t *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n\t *\t\th1.getPath(); // Returns [ 0 ].\n\t *\t\tdiv.getPath(); // Returns [].\n\t *\n\t * @returns {Array.<Number>} The path.\n\t */\n\tgetPath() {\n\t\tconst path = [];\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\twhile ( node.parent ) {\n\t\t\tpath.unshift( node.index );\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this node.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both nodes.\n\t *\n\t * @param {module:engine/view/node~Node} node The second node.\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( node, options = {} ) {\n\t\tconst ancestorsA = this.getAncestors( options );\n\t\tconst ancestorsB = node.getAncestors( options );\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/view/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisBefore( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisPath = this.getPath();\n\t\tconst nodePath = node.getPath();\n\n\t\tconst result = compareArrays( thisPath, nodePath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn true;\n\n\t\t\tcase 'extension':\n\t\t\t\treturn false;\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < nodePath[ result ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/view/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisAfter( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// In other cases, just check if the `node` is before, and return the opposite.\n\t\treturn !this.isBefore( node );\n\t}\n\n\t/**\n\t * Removes node from parent.\n\t *\n\t * @protected\n\t */\n\t_remove() {\n\t\tthis.parent._removeChildren( this.index );\n\t}\n\n\t/**\n\t * @protected\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Changed node.\n\t * @fires change\n\t */\n\t_fireChange( type, node ) {\n\t\tthis.fire( 'change:' + type, node );\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent._fireChange( type, node );\n\t\t}\n\t}\n\n\t/**\n\t * Custom toJSON method to solve child-parent circular dependencies.\n\t *\n\t * @returns {Object} Clone of this object with the parent property removed.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\t// Due to circular references we need to remove parent reference.\n\t\tdelete json.parent;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t * This method is useful when processing view objects that are of unknown type. For example, a function\n\t * may return a {@link module:engine/view/documentfragment~DocumentFragment} or a {@link module:engine/view/node~Node}\n\t * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n\t *\n\t *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n\t *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n\t *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n\t *\n\t * Since this method is also available on a range of model objects, you can prefix the type of the object with\n\t * `model:` or `view:` to check, for example, if this is the model's or view's element:\n\t *\n\t *\t\tviewElement.is( 'view:element' ); // -> true\n\t *\t\tviewElement.is( 'model:element' ); // -> false\n\t *\n\t * By using this method it is also possible to check a name of an element:\n\t *\n\t *\t\timgElement.is( 'img' ); // -> true\n\t *\t\timgElement.is( 'element', 'img' ); // -> same as above\n\t *\t\timgElement.is( 'view:element', 'img' ); // -> same as above, but more precise\n\t *\n\t * The list of view objects which implement the `is()` method:\n\t *\n\t * * {@link module:engine/view/attributeelement~AttributeElement#is `AttributeElement#is()`}\n\t * * {@link module:engine/view/containerelement~ContainerElement#is `ContainerElement#is()`}\n\t * * {@link module:engine/view/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n\t * * {@link module:engine/view/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n\t * * {@link module:engine/view/editableelement~EditableElement#is `EditableElement#is()`}\n\t * * {@link module:engine/view/element~Element#is `Element#is()`}\n\t * * {@link module:engine/view/emptyelement~EmptyElement#is `EmptyElement#is()`}\n\t * * {@link module:engine/view/node~Node#is `Node#is()`}\n\t * * {@link module:engine/view/position~Position#is `Position#is()`}\n\t * * {@link module:engine/view/range~Range#is `Range#is()`}\n\t * * {@link module:engine/view/rooteditableelement~RootEditableElement#is `RootEditableElement#is()`}\n\t * * {@link module:engine/view/selection~Selection#is `Selection#is()`}\n\t * * {@link module:engine/view/text~Text#is `Text#is()`}\n\t * * {@link module:engine/view/textproxy~TextProxy#is `TextProxy#is()`}\n\t * * {@link module:engine/view/uielement~UIElement#is `UIElement#is()`}\n\t *\n\t * @method #is\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'node' || type == 'view:node';\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @method #_clone\n\t * @returns {module:engine/view/node~Node} Clone of this node.\n\t */\n\n\t/**\n\t * Checks if provided node is similar to this node.\n\t *\n\t * @method #isSimilar\n\t * @returns {Boolean} True if nodes are similar.\n\t */\n}\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} children changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:children\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} attributes changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:attributes\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when {@link module:engine/view/text~Text text nodes} data changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:text\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * @event change\n */\n\nmix( Node, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/node\n */\n\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Model node. Most basic structure of model tree.\n *\n * This is an abstract class that is a base for other classes representing different nodes in model.\n *\n * **Note:** If a node is detached from the model tree, you can manipulate it using it's API.\n * However, it is **very important** that nodes already attached to model tree should be only changed through\n * {@link module:engine/model/writer~Writer Writer API}.\n *\n * Changes done by `Node` methods, like {@link module:engine/model/element~Element#_insertChild _insertChild} or\n * {@link module:engine/model/node~Node#_setAttribute _setAttribute}\n * do not generate {@link module:engine/model/operation/operation~Operation operations}\n * which are essential for correct editor work if you modify nodes in {@link module:engine/model/document~Document document} root.\n *\n * The flow of working on `Node` (and classes that inherits from it) is as such:\n * 1. You can create a `Node` instance, modify it using it's API.\n * 2. Add `Node` to the model using `Batch` API.\n * 3. Change `Node` that was already added to the model using `Batch` API.\n *\n * Similarly, you cannot use `Batch` API on a node that has not been added to the model tree, with the exception\n * of {@link module:engine/model/writer~Writer#insert inserting} that node to the model tree.\n *\n * Be aware that using {@link module:engine/model/writer~Writer#remove remove from Batch API} does not allow to use `Node` API because\n * the information about `Node` is still kept in model document.\n *\n * In case of {@link module:engine/model/element~Element element node}, adding and removing children also counts as changing a node and\n * follows same rules.\n */\nexport default class Node {\n\t/**\n\t * Creates a model node.\n\t *\n\t * This is an abstract class, so this constructor should not be used directly.\n\t *\n\t * @abstract\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( attrs ) {\n\t\t/**\n\t\t * Parent of this node. It could be {@link module:engine/model/element~Element}\n\t\t * or {@link module:engine/model/documentfragment~DocumentFragment}.\n\t\t * Equals to `null` if the node has no parent.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t\t */\n\t\tthis.parent = null;\n\n\t\t/**\n\t\t * Attributes set on this node.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/model/node~Node#_attrs\n\t\t */\n\t\tthis._attrs = toMap( attrs );\n\t}\n\n\t/**\n\t * Index of this node in it's parent or `null` if the node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that model tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget index() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( ( pos = this.parent.getChildIndex( this ) ) === null ) {\n\t\t\tthrow new CKEditorError( 'model-node-not-found-in-parent: The node\\'s parent does not contain this node.', this );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Offset at which this node starts in it's parent. It is equal to the sum of {@link #offsetSize offsetSize}\n\t * of all it's previous siblings. Equals to `null` if node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that model tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget startOffset() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( ( pos = this.parent.getChildStartOffset( this ) ) === null ) {\n\t\t\tthrow new CKEditorError( 'model-node-not-found-in-parent: The node\\'s parent does not contain this node.', this );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Offset size of this node. Represents how much \"offset space\" is occupied by the node in it's parent.\n\t * It is important for {@link module:engine/model/position~Position position}. When node has `offsetSize` greater than `1`, position\n\t * can be placed between that node start and end. `offsetSize` greater than `1` is for nodes that represents more\n\t * than one entity, i.e. {@link module:engine/model/text~Text text node}.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Offset at which this node ends in it's parent. It is equal to the sum of this node's\n\t * {@link module:engine/model/node~Node#startOffset start offset} and {@link #offsetSize offset size}.\n\t * Equals to `null` if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget endOffset() {\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.startOffset + this.offsetSize;\n\t}\n\n\t/**\n\t * Node's next sibling or `null` if the node is a last child of it's parent or if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nextSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\n\t}\n\n\t/**\n\t * Node's previous sibling or `null` if the node is a first child of it's parent or if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget previousSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\n\t}\n\n\t/**\n\t * The top-most ancestor of the node. If node has no parent it is the root itself. If the node is a part\n\t * of {@link module:engine/model/documentfragment~DocumentFragment}, it's `root` is equal to that `DocumentFragment`.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\tlet root = this; // eslint-disable-line consistent-this\n\n\t\twhile ( root.parent ) {\n\t\t\troot = root.parent;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns this node or `null` if the node has no parent or is inside\n\t * a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\t// This is a top element of a sub-tree.\n\t\tif ( this.root == this ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Root may be `DocumentFragment` which does not have document property.\n\t\treturn this.root.document || null;\n\t}\n\n\t/**\n\t * Gets path to the node. The path is an array containing starting offsets of consecutive ancestors of this node,\n\t * beginning from {@link module:engine/model/node~Node#root root}, down to this node's starting offset. The path can be used to\n\t * create {@link module:engine/model/position~Position Position} instance.\n\t *\n\t *\t\tconst abc = new Text( 'abc' );\n\t *\t\tconst foo = new Text( 'foo' );\n\t *\t\tconst h1 = new Element( 'h1', null, new Text( 'header' ) );\n\t *\t\tconst p = new Element( 'p', null, [ abc, foo ] );\n\t *\t\tconst div = new Element( 'div', null, [ h1, p ] );\n\t *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n\t *\t\th1.getPath(); // Returns [ 0 ].\n\t *\t\tdiv.getPath(); // Returns [].\n\t *\n\t * @returns {Array.<Number>} The path.\n\t */\n\tgetPath() {\n\t\tconst path = [];\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\twhile ( node.parent ) {\n\t\t\tpath.unshift( node.startOffset );\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this node.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both nodes.\n\t *\n\t * @param {module:engine/model/node~Node} node The second node.\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( node, options = {} ) {\n\t\tconst ancestorsA = this.getAncestors( options );\n\t\tconst ancestorsB = node.getAncestors( options );\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/model/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisBefore( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisPath = this.getPath();\n\t\tconst nodePath = node.getPath();\n\n\t\tconst result = compareArrays( thisPath, nodePath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn true;\n\n\t\t\tcase 'extension':\n\t\t\t\treturn false;\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < nodePath[ result ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/model/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisAfter( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// In other cases, just check if the `node` is before, and return the opposite.\n\t\treturn !this.isBefore( node );\n\t}\n\n\t/**\n\t * Checks if the node has an attribute with given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on node, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on node.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Converts `Node` to plain object and returns it.\n\t *\n\t * @returns {Object} `Node` converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = {};\n\n\t\t// Serializes attributes to the object.\n\t\t// attributes = { a: 'foo', b: 1, c: true }.\n\t\tif ( this._attrs.size ) {\n\t\t\tjson.attributes = Array.from( this._attrs ).reduce( ( result, attr ) => {\n\t\t\t\tresult[ attr[ 0 ] ] = attr[ 1 ];\n\n\t\t\t\treturn result;\n\t\t\t}, {} );\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t * This method is useful when processing model objects that are of unknown type. For example, a function\n\t * may return a {@link module:engine/model/documentfragment~DocumentFragment} or a {@link module:engine/model/node~Node}\n\t * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n\t *\n\t *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n\t *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n\t *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n\t *\n\t * Since this method is also available on a range of view objects, you can prefix the type of the object with\n\t * `model:` or `view:` to check, for example, if this is the model's or view's element:\n\t *\n\t *\t\tmodelElement.is( 'model:element' ); // -> true\n\t *\t\tmodelElement.is( 'view:element' ); // -> false\n\t *\n\t * By using this method it is also possible to check a name of an element:\n\t *\n\t *\t\timageElement.is( 'image' ); // -> true\n\t *\t\timageElement.is( 'element', 'image' ); // -> same as above\n\t *\t\timageElement.is( 'model:element', 'image' ); // -> same as above, but more precise\n\t *\n\t * The list of model objects which implement the `is()` method:\n\t *\n\t * * {@link module:engine/model/node~Node#is `Node#is()`}\n\t * * {@link module:engine/model/text~Text#is `Text#is()`}\n\t * * {@link module:engine/model/element~Element#is `Element#is()`}\n\t * * {@link module:engine/model/rootelement~RootElement#is `RootElement#is()`}\n\t * * {@link module:engine/model/position~Position#is `Position#is()`}\n\t * * {@link module:engine/model/liveposition~LivePosition#is `LivePosition#is()`}\n\t * * {@link module:engine/model/range~Range#is `Range#is()`}\n\t * * {@link module:engine/model/liverange~LiveRange#is `LiveRange#is()`}\n\t * * {@link module:engine/model/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n\t * * {@link module:engine/model/selection~Selection#is `Selection#is()`}\n\t * * {@link module:engine/model/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n\t * * {@link module:engine/model/markercollection~Marker#is `Marker#is()`}\n\t * * {@link module:engine/model/textproxy~TextProxy#is `TextProxy#is()`}\n\t *\n\t * @method #is\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'node' || type == 'model:node';\n\t}\n\n\t/**\n\t * Creates a copy of this node, that is a node with exactly same attributes, and returns it.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/node~Node} Node with same attributes as this node.\n\t */\n\t_clone() {\n\t\treturn new Node( this._attrs );\n\t}\n\n\t/**\n\t * Removes this node from it's parent.\n\t *\n\t * @see module:engine/model/writer~Writer#remove\n\t * @protected\n\t */\n\t_remove() {\n\t\tthis.parent._removeChildren( this.index );\n\t}\n\n\t/**\n\t * Sets attribute on the node. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * @see module:engine/model/writer~Writer#setAttribute\n\t * @protected\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\t_setAttribute( key, value ) {\n\t\tthis._attrs.set( key, value );\n\t}\n\n\t/**\n\t * Removes all attributes from the node and sets given attributes.\n\t *\n\t * @see module:engine/model/writer~Writer#setAttributes\n\t * @protected\n\t * @param {Object} [attrs] Attributes to set. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\t_setAttributesTo( attrs ) {\n\t\tthis._attrs = toMap( attrs );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the node.\n\t *\n\t * @see module:engine/model/writer~Writer#removeAttribute\n\t * @protected\n\t * @param {String} key Key of attribute to remove.\n\t * @returns {Boolean} `true` if the attribute was set on the element, `false` otherwise.\n\t */\n\t_removeAttribute( key ) {\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Removes all attributes from the node.\n\t *\n\t * @see module:engine/model/writer~Writer#clearAttributes\n\t * @protected\n\t */\n\t_clearAttributes() {\n\t\tthis._attrs.clear();\n\t}\n}\n\n/**\n * The node's parent does not contain this node.\n *\n * This error may be thrown from corrupted trees.\n *\n * @error model-node-not-found-in-parent\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/nodelist\n */\n\nimport Node from './node';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\n * in classes like {@link module:engine/model/element~Element Element}\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n */\nexport default class NodeList {\n\t/**\n\t * Creates an empty node list.\n\t *\n\t * @protected\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes contained in this node list.\n\t */\n\tconstructor( nodes ) {\n\t\t/**\n\t\t * Nodes contained in this node list.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<module:engine/model/node~Node>}\n\t\t */\n\t\tthis._nodes = [];\n\n\t\tif ( nodes ) {\n\t\t\tthis._insertNodes( 0, nodes );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all nodes contained inside this node list.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._nodes[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._nodes.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Gets the node at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of node.\n\t * @returns {module:engine/model/node~Node|null} Node at given index.\n\t */\n\tgetNode( index ) {\n\t\treturn this._nodes[ index ] || null;\n\t}\n\n\t/**\n\t * Returns an index of the given node. Returns `null` if given node is not inside this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetNodeIndex( node ) {\n\t\tconst index = this._nodes.indexOf( node );\n\n\t\treturn index == -1 ? null : index;\n\t}\n\n\t/**\n\t * Returns the starting offset of given node. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Node to look for.\n\t * @returns {Number|null} Node's starting offset.\n\t */\n\tgetNodeStartOffset( node ) {\n\t\tconst index = this.getNodeIndex( node );\n\n\t\treturn index === null ? null : this._nodes.slice( 0, index ).reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Converts index to offset in node list.\n\t *\n\t * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.\n\t *\n\t * @param {Number} index Node's index.\n\t * @returns {Number} Node's starting offset.\n\t */\n\tindexToOffset( index ) {\n\t\tif ( index == this._nodes.length ) {\n\t\t\treturn this.maxOffset;\n\t\t}\n\n\t\tconst node = this._nodes[ index ];\n\n\t\tif ( !node ) {\n\t\t\t/**\n\t\t\t * Given index cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error nodelist-index-out-of-bounds\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-index-out-of-bounds: Given index cannot be found in the node list.', this );\n\t\t}\n\n\t\treturn this.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Converts offset in node list to index.\n\t *\n\t * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\tlet totalOffset = 0;\n\n\t\tfor ( const node of this._nodes ) {\n\t\t\tif ( offset >= totalOffset && offset < totalOffset + node.offsetSize ) {\n\t\t\t\treturn this.getNodeIndex( node );\n\t\t\t}\n\n\t\t\ttotalOffset += node.offsetSize;\n\t\t}\n\n\t\tif ( totalOffset != offset ) {\n\t\t\t/**\n\t\t\t * Given offset cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error model-nodelist-offset-out-of-bounds\n\t\t\t * @param {Number} offset\n\t\t\t * @param {module:engine/model/nodelist~NodeList} nodeList Stringified node list.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-offset-out-of-bounds: Given offset cannot be found in the node list.',\n\t\t\t\tthis,\n\t\t\t\t{\n\t\t\t\t\toffset,\n\t\t\t\t\tnodeList: this\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\treturn this.length;\n\t}\n\n\t/**\n\t * Inserts given nodes at given index.\n\t *\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to be inserted.\n\t */\n\t_insertNodes( index, nodes ) {\n\t\t// Validation.\n\t\tfor ( const node of nodes ) {\n\t\t\tif ( !( node instanceof Node ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to insert an object which is not a Node instance.\n\t\t\t\t *\n\t\t\t\t * @error nodelist-insertNodes-not-node\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-nodelist-insertNodes-not-node: Trying to insert an object which is not a Node instance.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._nodes.splice( index, 0, ...nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index.\n\t *\n\t * @protected\n\t * @param {Number} indexStart Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeNodes( indexStart, howMany = 1 ) {\n\t\treturn this._nodes.splice( indexStart, howMany );\n\t}\n\n\t/**\n\t * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\n\t * are also converted to their plain object representation.\n\t *\n\t * @returns {Array.<module:engine/model/node~Node>} `NodeList` instance converted to `Array`.\n\t */\n\ttoJSON() {\n\t\treturn this._nodes.map( node => node.toJSON() );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/treewalker\n */\n\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Position from './position';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n\t/**\n\t * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n\t *\n\t * @constructor\n\t * @param {Object} options Object with configuration.\n\t * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {module:engine/view/position~Position} [options.startPosition] Starting position.\n\t * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\n\t * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all characters from\n\t * {@link module:engine/view/text~Text} should be returned as one {@link module:engine/view/text~Text} (`false`) ore one by one as\n\t * {@link module:engine/view/textproxy~TextProxy} (`true`).\n\t * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\n\t * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\n\t * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\n\t * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\n\t * each {@link module:engine/view/element~Element} will be returned once, while if the option is `false` they might be returned\n\t * twice: for `'elementStart'` and `'elementEnd'`.\n\t */\n\tconstructor( options = {} ) {\n\t\tif ( !options.boundaries && !options.startPosition ) {\n\t\t\t/**\n\t\t\t * Neither boundaries nor starting position have been defined.\n\t\t\t *\n\t\t\t * @error view-tree-walker-no-start-position\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.',\n\t\t\t\tnull\n\t\t\t);\n\t\t}\n\n\t\tif ( options.direction && options.direction != 'forward' && options.direction != 'backward' ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.',\n\t\t\t\toptions.startPosition,\n\t\t\t\t{ direction: options.direction }\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Iterator boundaries.\n\t\t *\n\t\t * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\n\t\t * on the start of boundary, then `{ done: true }` is returned.\n\t\t *\n\t\t * If boundaries are not defined they are set before first and after last child of the root node.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/range~Range} module:engine/view/treewalker~TreeWalker#boundaries\n\t\t */\n\t\tthis.boundaries = options.boundaries || null;\n\n\t\t/**\n\t\t * Iterator position. If start position is not defined then position depends on {@link #direction}. If direction is\n\t\t * `'forward'` position starts form the beginning, when direction is `'backward'` position starts from the end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position} module:engine/view/treewalker~TreeWalker#position\n\t\t */\n\t\tif ( options.startPosition ) {\n\t\t\tthis.position = Position._createAt( options.startPosition );\n\t\t} else {\n\t\t\tthis.position = Position._createAt( options.boundaries[ options.direction == 'backward' ? 'end' : 'start' ] );\n\t\t}\n\n\t\t/**\n\t\t * Walking direction. Defaults `'forward'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'backward'|'forward'} module:engine/view/treewalker~TreeWalker#direction\n\t\t */\n\t\tthis.direction = options.direction || 'forward';\n\n\t\t/**\n\t\t * Flag indicating whether all characters from {@link module:engine/view/text~Text} should be returned as one\n\t\t * {@link module:engine/view/text~Text} or one by one as {@link module:engine/view/textproxy~TextProxy}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#singleCharacters\n\t\t */\n\t\tthis.singleCharacters = !!options.singleCharacters;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\n\t\t * iterated node will not be returned along with `elementEnd` tag.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#shallow\n\t\t */\n\t\tthis.shallow = !!options.shallow;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should ignore `elementEnd` tags. If set to `true`, walker will not\n\t\t * return a parent node of the start position. Each {@link module:engine/view/element~Element} will be returned once.\n\t\t * When set to `false` each element might be returned twice: for `'elementStart'` and `'elementEnd'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#ignoreElementEnd\n\t\t */\n\t\tthis.ignoreElementEnd = !!options.ignoreElementEnd;\n\n\t\t/**\n\t\t * Start boundary parent.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryStartParent\n\t\t */\n\t\tthis._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n\n\t\t/**\n\t\t * End boundary parent.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryEndParent\n\t\t */\n\t\tthis._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n\t *\n\t * For example:\n\t *\n\t * \t\twalker.skip( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n\t * \t\twalker.skip( value => true ); // Move the position to the end: <p>{}foo</p> -> <p>foo</p>[]\n\t * \t\twalker.skip( value => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t */\n\tskip( skip ) {\n\t\tlet done, value, prevPosition;\n\n\t\tdo {\n\t\t\tprevPosition = this.position;\n\n\t\t\t( { done, value } = this.next() );\n\t\t} while ( !done && skip( value ) );\n\n\t\tif ( !done ) {\n\t\t\tthis.position = prevPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the next tree walker's value.\n\t *\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} Object implementing iterator interface, returning\n\t * information about taken step.\n\t */\n\tnext() {\n\t\tif ( this.direction == 'forward' ) {\n\t\t\treturn this._next();\n\t\t} else {\n\t\t\treturn this._previous();\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step forward in view. Moves the {@link #position} to the next position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done `true` if iterator is done, `false` otherwise.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_next() {\n\t\tlet position = this.position.clone();\n\t\tconst previousPosition = this.position;\n\t\tconst parent = position.parent;\n\n\t\t// We are at the end of the root.\n\t\tif ( parent.parent === null && position.offset === parent.childCount ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just after current position.\n\t\tlet node;\n\n\t\t// Text is a specific parent because it contains string instead of child nodes.\n\t\tif ( parent instanceof Text ) {\n\t\t\tif ( position.isAtEnd ) {\n\t\t\t\t// Prevent returning \"elementEnd\" for Text node. Skip that value and return the next walker step.\n\t\t\t\tthis.position = Position._createAfter( parent );\n\n\t\t\t\treturn this._next();\n\t\t\t}\n\n\t\t\tnode = parent.data[ position.offset ];\n\t\t} else {\n\t\t\tnode = parent.getChild( position.offset );\n\t\t}\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition = new Position( node, 0 );\n\t\t\t} else {\n\t\t\t\tposition.offset++;\n\t\t\t}\n\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t} else if ( node instanceof Text ) {\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tposition = new Position( node, 0 );\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\tlet charactersCount = node.data.length;\n\t\t\t\tlet item;\n\n\t\t\t\t// If text stick out of walker range, we need to cut it and wrap in TextProxy.\n\t\t\t\tif ( node == this._boundaryEndParent ) {\n\t\t\t\t\tcharactersCount = this.boundaries.end.offset;\n\t\t\t\t\titem = new TextProxy( node, 0, charactersCount );\n\t\t\t\t\tposition = Position._createAfter( item );\n\t\t\t\t} else {\n\t\t\t\t\titem = new TextProxy( node, 0, node.data.length );\n\t\t\t\t\t// If not just keep moving forward.\n\t\t\t\t\tposition.offset++;\n\t\t\t\t}\n\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t\t}\n\t\t} else if ( typeof node == 'string' ) {\n\t\t\tlet textLength;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\ttextLength = 1;\n\t\t\t} else {\n\t\t\t\t// Check if text stick out of walker range.\n\t\t\t\tconst endOffset = parent === this._boundaryEndParent ? this.boundaries.end.offset : parent.data.length;\n\n\t\t\t\ttextLength = endOffset - position.offset;\n\t\t\t}\n\n\t\t\tconst textProxy = new TextProxy( parent, position.offset, textLength );\n\n\t\t\tposition.offset += textLength;\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'text', textProxy, previousPosition, position, textLength );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the end of current `parent`.\n\t\t\tposition = Position._createAfter( parent );\n\t\t\tthis.position = position;\n\n\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\treturn this._formatReturnValue( 'elementEnd', parent, previousPosition, position );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step backward in view. Moves the {@link #position} to the previous position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_previous() {\n\t\tlet position = this.position.clone();\n\t\tconst previousPosition = this.position;\n\t\tconst parent = position.parent;\n\n\t\t// We are at the beginning of the root.\n\t\tif ( parent.parent === null && position.offset === 0 ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just before current position.\n\t\tlet node;\n\n\t\t// Text {@link module:engine/view/text~Text} element is a specific parent because contains string instead of child nodes.\n\t\tif ( parent instanceof Text ) {\n\t\t\tif ( position.isAtStart ) {\n\t\t\t\t// Prevent returning \"elementStart\" for Text node. Skip that value and return the next walker step.\n\t\t\t\tthis.position = Position._createBefore( parent );\n\n\t\t\t\treturn this._previous();\n\t\t\t}\n\n\t\t\tnode = parent.data[ position.offset - 1 ];\n\t\t} else {\n\t\t\tnode = parent.getChild( position.offset - 1 );\n\t\t}\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition = new Position( node, node.childCount );\n\t\t\t\tthis.position = position;\n\n\t\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\t\treturn this._previous();\n\t\t\t\t} else {\n\t\t\t\t\treturn this._formatReturnValue( 'elementEnd', node, previousPosition, position );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tposition.offset--;\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t\t}\n\t\t} else if ( node instanceof Text ) {\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tposition = new Position( node, node.data.length );\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._previous();\n\t\t\t} else {\n\t\t\t\tlet charactersCount = node.data.length;\n\t\t\t\tlet item;\n\n\t\t\t\t// If text stick out of walker range, we need to cut it and wrap in TextProxy.\n\t\t\t\tif ( node == this._boundaryStartParent ) {\n\t\t\t\t\tconst offset = this.boundaries.start.offset;\n\n\t\t\t\t\titem = new TextProxy( node, offset, node.data.length - offset );\n\t\t\t\t\tcharactersCount = item.data.length;\n\t\t\t\t\tposition = Position._createBefore( item );\n\t\t\t\t} else {\n\t\t\t\t\titem = new TextProxy( node, 0, node.data.length );\n\t\t\t\t\t// If not just keep moving backward.\n\t\t\t\t\tposition.offset--;\n\t\t\t\t}\n\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t\t}\n\t\t} else if ( typeof node == 'string' ) {\n\t\t\tlet textLength;\n\n\t\t\tif ( !this.singleCharacters ) {\n\t\t\t\t// Check if text stick out of walker range.\n\t\t\t\tconst startOffset = parent === this._boundaryStartParent ? this.boundaries.start.offset : 0;\n\n\t\t\t\ttextLength = position.offset - startOffset;\n\t\t\t} else {\n\t\t\t\ttextLength = 1;\n\t\t\t}\n\n\t\t\tposition.offset -= textLength;\n\n\t\t\tconst textProxy = new TextProxy( parent, position.offset, textLength );\n\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'text', textProxy, previousPosition, position, textLength );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the beginning of current `parent`.\n\t\t\tposition = Position._createBefore( parent );\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'elementStart', parent, previousPosition, position, 1 );\n\t\t}\n\t}\n\n\t/**\n\t * Format returned data and adjust `previousPosition` and `nextPosition` if reach the bound of the {@link module:engine/view/text~Text}.\n\t *\n\t * @private\n\t * @param {module:engine/view/treewalker~TreeWalkerValueType} type Type of step.\n\t * @param {module:engine/view/item~Item} item Item between old and new position.\n\t * @param {module:engine/view/position~Position} previousPosition Previous position of iterator.\n\t * @param {module:engine/view/position~Position} nextPosition Next position of iterator.\n\t * @param {Number} [length] Length of the item.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue}\n\t */\n\t_formatReturnValue( type, item, previousPosition, nextPosition, length ) {\n\t\t// Text is a specific parent, because contains string instead of children.\n\t\t// Walker doesn't enter to the Text except situations when walker is iterating over every single character,\n\t\t// or the bound starts/ends inside the Text. So when the position is at the beginning or at the end of the Text\n\t\t// we move it just before or just after Text.\n\t\tif ( item instanceof TextProxy ) {\n\t\t\t// Position is at the end of Text.\n\t\t\tif ( item.offsetInText + item.data.length == item.textNode.data.length ) {\n\t\t\t\tif ( this.direction == 'forward' && !( this.boundaries && this.boundaries.end.isEqual( this.position ) ) ) {\n\t\t\t\t\tnextPosition = Position._createAfter( item.textNode );\n\t\t\t\t\t// When we change nextPosition of returned value we need also update walker current position.\n\t\t\t\t\tthis.position = nextPosition;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousPosition = Position._createAfter( item.textNode );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Position is at the begining ot the text.\n\t\t\tif ( item.offsetInText === 0 ) {\n\t\t\t\tif ( this.direction == 'backward' && !( this.boundaries && this.boundaries.start.isEqual( this.position ) ) ) {\n\t\t\t\t\tnextPosition = Position._createBefore( item.textNode );\n\t\t\t\t\t// When we change nextPosition of returned value we need also update walker current position.\n\t\t\t\t\tthis.position = nextPosition;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousPosition = Position._createBefore( item.textNode );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdone: false,\n\t\t\tvalue: {\n\t\t\t\ttype,\n\t\t\t\titem,\n\t\t\t\tpreviousPosition,\n\t\t\t\tnextPosition,\n\t\t\t\tlength\n\t\t\t}\n\t\t};\n\t}\n}\n\n/**\n * Type of the step made by {@link module:engine/view/treewalker~TreeWalker}.\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end\n * of node, or `'text'` if walker traversed over single and multiple characters.\n * For {@link module:engine/view/text~Text} `elementStart` and `elementEnd` is not returned.\n *\n * @typedef {String} module:engine/view/treewalker~TreeWalkerValueType\n */\n\n/**\n * Object returned by {@link module:engine/view/treewalker~TreeWalker} when traversing tree view.\n *\n * @typedef {Object} module:engine/view/treewalker~TreeWalkerValue\n * @property {module:engine/view/treewalker~TreeWalkerValueType} type\n * @property {module:engine/view/item~Item} item Item between the old and the new positions\n * of the tree walker.\n * @property {module:engine/view/position~Position} previousPosition Previous position of the iterator.\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\n * position before the item.\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after item.\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\n * inside of the text to its parent just before or just after that text.\n * @property {module:engine/view/position~Position} nextPosition Next position of the iterator.\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after the item.\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\n * before the item.\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\n * inside of the text to its parent just before or just after that text.\n * @property {Number} [length] Length of the item. For `'elementStart'` it is `1`. For `'text'` it is\n * the length of that text. For `'elementEnd'` it is `undefined`.\n */\n\n/**\n * Tree walking directions.\n *\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/markeroperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\n\n/**\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MarkerOperation extends Operation {\n\t/**\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/range~Range} oldRange Marker range before the change.\n\t * @param {module:engine/model/range~Range} newRange Marker range after the change.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Marker collection on which change should be executed.\n\t * @param {Boolean} affectsData Specifies whether the marker operation affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( name, oldRange, newRange, markers, affectsData, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Marker name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Marker range before the change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.oldRange = oldRange ? oldRange.clone() : null;\n\n\t\t/**\n\t\t * Marker range after the change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.newRange = newRange ? newRange.clone() : null;\n\n\t\t/**\n\t\t * Specifies whether the marker operation affects the data produced by the data pipeline\n\t\t * (is persisted in the editor's data).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.affectsData = affectsData;\n\n\t\t/**\n\t\t * Marker collection on which change should be executed.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis._markers = markers;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'marker';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new MarkerOperation( this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n\t */\n\tgetReversed() {\n\t\treturn new MarkerOperation( this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst type = this.newRange ? '_set' : '_remove';\n\n\t\tthis._markers[ type ]( this.name, this.newRange, true, this.affectsData );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tif ( this.oldRange ) {\n\t\t\tjson.oldRange = this.oldRange.toJSON();\n\t\t}\n\n\t\tif ( this.newRange ) {\n\t\t\tjson.newRange = this.newRange.toJSON();\n\t\t}\n\n\t\tdelete json._markers;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MarkerOperation';\n\t}\n\n\t/**\n\t * Creates `MarkerOperation` object from deserialized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new MarkerOperation(\n\t\t\tjson.name,\n\t\t\tjson.oldRange ? Range.fromJSON( json.oldRange, document ) : null,\n\t\t\tjson.newRange ? Range.fromJSON( json.newRange, document ) : null,\n\t\t\tdocument.model.markers,\n\t\t\tjson.affectsData,\n\t\t\tjson.baseVersion\n\t\t);\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/renameoperation\n */\n\nimport Operation from './operation';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Position from '../position';\n\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RenameOperation extends Operation {\n\t/**\n\t * Creates an operation that changes element's name.\n\t *\n\t * @param {module:engine/model/position~Position} position Position before an element to change.\n\t * @param {String} oldName Current name of the element.\n\t * @param {String} newName New name for the element.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, oldName, newName, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position before an element to change.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/renameoperation~RenameOperation#position\n\t\t */\n\t\tthis.position = position;\n\t\t// This position sticks to the next node because it is a position before the node that we want to change.\n\t\tthis.position.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Current name of the element.\n\t\t *\n\t\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#oldName\n\t\t */\n\t\tthis.oldName = oldName;\n\n\t\t/**\n\t\t * New name for the element.\n\t\t *\n\t\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#newName\n\t\t */\n\t\tthis.newName = newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'rename';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/renameoperation~RenameOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new RenameOperation( this.position.clone(), this.oldName, this.newName, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/renameoperation~RenameOperation}\n\t */\n\tgetReversed() {\n\t\treturn new RenameOperation( this.position.clone(), this.newName, this.oldName, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.position.nodeAfter;\n\n\t\tif ( !( element instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Given position is invalid or node after it is not instance of Element.\n\t\t\t *\n\t\t\t * @error rename-operation-wrong-position\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rename-operation-wrong-position: Given position is invalid or node after it is not an instance of Element.',\n\t\t\t\tthis\n\t\t\t);\n\t\t} else if ( element.name !== this.oldName ) {\n\t\t\t/**\n\t\t\t * Element to change has different name than operation's old name.\n\t\t\t *\n\t\t\t * @error rename-operation-wrong-name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rename-operation-wrong-name: Element to change has different name than operation\\'s old name.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst element = this.position.nodeAfter;\n\n\t\telement.name = this.newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'RenameOperation';\n\t}\n\n\t/**\n\t * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new RenameOperation( Position.fromJSON( json.position, document ), json.oldName, json.newName, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/dropdownpanelview\n */\n\nimport View from '../view';\n\n/**\n * The dropdown panel view class.\n *\n * See {@link module:ui/dropdown/dropdownview~DropdownView} to learn about the common usage.\n *\n * @extends module:ui/view~View\n */\nexport default class DropdownPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Controls whether the panel is visible.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVisible\n\t\t */\n\t\tthis.set( 'isVisible', false );\n\n\t\t/**\n\t\t * The position of the panel, relative to the parent.\n\t\t *\n\t\t * This property is reflected in the CSS class set to {@link #element} that controls\n\t\t * the position of the panel.\n\t\t *\n\t\t * @observable\n\t\t * @default 'se'\n\t\t * @member {'se'|'sw'|'ne'|'nw'} #position\n\t\t */\n\t\tthis.set( 'position', 'se' );\n\n\t\t/**\n\t\t * Collection of the child views in this panel.\n\t\t *\n\t\t * A common child type is the {@link module:ui/list/listview~ListView} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n\t\t * See {@link module:ui/dropdown/utils~addListToDropdown} and\n\t\t * {@link module:ui/dropdown/utils~addToolbarToDropdown} to learn more about child views of dropdowns.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-reset',\n\t\t\t\t\t'ck-dropdown__panel',\n\t\t\t\t\tbind.to( 'position', value => `ck-dropdown__panel_${ value }` ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-dropdown__panel-visible' )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\t// Drag and drop in the panel should not break the selection in the editor.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/228\n\t\t\t\tselectstart: bind.to( evt => evt.preventDefault() )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the view element or first item in view collection on opening dropdown's panel.\n\t *\n\t * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n\t */\n\tfocus() {\n\t\tif ( this.children.length ) {\n\t\t\tthis.children.first.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Focuses the view element or last item in view collection on opening dropdown's panel.\n\t *\n\t * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n\t */\n\tfocusLast() {\n\t\tif ( this.children.length ) {\n\t\t\tconst lastChild = this.children.last;\n\n\t\t\tif ( typeof lastChild.focusLast === 'function' ) {\n\t\t\t\tlastChild.focusLast();\n\t\t\t} else {\n\t\t\t\tlastChild.focus();\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/dropdownview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\nimport '../../theme/components/dropdown/dropdown.css';\n\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\n\n/**\n * The dropdown view class. It manages the dropdown button and dropdown panel.\n *\n * In most cases, the easiest way to create a dropdown is by using the {@link module:ui/dropdown/utils~createDropdown}\n * util:\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * If you want to add a richer content to the dropdown panel, you can use the {@link module:ui/dropdown/utils~addListToDropdown}\n * and {@link module:ui/dropdown/utils~addToolbarToDropdown} helpers. See more examples in\n * {@link module:ui/dropdown/utils~createDropdown} documentation.\n *\n * If you want to create a completely custom dropdown, then you can compose it manually:\n *\n *\t\tconst button = new DropdownButtonView( locale );\n *\t\tconst panel = new DropdownPanelView( locale );\n *\t\tconst dropdown = new DropdownView( locale, button, panel );\n *\n *\t\tbutton.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tpanel.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * However, dropdown created this way will contain little behavior. You will need to implement handlers for actions\n * such as {@link module:ui/bindings/clickoutsidehandler~clickOutsideHandler clicking outside an open dropdown}\n * (which should close it) and support for arrow keys inside the panel. Therefore, unless you really know what\n * you do and you really need to do it, it is recommended to use the {@link module:ui/dropdown/utils~createDropdown} helper.\n *\n * @extends module:ui/view~View\n */\nexport default class DropdownView extends View {\n\t/**\n\t * Creates an instance of the dropdown.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t * @param {module:ui/dropdown/button/dropdownbutton~DropdownButton} buttonView\n\t * @param {module:ui/dropdown/dropdownpanelview~DropdownPanelView} panelView\n\t */\n\tconstructor( locale, buttonView, panelView ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Button of the dropdown view. Clicking the button opens the {@link #panelView}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/button/buttonview~ButtonView} #buttonView\n\t\t */\n\t\tthis.buttonView = buttonView;\n\n\t\t/**\n\t\t * Panel of the dropdown. It opens when the {@link #buttonView} is\n\t\t * {@link module:ui/button/buttonview~ButtonView#event:execute executed} (i.e. clicked).\n\t\t *\n\t\t * Child views can be added to the panel's `children` collection:\n\t\t *\n\t\t *\t\tdropdown.panelView.children.add( childView );\n\t\t *\n\t\t * See {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#children} and\n\t\t * {@link module:ui/viewcollection~ViewCollection#add}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownpanelview~DropdownPanelView} #panelView\n\t\t */\n\t\tthis.panelView = panelView;\n\n\t\t/**\n\t\t * Controls whether the dropdown view is open, i.e. shows or hides the {@link #panelView panel}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isOpen\n\t\t */\n\t\tthis.set( 'isOpen', false );\n\n\t\t/**\n\t\t * Controls whether the dropdown is enabled, i.e. it can be clicked and execute an action.\n\t\t *\n\t\t * See {@link module:ui/button/buttonview~ButtonView#isEnabled}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', true );\n\n\t\t/**\n\t\t * (Optional) The additional CSS class set on the dropdown {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * The position of the panel, relative to the dropdown.\n\t\t *\n\t\t * **Note**: When `'auto'`, the panel will use one of the remaining positions to stay\n\t\t * in the viewport, visible to the user. The positions correspond directly to\n\t\t * {@link module:ui/dropdown/dropdownview~DropdownView.defaultPanelPositions default panel positions}.\n\t\t *\n\t\t * **Note**: This value has an impact on the\n\t\t * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#position} property\n\t\t * each time the panel becomes {@link #isOpen open}.\n\t\t *\n\t\t * @observable\n\t\t * @default 'auto'\n\t\t * @member {'auto'|'se'|'sw'|'ne'|'nw'} #panelPosition\n\t\t */\n\t\tthis.set( 'panelPosition', 'auto' );\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the dropdown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}. It manages\n\t\t * keystrokes of the dropdown:\n\t\t *\n\t\t * * <kbd>▼</kbd> opens the dropdown,\n\t\t * * <kbd>◀</kbd> and <kbd>Esc</kbd> closes the dropdown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-dropdown',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isEnabled', 'ck-disabled', value => !value )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\tbuttonView,\n\t\t\t\tpanelView\n\t\t\t]\n\t\t} );\n\n\t\tbuttonView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-dropdown__button',\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * A child {@link module:ui/list/listview~ListView list view} of the dropdown located\n\t\t * in its {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/list/listview~ListView} #listView\n\t\t */\n\n\t\t/**\n\t\t * A child toolbar of the dropdown located in the\n\t\t * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarView} #toolbarView\n\t\t */\n\n\t\t/**\n\t\t * Fired when the toolbar button or list item is executed.\n\t\t *\n\t\t * For {@link #listView} It fires when a child of some {@link module:ui/list/listitemview~ListItemView}\n\t\t * fired `execute`.\n\t\t *\n\t\t * For {@link #toolbarView} It fires when one of the buttons has been\n\t\t * {@link module:ui/button/buttonview~ButtonView#event:execute executed}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}\n\t\t * or {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n\t\t *\n\t\t * @event execute\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Toggle the dropdown when its button has been clicked.\n\t\tthis.listenTo( this.buttonView, 'open', () => {\n\t\t\tthis.isOpen = !this.isOpen;\n\t\t} );\n\n\t\t// Toggle the visibility of the panel when the dropdown becomes open.\n\t\tthis.panelView.bind( 'isVisible' ).to( this, 'isOpen' );\n\n\t\t// Let the dropdown control the position of the panel. The position must\n\t\t// be updated every time the dropdown is open.\n\t\tthis.on( 'change:isOpen', () => {\n\t\t\tif ( !this.isOpen ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If \"auto\", find the best position of the panel to fit into the viewport.\n\t\t\t// Otherwise, simply assign the static position.\n\t\t\tif ( this.panelPosition === 'auto' ) {\n\t\t\t\tthis.panelView.position = DropdownView._getOptimalPosition( {\n\t\t\t\t\telement: this.panelView.element,\n\t\t\t\t\ttarget: this.buttonView.element,\n\t\t\t\t\tfitInViewport: true,\n\t\t\t\t\tpositions: this._panelPositions\n\t\t\t\t} ).name;\n\t\t\t} else {\n\t\t\t\tthis.panelView.position = this.panelPosition;\n\t\t\t}\n\t\t} );\n\n\t\t// Listen for keystrokes coming from within #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\t// Register #element in the focus tracker.\n\t\tthis.focusTracker.add( this.element );\n\n\t\tconst closeDropdown = ( data, cancel ) => {\n\t\t\tif ( this.isOpen ) {\n\t\t\t\tthis.buttonView.focus();\n\t\t\t\tthis.isOpen = false;\n\t\t\t\tcancel();\n\t\t\t}\n\t\t};\n\n\t\t// Open the dropdown panel using the arrow down key, just like with return or space.\n\t\tthis.keystrokes.set( 'arrowdown', ( data, cancel ) => {\n\t\t\t// Don't open if the dropdown is disabled or already open.\n\t\t\tif ( this.buttonView.isEnabled && !this.isOpen ) {\n\t\t\t\tthis.isOpen = true;\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Block the right arrow key (until nested dropdowns are implemented).\n\t\tthis.keystrokes.set( 'arrowright', ( data, cancel ) => {\n\t\t\tif ( this.isOpen ) {\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Close the dropdown using the arrow left/escape key.\n\t\tthis.keystrokes.set( 'arrowleft', closeDropdown );\n\t\tthis.keystrokes.set( 'esc', closeDropdown );\n\t}\n\n\t/**\n\t * Focuses the {@link #buttonView}.\n\t */\n\tfocus() {\n\t\tthis.buttonView.focus();\n\t}\n\n\t/**\n\t * Returns {@link #panelView panel} positions to be used by the\n\t * {@link module:utils/dom/position~getOptimalPosition `getOptimalPosition()`}\n\t * utility considering the direction of the language the UI of the editor is displayed in.\n\t *\n\t * @type {module:utils/dom/position~Options#positions}\n\t * @private\n\t */\n\tget _panelPositions() {\n\t\tconst { southEast, southWest, northEast, northWest } = DropdownView.defaultPanelPositions;\n\n\t\tif ( this.locale.uiLanguageDirection === 'ltr' ) {\n\t\t\treturn [ southEast, southWest, northEast, northWest ];\n\t\t} else {\n\t\t\treturn [ southWest, southEast, northWest, northEast ];\n\t\t}\n\t}\n}\n\n/**\n * A set of positioning functions used by the dropdown view to determine\n * the optimal position (i.e. fitting into the browser viewport) of its\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel} when\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition} is set to 'auto'`.\n *\n * The available positioning functions are as follow:\n *\n * **South**\n *\n * * `southEast`\n *\n *\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * * `southWest`\n *\n *\t\t         [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * **North**\n *\n * * `northEast`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t[ Button ]\n *\n * * `northWest`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t         [ Button ]\n *\n * Positioning functions are compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that position function returns will be reflected in dropdown panel's class that\n * controls its placement. See {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition}\n * to learn more.\n *\n * @member {Object} module:ui/dropdown/dropdownview~DropdownView.defaultPanelPositions\n */\nDropdownView.defaultPanelPositions = {\n\tsouthEast: buttonRect => {\n\t\treturn {\n\t\t\ttop: buttonRect.bottom,\n\t\t\tleft: buttonRect.left,\n\t\t\tname: 'se'\n\t\t};\n\t},\n\tsouthWest: ( buttonRect, panelRect ) => {\n\t\treturn {\n\t\t\ttop: buttonRect.bottom,\n\t\t\tleft: buttonRect.left - panelRect.width + buttonRect.width,\n\t\t\tname: 'sw'\n\t\t};\n\t},\n\tnorthEast: ( buttonRect, panelRect ) => {\n\t\treturn {\n\t\t\ttop: buttonRect.top - panelRect.height,\n\t\t\tleft: buttonRect.left,\n\t\t\tname: 'ne'\n\t\t};\n\t},\n\tnorthWest: ( buttonRect, panelRect ) => {\n\t\treturn {\n\t\t\ttop: buttonRect.bottom - panelRect.height,\n\t\t\tleft: buttonRect.left - panelRect.width + buttonRect.width,\n\t\t\tname: 'nw'\n\t\t};\n\t}\n};\n\n/**\n * A function used to calculate the optimal position for the dropdown panel.\n *\n * @protected\n * @member {Function} module:ui/dropdown/dropdownview~DropdownView._getOptimalPosition\n */\nDropdownView._getOptimalPosition = getOptimalPosition;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/button/dropdownbuttonview\n */\n\nimport ButtonView from '../../button/buttonview';\n\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport IconView from '../../icon/iconview';\n\n/**\n * The default dropdown button view class.\n *\n *\t\tconst view = new DropdownButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n *\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\n * @extends module:ui/button/buttonview~ButtonView\n */\nexport default class DropdownButtonView extends ButtonView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * An icon that displays arrow to indicate a dropdown button.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/icon/iconview~IconView}\n\t\t */\n\t\tthis.arrowView = this._createArrowView();\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\t'aria-haspopup': true\n\t\t\t}\n\t\t} );\n\n\t\t// The DropdownButton interface expects the open event upon which will open the dropdown.\n\t\tthis.delegate( 'execute' ).to( this, 'open' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.children.add( this.arrowView );\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.\n\t *\n\t * @private\n\t * @returns {module:ui/icon/iconview~IconView}\n\t */\n\t_createArrowView() {\n\t\tconst arrowView = new IconView();\n\n\t\tarrowView.content = dropdownArrowIcon;\n\n\t\tarrowView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-dropdown__arrow'\n\t\t\t}\n\t\t} );\n\n\t\treturn arrowView;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/list/listseparatorview\n */\n\nimport View from '../view';\n\n/**\n * The list separator view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ListSeparatorView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'li',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-list__separator'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/utils\n */\nimport DropdownPanelView from './dropdownpanelview';\nimport DropdownView from './dropdownview';\nimport DropdownButtonView from './button/dropdownbuttonview';\nimport ToolbarView from '../toolbar/toolbarview';\nimport ListView from '../list/listview';\nimport ListItemView from '../list/listitemview';\nimport ListSeparatorView from '../list/listseparatorview';\nimport ButtonView from '../button/buttonview';\nimport SwitchButtonView from '../button/switchbuttonview';\nimport clickOutsideHandler from '../bindings/clickoutsidehandler';\nimport '../../theme/components/dropdown/toolbardropdown.css';\nimport '../../theme/components/dropdown/listdropdown.css';\n/**\n * A helper for creating dropdowns. It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown},\n * with a {@link module:ui/dropdown/button/dropdownbutton~DropdownButton button},\n * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView panel} and all standard dropdown's behaviors.\n *\n * # Creating dropdowns\n *\n * By default, the default {@link module:ui/dropdown/button/dropdownbuttonview~DropdownButtonView} class is used as\n * definition of the button:\n *\n *\t\tconst dropdown = createDropdown( model );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * You can also provide other button views (they need to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface). For instance, you can use\n * {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} to create a dropdown with a split button.\n *\n *\t\tconst dropdown = createDropdown( model, SplitButtonView );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.buttonView.on( 'execute', () => {\n *\t\t\t// Add the behavior of the \"action part\" of the split button.\n *\t\t\t// Split button consists of the \"action part\" and \"arrow part\".\n *\t\t\t// The arrow opens the dropdown while the action part can have some other behavior.\n * \t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * # Adding content to the dropdown's panel\n *\n * The content of the panel can be inserted directly into the `dropdown.panelView.element`:\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n * However, most of the time you will want to add there either a {@link module:ui/list/listview~ListView list of options}\n * or a list of buttons (i.e. a {@link module:ui/toolbar/toolbarview~ToolbarView toolbar}).\n * To simplify the task, you can use, respectively, {@link module:ui/dropdown/utils~addListToDropdown} or\n * {@link module:ui/dropdown/utils~addToolbarToDropdown} utils.\n *\n * @param {module:utils/locale~Locale} locale The locale instance.\n * @param {Function} ButtonClass The dropdown button view class. Needs to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\nexport function createDropdown(locale, ButtonClass = DropdownButtonView) {\n    const buttonView = new ButtonClass(locale);\n    const panelView = new DropdownPanelView(locale);\n    const dropdownView = new DropdownView(locale, buttonView, panelView);\n    buttonView.bind('isEnabled').to(dropdownView);\n    if (buttonView instanceof DropdownButtonView) {\n        buttonView.bind('isOn').to(dropdownView, 'isOpen');\n    } else {\n        buttonView.arrowView.bind('isOn').to(dropdownView, 'isOpen');\n    }\n    addDefaultBehavior(dropdownView);\n    return dropdownView;\n}\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n *\n *\t\tconst buttons = [];\n *\n *\t\t// Either create a new ButtonView instance or create existing.\n *\t\tbuttons.push( new ButtonView() );\n *\t\tbuttons.push( editor.ui.componentFactory.get( 'someButton' ) );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddToolbarToDropdown( dropdown, buttons );\n *\n *\t\tdropdown.toolbarView.isVertical = true;\n *\n *\t\t// Will render a vertical button dropdown labeled \"A button dropdown\"\n *\t\t// with a button group in the panel containing two buttons.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ToolbarView` will be added.\n * @param {Iterable.<module:ui/button/buttonview~ButtonView>} buttons\n */\nexport function addToolbarToDropdown(dropdownView, buttons) {\n    const locale = dropdownView.locale;\n    const t = locale.t;\n    const toolbarView = dropdownView.toolbarView = new ToolbarView(locale);\n    toolbarView.set('ariaLabel', t('Dropdown toolbar'));\n    dropdownView.extendTemplate({ attributes: { class: ['ck-toolbar-dropdown'] } });\n    buttons.map(view => toolbarView.items.add(view));\n    dropdownView.panelView.children.add(toolbarView);\n    toolbarView.items.delegate('execute').to(dropdownView);\n}\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n *\n *\t\tconst items = new Collection();\n *\n *\t\titems.add( {\n *\t\t\ttype: 'button',\n *\t\t\tmodel: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'First item',\n *\t\t\t\tlabelStyle: 'color: red'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\titems.add( {\n *\t\t\t type: 'button',\n *\t\t\t model: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'Second item',\n *\t\t\t\tlabelStyle: 'color: green',\n *\t\t\t\tclass: 'foo'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddListToDropdown( dropdown, items );\n *\n *\t\t// Will render a dropdown with a list in the panel containing two items.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * The `items` collection passed to this methods controls the presence and attributes of respective\n * {@link module:ui/list/listitemview~ListItemView list items}.\n *\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:list/list~List}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ListVIew` will be added.\n * @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} items\n * A collection of the list item definitions to populate the list.\n */\nexport function addListToDropdown(dropdownView, items) {\n    const locale = dropdownView.locale;\n    const listView = dropdownView.listView = new ListView(locale);\n    listView.items.bindTo(items).using(({type, model}) => {\n        if (type === 'separator') {\n            return new ListSeparatorView(locale);\n        } else if (type === 'button' || type === 'switchbutton') {\n            const listItemView = new ListItemView(locale);\n            let buttonView;\n            if (type === 'button') {\n                buttonView = new ButtonView(locale);\n            } else {\n                buttonView = new SwitchButtonView(locale);\n            }\n            // Bind all model properties to the button view.\n            buttonView.bind(...Object.keys(model)).to(model);\n            buttonView.delegate('execute').to(listItemView);\n            listItemView.children.add(buttonView);\n            return listItemView;\n        }\n    });\n    dropdownView.panelView.children.add(listView);\n    listView.items.delegate('execute').to(dropdownView);\n}\n// Add a set of default behaviors to dropdown view.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction addDefaultBehavior(dropdownView) {\n    closeDropdownOnBlur(dropdownView);\n    closeDropdownOnExecute(dropdownView);\n    focusDropdownContentsOnArrows(dropdownView);\n}\n// Adds a behavior to a dropdownView that closes opened dropdown when user clicks outside the dropdown.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnBlur(dropdownView) {\n    dropdownView.on('render', () => {\n        clickOutsideHandler({\n            emitter: dropdownView,\n            activator: () => dropdownView.isOpen,\n            callback: () => {\n                dropdownView.isOpen = false;\n            },\n            contextElements: [dropdownView.element]\n        });\n    });\n}\n// Adds a behavior to a dropdownView that closes the dropdown view on \"execute\" event.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnExecute(dropdownView) {\n    // Close the dropdown when one of the list items has been executed.\n    dropdownView.on('execute', evt => {\n        // Toggling a switch button view should not close the dropdown.\n        if (evt.source instanceof SwitchButtonView) {\n            return;\n        }\n        dropdownView.isOpen = false;\n    });\n}\n// Adds a behavior to a dropdownView that focuses the dropdown's panel view contents on keystrokes.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction focusDropdownContentsOnArrows(dropdownView) {\n    // If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\n    dropdownView.keystrokes.set('arrowdown', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focus();\n            cancel();\n        }\n    });\n    // If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\n    dropdownView.keystrokes.set('arrowup', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focusLast();\n            cancel();\n        }\n    });\n}    /**\n * A definition of the list item used by the {@link module:ui/dropdown/utils~addListToDropdown}\n * utility.\n *\n * @typedef {Object} module:ui/dropdown/utils~ListDropdownItemDefinition\n *\n * @property {String} type Either `'separator'`, `'button'` or `'switchbutton'`.\n * @property {module:ui/model~Model} [model] Model of the item (when **not** `'separator'`).\n * Its properties fuel the newly created list item (or its children, depending on the `type`).\n */","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/diff\n */\n\nimport fastDiff from '../src/fastdiff';\n\n// The following code is based on the \"O(NP) Sequence Comparison Algorithm\"\n// by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n\n/**\n * Calculates the difference between two arrays or strings producing an array containing a list of changes\n * necessary to transform input into output.\n *\n *\t\tdiff( 'aba', 'acca' ); // [ 'equal', 'insert', 'insert', 'delete', 'equal' ]\n *\n * This function is based on the \"O(NP) Sequence Comparison Algorithm\" by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n * Unfortunately, while it gives the most precise results, its to complex for longer strings/arrow (above 200 items).\n * Therefore, `diff()` automatically switches to {@link module:utils/fastdiff~fastDiff `fastDiff()`} when detecting\n * such a scenario. The return formats of both functions are identical.\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Output array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default === is used.\n * @returns {Array} Array of changes.\n */\nexport default function diff( a, b, cmp ) {\n\t// Set the comparator function.\n\tcmp = cmp || function( a, b ) {\n\t\treturn a === b;\n\t};\n\n\tconst aLength = a.length;\n\tconst bLength = b.length;\n\n\t// Perform `fastDiff` for longer strings/arrays (see #269).\n\tif ( aLength > 200 || bLength > 200 || aLength + bLength > 300 ) {\n\t\treturn diff.fastDiff( a, b, cmp, true );\n\t}\n\n\t// Temporary action type statics.\n\tlet _insert, _delete;\n\n\t// Swapped the arrays to use the shorter one as the first one.\n\tif ( bLength < aLength ) {\n\t\tconst tmp = a;\n\n\t\ta = b;\n\t\tb = tmp;\n\n\t\t// We swap the action types as well.\n\t\t_insert = 'delete';\n\t\t_delete = 'insert';\n\t} else {\n\t\t_insert = 'insert';\n\t\t_delete = 'delete';\n\t}\n\n\tconst m = a.length;\n\tconst n = b.length;\n\tconst delta = n - m;\n\n\t// Edit scripts, for each diagonal.\n\tconst es = {};\n\t// Furthest points, the furthest y we can get on each diagonal.\n\tconst fp = {};\n\n\tfunction snake( k ) {\n\t\t// We use -1 as an alternative below to handle initial values ( instead of filling the fp with -1 first ).\n\t\t// Furthest points (y) on the diagonal below k.\n\t\tconst y1 = ( fp[ k - 1 ] !== undefined ? fp[ k - 1 ] : -1 ) + 1;\n\t\t// Furthest points (y) on the diagonal above k.\n\t\tconst y2 = fp[ k + 1 ] !== undefined ? fp[ k + 1 ] : -1;\n\t\t// The way we should go to get further.\n\t\tconst dir = y1 > y2 ? -1 : 1;\n\n\t\t// Clone previous changes array (if any).\n\t\tif ( es[ k + dir ] ) {\n\t\t\tes[ k ] = es[ k + dir ].slice( 0 );\n\t\t}\n\n\t\t// Create changes array.\n\t\tif ( !es[ k ] ) {\n\t\t\tes[ k ] = [];\n\t\t}\n\n\t\t// Push the action.\n\t\tes[ k ].push( y1 > y2 ? _insert : _delete );\n\n\t\t// Set the beginning coordinates.\n\t\tlet y = Math.max( y1, y2 );\n\t\tlet x = y - k;\n\n\t\t// Traverse the diagonal as long as the values match.\n\t\twhile ( x < m && y < n && cmp( a[ x ], b[ y ] ) ) {\n\t\t\tx++;\n\t\t\ty++;\n\t\t\t// Push no change action.\n\t\t\tes[ k ].push( 'equal' );\n\t\t}\n\n\t\treturn y;\n\t}\n\n\tlet p = 0;\n\tlet k;\n\n\t// Traverse the graph until we reach the end of the longer string.\n\tdo {\n\t\t// Updates furthest points and edit scripts for diagonals below delta.\n\t\tfor ( k = -p; k < delta; k++ ) {\n\t\t\tfp[ k ] = snake( k );\n\t\t}\n\n\t\t// Updates furthest points and edit scripts for diagonals above delta.\n\t\tfor ( k = delta + p; k > delta; k-- ) {\n\t\t\tfp[ k ] = snake( k );\n\t\t}\n\n\t\t// Updates furthest point and edit script for the delta diagonal.\n\t\t// note that the delta diagonal is the one which goes through the sink (m, n).\n\t\tfp[ delta ] = snake( delta );\n\n\t\tp++;\n\t} while ( fp[ delta ] !== n );\n\n\t// Return the final list of edit changes.\n\t// We remove the first item that represents the action for the injected nulls.\n\treturn es[ delta ].slice( 1 );\n}\n\n// Store the API in static property to easily overwrite it in tests.\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\ndiff.fastDiff = fastDiff;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/isnode\n */\n\n/**\n * Checks if the object is a native DOM Node.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isNode( obj ) {\n\tif ( obj ) {\n\t\tif ( obj.defaultView ) {\n\t\t\treturn obj instanceof obj.defaultView.Document;\n\t\t} else if ( obj.ownerDocument && obj.ownerDocument.defaultView ) {\n\t\t\treturn obj instanceof obj.ownerDocument.defaultView.Node;\n\t\t}\n\t}\n\n\treturn false;\n}\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/model/documentfragment\n */\n\nimport NodeList from './nodelist';\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * DocumentFragment represents a part of model which does not have a common root but it's top-level nodes\n * can be seen as siblings. In other words, it is a detached part of model tree, without a root.\n *\n * DocumentFragment has own {@link module:engine/model/markercollection~MarkerCollection}. Markers from this collection\n * will be set to the {@link module:engine/model/model~Model#markers model markers} by a\n * {@link module:engine/model/writer~Writer#insert} function.\n */\nexport default class DocumentFragment {\n\t/**\n\t * Creates an empty `DocumentFragment`.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createDocumentFragment} method instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n\t * Nodes to be contained inside the `DocumentFragment`.\n\t */\n\tconstructor( children ) {\n\t\t/**\n\t\t * DocumentFragment static markers map. This is a list of names and {@link module:engine/model/range~Range ranges}\n\t\t * which will be set as Markers to {@link module:engine/model/model~Model#markers model markers collection}\n\t\t * when DocumentFragment will be inserted to the document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Map<String,module:engine/model/range~Range>} module:engine/model/documentfragment~DocumentFragment#markers\n\t\t */\n\t\tthis.markers = new Map();\n\n\t\t/**\n\t\t * List of nodes contained inside the document fragment.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/documentfragment~DocumentFragment#_children\n\t\t */\n\t\tthis._children = new NodeList();\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all nodes contained inside this document fragment.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this.getChildren();\n\t}\n\n\t/**\n\t * Number of this document fragment's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this document fragment's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._children.maxOffset;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {null}\n\t */\n\tget parent() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tdocFrag.is( 'documentFragment' ); // -> true\n\t *\t\tdocFrag.is( 'model:documentFragment' ); // -> true\n\t *\n\t *\t\tdocFrag.is( 'view:documentFragment' ); // -> false\n\t *\t\tdocFrag.is( 'element' ); // -> false\n\t *\t\tdocFrag.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'documentFragment' || type == 'model:documentFragment';\n\t}\n\n\t/**\n\t * Gets the child at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/model/node~Node|null} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children.getNode( index );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all of this document fragment's children.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an index of the given child node. Returns `null` if given node is not a child of this document fragment.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.getNodeIndex( node );\n\t}\n\n\t/**\n\t * Returns the starting offset of given child. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n\t * given node is not a child of this document fragment.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's starting offset.\n\t */\n\tgetChildStartOffset( node ) {\n\t\treturn this._children.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Returns path to a `DocumentFragment`, which is an empty array. Added for compatibility reasons.\n\t *\n\t * @returns {Array}\n\t */\n\tgetPath() {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns a descendant node by its path relative to this element.\n\t *\n\t *\t\t// <this>a<b>c</b></this>\n\t *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n\t *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n\t *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n\t *\n\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n\t * @returns {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tgetNodeByPath( relativePath ) {\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\tfor ( const index of relativePath ) {\n\t\t\tnode = node.getChild( node.offsetToIndex( index ) );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Converts offset \"position\" to index \"position\".\n\t *\n\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n\t * too high, returns index after last child}.\n\t *\n\t *\t\tconst textNode = new Text( 'foo' );\n\t *\t\tconst pElement = new Element( 'p' );\n\t *\t\tconst docFrag = new DocumentFragment( [ textNode, pElement ] );\n\t *\t\tdocFrag.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n\t *\t\tdocFrag.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n\t *\t\tdocFrag.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n\t *\t\tdocFrag.offsetToIndex( 2 ); // Returns 0.\n\t *\t\tdocFrag.offsetToIndex( 3 ); // Returns 1.\n\t *\t\tdocFrag.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\treturn this._children.offsetToIndex( offset );\n\t}\n\n\t/**\n\t * Converts `DocumentFragment` instance to plain object and returns it.\n\t * Takes care of converting all of this document fragment's children.\n\t *\n\t * @returns {Object} `DocumentFragment` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = [];\n\n\t\tfor ( const node of this._children ) {\n\t\t\tjson.push( node.toJSON() );\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a `DocumentFragment` instance from given plain object (i.e. parsed JSON string).\n\t * Converts `DocumentFragment` children to proper nodes.\n\t *\n\t * @param {Object} json Plain object to be converted to `DocumentFragment`.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} `DocumentFragment` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\treturn new DocumentFragment( children );\n\t}\n\n\t/**\n\t * {@link #_insertChild Inserts} one or more nodes at the end of this document fragment.\n\t *\n\t * @protected\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_appendChild( items ) {\n\t\tthis._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n\t * to this document fragment.\n\t *\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_insertChild( index, items ) {\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t}\n\n\t\tthis._children._insertNodes( index, nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index\n\t * and sets {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n\t *\n\t * @protected\n\t * @param {Number} index Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tconst nodes = this._children._removeNodes( index, howMany );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tnode.parent = null;\n\t\t}\n\n\t\treturn nodes;\n\t}\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>}\n// @returns {Iterable.<module:engine/model/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data, node.getAttributes() );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/documentfragment\n */\n\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\n/**\n * Document fragment.\n *\n * To create a new document fragment instance use the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createDocumentFragment `UpcastWriter#createDocumentFragment()`}\n * method.\n */\nexport default class DocumentFragment {\n\t/**\n\t * Creates new DocumentFragment instance.\n\t *\n\t * @protected\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into the created document fragment.\n\t */\n\tconstructor( children ) {\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/element~Element>} module:engine/view/documentfragment~DocumentFragment#_children\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over nodes added to this document fragment.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of child nodes in this document fragment.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {null}\n\t */\n\tget parent() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tdocFrag.is( 'documentFragment' ); // -> true\n\t *\t\tdocFrag.is( 'view:documentFragment' ); // -> true\n\t *\n\t *\t\tdocFrag.is( 'model:documentFragment' ); // -> false\n\t *\t\tdocFrag.is( 'element' ); // -> false\n\t *\t\tdocFrag.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'documentFragment' || type == 'view:documentFragment';\n\t}\n\n\t/**\n\t * {@link module:engine/view/documentfragment~DocumentFragment#_insertChild Insert} a child node or a list of child nodes at the end\n\t * and sets the parent of these nodes to this fragment.\n\t *\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @returns {Number} Number of appended nodes.\n\t */\n\t_appendChild( items ) {\n\t\treturn this._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this fragment.\n\t *\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\t_insertChild( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Fires `change` event with given type of the change.\n\t *\n\t * @private\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Changed node.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_fireChange( type, node ) {\n\t\tthis.fire( 'change:' + type, node );\n\t}\n}\n\nmix( DocumentFragment, EmitterMixin );\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/liverange\n */\n\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * `LiveRange` is a type of {@link module:engine/model/range~Range Range}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Be very careful when dealing with `LiveRange`. Each `LiveRange` instance bind events that might\n * have to be unbound. Use {@link module:engine/model/liverange~LiveRange#detach detach} whenever you don't need `LiveRange` anymore.\n */\nexport default class LiveRange extends Range {\n\t/**\n\t * Creates a live range.\n\t *\n\t * @see module:engine/model/range~Range\n\t */\n\tconstructor( start, end ) {\n\t\tsuper( start, end );\n\n\t\tbindWithDocument.call( this );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by `LiveRange`. Use it whenever you don't need `LiveRange` instance\n\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n\t * referring to it).\n\t */\n\tdetach() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tliveRange.is( 'range' ); // -> true\n\t *\t\tliveRange.is( 'model:range' ); // -> true\n\t *\t\tliveRange.is( 'liveRange' ); // -> true\n\t *\t\tliveRange.is( 'model:liveRange' ); // -> true\n\t *\n\t *\t\tliveRange.is( 'view:range' ); // -> false\n\t *\t\tliveRange.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'liveRange' || type == 'model:liveRange' || super.is( type );\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/range~Range range instance} that is equal to this live range.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\ttoRange() {\n\t\treturn new Range( this.start, this.end );\n\t}\n\n\t/**\n\t * Creates a `LiveRange` instance that is equal to the given range.\n\t *\n\t * @param {module:engine/model/range~Range} range\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\tstatic fromRange( range ) {\n\t\treturn new LiveRange( range.start, range.end );\n\t}\n\n\t/**\n\t * @see module:engine/model/range~Range._createIn\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liverange~LiveRange._createIn\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * @see module:engine/model/range~Range._createOn\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liverange~LiveRange._createOn\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * @see module:engine/model/range~Range._createFromPositionAndShift\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liverange~LiveRange._createFromPositionAndShift\n\t * @param {module:engine/model/position~Position} position\n\t * @param {Number} shift\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * Fired when `LiveRange` instance boundaries have changed due to changes in the\n\t * {@link module:engine/model/document~Document document}.\n\t *\n\t * @event change:range\n\t * @param {module:engine/model/range~Range} oldRange Range with start and end position equal to start and end position of this live\n\t * range before it got changed.\n\t * @param {Object} data Object with additional information about the change.\n\t * @param {module:engine/model/position~Position|null} data.deletionPosition Source position for remove and merge changes.\n\t * Available if the range was moved to the graveyard root, `null` otherwise.\n\t */\n\n\t/**\n\t * Fired when `LiveRange` instance boundaries have not changed after a change in {@link module:engine/model/document~Document document}\n\t * but the change took place inside the range, effectively changing its content.\n\t *\n\t * @event change:content\n\t * @param {module:engine/model/range~Range} range Range with start and end position equal to start and end position of\n\t * change range.\n\t * @param {Object} data Object with additional information about the change.\n\t * @param {null} data.deletionPosition Due to the nature of this event, this property is always set to `null`. It is passed\n\t * for compatibility with the {@link module:engine/model/liverange~LiveRange#event:change:range} event.\n\t */\n}\n\n// Binds this `LiveRange` to the {@link module:engine/model/document~Document document}\n// that owns this range's {@link module:engine/model/range~Range#root root}.\n//\n// @private\nfunction bindWithDocument() {\n\tthis.listenTo(\n\t\tthis.root.document.model,\n\t\t'applyOperation',\n\t\t( event, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransform.call( this, operation );\n\t\t},\n\t\t{ priority: 'low' }\n\t);\n}\n\n// Updates this range accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform( operation ) {\n\t// Transform the range by the operation. Join the result ranges if needed.\n\tconst ranges = this.getTransformedByOperation( operation );\n\tconst result = Range._createFromRanges( ranges );\n\n\tconst boundariesChanged = !result.isEqual( this );\n\tconst contentChanged = doesOperationChangeRangeContent( this, operation );\n\n\tlet deletionPosition = null;\n\n\tif ( boundariesChanged ) {\n\t\t// If range boundaries have changed, fire `change:range` event.\n\t\t//\n\t\tif ( result.root.rootName == '$graveyard' ) {\n\t\t\t// If the range was moved to the graveyard root, set `deletionPosition`.\n\t\t\tif ( operation.type == 'remove' ) {\n\t\t\t\tdeletionPosition = operation.sourcePosition;\n\t\t\t} else {\n\t\t\t\t// Merge operation.\n\t\t\t\tdeletionPosition = operation.deletionPosition;\n\t\t\t}\n\t\t}\n\n\t\tconst oldRange = this.toRange();\n\n\t\tthis.start = result.start;\n\t\tthis.end = result.end;\n\n\t\tthis.fire( 'change:range', oldRange, { deletionPosition } );\n\t} else if ( contentChanged ) {\n\t\t// If range boundaries have not changed, but there was change inside the range, fire `change:content` event.\n\t\tthis.fire( 'change:content', this.toRange(), { deletionPosition } );\n\t}\n}\n\n// Checks whether given operation changes something inside the range (even if it does not change boundaries).\n//\n// @private\n// @param {module:engine/model/range~Range} range Range to check.\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n// @returns {Boolean}\nfunction doesOperationChangeRangeContent( range, operation ) {\n\tswitch ( operation.type ) {\n\t\tcase 'insert':\n\t\t\treturn range.containsPosition( operation.position );\n\t\tcase 'move':\n\t\tcase 'remove':\n\t\tcase 'reinsert':\n\t\tcase 'merge':\n\t\t\treturn range.containsPosition( operation.sourcePosition ) ||\n\t\t\t\trange.start.isEqual( operation.sourcePosition ) ||\n\t\t\t\trange.containsPosition( operation.targetPosition );\n\t\tcase 'split':\n\t\t\treturn range.containsPosition( operation.splitPosition ) || range.containsPosition( operation.insertionPosition );\n\t}\n\n\treturn false;\n}\n\nmix( LiveRange, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/emittermixin\n */\n\nimport { default as EmitterMixin, _getEmitterListenedTo, _setEmitterId } from '../emittermixin';\nimport uid from '../uid';\nimport isNode from './isnode';\nimport isWindow from './iswindow';\nimport { extend } from 'lodash-es';\n\n/**\n * Mixin that injects the DOM events API into its host. It provides the API\n * compatible with {@link module:utils/emittermixin~EmitterMixin}.\n *\n * DOM emitter mixin is by default available in the {@link module:ui/view~View} class,\n * but it can also be mixed into any other class:\n *\n *\t\timport mix from '../utils/mix.js';\n *\t\timport DomEmitterMixin from '../utils/dom/emittermixin.js';\n *\n *\t\tclass SomeView {}\n *\t\tmix( SomeView, DomEmitterMixin );\n *\n *\t\tconst view = new SomeView();\n *\t\tview.listenTo( domElement, ( evt, domEvt ) => {\n *\t\t\tconsole.log( evt, domEvt );\n *\t\t} );\n *\n * @mixin EmitterMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n */\nconst DomEmitterMixin = extend( {}, EmitterMixin, {\n\t/**\n\t * Registers a callback function to be executed when an event is fired in a specific Emitter or DOM Node.\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} emitter The object that fires the event.\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n\t * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n\t * order they were added.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t */\n\tlistenTo( emitter, ...rest ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, replace the argument with\n\t\t// corresponding ProxyEmitter (or create one if not existing).\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxy = this._getProxyEmitter( emitter ) || new ProxyEmitter( emitter );\n\n\t\t\tproxy.attach( ...rest );\n\n\t\t\temitter = proxy;\n\t\t}\n\n\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\tEmitterMixin.listenTo.call( this, emitter, ...rest );\n\t},\n\n\t/**\n\t * Stops listening for events. It can be used at different levels:\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * * To stop listening to a specific callback.\n\t * * To stop listening to a specific event.\n\t * * To stop listening to all events fired by a specific object.\n\t * * To stop listening to all events fired by all object.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n\t * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n\t * for all events from `emitter`.\n\t * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n\t * `event`.\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, replace the argument with corresponding ProxyEmitter.\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxy = this._getProxyEmitter( emitter );\n\n\t\t\t// Element has no listeners.\n\t\t\tif ( !proxy ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\temitter = proxy;\n\t\t}\n\n\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\tEmitterMixin.stopListening.call( this, emitter, event, callback );\n\n\t\tif ( emitter instanceof ProxyEmitter ) {\n\t\t\temitter.detach( event );\n\t\t}\n\t},\n\n\t/**\n\t * Retrieves ProxyEmitter instance for given DOM Node residing in this Host.\n\t *\n\t * @pivate\n\t * @param {Node} node DOM Node of the ProxyEmitter.\n\t * @returns {module:utils/dom/emittermixin~ProxyEmitter} ProxyEmitter instance or null.\n\t */\n\t_getProxyEmitter( node ) {\n\t\treturn _getEmitterListenedTo( this, getNodeUID( node ) );\n\t}\n} );\n\nexport default DomEmitterMixin;\n\n/**\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#on}.\n *\n *                                  listenTo( click, ... )\n *                    +-----------------------------------------+\n *                    |              stopListening( ... )       |\n *     +----------------------------+                           |             addEventListener( click, ... )\n *     | Host                       |                           |   +---------------------------------------------+\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\n *     | _listeningTo: {            |                +----------v-------------+                                   |\n *     |   UID: {                   |                | ProxyEmitter           |                                   |\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\n *     | }                          |                | _domListeners: {},     |                                   |\n *     | +------------------------+ |                | _emitterId: UID        |                                   |\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\n *     | +------------------------+ |                           |   |                                             |\n *     +--------------^-------------+                           |   +---------------------------------------------+\n *                    |                                         |                  click (DOM Event)\n *                    +-----------------------------------------+\n *                                fire( click, DOM Event )\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n * @private\n */\nclass ProxyEmitter {\n\t/**\n\t * @param {Node} node DOM Node that fires events.\n\t * @returns {Object} ProxyEmitter instance bound to the DOM Node.\n\t */\n\tconstructor( node ) {\n\t\t// Set emitter ID to match DOM Node \"expando\" property.\n\t\t_setEmitterId( this, getNodeUID( node ) );\n\n\t\t// Remember the DOM Node this ProxyEmitter is bound to.\n\t\tthis._domNode = node;\n\t}\n}\n\nextend( ProxyEmitter.prototype, EmitterMixin, {\n\t/**\n\t * Collection of native DOM listeners.\n\t *\n\t * @private\n\t * @member {Object} module:utils/dom/emittermixin~ProxyEmitter#_domListeners\n\t */\n\n\t/**\n\t * Registers a callback function to be executed when an event is fired.\n\t *\n\t * It attaches a native DOM listener to the DOM Node. When fired,\n\t * a corresponding Emitter event will also fire with DOM Event object as an argument.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#attach\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t */\n\tattach( event, callback, options = {} ) {\n\t\t// If the DOM Listener for given event already exist it is pointless\n\t\t// to attach another one.\n\t\tif ( this._domListeners && this._domListeners[ event ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domListener = this._createDomListener( event, !!options.useCapture );\n\n\t\t// Attach the native DOM listener to DOM Node.\n\t\tthis._domNode.addEventListener( event, domListener, !!options.useCapture );\n\n\t\tif ( !this._domListeners ) {\n\t\t\tthis._domListeners = {};\n\t\t}\n\n\t\t// Store the native DOM listener in this ProxyEmitter. It will be helpful\n\t\t// when stopping listening to the event.\n\t\tthis._domListeners[ event ] = domListener;\n\t},\n\n\t/**\n\t * Stops executing the callback on the given event.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#detach\n\t * @param {String} event The name of the event.\n\t */\n\tdetach( event ) {\n\t\tlet events;\n\n\t\t// Remove native DOM listeners which are orphans. If no callbacks\n\t\t// are awaiting given event, detach native DOM listener from DOM Node.\n\t\t// See: {@link attach}.\n\n\t\tif ( this._domListeners[ event ] && ( !( events = this._events[ event ] ) || !events.callbacks.length ) ) {\n\t\t\tthis._domListeners[ event ].removeListener();\n\t\t}\n\t},\n\n\t/**\n\t * Creates a native DOM listener callback. When the native DOM event\n\t * is fired it will fire corresponding event on this ProxyEmitter.\n\t * Note: A native DOM Event is passed as an argument.\n\t *\n\t * @private\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#_createDomListener\n\t * @param {String} event The name of the event.\n\t * @param {Boolean} useCapture Indicates whether the listener was created for capturing event.\n\t * @returns {Function} The DOM listener callback.\n\t */\n\t_createDomListener( event, useCapture ) {\n\t\tconst domListener = domEvt => {\n\t\t\tthis.fire( event, domEvt );\n\t\t};\n\n\t\t// Supply the DOM listener callback with a function that will help\n\t\t// detach it from the DOM Node, when it is no longer necessary.\n\t\t// See: {@link detach}.\n\t\tdomListener.removeListener = () => {\n\t\t\tthis._domNode.removeEventListener( event, domListener, useCapture );\n\t\t\tdelete this._domListeners[ event ];\n\t\t};\n\n\t\treturn domListener;\n\t}\n} );\n\n// Gets an unique DOM Node identifier. The identifier will be set if not defined.\n//\n// @private\n// @param {Node} node\n// @returns {String} UID for given DOM Node.\nfunction getNodeUID( node ) {\n\treturn node[ 'data-ck-expando' ] || ( node[ 'data-ck-expando' ] = uid() );\n}\n\n/**\n * Interface representing classes which mix in {@link module:utils/dom/emittermixin~EmitterMixin}.\n *\n * @interface Emitter\n */\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nexport default eq;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nexport default listCacheClear;\n","import eq from './eq.js';\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nexport default assocIndexOf;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nexport default listCacheDelete;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nexport default listCacheGet;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nexport default listCacheHas;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nexport default listCacheSet;\n","import listCacheClear from './_listCacheClear.js';\nimport listCacheDelete from './_listCacheDelete.js';\nimport listCacheGet from './_listCacheGet.js';\nimport listCacheHas from './_listCacheHas.js';\nimport listCacheSet from './_listCacheSet.js';\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nexport default ListCache;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/containerelement\n */\n\nimport Element from './element';\n\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly used for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * The container element should be your default choice when writing a converter, unless:\n *\n * * this element represents a model text attribute (then use {@link module:engine/view/attributeelement~AttributeElement}),\n * * this is an empty element like `<img>` (then use {@link module:engine/view/emptyelement~EmptyElement}),\n * * this is a root element,\n * * this is a nested editable element (then use  {@link module:engine/view/editableelement~EditableElement}).\n *\n * To create a new container element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `DowncastWriter#createContainerElement()`}\n * method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class ContainerElement extends Element {\n\t/**\n\t * Creates a container element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement\n\t * @see module:engine/view/element~Element\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tcontainerElement.is( 'containerElement' ); // -> true\n\t *\t\tcontainerElement.is( 'element' ); // -> true\n\t *\t\tcontainerElement.is( 'node' ); // -> true\n\t *\t\tcontainerElement.is( 'view:containerElement' ); // -> true\n\t *\t\tcontainerElement.is( 'view:element' ); // -> true\n\t *\t\tcontainerElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\tcontainerElement.is( 'model:element' ); // -> false\n\t *\t\tcontainerElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is a container element, you can also check its\n\t * {@link module:engine/view/containerelement~ContainerElement#name name}:\n\t *\n\t *\t\tcontainerElement.is( 'div' ); // -> true if this is a div container element\n\t *\t\tcontainerElement.is( 'contaienrElement', 'div' ); // -> same as above\n\t *\t\ttext.is( 'div' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type && type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'containerElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'containerElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n}\n\n/**\n * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n *\n * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n */\nexport function getFillerOffset() {\n\tconst children = [ ...this.getChildren() ];\n\tconst lastChild = children[ this.childCount - 1 ];\n\n\t// Block filler is required after a `<br>` if it's the last element in its container. See #1422.\n\tif ( lastChild && lastChild.is( 'element', 'br' ) ) {\n\t\treturn this.childCount;\n\t}\n\n\tfor ( const child of children ) {\n\t\t// If there's any non-UI element – don't render the bogus.\n\t\tif ( !child.is( 'uiElement' ) ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// If there are only UI elements – render the bogus at the end of the element.\n\treturn this.childCount;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/indexof\n */\n\n/**\n * Returns index of the node in the parent element.\n *\n * @param {Node} node Node which index is tested.\n * @returns {Number} Index of the node in the parent element. Returns 0 if node has no parent.\n */\nexport default function indexOf( node ) {\n\tlet index = 0;\n\n\twhile ( node.previousSibling ) {\n\t\tnode = node.previousSibling;\n\t\tindex++;\n\t}\n\n\treturn index;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals Node */\n\n/**\n * @module utils/dom/getancestors\n */\n\n/**\n * Returns all ancestors of given DOM node, starting from the top-most (root). Includes the given node itself. If the\n * node is a part of `DocumentFragment` that `DocumentFragment` will be returned. In contrary, if the node is\n * appended to a `Document`, that `Document` will not be returned (algorithms operating on DOM tree care for `Document#documentElement`\n * at most, which will be returned).\n *\n * @param {Node} node DOM node.\n * @returns {Array.<Node|DocumentFragment>} Array of given `node` parents.\n */\nexport default function getAncestors( node ) {\n\tconst nodes = [];\n\n\t// We are interested in `Node`s `DocumentFragment`s only.\n\twhile ( node && node.nodeType != Node.DOCUMENT_NODE ) {\n\t\tnodes.unshift( node );\n\t\tnode = node.parentNode;\n\t}\n\n\treturn nodes;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/domconverter\n */\n\n/* globals document, Node, NodeFilter, Text */\n\nimport ViewText from './text';\nimport ViewElement from './element';\nimport ViewPosition from './position';\nimport ViewRange from './range';\nimport ViewSelection from './selection';\nimport ViewDocumentFragment from './documentfragment';\nimport ViewTreeWalker from './treewalker';\nimport { BR_FILLER, INLINE_FILLER_LENGTH, isBlockFiller, isInlineFiller, startsWithFiller, getDataWithoutFiller } from './filler';\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport indexOf from '@ckeditor/ckeditor5-utils/src/dom/indexof';\nimport getAncestors from '@ckeditor/ckeditor5-utils/src/dom/getancestors';\nimport getCommonAncestor from '@ckeditor/ckeditor5-utils/src/dom/getcommonancestor';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport { isElement } from 'lodash-es';\n\n/**\n * DomConverter is a set of tools to do transformations between DOM nodes and view nodes. It also handles\n * {@link module:engine/view/domconverter~DomConverter#bindElements binding} these nodes.\n *\n * The instance of DOMConverter is available in {@link module:engine/view/view~View#domConverter `editor.editing.view.domConverter`}.\n *\n * DomConverter does not check which nodes should be rendered (use {@link module:engine/view/renderer~Renderer}), does not keep a\n * state of a tree nor keeps synchronization between tree view and DOM tree (use {@link module:engine/view/document~Document}).\n *\n * DomConverter keeps DOM elements to View element bindings, so when the converter will be destroyed, the binding will\n * be lost. Two converters will keep separate binding maps, so one tree view can be bound with two DOM trees.\n */\nexport default class DomConverter {\n\t/**\n\t * Creates DOM converter.\n\t *\n\t * @param {Object} options Object with configuration options.\n\t * @param {Function} [options.blockFiller=module:engine/view/filler~BR_FILLER] Block filler creator.\n\t */\n\tconstructor( options = {} ) {\n\t\t// Using WeakMap prevent memory leaks: when the converter will be destroyed all referenced between View and DOM\n\t\t// will be removed. Also because it is a *Weak*Map when both view and DOM elements will be removed referenced\n\t\t// will be also removed, isn't it brilliant?\n\t\t//\n\t\t// Yes, PJ. It is.\n\t\t//\n\t\t// You guys so smart.\n\t\t//\n\t\t// I've been here. Seen stuff. Afraid of code now.\n\n\t\t/**\n\t\t * Block {@link module:engine/view/filler filler} creator, which is used to create all block fillers during the\n\t\t * view to DOM conversion and to recognize block fillers during the DOM to view conversion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Function} module:engine/view/domconverter~DomConverter#blockFiller\n\t\t */\n\t\tthis.blockFiller = options.blockFiller || BR_FILLER;\n\n\t\t/**\n\t\t * Tag names of DOM `Element`s which are considered pre-formatted elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#preElements\n\t\t */\n\t\tthis.preElements = [ 'pre' ];\n\n\t\t/**\n\t\t * Tag names of DOM `Element`s which are considered block elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#blockElements\n\t\t */\n\t\tthis.blockElements = [ 'p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ];\n\n\t\t/**\n\t\t * DOM to View mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_domToViewMapping\n\t\t */\n\t\tthis._domToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View to DOM mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_viewToDomMapping\n\t\t */\n\t\tthis._viewToDomMapping = new WeakMap();\n\n\t\t/**\n\t\t * Holds mapping between fake selection containers and corresponding view selections.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_fakeSelectionMapping\n\t\t */\n\t\tthis._fakeSelectionMapping = new WeakMap();\n\t}\n\n\t/**\n\t * Binds given DOM element that represents fake selection to {@link module:engine/view/documentselection~DocumentSelection\n\t * document selection}. Document selection copy is stored and can be retrieved by\n\t * {@link module:engine/view/domconverter~DomConverter#fakeSelectionToView} method.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @param {module:engine/view/documentselection~DocumentSelection} viewDocumentSelection\n\t */\n\tbindFakeSelection( domElement, viewDocumentSelection ) {\n\t\tthis._fakeSelectionMapping.set( domElement, new ViewSelection( viewDocumentSelection ) );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/view/selection~Selection view selection} instance corresponding to\n\t * given DOM element that represents fake selection. Returns `undefined` if binding to given DOM element does not exists.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @returns {module:engine/view/selection~Selection|undefined}\n\t */\n\tfakeSelectionToView( domElement ) {\n\t\treturn this._fakeSelectionMapping.get( domElement );\n\t}\n\n\t/**\n\t * Binds DOM and View elements, so it will be possible to get corresponding elements using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {HTMLElement} domElement DOM element to bind.\n\t * @param {module:engine/view/element~Element} viewElement View element to bind.\n\t */\n\tbindElements( domElement, viewElement ) {\n\t\tthis._domToViewMapping.set( domElement, viewElement );\n\t\tthis._viewToDomMapping.set( viewElement, domElement );\n\t}\n\n\t/**\n\t * Unbinds given `domElement` from the view element it was bound to. Unbinding is deep, meaning that all children of\n\t * `domElement` will be unbound too.\n\t *\n\t * @param {HTMLElement} domElement DOM element to unbind.\n\t */\n\tunbindDomElement( domElement ) {\n\t\tconst viewElement = this._domToViewMapping.get( domElement );\n\n\t\tif ( viewElement ) {\n\t\t\tthis._domToViewMapping.delete( domElement );\n\t\t\tthis._viewToDomMapping.delete( viewElement );\n\n\t\t\t// Use Array.from because of MS Edge (#923).\n\t\t\tfor ( const child of Array.from( domElement.childNodes ) ) {\n\t\t\t\tthis.unbindDomElement( child );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Binds DOM and View document fragments, so it will be possible to get corresponding document fragments using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {DocumentFragment} domFragment DOM document fragment to bind.\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment View document fragment to bind.\n\t */\n\tbindDocumentFragments( domFragment, viewFragment ) {\n\t\tthis._domToViewMapping.set( domFragment, viewFragment );\n\t\tthis._viewToDomMapping.set( viewFragment, domFragment );\n\t}\n\n\t/**\n\t * Converts view to DOM. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View node or document fragment to transform.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @returns {Node|DocumentFragment} Converted node or DocumentFragment.\n\t */\n\tviewToDom( viewNode, domDocument, options = {} ) {\n\t\tif ( viewNode.is( 'text' ) ) {\n\t\t\tconst textData = this._processDataFromViewText( viewNode );\n\n\t\t\treturn domDocument.createTextNode( textData );\n\t\t} else {\n\t\t\tif ( this.mapViewToDom( viewNode ) ) {\n\t\t\t\treturn this.mapViewToDom( viewNode );\n\t\t\t}\n\n\t\t\tlet domElement;\n\n\t\t\tif ( viewNode.is( 'documentFragment' ) ) {\n\t\t\t\t// Create DOM document fragment.\n\t\t\t\tdomElement = domDocument.createDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domElement, viewNode );\n\t\t\t\t}\n\t\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\t\t// UIElement has its own render() method (see #799).\n\t\t\t\tdomElement = viewNode.render( domDocument );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\treturn domElement;\n\t\t\t} else {\n\t\t\t\t// Create DOM element.\n\t\t\t\tdomElement = domDocument.createElement( viewNode.name );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tfor ( const key of viewNode.getAttributeKeys() ) {\n\t\t\t\t\tdomElement.setAttribute( key, viewNode.getAttribute( key ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.viewChildrenToDom( viewNode, domDocument, options ) ) {\n\t\t\t\t\tdomElement.appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn domElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the view element to DOM using the\n\t * {@link module:engine/view/domconverter~DomConverter#viewToDom} method.\n\t * Additionally, this method adds block {@link module:engine/view/filler filler} to the list of children, if needed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElement Parent view element.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#viewToDom} options parameter.\n\t * @returns {Iterable.<Node>} DOM nodes.\n\t */\n\t* viewChildrenToDom( viewElement, domDocument, options = {} ) {\n\t\tconst fillerPositionOffset = viewElement.getFillerOffset && viewElement.getFillerOffset();\n\t\tlet offset = 0;\n\n\t\tfor ( const childView of viewElement.getChildren() ) {\n\t\t\tif ( fillerPositionOffset === offset ) {\n\t\t\t\tyield this.blockFiller( domDocument );\n\t\t\t}\n\n\t\t\tyield this.viewToDom( childView, domDocument, options );\n\n\t\t\toffset++;\n\t\t}\n\n\t\tif ( fillerPositionOffset === offset ) {\n\t\t\tyield this.blockFiller( domDocument );\n\t\t}\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/range~Range} to DOM range.\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {Range} DOM range.\n\t */\n\tviewRangeToDom( viewRange ) {\n\t\tconst domStart = this.viewPositionToDom( viewRange.start );\n\t\tconst domEnd = this.viewPositionToDom( viewRange.end );\n\n\t\tconst domRange = document.createRange();\n\t\tdomRange.setStart( domStart.parent, domStart.offset );\n\t\tdomRange.setEnd( domEnd.parent, domEnd.offset );\n\n\t\treturn domRange;\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/position~Position} to DOM parent and offset.\n\t *\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t * If the converted position is directly before inline filler it is moved inside the filler.\n\t *\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {Object|null} position DOM position or `null` if view position could not be converted to DOM.\n\t * @returns {Node} position.parent DOM position parent.\n\t * @returns {Number} position.offset DOM position offset.\n\t */\n\tviewPositionToDom( viewPosition ) {\n\t\tconst viewParent = viewPosition.parent;\n\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\tconst domParent = this.findCorrespondingDomText( viewParent );\n\n\t\t\tif ( !domParent ) {\n\t\t\t\t// Position is in a view text node that has not been rendered to DOM yet.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet offset = viewPosition.offset;\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset += INLINE_FILLER_LENGTH;\n\t\t\t}\n\n\t\t\treturn { parent: domParent, offset };\n\t\t} else {\n\t\t\t// viewParent is instance of ViewElement.\n\t\t\tlet domParent, domBefore, domAfter;\n\n\t\t\tif ( viewPosition.offset === 0 ) {\n\t\t\t\tdomParent = this.mapViewToDom( viewParent );\n\n\t\t\t\tif ( !domParent ) {\n\t\t\t\t\t// Position is in a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomAfter = domParent.childNodes[ 0 ];\n\t\t\t} else {\n\t\t\t\tconst nodeBefore = viewPosition.nodeBefore;\n\n\t\t\t\tdomBefore = nodeBefore.is( 'text' ) ?\n\t\t\t\t\tthis.findCorrespondingDomText( nodeBefore ) :\n\t\t\t\t\tthis.mapViewToDom( viewPosition.nodeBefore );\n\n\t\t\t\tif ( !domBefore ) {\n\t\t\t\t\t// Position is after a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomParent = domBefore.parentNode;\n\t\t\t\tdomAfter = domBefore.nextSibling;\n\t\t\t}\n\n\t\t\t// If there is an inline filler at position return position inside the filler. We should never return\n\t\t\t// the position before the inline filler.\n\t\t\tif ( isText( domAfter ) && startsWithFiller( domAfter ) ) {\n\t\t\t\treturn { parent: domAfter, offset: INLINE_FILLER_LENGTH };\n\t\t\t}\n\n\t\t\tconst offset = domBefore ? indexOf( domBefore ) + 1 : 0;\n\n\t\t\treturn { parent: domParent, offset };\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM to view. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items. For\n\t * {@link module:engine/view/filler fillers} `null` will be returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {Node|DocumentFragment} domNode DOM node or document fragment to transform.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @param {Boolean} [options.keepOriginalCase=false] If `false`, node's tag name will be converter to lower case.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} Converted node or document fragment\n\t * or `null` if DOM node is a {@link module:engine/view/filler filler} or the given node is an empty text node.\n\t */\n\tdomToView( domNode, options = {} ) {\n\t\tif ( isBlockFiller( domNode, this.blockFiller ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// When node is inside UIElement return that UIElement as it's view representation.\n\t\tconst uiElement = this.getParentUIElement( domNode, this._domToViewMapping );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tif ( isText( domNode ) ) {\n\t\t\tif ( isInlineFiller( domNode ) ) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tconst textData = this._processDataFromDomText( domNode );\n\n\t\t\t\treturn textData === '' ? null : new ViewText( textData );\n\t\t\t}\n\t\t} else if ( this.isComment( domNode ) ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tif ( this.mapDomToView( domNode ) ) {\n\t\t\t\treturn this.mapDomToView( domNode );\n\t\t\t}\n\n\t\t\tlet viewElement;\n\n\t\t\tif ( this.isDocumentFragment( domNode ) ) {\n\t\t\t\t// Create view document fragment.\n\t\t\t\tviewElement = new ViewDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domNode, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Create view element.\n\t\t\t\tconst viewName = options.keepOriginalCase ? domNode.tagName : domNode.tagName.toLowerCase();\n\t\t\t\tviewElement = new ViewElement( viewName );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domNode, viewElement );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tconst attrs = domNode.attributes;\n\n\t\t\t\tfor ( let i = attrs.length - 1; i >= 0; i-- ) {\n\t\t\t\t\tviewElement._setAttribute( attrs[ i ].name, attrs[ i ].value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.domChildrenToView( domNode, options ) ) {\n\t\t\t\t\tviewElement._appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn viewElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the DOM element to view nodes using\n\t * the {@link module:engine/view/domconverter~DomConverter#domToView} method.\n\t * Additionally this method omits block {@link module:engine/view/filler filler}, if it exists in the DOM parent.\n\t *\n\t * @param {HTMLElement} domElement Parent DOM element.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n\t * @returns {Iterable.<module:engine/view/node~Node>} View nodes.\n\t */\n\t* domChildrenToView( domElement, options = {} ) {\n\t\tfor ( let i = 0; i < domElement.childNodes.length; i++ ) {\n\t\t\tconst domChild = domElement.childNodes[ i ];\n\t\t\tconst viewChild = this.domToView( domChild, options );\n\n\t\t\tif ( viewChild !== null ) {\n\t\t\t\tyield viewChild;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM selection to view {@link module:engine/view/selection~Selection}.\n\t * Ranges which cannot be converted will be omitted.\n\t *\n\t * @param {Selection} domSelection DOM selection.\n\t * @returns {module:engine/view/selection~Selection} View selection.\n\t */\n\tdomSelectionToView( domSelection ) {\n\t\t// DOM selection might be placed in fake selection container.\n\t\t// If container contains fake selection - return corresponding view selection.\n\t\tif ( domSelection.rangeCount === 1 ) {\n\t\t\tlet container = domSelection.getRangeAt( 0 ).startContainer;\n\n\t\t\t// The DOM selection might be moved to the text node inside the fake selection container.\n\t\t\tif ( isText( container ) ) {\n\t\t\t\tcontainer = container.parentNode;\n\t\t\t}\n\n\t\t\tconst viewSelection = this.fakeSelectionToView( container );\n\n\t\t\tif ( viewSelection ) {\n\t\t\t\treturn viewSelection;\n\t\t\t}\n\t\t}\n\n\t\tconst isBackward = this.isDomSelectionBackward( domSelection );\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( let i = 0; i < domSelection.rangeCount; i++ ) {\n\t\t\t// DOM Range have correct start and end, no matter what is the DOM Selection direction. So we don't have to fix anything.\n\t\t\tconst domRange = domSelection.getRangeAt( i );\n\t\t\tconst viewRange = this.domRangeToView( domRange );\n\n\t\t\tif ( viewRange ) {\n\t\t\t\tviewRanges.push( viewRange );\n\t\t\t}\n\t\t}\n\n\t\treturn new ViewSelection( viewRanges, { backward: isBackward } );\n\t}\n\n\t/**\n\t * Converts DOM Range to view {@link module:engine/view/range~Range}.\n\t * If the start or end position can not be converted `null` is returned.\n\t *\n\t * @param {Range} domRange DOM range.\n\t * @returns {module:engine/view/range~Range|null} View range.\n\t */\n\tdomRangeToView( domRange ) {\n\t\tconst viewStart = this.domPositionToView( domRange.startContainer, domRange.startOffset );\n\t\tconst viewEnd = this.domPositionToView( domRange.endContainer, domRange.endOffset );\n\n\t\tif ( viewStart && viewEnd ) {\n\t\t\treturn new ViewRange( viewStart, viewEnd );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Converts DOM parent and offset to view {@link module:engine/view/position~Position}.\n\t *\n\t * If the position is inside a {@link module:engine/view/filler filler} which has no corresponding view node,\n\t * position of the filler will be converted and returned.\n\t *\n\t * If the position is inside DOM element rendered by {@link module:engine/view/uielement~UIElement}\n\t * that position will be converted to view position before that UIElement.\n\t *\n\t * If structures are too different and it is not possible to find corresponding position then `null` will be returned.\n\t *\n\t * @param {Node} domParent DOM position parent.\n\t * @param {Number} domOffset DOM position offset.\n\t * @returns {module:engine/view/position~Position} viewPosition View position.\n\t */\n\tdomPositionToView( domParent, domOffset ) {\n\t\tif ( isBlockFiller( domParent, this.blockFiller ) ) {\n\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t}\n\n\t\t// If position is somewhere inside UIElement - return position before that element.\n\t\tconst viewElement = this.mapDomToView( domParent );\n\n\t\tif ( viewElement && viewElement.is( 'uiElement' ) ) {\n\t\t\treturn ViewPosition._createBefore( viewElement );\n\t\t}\n\n\t\tif ( isText( domParent ) ) {\n\t\t\tif ( isInlineFiller( domParent ) ) {\n\t\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t\t}\n\n\t\t\tconst viewParent = this.findCorrespondingViewText( domParent );\n\t\t\tlet offset = domOffset;\n\n\t\t\tif ( !viewParent ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset -= INLINE_FILLER_LENGTH;\n\t\t\t\toffset = offset < 0 ? 0 : offset;\n\t\t\t}\n\n\t\t\treturn new ViewPosition( viewParent, offset );\n\t\t}\n\t\t// domParent instanceof HTMLElement.\n\t\telse {\n\t\t\tif ( domOffset === 0 ) {\n\t\t\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t\t\tif ( viewParent ) {\n\t\t\t\t\treturn new ViewPosition( viewParent, 0 );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst domBefore = domParent.childNodes[ domOffset - 1 ];\n\t\t\t\tconst viewBefore = isText( domBefore ) ?\n\t\t\t\t\tthis.findCorrespondingViewText( domBefore ) :\n\t\t\t\t\tthis.mapDomToView( domBefore );\n\n\t\t\t\t// TODO #663\n\t\t\t\tif ( viewBefore && viewBefore.parent ) {\n\t\t\t\t\treturn new ViewPosition( viewBefore.parent, viewBefore.index + 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Returns corresponding view {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment} for provided DOM element or\n\t * document fragment. If there is no view item {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * to the given DOM - `undefined` is returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {DocumentFragment|Element} domElementOrDocumentFragment DOM element or document fragment.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|undefined}\n\t * Corresponding view element, document fragment or `undefined` if no element was bound.\n\t */\n\tmapDomToView( domElementOrDocumentFragment ) {\n\t\treturn this.getParentUIElement( domElementOrDocumentFragment ) || this._domToViewMapping.get( domElementOrDocumentFragment );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * For all text nodes rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * Note that for the block or inline {@link module:engine/view/filler filler} this method returns `null`.\n\t *\n\t * @param {Text} domText DOM text node.\n\t * @returns {module:engine/view/text~Text|null} Corresponding view text node or `null`, if it was not possible to find a\n\t * corresponding node.\n\t */\n\tfindCorrespondingViewText( domText ) {\n\t\tif ( isInlineFiller( domText ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If DOM text was rendered by UIElement - return that element.\n\t\tconst uiElement = this.getParentUIElement( domText );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tconst previousSibling = domText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling ) {\n\t\t\tif ( !( this.isElement( previousSibling ) ) ) {\n\t\t\t\t// The previous is text or comment.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewElement = this.mapDomToView( previousSibling );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst nextSibling = viewElement.nextSibling;\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( nextSibling instanceof ViewText ) {\n\t\t\t\t\treturn viewElement.nextSibling;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Try to use parent to find the corresponding text node.\n\t\telse {\n\t\t\tconst viewElement = this.mapDomToView( domText.parentNode );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst firstChild = viewElement.getChild( 0 );\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( firstChild instanceof ViewText ) {\n\t\t\t\t\treturn firstChild;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns corresponding DOM item for provided {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment}.\n\t * To find a corresponding text for {@link module:engine/view/text~Text view Text instance}\n\t * use {@link #findCorrespondingDomText}.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View element or document fragment.\n\t * @returns {Node|DocumentFragment|undefined} Corresponding DOM node or document fragment.\n\t */\n\tmapViewToDom( documentFragmentOrElement ) {\n\t\treturn this._viewToDomMapping.get( documentFragmentOrElement );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} viewText View text node.\n\t * @returns {Text|null} Corresponding DOM text node or `null`, if it was not possible to find a corresponding node.\n\t */\n\tfindCorrespondingDomText( viewText ) {\n\t\tconst previousSibling = viewText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling && this.mapViewToDom( previousSibling ) ) {\n\t\t\treturn this.mapViewToDom( previousSibling ).nextSibling;\n\t\t}\n\n\t\t// If this is a first node, try to use parent to find the corresponding text node.\n\t\tif ( !previousSibling && viewText.parent && this.mapViewToDom( viewText.parent ) ) {\n\t\t\treturn this.mapViewToDom( viewText.parent ).childNodes[ 0 ];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Focuses DOM editable that is corresponding to provided {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t * @param {module:engine/view/editableelement~EditableElement} viewEditable\n\t */\n\tfocus( viewEditable ) {\n\t\tconst domEditable = this.mapViewToDom( viewEditable );\n\n\t\tif ( domEditable && domEditable.ownerDocument.activeElement !== domEditable ) {\n\t\t\t// Save the scrollX and scrollY positions before the focus.\n\t\t\tconst { scrollX, scrollY } = global.window;\n\t\t\tconst scrollPositions = [];\n\n\t\t\t// Save all scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst { scrollLeft, scrollTop } = node;\n\n\t\t\t\tscrollPositions.push( [ scrollLeft, scrollTop ] );\n\t\t\t} );\n\n\t\t\tdomEditable.focus();\n\n\t\t\t// Restore scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/957\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst [ scrollLeft, scrollTop ] = scrollPositions.shift();\n\n\t\t\t\tnode.scrollLeft = scrollLeft;\n\t\t\t\tnode.scrollTop = scrollTop;\n\t\t\t} );\n\n\t\t\t// Restore the scrollX and scrollY positions after the focus.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\tglobal.window.scrollTo( scrollX, scrollY );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.ELEMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisElement( node ) {\n\t\treturn node && node.nodeType == Node.ELEMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.DOCUMENT_FRAGMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisDocumentFragment( node ) {\n\t\treturn node && node.nodeType == Node.DOCUMENT_FRAGMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.COMMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisComment( node ) {\n\t\treturn node && node.nodeType == Node.COMMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` if given selection is a backward selection, that is, if it's `focus` is before `anchor`.\n\t *\n\t * @param {Selection} DOM Selection instance to check.\n\t * @returns {Boolean}\n\t */\n\tisDomSelectionBackward( selection ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Since it takes multiple lines of code to check whether a \"DOM Position\" is before/after another \"DOM Position\",\n\t\t// we will use the fact that range will collapse if it's end is before it's start.\n\t\tconst range = document.createRange();\n\n\t\trange.setStart( selection.anchorNode, selection.anchorOffset );\n\t\trange.setEnd( selection.focusNode, selection.focusOffset );\n\n\t\tconst backward = range.collapsed;\n\n\t\trange.detach();\n\n\t\treturn backward;\n\t}\n\n\t/**\n\t * Returns parent {@link module:engine/view/uielement~UIElement} for provided DOM node. Returns `null` if there is no\n\t * parent UIElement.\n\t *\n\t * @param {Node} domNode\n\t * @returns {module:engine/view/uielement~UIElement|null}\n\t */\n\tgetParentUIElement( domNode ) {\n\t\tconst ancestors = getAncestors( domNode );\n\n\t\t// Remove domNode from the list.\n\t\tancestors.pop();\n\n\t\twhile ( ancestors.length ) {\n\t\t\tconst domNode = ancestors.pop();\n\t\t\tconst viewNode = this._domToViewMapping.get( domNode );\n\n\t\t\tif ( viewNode && viewNode.is( 'uiElement' ) ) {\n\t\t\t\treturn viewNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks if given selection's boundaries are at correct places.\n\t *\n\t * The following places are considered as incorrect for selection boundaries:\n\t * * before or in the middle of the inline filler sequence,\n\t * * inside the DOM element which represents {@link module:engine/view/uielement~UIElement a view ui element}.\n\t *\n\t * @param {Selection} domSelection DOM Selection object to be checked.\n\t * @returns {Boolean} `true` if the given selection is at a correct place, `false` otherwise.\n\t */\n\tisDomSelectionCorrect( domSelection ) {\n\t\treturn this._isDomSelectionPositionCorrect( domSelection.anchorNode, domSelection.anchorOffset ) &&\n\t\t\tthis._isDomSelectionPositionCorrect( domSelection.focusNode, domSelection.focusOffset );\n\t}\n\n\t/**\n\t * Checks if the given DOM position is a correct place for selection boundary. See {@link #isDomSelectionCorrect}.\n\t *\n\t * @private\n\t * @param {Element} domParent Position parent.\n\t * @param {Number} offset Position offset.\n\t * @returns {Boolean} `true` if given position is at a correct place for selection boundary, `false` otherwise.\n\t */\n\t_isDomSelectionPositionCorrect( domParent, offset ) {\n\t\t// If selection is before or in the middle of inline filler string, it is incorrect.\n\t\tif ( isText( domParent ) && startsWithFiller( domParent ) && offset < INLINE_FILLER_LENGTH ) {\n\t\t\t// Selection in a text node, at wrong position (before or in the middle of filler).\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isElement( domParent ) && startsWithFiller( domParent.childNodes[ offset ] ) ) {\n\t\t\t// Selection in an element node, before filler text node.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t// If selection is in `view.UIElement`, it is incorrect. Note that `mapDomToView()` returns `view.UIElement`\n\t\t// also for any dom element that is inside the view ui element (so we don't need to perform any additional checks).\n\t\tif ( viewParent && viewParent.is( 'uiElement' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Takes text data from a given {@link module:engine/view/text~Text#data} and processes it so\n\t * it is correctly displayed in the DOM.\n\t *\n\t * Following changes are done:\n\t *\n\t * * a space at the beginning is changed to `&nbsp;` if this is the first text node in its container\n\t * element or if a previous text node ends with a space character,\n\t * * space at the end of the text node is changed to `&nbsp;` if there are two spaces at the end of a node or if next node\n\t * starts with a space or if it is the last text node in its container,\n\t * * remaining spaces are replaced to a chain of spaces and `&nbsp;` (e.g. `'x   x'` becomes `'x &nbsp; x'`).\n\t *\n\t * Content of {@link #preElements} is not processed.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node View text node to process.\n\t * @returns {String} Processed text data.\n\t */\n\t_processDataFromViewText( node ) {\n\t\tlet data = node.data;\n\n\t\t// If any of node ancestors has a name which is in `preElements` array, then currently processed\n\t\t// view text node is (will be) in preformatted element. We should not change whitespaces then.\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn data;\n\t\t}\n\n\t\t// 1. Replace the first space with a nbsp if the previous node ends with a space or there is no previous node\n\t\t// (container element boundary).\n\t\tif ( data.charAt( 0 ) == ' ' ) {\n\t\t\tconst prevNode = this._getTouchingViewTextNode( node, false );\n\t\t\tconst prevEndsWithSpace = prevNode && this._nodeEndsWithSpace( prevNode );\n\n\t\t\tif ( prevEndsWithSpace || !prevNode ) {\n\t\t\t\tdata = '\\u00A0' + data.substr( 1 );\n\t\t\t}\n\t\t}\n\n\t\t// 2. Replace the last space with nbsp if there are two spaces at the end or if the next node starts with space or there is no\n\t\t// next node (container element boundary).\n\t\t//\n\t\t// Keep in mind that Firefox prefers $nbsp; before tag, not inside it:\n\t\t//\n\t\t// Foo <span>&nbsp;bar</span>  <-- bad.\n\t\t// Foo&nbsp;<span> bar</span>  <-- good.\n\t\t//\n\t\t// More here: https://github.com/ckeditor/ckeditor5-engine/issues/1747.\n\t\tif ( data.charAt( data.length - 1 ) == ' ' ) {\n\t\t\tconst nextNode = this._getTouchingViewTextNode( node, true );\n\n\t\t\tif ( data.charAt( data.length - 2 ) == ' ' || !nextNode || nextNode.data.charAt( 0 ) == ' ' ) {\n\t\t\t\tdata = data.substr( 0, data.length - 1 ) + '\\u00A0';\n\t\t\t}\n\t\t}\n\n\t\t// 3. Create space+nbsp pairs.\n\t\treturn data.replace( / {2}/g, ' \\u00A0' );\n\t}\n\n\t/**\n\t * Checks whether given node ends with a space character after changing appropriate space characters to `&nbsp;`s.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node Node to check.\n\t * @returns {Boolean} `true` if given `node` ends with space, `false` otherwise.\n\t */\n\t_nodeEndsWithSpace( node ) {\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst data = this._processDataFromViewText( node );\n\n\t\treturn data.charAt( data.length - 1 ) == ' ';\n\t}\n\n\t/**\n\t * Takes text data from native `Text` node and processes it to a correct {@link module:engine/view/text~Text view text node} data.\n\t *\n\t * Following changes are done:\n\t *\n\t * * multiple whitespaces are replaced to a single space,\n\t * * space at the beginning of a text node is removed if it is the first text node in its container\n\t * element or if the previous text node ends with a space character,\n\t * * space at the end of the text node is removed if there are two spaces at the end of a node or if next node\n\t * starts with a space or if it is the last text node in its container\n\t * * nbsps are converted to spaces.\n\t *\n\t * @param {Node} node DOM text node to process.\n\t * @returns {String} Processed data.\n\t * @private\n\t */\n\t_processDataFromDomText( node ) {\n\t\tlet data = node.data;\n\n\t\tif ( _hasDomParentOfType( node, this.preElements ) ) {\n\t\t\treturn getDataWithoutFiller( node );\n\t\t}\n\n\t\t// Change all consecutive whitespace characters (from the [ \\n\\t\\r] set –\n\t\t// see https://github.com/ckeditor/ckeditor5-engine/issues/822#issuecomment-311670249) to a single space character.\n\t\t// That's how multiple whitespaces are treated when rendered, so we normalize those whitespaces.\n\t\t// We're replacing 1+ (and not 2+) to also normalize singular \\n\\t\\r characters (#822).\n\t\tdata = data.replace( /[ \\n\\t\\r]{1,}/g, ' ' );\n\n\t\tconst prevNode = this._getTouchingInlineDomNode( node, false );\n\t\tconst nextNode = this._getTouchingInlineDomNode( node, true );\n\n\t\tconst shouldLeftTrim = this._checkShouldLeftTrimDomText( prevNode );\n\t\tconst shouldRightTrim = this._checkShouldRightTrimDomText( node, nextNode );\n\n\t\t// If the previous dom text node does not exist or it ends by whitespace character, remove space character from the beginning\n\t\t// of this text node. Such space character is treated as a whitespace.\n\t\tif ( shouldLeftTrim ) {\n\t\t\tdata = data.replace( /^ /, '' );\n\t\t}\n\n\t\t// If the next text node does not exist remove space character from the end of this text node.\n\t\tif ( shouldRightTrim ) {\n\t\t\tdata = data.replace( / $/, '' );\n\t\t}\n\n\t\t// At the beginning and end of a block element, Firefox inserts normal space + <br> instead of non-breaking space.\n\t\t// This means that the text node starts/end with normal space instead of non-breaking space.\n\t\t// This causes a problem because the normal space would be removed in `.replace` calls above. To prevent that,\n\t\t// the inline filler is removed only after the data is initially processed (by the `.replace` above). See ckeditor5#692.\n\t\tdata = getDataWithoutFiller( new Text( data ) );\n\n\t\t// At this point we should have removed all whitespaces from DOM text data.\n\t\t//\n\t\t// Now, We will reverse the process that happens in `_processDataFromViewText`.\n\t\t//\n\t\t// We have to change &nbsp; chars, that were in DOM text data because of rendering reasons, to spaces.\n\t\t// First, change all ` \\u00A0` pairs (space + &nbsp;) to two spaces. DOM converter changes two spaces from model/view to\n\t\t// ` \\u00A0` to ensure proper rendering. Since here we convert back, we recognize those pairs and change them back to `  `.\n\t\tdata = data.replace( / \\u00A0/g, '  ' );\n\n\t\t// Then, let's change the last nbsp to a space.\n\t\tif ( /( |\\u00A0)\\u00A0$/.test( data ) || !nextNode || ( nextNode.data && nextNode.data.charAt( 0 ) == ' ' ) ) {\n\t\t\tdata = data.replace( /\\u00A0$/, ' ' );\n\t\t}\n\n\t\t// Then, change &nbsp; character that is at the beginning of the text node to space character.\n\t\t// We do that replacement only if this is the first node or the previous node ends on whitespace character.\n\t\tif ( shouldLeftTrim ) {\n\t\t\tdata = data.replace( /^\\u00A0/, ' ' );\n\t\t}\n\n\t\t// At this point, all whitespaces should be removed and all &nbsp; created for rendering reasons should be\n\t\t// changed to normal space. All left &nbsp; are &nbsp; inserted intentionally.\n\t\treturn data;\n\t}\n\n\t/**\n\t * Helper function which checks if a DOM text node, preceded by the given `prevNode` should\n\t * be trimmed from the left side.\n\t *\n\t * @param {Node} prevNode\n\t */\n\t_checkShouldLeftTrimDomText( prevNode ) {\n\t\tif ( !prevNode ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( isElement( prevNode ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn /[^\\S\\u00A0]/.test( prevNode.data.charAt( prevNode.data.length - 1 ) );\n\t}\n\n\t/**\n\t * Helper function which checks if a DOM text node, succeeded by the given `nextNode` should\n\t * be trimmed from the right side.\n\t *\n\t * @param {Node} node\n\t * @param {Node} nextNode\n\t */\n\t_checkShouldRightTrimDomText( node, nextNode ) {\n\t\tif ( nextNode ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !startsWithFiller( node );\n\t}\n\n\t/**\n\t * Helper function. For given {@link module:engine/view/text~Text view text node}, it finds previous or next sibling\n\t * that is contained in the same container element. If there is no such sibling, `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} node Reference node.\n\t * @param {Boolean} getNext\n\t * @returns {module:engine/view/text~Text|null} Touching text node or `null` if there is no next or previous touching text node.\n\t */\n\t_getTouchingViewTextNode( node, getNext ) {\n\t\tconst treeWalker = new ViewTreeWalker( {\n\t\t\tstartPosition: getNext ? ViewPosition._createAfter( node ) : ViewPosition._createBefore( node ),\n\t\t\tdirection: getNext ? 'forward' : 'backward'\n\t\t} );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\t// ViewContainerElement is found on a way to next ViewText node, so given `node` was first/last\n\t\t\t// text node in its container element.\n\t\t\tif ( value.item.is( 'containerElement' ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// <br> found – it works like a block boundary, so do not scan further.\n\t\t\telse if ( value.item.is( 'br' ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// Found a text node in the same container element.\n\t\t\telse if ( value.item.is( 'textProxy' ) ) {\n\t\t\t\treturn value.item;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Helper function. For the given text node, it finds the closest touching node which is either\n\t * a text node or a `<br>`. The search is terminated at block element boundaries and if a matching node\n\t * wasn't found so far, `null` is returned.\n\t *\n\t * In the following DOM structure:\n\t *\n\t *\t\t<p>foo<b>bar</b><br>bom</p>\n\t *\n\t * * `foo` doesn't have its previous touching inline node (`null` is returned),\n\t * * `foo`'s next touching inline node is `bar`\n\t * * `bar`'s next touching inline node is `<br>`\n\t *\n\t * This method returns text nodes and `<br>` elements because these types of nodes affect how\n\t * spaces in the given text node need to be converted.\n\t *\n\t * @private\n\t * @param {Text} node\n\t * @param {Boolean} getNext\n\t * @returns {Text|Element|null}\n\t */\n\t_getTouchingInlineDomNode( node, getNext ) {\n\t\tif ( !node.parentNode ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst direction = getNext ? 'nextNode' : 'previousNode';\n\t\tconst document = node.ownerDocument;\n\t\tconst topmostParent = getAncestors( node )[ 0 ];\n\n\t\tconst treeWalker = document.createTreeWalker( topmostParent, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, {\n\t\t\tacceptNode( node ) {\n\t\t\t\tif ( isText( node ) ) {\n\t\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t\t}\n\n\t\t\t\tif ( node.tagName == 'BR' ) {\n\t\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t\t}\n\n\t\t\t\treturn NodeFilter.FILTER_SKIP;\n\t\t\t}\n\t\t} );\n\n\t\ttreeWalker.currentNode = node;\n\n\t\tconst touchingNode = treeWalker[ direction ]();\n\n\t\tif ( touchingNode !== null ) {\n\t\t\tconst lca = getCommonAncestor( node, touchingNode );\n\n\t\t\t// If there is common ancestor between the text node and next/prev text node,\n\t\t\t// and there are no block elements on a way from the text node to that ancestor,\n\t\t\t// and there are no block elements on a way from next/prev text node to that ancestor...\n\t\t\tif (\n\t\t\t\tlca &&\n\t\t\t\t!_hasDomParentOfType( node, this.blockElements, lca ) &&\n\t\t\t\t!_hasDomParentOfType( touchingNode, this.blockElements, lca )\n\t\t\t) {\n\t\t\t\t// Then they are in the same container element.\n\t\t\t\treturn touchingNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n// Helper function.\n// Used to check if given native `Element` or `Text` node has parent with tag name from `types` array.\n//\n// @param {Node} node\n// @param {Array.<String>} types\n// @param {Boolean} [boundaryParent] Can be given if parents should be checked up to a given element (excluding that element).\n// @returns {Boolean} `true` if such parent exists or `false` if it does not.\nfunction _hasDomParentOfType( node, types, boundaryParent ) {\n\tlet parents = getAncestors( node );\n\n\tif ( boundaryParent ) {\n\t\tparents = parents.slice( parents.indexOf( boundaryParent ) + 1 );\n\t}\n\n\treturn parents.some( parent => parent.tagName && types.includes( parent.tagName.toLowerCase() ) );\n}\n\n// A helper that executes given callback for each DOM node's ancestor, starting from the given node\n// and ending in document#documentElement.\n//\n// @param {Node} node\n// @param {Function} callback A callback to be executed for each ancestor.\nfunction forEachDomNodeAncestor( node, callback ) {\n\twhile ( node && node != global.document ) {\n\t\tcallback( node );\n\t\tnode = node.parentNode;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getcommonancestor\n */\n\nimport getAncestors from './getancestors';\n\n/**\n * Searches and returns the lowest common ancestor of two given nodes.\n *\n * @param {Node} nodeA First node.\n * @param {Node} nodeB Second node.\n * @returns {Node|DocumentFragment|Document|null} Lowest common ancestor of both nodes or `null` if nodes do not have a common ancestor.\n */\nexport default function getCommonAncestor( nodeA, nodeB ) {\n\tconst ancestorsA = getAncestors( nodeA );\n\tconst ancestorsB = getAncestors( nodeB );\n\n\tlet i = 0;\n\n\t// It does not matter which array is shorter.\n\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\ti++;\n\t}\n\n\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global DOMParser */\n\n/**\n * @module ui/icon/iconview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/icon/icon.css';\n\n/**\n * The icon view class.\n *\n * @extends module:ui/view~View\n */\nexport default class IconView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The SVG source of the icon.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #content\n\t\t */\n\t\tthis.set( 'content', '' );\n\n\t\t/**\n\t\t * This attribute specifies the boundaries to which the\n\t\t * icon content should stretch.\n\t\t *\n\t\t * @observable\n\t\t * @default '0 0 20 20'\n\t\t * @member {String} #viewBox\n\t\t */\n\t\tthis.set( 'viewBox', '0 0 20 20' );\n\n\t\t/**\n\t\t * The fill color of the child `path.ck-icon__fill`.\n\t\t *\n\t\t * @observable\n\t\t * @default ''\n\t\t * @member {String} #fillColor\n\t\t */\n\t\tthis.set( 'fillColor', '' );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'svg',\n\t\t\tns: 'http://www.w3.org/2000/svg',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-icon'\n\t\t\t\t],\n\t\t\t\tviewBox: bind.to( 'viewBox' )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis._updateXMLContent();\n\t\tthis._colorFillPaths();\n\n\t\t// This is a hack for lack of innerHTML binding.\n\t\t// See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\n\t\tthis.on( 'change:content', () => {\n\t\t\tthis._updateXMLContent();\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\n\t\tthis.on( 'change:fillColor', () => {\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\t}\n\n\t/**\n\t * Updates the {@link #element} with the value of {@link #content}.\n\t *\n\t * @private\n\t */\n\t_updateXMLContent() {\n\t\tif ( this.content ) {\n\t\t\tconst parsed = new DOMParser().parseFromString( this.content.trim(), 'image/svg+xml' );\n\t\t\tconst svg = parsed.querySelector( 'svg' );\n\t\t\tconst viewBox = svg.getAttribute( 'viewBox' );\n\n\t\t\tif ( viewBox ) {\n\t\t\t\tthis.viewBox = viewBox;\n\t\t\t}\n\n\t\t\tthis.element.innerHTML = '';\n\n\t\t\twhile ( svg.childNodes.length > 0 ) {\n\t\t\t\tthis.element.appendChild( svg.childNodes[ 0 ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fills all child `path.ck-icon__fill` with the `#fillColor`.\n\t *\n\t * @private\n\t */\n\t_colorFillPaths() {\n\t\tif ( this.fillColor ) {\n\t\t\tthis.element.querySelectorAll( '.ck-icon__fill' ).forEach( path => {\n\t\t\t\tpath.style.fill = this.fillColor;\n\t\t\t} );\n\t\t}\n\t}\n}\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/isrange\n */\n\n/**\n * Checks if the object is a native DOM Range.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isRange( obj ) {\n\treturn Object.prototype.toString.apply( obj ) == '[object Range]';\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/datatransfer\n */\n\n/**\n * Facade over the native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n */\nexport default class DataTransfer {\n\tconstructor( nativeDataTransfer ) {\n\t\t/**\n\t\t * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<File>} #files\n\t\t */\n\t\tthis.files = getFiles( nativeDataTransfer );\n\n\t\t/**\n\t\t * The native DataTransfer object.\n\t\t *\n\t\t * @private\n\t\t * @member {DataTransfer} #_native\n\t\t */\n\t\tthis._native = nativeDataTransfer;\n\t}\n\n\t/**\n\t * Returns an array of available native content types.\n\t *\n\t * @returns {Array.<String>}\n\t */\n\tget types() {\n\t\treturn this._native.types;\n\t}\n\n\t/**\n\t * Gets data from the data transfer by its mime type.\n\t *\n\t *\t\tdataTransfer.getData( 'text/plain' );\n\t *\n\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n\t * @returns {String}\n\t */\n\tgetData( type ) {\n\t\treturn this._native.getData( type );\n\t}\n\n\t/**\n\t * Sets data in the data transfer.\n\t *\n\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n\t * @param {String} data\n\t */\n\tsetData( type, data ) {\n\t\tthis._native.setData( type, data );\n\t}\n}\n\nfunction getFiles( nativeDataTransfer ) {\n\t// DataTransfer.files and items are Array-like and might not have an iterable interface.\n\tconst files = nativeDataTransfer.files ? Array.from( nativeDataTransfer.files ) : [];\n\tconst items = nativeDataTransfer.items ? Array.from( nativeDataTransfer.items ) : [];\n\n\tif ( files.length ) {\n\t\treturn files;\n\t}\n\t// Chrome have empty DataTransfer.files, but let get files through the items interface.\n\treturn items\n\t\t.filter( item => item.kind === 'file' )\n\t\t.map( item => item.getAsFile() );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboardobserver\n */\n\nimport DomEventObserver from '@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver';\nimport EventInfo from '@ckeditor/ckeditor5-utils/src/eventinfo';\nimport DataTransfer from './datatransfer';\n\n/**\n * Clipboard events observer.\n *\n * Fires the following events:\n *\n * * {@link module:engine/view/document~Document#event:clipboardInput}\n * * {@link module:engine/view/document~Document#event:dragover}\n * * {@link module:engine/view/document~Document#event:drop}\n * * {@link module:engine/view/document~Document#event:paste}\n * * {@link module:engine/view/document~Document#event:copy}\n * * {@link module:engine/view/document~Document#event:cut}\n *\n * Note that this observer is not available by default (it is not added by the engine).\n * To make it available it needs to be added to {@link module:engine/view/document~Document} by\n * the {@link module:engine/view/view~View#addObserver `View#addObserver()`} method. You can also load the\n * {@link module:clipboard/clipboard~Clipboard} plugin which adds this observer automatically (because it uses it).\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class ClipboardObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst viewDocument = this.document;\n\n\t\tthis.domEventType = [ 'paste', 'copy', 'cut', 'drop', 'dragover' ];\n\n\t\tthis.listenTo( viewDocument, 'paste', handleInput, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'drop', handleInput, { priority: 'low' } );\n\n\t\tfunction handleInput( evt, data ) {\n\t\t\tdata.preventDefault();\n\n\t\t\tconst targetRanges = data.dropRange ? [ data.dropRange ] : Array.from( viewDocument.selection.getRanges() );\n\n\t\t\tconst eventInfo = new EventInfo( viewDocument, 'clipboardInput' );\n\n\t\t\tviewDocument.fire( eventInfo, {\n\t\t\t\tdataTransfer: data.dataTransfer,\n\t\t\t\ttargetRanges\n\t\t\t} );\n\n\t\t\t// If CKEditor handled the input, do not bubble the original event any further.\n\t\t\t// This helps external integrations recognize that fact and act accordingly.\n\t\t\t// https://github.com/ckeditor/ckeditor5-upload/issues/92\n\t\t\tif ( eventInfo.stop.called ) {\n\t\t\t\tdata.stopPropagation();\n\t\t\t}\n\t\t}\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tconst evtData = {\n\t\t\tdataTransfer: new DataTransfer( domEvent.clipboardData ? domEvent.clipboardData : domEvent.dataTransfer )\n\t\t};\n\n\t\tif ( domEvent.type == 'drop' ) {\n\t\t\tevtData.dropRange = getDropViewRange( this.view, domEvent );\n\t\t}\n\n\t\tthis.fire( domEvent.type, domEvent, evtData );\n\t}\n}\n\nfunction getDropViewRange( view, domEvent ) {\n\tconst domDoc = domEvent.target.ownerDocument;\n\tconst x = domEvent.clientX;\n\tconst y = domEvent.clientY;\n\tlet domRange;\n\n\t// Webkit & Blink.\n\tif ( domDoc.caretRangeFromPoint && domDoc.caretRangeFromPoint( x, y ) ) {\n\t\tdomRange = domDoc.caretRangeFromPoint( x, y );\n\t}\n\t// FF.\n\telse if ( domEvent.rangeParent ) {\n\t\tdomRange = domDoc.createRange();\n\t\tdomRange.setStart( domEvent.rangeParent, domEvent.rangeOffset );\n\t\tdomRange.collapse( true );\n\t}\n\n\tif ( domRange ) {\n\t\treturn view.domConverter.domRangeToView( domRange );\n\t} else {\n\t\treturn view.document.selection.getFirstRange();\n\t}\n}\n\n/**\n * Fired as a continuation of {@link #event:paste} and {@link #event:drop} events.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * Fired with a `dataTransfer` which comes from the clipboard and which content should be processed\n * and inserted into the editor.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardInput\n * @param {Object} data Event data.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges Ranges which are the target of the operation\n * (usually – into which the content should be inserted).\n * If clipboard input was triggered by a paste operation, then these are the selection ranges. If by a drop operation,\n * then it's the drop position (which can be different than the selection at the moment of drop).\n */\n\n/**\n * Fired when user drags content over one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:dragover\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user dropped content into one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:drop\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n * @param {module:engine/view/range~Range} dropRange The position into which the content is dropped.\n */\n\n/**\n * Fired when user pasted content into one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:paste\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user copied content from one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @event module:engine/view/document~Document#event:copy\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user cut content from one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @event module:engine/view/document~Document#event:cut\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:paste},\n * {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut} events.\n *\n * In order to access clipboard data use `dataTransfer` property.\n *\n * @class module:clipboard/clipboardobserver~ClipboardEventData\n * @extends module:engine/view/observer/domeventdata~DomEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboardobserver~ClipboardEventData#dataTransfer\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/viewtoplaintext\n */\n\n// Elements which should not have empty-line padding.\n// Most `view.ContainerElement` want to be separate by new-line, but some are creating one structure\n// together (like `<li>`) so it is better to separate them by only one \"\\n\".\nconst smallPaddingElements = [ 'figcaption', 'li' ];\n\n/**\n * Converts {@link module:engine/view/item~Item view item} and all of its children to plain text.\n *\n * @param {module:engine/view/item~Item} viewItem View item to convert.\n * @returns {String} Plain text representation of `viewItem`.\n */\nexport default function viewToPlainText( viewItem ) {\n\tlet text = '';\n\n\tif ( viewItem.is( 'text' ) || viewItem.is( 'textProxy' ) ) {\n\t\t// If item is `Text` or `TextProxy` simple take its text data.\n\t\ttext = viewItem.data;\n\t} else if ( viewItem.is( 'img' ) && viewItem.hasAttribute( 'alt' ) ) {\n\t\t// Special case for images - use alt attribute if it is provided.\n\t\ttext = viewItem.getAttribute( 'alt' );\n\t} else {\n\t\t// Other elements are document fragments, attribute elements or container elements.\n\t\t// They don't have their own text value, so convert their children.\n\t\tlet prev = null;\n\n\t\tfor ( const child of viewItem.getChildren() ) {\n\t\t\tconst childText = viewToPlainText( child );\n\n\t\t\t// Separate container element children with one or more new-line characters.\n\t\t\tif ( prev && ( prev.is( 'containerElement' ) || child.is( 'containerElement' ) ) ) {\n\t\t\t\tif ( smallPaddingElements.includes( prev.name ) || smallPaddingElements.includes( child.name ) ) {\n\t\t\t\t\ttext += '\\n';\n\t\t\t\t} else {\n\t\t\t\t\ttext += '\\n\\n';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttext += childText;\n\t\t\tprev = child;\n\t\t}\n\t}\n\n\treturn text;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboard\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport ClipboardObserver from './clipboardobserver';\n\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js';\n\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\n\n/**\n * The clipboard feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through the clipboard pipeline in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with serialized editor's data.\n *\n * Read more about the clipboard integration in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive} guide.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Clipboard extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Clipboard';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst modelDocument = editor.model.document;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t/**\n\t\t * Data processor used to convert pasted HTML to a view structure.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/htmldataprocessor~HtmlDataProcessor} #_htmlDataProcessor\n\t\t */\n\t\tthis._htmlDataProcessor = new HtmlDataProcessor();\n\n\t\tview.addObserver( ClipboardObserver );\n\n\t\t// The clipboard paste pipeline.\n\n\t\t// Pasting and dropping is disabled when editor is read-only.\n\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\tthis.listenTo( viewDocument, 'clipboardInput', evt => {\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardInput', ( evt, data ) => {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\t\t\tlet content = '';\n\n\t\t\tif ( dataTransfer.getData( 'text/html' ) ) {\n\t\t\t\tcontent = normalizeClipboardHtml( dataTransfer.getData( 'text/html' ) );\n\t\t\t} else if ( dataTransfer.getData( 'text/plain' ) ) {\n\t\t\t\tcontent = plainTextToHtml( dataTransfer.getData( 'text/plain' ) );\n\t\t\t}\n\n\t\t\tcontent = this._htmlDataProcessor.toView( content );\n\n\t\t\tthis.fire( 'inputTransformation', { content, dataTransfer } );\n\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this, 'inputTransformation', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tconst dataController = this.editor.data;\n\t\t\t\tconst model = this.editor.model;\n\n\t\t\t\t// Convert the pasted content to a model document fragment.\n\t\t\t\t// Conversion is contextual, but in this case we need an \"all allowed\" context and for that\n\t\t\t\t// we use the $clipboardHolder item.\n\t\t\t\tconst modelFragment = dataController.toModel( data.content, '$clipboardHolder' );\n\n\t\t\t\tif ( modelFragment.childCount == 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmodel.insertContent( modelFragment );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// The clipboard copy/cut pipeline.\n\n\t\tfunction onCopyCut( evt, data ) {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\n\t\t\tdata.preventDefault();\n\n\t\t\tconst content = editor.data.toView( editor.model.getSelectedContent( modelDocument.selection ) );\n\n\t\t\tviewDocument.fire( 'clipboardOutput', { dataTransfer, content, method: evt.name } );\n\t\t}\n\n\t\tthis.listenTo( viewDocument, 'copy', onCopyCut, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'cut', ( evt, data ) => {\n\t\t\t// Cutting is disabled when editor is read-only.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t} else {\n\t\t\t\tonCopyCut( evt, data );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardOutput', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tdata.dataTransfer.setData( 'text/html', this._htmlDataProcessor.toData( data.content ) );\n\t\t\t\tdata.dataTransfer.setData( 'text/plain', viewToPlainText( data.content ) );\n\t\t\t}\n\n\t\t\tif ( data.method == 'cut' ) {\n\t\t\t\teditor.model.deleteContent( modelDocument.selection );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n}\n\n/**\n * Fired with a `content` and `dataTransfer` objects. The `content` which comes from the clipboard (was pasted or dropped)\n * should be processed in order to be inserted into the editor. The `dataTransfer` object is available\n * in case the transformation functions needs access to a raw clipboard data.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:clipboard/clipboard~Clipboard#event:inputTransformation\n * @param {Object} data Event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content Event data. Content to be inserted into the editor.\n * It can be modified by the event listeners. Read more about the clipboard pipelines in\n * {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of selected content. The content can be processed before it ends up in the clipboard.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#output-pipeline \"clipboard output pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboard~ClipboardOutputEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboard~ClipboardOutputEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboard~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboard~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboard~ClipboardOutputEventData#method\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/normalizeclipboarddata\n */\n\n/**\n * Removes some popular browser quirks out of the clipboard data (HTML).\n *\n * @param {String} data The HTML data to normalize.\n * @returns {String} Normalized HTML.\n */\nexport default function normalizeClipboardData( data ) {\n\treturn data\n\t\t.replace( /<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, ( fullMatch, spaces ) => {\n\t\t\t// Handle the most popular and problematic case when even a single space becomes an nbsp;.\n\t\t\t// Decode those to normal spaces. Read more in https://github.com/ckeditor/ckeditor5-clipboard/issues/2.\n\t\t\tif ( spaces.length == 1 ) {\n\t\t\t\treturn ' ';\n\t\t\t}\n\n\t\t\treturn spaces;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/plaintexttohtml\n */\n\n/**\n * Converts plain text to its HTML-ized version.\n *\n * @param {String} text The plain text to convert.\n * @returns {String} HTML generated from the plain text.\n */\nexport default function plainTextToHtml( text ) {\n\ttext = text\n\t\t// Encode <>.\n\t\t.replace( /</g, '&lt;' )\n\t\t.replace( />/g, '&gt;' )\n\t\t// Creates paragraphs for every line breaks.\n\t\t.replace( /\\n/g, '</p><p>' )\n\t\t// Preserve trailing spaces (only the first and last one – the rest is handled below).\n\t\t.replace( /^\\s/, '&nbsp;' )\n\t\t.replace( /\\s$/, '&nbsp;' )\n\t\t// Preserve other subsequent spaces now.\n\t\t.replace( /\\s\\s/g, ' &nbsp;' );\n\n\tif ( text.indexOf( '</p><p>' ) > -1 ) {\n\t\t// If we created paragraphs above, add the trailing ones.\n\t\ttext = `<p>${ text }</p>`;\n\t}\n\n\t// TODO:\n\t// * What about '\\nfoo' vs ' foo'?\n\n\treturn text;\n}\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/editableelement\n */\n\nimport ContainerElement from './containerelement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\nconst documentSymbol = Symbol( 'document' );\n\n/**\n * Editable element which can be a {@link module:engine/view/rooteditableelement~RootEditableElement root}\n * or nested editable area in the editor.\n *\n * Editable is automatically read-only when its {@link module:engine/view/document~Document Document} is read-only.\n *\n * The constructor of this class shouldn't be used directly. To create new `EditableElement` use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`} method.\n *\n * @extends module:engine/view/containerelement~ContainerElement\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditableElement extends ContainerElement {\n\t/**\n\t * Creates an editable element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createEditableElement\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Whether the editable is in read-write or read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/editableelement~EditableElement#isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Whether the editable is focused.\n\t\t *\n\t\t * This property updates when {@link module:engine/view/document~Document#isFocused document.isFocused} or view\n\t\t * selection is changed.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/editableelement~EditableElement#isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The {@link module:engine/view/document~Document} which is an owner of this root.\n\t\t * Can only by set once.\n\t\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-editableelement-document-already-set`\n\t\t * when document is already set.\n\t\t *\n\t\t * @member {module:engine/view/document~Document} #document\n\t\t */\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\teditableElement.is( 'editableElement' ); // -> true\n\t *\t\teditableElement.is( 'element' ); // -> true\n\t *\t\teditableElement.is( 'node' ); // -> true\n\t *\t\teditableElement.is( 'view:editableElement' ); // -> true\n\t *\t\teditableElement.is( 'view:element' ); // -> true\n\t *\t\teditableElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\teditableElement.is( 'model:element' ); // -> false\n\t *\t\teditableElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an editbale element, you can also check its\n\t * {@link module:engine/view/editableelement~EditableElement#name name}:\n\t *\n\t *\t\teditableElement.is( 'div' ); // -> true if this is a div element\n\t *\t\teditableElement.is( 'editableElement', 'div' ); // -> same as above\n\t *\t\ttext.is( 'div' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type && type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'editableElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'editableElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Returns document associated with the editable.\n\t *\n\t * @readonly\n\t * @returns {module:engine/view/document~Document}\n\t */\n\tget document() {\n\t\treturn this.getCustomProperty( documentSymbol );\n\t}\n\n\t/**\n\t * Sets document of this editable element.\n\t *\n\t * @protected\n\t * @param {module:engine/view/document~Document} document\n\t */\n\tset _document( document ) {\n\t\tif ( this.getCustomProperty( documentSymbol ) ) {\n\t\t\t/**\n\t\t\t * View document is already set. It can only be set once.\n\t\t\t *\n\t\t\t * @error view-editableelement-document-already-set\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-editableelement-document-already-set: View document is already set.', this );\n\t\t}\n\n\t\tthis._setCustomProperty( documentSymbol, document );\n\n\t\tthis.bind( 'isReadOnly' ).to( document );\n\n\t\tthis.bind( 'isFocused' ).to(\n\t\t\tdocument,\n\t\t\t'isFocused',\n\t\t\tisFocused => isFocused && document.selection.editableElement == this\n\t\t);\n\n\t\t// Update focus state based on selection changes.\n\t\tthis.listenTo( document.selection, 'change', () => {\n\t\t\tthis.isFocused = document.isFocused && document.selection.editableElement == this;\n\t\t} );\n\t}\n}\n\nmix( EditableElement, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/domeventdata\n */\n\nimport { extend } from 'lodash-es';\n\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n */\nexport default class DomEventData {\n\t/**\n\t * @param {module:engine/view/view~View} view The instance of the view controller.\n\t * @param {Event} domEvent The DOM event.\n\t * @param {Object} [additionalData] Additional properties that the instance should contain.\n\t */\n\tconstructor( view, domEvent, additionalData ) {\n\t\t/**\n\t\t * Instance of the view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View} module:engine/view/observer/observer~Observer.DomEvent#view\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * The instance of the document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document} module:engine/view/observer/observer~Observer.DomEvent#document\n\t\t */\n\t\tthis.document = view.document;\n\n\t\t/**\n\t\t * The DOM event.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Event} module:engine/view/observer/observer~Observer.DomEvent#domEvent\n\t\t */\n\t\tthis.domEvent = domEvent;\n\n\t\t/**\n\t\t * The DOM target.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} module:engine/view/observer/observer~Observer.DomEvent#target\n\t\t */\n\t\tthis.domTarget = domEvent.target;\n\n\t\textend( this, additionalData );\n\t}\n\n\t/**\n\t * The tree view element representing the target.\n\t *\n\t * @readonly\n\t * @type module:engine/view/element~Element\n\t */\n\tget target() {\n\t\treturn this.view.domConverter.mapDomToView( this.domTarget );\n\t}\n\n\t/**\n\t * Prevents the native's event default action.\n\t */\n\tpreventDefault() {\n\t\tthis.domEvent.preventDefault();\n\t}\n\n\t/**\n\t * Stops native event propagation.\n\t */\n\tstopPropagation() {\n\t\tthis.domEvent.stopPropagation();\n\t}\n}\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nexport default arrayEach;\n","import copyObject from './_copyObject.js';\nimport keys from './keys.js';\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nexport default baseAssign;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nexport default baseAssignIn;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nexport default copyArray;\n","import copyObject from './_copyObject.js';\nimport getSymbols from './_getSymbols.js';\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nexport default copySymbols;\n","import arrayPush from './_arrayPush.js';\nimport getPrototype from './_getPrototype.js';\nimport getSymbols from './_getSymbols.js';\nimport stubArray from './stubArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nexport default getSymbolsIn;\n","import copyObject from './_copyObject.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nexport default copySymbolsIn;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nexport default getAllKeysIn;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nexport default initCloneArray;\n","import Uint8Array from './_Uint8Array.js';\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nexport default cloneArrayBuffer;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nexport default cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nexport default cloneRegExp;\n","import Symbol from './_Symbol.js';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nexport default cloneSymbol;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nexport default cloneTypedArray;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\nimport cloneDataView from './_cloneDataView.js';\nimport cloneRegExp from './_cloneRegExp.js';\nimport cloneSymbol from './_cloneSymbol.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nexport default initCloneByTag;\n","import isObject from './isObject.js';\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nexport default baseCreate;\n","import baseCreate from './_baseCreate.js';\nimport getPrototype from './_getPrototype.js';\nimport isPrototype from './_isPrototype.js';\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nexport default initCloneObject;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nexport default baseIsMap;\n","import baseIsMap from './_baseIsMap.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nexport default isMap;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nexport default baseIsSet;\n","import baseIsSet from './_baseIsSet.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nexport default isSet;\n","import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isMap from './isMap.js';\nimport isObject from './isObject.js';\nimport isSet from './isSet.js';\nimport keys from './keys.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default nativeKeysIn;\n","import isObject from './isObject.js';\nimport isPrototype from './_isPrototype.js';\nimport nativeKeysIn from './_nativeKeysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeysIn;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeysIn from './_baseKeysIn.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nexport default keysIn;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeys from './_baseKeys.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nexport default keys;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default arrayFilter;\n","import arrayFilter from './_arrayFilter.js';\nimport stubArray from './stubArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nexport default getSymbols;\n","import getNative from './_getNative.js';\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nexport default defineProperty;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nexport default Uint8Array;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/iswindow\n */\n\n/**\n * Checks if the object is a native DOM Window.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isWindow( obj ) {\n\tconst stringifiedObject = Object.prototype.toString.apply( obj );\n\n\t// Returns `true` for the `window` object in browser environments.\n\tif ( stringifiedObject == '[object Window]' ) {\n\t\treturn true;\n\t}\n\n\t// Returns `true` for the `window` object in the Electron environment.\n\tif ( stringifiedObject == '[object global]' ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","import ListCache from './_ListCache.js';\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nexport default stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nexport default stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nexport default stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nexport default stackHas;\n","import ListCache from './_ListCache.js';\nimport Map from './_Map.js';\nimport MapCache from './_MapCache.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nexport default stackSet;\n","import ListCache from './_ListCache.js';\nimport stackClear from './_stackClear.js';\nimport stackDelete from './_stackDelete.js';\nimport stackGet from './_stackGet.js';\nimport stackHas from './_stackHas.js';\nimport stackSet from './_stackSet.js';\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nexport default Stack;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/spy\n */\n\n/**\n * Creates a spy function (ala Sinon.js) that can be used to inspect call to it.\n *\n * The following are the present features:\n *\n * * spy.called: property set to `true` if the function has been called at least once.\n *\n * @returns {Function} The spy function.\n */\nfunction spy() {\n\treturn function spy() {\n\t\tspy.called = true;\n\t};\n}\n\nexport default spy;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/eventinfo\n */\n\nimport spy from './spy';\n\n/**\n * The event object passed to event callbacks. It is used to provide information about the event as well as a tool to\n * manipulate it.\n */\nexport default class EventInfo {\n\t/**\n\t * @param {Object} source The emitter.\n\t * @param {String} name The event name.\n\t */\n\tconstructor( source, name ) {\n\t\t/**\n\t\t * The object that fired the event.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object}\n\t\t */\n\t\tthis.source = source;\n\n\t\t/**\n\t\t * The event name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Path this event has followed. See {@link module:utils/emittermixin~EmitterMixin#delegate}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<Object>}\n\t\t */\n\t\tthis.path = [];\n\n\t\t// The following methods are defined in the constructor because they must be re-created per instance.\n\n\t\t/**\n\t\t * Stops the event emitter to call further callbacks for this event interaction.\n\t\t *\n\t\t * @method #stop\n\t\t */\n\t\tthis.stop = spy();\n\n\t\t/**\n\t\t * Removes the current callback from future interactions of this event.\n\t\t *\n\t\t * @method #off\n\t\t */\n\t\tthis.off = spy();\n\n\t\t/**\n\t\t * The value which will be returned by {@link module:utils/emittermixin~EmitterMixin#fire}.\n\t\t *\n\t\t * It's `undefined` by default and can be changed by an event listener:\n\t\t *\n\t\t *\t\tdataController.fire( 'getSelectedContent', ( evt ) => {\n\t\t *\t\t\t// This listener will make `dataController.fire( 'getSelectedContent' )`\n\t\t *\t\t\t// always return an empty DocumentFragment.\n\t\t *\t\t\tevt.return = new DocumentFragment();\n\t\t *\n\t\t *\t\t\t// Make sure no other listeners are executed.\n\t\t *\t\t\tevt.stop();\n\t\t *\t\t} );\n\t\t *\n\t\t * @member #return\n\t\t */\n\t}\n}\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraphcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The paragraph command.\n *\n * @extends module:core/command~Command\n */\nexport default class ParagraphCommand extends Command {\n\t/**\n\t * The value of the command. Indicates whether the selection start is placed in a paragraph.\n\t *\n\t * @readonly\n\t * @observable\n\t * @member {Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst block = first( document.selection.getSelectedBlocks() );\n\n\t\tthis.value = !!block && block.is( 'paragraph' );\n\t\tthis.isEnabled = !!block && checkCanBecomeParagraph( block, model.schema );\n\t}\n\n\t/**\n\t * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\n\t * will be turned to paragraphs.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Options for the executed command.\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} [options.selection]\n\t * The selection that the command should be applied to.\n\t * By default, if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tconst blocks = ( options.selection || document.selection ).getSelectedBlocks();\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tif ( !block.is( 'paragraph' ) && checkCanBecomeParagraph( block, model.schema ) ) {\n\t\t\t\t\twriter.rename( block, 'paragraph' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks whether the given block can be replaced by a paragraph.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeParagraph( block, schema ) {\n\treturn schema.checkChild( block.parent, 'paragraph' ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraph\n */\n\nimport ParagraphCommand from './paragraphcommand';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The paragraph feature for the editor.\n *\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Paragraph extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Paragraph';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst data = editor.data;\n\n\t\teditor.commands.add( 'paragraph', new ParagraphCommand( editor ) );\n\n\t\t// Schema.\n\t\tmodel.schema.register( 'paragraph', { inheritAllFrom: '$block' } );\n\n\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\n\t\t// Content autoparagraphing. --------------------------------------------------\n\n\t\t// Handles element which has not been converted by any plugin and checks if it would be converted if\n\t\t// we wrap it in a paragraph or change it to a paragraph.\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: ( viewElement, modelWriter ) => {\n\t\t\t\tif ( !Paragraph.paragraphLikeElements.has( viewElement.name ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// Do not auto-paragraph empty elements.\n\t\t\t\tif ( viewElement.isEmpty ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn modelWriter.createElement( 'paragraph' );\n\t\t\t},\n\t\t\tconverterPriority: 'low'\n\t\t} );\n\n\t\tdata.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n\t\t\t// Do not try auto-paragraphing if the element was already converted.\n\t\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the element is not paragraph-like try wrapping it in a paragraph.\n\t\t\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tObject.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Handles not converted text nodes and checks if would be converted if we wraps then by a paragraph.\n\t\tdata.upcastDispatcher.on( 'text', ( evt, data, conversionApi ) => {\n\t\t\t// When node is already converted then do nothing.\n\t\t\tif ( data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tObject.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Empty roots autoparagraphing. -----------------------------------------------\n\n\t\t// Post-fixer which takes care of adding empty paragraph elements to empty roots.\n\t\t// Besides fixing content on #changesDone we also need to handle editor.data#ready event because\n\t\t// if initial data is empty or setData() wasn't even called there will be no #change fired.\n\t\tmodel.document.registerPostFixer( writer => this._autoparagraphEmptyRoots( writer ) );\n\n\t\teditor.data.on( 'ready', () => {\n\t\t\tmodel.enqueueChange( 'transparent', writer => this._autoparagraphEmptyRoots( writer ) );\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Fixes all empty roots.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n\t */\n\t_autoparagraphEmptyRoots( writer ) {\n\t\tconst model = this.editor.model;\n\n\t\tfor ( const rootName of model.document.getRootNames() ) {\n\t\t\tconst root = model.document.getRoot( rootName );\n\n\t\t\tif ( root.isEmpty && root.rootName != '$graveyard' ) {\n\t\t\t\t// If paragraph element is allowed in the root, create paragraph element.\n\t\t\t\tif ( model.schema.checkChild( root, 'paragraph' ) ) {\n\t\t\t\t\twriter.insertElement( 'paragraph', root );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A list of element names which should be treated by the autoparagraphing algorithms as\n * paragraph-like. This means that e.g. the following content:\n *\n *\t\t<h1>Foo</h1>\n *\t\t<table>\n *\t\t\t<tr>\n *\t\t\t\t<td>X</td>\n *\t\t\t\t<td>\n *\t\t\t\t\t<ul>\n *\t\t\t\t\t\t<li>Y</li>\n *\t\t\t\t\t\t<li>Z</li>\n *\t\t\t\t\t</ul>\n *\t\t\t\t</td>\n *\t\t\t</tr>\n *\t\t</table>\n *\n * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n * by the paragraph feature and converted to:\n *\n *\t\t<p>Foo</p>\n *\t\t<p>X</p>\n *\t\t<p>Y</p>\n *\t\t<p>Z</p>\n *\n * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n * have a priority upon conversion.\n *\n * @member {Set.<String>} module:paragraph/paragraph~Paragraph.paragraphLikeElements\n */\nParagraph.paragraphLikeElements = new Set( [\n\t'blockquote',\n\t'dd',\n\t'div',\n\t'dt',\n\t'h1',\n\t'h2',\n\t'h3',\n\t'h4',\n\t'h5',\n\t'h6',\n\t'li',\n\t'p',\n\t'td'\n] );\n\nfunction wrapInParagraph( input, position, conversionApi ) {\n\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n\n\tconversionApi.writer.insert( paragraph, position );\n\treturn conversionApi.convertItem( input, conversionApi.writer.createPositionAt( paragraph, 0 ) );\n}\n\nfunction isParagraphable( node, position, schema ) {\n\tconst context = schema.createContext( position );\n\n\t// When paragraph is allowed in this context...\n\tif ( !schema.checkChild( context, 'paragraph' ) ) {\n\t\treturn false;\n\t}\n\n\t// And a node would be allowed in this paragraph...\n\tif ( !schema.checkChild( context.push( 'paragraph' ), node ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/toolbarview\n */\n/* globals console */\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport preventDefault from '../bindings/preventdefault.js';\nimport '../../theme/components/toolbar/toolbar.css';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n    /**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        /**\n\t\t * Label used by assistive technologies to describe this toolbar element.\n\t\t *\n\t\t * @default 'Editor toolbar'\n\t\t * @member {String} #ariaLabel\n\t\t */\n        this.set('ariaLabel', t('Editor toolbar'));\n        /**\n\t\t * Collection of the toolbar items (like buttons).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.items = this.createCollection();\n        /**\n\t\t * Tracks information about DOM focus in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * Controls the orientation of toolbar items.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVertical\n\t\t */\n        this.set('isVertical', false);\n        /**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n        this.set('class');\n        /**\n\t\t * Helps cycling over focusable {@link #items} in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this.items,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate toolbar items backwards using the arrow[left,up] keys.\n                focusPrevious: [\n                    'arrowleft',\n                    'arrowup'\n                ],\n                // Navigate toolbar items forwards using the arrow[right,down] keys.\n                focusNext: [\n                    'arrowright',\n                    'arrowdown'\n                ]\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar',\n                    bind.if('isVertical', 'ck-toolbar_vertical'),\n                    bind.to('class')\n                ],\n                role: 'toolbar',\n                'aria-label': bind.to('ariaLabel')\n            },\n            children: this.items,\n            on: {\n                // https://github.com/ckeditor/ckeditor5-ui/issues/206\n                mousedown: preventDefault(this)\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        // Items added before rendering should be known to the #focusTracker.\n        for (const item of this.items) {\n            this.focusTracker.add(item.element);\n        }\n        this.items.on('add', (evt, item) => {\n            this.focusTracker.add(item.element);\n        });\n        this.items.on('remove', (evt, item) => {\n            this.focusTracker.remove(item.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Focuses the first focusable in {@link #items}.\n\t */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Focuses the last focusable in {@link #items}.\n\t */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n    /**\n\t * A utility which expands a plain toolbar configuration into\n\t * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n\t *\n\t * @param {Array.<String>} config The toolbar items config.\n\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n\t */\n    fillFromConfig(config, factory) {\n        config.map(name => {\n            if (name == '|') {\n                this.items.add(new ToolbarSeparatorView());\n            } else if (factory.has(name)) {\n                this.items.add(factory.create(name));\n            } else {\n                /**\n\t\t\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n\t\t\t\t * name does not exist so it was omitted when rendering the toolbar.\n\t\t\t\t *\n\t\t\t\t * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n\t\t\t\t * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n\t\t\t\t *\n\t\t\t\t * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n\t\t\t\t * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n\t\t\t\t *\n\t\t\t\t * You can use the following snippet to retrieve all available toolbar items:\n\t\t\t\t *\n\t\t\t\t *\t\tArray.from( editor.ui.componentFactory.names() );\n\t\t\t\t *\n\t\t\t\t * @error toolbarview-item-unavailable\n\t\t\t\t * @param {String} name The name of the component.\n\t\t\t\t */\n                console.warn(attachLinkToDocumentation('toolbarview-item-unavailable: The requested toolbar item is unavailable.'), { name });\n            }\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/preventdefault\n */\n\n/**\n * A helper which executes a native `Event.preventDefault()` if the target of an event equals the\n * {@link module:ui/view~View#element element of the view}. It shortens the definition of a\n * {@link module:ui/view~View#template template}.\n *\n *\t\t// In a class extending View.\n *\t\timport preventDefault from '@ckeditor/ckeditor5-ui/src/bindings/preventdefault';\n *\n *\t\t// ...\n *\n *\t\tthis.setTemplate( {\n *\t\t\ttag: 'div',\n *\n *\t\t\ton: {\n *\t\t\t\t// Prevent the default mousedown action on this view.\n *\t\t\t\tmousedown: preventDefault( this )\n *\t\t\t}\n *\t\t} );\n *\n * @param {module:ui/view~View} view View instance that defines the template.\n * @returns {module:ui/template~TemplateToBinding}\n */\nexport default function preventDefault( view ) {\n\treturn view.bindTemplate.to( evt => {\n\t\tif ( evt.target === view.element ) {\n\t\t\tevt.preventDefault();\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/clickoutsidehandler\n */\n\n/* global document */\n\n/**\n * Handles clicking **outside** of a specified set of elements, then fires an action.\n *\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\n * certain issues when the user keeps holding the mouse button and the UI cannot react\n * properly.\n *\n * @param {Object} options Configuration options.\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior\n * should be added.\n * @param {Function} options.activator Function returning a `Boolean`, to determine whether the handler is active.\n * @param {Array.<HTMLElement>} options.contextElements HTML elements that determine the scope of the\n * handler. Clicking any of them or their descendants will **not** fire the callback.\n * @param {Function} options.callback An action executed by the handler.\n */\nexport default function clickOutsideHandler( { emitter, activator, callback, contextElements } ) {\n\temitter.listenTo( document, 'mousedown', ( evt, { target } ) => {\n\t\tif ( !activator() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const contextElement of contextElements ) {\n\t\t\tif ( contextElement.contains( target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tcallback();\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/priorities\n */\n\n/**\n * String representing a priority value.\n *\n * @typedef {'highest'|'high'|'normal'|'low'|'lowest'} module:utils/priorities~PriorityString\n */\n\n/**\n * Provides group of constants to use instead of hardcoding numeric priority values.\n *\n * @namespace\n */\nconst priorities = {\n\t/**\n\t * Converts a string with priority name to it's numeric value. If `Number` is given, it just returns it.\n\t *\n\t * @static\n\t * @param {module:utils/priorities~PriorityString|Number} priority Priority to convert.\n\t * @returns {Number} Converted priority.\n\t */\n\tget( priority ) {\n\t\tif ( typeof priority != 'number' ) {\n\t\t\treturn this[ priority ] || this.normal;\n\t\t} else {\n\t\t\treturn priority;\n\t\t}\n\t},\n\n\thighest: 100000,\n\thigh: 1000,\n\tnormal: 0,\n\tlow: -1000,\n\tlowest: -100000\n};\n\nexport default priorities;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/attributecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * An extension of the base {@link module:core/command~Command} class, which provides utilities for a command\n * that toggles a single attribute on a text or an element.\n *\n * `AttributeCommand` uses {@link module:engine/model/document~Document#selection}\n * to decide which nodes (if any) should be changed, and applies or removes the attribute from them.\n *\n * The command checks the {@link module:engine/model/model~Model#schema} to decide if it can be enabled\n * for the current selection and to which nodes the attribute can be applied.\n *\n * @extends module:core/command~Command\n */\nexport default class AttributeCommand extends Command {\n\t/**\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {String} attributeKey Attribute that will be set by the command.\n\t */\n\tconstructor( editor, attributeKey ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The attribute that will be set by the command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.attributeKey = attributeKey;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection#hasAttribute selection has the attribute} which means that:\n\t\t *\n\t\t * * If the selection is not empty &ndash; That the attribute is set on the first node in the selection that allows this attribute.\n\t\t * * If the selection is empty &ndash; That the selection has the attribute itself (which means that newly typed\n\t\t * text will have this attribute, too).\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t}\n\n\t/**\n\t * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.value = this._getValueFromFirstAllowedNode();\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, this.attributeKey );\n\t}\n\n\t/**\n\t * Executes the command &mdash; applies the attribute to the selection or removes it from the selection.\n\t *\n\t * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.\n\t *\n\t * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n\t *\n\t * * If the selection is on a range, the command applies the attribute to all nodes in that range\n\t * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n\t * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n\t * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n\t * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n\t * that the selection inherits all attributes from a node if it is in an empty node).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Command options.\n\t * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply the attribute,\n\t * otherwise the command will remove the attribute.\n\t * If not set, the command will look for its current value to decide what it should do.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst value = ( options.forceValue === undefined ) ? !this.value : options.forceValue;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setSelectionAttribute( this.attributeKey, true );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeSelectionAttribute( this.attributeKey );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), this.attributeKey );\n\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\tif ( value ) {\n\t\t\t\t\t\twriter.setAttribute( this.attributeKey, value, range );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.removeAttribute( this.attributeKey, range );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the attribute value of the first node in the selection that allows the attribute.\n\t * For the collapsed selection returns the selection attribute.\n\t *\n\t * @private\n\t * @returns {Boolean} The attribute value.\n\t */\n\t_getValueFromFirstAllowedNode() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn selection.hasAttribute( this.attributeKey );\n\t\t}\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\tif ( schema.checkAttribute( item, this.attributeKey ) ) {\n\t\t\t\t\treturn item.hasAttribute( this.attributeKey );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/tounit\n */\n\n/**\n * Returns a helper function, which adds a desired trailing\n * `unit` to the passed value.\n *\n * @param {String} unit An unit like \"px\" or \"em\".\n * @returns {module:utils/dom/tounit~helper}\n */\nexport default function toUnit( unit ) {\n\t/**\n\t * A function, which adds a pre–defined trailing `unit`\n\t * to the passed `value`.\n\t *\n\t * @function helper\n \t * @param {*} value A value to be given the unit.\n \t * @returns {String} A value with the trailing unit.\n\t */\n\treturn value => value + unit;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/version\n */\n\n/* globals window, global */\n\nimport { version } from 'ckeditor5/package.json';\nimport CKEditorError from './ckeditorerror';\n\nconst windowOrGlobal = typeof window === 'object' ? window : global;\n\nif ( windowOrGlobal.CKEDITOR_VERSION ) {\n\t/**\n\t * This error is thrown when due to a mistake in how CKEditor 5 was installed or initialized, some\n\t * of its modules were duplicated (evaluated and executed twice). Module duplication leads to inevitable runtime\n\t * errors.\n\t *\n\t * There are many situations in which some modules can be loaded twice. In the worst case scenario,\n\t * you may need to check your project for each of these issues and fix them all.\n\t *\n\t * # Trying to add a plugin to an existing build\n\t *\n\t * If you import an existing CKEditor 5 build and a plugin like this:\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\t *\t\timport Highlight from '@ckeditor/ckeditor5-highlight/src/highlight';\n\t *\n\t * Then your project loads some CKEditor 5 packages twice. How does it happen?\n\t *\n\t * The build package contains a file which is already compiled with webpack. This means\n\t * that it contains all the necessary code from e.g. `@ckeditor/ckeditor5-engine` and `@ckeditor/ckeditor5-utils`.\n\t *\n\t * However, the `Highlight` plugin imports some of the modules from these packages, too. If you ask webpack to\n\t * build such a project, you will end up with the modules being included (and run) twice &mdash; first, because they are\n\t * included inside the build package, and second, because they are required by the `Highlight` plugin.\n\t *\n\t * Therefore, **you must never add plugins to an existing build** unless your plugin has no dependencies.\n\t *\n\t * Adding plugins to a build is done by taking the source version of this build (so, before it was built with webpack)\n\t * and adding plugins there. In this situation, webpack will know that it only needs to load each plugin once.\n\t *\n\t * Read more in the {@glink builds/guides/integration/installing-plugins \"Installing plugins\"} guide.\n\t *\n\t * # Confused an editor build with an editor implementation\n\t *\n\t * This scenario is very similar to the previous one, but has a different origin.\n\t *\n\t * Let's assume that you wanted to use CKEditor 5 from source, as explained in the\n\t * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"} section\n\t * or in the {@glink framework/guides/quick-start \"Quick start\"} guide of CKEditor 5 Framework.\n\t *\n\t * The correct way to do so is to import an editor and plugins and run them together like this:\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\n\t *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n\t *\t\timport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\t *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n\t *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ), {\n\t *\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t *\t\t\t\ttoolbar: [ 'bold', 'italic' ]\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( error => {\n\t *\t\t\t\tconsole.error( error.stack );\n\t *\t\t\t} );\n\t *\n\t * However, you might have mistakenly imported a build instead of the source `ClassicEditor`. In this case\n\t * your imports will look like this:\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\t *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n\t *\t\timport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\t *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n\t *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n\t *\n\t * This creates the same situation as in the previous section because you use a build together with source plugins.\n\t *\n\t * Remember: `@ckeditor/ckeditor5-build-*` packages contain editor builds and `@ckeditor/ckeditor5-editor-*` contain source editors.\n\t *\n\t * # Loading two or more builds on one page\n\t *\n\t * If you use CKEditor 5 builds, you might have loaded two (or more) `ckeditor.js` files on one web page.\n\t * Check your web page for duplicated `<script>` elements or make sure your page builder/bundler includes CKEditor only once.\n\t *\n\t * If you want to use two different types of editors at once, see the\n\t * {@glink builds/guides/integration/advanced-setup#scenario-3-using-two-different-editors \"Using two different editors\"}\n\t * section.\n\t *\n\t * # Using outdated packages\n\t *\n\t * Building CKEditor 5 from source requires using multiple npm packages. These packages have their dependencies\n\t * to other packages. If you use the latest version of, for example, `@ckeditor/ckeditor5-editor-classic` with\n\t * an outdated version of `@ckeditor/ckeditor5-image`, npm or yarn will need to install two different versions of\n\t * `@ckeditor/ckeditor5-core` because `@ckeditor/ckeditor5-editor-classic` and `@ckeditor/ckeditor5-image` may require\n\t * different versions of the core package.\n\t *\n\t * The solution to this issue is to update all packages to their latest version. We recommend\n\t * using tools like [`node-check-updates`](https://www.npmjs.com/package/npm-check-updates) which simplify this process.\n\t *\n\t * # Conflicting version of dependencies\n\t *\n\t * This is a special case of the previous scenario. If you use CKEditor 5 with some third-party plugins,\n\t * it may happen that even if you use the latest versions of the official packages and the latest version of\n\t * these third-party packages, there will be a conflict between some of their dependencies.\n\t *\n\t * Such a problem can be resolved by either downgrading CKEditor 5 packages (which we do not recommend) or\n\t * asking the author of the third-party package to upgrade its depdendencies (or forking their project and doing this yourself).\n\t *\n\t * # Packages were duplicated in `node_modules`\n\t *\n\t * In some situations, especially when calling `npm install` multiple times, it may happen\n\t * that npm will not correctly \"deduplicate\" packages.\n\t *\n\t * Normally, npm deduplicates all packages so, for example, `@ckeditor/ckeditor5-core` is installed only once in `node_modules/`.\n\t * However, it is known to fail to do so from time to time.\n\t *\n\t * We recommend checking if any of the steps listed below help:\n\t *\n\t * * `rm -rf node_modules && npm install` to make sure you have a clean `node_modules/` directory. This step\n\t * is known to help in most cases.\n\t * * If you use `yarn.lock` or `package-lock.json`, remove it before `npm install`.\n\t * * Check whether all CKEditor 5 packages are up to date and reinstall them\n\t * if you changed anything (`rm -rf node_modules && npm install`).\n\t *\n\t * If all packages are correct and compatible with each other, the steps above are known to help. If not, you may\n\t * try to check with `npm ls` how many times packages like `@ckeditor/ckeditor5-core`, `@ckeditor/ckeditor5-engine` and\n\t *`@ckeditor/ckeditor5-utils` are installed. If more than once, verify which package causes that.\n\t *\n\t * @error ckeditor-duplicated-modules\n\t */\n\tthrow new CKEditorError(\n\t\t'ckeditor-duplicated-modules: Some CKEditor 5 modules are duplicated.',\n\t\tnull\n\t);\n} else {\n\twindowOrGlobal.CKEDITOR_VERSION = version;\n}\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbols from './_getSymbols.js';\nimport keys from './keys.js';\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nexport default getAllKeys;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/count\n */\n\n/**\n * Returns the number of items return by the iterator.\n *\n *\t\tcount( [ 1, 2, 3, 4, 5 ] ); // 5;\n *\n * @param {Iterable.<*>} iterator Any iterator.\n * @returns {Number} Number of items returned by that iterator.\n */\nexport default function count( iterator ) {\n\tlet count = 0;\n\n\tfor ( const _ of iterator ) { // eslint-disable-line no-unused-vars\n\t\tcount++;\n\t}\n\n\treturn count;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/rootattributeoperation\n */\n\nimport Operation from './operation';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\n *\n * This operation is needed, because root elements can't be changed through\n * @link module:engine/model/operation/attributeoperation~AttributeOperation}.\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\n * requires a range to change and root element can't\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\n * {@link module:engine/model/position~Position} can't be created before a root element.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RootAttributeOperation extends Operation {\n\t/**\n\t * Creates an operation that changes, removes or adds attributes on root element.\n\t *\n\t * @see module:engine/model/operation/attributeoperation~AttributeOperation\n\t * @param {module:engine/model/rootelement~RootElement} root Root element to change.\n\t * @param {String} key Key of an attribute to change or remove.\n\t * @param {*} oldValue Old value of the attribute with given key or `null` if adding a new attribute.\n\t * @param {*} newValue New value to set for the attribute. If `null`, then the operation just removes the attribute.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( root, key, oldValue, newValue, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Root element to change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/rootelement~RootElement}\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Key of an attribute to change or remove.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/**\n\t\t * Old value of the attribute with given key or `null` if adding a new attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.oldValue = oldValue;\n\n\t\t/**\n\t\t * New value to set for the attribute. If `null`, then the operation just removes the attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.newValue = newValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.oldValue === null ) {\n\t\t\treturn 'addRootAttribute';\n\t\t} else if ( this.newValue === null ) {\n\t\t\treturn 'removeRootAttribute';\n\t\t} else {\n\t\t\treturn 'changeRootAttribute';\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new RootAttributeOperation( this.root, this.key, this.oldValue, this.newValue, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n\t */\n\tgetReversed() {\n\t\treturn new RootAttributeOperation( this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( this.root != this.root.root || this.root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * The element to change is not a root element.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-not-a-root\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t * @param {*} value\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-not-a-root: The element to change is not a root element.',\n\t\t\t\tthis,\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\n\t\tif ( this.oldValue !== null && this.root.getAttribute( this.key ) !== this.oldValue ) {\n\t\t\t/**\n\t\t\t * The attribute which should be removed does not exists for the given node.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-wrong-old-value\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t * @param {*} value\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-wrong-old-value: Changed node has different attribute value than operation\\'s ' +\n\t\t\t\t'old attribute value.',\n\t\t\t\tthis,\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\n\t\tif ( this.oldValue === null && this.newValue !== null && this.root.hasAttribute( this.key ) ) {\n\t\t\t/**\n\t\t\t * The attribute with given key already exists for the given node.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-attribute-exists\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-attribute-exists: The attribute with given key already exists.',\n\t\t\t\tthis,\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tif ( this.newValue !== null ) {\n\t\t\tthis.root._setAttribute( this.key, this.newValue );\n\t\t} else {\n\t\t\tthis.root._removeAttribute( this.key );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.root = this.root.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'RootAttributeOperation';\n\t}\n\n\t/**\n\t * Creates RootAttributeOperation object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tif ( !document.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error rootattributeoperation-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-fromjson-no-root: Cannot create RootAttributeOperation. Root with specified name does not exist.',\n\t\t\t\tthis,\n\t\t\t\t{ rootName: json.root }\n\t\t\t);\n\t\t}\n\n\t\treturn new RootAttributeOperation( document.getRoot( json.root ), json.key, json.oldValue, json.newValue, json.baseVersion );\n\t}\n}\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nexport default identity;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nexport default apply;\n","import apply from './_apply.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nexport default overRest;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nexport default constant;\n","import constant from './constant.js';\nimport defineProperty from './_defineProperty.js';\nimport identity from './identity.js';\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nexport default baseSetToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nexport default shortOut;\n","import baseSetToString from './_baseSetToString.js';\nimport shortOut from './_shortOut.js';\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nexport default setToString;\n","import identity from './identity.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nexport default baseRest;\n","import eq from './eq.js';\nimport isArrayLike from './isArrayLike.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nexport default isIterateeCall;\n","import baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nexport default createAssigner;\n","import copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport keysIn from './keysIn.js';\n\n/**\n * This method is like `_.assign` except that it iterates over own and\n * inherited source properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assign\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n */\nvar assignIn = createAssigner(function(object, source) {\n  copyObject(source, keysIn(source), object);\n});\n\nexport default assignIn;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/button/switchbuttonview\n */\n\nimport View from '../view';\nimport ButtonView from './buttonview';\n\nimport '../../theme/components/button/switchbutton.css';\n\n/**\n * The switch button view class.\n *\n *\t\tconst view = new SwitchButtonView();\n *\n *\t\tview.set( {\n *\t\t\twithText: true,\n *\t\t\tlabel: 'Switch me!'\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/button/buttonview~ButtonView\n */\nexport default class SwitchButtonView extends ButtonView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.isToggleable = true;\n\n\t\t/**\n\t\t * The toggle switch of the button.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #toggleSwitchView\n\t\t */\n\t\tthis.toggleSwitchView = this._createToggleView();\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-switchbutton'\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.children.add( this.toggleSwitchView );\n\t}\n\n\t/**\n\t * Creates a toggle child view.\n\t *\n\t * @private\n\t * @returns {module:ui/view~View}\n\t */\n\t_createToggleView() {\n\t\tconst toggleSwitchView = new View();\n\n\t\ttoggleSwitchView.setTemplate( {\n\t\t\ttag: 'span',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button__toggle'\n\t\t\t\t],\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'span',\n\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t\t'ck-button__toggle__inner'\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn toggleSwitchView;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\n\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\nimport { NBSP_FILLER } from '../view/filler';\n\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class HtmlDataProcessor {\n\t/**\n\t * Creates a new instance of the HTML data processor class.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * A DOM parser instance used to parse an HTML string to an HTML document.\n\t\t *\n\t\t * @private\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis._domParser = new DOMParser();\n\n\t\t/**\n\t\t * A DOM converter used to convert DOM elements to view elements.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis._domConverter = new DomConverter( { blockFiller: NBSP_FILLER } );\n\n\t\t/**\n\t\t * A basic HTML writer instance used to convert DOM elements to an HTML string.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\n\t\t */\n\t\tthis._htmlWriter = new BasicHtmlWriter();\n\t}\n\n\t/**\n\t * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n\t * to data format &mdash; in this case to an HTML string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} HTML string.\n\t */\n\ttoData( viewFragment ) {\n\t\t// Convert view DocumentFragment to DOM DocumentFragment.\n\t\tconst domFragment = this._domConverter.viewToDom( viewFragment, document );\n\n\t\t// Convert DOM DocumentFragment to HTML output.\n\t\treturn this._htmlWriter.getHtml( domFragment );\n\t}\n\n\t/**\n\t * Converts the provided HTML string to a view tree.\n\t *\n\t * @param {String} data An HTML string.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n\t */\n\ttoView( data ) {\n\t\t// Convert input HTML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\treturn this._domConverter.domToView( domFragment );\n\t}\n\n\t/**\n\t * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n\t * the provided data.\n\t *\n\t * @private\n\t * @param {String} data\n\t * @returns {DocumentFragment}\n\t */\n\t_toDom( data ) {\n\t\tconst document = this._domParser.parseFromString( data, 'text/html' );\n\t\tconst fragment = document.createDocumentFragment();\n\t\tconst nodes = document.body.childNodes;\n\n\t\twhile ( nodes.length > 0 ) {\n\t\t\tfragment.appendChild( nodes[ 0 ] );\n\t\t}\n\n\t\treturn fragment;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/model\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport { extend } from 'lodash-es';\n\n/**\n * The base MVC model class.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Model {\n\t/**\n\t * Creates a new Model instance.\n\t *\n\t * @param {Object} [attributes] The model state attributes to be defined during the instance creation.\n\t * @param {Object} [properties] The (out of state) properties to be appended to the instance during creation.\n\t */\n\tconstructor( attributes, properties ) {\n\t\t// Extend this instance with the additional (out of state) properties.\n\t\tif ( properties ) {\n\t\t\textend( this, properties );\n\t\t}\n\n\t\t// Initialize the attributes.\n\t\tif ( attributes ) {\n\t\t\tthis.set( attributes );\n\t\t}\n\t}\n}\n\nmix( Model, ObservableMixin );\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import defineProperty from './_defineProperty.js';\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nexport default baseAssignValue;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignValue;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nexport default stubArray;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nexport default arrayPush;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nexport default isIndex;\n","import arrayPush from './_arrayPush.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nexport default baseGetAllKeys;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/objecttomap\n */\n\n/**\n * Transforms object to map.\n *\n *\t\tconst map = objectToMap( { 'foo': 1, 'bar': 2 } );\n *\t\tmap.get( 'foo' ); // 1\n *\n * @param {Object} obj Object to transform.\n * @returns {Map} Map created from object.\n */\nexport default function objectToMap( obj ) {\n\tconst map = new Map();\n\n\tfor ( const key in obj ) {\n\t\tmap.set( key, obj[ key ] );\n\t}\n\n\treturn map;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/documentselection\n */\n\nimport Selection from './selection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\n/**\n * Class representing the document selection in the view.\n *\n * Its instance is available in {@link module:engine/view/document~Document#selection `Document#selection`}.\n *\n * It is similar to {@link module:engine/view/selection~Selection} but\n * it has a read-only API and can be modified only by the writer available in\n * the {@link module:engine/view/view~View#change `View#change()`} block\n * (so via {@link module:engine/view/downcastwriter~DowncastWriter#setSelection `DowncastWriter#setSelection()`}).\n */\nexport default class DocumentSelection {\n\t/**\n\t * Creates new DocumentSelection instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = new DocumentSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = new DocumentSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\tconst selection = new DocumentSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = new DocumentSelection( otherSelection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, offset );\n\t *\t\tconst selection = new DocumentSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = new DocumentSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = new DocumentSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = new DocumentSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = new DocumentSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = new DocumentSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tconstructor( selectable = null, placeOrOffset, options ) {\n\t\t/**\n\t\t * Selection is used internally (`DocumentSelection` is a proxy to that selection).\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/selection~Selection}\n\t\t */\n\t\tthis._selection = new Selection();\n\n\t\t// Delegate change event to be fired on DocumentSelection instance.\n\t\tthis._selection.delegate( 'change' ).to( this );\n\n\t\t// Set selection data.\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Returns true if selection instance is marked as `fake`.\n\t *\n\t * @see #_setTo\n\t * @returns {Boolean}\n\t */\n\tget isFake() {\n\t\treturn this._selection.isFake;\n\t}\n\n\t/**\n\t * Returns fake selection label.\n\t *\n\t * @see #_setTo\n\t * @returns {String}\n\t */\n\tget fakeSelectionLabel() {\n\t\treturn this._selection.fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n\t * {@link #focus focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n\t * It may be a bit unintuitive when there are multiple ranges in selection.\n\t *\n\t * @see #focus\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget anchor() {\n\t\treturn this._selection.anchor;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * @see #anchor\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget focus() {\n\t\treturn this._selection.focus;\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this._selection.isCollapsed;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._selection.rangeCount;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus} precedes {@link #anchor}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn this._selection.isBackward;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n\t * if the selection is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\treturn this._selection.editableElement;\n\t}\n\n\t/**\n\t * Used for the compatibility with the {@link module:engine/view/selection~Selection#isEqual} method.\n\t *\n\t * @protected\n\t */\n\tget _ranges() {\n\t\treturn this._selection._ranges;\n\t}\n\n\t/**\n\t * Returns an iterable that contains copies of all ranges added to the selection.\n\t *\n\t * @returns {Iterable.<module:engine/view/range~Range>}\n\t */\n\t* getRanges() {\n\t\tyield* this._selection.getRanges();\n\t}\n\n\t/**\n\t * Returns copy of the first range in the selection. First range is the one which\n\t * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n\t * position of all other ranges (not to confuse with the first range added to the selection).\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\treturn this._selection.getFirstRange();\n\t}\n\n\t/**\n\t * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n\t * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n\t * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\treturn this._selection.getLastRange();\n\t}\n\n\t/**\n\t * Returns copy of the first position in the selection. First position is the position that\n\t * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\treturn this._selection.getFirstPosition();\n\t}\n\n\t/**\n\t * Returns copy of the last position in the selection. Last position is the position that\n\t * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\treturn this._selection.getLastPosition();\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/view/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\treturn this._selection.getSelectedElement();\n\t}\n\n\t/**\n\t * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n\t * same number of ranges and all ranges from one selection equal to a range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\treturn this._selection.isEqual( otherSelection );\n\t}\n\n\t/**\n\t * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n\t * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n\t * equal to any trimmed range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n\t */\n\tisSimilar( otherSelection ) {\n\t\treturn this._selection.isSimilar( otherSelection );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tdocSelection.is( 'selection' ); // -> true\n\t *\t\tdocSelection.is( 'documentSelection' ); // -> true\n\t *\t\tdocSelection.is( 'view:selection' ); // -> true\n\t *\t\tdocSelection.is( 'view:documentSelection' ); // -> true\n\t *\n\t *\t\tdocSelection.is( 'model:documentSelection' ); // -> false\n\t *\t\tdocSelection.is( 'element' ); // -> false\n\t *\t\tdocSelection.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' ||\n\t\t\ttype == 'documentSelection' ||\n\t\t\ttype == 'view:selection' ||\n\t\t\ttype == 'view:documentSelection';\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tdocumentSelection._setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\tdocumentSelection._setTo( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tdocumentSelection._setTo( otherSelection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, offset );\n\t *\t\tdocumentSelection._setTo( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tdocumentSelection._setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t *\t\tdocumentSelection._setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tdocumentSelection._setTo( paragraph, 'on' );\n\t *\n\t * \t\t// Clears selection. Removes all ranges.\n\t *\t\tdocumentSelection._setTo( null );\n\t *\n\t * `Selection#_setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\tdocumentSelection._setTo( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to des cribe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tdocumentSelection._setTo( range, { fake: true, label: 'foo' } );\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\t_setTo( selectable, placeOrOffset, options ) {\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link #focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tthis._selection.setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Fired whenever selection ranges are changed through {@link ~DocumentSelection Selection API}.\n\t *\n\t * @event change\n\t */\n}\n\nmix( DocumentSelection, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/fastdiff\n */\n\n/**\n * Finds positions of the first and last change in the given string/array and generates a set of changes:\n *\n *\t\tfastDiff( '12a', '12xyza' );\n *\t\t// [ { index: 2, type: 'insert', values: [ 'x', 'y', 'z' ] } ]\n *\n *\t\tfastDiff( '12a', '12aa' );\n *\t\t// [ { index: 3, type: 'insert', values: [ 'a' ] } ]\n *\n *\t\tfastDiff( '12xyza', '12a' );\n *\t\t// [ { index: 2, type: 'delete', howMany: 3 } ]\n *\n *\t\tfastDiff( [ '1', '2', 'a', 'a' ], [ '1', '2', 'a' ] );\n *\t\t// [ { index: 3, type: 'delete', howMany: 1 } ]\n *\n *\t\tfastDiff( [ '1', '2', 'a', 'b', 'c', '3' ], [ '2', 'a', 'b' ] );\n *\t\t// [ { index: 0, type: 'insert', values: [ '2', 'a', 'b' ] }, { index: 3, type: 'delete', howMany: 6 } ]\n *\n * Passed arrays can contain any type of data, however to compare them correctly custom comparator function\n * should be passed as a third parameter:\n *\n *\t\tfastDiff( [ { value: 1 }, { value: 2 } ], [ { value: 1 }, { value: 3 } ], ( a, b ) => {\n *\t\t\treturn a.value === b.value;\n *\t\t} );\n *\t\t// [ { index: 1, type: 'insert', values: [ { value: 3 } ] }, { index: 2, type: 'delete', howMany: 1 } ]\n *\n * The resulted set of changes can be applied to the input in order to transform it into the output, for example:\n *\n *\t\tlet input = '12abc3';\n *\t\tconst output = '2ab';\n *\t\tconst changes = fastDiff( input, output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput = input.substring( 0, change.index ) + change.values.join( '' ) + input.substring( change.index );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput = input.substring( 0, change.index ) + input.substring( change.index + change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// input equals output now\n *\n * or in case of arrays:\n *\n *\t\tlet input = [ '1', '2', 'a', 'b', 'c', '3' ];\n *\t\tconst output = [ '2', 'a', 'b' ];\n *\t\tconst changes = fastDiff( input, output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput = input.slice( 0, change.index ).concat( change.values, input.slice( change.index ) );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput = input.slice( 0, change.index ).concat( input.slice( change.index + change.howMany ) );\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// input equals output now\n *\n * By passing `true` as the fourth parameter (`atomicChanges`) the output of this function will become compatible with\n * the {@link module:utils/diff~diff `diff()`} function:\n *\n *\t\tfastDiff( '12a', '12xyza' );\n *\t\t// [ 'equal', 'equal', 'insert', 'insert', 'insert', 'equal' ]\n *\n * The default output format of this function is compatible with the output format of\n * {@link module:utils/difftochanges~diffToChanges `diffToChanges()`}. The `diffToChanges()` input format is, in turn,\n * compatible with the output of {@link module:utils/diff~diff `diff()`}:\n *\n *\t\tconst a = '1234';\n *\t\tconst b = '12xyz34';\n *\n *\t\t// Both calls will return the same results (grouped changes format).\n *\t\tfastDiff( a, b );\n *\t\tdiffToChanges( diff( a, b ) );\n *\n *\t\t// Again, both calls will return the same results (atomic changes format).\n *\t\tfastDiff( a, b, null, true );\n *\t\tdiff( a, b );\n *\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Input array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default `===` (strict equal operator) is used.\n * @param {Boolean} [atomicChanges=false] Whether an array of `inset|delete|equal` operations should\n * be returned instead of changes set. This makes this function compatible with {@link module:utils/diff~diff `diff()`}.\n * @returns {Array} Array of changes.\n */\nexport default function fastDiff( a, b, cmp, atomicChanges = false ) {\n\t// Set the comparator function.\n\tcmp = cmp || function( a, b ) {\n\t\treturn a === b;\n\t};\n\n\t// Transform text or any iterable into arrays for easier, consistent processing.\n\tif ( !Array.isArray( a ) ) {\n\t\ta = Array.from( a );\n\t}\n\n\tif ( !Array.isArray( b ) ) {\n\t\tb = Array.from( b );\n\t}\n\n\t// Find first and last change.\n\tconst changeIndexes = findChangeBoundaryIndexes( a, b, cmp );\n\n\t// Transform into changes array.\n\treturn atomicChanges ? changeIndexesToAtomicChanges( changeIndexes, b.length ) : changeIndexesToChanges( b, changeIndexes );\n}\n\n// Finds position of the first and last change in the given arrays. For example:\n//\n//\t\tconst indexes = findChangeBoundaryIndexes( [ '1', '2', '3', '4' ], [ '1', '3', '4', '2', '4' ] );\n//\t\tconsole.log( indexes ); // { firstIndex: 1, lastIndexOld: 3, lastIndexNew: 4 }\n//\n// The above indexes means that in the first array the modified part is `1[23]4` and in the second array it is `1[342]4`.\n// Based on such indexes, array with `insert`/`delete` operations which allows transforming first value into the second one\n// can be generated.\n//\n// @param {Array} arr1\n// @param {Array} arr2\n// @param {Function} cmp Comparator function.\n// @returns {Object}\n// @returns {Number} return.firstIndex Index of the first change in both values (always the same for both).\n// @returns {Number} result.lastIndexOld Index of the last common value in `arr1`.\n// @returns {Number} result.lastIndexNew Index of the last common value in `arr2`.\nfunction findChangeBoundaryIndexes( arr1, arr2, cmp ) {\n\t// Find the first difference between passed values.\n\tconst firstIndex = findFirstDifferenceIndex( arr1, arr2, cmp );\n\n\t// If arrays are equal return -1 indexes object.\n\tif ( firstIndex === -1 ) {\n\t\treturn { firstIndex: -1, lastIndexOld: -1, lastIndexNew: -1 };\n\t}\n\n\t// Remove the common part of each value and reverse them to make it simpler to find the last difference between them.\n\tconst oldArrayReversed = cutAndReverse( arr1, firstIndex );\n\tconst newArrayReversed = cutAndReverse( arr2, firstIndex );\n\n\t// Find the first difference between reversed values.\n\t// It should be treated as \"how many elements from the end the last difference occurred\".\n\t//\n\t// For example:\n\t//\n\t// \t\t\t\tinitial\t->\tafter cut\t-> reversed:\n\t// oldValue:\t'321ba'\t->\t'21ba'\t\t-> 'ab12'\n\t// newValue:\t'31xba'\t->\t'1xba'\t\t-> 'abx1'\n\t// lastIndex:\t\t\t\t\t\t\t-> 2\n\t//\n\t// So the last change occurred two characters from the end of the arrays.\n\tconst lastIndex = findFirstDifferenceIndex( oldArrayReversed, newArrayReversed, cmp );\n\n\t// Use `lastIndex` to calculate proper offset, starting from the beginning (`lastIndex` kind of starts from the end).\n\tconst lastIndexOld = arr1.length - lastIndex;\n\tconst lastIndexNew = arr2.length - lastIndex;\n\n\treturn { firstIndex, lastIndexOld, lastIndexNew };\n}\n\n// Returns a first index on which given arrays differ. If both arrays are the same, -1 is returned.\n//\n// @param {Array} arr1\n// @param {Array} arr2\n// @param {Function} cmp Comparator function.\n// @returns {Number}\nfunction findFirstDifferenceIndex( arr1, arr2, cmp ) {\n\tfor ( let i = 0; i < Math.max( arr1.length, arr2.length ); i++ ) {\n\t\tif ( arr1[ i ] === undefined || arr2[ i ] === undefined || !cmp( arr1[ i ], arr2[ i ] ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1; // Return -1 if arrays are equal.\n}\n\n// Returns a copy of the given array with `howMany` elements removed starting from the beginning and in reversed order.\n//\n// @param {Array} arr Array to be processed.\n// @param {Number} howMany How many elements from array beginning to remove.\n// @returns {Array} Shortened and reversed array.\nfunction cutAndReverse( arr, howMany ) {\n\treturn arr.slice( howMany ).reverse();\n}\n\n// Generates changes array based on change indexes from `findChangeBoundaryIndexes` function. This function will\n// generate array with 0 (no changes), 1 (deletion or insertion) or 2 records (insertion and deletion).\n//\n// @param {Array} newArray New array for which change indexes were calculated.\n// @param {Object} changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n// @returns {Array.<Object>} Array of changes compatible with {@link module:utils/difftochanges~diffToChanges} format.\nfunction changeIndexesToChanges( newArray, changeIndexes ) {\n\tconst result = [];\n\tconst { firstIndex, lastIndexOld, lastIndexNew } = changeIndexes;\n\n\t// Order operations as 'insert', 'delete' array to keep compatibility with {@link module:utils/difftochanges~diffToChanges}\n\t// in most cases. However, 'diffToChanges' does not stick to any order so in some cases\n\t// (for example replacing '12345' with 'abcd') it will generate 'delete', 'insert' order.\n\tif ( lastIndexNew - firstIndex > 0 ) {\n\t\tresult.push( {\n\t\t\tindex: firstIndex,\n\t\t\ttype: 'insert',\n\t\t\tvalues: newArray.slice( firstIndex, lastIndexNew )\n\t\t} );\n\t}\n\n\tif ( lastIndexOld - firstIndex > 0 ) {\n\t\tresult.push( {\n\t\t\tindex: firstIndex + ( lastIndexNew - firstIndex ), // Increase index of what was inserted.\n\t\t\ttype: 'delete',\n\t\t\thowMany: lastIndexOld - firstIndex\n\t\t} );\n\t}\n\n\treturn result;\n}\n\n// Generates array with set `equal|insert|delete` operations based on change indexes from `findChangeBoundaryIndexes` function.\n//\n// @param {Object} changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n// @param {Number} newLength Length of the new array on which `findChangeBoundaryIndexes` calculated change indexes.\n// @returns {Array.<String>} Array of changes compatible with {@link module:utils/diff~diff} format.\nfunction changeIndexesToAtomicChanges( changeIndexes, newLength ) {\n\tconst { firstIndex, lastIndexOld, lastIndexNew } = changeIndexes;\n\n\t// No changes.\n\tif ( firstIndex === -1 ) {\n\t\treturn Array( newLength ).fill( 'equal' );\n\t}\n\n\tlet result = [];\n\tif ( firstIndex > 0 ) {\n\t\tresult = result.concat( Array( firstIndex ).fill( 'equal' ) );\n\t}\n\n\tif ( lastIndexNew - firstIndex > 0 ) {\n\t\tresult = result.concat( Array( lastIndexNew - firstIndex ).fill( 'insert' ) );\n\t}\n\n\tif ( lastIndexOld - firstIndex > 0 ) {\n\t\tresult = result.concat( Array( lastIndexOld - firstIndex ).fill( 'delete' ) );\n\t}\n\n\tif ( lastIndexNew < newLength ) {\n\t\tresult = result.concat( Array( newLength - lastIndexNew ).fill( 'equal' ) );\n\t}\n\n\treturn result;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getborderwidths\n */\n\n/**\n * Returns an object containing CSS border widths of a specified HTML element.\n *\n * @param {HTMLElement} element An element which has CSS borders.\n * @returns {Object} An object containing `top`, `left`, `right` and `bottom` properties\n * with numerical values of the `border-[top,left,right,bottom]-width` CSS styles.\n */\nexport default function getBorderWidths( element ) {\n\t// Call getComputedStyle on the window the element document belongs to.\n\tconst style = element.ownerDocument.defaultView.getComputedStyle( element );\n\n\treturn {\n\t\ttop: parseInt( style.borderTopWidth, 10 ),\n\t\tright: parseInt( style.borderRightWidth, 10 ),\n\t\tbottom: parseInt( style.borderBottomWidth, 10 ),\n\t\tleft: parseInt( style.borderLeftWidth, 10 )\n\t};\n}\n","import getNative from './_getNative.js';\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nexport default nativeCreate;\n","import nativeCreate from './_nativeCreate.js';\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nexport default hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default hashDelete;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nexport default hashGet;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nexport default hashHas;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nexport default hashSet;\n","import hashClear from './_hashClear.js';\nimport hashDelete from './_hashDelete.js';\nimport hashGet from './_hashGet.js';\nimport hashHas from './_hashHas.js';\nimport hashSet from './_hashSet.js';\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nexport default Hash;\n","import Hash from './_Hash.js';\nimport ListCache from './_ListCache.js';\nimport Map from './_Map.js';\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nexport default mapCacheClear;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nexport default isKeyable;\n","import isKeyable from './_isKeyable.js';\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nexport default getMapData;\n","import getMapData from './_getMapData.js';\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default mapCacheDelete;\n","import getMapData from './_getMapData.js';\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nexport default mapCacheGet;\n","import getMapData from './_getMapData.js';\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nexport default mapCacheHas;\n","import getMapData from './_getMapData.js';\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nexport default mapCacheSet;\n","import mapCacheClear from './_mapCacheClear.js';\nimport mapCacheDelete from './_mapCacheDelete.js';\nimport mapCacheGet from './_mapCacheGet.js';\nimport mapCacheHas from './_mapCacheHas.js';\nimport mapCacheSet from './_mapCacheSet.js';\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nexport default MapCache;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nexport default setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nexport default setCacheHas;\n","import MapCache from './_MapCache.js';\nimport setCacheAdd from './_setCacheAdd.js';\nimport setCacheHas from './_setCacheHas.js';\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nexport default SetCache;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default arraySome;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nexport default cacheHas;\n","import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nexport default mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nexport default setToArray;\n","import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n","import getAllKeys from './_getAllKeys.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalObjects;\n","import Stack from './_Stack.js';\nimport equalArrays from './_equalArrays.js';\nimport equalByTag from './_equalByTag.js';\nimport equalObjects from './_equalObjects.js';\nimport getTag from './_getTag.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nexport default baseIsEqualDeep;\n","import baseIsEqualDeep from './_baseIsEqualDeep.js';\nimport isObjectLike from './isObjectLike.js';\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nexport default baseIsEqual;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nexport default baseTimes;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","import baseTimes from './_baseTimes.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isIndex from './_isIndex.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default arrayLikeKeys;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/utils\n */\n\n/**\n * Returns attributes that should be preserved on the enter key.\n *\n * Filtering is realized based on `copyOnEnter` attribute property. Read more about attribute properties\n * {@link module:engine/model/schema~Schema#setAttributeProperties here}.\n *\n * @param {module:engine/model/schema~Schema} schema\n * @param {Iterable.<*>} allAttributes attributes to filter.\n * @returns {Iterable.<*>}\n */\nexport function* getCopyOnEnterAttributes( schema, allAttributes ) {\n\tfor ( const attribute of allAttributes ) {\n\t\tif ( attribute && schema.getAttributeProperties( attribute[ 0 ] ).copyOnEnter ) {\n\t\t\tyield attribute;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/enterobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class EnterObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst doc = this.document;\n\n\t\tdoc.on( 'keydown', ( evt, data ) => {\n\t\t\tif ( this.isEnabled && data.keyCode == keyCodes.enter ) {\n\t\t\t\t// Save the event object to check later if it was stopped or not.\n\t\t\t\tlet event;\n\t\t\t\tdoc.once( 'enter', evt => ( event = evt ), { priority: 'highest' } );\n\n\t\t\t\tdoc.fire( 'enter', new DomEventData( doc, data.domEvent, {\n\t\t\t\t\tisSoft: data.shiftKey\n\t\t\t\t} ) );\n\n\t\t\t\t// Stop `keydown` event if `enter` event was stopped.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\t\tif ( event && event.stop.called ) {\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user presses the <kbd>Enter</kbd> key.\n *\n * Note: This event is fired by the {@link module:enter/enterobserver~EnterObserver observer}\n * (usually registered by the {@link module:enter/enter~Enter Enter feature} and\n * {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature}).\n *\n * @event module:engine/view/document~Document#event:enter\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {Boolean} data.isSoft Whether it's a soft enter (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or hard enter (<kbd>Enter</kbd>).\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/position\n */\n\nimport global from './global';\nimport Rect from './rect';\nimport getPositionedAncestor from './getpositionedancestor';\nimport getBorderWidths from './getborderwidths';\nimport { isFunction } from 'lodash-es';\n\n/**\n * Calculates the `position: absolute` coordinates of a given element so it can be positioned with respect to the\n * target in the visually most efficient way, taking various restrictions like viewport or limiter geometry\n * into consideration.\n *\n *\t\t// The element which is to be positioned.\n *\t\tconst element = document.body.querySelector( '#toolbar' );\n *\n *\t\t// A target to which the element is positioned relatively.\n *\t\tconst target = document.body.querySelector( '#container' );\n *\n *\t\t// Finding the optimal coordinates for the positioning.\n *\t\tconst { left, top, name } = getOptimalPosition( {\n *\t\t\telement: element,\n *\t\t\ttarget: target,\n *\n * \t\t\t// The algorithm will chose among these positions to meet the requirements such\n * \t\t\t// as \"limiter\" element or \"fitInViewport\", set below. The positions are considered\n * \t\t\t// in the order of the array.\n *\t\t\tpositions: [\n *\t\t\t\t//\n *\t\t\t \t//\t[ Target ]\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t|     Element     |\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\n *\t\t\t\ttargetRect => ( {\n *\t\t\t\t\ttop: targetRect.bottom,\n *\t\t\t\t\tleft: targetRect.left,\n *\t\t\t\t\tname: 'mySouthEastPosition'\n *\t\t\t\t} ),\n *\n *\t\t\t\t//\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t|     Element     |\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t[ Target ]\n *\t\t\t\t//\n *\t\t\t\t( targetRect, elementRect ) => ( {\n *\t\t\t\t\ttop: targetRect.top - elementRect.height,\n *\t\t\t\t\tleft: targetRect.left,\n *\t\t\t\t\tname: 'myNorthEastPosition'\n *\t\t\t\t} )\n *\t\t\t],\n *\n *\t\t\t// Find a position such guarantees the element remains within visible boundaries of <body>.\n *\t\t\tlimiter: document.body,\n *\n *\t\t\t// Find a position such guarantees the element remains within visible boundaries of the browser viewport.\n *\t\t\tfitInViewport: true\n *\t\t} );\n *\n *\t\t// The best position which fits into document.body and the viewport. May be useful\n *\t\t// to set proper class on the `element`.\n *\t\tconsole.log( name ); // -> \"myNorthEastPosition\"\n *\n *\t\t// Using the absolute coordinates which has been found to position the element\n *\t\t// as in the diagram depicting the \"myNorthEastPosition\" position.\n *\t\telement.style.top = top;\n *\t\telement.style.left = left;\n *\n * @param {module:utils/dom/position~Options} options Positioning options object.\n * @returns {module:utils/dom/position~Position}\n */\nexport function getOptimalPosition( { element, target, positions, limiter, fitInViewport } ) {\n\t// If the {@link module:utils/dom/position~Options#target} is a function, use what it returns.\n\t// https://github.com/ckeditor/ckeditor5-utils/issues/157\n\tif ( isFunction( target ) ) {\n\t\ttarget = target();\n\t}\n\n\t// If the {@link module:utils/dom/position~Options#limiter} is a function, use what it returns.\n\t// https://github.com/ckeditor/ckeditor5-ui/issues/260\n\tif ( isFunction( limiter ) ) {\n\t\tlimiter = limiter();\n\t}\n\n\tconst positionedElementAncestor = getPositionedAncestor( element.parentElement );\n\tconst elementRect = new Rect( element );\n\tconst targetRect = new Rect( target );\n\n\tlet bestPosition;\n\tlet name;\n\n\t// If there are no limits, just grab the very first position and be done with that drama.\n\tif ( !limiter && !fitInViewport ) {\n\t\t[ name, bestPosition ] = getPosition( positions[ 0 ], targetRect, elementRect );\n\t} else {\n\t\tconst limiterRect = limiter && new Rect( limiter ).getVisible();\n\t\tconst viewportRect = fitInViewport && new Rect( global.window );\n\n\t\t[ name, bestPosition ] =\n\t\t\tgetBestPosition( positions, targetRect, elementRect, limiterRect, viewportRect ) ||\n\t\t\t// If there's no best position found, i.e. when all intersections have no area because\n\t\t\t// rects have no width or height, then just use the first available position.\n\t\t\tgetPosition( positions[ 0 ], targetRect, elementRect );\n\t}\n\n\tlet { left, top } = getAbsoluteRectCoordinates( bestPosition );\n\n\tif ( positionedElementAncestor ) {\n\t\tconst ancestorPosition = getAbsoluteRectCoordinates( new Rect( positionedElementAncestor ) );\n\t\tconst ancestorBorderWidths = getBorderWidths( positionedElementAncestor );\n\n\t\t// (https://github.com/ckeditor/ckeditor5-ui-default/issues/126)\n\t\t// If there's some positioned ancestor of the panel, then its `Rect` must be taken into\n\t\t// consideration. `Rect` is always relative to the viewport while `position: absolute` works\n\t\t// with respect to that positioned ancestor.\n\t\tleft -= ancestorPosition.left;\n\t\ttop -= ancestorPosition.top;\n\n\t\t// (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n\t\t// If there's some positioned ancestor of the panel, not only its position must be taken into\n\t\t// consideration (see above) but also its internal scrolls. Scroll have an impact here because `Rect`\n\t\t// is relative to the viewport (it doesn't care about scrolling), while `position: absolute`\n\t\t// must compensate that scrolling.\n\t\tleft += positionedElementAncestor.scrollLeft;\n\t\ttop += positionedElementAncestor.scrollTop;\n\n\t\t// (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n\t\t// If there's some positioned ancestor of the panel, then its `Rect` includes its CSS `borderWidth`\n\t\t// while `position: absolute` positioning does not consider it.\n\t\t// E.g. `{ position: absolute, top: 0, left: 0 }` means upper left corner of the element,\n\t\t// not upper-left corner of its border.\n\t\tleft -= ancestorBorderWidths.left;\n\t\ttop -= ancestorBorderWidths.top;\n\t}\n\n\treturn { left, top, name };\n}\n\n// For given position function, returns a corresponding `Rect` instance.\n//\n// @private\n// @param {Function} position A function returning {@link module:utils/dom/position~Position}.\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned element.\n// @returns {Array} An array containing position name and its Rect.\nfunction getPosition( position, targetRect, elementRect ) {\n\tconst { left, top, name } = position( targetRect, elementRect );\n\n\treturn [ name, elementRect.clone().moveTo( left, top ) ];\n}\n\n// For a given array of positioning functions, returns such that provides the best\n// fit of the `elementRect` into the `limiterRect` and `viewportRect`.\n//\n// @private\n// @param {module:utils/dom/position~Options#positions} positions Functions returning\n// {@link module:utils/dom/position~Position} to be checked, in the order of preference.\n// @param {utils/dom/rect~Rect} targetRect A rect of the {@link module:utils/dom/position~Options#target}.\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned {@link module:utils/dom/position~Options#element}.\n// @param {utils/dom/rect~Rect} limiterRect A rect of the {@link module:utils/dom/position~Options#limiter}.\n// @param {utils/dom/rect~Rect} viewportRect A rect of the viewport.\n// @returns {Array} An array containing the name of the position and it's rect.\nfunction getBestPosition( positions, targetRect, elementRect, limiterRect, viewportRect ) {\n\tlet maxLimiterIntersectArea = 0;\n\tlet maxViewportIntersectArea = 0;\n\tlet bestPositionRect;\n\tlet bestPositionName;\n\n\t// This is when element is fully visible.\n\tconst elementRectArea = elementRect.getArea();\n\n\tpositions.some( position => {\n\t\tconst [ positionName, positionRect ] = getPosition( position, targetRect, elementRect );\n\t\tlet limiterIntersectArea;\n\t\tlet viewportIntersectArea;\n\n\t\tif ( limiterRect ) {\n\t\t\tif ( viewportRect ) {\n\t\t\t\t// Consider only the part of the limiter which is visible in the viewport. So the limiter is getting limited.\n\t\t\t\tconst limiterViewportIntersectRect = limiterRect.getIntersection( viewportRect );\n\n\t\t\t\tif ( limiterViewportIntersectRect ) {\n\t\t\t\t\t// If the limiter is within the viewport, then check the intersection between that part of the\n\t\t\t\t\t// limiter and actual position.\n\t\t\t\t\tlimiterIntersectArea = limiterViewportIntersectRect.getIntersectionArea( positionRect );\n\t\t\t\t} else {\n\t\t\t\t\tlimiterIntersectArea = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlimiterIntersectArea = limiterRect.getIntersectionArea( positionRect );\n\t\t\t}\n\t\t}\n\n\t\tif ( viewportRect ) {\n\t\t\tviewportIntersectArea = viewportRect.getIntersectionArea( positionRect );\n\t\t}\n\n\t\t// The only criterion: intersection with the viewport.\n\t\tif ( viewportRect && !limiterRect ) {\n\t\t\tif ( viewportIntersectArea > maxViewportIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\t\t// The only criterion: intersection with the limiter.\n\t\telse if ( !viewportRect && limiterRect ) {\n\t\t\tif ( limiterIntersectArea > maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\t\t// Two criteria: intersection with the viewport and the limiter visible in the viewport.\n\t\telse {\n\t\t\tif ( viewportIntersectArea > maxViewportIntersectArea && limiterIntersectArea >= maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t} else if ( viewportIntersectArea >= maxViewportIntersectArea && limiterIntersectArea > maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\n\t\tfunction setBestPosition() {\n\t\t\tmaxViewportIntersectArea = viewportIntersectArea;\n\t\t\tmaxLimiterIntersectArea = limiterIntersectArea;\n\t\t\tbestPositionRect = positionRect;\n\t\t\tbestPositionName = positionName;\n\t\t}\n\n\t\t// If a such position is found that element is fully container by the limiter then, obviously,\n\t\t// there will be no better one, so finishing.\n\t\treturn limiterIntersectArea === elementRectArea;\n\t} );\n\n\treturn bestPositionRect ? [ bestPositionName, bestPositionRect ] : null;\n}\n\n// DOMRect (also Rect) works in a scroll–independent geometry but `position: absolute` doesn't.\n// This function converts Rect to `position: absolute` coordinates.\n//\n// @private\n// @param {utils/dom/rect~Rect} rect A rect to be converted.\n// @returns {Object} Object containing `left` and `top` properties, in absolute coordinates.\nfunction getAbsoluteRectCoordinates( { left, top } ) {\n\tconst { scrollX, scrollY } = global.window;\n\n\treturn {\n\t\tleft: left + scrollX,\n\t\ttop: top + scrollY,\n\t};\n}\n\n/**\n * The `getOptimalPosition` helper options.\n *\n * @interface module:utils/dom/position~Options\n */\n\n/**\n * Element that is to be positioned.\n *\n * @member {HTMLElement} #element\n */\n\n/**\n * Target with respect to which the `element` is to be positioned.\n *\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #target\n */\n\n/**\n * An array of functions which return {@link module:utils/dom/position~Position} relative\n * to the `target`, in the order of preference.\n *\n * @member {Array.<Function>} #positions\n */\n\n/**\n * When set, the algorithm will chose position which fits the most in the\n * limiter's bounding rect.\n *\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #limiter\n */\n\n/**\n * When set, the algorithm will chose such a position which fits `element`\n * the most inside visible viewport.\n *\n * @member {Boolean} #fitInViewport\n */\n\n/**\n * An object describing a position in `position: absolute` coordinate\n * system, along with position name.\n *\n * @typedef {Object} module:utils/dom/position~Position\n *\n * @property {Number} top Top position offset.\n * @property {Number} left Left position offset.\n * @property {String} name Name of the position.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getpositionedancestor\n */\n\nimport global from './global';\n\n/**\n * For a given element, returns the nearest ancestor element which CSS position is not \"static\".\n *\n * @param {HTMLElement} element The native DOM element to be checked.\n * @returns {HTMLElement|null}\n */\nexport default function getPositionedAncestor( element ) {\n\twhile ( element && element.tagName.toLowerCase() != 'html' ) {\n\t\tif ( global.window.getComputedStyle( element ).position != 'static' ) {\n\t\t\treturn element;\n\t\t}\n\n\t\telement = element.parentElement;\n\t}\n\n\treturn null;\n}\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/tooltip/tooltipview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/tooltip/tooltip.css';\n\n/**\n * The tooltip view class.\n *\n * @extends module:ui/view~View\n */\nexport default class TooltipView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The text of the tooltip visible to the user.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #text\n\t\t */\n\t\tthis.set( 'text', '' );\n\n\t\t/**\n\t\t * The position of the tooltip (south or north).\n\t\t *\n\t\t *\t\t+-----------+\n\t\t *\t\t|   north   |\n\t\t *\t\t+-----------+\n\t\t *\t\t      V\n\t\t *\t\t  [element]\n\t\t *\n\t\t *\t\t  [element]\n\t\t *\t\t      ^\n\t\t *\t\t+-----------+\n\t\t *\t\t|   south   |\n\t\t *\t\t+-----------+\n\t\t *\n\t\t * @observable\n\t\t * @default 's'\n\t\t * @member {'s'|'n'} #position\n\t\t */\n\t\tthis.set( 'position', 's' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-tooltip',\n\t\t\t\t\tbind.to( 'position', position => 'ck-tooltip_' + position ),\n\t\t\t\t\tbind.if( 'text', 'ck-hidden', value => !value.trim() )\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'span',\n\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t\t'ck-tooltip__text'\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: bind.to( 'text' ),\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/placeholder\n */\n\nimport '../../theme/placeholder.css';\n\n// Each document stores information about its placeholder elements and check functions.\nconst documentPlaceholders = new WeakMap();\n\n/**\n * A helper that enables a placeholder on the provided view element (also updates its visibility).\n * The placeholder is a CSS pseudo–element (with a text content) attached to the element.\n *\n * To change the placeholder text, simply call this method again with new options.\n *\n * To disable the placeholder, use {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} helper.\n *\n * @param {Object} [options] Configuration options of the placeholder.\n * @param {module:engine/view/view~View} options.view Editing view instance.\n * @param {module:engine/view/element~Element} options.element Element that will gain a placeholder.\n * See `options.isDirectHost` to learn more.\n * @param {String} options.text Placeholder text.\n * @param {Boolean} [options.isDirectHost=true] If set `false`, the placeholder will not be enabled directly\n * in the passed `element` but in one of its children (selected automatically, i.e. a first empty child element).\n * Useful when attaching placeholders to elements that can host other elements (not just text), for instance,\n * editable root elements.\n */\nexport function enablePlaceholder( options ) {\n\tconst { view, element, text, isDirectHost = true } = options;\n\tconst doc = view.document;\n\n\t// Use a single a single post fixer per—document to update all placeholders.\n\tif ( !documentPlaceholders.has( doc ) ) {\n\t\tdocumentPlaceholders.set( doc, new Map() );\n\n\t\t// If a post-fixer callback makes a change, it should return `true` so other post–fixers\n\t\t// can re–evaluate the document again.\n\t\tdoc.registerPostFixer( writer => updateDocumentPlaceholders( doc, writer ) );\n\t}\n\n\t// Store information about the element placeholder under its document.\n\tdocumentPlaceholders.get( doc ).set( element, {\n\t\ttext,\n\t\tisDirectHost\n\t} );\n\n\t// Update the placeholders right away.\n\tview.change( writer => updateDocumentPlaceholders( doc, writer ) );\n}\n\n/**\n * Disables the placeholder functionality from a given element.\n *\n * See {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} to learn more.\n *\n * @param {module:engine/view/view~View} view\n * @param {module:engine/view/element~Element} element\n */\nexport function disablePlaceholder( view, element ) {\n\tconst doc = element.document;\n\n\tview.change( writer => {\n\t\tif ( !documentPlaceholders.has( doc ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst placeholders = documentPlaceholders.get( doc );\n\t\tconst config = placeholders.get( element );\n\n\t\twriter.removeAttribute( 'data-placeholder', config.hostElement );\n\t\thidePlaceholder( writer, config.hostElement );\n\n\t\tplaceholders.delete( element );\n\t} );\n}\n\n/**\n * Shows a placeholder in the provided element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * **Note**: This helper will blindly show the placeholder directly in the root editable element if\n * one is passed, which could result in a visual clash if the editable element has some children\n * (for instance, an empty paragraph). Use {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`}\n * in that case or make sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\nexport function showPlaceholder( writer, element ) {\n\tif ( !element.hasClass( 'ck-placeholder' ) ) {\n\t\twriter.addClass( 'ck-placeholder', element );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Hides a placeholder in the element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\nexport function hidePlaceholder( writer, element ) {\n\tif ( element.hasClass( 'ck-placeholder' ) ) {\n\t\twriter.removeClass( 'ck-placeholder', element );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Checks if a placeholder should be displayed in the element.\n *\n * **Note**: This helper will blindly check the possibility of showing a placeholder directly in the\n * root editable element if one is passed, which may not be the expected result. If an element can\n * host other elements (not just text), most likely one of its children should be checked instead\n * because it will be the final host for the placeholder. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} in that case or make\n * sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean}\n */\nexport function needsPlaceholder( element ) {\n\tconst doc = element.document;\n\n\t// The element was removed from document.\n\tif ( !doc ) {\n\t\treturn false;\n\t}\n\n\t// The element is empty only as long as it contains nothing but uiElements.\n\tconst isEmptyish = !Array.from( element.getChildren() )\n\t\t.some( element => !element.is( 'uiElement' ) );\n\n\t// If the element is empty and the document is blurred.\n\tif ( !doc.isFocused && isEmptyish ) {\n\t\treturn true;\n\t}\n\n\tconst viewSelection = doc.selection;\n\tconst selectionAnchor = viewSelection.anchor;\n\n\t// If document is focused and the element is empty but the selection is not anchored inside it.\n\tif ( isEmptyish && selectionAnchor && selectionAnchor.parent !== element ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Updates all placeholders associated with a document in a post–fixer callback.\n//\n// @private\n// @param { module:engine/view/document~Document} doc\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {Boolean} True if any changes were made to the view document.\nfunction updateDocumentPlaceholders( doc, writer ) {\n\tconst placeholders = documentPlaceholders.get( doc );\n\tlet wasViewModified = false;\n\n\tfor ( const [ element, config ] of placeholders ) {\n\t\tif ( updatePlaceholder( writer, element, config ) ) {\n\t\t\twasViewModified = true;\n\t\t}\n\t}\n\n\treturn wasViewModified;\n}\n\n// Updates a single placeholder in a post–fixer callback.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/element~Element} element\n// @param {Object} config Configuration of the placeholder\n// @param {String} config.text\n// @param {Boolean} config.isDirectHost\n// @returns {Boolean} True if any changes were made to the view document.\nfunction updatePlaceholder( writer, element, config ) {\n\tconst { text, isDirectHost } = config;\n\tconst hostElement = isDirectHost ? element : getChildPlaceholderHostSubstitute( element );\n\tlet wasViewModified = false;\n\n\t// When not a direct host, it could happen that there is no child element\n\t// capable of displaying a placeholder.\n\tif ( !hostElement ) {\n\t\treturn false;\n\t}\n\n\t// Cache the host element. It will be necessary for disablePlaceholder() to know\n\t// which element should have class and attribute removed because, depending on\n\t// the config.isDirectHost value, it could be the element or one of its descendants.\n\tconfig.hostElement = hostElement;\n\n\t// This may be necessary when updating the placeholder text to something else.\n\tif ( hostElement.getAttribute( 'data-placeholder' ) !== text ) {\n\t\twriter.setAttribute( 'data-placeholder', text, hostElement );\n\t\twasViewModified = true;\n\t}\n\n\tif ( needsPlaceholder( hostElement ) ) {\n\t\tif ( showPlaceholder( writer, hostElement ) ) {\n\t\t\twasViewModified = true;\n\t\t}\n\t} else if ( hidePlaceholder( writer, hostElement ) ) {\n\t\twasViewModified = true;\n\t}\n\n\treturn wasViewModified;\n}\n\n// Gets a child element capable of displaying a placeholder if a parent element can host more\n// than just text (for instance, when it is a root editable element). The child element\n// can then be used in other placeholder helpers as a substitute of its parent.\n//\n// @private\n// @param {module:engine/view/element~Element} parent\n// @returns {module:engine/view/element~Element|null}\nfunction getChildPlaceholderHostSubstitute( parent ) {\n\tif ( parent.childCount === 1 ) {\n\t\tconst firstChild = parent.getChild( 0 );\n\n\t\tif ( firstChild.is( 'element' ) && !firstChild.is( 'uiElement' ) ) {\n\t\t\treturn firstChild;\n\t\t}\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/label/labelview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/label/label.css';\n\n/**\n * The label view class.\n *\n * @extends module:ui/view~View\n */\nexport default class LabelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The text of the label.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #text\n\t\t */\n\t\tthis.set( 'text' );\n\n\t\t/**\n\t\t * The `for` attribute of the label (i.e. to pair with an `<input>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #for\n\t\t */\n\t\tthis.set( 'for' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'label',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-label'\n\t\t\t\t],\n\t\t\t\tfor: bind.to( 'for' )\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: bind.to( 'text' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.042 9.367l2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M14.958 9.367l-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/undoui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport undoIcon from '../theme/icons/undo.svg';\nimport redoIcon from '../theme/icons/redo.svg';\n/**\n * The undo UI feature. It introduces the `'undo'` and `'redo'` buttons to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UndoUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = editor.t;\n        const localizedUndoIcon = locale.uiLanguageDirection == 'ltr' ? undoIcon : redoIcon;\n        const localizedRedoIcon = locale.uiLanguageDirection == 'ltr' ? redoIcon : undoIcon;\n        this._addButton('undo', t('Undo'), 'CTRL+Z', localizedUndoIcon);\n        this._addButton('redo', t('Redo'), 'CTRL+Y', localizedRedoIcon);\n    }\n    /**\n\t * Creates a button for the specified command.\n\t *\n\t * @private\n\t * @param {String} name Command name.\n\t * @param {String} label Button label.\n\t * @param {String} keystroke Command keystroke.\n\t * @param {String} Icon Source of the icon.\n\t */\n    _addButton(name, label, keystroke, Icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, locale => {\n            const command = editor.commands.get(name);\n            const view = new ButtonView(locale);\n            view.set({\n                label,\n                icon: Icon,\n                keystroke,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            this.listenTo(view, 'execute', () => editor.execute(name));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undo\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoEditing from './undoediting';\nimport UndoUI from './undoui';\n\n/**\n * The undo feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:undo/undoediting~UndoEditing undo editing feature}\n * and {@link module:undo/undoui~UndoUI undo UI feature}.\n *\n * Below is the explanation of the undo mechanism working together with {@link module:engine/model/history~History History}:\n *\n * Whenever a {@link module:engine/model/operation/operation~Operation operation} is applied to the\n * {@link module:engine/model/document~Document document}, it is saved to `History` as is.\n * The {@link module:engine/model/batch~Batch batch} that owns that operation is also saved, in\n * {@link module:undo/undocommand~UndoCommand}, together with the selection that was present in the document before the\n * operation was applied. A batch is saved instead of the operation because changes are undone batch-by-batch, not operation-by-operation\n * and a batch is seen as one undo step.\n *\n * After some changes happen to the document, the `History` and `UndoCommand` stack can be represented as follows:\n *\n *\t\t    History                            Undo stack\n *\t\t==============             ==================================\n *\t\t[operation A1]                         [batch A]\n *\t\t[operation B1]                         [batch B]\n *\t\t[operation B2]                         [batch C]\n *\t\t[operation C1]\n *\t\t[operation C2]\n *\t\t[operation B3]\n *\t\t[operation C3]\n *\n * Where operations starting with the same letter are from same batch.\n *\n * Undoing a batch means that a set of operations which will reverse the effects of that batch needs to be generated.\n * For example, if a batch added several letters, undoing the batch should remove them. It is important to apply undoing\n * operations in the reversed order, so if a batch has operation `X`, `Y`, `Z`, reversed operations `Zr`, `Yr` and `Xr`\n * need to be applied. Otherwise reversed operation `Xr` would operate on a wrong document state, because operation `X`\n * does not know that operations `Y` and `Z` happened.\n *\n * After operations from an undone batch got {@link module:engine/model/operation/operation~Operation#getReversed reversed},\n * one needs to make sure if they are ready to be applied. In the scenario above, operation `C3` is the last operation and `C3r`\n * bases on up-to-date document state, so it can be applied to the document.\n *\n *\t\t     History                             Undo stack\n *\t\t=================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]             [   processing undoing batch C   ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\n * Next is operation `C2`, reversed to `C2r`. `C2r` bases on `C2`, so it bases on the wrong document state. It needs to be\n * transformed by operations from history that happened after it, so it \"knows\" about them. Let us assume that `C2' = C2r * B3 * C3 * C3r`,\n * where `*` means \"transformed by\". Rest of operations from that batch are processed in the same fashion.\n *\n *\t\t     History                             Undo stack                                      Redo stack\n *\t\t=================             ==================================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]                                    [ batch Cr ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\t\t[ operation C2' ]\n *\t\t[ operation C1' ]\n *\n * Selective undo works on the same basis, however, instead of undoing the last batch in the undo stack, any batch can be undone.\n * The same algorithm applies: operations from a batch (i.e. `A1`) are reversed and then transformed by operations stored in history.\n *\n * Redo also is very similar to undo. It has its own stack that is filled with undoing (reversed batches). Operations from\n * batch that is re-done are reversed-back, transformed in proper order and applied to the document.\n *\n *\t\t     History                             Undo stack                                      Redo stack\n *\t\t=================             ==================================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]                      [ batch Crr ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\t\t[ operation C2' ]\n *\t\t[ operation C1' ]\n *\t\t[ operation C1'r]\n *\t\t[ operation C2'r]\n *\t\t[ operation C3rr]\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Undo extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ UndoEditing, UndoUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Undo';\n\t}\n}\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import isObjectLike from './isObjectLike.js';\nimport isPlainObject from './isPlainObject.js';\n\n/**\n * Checks if `value` is likely a DOM element.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n * @example\n *\n * _.isElement(document.body);\n * // => true\n *\n * _.isElement('<body>');\n * // => false\n */\nfunction isElement(value) {\n  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n}\n\nexport default isElement;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/setdatainelement\n */\n\n/* globals HTMLTextAreaElement */\n\n/**\n * Sets data in a given element.\n *\n * @param {HTMLElement} el The element in which the data will be set.\n * @param {String} data The data string.\n */\nexport default function setDataInElement( el, data ) {\n\tif ( el instanceof HTMLTextAreaElement ) {\n\t\tel.value = data;\n\t}\n\n\tel.innerHTML = data;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarseparatorview\n */\n\nimport View from '../view';\n\n/**\n * The toolbar separator view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ToolbarSeparatorView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar__separator'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 10 10\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/bold/boldui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport boldIcon from '../../theme/icons/bold.svg';\nconst BOLD = 'bold';\n/**\n * The bold UI feature. It introduces the Bold button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BoldUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(BOLD, locale => {\n            const command = editor.commands.get(BOLD);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Bold'),\n                icon: boldIcon,\n                keystroke: 'CTRL+B',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(BOLD));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/bold\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BoldEditing from './bold/boldediting';\nimport BoldUI from './bold/boldui';\n\n/**\n * The bold feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature documentation}\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/bold/boldediting~BoldEditing bold editing feature}\n * and {@link module:basic-styles/bold/boldui~BoldUI bold UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Bold extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ BoldEditing, BoldUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Bold';\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.586 14.633l.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/italic/italicui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport italicIcon from '../../theme/icons/italic.svg';\nconst ITALIC = 'italic';\n/**\n * The italic UI feature. It introduces the Italic button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ItalicUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(ITALIC, locale => {\n            const command = editor.commands.get(ITALIC);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Italic'),\n                icon: italicIcon,\n                keystroke: 'CTRL+I',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(ITALIC));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/italic\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ItalicEditing from './italic/italicediting';\nimport ItalicUI from './italic/italicui';\n\n/**\n * The italic feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature documentation}\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/italic/italicediting~ItalicEditing} and\n * {@link module:basic-styles/italic/italicui~ItalicUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Italic extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ItalicEditing, ItalicUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Italic';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/utils/dataapimixin\n */\n\n/**\n * Implementation of the {@link module:core/editor/utils/dataapimixin~DataApi}.\n *\n * @mixin DataApiMixin\n * @implements module:core/editor/utils/dataapimixin~DataApi\n */\nconst DataApiMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tsetData( data ) {\n\t\tthis.data.set( data );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tgetData( options ) {\n\t\treturn this.data.get( options );\n\t}\n};\n\nexport default DataApiMixin;\n\n/**\n * Interface defining editor methods for setting and getting data to and from the editor's main root element\n * using the {@link module:core/editor/editor~Editor#data data pipeline}.\n *\n * This interface is not a part of the {@link module:core/editor/editor~Editor} class because one may want to implement\n * an editor with multiple root elements, in which case the methods for setting and getting data will need to be implemented\n * differently.\n *\n * @interface DataApi\n */\n\n/**\n * Sets the data in the editor.\n *\n *\t\teditor.setData( '<p>This is editor!</p>' );\n *\n * By default the editor accepts HTML. This can be controlled by injecting a different data processor.\n * See the {@glink features/markdown Markdown output} guide for more details.\n *\n * Note: Not only is the format of the data configurable, but the type of the `setData()`'s parameter does not\n * have to be a string either. You can e.g. accept an object or a DOM `DocumentFragment` if you consider this\n * the right format for you.\n *\n * @method #setData\n * @param {String} data Input data.\n */\n\n/**\n * Gets the data from the editor.\n *\n *\t\teditor.getData(); // -> '<p>This is editor!</p>'\n *\n * By default the editor outputs HTML. This can be controlled by injecting a different data processor.\n * See the {@glink features/markdown Markdown output} guide for more details.\n *\n * Note: Not only is the format of the data configurable, but the type of the `getData()`'s return value does not\n * have to be a string either. You can e.g. return an object or a DOM `DocumentFragment` if you consider this\n * the right format for you.\n *\n * @method #getData\n * @param {Object} [options]\n * @param {String} [options.rootName='main'] Root name.\n * @param {String} [options.trim='empty'] Whether returned data should be trimmed. This option is set to `'empty'` by default,\n * which means that whenever editor content is considered empty, an empty string is returned. To turn off trimming\n * use `'none'`. In such cases exact content will be returned (for example `'<p>&nbsp;</p>'` for an empty editor).\n * @returns {String} Output data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/basichtmlwriter\n */\n\n/* globals document */\n\n/**\n * Basic HTML writer. It uses the native `innerHTML` property for basic conversion\n * from a document fragment to an HTML string.\n *\n * @implements module:engine/dataprocessor/htmlwriter~HtmlWriter\n */\nexport default class BasicHtmlWriter {\n\t/**\n\t * Returns an HTML string created from the document fragment.\n\t *\n\t * @param {DocumentFragment} fragment\n\t * @returns {String}\n\t */\n\tgetHtml( fragment ) {\n\t\tconst doc = document.implementation.createHTMLDocument( '' );\n\t\tconst container = doc.createElement( 'div' );\n\t\tcontainer.appendChild( fragment );\n\n\t\treturn container.innerHTML;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/editorui/editoruiview\n */\n\n/* globals document */\n\nimport View from '../view';\nimport Template from '../template';\n\nimport '../../theme/components/editorui/editorui.css';\n\n/**\n * The editor UI view class. Base class for the editor main views.\n *\n * @extends module:ui/view~View\n */\nexport default class EditorUIView extends View {\n\t/**\n\t * Creates an instance of the editor UI view class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Collection of the child views, detached from the DOM\n\t\t * structure of the editor, like panels, icons etc.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection} #body\n\t\t */\n\t\tthis.body = this.createCollection();\n\n\t\t/**\n\t\t * The element holding elements of the 'body' region.\n\t\t *\n\t\t * @private\n\t\t * @member {HTMLElement} #_bodyCollectionContainer\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis._renderBodyCollection();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._bodyCollectionContainer.remove();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Creates and appends to `<body>` the {@link #body} collection container.\n\t *\n\t * @private\n\t */\n\t_renderBodyCollection() {\n\t\tconst locale = this.locale;\n\t\tconst bodyElement = this._bodyCollectionContainer = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-reset_all',\n\t\t\t\t\t'ck-body',\n\t\t\t\t\t'ck-rounded-corners'\n\t\t\t\t],\n\t\t\t\tdir: locale.uiLanguageDirection,\n\t\t\t},\n\t\t\tchildren: this.body\n\t\t} ).render();\n\n\t\tdocument.body.appendChild( bodyElement );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals HTMLTextAreaElement */\n\n/**\n * @module utils/dom/getdatafromelement\n */\n\n/**\n * Gets data from a given source element.\n *\n * @param {HTMLElement} el The element from which the data will be retrieved.\n * @returns {String} The data string.\n */\nexport default function getDataFromElement( el ) {\n\tif ( el instanceof HTMLTextAreaElement ) {\n\t\treturn el.value;\n\t}\n\n\treturn el.innerHTML;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/config\n */\n\nimport { isPlainObject, isElement, cloneDeepWith } from 'lodash-es';\n\n/**\n * Handles a configuration dictionary.\n */\nexport default class Config {\n\t/**\n\t * Creates an instance of the {@link ~Config} class.\n\t *\n\t * @param {Object} [configurations] The initial configurations to be set. Usually, provided by the user.\n\t * @param {Object} [defaultConfigurations] The default configurations. Usually, provided by the system.\n\t */\n\tconstructor( configurations, defaultConfigurations ) {\n\t\t/**\n\t\t * Store for the whole configuration.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._config = {};\n\n\t\t// Set default configuration.\n\t\tif ( defaultConfigurations ) {\n\t\t\tthis.define( defaultConfigurations );\n\t\t}\n\n\t\t// Set initial configuration.\n\t\tif ( configurations ) {\n\t\t\tthis._setObjectToTarget( this._config, configurations );\n\t\t}\n\t}\n\n\t/**\n\t * Set configuration values.\n\t *\n\t * It accepts both a name/value pair or an object, which properties and values will be used to set\n\t * configurations.\n\t *\n\t * It also accepts setting a \"deep configuration\" by using dots in the name. For example, `'resize.width'` sets\n\t * the value for the `width` configuration in the `resize` subset.\n\t *\n\t *\t\tconfig.set( 'width', 500 );\n\t *\t\tconfig.set( 'toolbar.collapsed', true );\n\t *\n\t *\t\t// Equivalent to:\n\t *\t\tconfig.set( {\n\t *\t\t\twidth: 500\n\t *\t\t\ttoolbar: {\n\t *\t\t\t\tcollapsed: true\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Passing an object as the value will amend the configuration, not replace it.\n\t *\n\t *\t\tconfig.set( 'toolbar', {\n\t *\t\t\tcollapsed: true,\n\t *\t\t} );\n\t *\n\t *\t\tconfig.set( 'toolbar', {\n\t *\t\t\tcolor: 'red',\n\t *\t\t} );\n\t *\n\t *\t\tconfig.get( 'toolbar.collapsed' ); // true\n\t *\t\tconfig.get( 'toolbar.color' ); // 'red'\n\t *\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t */\n\tset( name, value ) {\n\t\tthis._setToTarget( this._config, name, value );\n\t}\n\n\t/**\n\t * Does exactly the same as {@link #set} with one exception – passed configuration extends\n\t * existing one, but does not overwrite already defined values.\n\t *\n\t * This method is supposed to be called by plugin developers to setup plugin's configurations. It would be\n\t * rarely used for other needs.\n\t *\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t */\n\tdefine( name, value ) {\n\t\tconst isDefine = true;\n\n\t\tthis._setToTarget( this._config, name, value, isDefine );\n\t}\n\n\t/**\n\t * Gets the value for a configuration entry.\n\t *\n\t *\t\tconfig.get( 'name' );\n\t *\n\t * Deep configurations can be retrieved by separating each part with a dot.\n\t *\n\t *\t\tconfig.get( 'toolbar.collapsed' );\n\t *\n\t * @param {String} name The configuration name. Configuration names are case-sensitive.\n\t * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\n\t */\n\tget( name ) {\n\t\treturn this._getFromSource( this._config, name );\n\t}\n\n\t/**\n\t * Saves passed configuration to the specified target (nested object).\n\t *\n\t * @private\n\t * @param {Object} target Nested config object.\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t * @param {Boolean} [isDefine=false] Define if passed configuration should overwrite existing one.\n\t */\n\t_setToTarget( target, name, value, isDefine = false ) {\n\t\t// In case of an object, iterate through it and call `_setToTarget` again for each property.\n\t\tif ( isPlainObject( name ) ) {\n\t\t\tthis._setObjectToTarget( target, name, isDefine );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n\t\tconst parts = name.split( '.' );\n\n\t\t// Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n\t\tname = parts.pop();\n\n\t\t// Iterate over parts to check if currently stored configuration has proper structure.\n\t\tfor ( const part of parts ) {\n\t\t\t// If there is no object for specified part then create one.\n\t\t\tif ( !isPlainObject( target[ part ] ) ) {\n\t\t\t\ttarget[ part ] = {};\n\t\t\t}\n\n\t\t\t// Nested object becomes a target.\n\t\t\ttarget = target[ part ];\n\t\t}\n\n\t\t// In case of value is an object.\n\t\tif ( isPlainObject( value ) ) {\n\t\t\t// We take care of proper config structure.\n\t\t\tif ( !isPlainObject( target[ name ] ) ) {\n\t\t\t\ttarget[ name ] = {};\n\t\t\t}\n\n\t\t\ttarget = target[ name ];\n\n\t\t\t// And iterate through this object calling `_setToTarget` again for each property.\n\t\t\tthis._setObjectToTarget( target, value, isDefine );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Do nothing if we are defining configuration for non empty name.\n\t\tif ( isDefine && typeof target[ name ] != 'undefined' ) {\n\t\t\treturn;\n\t\t}\n\n\t\ttarget[ name ] = value;\n\t}\n\n\t/**\n\t * Get specified configuration from specified source (nested object).\n\t *\n\t * @private\n\t * @param {Object} source level of nested object.\n\t * @param {String} name The configuration name. Configuration names are case-sensitive.\n\t * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\n\t */\n\t_getFromSource( source, name ) {\n\t\t// The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n\t\tconst parts = name.split( '.' );\n\n\t\t// Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n\t\tname = parts.pop();\n\n\t\t// Iterate over parts to check if currently stored configuration has proper structure.\n\t\tfor ( const part of parts ) {\n\t\t\tif ( !isPlainObject( source[ part ] ) ) {\n\t\t\t\tsource = null;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Nested object becomes a source.\n\t\t\tsource = source[ part ];\n\t\t}\n\n\t\t// Always returns undefined for non existing configuration.\n\t\treturn source ? cloneConfig( source[ name ] ) : undefined;\n\t}\n\n\t/**\n\t * Iterates through passed object and calls {@link #_setToTarget} method with object key and value for each property.\n\t *\n\t * @private\n\t * @param {Object} target Nested config object.\n\t * @param {Object} configuration Configuration data set\n\t * @param {Boolean} [isDefine] Defines if passed configuration is default configuration or not.\n\t */\n\t_setObjectToTarget( target, configuration, isDefine ) {\n\t\tObject.keys( configuration ).forEach( key => {\n\t\t\tthis._setToTarget( target, key, configuration[ key ], isDefine );\n\t\t} );\n\t}\n}\n\n// Clones configuration object or value.\n// @param {*} source Source configuration\n// @returns {*} Cloned configuration value.\nfunction cloneConfig( source ) {\n\treturn cloneDeepWith( source, leaveDOMReferences );\n}\n\n// A customizer function for cloneDeepWith.\n// It will leave references to DOM Elements instead of cloning them.\n//\n// @param {*} value\n// @returns {Element|undefined}\nfunction leaveDOMReferences( value ) {\n\treturn isElement( value ) ? value : undefined;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/rooteditableelement\n */\n\nimport EditableElement from './editableelement';\n\nconst rootNameSymbol = Symbol( 'rootName' );\n\n/**\n * Class representing a single root in the data view. A root can be either {@link ~RootEditableElement#isReadOnly editable or read-only},\n * but in both cases it is called \"an editable\". Roots can contain other {@link module:engine/view/editableelement~EditableElement\n * editable elements} making them \"nested editables\".\n *\n * @extends module:engine/view/editableelement~EditableElement\n */\nexport default class RootEditableElement extends EditableElement {\n\t/**\n\t * Creates root editable element.\n\t *\n\t * @param {String} name Node name.\n\t */\n\tconstructor( name ) {\n\t\tsuper( name );\n\n\t\t/**\n\t\t * Name of this root inside {@link module:engine/view/document~Document} that is an owner of this root. If no\n\t\t * other name is set, `main` name is used.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.rootName = 'main';\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\trootEditableElement.is( 'rootEditableElement' ); // -> true\n\t *\t\trootEditableElement.is( 'editableElement' ); // -> true\n\t *\t\trootEditableElement.is( 'element' ); // -> true\n\t *\t\trootEditableElement.is( 'node' ); // -> true\n\t *\t\trootEditableElement.is( 'view:rootEditableElement' ); // -> true\n\t *\t\trootEditableElement.is( 'view:editableElement' ); // -> true\n\t *\t\trootEditableElement.is( 'view:element' ); // -> true\n\t *\t\trootEditableElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\trootEditableElement.is( 'model:element' ); // -> false\n\t *\t\trootEditableElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is a root editbale element, you can also check its\n\t * {@link module:engine/view/rooteditableelement~RootEditableElement#name name}:\n\t *\n\t *\t\trootEditableElement.is( 'div' ); // -> true if this is a div root editable element\n\t *\t\trootEditableElement.is( 'rootEditableElement', 'div' ); // -> same as above\n\t *\t\ttext.is( 'div' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'rootElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'rootElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\tget rootName() {\n\t\treturn this.getCustomProperty( rootNameSymbol );\n\t}\n\n\tset rootName( rootName ) {\n\t\tthis._setCustomProperty( rootNameSymbol, rootName );\n\t}\n\n\t/**\n\t * Overrides old element name and sets new one.\n\t * This is needed because view roots are created before they are attached to the DOM.\n\t * The name of the root element is temporary at this stage. It has to be changed when the\n\t * view root element is attached to the DOM element.\n\t *\n\t * @protected\n\t * @param {String} name The new name of element.\n\t */\n\tset _name( name ) {\n\t\tthis.name = name;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/document\n */\n\nimport DocumentSelection from './documentselection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\n/**\n * Document class creates an abstract layer over the content editable area, contains a tree of view elements and\n * {@link module:engine/view/documentselection~DocumentSelection view selection} associated with this document.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Document {\n\t/**\n\t * Creates a Document instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Selection done on this document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection} module:engine/view/document~Document#selection\n\t\t */\n\t\tthis.selection = new DocumentSelection();\n\n\t\t/**\n\t\t * Roots of the view tree. Collection of the {@link module:engine/view/element~Element view elements}.\n\t\t *\n\t\t * View roots are created as a result of binding between {@link module:engine/view/document~Document#roots} and\n\t\t * {@link module:engine/model/document~Document#roots} and this is handled by\n\t\t * {@link module:engine/controller/editingcontroller~EditingController}, so to create view root we need to create\n\t\t * model root using {@link module:engine/model/document~Document#createRoot}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection} module:engine/view/document~Document#roots\n\t\t */\n\t\tthis.roots = new Collection( { idProperty: 'rootName' } );\n\n\t\t/**\n\t\t * Defines whether document is in read-only mode.\n\t\t *\n\t\t * When document is read-ony then all roots are read-only as well and caret placed inside this root is hidden.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * True if document is focused.\n\t\t *\n\t\t * This property is updated by the {@link module:engine/view/observer/focusobserver~FocusObserver}.\n\t\t * If the {@link module:engine/view/observer/focusobserver~FocusObserver} is disabled this property will not change.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/document~Document#isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * True if composition is in progress inside the document.\n\t\t *\n\t\t * This property is updated by the {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n\t\t * If the {@link module:engine/view/observer/compositionobserver~CompositionObserver} is disabled this property will not change.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/document~Document#isComposing\n\t\t */\n\t\tthis.set( 'isComposing', false );\n\n\t\t/**\n\t\t * Post-fixer callbacks registered to the view document.\n\t\t *\n\t\t * @private\n\t\t * @member {Set}\n\t\t */\n\t\tthis._postFixers = new Set();\n\t}\n\n\t/**\n\t * Gets a {@link module:engine/view/document~Document#roots view root element} with the specified name. If the name is not\n\t * specific \"main\" root is returned.\n\t *\n\t * @param {String} [name='main'] Name of the root.\n\t * @returns {module:engine/view/rooteditableelement~RootEditableElement|null} The view root element with the specified name\n\t * or null when there is no root of given name.\n\t */\n\tgetRoot( name = 'main' ) {\n\t\treturn this.roots.get( name );\n\t}\n\n\t/**\n\t * Allows registering post-fixer callbacks. A post-fixers mechanism allows to update the view tree just before it is rendered\n\t * to the DOM.\n\t *\n\t * Post-fixers are executed right after all changes from the outermost change block were applied but\n\t * before the {@link module:engine/view/view~View#event:render render event} is fired. If a post-fixer callback made\n\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n\t * not be fixed in the new document tree state.\n\t *\n\t * View post-fixers are useful when you want to apply some fixes whenever the view structure changes. Keep in mind that\n\t * changes executed in a view post-fixer should not break model-view mapping.\n\t *\n\t * The types of changes which should be safe:\n\t *\n\t * * adding or removing attribute from elements,\n\t * * changes inside of {@link module:engine/view/uielement~UIElement UI elements},\n\t * * {@link module:engine/model/differ~Differ#refreshItem marking some of the model elements to be re-converted}.\n\t *\n\t * Try to avoid changes which touch view structure:\n\t *\n\t * * you should not add or remove nor wrap or unwrap any view elements,\n\t * * you should not change the editor data model in a view post-fixer.\n\t *\n\t * As a parameter, a post-fixer callback receives a {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n\t *\n\t * Typically, a post-fixer will look like this:\n\t *\n\t *\t\teditor.editing.view.document.registerPostFixer( writer => {\n\t *\t\t\tif ( checkSomeCondition() ) {\n\t *\t\t\t\twriter.doSomething();\n\t *\n\t *\t\t\t\t// Let other post-fixers know that something changed.\n\t *\t\t\t\treturn true;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Note that nothing happens right after you register a post-fixer (e.g. execute such a code in the console).\n\t * That is because adding a post-fixer does not execute it.\n\t * The post-fixer will be executed as soon as any change in the document needs to cause its rendering.\n\t * If you want to re-render the editor's view after registering the post-fixer then you should do it manually by calling\n\t * {@link module:engine/view/view~View#forceRender `view.forceRender()`}.\n\t *\n\t * If you need to register a callback which is executed when DOM elements are already updated,\n\t * use {@link module:engine/view/view~View#event:render render event}.\n\t *\n\t * @param {Function} postFixer\n\t */\n\tregisterPostFixer( postFixer ) {\n\t\tthis._postFixers.add( postFixer );\n\t}\n\n\t/**\n\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n\t */\n\tdestroy() {\n\t\tthis.roots.map( root => root.destroy() );\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n\t *\n\t * @protected\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\t_callPostFixers( writer ) {\n\t\tlet wasFixed = false;\n\n\t\tdo {\n\t\t\tfor ( const callback of this._postFixers ) {\n\t\t\t\twasFixed = callback( writer );\n\n\t\t\t\tif ( wasFixed ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while ( wasFixed );\n\t}\n\n\t/**\n\t * Event fired whenever document content layout changes. It is fired whenever content is\n\t * {@link module:engine/view/view~View#event:render rendered}, but should be also fired by observers in case of\n\t * other actions which may change layout, for instance when image loads.\n\t *\n\t * @event layoutChanged\n\t */\n}\n\nmix( Document, ObservableMixin );\n\n/**\n * Enum representing type of the change.\n *\n * Possible values:\n *\n * * `children` - for child list changes,\n * * `attributes` - for element attributes changes,\n * * `text` - for text nodes changes.\n *\n * @typedef {String} module:engine/view/document~ChangeType\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/attributeelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n// Default attribute priority.\nconst DEFAULT_PRIORITY = 10;\n\n/**\n * Attribute elements are used to represent formatting elements in the view (think – `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class AttributeElement extends Element {\n\t/**\n\t * Creates an attribute element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n\t * @see module:engine/view/element~Element\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\n\t\t/**\n\t\t * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Number}\n\t\t */\n\t\tthis._priority = DEFAULT_PRIORITY;\n\n\t\t/**\n\t\t * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n\t\t * and then two elements are considered similar if, and only if they have the same `_id`.\n\t\t *\n\t\t * @protected\n\t\t * @member {String|Number}\n\t\t */\n\t\tthis._id = null;\n\n\t\t/**\n\t\t * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n\t\t * and still exist in the view tree.\n\t\t *\n\t\t * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set.<module:engine/view/attributeelement~AttributeElement>|null}\n\t\t */\n\t\tthis._clonesGroup = null;\n\t}\n\n\t/**\n\t * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget priority() {\n\t\treturn this._priority;\n\t}\n\n\t/**\n\t * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n\t * and then two elements are considered similar if, and only if they have the same `id`.\n\t *\n\t * @readonly\n\t * @type {String|Number}\n\t */\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n\t * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n\t *\n\t * Note: If this element has been removed from the tree, returned set will not include it.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n\t * if this element has no `id`.\n\t *\n\t * @returns {Set.<module:engine/view/attributeelement~AttributeElement>} Set containing all the attribute elements\n\t * with the same `id` that were added and not removed from the view tree.\n\t */\n\tgetElementsWithSameId() {\n\t\tif ( this.id === null ) {\n\t\t\t/**\n\t\t\t * Cannot get elements with the same id for an attribute element without id.\n\t\t\t *\n\t\t\t * @error attribute-element-get-elements-with-same-id-no-id\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'attribute-element-get-elements-with-same-id-no-id: ' +\n\t\t\t\t'Cannot get elements with the same id for an attribute element without id.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\treturn new Set( this._clonesGroup );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tattributeElement.is( 'attributeElement' ); // -> true\n\t *\t\tattributeElement.is( 'element' ); // -> true\n\t *\t\tattributeElement.is( 'node' ); // -> true\n\t *\t\tattributeElement.is( 'view:attributeElement' ); // -> true\n\t *\t\tattributeElement.is( 'view:element' ); // -> true\n\t *\t\tattributeElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\tattributeElement.is( 'model:element' ); // -> false\n\t *\t\tattributeElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an attribute element, you can also check its\n\t * {@link module:engine/view/attributeelement~AttributeElement#name name}:\n\t *\n\t *\t\tattributeElement.is( 'b' ); // -> true if this is a bold element\n\t *\t\tattributeElement.is( 'attributeElement', 'b' ); // -> same as above\n\t *\t\ttext.is( 'b' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type && type.replace( /^view:/, '' );\n\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'attributeElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'attributeElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t *\n\t * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n\t * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n\t * different set of children nodes.\n\t *\n\t * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n\t * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n\t * considered similar.\n\t *\n\t * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n\t *\n\t * * two following similar elements can be merged together into one, longer element,\n\t * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n\t * decide whether processed element should be unwrapped,\n\t * * etc.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\t// If any element has an `id` set, just compare the ids.\n\t\tif ( this.id !== null || otherElement.id !== null ) {\n\t\t\treturn this.id === otherElement.id;\n\t\t}\n\n\t\treturn super.isSimilar( otherElement ) && this.priority == otherElement.priority;\n\t}\n\n\t/**\n\t * Clones provided element with priority.\n\t *\n\t * @protected\n\t * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\n\t */\n\t_clone( deep ) {\n\t\tconst cloned = super._clone( deep );\n\n\t\t// Clone priority too.\n\t\tcloned._priority = this._priority;\n\n\t\t// And id too.\n\t\tcloned._id = this._id;\n\n\t\treturn cloned;\n\t}\n}\n\n/**\n * Default attribute priority.\n *\n * @member {Number} module:engine/view/attributeelement~AttributeElement.DEFAULT_PRIORITY\n */\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\n\n// Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getFillerOffset() {\n\t// <b>foo</b> does not need filler.\n\tif ( nonUiChildrenCount( this ) ) {\n\t\treturn null;\n\t}\n\n\tlet element = this.parent;\n\n\t// <p><b></b></p> needs filler -> <p><b><br></b></p>\n\twhile ( element && element.is( 'attributeElement' ) ) {\n\t\tif ( nonUiChildrenCount( element ) > 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\telement = element.parent;\n\t}\n\n\tif ( !element || nonUiChildrenCount( element ) > 1 ) {\n\t\treturn null;\n\t}\n\n\t// Render block filler at the end of element (after all ui elements).\n\treturn this.childCount;\n}\n\n// Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n//\n// @param {module:engine/view/element~Element} element\n// @returns {Number}\nfunction nonUiChildrenCount( element ) {\n\treturn Array.from( element.getChildren() ).filter( element => !element.is( 'uiElement' ) ).length;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/emptyelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n\n/**\n * Empty element class. It is used to represent elements that cannot contain any child nodes (for example `<img>` elements).\n *\n * To create a new empty element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class EmptyElement extends Element {\n\t/**\n\t * Creates new instance of EmptyElement.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\n\t * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createEmptyElement\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attributes] Collection of attributes.\n\t */\n\tconstructor( name, attributes, children ) {\n\t\tsuper( name, attributes, children );\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for EmptyElements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\temptyElement.is( 'emptyElement' ); // -> true\n\t *\t\temptyElement.is( 'element' ); // -> true\n\t *\t\temptyElement.is( 'node' ); // -> true\n\t *\t\temptyElement.is( 'view:emptyElement' ); // -> true\n\t *\t\temptyElement.is( 'view:element' ); // -> true\n\t *\t\temptyElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\temptyElement.is( 'model:element' ); // -> false\n\t *\t\temptyElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an empty element, you can also check its\n\t * {@link module:engine/view/emptyelement~EmptyElement#name name}:\n\t *\n\t *\t\temptyElement.is( 'img' ); // -> true if this is a img element\n\t *\t\temptyElement.is( 'emptyElement', 'img' ); // -> same as above\n\t *\t\ttext.is( 'img' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'emptyElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'emptyElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\n\t * adding any child nodes to EmptyElement.\n\t *\n\t * @protected\n\t */\n\t_insertChild( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\n\t\t\t *\n\t\t\t * @error view-emptyelement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-emptyelement-cannot-add: Cannot add child nodes to EmptyElement instance.',\n\t\t\t\t[ this, nodes ]\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Returns `null` because block filler is not needed for EmptyElements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/uielement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * UI element class. It should be used to represent editing UI which needs to be injected into the editing view\n * If possible, you should keep your UI outside the editing view. However, if that is not possible,\n * UI elements can be used.\n *\n * How a UI element is rendered is in your control (you pass a callback to\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}).\n * The editor will ignore your UI element – the selection cannot be placed in it, it is skipped (invisible) when\n * the user modifies the selection by using arrow keys and the editor does not listen to any mutations which\n * happen inside your UI elements.\n *\n * The limitation is that you cannot convert a model element to a UI element. UI elements need to be\n * created for {@link module:engine/model/markercollection~Marker markers} or as additinal elements\n * inside normal {@link module:engine/view/containerelement~ContainerElement container elements}.\n *\n * To create a new UI element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class UIElement extends Element {\n\t/**\n\t * Creates new instance of UIElement.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` when third parameter is passed,\n\t * to inform that usage of UIElement is incorrect (adding child nodes to UIElement is forbidden).\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createUIElement\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attributes] Collection of attributes.\n\t */\n\tconstructor( name, attributes, children ) {\n\t\tsuper( name, attributes, children );\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for UIElements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tuiElement.is( 'uiElement' ); // -> true\n\t *\t\tuiElement.is( 'element' ); // -> true\n\t *\t\tuiElement.is( 'node' ); // -> true\n\t *\t\tuiElement.is( 'view:uiElement' ); // -> true\n\t *\t\tuiElement.is( 'view:element' ); // -> true\n\t *\t\tuiElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\tuiElement.is( 'model:element' ); // -> false\n\t *\t\tuiElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an ui element, you can also check its\n\t * {@link module:engine/view/uielement~UIElement#name name}:\n\t *\n\t *\t\tuiElement.is( 'span' ); // -> true if this is a span ui element\n\t *\t\tuiElement.is( 'uiElement', 'span' ); // -> same as above\n\t *\t\ttext.is( 'span' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'uiElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'uiElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` to prevent adding any child nodes\n\t * to UIElement.\n\t *\n\t * @protected\n\t */\n\t_insertChild( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to {@link module:engine/view/uielement~UIElement}.\n\t\t\t *\n\t\t\t * @error view-uielement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-uielement-cannot-add: Cannot add child nodes to UIElement instance.', this );\n\t\t}\n\t}\n\n\t/**\n\t * Renders this {@link module:engine/view/uielement~UIElement} to DOM. This method is called by\n\t * {@link module:engine/view/domconverter~DomConverter}.\n\t * Do not use inheritance to create custom rendering method, replace `render()` method instead:\n\t *\n\t *\t\tconst myUIElement = downcastWriter.createUIElement( 'span' );\n\t *\t\tmyUIElement.render = function( domDocument ) {\n\t *\t\t\tconst domElement = this.toDomElement( domDocument );\n\t *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n\t *\n\t *\t\t\treturn domElement;\n\t *\t\t};\n\t *\n\t * @param {Document} domDocument\n\t * @returns {HTMLElement}\n\t */\n\trender( domDocument ) {\n\t\treturn this.toDomElement( domDocument );\n\t}\n\n\t/**\n\t * Creates DOM element based on this view UIElement.\n\t * Note that each time this method is called new DOM element is created.\n\t *\n\t * @param {Document} domDocument\n\t * @returns {HTMLElement}\n\t */\n\ttoDomElement( domDocument ) {\n\t\tconst domElement = domDocument.createElement( this.name );\n\n\t\tfor ( const key of this.getAttributeKeys() ) {\n\t\t\tdomElement.setAttribute( key, this.getAttribute( key ) );\n\t\t}\n\n\t\treturn domElement;\n\t}\n}\n\n/**\n * This function injects UI element handling to the given {@link module:engine/view/document~Document document}.\n *\n * A callback is added to {@link module:engine/view/document~Document#event:keydown document keydown event}.\n * The callback handles the situation when right arrow key is pressed and selection is collapsed before a UI element.\n * Without this handler, it would be impossible to \"jump over\" UI element using right arrow key.\n *\n * @param {module:engine/view/view~View} view View controller to which the quirks handling will be injected.\n */\nexport function injectUiElementHandling( view ) {\n\tview.document.on( 'keydown', ( evt, data ) => jumpOverUiElement( evt, data, view.domConverter ) );\n}\n\n// Returns `null` because block filler is not needed for UIElements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n\n// Selection cannot be placed in a `UIElement`. Whenever it is placed there, it is moved before it. This\n// causes a situation when it is impossible to jump over `UIElement` using right arrow key, because the selection\n// ends up in ui element (in DOM) and is moved back to the left. This handler fixes this situation.\nfunction jumpOverUiElement( evt, data, domConverter ) {\n\tif ( data.keyCode == keyCodes.arrowright ) {\n\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\t\tconst domSelectionCollapsed = domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed;\n\n\t\t// Jump over UI element if selection is collapsed or shift key is pressed. These are the cases when selection would extend.\n\t\tif ( domSelectionCollapsed || data.shiftKey ) {\n\t\t\tconst domParent = domSelection.focusNode;\n\t\t\tconst domOffset = domSelection.focusOffset;\n\n\t\t\tconst viewPosition = domConverter.domPositionToView( domParent, domOffset );\n\n\t\t\t// In case if dom element is not converted to view or is not mapped or something. Happens for example in some tests.\n\t\t\tif ( viewPosition === null ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip all following ui elements.\n\t\t\tlet jumpedOverAnyUiElement = false;\n\n\t\t\tconst nextViewPosition = viewPosition.getLastMatchingPosition( value => {\n\t\t\t\tif ( value.item.is( 'uiElement' ) ) {\n\t\t\t\t\t// Remember that there was at least one ui element.\n\t\t\t\t\tjumpedOverAnyUiElement = true;\n\t\t\t\t}\n\n\t\t\t\t// Jump over ui elements, jump over empty attribute elements, move up from inside of attribute element.\n\t\t\t\tif ( value.item.is( 'uiElement' ) || value.item.is( 'attributeElement' ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Don't jump over text or don't get out of container element.\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\t// If anything has been skipped, fix position.\n\t\t\t// This `if` could be possibly omitted but maybe it is better not to mess with DOM selection if not needed.\n\t\t\tif ( jumpedOverAnyUiElement ) {\n\t\t\t\tconst newDomPosition = domConverter.viewPositionToDom( nextViewPosition );\n\n\t\t\t\tif ( domSelectionCollapsed ) {\n\t\t\t\t\t// Selection was collapsed, so collapse it at further position.\n\t\t\t\t\tdomSelection.collapse( newDomPosition.parent, newDomPosition.offset );\n\t\t\t\t} else {\n\t\t\t\t\t// Selection was not collapse, so extend it instead of collapsing.\n\t\t\t\t\tdomSelection.extend( newDomPosition.parent, newDomPosition.offset );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/view/downcastwriter\n */\n\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport ContainerElement from './containerelement';\nimport AttributeElement from './attributeelement';\nimport EmptyElement from './emptyelement';\nimport UIElement from './uielement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport DocumentFragment from './documentfragment';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Text from './text';\nimport EditableElement from './editableelement';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * View downcast writer.\n *\n * It provides a set of methods used to manipulate view nodes.\n *\n * Do not create an instance of this writer manually. To modify a view structure, use\n * the {@link module:engine/view/view~View#change `View#change()`} block.\n *\n * The `DowncastWriter` is designed to work with semantic views which are the views that were/are being downcasted from the model.\n * To work with ordinary views (e.g. parsed from a pasted content) use the\n * {@link module:engine/view/upcastwriter~UpcastWriter upcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n */\nexport default class DowncastWriter {\n\tconstructor( document ) {\n\t\t/**\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = document;\n\n\t\t/**\n\t\t * Holds references to the attribute groups that share the same {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t\t * The keys are `id`s, the values are `Set`s holding {@link module:engine/view/attributeelement~AttributeElement}s.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<String,Set>}\n\t\t */\n\t\tthis._cloneGroups = new Map();\n\t}\n\n\t/**\n\t * Sets {@link module:engine/view/documentselection~DocumentSelection selection's} ranges and direction to the\n\t * specified location based on the given {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t * Usage:\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets backward selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t * \t\twriter.setSelection( paragraph, 'in' );\n\t *\n\t * Creates a range on the {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'on' );\n\t *\n\t * \t\t// Removes all ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * `DowncastWriter#setSelection()` allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\twriter.setSelection( range, { backward: true } );\n\t *\n\t *\t\t// Sets selection as fake.\n\t *\t\t// Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * \t\t// This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * \t\t// represented in other way, for example by applying proper CSS class.\n\t *\t\twriter.setSelection( range, { fake: true } );\n\t *\n\t * \t\t// Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * \t\t// (and be  properly handled by screen readers).\n\t *\t\twriter.setSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tsetSelection( selectable, placeOrOffset, options ) {\n\t\tthis.document.selection._setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/view/documentselection~DocumentSelection#focus selection's focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\n\t * @param {String} data The text's data.\n\t * @returns {module:engine/view/text~Text} The created text node.\n\t */\n\tcreateText( data ) {\n\t\treturn new Text( data );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/attributeelement~AttributeElement}.\n\t *\n\t *\t\twriter.createAttributeElement( 'strong' );\n\t *\t\twriter.createAttributeElement( 'strong', { alignment: 'center' } );\n\t *\n\t *\t\t// Make `<a>` element contain other attributes element so the `<a>` element is not broken.\n\t *\t\twriter.createAttributeElement( 'a', { href: 'foo.bar' }, { priority: 5 } );\n\t *\n\t *\t\t// Set `id` of a marker element so it is not joined or merged with \"normal\" elements.\n\t *\t\twriter.createAttributeElement( 'span', { class: 'myMarker' }, { id: 'marker:my' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Element's attributes.\n\t * @param {Object} [options] Element's options.\n\t * @param {Number} [options.priority] Element's {@link module:engine/view/attributeelement~AttributeElement#priority priority}.\n\t * @param {Number|String} [options.id] Element's {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Created element.\n\t */\n\tcreateAttributeElement( name, attributes, options = {} ) {\n\t\tconst attributeElement = new AttributeElement( name, attributes );\n\n\t\tif ( options.priority ) {\n\t\t\tattributeElement._priority = options.priority;\n\t\t}\n\n\t\tif ( options.id ) {\n\t\t\tattributeElement._id = options.id;\n\t\t}\n\n\t\treturn attributeElement;\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/containerelement~ContainerElement}.\n\t *\n\t *\t\twriter.createContainerElement( 'paragraph' );\n\t *\t\twriter.createContainerElement( 'paragraph', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/containerelement~ContainerElement} Created element.\n\t */\n\tcreateContainerElement( name, attributes ) {\n\t\treturn new ContainerElement( name, attributes );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t *\t\twriter.createEditableElement( 'div' );\n\t *\t\twriter.createEditableElement( 'div', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/editableelement~EditableElement} Created element.\n\t */\n\tcreateEditableElement( name, attributes ) {\n\t\tconst editableElement = new EditableElement( name, attributes );\n\t\teditableElement._document = this.document;\n\n\t\treturn editableElement;\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/emptyelement~EmptyElement}.\n\t *\n\t *\t\twriter.createEmptyElement( 'img' );\n\t *\t\twriter.createEmptyElement( 'img', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/emptyelement~EmptyElement} Created element.\n\t */\n\tcreateEmptyElement( name, attributes ) {\n\t\treturn new EmptyElement( name, attributes );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/uielement~UIElement}.\n\t *\n\t *\t\twriter.createUIElement( 'span' );\n\t *\t\twriter.createUIElement( 'span', { alignment: 'center' } );\n\t *\n\t * Custom render function can be provided as third parameter:\n\t *\n\t *\t\twriter.createUIElement( 'span', null, function( domDocument ) {\n\t *\t\t\tconst domElement = this.toDomElement( domDocument );\n\t *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n\t *\n\t *\t\t\treturn domElement;\n\t *\t\t} );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {Function} [renderFunction] Custom render function.\n\t * @returns {module:engine/view/uielement~UIElement} Created element.\n\t */\n\tcreateUIElement( name, attributes, renderFunction ) {\n\t\tconst uiElement = new UIElement( name, attributes );\n\n\t\tif ( renderFunction ) {\n\t\t\tuiElement.render = renderFunction;\n\t\t}\n\n\t\treturn uiElement;\n\t}\n\n\t/**\n\t * Adds or overwrite element's attribute with a specified key and value.\n\t *\n\t *\t\twriter.setAttribute( 'href', 'http://ckeditor.com', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetAttribute( key, value, element ) {\n\t\telement._setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t *\t\twriter.removeAttribute( 'href', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveAttribute( key, element ) {\n\t\telement._removeAttribute( key );\n\t}\n\n\t/**\n\t * Adds specified class to the element.\n\t *\n\t *\t\twriter.addClass( 'foo', linkElement );\n\t *\t\twriter.addClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\taddClass( className, element ) {\n\t\telement._addClass( className );\n\t}\n\n\t/**\n\t * Removes specified class from the element.\n\t *\n\t *\t\twriter.removeClass( 'foo', linkElement );\n\t *\t\twriter.removeClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveClass( className, element ) {\n\t\telement._removeClass( className );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\twriter.setStyle( 'color', 'red', element );\n\t *\t\twriter.setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t}, element );\n\t *\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @param {module:engine/view/element~Element} element Element to set styles on.\n\t */\n\tsetStyle( property, value, element ) {\n\t\tif ( isPlainObject( property ) && element === undefined ) {\n\t\t\telement = value;\n\t\t}\n\n\t\telement._setStyle( property, value );\n\t}\n\n\t/**\n\t * Removes specified style from the element.\n\t *\n\t *\t\twriter.removeStyle( 'color', element );  // Removes 'color' style.\n\t *\t\twriter.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @param {Array.<String>|String} property\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveStyle( property, element ) {\n\t\telement._removeStyle( property );\n\t}\n\n\t/**\n\t * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetCustomProperty( key, value, element ) {\n\t\telement._setCustomProperty( key, value );\n\t}\n\n\t/**\n\t * Removes a custom property stored under the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\tremoveCustomProperty( key, element ) {\n\t\treturn element._removeCustomProperty( key );\n\t}\n\n\t/**\n\t * Breaks attribute nodes at provided position or at boundaries of provided range. It breaks attribute elements inside\n\t * up to a container element.\n\t *\n\t * In following examples `<p>` is a container, `<b>` and `<u>` are attribute nodes:\n\t *\n\t *        <p>foo<b><u>bar{}</u></b></p> -> <p>foo<b><u>bar</u></b>[]</p>\n\t *        <p>foo<b><u>{}bar</u></b></p> -> <p>foo{}<b><u>bar</u></b></p>\n\t *        <p>foo<b><u>b{}ar</u></b></p> -> <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t *        <p><b>fo{o</b><u>ba}r</u></p> -> <p><b>fo</b><b>o</b><u>ba</u><u>r</u></b></p>\n\t *\n\t * **Note:** {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer} is that `breakAttributes` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container`\n\t * when {@link module:engine/view/range~Range#start start}\n\t * and {@link module:engine/view/range~Range#end end} positions of a passed range are not placed inside same parent container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element`\n\t * when trying to break attributes\n\t * inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element`\n\t * when trying to break attributes\n\t * inside {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#breakContainer\n\t * @param {module:engine/view/position~Position|module:engine/view/range~Range} positionOrRange Position where\n\t * to break attribute elements.\n\t * @returns {module:engine/view/position~Position|module:engine/view/range~Range} New position or range, after breaking the attribute\n\t * elements.\n\t */\n\tbreakAttributes( positionOrRange ) {\n\t\tif ( positionOrRange instanceof Position ) {\n\t\t\treturn this._breakAttributes( positionOrRange );\n\t\t} else {\n\t\t\treturn this._breakAttributesRange( positionOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Breaks {@link module:engine/view/containerelement~ContainerElement container view element} into two, at the given position. Position\n\t * has to be directly inside container element and cannot be in root. Does not break if position is at the beginning\n\t * or at the end of it's parent element.\n\t *\n\t *        <p>foo^bar</p> -> <p>foo</p><p>bar</p>\n\t *        <div><p>foo</p>^<p>bar</p></div> -> <div><p>foo</p></div><div><p>bar</p></div>\n\t *        <p>^foobar</p> -> ^<p>foobar</p>\n\t *        <p>foobar^</p> -> <p>foobar</p>^\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer} is that `breakAttributes` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#breakAttributes\n\t * @param {module:engine/view/position~Position} position Position where to break element.\n\t * @returns {module:engine/view/position~Position} Position between broken elements. If element has not been broken,\n\t * the returned position is placed either before it or after it.\n\t */\n\tbreakContainer( position ) {\n\t\tconst element = position.parent;\n\n\t\tif ( !( element.is( 'containerElement' ) ) ) {\n\t\t\t/**\n\t\t\t * Trying to break an element which is not a container element.\n\t\t\t *\n\t\t\t * @error view-writer-break-non-container-element\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-writer-break-non-container-element: Trying to break an element which is not a container element.',\n\t\t\t\tthis.document\n\t\t\t);\n\t\t}\n\n\t\tif ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Trying to break root element.\n\t\t\t *\n\t\t\t * @error view-writer-break-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-break-root: Trying to break root element.', this.document );\n\t\t}\n\n\t\tif ( position.isAtStart ) {\n\t\t\treturn Position._createBefore( element );\n\t\t} else if ( !position.isAtEnd ) {\n\t\t\tconst newElement = element._clone( false );\n\n\t\t\tthis.insert( Position._createAfter( element ), newElement );\n\n\t\t\tconst sourceRange = new Range( position, Position._createAt( element, 'end' ) );\n\t\t\tconst targetPosition = new Position( newElement, 0 );\n\n\t\t\tthis.move( sourceRange, targetPosition );\n\t\t}\n\n\t\treturn Position._createAfter( element );\n\t}\n\n\t/**\n\t * Merges {@link module:engine/view/attributeelement~AttributeElement attribute elements}. It also merges text nodes if needed.\n\t * Only {@link module:engine/view/attributeelement~AttributeElement#isSimilar similar} attribute elements can be merged.\n\t *\n\t * In following examples `<p>` is a container and `<b>` is an attribute element:\n\t *\n\t *        <p>foo[]bar</p> -> <p>foo{}bar</p>\n\t *        <p><b>foo</b>[]<b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *        <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p> -> <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p>\n\t *\n\t * It will also take care about empty attributes when merging:\n\t *\n\t *        <p><b>[]</b></p> -> <p>[]</p>\n\t *        <p><b>foo</b><i>[]</i><b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#mergeContainers\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeAttributes( position ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// When inside text node - nothing to merge.\n\t\tif ( positionParent.is( 'text' ) ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When inside empty attribute - remove it.\n\t\tif ( positionParent.is( 'attributeElement' ) && positionParent.childCount === 0 ) {\n\t\t\tconst parent = positionParent.parent;\n\t\t\tconst offset = positionParent.index;\n\n\t\t\tpositionParent._remove();\n\t\t\tthis._removeFromClonedElementsGroup( positionParent );\n\n\t\t\treturn this.mergeAttributes( new Position( parent, offset ) );\n\t\t}\n\n\t\tconst nodeBefore = positionParent.getChild( positionOffset - 1 );\n\t\tconst nodeAfter = positionParent.getChild( positionOffset );\n\n\t\t// Position should be placed between two nodes.\n\t\tif ( !nodeBefore || !nodeAfter ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When position is between two text nodes.\n\t\tif ( nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\t\t// When position is between two same attribute elements.\n\t\telse if ( nodeBefore.is( 'attributeElement' ) && nodeAfter.is( 'attributeElement' ) && nodeBefore.isSimilar( nodeAfter ) ) {\n\t\t\t// Move all children nodes from node placed after selection and remove that node.\n\t\t\tconst count = nodeBefore.childCount;\n\t\t\tnodeBefore._appendChild( nodeAfter.getChildren() );\n\n\t\t\tnodeAfter._remove();\n\t\t\tthis._removeFromClonedElementsGroup( nodeAfter );\n\n\t\t\t// New position is located inside the first node, before new nodes.\n\t\t\t// Call this method recursively to merge again if needed.\n\t\t\treturn this.mergeAttributes( new Position( nodeBefore, count ) );\n\t\t}\n\n\t\treturn position;\n\t}\n\n\t/**\n\t * Merges two {@link module:engine/view/containerelement~ContainerElement container elements} that are before and after given position.\n\t * Precisely, the element after the position is removed and it's contents are moved to element before the position.\n\t *\n\t *        <p>foo</p>^<p>bar</p> -> <p>foo^bar</p>\n\t *        <div>foo</div>^<p>bar</p> -> <div>foo^bar</div>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#mergeAttributes\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeContainers( position ) {\n\t\tconst prev = position.nodeBefore;\n\t\tconst next = position.nodeAfter;\n\n\t\tif ( !prev || !next || !prev.is( 'containerElement' ) || !next.is( 'containerElement' ) ) {\n\t\t\t/**\n\t\t\t * Element before and after given position cannot be merged.\n\t\t\t *\n\t\t\t * @error view-writer-merge-containers-invalid-position\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-merge-containers-invalid-position: ' +\n\t\t\t\t'Element before and after given position cannot be merged.', this.document );\n\t\t}\n\n\t\tconst lastChild = prev.getChild( prev.childCount - 1 );\n\t\tconst newPosition = lastChild instanceof Text ? Position._createAt( lastChild, 'end' ) : Position._createAt( prev, 'end' );\n\n\t\tthis.move( Range._createIn( next ), Position._createAt( prev, 'end' ) );\n\t\tthis.remove( Range._createOn( next ) );\n\n\t\treturn newPosition;\n\t}\n\n\t/**\n\t * Insert node or nodes at specified position. Takes care about breaking attributes before insertion\n\t * and merging them afterwards.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n\t * contains instances that are not {@link module:engine/view/text~Text Texts},\n\t * {@link module:engine/view/attributeelement~AttributeElement AttributeElements},\n\t * {@link module:engine/view/containerelement~ContainerElement ContainerElements},\n\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElements} or\n\t * {@link module:engine/view/uielement~UIElement UIElements}.\n\t *\n\t * @param {module:engine/view/position~Position} position Insertion position.\n\t * @param {module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement|\n\t * module:engine/view/containerelement~ContainerElement|module:engine/view/emptyelement~EmptyElement|\n\t * module:engine/view/uielement~UIElement|Iterable.<module:engine/view/text~Text|\n\t * module:engine/view/attributeelement~AttributeElement|module:engine/view/containerelement~ContainerElement|\n\t * module:engine/view/emptyelement~EmptyElement|module:engine/view/uielement~UIElement>} nodes Node or nodes to insert.\n\t * @returns {module:engine/view/range~Range} Range around inserted nodes.\n\t */\n\tinsert( position, nodes ) {\n\t\tnodes = isIterable( nodes ) ? [ ...nodes ] : [ nodes ];\n\n\t\t// Check if nodes to insert are instances of AttributeElements, ContainerElements, EmptyElements, UIElements or Text.\n\t\tvalidateNodesToInsert( nodes, this.document );\n\n\t\tconst container = getParentContainer( position );\n\n\t\tif ( !container ) {\n\t\t\t/**\n\t\t\t * Position's parent container cannot be found.\n\t\t\t *\n\t\t\t * @error view-writer-invalid-position-container\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-invalid-position-container', this.document );\n\t\t}\n\n\t\tconst insertionPosition = this._breakAttributes( position, true );\n\t\tconst length = container._insertChild( insertionPosition.offset, nodes );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tthis._addToClonedElementsGroup( node );\n\t\t}\n\n\t\tconst endPosition = insertionPosition.getShiftedBy( length );\n\t\tconst start = this.mergeAttributes( insertionPosition );\n\n\t\t// When no nodes were inserted - return collapsed range.\n\t\tif ( length === 0 ) {\n\t\t\treturn new Range( start, start );\n\t\t} else {\n\t\t\t// If start position was merged - move end position.\n\t\t\tif ( !start.isEqual( insertionPosition ) ) {\n\t\t\t\tendPosition.offset--;\n\t\t\t}\n\n\t\t\tconst end = this.mergeAttributes( endPosition );\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\t}\n\n\t/**\n\t * Removes provided range from the container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range|module:engine/view/item~Item} rangeOrItem Range to remove from container\n\t * or an {@link module:engine/view/item~Item item} to remove. If range is provided, after removing, it will be updated\n\t * to a collapsed range showing the new position.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} Document fragment containing removed nodes.\n\t */\n\tremove( rangeOrItem ) {\n\t\tconst range = rangeOrItem instanceof Range ? rangeOrItem : Range._createOn( rangeOrItem );\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// If range is collapsed - nothing to remove.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn new DocumentFragment();\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\tconst count = breakEnd.offset - breakStart.offset;\n\n\t\t// Remove nodes in range.\n\t\tconst removed = parentContainer._removeChildren( breakStart.offset, count );\n\n\t\tfor ( const node of removed ) {\n\t\t\tthis._removeFromClonedElementsGroup( node );\n\t\t}\n\n\t\t// Merge after removing.\n\t\tconst mergePosition = this.mergeAttributes( breakStart );\n\t\trange.start = mergePosition;\n\t\trange.end = mergePosition.clone();\n\n\t\t// Return removed nodes.\n\t\treturn new DocumentFragment( removed );\n\t}\n\n\t/**\n\t * Removes matching elements from given range.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range Range to clear.\n\t * @param {module:engine/view/element~Element} element Element to remove.\n\t */\n\tclear( range, element ) {\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// Create walker on given range.\n\t\t// We walk backward because when we remove element during walk it modifies range end position.\n\t\tconst walker = range.getWalker( {\n\t\t\tdirection: 'backward',\n\t\t\tignoreElementEnd: true\n\t\t} );\n\n\t\t// Let's walk.\n\t\tfor ( const current of walker ) {\n\t\t\tconst item = current.item;\n\t\t\tlet rangeToRemove;\n\n\t\t\t// When current item matches to the given element.\n\t\t\tif ( item.is( 'element' ) && element.isSimilar( item ) ) {\n\t\t\t\t// Create range on this element.\n\t\t\t\trangeToRemove = Range._createOn( item );\n\t\t\t\t// When range starts inside Text or TextProxy element.\n\t\t\t} else if ( !current.nextPosition.isAfter( range.start ) && item.is( 'textProxy' ) ) {\n\t\t\t\t// We need to check if parent of this text matches to given element.\n\t\t\t\tconst parentElement = item.getAncestors().find( ancestor => {\n\t\t\t\t\treturn ancestor.is( 'element' ) && element.isSimilar( ancestor );\n\t\t\t\t} );\n\n\t\t\t\t// If it is then create range inside this element.\n\t\t\t\tif ( parentElement ) {\n\t\t\t\t\trangeToRemove = Range._createIn( parentElement );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we have found element to remove.\n\t\t\tif ( rangeToRemove ) {\n\t\t\t\t// We need to check if element range stick out of the given range and truncate if it is.\n\t\t\t\tif ( rangeToRemove.end.isAfter( range.end ) ) {\n\t\t\t\t\trangeToRemove.end = range.end;\n\t\t\t\t}\n\n\t\t\t\tif ( rangeToRemove.start.isBefore( range.start ) ) {\n\t\t\t\t\trangeToRemove.start = range.start;\n\t\t\t\t}\n\n\t\t\t\t// At the end we remove range with found element.\n\t\t\t\tthis.remove( rangeToRemove );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves nodes from provided range to target position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} sourceRange Range containing nodes to move.\n\t * @param {module:engine/view/position~Position} targetPosition Position to insert.\n\t * @returns {module:engine/view/range~Range} Range in target container. Inserted nodes are placed between\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions.\n\t */\n\tmove( sourceRange, targetPosition ) {\n\t\tlet nodes;\n\n\t\tif ( targetPosition.isAfter( sourceRange.end ) ) {\n\t\t\ttargetPosition = this._breakAttributes( targetPosition, true );\n\n\t\t\tconst parent = targetPosition.parent;\n\t\t\tconst countBefore = parent.childCount;\n\n\t\t\tsourceRange = this._breakAttributesRange( sourceRange, true );\n\n\t\t\tnodes = this.remove( sourceRange );\n\n\t\t\ttargetPosition.offset += ( parent.childCount - countBefore );\n\t\t} else {\n\t\t\tnodes = this.remove( sourceRange );\n\t\t}\n\n\t\treturn this.insert( targetPosition, nodes );\n\t}\n\n\t/**\n     * Wraps elements within range with provided {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     * If a collapsed range is provided, it will be wrapped only if it is equal to view selection.\n     *\n     * If a collapsed range was passed and is same as selection, the selection\n     * will be moved to the inside of the wrapped attribute element.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-invalid-range-container`\n     * when {@link module:engine/view/range~Range#start}\n     * and {@link module:engine/view/range~Range#end} positions are not placed inside same parent container.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n     * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-nonselection-collapsed-range` when passed range\n     * is collapsed and different than view selection.\n     *\n     * @param {module:engine/view/range~Range} range Range to wrap.\n     * @param {module:engine/view/attributeelement~AttributeElement} attribute Attribute element to use as wrapper.\n     * @returns {module:engine/view/range~Range} range Range after wrapping, spanning over wrapping attribute element.\n    */\n\twrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\tthrow new CKEditorError( 'view-writer-wrap-invalid-attribute', this.document );\n\t\t}\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\tif ( !range.isCollapsed ) {\n\t\t\t// Non-collapsed range. Wrap it with the attribute element.\n\t\t\treturn this._wrapRange( range, attribute );\n\t\t} else {\n\t\t\t// Collapsed range. Wrap position.\n\t\t\tlet position = range.start;\n\n\t\t\tif ( position.parent.is( 'element' ) && !_hasNonUiChildren( position.parent ) ) {\n\t\t\t\tposition = position.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n\t\t\t}\n\n\t\t\tposition = this._wrapPosition( position, attribute );\n\t\t\tconst viewSelection = this.document.selection;\n\n\t\t\t// If wrapping position is equal to view selection, move view selection inside wrapping attribute element.\n\t\t\tif ( viewSelection.isCollapsed && viewSelection.getFirstPosition().isEqual( range.start ) ) {\n\t\t\t\tthis.setSelection( position );\n\t\t\t}\n\n\t\t\treturn new Range( position );\n\t\t}\n\t}\n\n\t/**\n\t * Unwraps nodes within provided range from attribute element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t */\n\tunwrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\t/**\n\t\t\t * Attribute element need to be instance of attribute element.\n\t\t\t *\n\t\t\t * @error view-writer-unwrap-invalid-attribute\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-unwrap-invalid-attribute', this.document );\n\t\t}\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// If range is collapsed - nothing to unwrap.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn range;\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Unwrap children located between break points.\n\t\tconst newRange = this._unwrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Renames element by creating a copy of renamed element but with changed name and then moving contents of the\n\t * old element to the new one. Keep in mind that this will invalidate all {@link module:engine/view/position~Position positions} which\n\t * has renamed element as {@link module:engine/view/position~Position#parent a parent}.\n\t *\n\t * New element has to be created because `Element#tagName` property in DOM is readonly.\n\t *\n\t * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n\t *\n\t * @param {String} newName New name for element.\n\t * @param {module:engine/view/containerelement~ContainerElement} viewElement Element to be renamed.\n\t */\n\trename( newName, viewElement ) {\n\t\tconst newElement = new ContainerElement( newName, viewElement.getAttributes() );\n\n\t\tthis.insert( Position._createAfter( viewElement ), newElement );\n\t\tthis.move( Range._createIn( viewElement ), Position._createAt( newElement, 0 ) );\n\t\tthis.remove( Range._createOn( viewElement ) );\n\n\t\treturn newElement;\n\t}\n\n\t/**\n\t * Cleans up memory by removing obsolete cloned elements group from the writer.\n\t *\n\t * Should be used whenever all {@link module:engine/view/attributeelement~AttributeElement attribute elements}\n\t * with the same {@link module:engine/view/attributeelement~AttributeElement#id id} are going to be removed from the view and\n\t * the group will no longer be needed.\n\t *\n\t * Cloned elements group are not removed automatically in case if the group is still needed after all its elements\n\t * were removed from the view.\n\t *\n\t * Keep in mind that group names are equal to the `id` property of the attribute element.\n\t *\n\t * @param {String} groupName Name of the group to clear.\n\t */\n\tclearClonedElementsGroup( groupName ) {\n\t\tthis._cloneGroups.delete( groupName );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Wraps children with provided `wrapElement`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be wrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} wrapElement\n\t */\n\t_wrapChildren( parent, startOffset, endOffset, wrapElement ) {\n\t\tlet i = startOffset;\n\t\tconst wrapPositions = [];\n\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\t\t\tconst isText = child.is( 'text' );\n\t\t\tconst isAttribute = child.is( 'attributeElement' );\n\t\t\tconst isEmpty = child.is( 'emptyElement' );\n\t\t\tconst isUI = child.is( 'uiElement' );\n\n\t\t\t//\n\t\t\t// (In all examples, assume that `wrapElement` is `<span class=\"foo\">` element.)\n\t\t\t//\n\t\t\t// Check if `wrapElement` can be joined with the wrapped element. One of requirements is having same name.\n\t\t\t// If possible, join elements.\n\t\t\t//\n\t\t\t// <p><span class=\"bar\">abc</span></p>  -->  <p><span class=\"foo bar\">abc</span></p>\n\t\t\t//\n\t\t\tif ( isAttribute && this._wrapAttributeElement( wrapElement, child ) ) {\n\t\t\t\twrapPositions.push( new Position( parent, i ) );\n\t\t\t}\n\t\t\t//\n\t\t\t// Wrap the child if it is not an attribute element or if it is an attribute element that should be inside\n\t\t\t// `wrapElement` (due to priority).\n\t\t\t//\n\t\t\t// <p>abc</p>                   -->  <p><span class=\"foo\">abc</span></p>\n\t\t\t// <p><strong>abc</strong></p>  -->  <p><span class=\"foo\"><strong>abc</strong></span></p>\n\t\t\t//\n\t\t\telse if ( isText || isEmpty || isUI || ( isAttribute && shouldABeOutsideB( wrapElement, child ) ) ) {\n\t\t\t\t// Clone attribute.\n\t\t\t\tconst newAttribute = wrapElement._clone();\n\n\t\t\t\t// Wrap current node with new attribute.\n\t\t\t\tchild._remove();\n\t\t\t\tnewAttribute._appendChild( child );\n\n\t\t\t\tparent._insertChild( i, newAttribute );\n\t\t\t\tthis._addToClonedElementsGroup( newAttribute );\n\n\t\t\t\twrapPositions.push( new Position( parent, i ) );\n\t\t\t}\n\t\t\t//\n\t\t\t// If other nested attribute is found and it wasn't wrapped (see above), continue wrapping inside it.\n\t\t\t//\n\t\t\t// <p><a href=\"foo.html\">abc</a></p>  -->  <p><a href=\"foo.html\"><span class=\"foo\">abc</span></a></p>\n\t\t\t//\n\t\t\telse if ( isAttribute ) {\n\t\t\t\tthis._wrapChildren( child, 0, child.childCount, wrapElement );\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge at each wrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of wrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range._createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Unwraps children from provided `unwrapElement`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} unwrapElement\n\t */\n\t_unwrapChildren( parent, startOffset, endOffset, unwrapElement ) {\n\t\tlet i = startOffset;\n\t\tconst unwrapPositions = [];\n\n\t\t// Iterate over each element between provided offsets inside parent.\n\t\t// We don't use tree walker or range iterator because we will be removing and merging potentially multiple nodes,\n\t\t// so it could get messy. It is safer to it manually in this case.\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\n\t\t\t// Skip all text nodes. There should be no container element's here either.\n\t\t\tif ( !child.is( 'attributeElement' ) ) {\n\t\t\t\ti++;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// (In all examples, assume that `unwrapElement` is `<span class=\"foo\">` element.)\n\t\t\t//\n\t\t\t// If the child is similar to the given attribute element, unwrap it - it will be completely removed.\n\t\t\t//\n\t\t\t// <p><span class=\"foo\">abc</span>xyz</p>  -->  <p>abcxyz</p>\n\t\t\t//\n\t\t\tif ( child.isSimilar( unwrapElement ) ) {\n\t\t\t\tconst unwrapped = child.getChildren();\n\t\t\t\tconst count = child.childCount;\n\n\t\t\t\t// Replace wrapper element with its children\n\t\t\t\tchild._remove();\n\t\t\t\tparent._insertChild( i, unwrapped );\n\n\t\t\t\tthis._removeFromClonedElementsGroup( child );\n\n\t\t\t\t// Save start and end position of moved items.\n\t\t\t\tunwrapPositions.push(\n\t\t\t\t\tnew Position( parent, i ),\n\t\t\t\t\tnew Position( parent, i + count )\n\t\t\t\t);\n\n\t\t\t\t// Skip elements that were unwrapped. Assuming there won't be another element to unwrap in child elements.\n\t\t\t\ti += count;\n\t\t\t\tendOffset += count - 1;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// If the child is not similar but is an attribute element, try partial unwrapping - remove the same attributes/styles/classes.\n\t\t\t// Partial unwrapping will happen only if the elements have the same name.\n\t\t\t//\n\t\t\t// <p><span class=\"foo bar\">abc</span>xyz</p>  -->  <p><span class=\"bar\">abc</span>xyz</p>\n\t\t\t// <p><i class=\"foo\">abc</i>xyz</p>            -->  <p><i class=\"foo\">abc</i>xyz</p>\n\t\t\t//\n\t\t\tif ( this._unwrapAttributeElement( unwrapElement, child ) ) {\n\t\t\t\tunwrapPositions.push(\n\t\t\t\t\tnew Position( parent, i ),\n\t\t\t\t\tnew Position( parent, i + 1 )\n\t\t\t\t);\n\n\t\t\t\ti++;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// If other nested attribute is found, look through it's children for elements to unwrap.\n\t\t\t//\n\t\t\t// <p><i><span class=\"foo\">abc</span></i><p>  -->  <p><i>abc</i><p>\n\t\t\t//\n\t\t\tthis._unwrapChildren( child, 0, child.childCount, unwrapElement );\n\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge at each unwrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of unwrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset || position.offset == endOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range._createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Helper function for `view.writer.wrap`. Wraps range with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/range~Range} New range after wrapping, spanning over wrapping attribute element.\n\t */\n\t_wrapRange( range, attribute ) {\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Wrap all children with attribute.\n\t\tconst newRange = this._wrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Helper function for {@link #wrap}. Wraps position with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/position~Position} New position after wrapping.\n\t */\n\t_wrapPosition( position, attribute ) {\n\t\t// Return same position when trying to wrap with attribute similar to position parent.\n\t\tif ( attribute.isSimilar( position.parent ) ) {\n\t\t\treturn movePositionToTextNode( position.clone() );\n\t\t}\n\n\t\t// When position is inside text node - break it and place new position between two text nodes.\n\t\tif ( position.parent.is( 'text' ) ) {\n\t\t\tposition = breakTextNode( position );\n\t\t}\n\n\t\t// Create fake element that will represent position, and will not be merged with other attributes.\n\t\tconst fakePosition = this.createAttributeElement();\n\t\tfakePosition._priority = Number.POSITIVE_INFINITY;\n\t\tfakePosition.isSimilar = () => false;\n\n\t\t// Insert fake element in position location.\n\t\tposition.parent._insertChild( position.offset, fakePosition );\n\n\t\t// Range around inserted fake attribute element.\n\t\tconst wrapRange = new Range( position, position.getShiftedBy( 1 ) );\n\n\t\t// Wrap fake element with attribute (it will also merge if possible).\n\t\tthis.wrap( wrapRange, attribute );\n\n\t\t// Remove fake element and place new position there.\n\t\tconst newPosition = new Position( fakePosition.parent, fakePosition.index );\n\t\tfakePosition._remove();\n\n\t\t// If position is placed between text nodes - merge them and return position inside.\n\t\tconst nodeBefore = newPosition.nodeBefore;\n\t\tconst nodeAfter = newPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof Text && nodeAfter instanceof Text ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\n\t\t// If position is next to text node - move position inside.\n\t\treturn movePositionToTextNode( newPosition );\n\t}\n\n\t/**\n\t * \tWraps one {@link module:engine/view/attributeelement~AttributeElement AttributeElement} into another by\n\t * \tmerging them if possible. When merging is possible - all attributes, styles and classes are moved from wrapper\n\t * \telement to element being wrapped.\n\t *\n\t * \t@private\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} toWrap AttributeElement to wrap using wrapper element.\n\t * \t@returns {Boolean} Returns `true` if elements are merged.\n\t */\n\t_wrapAttributeElement( wrapper, toWrap ) {\n\t\tif ( !canBeJoined( wrapper, toWrap ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can't merge if name or priority differs.\n\t\tif ( wrapper.name !== toWrap.name || wrapper.priority !== toWrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes can be merged.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are different we cannot wrap.\n\t\t\tif ( toWrap.hasAttribute( key ) && toWrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles can be merged.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( toWrap.hasStyle( key ) && toWrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Move all attributes/classes/styles from wrapper to wrapped AttributeElement.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Move only these attributes that are not present - other are similar.\n\t\t\tif ( !toWrap.hasAttribute( key ) ) {\n\t\t\t\tthis.setAttribute( key, wrapper.getAttribute( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( !toWrap.hasStyle( key ) ) {\n\t\t\t\tthis.setStyle( key, wrapper.getStyle( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getClassNames() ) {\n\t\t\tif ( !toWrap.hasClass( key ) ) {\n\t\t\t\tthis.addClass( key, toWrap );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Unwraps {@link module:engine/view/attributeelement~AttributeElement AttributeElement} from another by removing\n\t * corresponding attributes, classes and styles. All attributes, classes and styles from wrapper should be present\n\t * inside element being unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * @param {module:engine/view/attributeelement~AttributeElement} toUnwrap AttributeElement to unwrap using wrapper element.\n\t * @returns {Boolean} Returns `true` if elements are unwrapped.\n\t **/\n\t_unwrapAttributeElement( wrapper, toUnwrap ) {\n\t\tif ( !canBeJoined( wrapper, toUnwrap ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can't unwrap if name or priority differs.\n\t\tif ( wrapper.name !== toUnwrap.name || wrapper.priority !== toUnwrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper attributes.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasAttribute( key ) || toUnwrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper classes.\n\t\tif ( !toUnwrap.hasClass( ...wrapper.getClassNames() ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper styles.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\t// If some styles are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasStyle( key ) || toUnwrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Remove all wrapper's attributes from unwrapped element.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.removeAttribute( key, toUnwrap );\n\t\t}\n\n\t\t// Remove all wrapper's classes from unwrapped element.\n\t\tthis.removeClass( Array.from( wrapper.getClassNames() ), toUnwrap );\n\n\t\t// Remove all wrapper's styles from unwrapped element.\n\t\tthis.removeStyle( Array.from( wrapper.getStyleNames() ), toUnwrap );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at the boundaries of given range.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range Range which `start` and `end` positions will be used to break attributes.\n\t * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n\t * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n\t * @returns {module:engine/view/range~Range} New range with located at break positions.\n\t */\n\t_breakAttributesRange( range, forceSplitText = false ) {\n\t\tconst rangeStart = range.start;\n\t\tconst rangeEnd = range.end;\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// Break at the collapsed position. Return new collapsed range.\n\t\tif ( range.isCollapsed ) {\n\t\t\tconst position = this._breakAttributes( range.start, forceSplitText );\n\n\t\t\treturn new Range( position, position );\n\t\t}\n\n\t\tconst breakEnd = this._breakAttributes( rangeEnd, forceSplitText );\n\t\tconst count = breakEnd.parent.childCount;\n\t\tconst breakStart = this._breakAttributes( rangeStart, forceSplitText );\n\n\t\t// Calculate new break end offset.\n\t\tbreakEnd.offset += breakEnd.parent.childCount - count;\n\n\t\treturn new Range( breakStart, breakEnd );\n\t}\n\n\t/**\n\t * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at given position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element` when break position\n\t * is placed inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element` when break position\n\t * is placed inside {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position Position where to break attributes.\n\t * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n\t * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n\t * @returns {module:engine/view/position~Position} New position after breaking the attributes.\n\t */\n\t_breakAttributes( position, forceSplitText = false ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// If position is placed inside EmptyElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'emptyElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break inside EmptyElement instance.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-empty-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-empty-element', this.document );\n\t\t}\n\n\t\t// If position is placed inside UIElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'uiElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break inside UIElement instance.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-ui-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-ui-element', this.document );\n\t\t}\n\n\t\t// There are no attributes to break and text nodes breaking is not forced.\n\t\tif ( !forceSplitText && positionParent.is( 'text' ) && isContainerOrFragment( positionParent.parent ) ) {\n\t\t\treturn position.clone();\n\t\t}\n\n\t\t// Position's parent is container, so no attributes to break.\n\t\tif ( isContainerOrFragment( positionParent ) ) {\n\t\t\treturn position.clone();\n\t\t}\n\n\t\t// Break text and start again in new position.\n\t\tif ( positionParent.is( 'text' ) ) {\n\t\t\treturn this._breakAttributes( breakTextNode( position ), forceSplitText );\n\t\t}\n\n\t\tconst length = positionParent.childCount;\n\n\t\t// <p>foo<b><u>bar{}</u></b></p>\n\t\t// <p>foo<b><u>bar</u>[]</b></p>\n\t\t// <p>foo<b><u>bar</u></b>[]</p>\n\t\tif ( positionOffset == length ) {\n\t\t\tconst newPosition = new Position( positionParent.parent, positionParent.index + 1 );\n\n\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t} else {\n\t\t\t// <p>foo<b><u>{}bar</u></b></p>\n\t\t\t// <p>foo<b>[]<u>bar</u></b></p>\n\t\t\t// <p>foo{}<b><u>bar</u></b></p>\n\t\t\tif ( positionOffset === 0 ) {\n\t\t\t\tconst newPosition = new Position( positionParent.parent, positionParent.index );\n\n\t\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t\t}\n\t\t\t// <p>foo<b><u>b{}ar</u></b></p>\n\t\t\t// <p>foo<b><u>b[]ar</u></b></p>\n\t\t\t// <p>foo<b><u>b</u>[]<u>ar</u></b></p>\n\t\t\t// <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t\t\telse {\n\t\t\t\tconst offsetAfter = positionParent.index + 1;\n\n\t\t\t\t// Break element.\n\t\t\t\tconst clonedNode = positionParent._clone();\n\n\t\t\t\t// Insert cloned node to position's parent node.\n\t\t\t\tpositionParent.parent._insertChild( offsetAfter, clonedNode );\n\t\t\t\tthis._addToClonedElementsGroup( clonedNode );\n\n\t\t\t\t// Get nodes to move.\n\t\t\t\tconst count = positionParent.childCount - positionOffset;\n\t\t\t\tconst nodesToMove = positionParent._removeChildren( positionOffset, count );\n\n\t\t\t\t// Move nodes to cloned node.\n\t\t\t\tclonedNode._appendChild( nodesToMove );\n\n\t\t\t\t// Create new position to work on.\n\t\t\t\tconst newPosition = new Position( positionParent.parent, offsetAfter );\n\n\t\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stores the information that an {@link module:engine/view/attributeelement~AttributeElement attribute element} was\n\t * added to the tree. Saves the reference to the group in the given element and updates the group, so other elements\n\t * from the group now keep a reference to the given attribute element.\n\t *\n\t * The clones group can be obtained using {@link module:engine/view/attributeelement~AttributeElement#getElementsWithSameId}.\n\t *\n\t * Does nothing if added element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to save.\n\t */\n\t_addToClonedElementsGroup( element ) {\n\t\t// Add only if the element is in document tree.\n\t\tif ( !element.root.is( 'rootElement' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Traverse the element's children recursively to find other attribute elements that also might got inserted.\n\t\t// The loop is at the beginning so we can make fast returns later in the code.\n\t\tif ( element.is( 'element' ) ) {\n\t\t\tfor ( const child of element.getChildren() ) {\n\t\t\t\tthis._addToClonedElementsGroup( child );\n\t\t\t}\n\t\t}\n\n\t\tconst id = element.id;\n\n\t\tif ( !id ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet group = this._cloneGroups.get( id );\n\n\t\tif ( !group ) {\n\t\t\tgroup = new Set();\n\t\t\tthis._cloneGroups.set( id, group );\n\t\t}\n\n\t\tgroup.add( element );\n\t\telement._clonesGroup = group;\n\t}\n\n\t/**\n\t * Removes all the information about the given {@link module:engine/view/attributeelement~AttributeElement attribute element}\n\t * from its clones group.\n\t *\n\t * Keep in mind, that the element will still keep a reference to the group (but the group will not keep a reference to it).\n\t * This allows to reference the whole group even if the element was already removed from the tree.\n\t *\n\t * Does nothing if the element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to remove.\n\t */\n\t_removeFromClonedElementsGroup( element ) {\n\t\t// Traverse the element's children recursively to find other attribute elements that also got removed.\n\t\t// The loop is at the beginning so we can make fast returns later in the code.\n\t\tif ( element.is( 'element' ) ) {\n\t\t\tfor ( const child of element.getChildren() ) {\n\t\t\t\tthis._removeFromClonedElementsGroup( child );\n\t\t\t}\n\t\t}\n\n\t\tconst id = element.id;\n\n\t\tif ( !id ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst group = this._cloneGroups.get( id );\n\n\t\tif ( !group ) {\n\t\t\treturn;\n\t\t}\n\n\t\tgroup.delete( element );\n\t\t// Not removing group from element on purpose!\n\t\t// If other parts of code have reference to this element, they will be able to get references to other elements from the group.\n\t}\n}\n\n// Helper function for `view.writer.wrap`. Checks if given element has any children that are not ui elements.\nfunction _hasNonUiChildren( parent ) {\n\treturn Array.from( parent.getChildren() ).some( child => !child.is( 'uiElement' ) );\n}\n\n/**\n * Attribute element need to be instance of attribute element.\n *\n * @error view-writer-wrap-invalid-attribute\n */\n\n// Returns first parent container of specified {@link module:engine/view/position~Position Position}.\n// Position's parent node is checked as first, then next parents are checked.\n// Note that {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n//\n// @param {module:engine/view/position~Position} position Position used as a start point to locate parent container.\n// @returns {module:engine/view/containerelement~ContainerElement|module:engine/view/documentfragment~DocumentFragment|undefined}\n// Parent container element or `undefined` if container is not found.\nfunction getParentContainer( position ) {\n\tlet parent = position.parent;\n\n\twhile ( !isContainerOrFragment( parent ) ) {\n\t\tif ( !parent ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tparent = parent.parent;\n\t}\n\n\treturn parent;\n}\n\n// Checks if first {@link module:engine/view/attributeelement~AttributeElement AttributeElement} provided to the function\n// can be wrapped otuside second element. It is done by comparing elements'\n// {@link module:engine/view/attributeelement~AttributeElement#priority priorities}, if both have same priority\n// {@link module:engine/view/element~Element#getIdentity identities} are compared.\n//\n// @param {module:engine/view/attributeelement~AttributeElement} a\n// @param {module:engine/view/attributeelement~AttributeElement} b\n// @returns {Boolean}\nfunction shouldABeOutsideB( a, b ) {\n\tif ( a.priority < b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority > b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use identities.\n\treturn a.getIdentity() < b.getIdentity();\n}\n\n// Returns new position that is moved to near text node. Returns same position if there is no text node before of after\n// specified position.\n//\n//\t\t<p>foo[]</p>  ->  <p>foo{}</p>\n//\t\t<p>[]foo</p>  ->  <p>{}foo</p>\n//\n// @param {module:engine/view/position~Position} position\n// @returns {module:engine/view/position~Position} Position located inside text node or same position if there is no text nodes\n// before or after position location.\nfunction movePositionToTextNode( position ) {\n\tconst nodeBefore = position.nodeBefore;\n\n\tif ( nodeBefore && nodeBefore.is( 'text' ) ) {\n\t\treturn new Position( nodeBefore, nodeBefore.data.length );\n\t}\n\n\tconst nodeAfter = position.nodeAfter;\n\n\tif ( nodeAfter && nodeAfter.is( 'text' ) ) {\n\t\treturn new Position( nodeAfter, 0 );\n\t}\n\n\treturn position;\n}\n\n// Breaks text node into two text nodes when possible.\n//\n//\t\t<p>foo{}bar</p> -> <p>foo[]bar</p>\n//\t\t<p>{}foobar</p> -> <p>[]foobar</p>\n//\t\t<p>foobar{}</p> -> <p>foobar[]</p>\n//\n// @param {module:engine/view/position~Position} position Position that need to be placed inside text node.\n// @returns {module:engine/view/position~Position} New position after breaking text node.\nfunction breakTextNode( position ) {\n\tif ( position.offset == position.parent.data.length ) {\n\t\treturn new Position( position.parent.parent, position.parent.index + 1 );\n\t}\n\n\tif ( position.offset === 0 ) {\n\t\treturn new Position( position.parent.parent, position.parent.index );\n\t}\n\n\t// Get part of the text that need to be moved.\n\tconst textToMove = position.parent.data.slice( position.offset );\n\n\t// Leave rest of the text in position's parent.\n\tposition.parent._data = position.parent.data.slice( 0, position.offset );\n\n\t// Insert new text node after position's parent text node.\n\tposition.parent.parent._insertChild( position.parent.index + 1, new Text( textToMove ) );\n\n\t// Return new position between two newly created text nodes.\n\treturn new Position( position.parent.parent, position.parent.index + 1 );\n}\n\n// Merges two text nodes into first node. Removes second node and returns merge position.\n//\n// @param {module:engine/view/text~Text} t1 First text node to merge. Data from second text node will be moved at the end of\n// this text node.\n// @param {module:engine/view/text~Text} t2 Second text node to merge. This node will be removed after merging.\n// @returns {module:engine/view/position~Position} Position after merging text nodes.\nfunction mergeTextNodes( t1, t2 ) {\n\t// Merge text data into first text node and remove second one.\n\tconst nodeBeforeLength = t1.data.length;\n\tt1._data += t2.data;\n\tt2._remove();\n\n\treturn new Position( t1, nodeBeforeLength );\n}\n\n// Checks if provided nodes are valid to insert. Checks if each node is an instance of\n// {@link module:engine/view/text~Text Text} or {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n// {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElement} or\n// {@link module:engine/view/uielement~UIElement UIElement}.\n//\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n// contains instances that are not {@link module:engine/view/text~Text Texts},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElements},\n// {@link module:engine/view/uielement~UIElement UIElements},\n// {@link module:engine/view/attributeelement~AttributeElement AttributeElements} or\n// {@link module:engine/view/containerelement~ContainerElement ContainerElements}.\n//\n// @param Iterable.<module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement\n// |module:engine/view/containerelement~ContainerElement> nodes\n// @param {Object} errorContext\nfunction validateNodesToInsert( nodes, errorContext ) {\n\tfor ( const node of nodes ) {\n\t\tif ( !validNodesToInsert.some( ( validNode => node instanceof validNode ) ) ) { // eslint-disable-line no-use-before-define\n\t\t\t/**\n\t\t\t * Inserted nodes should be valid to insert. of {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n\t\t\t * {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n\t\t\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElement},\n\t\t\t * {@link module:engine/view/uielement~UIElement UIElement}, {@link module:engine/view/text~Text Text}.\n\t\t\t *\n\t\t\t * @error view-writer-insert-invalid-node\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-insert-invalid-node', errorContext );\n\t\t}\n\n\t\tif ( !node.is( 'text' ) ) {\n\t\t\tvalidateNodesToInsert( node.getChildren(), errorContext );\n\t\t}\n\t}\n}\n\nconst validNodesToInsert = [ Text, AttributeElement, ContainerElement, EmptyElement, UIElement ];\n\n// Checks if node is ContainerElement or DocumentFragment, because in most cases they should be treated the same way.\n//\n// @param {module:engine/view/node~Node} node\n// @returns {Boolean} Returns `true` if node is instance of ContainerElement or DocumentFragment.\nfunction isContainerOrFragment( node ) {\n\treturn node && ( node.is( 'containerElement' ) || node.is( 'documentFragment' ) );\n}\n\n// Checks if {@link module:engine/view/range~Range#start range start} and {@link module:engine/view/range~Range#end range end} are placed\n// inside same {@link module:engine/view/containerelement~ContainerElement container element}.\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when validation fails.\n//\n// @param {module:engine/view/range~Range} range\n// @param {Object} errorContext\nfunction validateRangeContainer( range, errorContext ) {\n\tconst startContainer = getParentContainer( range.start );\n\tconst endContainer = getParentContainer( range.end );\n\n\tif ( !startContainer || !endContainer || startContainer !== endContainer ) {\n\t\t/**\n\t\t * Range container is invalid. This can happen if {@link module:engine/view/range~Range#start range start} and\n\t\t * {@link module:engine/view/range~Range#end range end} positions are not placed inside same container or\n\t\t * parent container for these positions cannot be found.\n\t\t *\n\t\t * @error view-writer-invalid-range-container\n\t\t */\n\n\t\tthrow new CKEditorError( 'view-writer-invalid-range-container', errorContext );\n\t}\n}\n\n// Checks if two attribute elements can be joined together. Elements can be joined together if, and only if\n// they do not have ids specified.\n//\n// @private\n// @param {module:engine/view/element~Element} a\n// @param {module:engine/view/element~Element} b\n// @returns {Boolean}\nfunction canBeJoined( a, b ) {\n\treturn a.id === null && b.id === null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/insertat\n */\n\n/**\n * Inserts node to the parent at given index.\n *\n * @param {Element} parentElement Parent element.\n * @param {Number} index Insertions index.\n * @param {Node} nodeToInsert Node to insert.\n */\nexport default function insertAt( parentElement, index, nodeToInsert ) {\n\tparentElement.insertBefore( nodeToInsert, parentElement.childNodes[ index ] || null );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/remove\n */\n\n/**\n * Removes given node from parent.\n *\n * @param {Node} node Node to remove.\n */\nexport default function remove( node ) {\n\tconst parent = node.parentNode;\n\n\tif ( parent ) {\n\t\tparent.removeChild( node );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals Node */\n\n/**\n * @module engine/view/renderer\n */\n\nimport ViewText from './text';\nimport ViewPosition from './position';\nimport { INLINE_FILLER, INLINE_FILLER_LENGTH, startsWithFiller, isInlineFiller, isBlockFiller } from './filler';\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport insertAt from '@ckeditor/ckeditor5-utils/src/dom/insertat';\nimport remove from '@ckeditor/ckeditor5-utils/src/dom/remove';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport fastDiff from '@ckeditor/ckeditor5-utils/src/fastdiff';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Renderer is responsible for updating the DOM structure and the DOM selection based on\n * the {@link module:engine/view/renderer~Renderer#markToSync information about updated view nodes}.\n * In other words, it renders the view to the DOM.\n *\n * Its main responsibility is to make only the necessary, minimal changes to the DOM. However, unlike in many\n * virtual DOM implementations, the primary reason for doing minimal changes is not the performance but ensuring\n * that native editing features such as text composition, autocompletion, spell checking, selection's x-index are\n * affected as little as possible.\n *\n * Renderer uses {@link module:engine/view/domconverter~DomConverter} to transform view nodes and positions\n * to and from the DOM.\n */\nexport default class Renderer {\n\t/**\n\t * Creates a renderer instance.\n\t *\n\t * @param {module:engine/view/domconverter~DomConverter} domConverter Converter instance.\n\t * @param {module:engine/view/documentselection~DocumentSelection} selection View selection.\n\t */\n\tconstructor( domConverter, selection ) {\n\t\t/**\n\t\t * Set of DOM Documents instances.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<Document>}\n\t\t */\n\t\tthis.domDocuments = new Set();\n\n\t\t/**\n\t\t * Converter instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = domConverter;\n\n\t\t/**\n\t\t * Set of nodes which attributes changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedAttributes = new Set();\n\n\t\t/**\n\t\t * Set of elements which child lists changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedChildren = new Set();\n\n\t\t/**\n\t\t * Set of text nodes which text data changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedTexts = new Set();\n\n\t\t/**\n\t\t * View selection. Renderer updates DOM selection based on the view selection.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection}\n\t\t */\n\t\tthis.selection = selection;\n\n\t\t/**\n\t\t * Indicates if the view document is focused and selection can be rendered. Selection will not be rendered if\n\t\t * this is set to `false`.\n\t\t *\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.isFocused = false;\n\n\t\t/**\n\t\t * The text node in which the inline filler was rendered.\n\t\t *\n\t\t * @private\n\t\t * @member {Text}\n\t\t */\n\t\tthis._inlineFiller = null;\n\n\t\t/**\n\t\t * DOM element containing fake selection.\n\t\t *\n\t\t * @private\n\t\t * @type {null|HTMLElement}\n\t\t */\n\t\tthis._fakeSelectionContainer = null;\n\t}\n\n\t/**\n\t * Marks a view node to be updated in the DOM by {@link #render `render()`}.\n\t *\n\t * Note that only view nodes whose parents have corresponding DOM elements need to be marked to be synchronized.\n\t *\n\t * @see #markedAttributes\n\t * @see #markedChildren\n\t * @see #markedTexts\n\t *\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Node to be marked.\n\t */\n\tmarkToSync( type, node ) {\n\t\tif ( type === 'text' ) {\n\t\t\tif ( this.domConverter.mapViewToDom( node.parent ) ) {\n\t\t\t\tthis.markedTexts.add( node );\n\t\t\t}\n\t\t} else {\n\t\t\t// If the node has no DOM element it is not rendered yet,\n\t\t\t// its children/attributes do not need to be marked to be sync.\n\t\t\tif ( !this.domConverter.mapViewToDom( node ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( type === 'attributes' ) {\n\t\t\t\tthis.markedAttributes.add( node );\n\t\t\t} else if ( type === 'children' ) {\n\t\t\t\tthis.markedChildren.add( node );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * Unknown type passed to Renderer.markToSync.\n\t\t\t\t *\n\t\t\t\t * @error renderer-unknown-type\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'view-renderer-unknown-type: Unknown type passed to Renderer.markToSync.', this );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Renders all buffered changes ({@link #markedAttributes}, {@link #markedChildren} and {@link #markedTexts}) and\n\t * the current view selection (if needed) to the DOM by applying a minimal set of changes to it.\n\t *\n\t * Renderer tries not to break the text composition (e.g. IME) and x-index of the selection,\n\t * so it does as little as it is needed to update the DOM.\n\t *\n\t * Renderer also handles {@link module:engine/view/filler fillers}. Especially, it checks if the inline filler is needed\n\t * at the selection position and adds or removes it. To prevent breaking text composition inline filler will not be\n\t * removed as long as the selection is in the text node which needed it at first.\n\t */\n\trender() {\n\t\tlet inlineFillerPosition;\n\n\t\t// Refresh mappings.\n\t\tfor ( const element of this.markedChildren ) {\n\t\t\tthis._updateChildrenMappings( element );\n\t\t}\n\n\t\t// There was inline filler rendered in the DOM but it's not\n\t\t// at the selection position any more, so we can remove it\n\t\t// (cause even if it's needed, it must be placed in another location).\n\t\tif ( this._inlineFiller && !this._isSelectionInInlineFiller() ) {\n\t\t\tthis._removeInlineFiller();\n\t\t}\n\n\t\t// If we've got the filler, let's try to guess its position in the view.\n\t\tif ( this._inlineFiller ) {\n\t\t\tinlineFillerPosition = this._getInlineFillerPosition();\n\t\t}\n\t\t// Otherwise, if it's needed, create it at the selection position.\n\t\telse if ( this._needsInlineFillerAtSelection() ) {\n\t\t\tinlineFillerPosition = this.selection.getFirstPosition();\n\n\t\t\t// Do not use `markToSync` so it will be added even if the parent is already added.\n\t\t\tthis.markedChildren.add( inlineFillerPosition.parent );\n\t\t}\n\n\t\tfor ( const element of this.markedAttributes ) {\n\t\t\tthis._updateAttrs( element );\n\t\t}\n\n\t\tfor ( const element of this.markedChildren ) {\n\t\t\tthis._updateChildren( element, { inlineFillerPosition } );\n\t\t}\n\n\t\tfor ( const node of this.markedTexts ) {\n\t\t\tif ( !this.markedChildren.has( node.parent ) && this.domConverter.mapViewToDom( node.parent ) ) {\n\t\t\t\tthis._updateText( node, { inlineFillerPosition } );\n\t\t\t}\n\t\t}\n\n\t\t// Check whether the inline filler is required and where it really is in the DOM.\n\t\t// At this point in most cases it will be in the DOM, but there are exceptions.\n\t\t// For example, if the inline filler was deep in the created DOM structure, it will not be created.\n\t\t// Similarly, if it was removed at the beginning of this function and then neither text nor children were updated,\n\t\t// it will not be present.\n\t\t// Fix those and similar scenarios.\n\t\tif ( inlineFillerPosition ) {\n\t\t\tconst fillerDomPosition = this.domConverter.viewPositionToDom( inlineFillerPosition );\n\t\t\tconst domDocument = fillerDomPosition.parent.ownerDocument;\n\n\t\t\tif ( !startsWithFiller( fillerDomPosition.parent ) ) {\n\t\t\t\t// Filler has not been created at filler position. Create it now.\n\t\t\t\tthis._inlineFiller = addInlineFiller( domDocument, fillerDomPosition.parent, fillerDomPosition.offset );\n\t\t\t} else {\n\t\t\t\t// Filler has been found, save it.\n\t\t\t\tthis._inlineFiller = fillerDomPosition.parent;\n\t\t\t}\n\t\t} else {\n\t\t\t// There is no filler needed.\n\t\t\tthis._inlineFiller = null;\n\t\t}\n\n\t\tthis._updateSelection();\n\t\tthis._updateFocus();\n\n\t\tthis.markedTexts.clear();\n\t\tthis.markedAttributes.clear();\n\t\tthis.markedChildren.clear();\n\t}\n\n\t/**\n\t * Updates mappings of view element's children.\n\t *\n\t * Children that were replaced in the view structure by similar elements (same tag name) are treated as 'replaced'.\n\t * This means that their mappings can be updated so the new view elements are mapped to the existing DOM elements.\n\t * Thanks to that these elements do not need to be re-rendered completely.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewElement The view element whose children mappings will be updated.\n\t */\n\t_updateChildrenMappings( viewElement ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that it was already removed from DOM and there is no need to process it.\n\t\t\treturn;\n\t\t}\n\n\t\tconst actualDomChildren = this.domConverter.mapViewToDom( viewElement ).childNodes;\n\t\tconst expectedDomChildren = Array.from(\n\t\t\tthis.domConverter.viewChildrenToDom( viewElement, domElement.ownerDocument, { withChildren: false } )\n\t\t);\n\t\tconst diff = this._diffNodeLists( actualDomChildren, expectedDomChildren );\n\t\tconst actions = this._findReplaceActions( diff, actualDomChildren, expectedDomChildren );\n\n\t\tif ( actions.indexOf( 'replace' ) !== -1 ) {\n\t\t\tconst counter = { equal: 0, insert: 0, delete: 0 };\n\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action === 'replace' ) {\n\t\t\t\t\tconst insertIndex = counter.equal + counter.insert;\n\t\t\t\t\tconst deleteIndex = counter.equal + counter.delete;\n\t\t\t\t\tconst viewChild = viewElement.getChild( insertIndex );\n\n\t\t\t\t\t// The 'uiElement' is a special one and its children are not stored in a view (#799),\n\t\t\t\t\t// so we cannot use it with replacing flow (since it uses view children during rendering\n\t\t\t\t\t// which will always result in rendering empty element).\n\t\t\t\t\tif ( viewChild && !viewChild.is( 'uiElement' ) ) {\n\t\t\t\t\t\tthis._updateElementMappings( viewChild, actualDomChildren[ deleteIndex ] );\n\t\t\t\t\t}\n\n\t\t\t\t\tremove( expectedDomChildren[ insertIndex ] );\n\t\t\t\t\tcounter.equal++;\n\t\t\t\t} else {\n\t\t\t\t\tcounter[ action ]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates mappings of a given view element.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewElement The view element whose mappings will be updated.\n\t * @param {Node} domElement The DOM element representing the given view element.\n\t */\n\t_updateElementMappings( viewElement, domElement ) {\n\t\t// Remap 'DomConverter' bindings.\n\t\tthis.domConverter.unbindDomElement( domElement );\n\t\tthis.domConverter.bindElements( domElement, viewElement );\n\n\t\t// View element may have children which needs to be updated, but are not marked, mark them to update.\n\t\tthis.markedChildren.add( viewElement );\n\n\t\t// Because we replace new view element mapping with the existing one, the corresponding DOM element\n\t\t// will not be rerendered. The new view element may have different attributes than the previous one.\n\t\t// Since its corresponding DOM element will not be rerendered, new attributes will not be added\n\t\t// to the DOM, so we need to mark it here to make sure its attributes gets updated. See #1427 for more\n\t\t// detailed case study.\n\t\t// Also there are cases where replaced element is removed from the view structure and then has\n\t\t// its attributes changed or removed. In such cases the element will not be present in `markedAttributes`\n\t\t// and also may be the same (`element.isSimilar()`) as the reused element not having its attributes updated.\n\t\t// To prevent such situations we always mark reused element to have its attributes rerenderd (#1560).\n\t\tthis.markedAttributes.add( viewElement );\n\t}\n\n\t/**\n\t * Gets the position of the inline filler based on the current selection.\n\t * Here, we assume that we know that the filler is needed and\n\t * {@link #_isSelectionInInlineFiller is at the selection position}, and, since it is needed,\n\t * it is somewhere at the selection position.\n\t *\n\t * Note: The filler position cannot be restored based on the filler's DOM text node, because\n\t * when this method is called (before rendering), the bindings will often be broken. View-to-DOM\n\t * bindings are only dependable after rendering.\n\t *\n\t * @private\n\t * @returns {module:engine/view/position~Position}\n\t */\n\t_getInlineFillerPosition() {\n\t\tconst firstPos = this.selection.getFirstPosition();\n\n\t\tif ( firstPos.parent.is( 'text' ) ) {\n\t\t\treturn ViewPosition._createBefore( this.selection.getFirstPosition().parent );\n\t\t} else {\n\t\t\treturn firstPos;\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` if the selection has not left the inline filler's text node.\n\t * If it is `true`, it means that the filler had been added for a reason and the selection did not\n\t * leave the filler's text node. For example, the user can be in the middle of a composition so it should not be touched.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if the inline filler and selection are in the same place.\n\t */\n\t_isSelectionInInlineFiller() {\n\t\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Note, we can't check if selection's position equals position of the\n\t\t// this._inlineFiller node, because of #663. We may not be able to calculate\n\t\t// the filler's position in the view at this stage.\n\t\t// Instead, we check it the other way – whether selection is anchored in\n\t\t// that text node or next to it.\n\n\t\t// Possible options are:\n\t\t// \"FILLER{}\"\n\t\t// \"FILLERadded-text{}\"\n\t\tconst selectionPosition = this.selection.getFirstPosition();\n\t\tconst position = this.domConverter.viewPositionToDom( selectionPosition );\n\n\t\tif ( position && isText( position.parent ) && startsWithFiller( position.parent ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Removes the inline filler.\n\t *\n\t * @private\n\t */\n\t_removeInlineFiller() {\n\t\tconst domFillerNode = this._inlineFiller;\n\n\t\t// Something weird happened and the stored node doesn't contain the filler's text.\n\t\tif ( !startsWithFiller( domFillerNode ) ) {\n\t\t\t/**\n\t\t\t * The inline filler node was lost. Most likely, something overwrote the filler text node\n\t\t\t * in the DOM.\n\t\t\t *\n\t\t\t * @error view-renderer-filler-was-lost\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-renderer-filler-was-lost: The inline filler node was lost.', this );\n\t\t}\n\n\t\tif ( isInlineFiller( domFillerNode ) ) {\n\t\t\tdomFillerNode.parentNode.removeChild( domFillerNode );\n\t\t} else {\n\t\t\tdomFillerNode.data = domFillerNode.data.substr( INLINE_FILLER_LENGTH );\n\t\t}\n\n\t\tthis._inlineFiller = null;\n\t}\n\n\t/**\n\t * Checks if the inline {@link module:engine/view/filler filler} should be added.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if the inline filler should be added.\n\t */\n\t_needsInlineFillerAtSelection() {\n\t\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selectionPosition = this.selection.getFirstPosition();\n\t\tconst selectionParent = selectionPosition.parent;\n\t\tconst selectionOffset = selectionPosition.offset;\n\n\t\t// If there is no DOM root we do not care about fillers.\n\t\tif ( !this.domConverter.mapViewToDom( selectionParent.root ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !( selectionParent.is( 'element' ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Prevent adding inline filler inside elements with contenteditable=false.\n\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/1170\n\t\tif ( !isEditable( selectionParent ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// We have block filler, we do not need inline one.\n\t\tif ( selectionOffset === selectionParent.getFillerOffset() ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst nodeBefore = selectionPosition.nodeBefore;\n\t\tconst nodeAfter = selectionPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof ViewText || nodeAfter instanceof ViewText ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if text needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} viewText View text to update.\n\t * @param {Object} options\n\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position where the inline\n\t * filler should be rendered.\n\t */\n\t_updateText( viewText, options ) {\n\t\tconst domText = this.domConverter.findCorrespondingDomText( viewText );\n\t\tconst newDomText = this.domConverter.viewToDom( viewText, domText.ownerDocument );\n\n\t\tconst actualText = domText.data;\n\t\tlet expectedText = newDomText.data;\n\n\t\tconst filler = options.inlineFillerPosition;\n\n\t\tif ( filler && filler.parent == viewText.parent && filler.offset == viewText.index ) {\n\t\t\texpectedText = INLINE_FILLER + expectedText;\n\t\t}\n\n\t\tif ( actualText != expectedText ) {\n\t\t\tconst actions = fastDiff( actualText, expectedText );\n\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action.type === 'insert' ) {\n\t\t\t\t\tdomText.insertData( action.index, action.values.join( '' ) );\n\t\t\t\t} else { // 'delete'\n\t\t\t\t\tdomText.deleteData( action.index, action.howMany );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if attribute list needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewElement The view element to update.\n\t */\n\t_updateAttrs( viewElement ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that 'viewElement' is outdated as its mapping was updated\n\t\t\t// in 'this._updateChildrenMappings()'. There is no need to process it as new view element which\n\t\t\t// replaced old 'viewElement' mapping was also added to 'this.markedAttributes'\n\t\t\t// in 'this._updateChildrenMappings()' so it will be processed separately.\n\t\t\treturn;\n\t\t}\n\n\t\tconst domAttrKeys = Array.from( domElement.attributes ).map( attr => attr.name );\n\t\tconst viewAttrKeys = viewElement.getAttributeKeys();\n\n\t\t// Add or overwrite attributes.\n\t\tfor ( const key of viewAttrKeys ) {\n\t\t\tdomElement.setAttribute( key, viewElement.getAttribute( key ) );\n\t\t}\n\n\t\t// Remove from DOM attributes which do not exists in the view.\n\t\tfor ( const key of domAttrKeys ) {\n\t\t\tif ( !viewElement.hasAttribute( key ) ) {\n\t\t\t\tdomElement.removeAttribute( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if elements child list needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewElement View element to update.\n\t * @param {Object} options\n\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position where the inline\n\t * filler should be rendered.\n\t */\n\t_updateChildren( viewElement, options ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that it was already removed from DOM.\n\t\t\t// There is no need to process it. It will be processed when re-inserted.\n\t\t\treturn;\n\t\t}\n\n\t\tconst inlineFillerPosition = options.inlineFillerPosition;\n\t\tconst actualDomChildren = this.domConverter.mapViewToDom( viewElement ).childNodes;\n\t\tconst expectedDomChildren = Array.from(\n\t\t\tthis.domConverter.viewChildrenToDom( viewElement, domElement.ownerDocument, { bind: true, inlineFillerPosition } )\n\t\t);\n\n\t\t// Inline filler element has to be created as it is present in the DOM, but not in the view. It is required\n\t\t// during diffing so text nodes could be compared correctly and also during rendering to maintain\n\t\t// proper order and indexes while updating the DOM.\n\t\tif ( inlineFillerPosition && inlineFillerPosition.parent === viewElement ) {\n\t\t\taddInlineFiller( domElement.ownerDocument, expectedDomChildren, inlineFillerPosition.offset );\n\t\t}\n\n\t\tconst diff = this._diffNodeLists( actualDomChildren, expectedDomChildren );\n\n\t\tlet i = 0;\n\t\tconst nodesToUnbind = new Set();\n\n\t\tfor ( const action of diff ) {\n\t\t\tif ( action === 'insert' ) {\n\t\t\t\tinsertAt( domElement, i, expectedDomChildren[ i ] );\n\t\t\t\ti++;\n\t\t\t} else if ( action === 'delete' ) {\n\t\t\t\tnodesToUnbind.add( actualDomChildren[ i ] );\n\t\t\t\tremove( actualDomChildren[ i ] );\n\t\t\t} else { // 'equal'\n\t\t\t\t// Force updating text nodes inside elements which did not change and do not need to be re-rendered (#1125).\n\t\t\t\tthis._markDescendantTextToSync( this.domConverter.domToView( expectedDomChildren[ i ] ) );\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// Unbind removed nodes. When node does not have a parent it means that it was removed from DOM tree during\n\t\t// comparision with the expected DOM. We don't need to check child nodes, because if child node was reinserted,\n\t\t// it was moved to DOM tree out of the removed node.\n\t\tfor ( const node of nodesToUnbind ) {\n\t\t\tif ( !node.parentNode ) {\n\t\t\t\tthis.domConverter.unbindDomElement( node );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shorthand for diffing two arrays or node lists of DOM nodes.\n\t *\n\t * @private\n\t * @param {Array.<Node>|NodeList} actualDomChildren Actual DOM children\n\t * @param {Array.<Node>|NodeList} expectedDomChildren Expected DOM children.\n\t * @returns {Array.<String>} The list of actions based on the {@link module:utils/diff~diff} function.\n\t */\n\t_diffNodeLists( actualDomChildren, expectedDomChildren ) {\n\t\tactualDomChildren = filterOutFakeSelectionContainer( actualDomChildren, this._fakeSelectionContainer );\n\n\t\treturn diff( actualDomChildren, expectedDomChildren, sameNodes.bind( null, this.domConverter.blockFiller ) );\n\t}\n\n\t/**\n\t * Finds DOM nodes that were replaced with the similar nodes (same tag name) in the view. All nodes are compared\n\t * within one `insert`/`delete` action group, for example:\n\t *\n\t * \t\tActual DOM:\t\t<p><b>Foo</b>Bar<i>Baz</i><b>Bax</b></p>\n\t * \t\tExpected DOM:\t<p>Bar<b>123</b><i>Baz</i><b>456</b></p>\n\t * \t\tInput actions:\t[ insert, insert, delete, delete, equal, insert, delete ]\n\t * \t\tOutput actions:\t[ insert, replace, delete, equal, replace ]\n\t *\n\t * @private\n\t * @param {Array.<String>} actions Actions array which is a result of the {@link module:utils/diff~diff} function.\n\t * @param {Array.<Node>|NodeList} actualDom Actual DOM children\n\t * @param {Array.<Node>} expectedDom Expected DOM children.\n\t * @returns {Array.<String>} Actions array modified with the `replace` actions.\n\t */\n\t_findReplaceActions( actions, actualDom, expectedDom ) {\n\t\t// If there is no both 'insert' and 'delete' actions, no need to check for replaced elements.\n\t\tif ( actions.indexOf( 'insert' ) === -1 || actions.indexOf( 'delete' ) === -1 ) {\n\t\t\treturn actions;\n\t\t}\n\n\t\tlet newActions = [];\n\t\tlet actualSlice = [];\n\t\tlet expectedSlice = [];\n\n\t\tconst counter = { equal: 0, insert: 0, delete: 0 };\n\n\t\tfor ( const action of actions ) {\n\t\t\tif ( action === 'insert' ) {\n\t\t\t\texpectedSlice.push( expectedDom[ counter.equal + counter.insert ] );\n\t\t\t} else if ( action === 'delete' ) {\n\t\t\t\tactualSlice.push( actualDom[ counter.equal + counter.delete ] );\n\t\t\t} else { // equal\n\t\t\t\tnewActions = newActions.concat( diff( actualSlice, expectedSlice, areSimilar ).map( x => x === 'equal' ? 'replace' : x ) );\n\t\t\t\tnewActions.push( 'equal' );\n\t\t\t\t// Reset stored elements on 'equal'.\n\t\t\t\tactualSlice = [];\n\t\t\t\texpectedSlice = [];\n\t\t\t}\n\t\t\tcounter[ action ]++;\n\t\t}\n\n\t\treturn newActions.concat( diff( actualSlice, expectedSlice, areSimilar ).map( x => x === 'equal' ? 'replace' : x ) );\n\t}\n\n\t/**\n\t * Marks text nodes to be synchronized.\n\t *\n\t * If a text node is passed, it will be marked. If an element is passed, all descendant text nodes inside it will be marked.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewNode View node to sync.\n\t */\n\t_markDescendantTextToSync( viewNode ) {\n\t\tif ( !viewNode ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( viewNode.is( 'text' ) ) {\n\t\t\tthis.markedTexts.add( viewNode );\n\t\t} else if ( viewNode.is( 'element' ) ) {\n\t\t\tfor ( const child of viewNode.getChildren() ) {\n\t\t\t\tthis._markDescendantTextToSync( child );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the selection needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t */\n\t_updateSelection() {\n\t\t// If there is no selection - remove DOM and fake selections.\n\t\tif ( this.selection.rangeCount === 0 ) {\n\t\t\tthis._removeDomSelection();\n\t\t\tthis._removeFakeSelection();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst domRoot = this.domConverter.mapViewToDom( this.selection.editableElement );\n\n\t\t// Do nothing if there is no focus, or there is no DOM element corresponding to selection's editable element.\n\t\tif ( !this.isFocused || !domRoot ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Render selection.\n\t\tif ( this.selection.isFake ) {\n\t\t\tthis._updateFakeSelection( domRoot );\n\t\t} else {\n\t\t\tthis._removeFakeSelection();\n\t\t\tthis._updateDomSelection( domRoot );\n\t\t}\n\t}\n\n\t/**\n\t * Updates the fake selection.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot A valid DOM root where the fake selection container should be added.\n\t */\n\t_updateFakeSelection( domRoot ) {\n\t\tconst domDocument = domRoot.ownerDocument;\n\t\tlet container = this._fakeSelectionContainer;\n\n\t\t// Create fake selection container if one does not exist.\n\t\tif ( !container ) {\n\t\t\tthis._fakeSelectionContainer = container = domDocument.createElement( 'div' );\n\n\t\t\tObject.assign( container.style, {\n\t\t\t\tposition: 'fixed',\n\t\t\t\ttop: 0,\n\t\t\t\tleft: '-9999px',\n\t\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/752.\n\t\t\t\twidth: '42px'\n\t\t\t} );\n\n\t\t\t// Fill it with a text node so we can update it later.\n\t\t\tcontainer.textContent = '\\u00A0';\n\t\t}\n\n\t\tif ( !container.parentElement || container.parentElement != domRoot ) {\n\t\t\tdomRoot.appendChild( container );\n\t\t}\n\n\t\t// Update contents.\n\t\tcontainer.textContent = this.selection.fakeSelectionLabel || '\\u00A0';\n\n\t\t// Update selection.\n\t\tconst domSelection = domDocument.getSelection();\n\t\tconst domRange = domDocument.createRange();\n\n\t\tdomSelection.removeAllRanges();\n\t\tdomRange.selectNodeContents( container );\n\t\tdomSelection.addRange( domRange );\n\n\t\t// Bind fake selection container with current selection.\n\t\tthis.domConverter.bindFakeSelection( container, this.selection );\n\t}\n\n\t/**\n\t * Updates the DOM selection.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot A valid DOM root where the DOM selection should be rendered.\n\t */\n\t_updateDomSelection( domRoot ) {\n\t\tconst domSelection = domRoot.ownerDocument.defaultView.getSelection();\n\n\t\t// Let's check whether DOM selection needs updating at all.\n\t\tif ( !this._domSelectionNeedsUpdate( domSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Multi-range selection is not available in most browsers, and, at least in Chrome, trying to\n\t\t// set such selection, that is not continuous, throws an error. Because of that, we will just use anchor\n\t\t// and focus of view selection.\n\t\t// Since we are not supporting multi-range selection, we also do not need to check if proper editable is\n\t\t// selected. If there is any editable selected, it is okay (editable is taken from selection anchor).\n\t\tconst anchor = this.domConverter.viewPositionToDom( this.selection.anchor );\n\t\tconst focus = this.domConverter.viewPositionToDom( this.selection.focus );\n\n\t\t// Focus the new editing host.\n\t\t// Otherwise, FF may throw an error (https://github.com/ckeditor/ckeditor5/issues/721).\n\t\tdomRoot.focus();\n\n\t\tdomSelection.collapse( anchor.parent, anchor.offset );\n\t\tdomSelection.extend( focus.parent, focus.offset );\n\n\t\t// Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n\t\tif ( env.isGecko ) {\n\t\t\tfixGeckoSelectionAfterBr( focus, domSelection );\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether a given DOM selection needs to be updated.\n\t *\n\t * @private\n\t * @param {Selection} domSelection The DOM selection to check.\n\t * @returns {Boolean}\n\t */\n\t_domSelectionNeedsUpdate( domSelection ) {\n\t\tif ( !this.domConverter.isDomSelectionCorrect( domSelection ) ) {\n\t\t\t// Current DOM selection is in incorrect position. We need to update it.\n\t\t\treturn true;\n\t\t}\n\n\t\tconst oldViewSelection = domSelection && this.domConverter.domSelectionToView( domSelection );\n\n\t\tif ( oldViewSelection && this.selection.isEqual( oldViewSelection ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If selection is not collapsed, it does not need to be updated if it is similar.\n\t\tif ( !this.selection.isCollapsed && this.selection.isSimilar( oldViewSelection ) ) {\n\t\t\t// Selection did not changed and is correct, do not update.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Selections are not similar.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Removes the DOM selection.\n\t *\n\t * @private\n\t */\n\t_removeDomSelection() {\n\t\tfor ( const doc of this.domDocuments ) {\n\t\t\tconst domSelection = doc.getSelection();\n\n\t\t\tif ( domSelection.rangeCount ) {\n\t\t\t\tconst activeDomElement = doc.activeElement;\n\t\t\t\tconst viewElement = this.domConverter.mapDomToView( activeDomElement );\n\n\t\t\t\tif ( activeDomElement && viewElement ) {\n\t\t\t\t\tdoc.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes the fake selection.\n\t *\n\t * @private\n\t */\n\t_removeFakeSelection() {\n\t\tconst container = this._fakeSelectionContainer;\n\n\t\tif ( container ) {\n\t\t\tcontainer.remove();\n\t\t}\n\t}\n\n\t/**\n\t * Checks if focus needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t */\n\t_updateFocus() {\n\t\tif ( this.isFocused ) {\n\t\t\tconst editable = this.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t}\n\t\t}\n\t}\n}\n\nmix( Renderer, ObservableMixin );\n\n// Checks if provided element is editable.\n//\n// @private\n// @param {module:engine/view/element~Element} element\n// @returns {Boolean}\nfunction isEditable( element ) {\n\tif ( element.getAttribute( 'contenteditable' ) == 'false' ) {\n\t\treturn false;\n\t}\n\n\tconst parent = element.findAncestor( element => element.hasAttribute( 'contenteditable' ) );\n\n\treturn !parent || parent.getAttribute( 'contenteditable' ) == 'true';\n}\n\n// Adds inline filler at a given position.\n//\n// The position can be given as an array of DOM nodes and an offset in that array,\n// or a DOM parent element and an offset in that element.\n//\n// @private\n// @param {Document} domDocument\n// @param {Element|Array.<Node>} domParentOrArray\n// @param {Number} offset\n// @returns {Text} The DOM text node that contains an inline filler.\nfunction addInlineFiller( domDocument, domParentOrArray, offset ) {\n\tconst childNodes = domParentOrArray instanceof Array ? domParentOrArray : domParentOrArray.childNodes;\n\tconst nodeAfterFiller = childNodes[ offset ];\n\n\tif ( isText( nodeAfterFiller ) ) {\n\t\tnodeAfterFiller.data = INLINE_FILLER + nodeAfterFiller.data;\n\n\t\treturn nodeAfterFiller;\n\t} else {\n\t\tconst fillerNode = domDocument.createTextNode( INLINE_FILLER );\n\n\t\tif ( Array.isArray( domParentOrArray ) ) {\n\t\t\tchildNodes.splice( offset, 0, fillerNode );\n\t\t} else {\n\t\t\tinsertAt( domParentOrArray, offset, fillerNode );\n\t\t}\n\n\t\treturn fillerNode;\n\t}\n}\n\n// Whether two DOM nodes should be considered as similar.\n// Nodes are considered similar if they have the same tag name.\n//\n// @private\n// @param {Node} node1\n// @param {Node} node2\n// @returns {Boolean}\nfunction areSimilar( node1, node2 ) {\n\treturn isNode( node1 ) && isNode( node2 ) &&\n\t\t!isText( node1 ) && !isText( node2 ) &&\n\t\tnode1.tagName.toLowerCase() === node2.tagName.toLowerCase();\n}\n\n// Whether two dom nodes should be considered as the same.\n// Two nodes which are considered the same are:\n//\n//\t\t* Text nodes with the same text.\n//\t\t* Element nodes represented by the same object.\n//\t\t* Two block filler elements.\n//\n// @private\n// @param {Function} blockFiller Block filler creator function, see {@link module:engine/view/domconverter~DomConverter#blockFiller}.\n// @param {Node} node1\n// @param {Node} node2\n// @returns {Boolean}\nfunction sameNodes( blockFiller, actualDomChild, expectedDomChild ) {\n\t// Elements.\n\tif ( actualDomChild === expectedDomChild ) {\n\t\treturn true;\n\t}\n\t// Texts.\n\telse if ( isText( actualDomChild ) && isText( expectedDomChild ) ) {\n\t\treturn actualDomChild.data === expectedDomChild.data;\n\t}\n\t// Block fillers.\n\telse if ( isBlockFiller( actualDomChild, blockFiller ) &&\n\t\tisBlockFiller( expectedDomChild, blockFiller ) ) {\n\t\treturn true;\n\t}\n\n\t// Not matching types.\n\treturn false;\n}\n\n// The following is a Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n// When the native DOM selection is at the end of the block and preceded by <br /> e.g.\n//\n//\t\t<p>foo<br/>[]</p>\n//\n// which happens a lot when using the soft line break, the browser fails to (visually) move the\n// caret to the new line. A quick fix is as simple as force–refreshing the selection with the same range.\nfunction fixGeckoSelectionAfterBr( focus, domSelection ) {\n\tconst parent = focus.parent;\n\n\t// This fix works only when the focus point is at the very end of an element.\n\t// There is no point in running it in cases unrelated to the browser bug.\n\tif ( parent.nodeType != Node.ELEMENT_NODE || focus.offset != parent.childNodes.length - 1 ) {\n\t\treturn;\n\t}\n\n\tconst childAtOffset = parent.childNodes[ focus.offset ];\n\n\t// To stay on the safe side, the fix being as specific as possible, it targets only the\n\t// selection which is at the very end of the element and preceded by <br />.\n\tif ( childAtOffset && childAtOffset.tagName == 'BR' ) {\n\t\tdomSelection.addRange( domSelection.getRangeAt( 0 ) );\n\t}\n}\n\nfunction filterOutFakeSelectionContainer( domChildList, fakeSelectionContainer ) {\n\tconst childList = Array.from( domChildList );\n\n\tif ( childList.length == 0 || !fakeSelectionContainer ) {\n\t\treturn childList;\n\t}\n\n\tconst last = childList[ childList.length - 1 ];\n\n\tif ( last == fakeSelectionContainer ) {\n\t\tchildList.pop();\n\t}\n\n\treturn childList;\n}\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * This method is like `_.isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * _.isEqualWith(array, other, customizer);\n * // => true\n */\nfunction isEqualWith(value, other, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  var result = customizer ? customizer(value, other) : undefined;\n  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n}\n\nexport default isEqualWith;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/mutationobserver\n */\n\n/* globals window */\n\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { startsWithFiller, getDataWithoutFiller } from '../filler';\nimport { isEqualWith } from 'lodash-es';\n\n/**\n * Mutation observer class observes changes in the DOM, fires {@link module:engine/view/document~Document#event:mutations} event, mark view\n * elements as changed and call {@link module:engine/view/renderer~Renderer#render}.\n * Because all mutated nodes are marked as \"to be rendered\" and the\n * {@link module:engine/view/renderer~Renderer#render} is called, all changes will be reverted, unless the mutation will be handled by the\n * {@link module:engine/view/document~Document#event:mutations} event listener. It means user will see only handled changes, and the editor\n * will block all changes which are not handled.\n *\n * Mutation Observer also take care of reducing number of mutations which are fired. It removes duplicates and\n * mutations on elements which do not have corresponding view elements. Also\n * {@link module:engine/view/observer/mutationobserver~MutatedText text mutation} is fired only if parent element do not change child list.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class MutationObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Native mutation observer config.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._config = {\n\t\t\tchildList: true,\n\t\t\tcharacterData: true,\n\t\t\tcharacterDataOldValue: true,\n\t\t\tsubtree: true\n\t\t};\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#domConverter}.\n\t\t *\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = view.domConverter;\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#_renderer}.\n\t\t *\n\t\t * @member {module:engine/view/renderer~Renderer}\n\t\t */\n\t\tthis.renderer = view._renderer;\n\n\t\t/**\n\t\t * Observed DOM elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<HTMLElement>}\n\t\t */\n\t\tthis._domElements = [];\n\n\t\t/**\n\t\t * Native mutation observer.\n\t\t *\n\t\t * @private\n\t\t * @member {MutationObserver}\n\t\t */\n\t\tthis._mutationObserver = new window.MutationObserver( this._onMutations.bind( this ) );\n\t}\n\n\t/**\n\t * Synchronously fires {@link module:engine/view/document~Document#event:mutations} event with all mutations in record queue.\n\t * At the same time empties the queue so mutations will not be fired twice.\n\t */\n\tflush() {\n\t\tthis._onMutations( this._mutationObserver.takeRecords() );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tthis._domElements.push( domElement );\n\n\t\tif ( this.isEnabled ) {\n\t\t\tthis._mutationObserver.observe( domElement, this._config );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tenable() {\n\t\tsuper.enable();\n\n\t\tfor ( const domElement of this._domElements ) {\n\t\t\tthis._mutationObserver.observe( domElement, this._config );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisable() {\n\t\tsuper.disable();\n\n\t\tthis._mutationObserver.disconnect();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._mutationObserver.disconnect();\n\t}\n\n\t/**\n\t * Handles mutations. Deduplicates, mark view elements to sync, fire event and call render.\n\t *\n\t * @private\n\t * @param {Array.<Object>} domMutations Array of native mutations.\n\t */\n\t_onMutations( domMutations ) {\n\t\t// As a result of this.flush() we can have an empty collection.\n\t\tif ( domMutations.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domConverter = this.domConverter;\n\n\t\t// Use map and set for deduplication.\n\t\tconst mutatedTexts = new Map();\n\t\tconst mutatedElements = new Set();\n\n\t\t// Handle `childList` mutations first, so we will be able to check if the `characterData` mutation is in the\n\t\t// element with changed structure anyway.\n\t\tfor ( const mutation of domMutations ) {\n\t\t\tif ( mutation.type === 'childList' ) {\n\t\t\t\tconst element = domConverter.mapDomToView( mutation.target );\n\n\t\t\t\t// Do not collect mutations from UIElements.\n\t\t\t\tif ( element && element.is( 'uiElement' ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( element && !this._isBogusBrMutation( mutation ) ) {\n\t\t\t\t\tmutatedElements.add( element );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle `characterData` mutations later, when we have the full list of nodes which changed structure.\n\t\tfor ( const mutation of domMutations ) {\n\t\t\tconst element = domConverter.mapDomToView( mutation.target );\n\n\t\t\t// Do not collect mutations from UIElements.\n\t\t\tif ( element && element.is( 'uiElement' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( mutation.type === 'characterData' ) {\n\t\t\t\tconst text = domConverter.findCorrespondingViewText( mutation.target );\n\n\t\t\t\tif ( text && !mutatedElements.has( text.parent ) ) {\n\t\t\t\t\t// Use text as a key, for deduplication. If there will be another mutation on the same text element\n\t\t\t\t\t// we will have only one in the map.\n\t\t\t\t\tmutatedTexts.set( text, {\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\toldText: text.data,\n\t\t\t\t\t\tnewText: getDataWithoutFiller( mutation.target ),\n\t\t\t\t\t\tnode: text\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\t// When we added first letter to the text node which had only inline filler, for the DOM it is mutation\n\t\t\t\t// on text, but for the view, where filler text node did not existed, new text node was created, so we\n\t\t\t\t// need to fire 'children' mutation instead of 'text'.\n\t\t\t\telse if ( !text && startsWithFiller( mutation.target ) ) {\n\t\t\t\t\tmutatedElements.add( domConverter.mapDomToView( mutation.target.parentNode ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Now we build the list of mutations to fire and mark elements. We did not do it earlier to avoid marking the\n\t\t// same node multiple times in case of duplication.\n\n\t\t// List of mutations we will fire.\n\t\tconst viewMutations = [];\n\n\t\tfor ( const mutatedText of mutatedTexts.values() ) {\n\t\t\tthis.renderer.markToSync( 'text', mutatedText.node );\n\t\t\tviewMutations.push( mutatedText );\n\t\t}\n\n\t\tfor ( const viewElement of mutatedElements ) {\n\t\t\tconst domElement = domConverter.mapViewToDom( viewElement );\n\t\t\tconst viewChildren = Array.from( viewElement.getChildren() );\n\t\t\tconst newViewChildren = Array.from( domConverter.domChildrenToView( domElement, { withChildren: false } ) );\n\n\t\t\t// It may happen that as a result of many changes (sth was inserted and then removed),\n\t\t\t// both elements haven't really changed. #1031\n\t\t\tif ( !isEqualWith( viewChildren, newViewChildren, sameNodes ) ) {\n\t\t\t\tthis.renderer.markToSync( 'children', viewElement );\n\n\t\t\t\tviewMutations.push( {\n\t\t\t\t\ttype: 'children',\n\t\t\t\t\toldChildren: viewChildren,\n\t\t\t\t\tnewChildren: newViewChildren,\n\t\t\t\t\tnode: viewElement\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve `domSelection` using `ownerDocument` of one of mutated nodes.\n\t\t// There should not be simultaneous mutation in multiple documents, so it's fine.\n\t\tconst domSelection = domMutations[ 0 ].target.ownerDocument.getSelection();\n\n\t\tlet viewSelection = null;\n\n\t\tif ( domSelection && domSelection.anchorNode ) {\n\t\t\t// If `domSelection` is inside a dom node that is already bound to a view node from view tree, get\n\t\t\t// corresponding selection in the view and pass it together with `viewMutations`. The `viewSelection` may\n\t\t\t// be used by features handling mutations.\n\t\t\t// Only one range is supported.\n\n\t\t\tconst viewSelectionAnchor = domConverter.domPositionToView( domSelection.anchorNode, domSelection.anchorOffset );\n\t\t\tconst viewSelectionFocus = domConverter.domPositionToView( domSelection.focusNode, domSelection.focusOffset );\n\n\t\t\t// Anchor and focus has to be properly mapped to view.\n\t\t\tif ( viewSelectionAnchor && viewSelectionFocus ) {\n\t\t\t\tviewSelection = new ViewSelection( viewSelectionAnchor );\n\t\t\t\tviewSelection.setFocus( viewSelectionFocus );\n\t\t\t}\n\t\t}\n\n\t\tthis.document.fire( 'mutations', viewMutations, viewSelection );\n\n\t\t// If nothing changes on `mutations` event, at this point we have \"dirty DOM\" (changed) and de-synched\n\t\t// view (which has not been changed). In order to \"reset DOM\" we render the view again.\n\t\tthis.view.forceRender();\n\n\t\tfunction sameNodes( child1, child2 ) {\n\t\t\t// First level of comparison (array of children vs array of children) – use the Lodash's default behavior.\n\t\t\tif ( Array.isArray( child1 ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Elements.\n\t\t\tif ( child1 === child2 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// Texts.\n\t\t\telse if ( child1.is( 'text' ) && child2.is( 'text' ) ) {\n\t\t\t\treturn child1.data === child2.data;\n\t\t\t}\n\n\t\t\t// Not matching types.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if mutation was generated by the browser inserting bogus br on the end of the block element.\n\t * Such mutations are generated while pressing space or performing native spellchecker correction\n\t * on the end of the block element in Firefox browser.\n\t *\n\t * @private\n\t * @param {Object} mutation Native mutation object.\n\t * @returns {Boolean}\n\t */\n\t_isBogusBrMutation( mutation ) {\n\t\tlet addedNode = null;\n\n\t\t// Check if mutation added only one node on the end of its parent.\n\t\tif ( mutation.nextSibling === null && mutation.removedNodes.length === 0 && mutation.addedNodes.length == 1 ) {\n\t\t\taddedNode = this.domConverter.domToView( mutation.addedNodes[ 0 ], {\n\t\t\t\twithChildren: false\n\t\t\t} );\n\t\t}\n\n\t\treturn addedNode && addedNode.is( 'element', 'br' );\n\t}\n}\n\n/**\n * Fired when mutation occurred. If tree view is not changed on this event, DOM will be reverted to the state before\n * mutation, so all changes which should be applied, should be handled on this event.\n *\n * Introduced by {@link module:engine/view/observer/mutationobserver~MutationObserver}.\n *\n * Note that because {@link module:engine/view/observer/mutationobserver~MutationObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @event module:engine/view/document~Document#event:mutations\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|module:engine/view/observer/mutationobserver~MutatedChildren>}\n * viewMutations Array of mutations.\n * For mutated texts it will be {@link module:engine/view/observer/mutationobserver~MutatedText} and for mutated elements it will be\n * {@link module:engine/view/observer/mutationobserver~MutatedChildren}. You can recognize the type based on the `type` property.\n * @param {module:engine/view/selection~Selection|null} viewSelection View selection that is a result of converting DOM selection to view.\n * Keep in\n * mind that the DOM selection is already \"updated\", meaning that it already acknowledges changes done in mutation.\n */\n\n/**\n * Mutation item for text.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedText\n *\n * @property {String} type For text mutations it is always 'text'.\n * @property {module:engine/view/text~Text} node Mutated text node.\n * @property {String} oldText Old text.\n * @property {String} newText New text.\n */\n\n/**\n * Mutation item for child nodes.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedText\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @property {String} type For child nodes mutations it is always 'children'.\n * @property {module:engine/view/element~Element} node Parent of the mutated children.\n * @property {Array.<module:engine/view/node~Node>} oldChildren Old child nodes.\n * @property {Array.<module:engine/view/node~Node>} newChildren New child nodes.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/keyobserver\n */\n\nimport DomEventObserver from './domeventobserver';\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Observer for events connected with pressing keyboard keys.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class KeyObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'keydown', 'keyup' ];\n\t}\n\n\tonDomEvent( domEvt ) {\n\t\tthis.fire( domEvt.type, domEvt, {\n\t\t\tkeyCode: domEvt.keyCode,\n\n\t\t\taltKey: domEvt.altKey,\n\t\t\tctrlKey: domEvt.ctrlKey || domEvt.metaKey,\n\t\t\tshiftKey: domEvt.shiftKey,\n\n\t\t\tget keystroke() {\n\t\t\t\treturn getCode( this );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Fired when a key has been pressed.\n *\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\n *\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/keyobserver~KeyObserver\n * @event module:engine/view/document~Document#event:keydown\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\n */\n\n/**\n * Fired when a key has been released.\n *\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\n *\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/keyobserver~KeyObserver\n * @event module:engine/view/document~Document#event:keyup\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\n */\n\n/**\n * The value of both events - {@link module:engine/view/document~Document#event:keydown} and\n * {@link module:engine/view/document~Document#event:keyup}.\n *\n * @class module:engine/view/observer/keyobserver~KeyEventData\n * @extends module:engine/view/observer/domeventdata~DomEventData\n * @implements module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * Code of the whole keystroke. See {@link module:utils/keyboard~getCode}.\n *\n * @readonly\n * @member {Number} module:engine/view/observer/keyobserver~KeyEventData#keystroke\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/fakeselectionobserver\n */\n\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport { debounce } from 'lodash-es';\n\n/**\n * Fake selection observer class. If view selection is fake it is placed in dummy DOM container. This observer listens\n * on {@link module:engine/view/document~Document#event:keydown keydown} events and handles moving fake view selection to the correct place\n * if arrow keys are pressed.\n * Fires {@link module:engine/view/document~Document#event:selectionChange selectionChange event} simulating natural behaviour of\n * {@link module:engine/view/observer/selectionobserver~SelectionObserver SelectionObserver}.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class FakeSelectionObserver extends Observer {\n\t/**\n\t * Creates new FakeSelectionObserver instance.\n\t *\n\t * @param {module:engine/view/view~View} view\n\t */\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n\t\t *\n\t\t * @private\n\t\t * @param {Object} data Selection change data.\n\t\t * @method #_fireSelectionChangeDoneDebounced\n\t\t */\n\t\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'keydown', ( eventInfo, data ) => {\n\t\t\tconst selection = document.selection;\n\n\t\t\tif ( selection.isFake && _isArrowKeyCode( data.keyCode ) && this.isEnabled ) {\n\t\t\t\t// Prevents default key down handling - no selection change will occur.\n\t\t\t\tdata.preventDefault();\n\n\t\t\t\tthis._handleSelectionMove( data.keyCode );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._fireSelectionChangeDoneDebounced.cancel();\n\t}\n\n\t/**\n\t * Handles collapsing view selection according to given key code. If left or up key is provided - new selection will be\n\t * collapsed to left. If right or down key is pressed - new selection will be collapsed to right.\n\t *\n\t * This method fires {@link module:engine/view/document~Document#event:selectionChange} and\n\t * {@link module:engine/view/document~Document#event:selectionChangeDone} events imitating behaviour of\n\t * {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n\t *\n\t * @private\n\t * @param {Number} keyCode\n\t * @fires module:engine/view/document~Document#event:selectionChange\n\t * @fires module:engine/view/document~Document#event:selectionChangeDone\n\t */\n\t_handleSelectionMove( keyCode ) {\n\t\tconst selection = this.document.selection;\n\t\tconst newSelection = new ViewSelection( selection.getRanges(), { backward: selection.isBackward, fake: false } );\n\n\t\t// Left or up arrow pressed - move selection to start.\n\t\tif ( keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup ) {\n\t\t\tnewSelection.setTo( newSelection.getFirstPosition() );\n\t\t}\n\n\t\t// Right or down arrow pressed - move selection to end.\n\t\tif ( keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowdown ) {\n\t\t\tnewSelection.setTo( newSelection.getLastPosition() );\n\t\t}\n\n\t\tconst data = {\n\t\t\toldSelection: selection,\n\t\t\tnewSelection,\n\t\t\tdomSelection: null\n\t\t};\n\n\t\t// Fire dummy selection change event.\n\t\tthis.document.fire( 'selectionChange', data );\n\n\t\t// Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n\t\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\n\t\t// defined int the function time will elapse since the last time the function was called.\n\t\t// So `selectionChangeDone` will be fired when selection will stop changing.\n\t\tthis._fireSelectionChangeDoneDebounced( data );\n\t}\n}\n\n// Checks if one of the arrow keys is pressed.\n//\n// @private\n// @param {Number} keyCode\n// @returns {Boolean}\nfunction _isArrowKeyCode( keyCode ) {\n\treturn keyCode == keyCodes.arrowright ||\n\t\tkeyCode == keyCodes.arrowleft ||\n\t\tkeyCode == keyCodes.arrowup ||\n\t\tkeyCode == keyCodes.arrowdown;\n}\n\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/selectionobserver\n */\n\n/* global setInterval, clearInterval */\n\nimport Observer from './observer';\nimport MutationObserver from './mutationobserver';\nimport { debounce } from 'lodash-es';\n\n/**\n * Selection observer class observes selection changes in the document. If selection changes on the document this\n * observer checks if there are any mutations and if DOM selection is different than the\n * {@link module:engine/view/document~Document#selection view selection}. Selection observer fires\n * {@link module:engine/view/document~Document#event:selectionChange} event only if selection change was the only change in the document\n * and DOM selection is different then the view selection.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class SelectionObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Instance of the mutation observer. Selection observer calls\n\t\t * {@link module:engine/view/observer/mutationobserver~MutationObserver#flush} to ensure that the mutations will be handled\n\t\t * before the {@link module:engine/view/document~Document#event:selectionChange} event is fired.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/observer/mutationobserver~MutationObserver}\n\t\t * module:engine/view/observer/selectionobserver~SelectionObserver#mutationObserver\n\t\t */\n\t\tthis.mutationObserver = view.getObserver( MutationObserver );\n\n\t\t/**\n\t\t * Reference to the view {@link module:engine/view/documentselection~DocumentSelection} object used to compare\n\t\t * new selection with it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection}\n\t\t * module:engine/view/observer/selectionobserver~SelectionObserver#selection\n\t\t */\n\t\tthis.selection = this.document.selection;\n\n\t\t/* eslint-disable max-len */\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#domConverter}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter} module:engine/view/observer/selectionobserver~SelectionObserver#domConverter\n\t\t */\n\t\t/* eslint-enable max-len */\n\t\tthis.domConverter = view.domConverter;\n\n\t\t/**\n\t\t * Set of documents which have added \"selectionchange\" listener to avoid adding listener twice to the same\n\t\t * document.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakSet.<Document>} module:engine/view/observer/selectionobserver~SelectionObserver#_documents\n\t\t */\n\t\tthis._documents = new WeakSet();\n\n\t\t/**\n\t\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n\t\t *\n\t\t * @private\n\t\t * @param {Object} data Selection change data.\n\t\t * @method #_fireSelectionChangeDoneDebounced\n\t\t */\n\t\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\n\n\t\tthis._clearInfiniteLoopInterval = setInterval( () => this._clearInfiniteLoop(), 1000 );\n\n\t\t/**\n\t\t * Private property to check if the code does not enter infinite loop.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} module:engine/view/observer/selectionobserver~SelectionObserver#_loopbackCounter\n\t\t */\n\t\tthis._loopbackCounter = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tconst domDocument = domElement.ownerDocument;\n\n\t\t// Add listener once per each document.\n\t\tif ( this._documents.has( domDocument ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.listenTo( domDocument, 'selectionchange', () => {\n\t\t\tthis._handleSelectionChange( domDocument );\n\t\t} );\n\n\t\tthis._documents.add( domDocument );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tclearInterval( this._clearInfiniteLoopInterval );\n\t\tthis._fireSelectionChangeDoneDebounced.cancel();\n\t}\n\n\t/**\n\t * Selection change listener. {@link module:engine/view/observer/mutationobserver~MutationObserver#flush Flush} mutations, check if\n\t * selection changes and fires {@link module:engine/view/document~Document#event:selectionChange} event on every change\n\t * and {@link module:engine/view/document~Document#event:selectionChangeDone} when selection stop changing.\n\t *\n\t * @private\n\t * @param {Document} domDocument DOM document.\n\t */\n\t_handleSelectionChange( domDocument ) {\n\t\t// Selection is handled when document is not focused but is read-only. This is because in read-only\n\t\t// mode contenteditable is set as false and editor won't receive focus but we still need to know\n\t\t// selection position.\n\t\tif ( !this.isEnabled || ( !this.document.isFocused && !this.document.isReadOnly ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure the mutation event will be before selection event on all browsers.\n\t\tthis.mutationObserver.flush();\n\n\t\t// If there were mutations then the view will be re-rendered by the mutation observer and selection\n\t\t// will be updated, so selections will equal and event will not be fired, as expected.\n\t\tconst domSelection = domDocument.defaultView.getSelection();\n\t\tconst newViewSelection = this.domConverter.domSelectionToView( domSelection );\n\n\t\tif ( this.selection.isEqual( newViewSelection ) && this.domConverter.isDomSelectionCorrect( domSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure we are not in the infinite loop (#400).\n\t\t// This counter is reset each second. 60 selection changes in 1 second is enough high number\n\t\t// to be very difficult (impossible) to achieve using just keyboard keys (during normal editor use).\n\t\tif ( ++this._loopbackCounter > 60 ) {\n\t\t\t// Selection change observer detected an infinite rendering loop.\n\t\t\t// Most probably you try to put the selection in the position which is not allowed\n\t\t\t// by the browser and browser fixes it automatically what causes `selectionchange` event on\n\t\t\t// which a loopback through a model tries to re-render the wrong selection and again.\n\t\t\t//\n\t\t\t// @if CK_DEBUG // console.warn( 'Selection change observer detected an infinite rendering loop.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.selection.isSimilar( newViewSelection ) ) {\n\t\t\t// If selection was equal and we are at this point of algorithm, it means that it was incorrect.\n\t\t\t// Just re-render it, no need to fire any events, etc.\n\t\t\tthis.view.forceRender();\n\t\t} else {\n\t\t\tconst data = {\n\t\t\t\toldSelection: this.selection,\n\t\t\t\tnewSelection: newViewSelection,\n\t\t\t\tdomSelection\n\t\t\t};\n\n\t\t\t// Prepare data for new selection and fire appropriate events.\n\t\t\tthis.document.fire( 'selectionChange', data );\n\n\t\t\t// Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n\t\t\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\n\t\t\t// defined int the function time will elapse since the last time the function was called.\n\t\t\t// So `selectionChangeDone` will be fired when selection will stop changing.\n\t\t\tthis._fireSelectionChangeDoneDebounced( data );\n\t\t}\n\t}\n\n\t/**\n\t * Clears `SelectionObserver` internal properties connected with preventing infinite loop.\n\t *\n\t * @protected\n\t */\n\t_clearInfiniteLoop() {\n\t\tthis._loopbackCounter = 0;\n\t}\n}\n\n/**\n * Fired when selection has changed. This event is fired only when the selection change was the only change that happened\n * in the document, and old selection is different then the new selection.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChange\n * @param {Object} data\n * @param {module:engine/view/documentselection~DocumentSelection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n\n/**\n * Fired when selection stops changing.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChangeDone\n * @param {Object} data\n * @param {module:engine/view/documentselection~DocumentSelection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/focusobserver\n */\n\n/* globals setTimeout, clearTimeout */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:focus Focus}\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class FocusObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'focus', 'blur' ];\n\t\tthis.useCapture = true;\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'focus', () => {\n\t\t\tdocument.isFocused = true;\n\n\t\t\t// Unfortunately native `selectionchange` event is fired asynchronously.\n\t\t\t// We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\n\t\t\t// overwrite new DOM selection with selection from the view.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\n\t\t\t// Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\n\t\t\tthis._renderTimeoutId = setTimeout( () => view.forceRender(), 50 );\n\t\t} );\n\n\t\tdocument.on( 'blur', ( evt, data ) => {\n\t\t\tconst selectedEditable = document.selection.editableElement;\n\n\t\t\tif ( selectedEditable === null || selectedEditable === data.target ) {\n\t\t\t\tdocument.isFocused = false;\n\n\t\t\t\t// Re-render the document to update view elements.\n\t\t\t\tview.forceRender();\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Identifier of the timeout currently used by focus listener to delay rendering execution.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} #_renderTimeoutId\n\t\t */\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tif ( this._renderTimeoutId ) {\n\t\t\tclearTimeout( this._renderTimeoutId );\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n}\n\n/**\n * Fired when one of the editables gets focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:focus\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when one of the editables loses focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:blur\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/compositionobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:compositionstart Compositionstart},\n * {@link module:engine/view/document~Document#event:compositionupdate compositionupdate} and\n * {@link module:engine/view/document~Document#event:compositionend compositionend} events observer.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class CompositionObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'compositionstart', 'compositionupdate', 'compositionend' ];\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'compositionstart', () => {\n\t\t\tdocument.isComposing = true;\n\t\t} );\n\n\t\tdocument.on( 'compositionend', () => {\n\t\t\tdocument.isComposing = false;\n\t\t} );\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when composition starts inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionstart\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when composition is updated inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionupdate\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when composition ends inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionend\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/inputobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * Observer for events connected with data input.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class InputObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'beforeinput' ];\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired before browser inputs (or deletes) some data.\n *\n * This event is available only on browsers which support DOM `beforeinput` event.\n *\n * Introduced by {@link module:engine/view/observer/inputobserver~InputObserver}.\n *\n * Note that because {@link module:engine/view/observer/inputobserver~InputObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/inputobserver~InputObserver\n * @event module:engine/view/document~Document#event:beforeinput\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/scroll\n */\n\nimport isRange from './isrange';\nimport Rect from './rect';\nimport isText from './istext';\n\nconst utils = {};\n\n/**\n * Makes any page `HTMLElement` or `Range` (`target`) visible inside the browser viewport.\n * This helper will scroll all `target` ancestors and the web browser viewport to reveal the target to\n * the user. If the `target` is already visible, nothing will happen.\n *\n * @param {HTMLElement|Range} options.target A target, which supposed to become visible to the user.\n * @param {Number} [options.viewportOffset] An offset from the edge of the viewport (in pixels)\n * the `target` will be moved by when the viewport is scrolled. It enhances the user experience\n * by keeping the `target` some distance from the edge of the viewport and thus making it easier to\n * read or edit by the user.\n */\nexport function scrollViewportToShowTarget( { target, viewportOffset = 0 } ) {\n\tconst targetWindow = getWindow( target );\n\tlet currentWindow = targetWindow;\n\tlet currentFrame = null;\n\n\t// Iterate over all windows, starting from target's parent window up to window#top.\n\twhile ( currentWindow ) {\n\t\tlet firstAncestorToScroll;\n\n\t\t// Let's scroll target's ancestors first to reveal it. Then, once the ancestor scrolls\n\t\t// settled down, the algorithm can eventually scroll the viewport of the current window.\n\t\t//\n\t\t// Note: If the current window is target's **original** window (e.g. the first one),\n\t\t// start scrolling the closest parent of the target. If not, scroll the closest parent\n\t\t// of an iframe that resides in the current window.\n\t\tif ( currentWindow == targetWindow ) {\n\t\t\tfirstAncestorToScroll = getParentElement( target );\n\t\t} else {\n\t\t\tfirstAncestorToScroll = getParentElement( currentFrame );\n\t\t}\n\n\t\t// Scroll the target's ancestors first. Once done, scrolling the viewport is easy.\n\t\tscrollAncestorsToShowRect( firstAncestorToScroll, () => {\n\t\t\t// Note: If the target does not belong to the current window **directly**,\n\t\t\t// i.e. it resides in an iframe belonging to the window, obtain the target's rect\n\t\t\t// in the coordinates of the current window. By default, a Rect returns geometry\n\t\t\t// relative to the current window's viewport. To make it work in a parent window,\n\t\t\t// it must be shifted.\n\t\t\treturn getRectRelativeToWindow( target, currentWindow );\n\t\t} );\n\n\t\t// Obtain the rect of the target after it has been scrolled within its ancestors.\n\t\t// It's time to scroll the viewport.\n\t\tconst targetRect = getRectRelativeToWindow( target, currentWindow );\n\n\t\tscrollWindowToShowRect( currentWindow, targetRect, viewportOffset );\n\n\t\tif ( currentWindow.parent != currentWindow ) {\n\t\t\t// Keep the reference to the <iframe> element the \"previous current window\" was\n\t\t\t// rendered within. It will be useful to re–calculate the rect of the target\n\t\t\t// in the parent window's relative geometry. The target's rect must be shifted\n\t\t\t// by it's iframe's position.\n\t\t\tcurrentFrame = currentWindow.frameElement;\n\t\t\tcurrentWindow = currentWindow.parent;\n\n\t\t\t// If the current window has some parent but frameElement is inaccessible, then they have\n\t\t\t// different domains/ports and, due to security reasons, accessing and scrolling\n\t\t\t// the parent window won't be possible.\n\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/930.\n\t\t\tif ( !currentFrame ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentWindow = null;\n\t\t}\n\t}\n}\n\n/**\n * Makes any page `HTMLElement` or `Range` (target) visible within its scrollable ancestors,\n * e.g. if they have `overflow: scroll` CSS style.\n *\n * @param {HTMLElement|Range} target A target, which supposed to become visible to the user.\n */\nexport function scrollAncestorsToShowTarget( target ) {\n\tconst targetParent = getParentElement( target );\n\n\tscrollAncestorsToShowRect( targetParent, () => {\n\t\treturn new Rect( target );\n\t} );\n}\n\n// TODO: Using a property value shorthand in the top of the file\n// causes JSDoc to throw errors. See https://github.com/cksource/docs-builder/issues/75.\nObject.assign( utils, {\n\tscrollViewportToShowTarget,\n\tscrollAncestorsToShowTarget\n} );\n\n// Makes a given rect visible within its parent window.\n//\n// Note: Avoid the situation where the caret is still in the viewport, but totally\n// at the edge of it. In such situation, if it moved beyond the viewport in the next\n// action e.g. after paste, the scrolling would move it to the viewportOffset level\n// and it all would look like the caret visually moved up/down:\n//\n// 1.\n//\t\t| foo[]\n//\t\t|                                    <--- N px of space below the caret\n//\t\t+---------------------------------...\n//\n// 2. *paste*\n// 3.\n//\t\t|\n//\t\t|\n//\t\t+-foo-----------------------------...\n//\t\t  bar[]                              <--- caret below viewport, scrolling...\n//\n// 4. *scrolling*\n// 5.\n//\t\t|\n//\t\t| foo\n//\t\t| bar[]                              <--- caret precisely at the edge\n//\t\t+---------------------------------...\n//\n// To prevent this, this method checks the rects moved by the viewportOffset to cover\n// the upper/lower edge of the viewport. It makes sure if the action repeats, there's\n// no twitching – it's a purely visual improvement:\n//\n// 5. (after fix)\n//\t\t|\n//\t\t| foo\n//\t\t| bar[]\n//\t\t|                                    <--- N px of space below the caret\n//\t\t+---------------------------------...\n//\n// @private\n// @param {Window} window A window which is scrolled to reveal the rect.\n// @param {module:utils/dom/rect~Rect} rect A rect which is to be revealed.\n// @param {Number} viewportOffset See scrollViewportToShowTarget.\nfunction scrollWindowToShowRect( window, rect, viewportOffset ) {\n\tconst targetShiftedDownRect = rect.clone().moveBy( 0, viewportOffset );\n\tconst targetShiftedUpRect = rect.clone().moveBy( 0, -viewportOffset );\n\tconst viewportRect = new Rect( window ).excludeScrollbarsAndBorders();\n\n\tconst rects = [ targetShiftedUpRect, targetShiftedDownRect ];\n\n\tif ( !rects.every( rect => viewportRect.contains( rect ) ) ) {\n\t\tlet { scrollX, scrollY } = window;\n\n\t\tif ( isAbove( targetShiftedUpRect, viewportRect ) ) {\n\t\t\tscrollY -= viewportRect.top - rect.top + viewportOffset;\n\t\t} else if ( isBelow( targetShiftedDownRect, viewportRect ) ) {\n\t\t\tscrollY += rect.bottom - viewportRect.bottom + viewportOffset;\n\t\t}\n\n\t\t// TODO: Web browsers scroll natively to place the target in the middle\n\t\t// of the viewport. It's not a very popular case, though.\n\t\tif ( isLeftOf( rect, viewportRect ) ) {\n\t\t\tscrollX -= viewportRect.left - rect.left + viewportOffset;\n\t\t} else if ( isRightOf( rect, viewportRect ) ) {\n\t\t\tscrollX += rect.right - viewportRect.right + viewportOffset;\n\t\t}\n\n\t\twindow.scrollTo( scrollX, scrollY );\n\t}\n}\n\n// Recursively scrolls element ancestors to visually reveal a rect.\n//\n// @private\n// @param {HTMLElement} A parent The first ancestors to start scrolling.\n// @param {Function} getRect A function which returns the Rect, which is to be revealed.\nfunction scrollAncestorsToShowRect( parent, getRect ) {\n\tconst parentWindow = getWindow( parent );\n\tlet parentRect, targetRect;\n\n\twhile ( parent != parentWindow.document.body ) {\n\t\ttargetRect = getRect();\n\t\tparentRect = new Rect( parent ).excludeScrollbarsAndBorders();\n\n\t\tif ( !parentRect.contains( targetRect ) ) {\n\t\t\tif ( isAbove( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollTop -= parentRect.top - targetRect.top;\n\t\t\t} else if ( isBelow( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollTop += targetRect.bottom - parentRect.bottom;\n\t\t\t}\n\n\t\t\tif ( isLeftOf( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollLeft -= parentRect.left - targetRect.left;\n\t\t\t} else if ( isRightOf( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollLeft += targetRect.right - parentRect.right;\n\t\t\t}\n\t\t}\n\n\t\tparent = parent.parentNode;\n\t}\n}\n\n// Determines if a given `Rect` extends beyond the bottom edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isBelow( firstRect, secondRect ) {\n\treturn firstRect.bottom > secondRect.bottom;\n}\n\n// Determines if a given `Rect` extends beyond the top edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isAbove( firstRect, secondRect ) {\n\treturn firstRect.top < secondRect.top;\n}\n\n// Determines if a given `Rect` extends beyond the left edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isLeftOf( firstRect, secondRect ) {\n\treturn firstRect.left < secondRect.left;\n}\n\n// Determines if a given `Rect` extends beyond the right edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isRightOf( firstRect, secondRect ) {\n\treturn firstRect.right > secondRect.right;\n}\n\n// Returns the closest window of an element or range.\n//\n// @private\n// @param {HTMLElement|Range} firstRect\n// @returns {Window}\nfunction getWindow( elementOrRange ) {\n\tif ( isRange( elementOrRange ) ) {\n\t\treturn elementOrRange.startContainer.ownerDocument.defaultView;\n\t} else {\n\t\treturn elementOrRange.ownerDocument.defaultView;\n\t}\n}\n\n// Returns the closest parent of an element or DOM range.\n//\n// @private\n// @param {HTMLElement|Range} firstRect\n// @returns {HTMLelement}\nfunction getParentElement( elementOrRange ) {\n\tif ( isRange( elementOrRange ) ) {\n\t\tlet parent = elementOrRange.commonAncestorContainer;\n\n\t\t// If a Range is attached to the Text, use the closest element ancestor.\n\t\tif ( isText( parent ) ) {\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\treturn parent;\n\t} else {\n\t\treturn elementOrRange.parentNode;\n\t}\n}\n\n// Returns the rect of an element or range residing in an iframe.\n// The result rect is relative to the geometry of the passed window instance.\n//\n// @private\n// @param {HTMLElement|Range} target Element or range which rect should be returned.\n// @param {Window} relativeWindow A window the rect should be relative to.\n// @returns {module:utils/dom/rect~Rect}\nfunction getRectRelativeToWindow( target, relativeWindow ) {\n\tconst targetWindow = getWindow( target );\n\tconst rect = new Rect( target );\n\n\tif ( targetWindow === relativeWindow ) {\n\t\treturn rect;\n\t} else {\n\t\tlet currentWindow = targetWindow;\n\n\t\twhile ( currentWindow != relativeWindow ) {\n\t\t\tconst frame = currentWindow.frameElement;\n\t\t\tconst frameRect = new Rect( frame ).excludeScrollbarsAndBorders();\n\n\t\t\trect.moveBy( frameRect.left, frameRect.top );\n\n\t\t\tcurrentWindow = currentWindow.parent;\n\t\t}\n\t}\n\n\treturn rect;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/view\n */\n\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\nimport InputObserver from './observer/inputobserver';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\tconstructor() {\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = new Document();\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} used by\n\t\t * {@link module:engine/view/view~View#_renderer renderer}\n\t\t * and {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = new DomConverter();\n\n\t\t/**\n\t\t * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Map.<String, HTMLElement>}\n\t\t */\n\t\tthis.domRoots = new Map();\n\n\t\t/**\n\t\t * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isRenderingInProgress\n\t\t */\n\t\tthis.set( 'isRenderingInProgress', false );\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n\t\t *\n\t\t * @protected\n\t\t * @type {module:engine/view/renderer~Renderer}\n\t\t */\n\t\tthis._renderer = new Renderer( this.domConverter, this.document.selection );\n\t\tthis._renderer.bind( 'isFocused' ).to( this.document );\n\n\t\t/**\n\t\t * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n\t\t * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n\t\t * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n\t\t * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap.<HTMLElement,Object>}\n\t\t */\n\t\tthis._initialDomRootAttributes = new WeakMap();\n\n\t\t/**\n\t\t * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<Function, module:engine/view/observer/observer~Observer>}\n\t\t */\n\t\tthis._observers = new Map();\n\n\t\t/**\n\t\t * Is set to `true` when {@link #change view changes} are currently in progress.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._ongoingChange = false;\n\n\t\t/**\n\t\t * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._postFixersInProgress = false;\n\n\t\t/**\n\t\t * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._renderingDisabled = false;\n\n\t\t/**\n\t\t * Internal flag that disables rendering when there are no changes since the last rendering.\n\t\t * It stores information about changed selection and changed elements from attached document roots.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._hasChangedSinceTheLastRendering = false;\n\n\t\t/**\n\t\t * DowncastWriter instance used in {@link #change change method} callbacks.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/view/downcastwriter~DowncastWriter}\n\t\t */\n\t\tthis._writer = new DowncastWriter( this.document );\n\n\t\t// Add default observers.\n\t\tthis.addObserver( MutationObserver );\n\t\tthis.addObserver( SelectionObserver );\n\t\tthis.addObserver( FocusObserver );\n\t\tthis.addObserver( KeyObserver );\n\t\tthis.addObserver( FakeSelectionObserver );\n\t\tthis.addObserver( CompositionObserver );\n\n\t\tif ( env.isAndroid ) {\n\t\t\tthis.addObserver( InputObserver );\n\t\t}\n\n\t\t// Inject quirks handlers.\n\t\tinjectQuirksHandling( this );\n\t\tinjectUiElementHandling( this );\n\n\t\t// Use 'normal' priority so that rendering is performed as first when using that priority.\n\t\tthis.on( 'render', () => {\n\t\t\tthis._render();\n\n\t\t\t// Informs that layout has changed after render.\n\t\t\tthis.document.fire( 'layoutChanged' );\n\n\t\t\t// Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n\t\t\tthis._hasChangedSinceTheLastRendering = false;\n\t\t} );\n\n\t\t// Listen to the document selection changes directly.\n\t\tthis.listenTo( this.document.selection, 'change', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches a DOM root element to the view element and enable all observers on that element.\n\t * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n\t * with the view what means that all child nodes will be removed and replaced with content of the view root.\n\t *\n\t * This method also will change view element name as the same as tag name of given dom root.\n\t * Name is always transformed to lower case.\n\t *\n\t * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n\t *\n\t * @param {Element} domRoot DOM root element.\n\t * @param {String} [name='main'] Name of the root.\n\t */\n\tattachDomRoot( domRoot, name = 'main' ) {\n\t\tconst viewRoot = this.document.getRoot( name );\n\n\t\t// Set view root name the same as DOM root tag name.\n\t\tviewRoot._name = domRoot.tagName.toLowerCase();\n\n\t\tconst initialDomRootAttributes = {};\n\n\t\t// 1. Copy and cache the attributes to remember the state of the element before attaching.\n\t\t//    The cached attributes will be restored in detachDomRoot() so the element goes to the\n\t\t//    clean state as if the editing view never used it.\n\t\t// 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n\t\t//    The editing view takes over the attribute management completely because various\n\t\t//    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n\t\t//    cannot be managed by the engine and the UI library at the same time.\n\t\tfor ( const { name, value } of Array.from( domRoot.attributes ) ) {\n\t\t\tinitialDomRootAttributes[ name ] = value;\n\n\t\t\t// Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n\t\t\t// and its descendants could have already set some using the writer.addClass() on the view\n\t\t\t// document root. They haven't been rendered yet so they are not present in the DOM root.\n\t\t\t// Using writer.setAttribute( 'class', ... ) would override them completely.\n\t\t\tif ( name === 'class' ) {\n\t\t\t\tthis._writer.addClass( value.split( ' ' ), viewRoot );\n\t\t\t} else {\n\t\t\t\tthis._writer.setAttribute( name, value, viewRoot );\n\t\t\t}\n\t\t}\n\n\t\tthis._initialDomRootAttributes.set( domRoot, initialDomRootAttributes );\n\n\t\tconst updateContenteditableAttribute = () => {\n\t\t\tthis._writer.setAttribute( 'contenteditable', !viewRoot.isReadOnly, viewRoot );\n\n\t\t\tif ( viewRoot.isReadOnly ) {\n\t\t\t\tthis._writer.addClass( 'ck-read-only', viewRoot );\n\t\t\t} else {\n\t\t\t\tthis._writer.removeClass( 'ck-read-only', viewRoot );\n\t\t\t}\n\t\t};\n\n\t\t// Set initial value.\n\t\tupdateContenteditableAttribute();\n\n\t\tthis.domRoots.set( name, domRoot );\n\t\tthis.domConverter.bindElements( domRoot, viewRoot );\n\t\tthis._renderer.markToSync( 'children', viewRoot );\n\t\tthis._renderer.markToSync( 'attributes', viewRoot );\n\t\tthis._renderer.domDocuments.add( domRoot.ownerDocument );\n\n\t\tviewRoot.on( 'change:children', ( evt, node ) => this._renderer.markToSync( 'children', node ) );\n\t\tviewRoot.on( 'change:attributes', ( evt, node ) => this._renderer.markToSync( 'attributes', node ) );\n\t\tviewRoot.on( 'change:text', ( evt, node ) => this._renderer.markToSync( 'text', node ) );\n\t\tviewRoot.on( 'change:isReadOnly', () => this.change( updateContenteditableAttribute ) );\n\n\t\tviewRoot.on( 'change', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.observe( domRoot, name );\n\t\t}\n\t}\n\n\t/**\n\t * Detaches a DOM root element from the view element and restores its attributes to the state before\n\t * {@link #attachDomRoot `attachDomRoot()`}.\n\t *\n\t * @param {String} name Name of the root to detach.\n\t */\n\tdetachDomRoot( name ) {\n\t\tconst domRoot = this.domRoots.get( name );\n\n\t\t// Remove all root attributes so the DOM element is \"bare\".\n\t\tArray.from( domRoot.attributes ).forEach( ( { name } ) => domRoot.removeAttribute( name ) );\n\n\t\tconst initialDomRootAttributes = this._initialDomRootAttributes.get( domRoot );\n\n\t\t// Revert all view root attributes back to the state before attachDomRoot was called.\n\t\tfor ( const attribute in initialDomRootAttributes ) {\n\t\t\tdomRoot.setAttribute( attribute, initialDomRootAttributes[ attribute ] );\n\t\t}\n\n\t\tthis.domRoots.delete( name );\n\t\tthis.domConverter.unbindDomElement( domRoot );\n\t}\n\n\t/**\n\t * Gets DOM root element.\n\t *\n\t * @param {String} [name='main']  Name of the root.\n\t * @returns {Element} DOM root element instance.\n\t */\n\tgetDomRoot( name = 'main' ) {\n\t\treturn this.domRoots.get( name );\n\t}\n\n\t/**\n\t * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n\t * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n\t * {@link #domRoots DOM roots}.\n\t *\n\t * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n\t * when registered for the first time. This means that features and other components can register a single observer\n\t * multiple times without caring whether it has been already added or not.\n\t *\n\t * @param {Function} Observer The constructor of an observer to add.\n\t * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n\t * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n\t */\n\taddObserver( Observer ) {\n\t\tlet observer = this._observers.get( Observer );\n\n\t\tif ( observer ) {\n\t\t\treturn observer;\n\t\t}\n\n\t\tobserver = new Observer( this );\n\n\t\tthis._observers.set( Observer, observer );\n\n\t\tfor ( const [ name, domElement ] of this.domRoots ) {\n\t\t\tobserver.observe( domElement, name );\n\t\t}\n\n\t\tobserver.enable();\n\n\t\treturn observer;\n\t}\n\n\t/**\n\t * Returns observer of the given type or `undefined` if such observer has not been added yet.\n\t *\n\t * @param {Function} Observer The constructor of an observer to get.\n\t * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n\t */\n\tgetObserver( Observer ) {\n\t\treturn this._observers.get( Observer );\n\t}\n\n\t/**\n\t * Disables all added observers.\n\t */\n\tdisableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.disable();\n\t\t}\n\t}\n\n\t/**\n\t * Enables all added observers.\n\t */\n\tenableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.enable();\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n\t * caret, if not already visible to the user.\n\t */\n\tscrollToTheSelection() {\n\t\tconst range = this.document.selection.getFirstRange();\n\n\t\tif ( range ) {\n\t\t\tscrollViewportToShowTarget( {\n\t\t\t\ttarget: this.domConverter.viewRangeToDom( range ),\n\t\t\t\tviewportOffset: 20\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n\t * that is currently having selection inside.\n\t */\n\tfocus() {\n\t\tif ( !this.document.isFocused ) {\n\t\t\tconst editable = this.document.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t\tthis.forceRender();\n\t\t\t} else {\n\t\t\t\t// Before focusing view document, selection should be placed inside one of the view's editables.\n\t\t\t\t// Normally its selection will be converted from model document (which have default selection), but\n\t\t\t\t// when using view document on its own, we need to manually place selection before focusing it.\n\t\t\t\t//\n\t\t\t\t// @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n\t * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n\t * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n\t * to nest calls one inside another and still performs a single rendering after all those changes are made.\n\t * It also returns the return value of its callback.\n\t *\n\t *\t\tconst text = view.change( writer => {\n\t *\t\t\tconst newText = writer.createText( 'foo' );\n\t *\t\t\twriter.insert( position1, newText );\n\t *\n\t *\t\t\tview.change( writer => {\n\t *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.remove( range );\n\t *\n\t * \t\t\treturn newText;\n\t *\t\t} );\n\t *\n\t * When the outermost change block is done and rendering to the DOM is over the\n\t * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n\t *\n\t * This method throws a `applying-view-changes-on-rendering` error when\n\t * the change block is used after rendering to the DOM has started.\n\t *\n\t * @param {Function} callback Callback function which may modify the view.\n\t * @returns {*} Value returned by the callback.\n\t */\n\tchange( callback ) {\n\t\tif ( this.isRenderingInProgress || this._postFixersInProgress ) {\n\t\t\t/**\n\t\t\t * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n\t\t\t * cause some unexpected behaviour and inconsistency between the DOM and the view.\n\t\t\t * This may be caused by:\n\t\t\t *\n\t\t\t * * calling {@link #change} or {@link #forceRender} during rendering process,\n\t\t\t * * calling {@link #change} or {@link #forceRender} inside of\n\t\t\t *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n\t\t\t *\n\t\t\t * @error cannot-change-view-tree\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'cannot-change-view-tree: ' +\n\t\t\t\t'Attempting to make changes to the view when it is in an incorrect state: rendering or post-fixers are in progress. ' +\n\t\t\t\t'This may cause some unexpected behavior and inconsistency between the DOM and the view.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\t// Recursive call to view.change() method - execute listener immediately.\n\t\tif ( this._ongoingChange ) {\n\t\t\treturn callback( this._writer );\n\t\t}\n\n\t\t// This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n\t\t// event for all nested calls.\n\t\tthis._ongoingChange = true;\n\t\tconst callbackResult = callback( this._writer );\n\t\tthis._ongoingChange = false;\n\n\t\t// This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n\t\t// view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all changes.\n\t\t// Also, we don't need to render anything if there're no changes since last rendering.\n\t\tif ( !this._renderingDisabled && this._hasChangedSinceTheLastRendering ) {\n\t\t\tthis._postFixersInProgress = true;\n\t\t\tthis.document._callPostFixers( this._writer );\n\t\t\tthis._postFixersInProgress = false;\n\n\t\t\tthis.fire( 'render' );\n\t\t}\n\n\t\treturn callbackResult;\n\t}\n\n\t/**\n\t * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n\t * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n\t *\n\t * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n\t * block and the view will automatically check whether it needs to render DOM or not.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n\t * trying to re-render when rendering to DOM has already started.\n\t */\n\tforceRender() {\n\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\tthis.change( () => {} );\n\t}\n\n\t/**\n\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n\t */\n\tdestroy() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.destroy();\n\t\t}\n\n\t\tthis.document.destroy();\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = view.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = view.createRange( start, end );\n\t *\t\tconst selection = view.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ view.createRange( start1, end2 ), view.createRange( star2, end2 ) ];\n\t *\t\tconst selection = view.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = view.createSelection();\n\t *\t\tconst selection = view.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = view.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = view.createPositionFromPath( root, path );\n\t *\t\tconst selection = view.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = view.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = view.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = view.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = view.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s factory method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = view.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = view.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n\t * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n\t *\n\t * @protected\n\t * @param {Boolean} flag A flag indicates whether the rendering should be disabled.\n\t */\n\t_disableRendering( flag ) {\n\t\tthis._renderingDisabled = flag;\n\n\t\tif ( flag == false ) {\n\t\t\t// Render when you stop blocking rendering.\n\t\t\tthis.change( () => {} );\n\t\t}\n\t}\n\n\t/**\n\t * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n\t * before rendering and re-enabled after that.\n\t *\n\t * @private\n\t */\n\t_render() {\n\t\tthis.isRenderingInProgress = true;\n\t\tthis.disableObservers();\n\t\tthis._renderer.render();\n\t\tthis.enableObservers();\n\t\tthis.isRenderingInProgress = false;\n\t}\n\n\t/**\n\t * Fired after a topmost {@link module:engine/view/view~View#change change block} and all\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers} are executed.\n\t *\n\t * Actual rendering is performed as a first listener on 'normal' priority.\n\t *\n\t *\t\tview.on( 'render', () => {\n\t *\t\t\t// Rendering to the DOM is complete.\n\t *\t\t} );\n\t *\n\t * This event is useful when you want to update interface elements after the rendering, e.g. position of the\n\t * balloon panel. If you wants to change view structure use\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers}.\n\t *\n\t * @event module:engine/view/view~View#event:render\n\t */\n}\n\nmix( View, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/mapper\n */\n\nimport ModelPosition from '../model/position';\nimport ModelRange from '../model/range';\n\nimport ViewPosition from '../view/position';\nimport ViewRange from '../view/range';\nimport ViewText from '../view/text';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Maps elements, positions and markers between {@link module:engine/view/document~Document the view} and\n * {@link module:engine/model/model the model}.\n *\n * The instance of the Mapper used for the editing pipeline is available in\n * {@link module:engine/controller/editingcontroller~EditingController#mapper `editor.editing.mapper`}.\n *\n * Mapper uses bound elements to find corresponding elements and positions, so, to get proper results,\n * all model elements should be {@link module:engine/conversion/mapper~Mapper#bindElements bound}.\n *\n * To map complex model to/from view relations, you may provide custom callbacks for\n * {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition modelToViewPosition event} and\n * {@link module:engine/conversion/mapper~Mapper#event:viewToModelPosition viewToModelPosition event} that are fired whenever\n * a position mapping request occurs.\n * Those events are fired by {@link module:engine/conversion/mapper~Mapper#toViewPosition toViewPosition}\n * and {@link module:engine/conversion/mapper~Mapper#toModelPosition toModelPosition} methods. `Mapper` adds it's own default callbacks\n * with `'lowest'` priority. To override default `Mapper` mapping, add custom callback with higher priority and\n * stop the event.\n */\nexport default class Mapper {\n\t/**\n\t * Creates an instance of the mapper.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Model element to view element mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._modelToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View element to model element mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._viewToModelMapping = new WeakMap();\n\n\t\t/**\n\t\t * A map containing callbacks between view element names and functions evaluating length of view elements\n\t\t * in model.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._viewToModelLengthCallbacks = new Map();\n\n\t\t/**\n\t\t * Model marker name to view elements mapping.\n\t\t *\n\t\t * Keys are `String`s while values are `Set`s with {@link module:engine/view/element~Element view elements}.\n\t\t * One marker (name) can be mapped to multiple elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._markerNameToElements = new Map();\n\n\t\t/**\n\t\t * View element to model marker names mapping.\n\t\t *\n\t\t * This is reverse to {@link ~Mapper#_markerNameToElements} map.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._elementToMarkerNames = new Map();\n\n\t\t/**\n\t\t * Stores marker names of markers which has changed due to unbinding a view element (so it is assumed that the view element\n\t\t * has been removed, moved or renamed).\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<module:engine/model/markercollection~Marker>}\n\t\t */\n\t\tthis._unboundMarkerNames = new Set();\n\n\t\t// Default mapper algorithm for mapping model position to view position.\n\t\tthis.on( 'modelToViewPosition', ( evt, data ) => {\n\t\t\tif ( data.viewPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewContainer = this._modelToViewMapping.get( data.modelPosition.parent );\n\n\t\t\tdata.viewPosition = this._findPositionIn( viewContainer, data.modelPosition.offset );\n\t\t}, { priority: 'low' } );\n\n\t\t// Default mapper algorithm for mapping view position to model position.\n\t\tthis.on( 'viewToModelPosition', ( evt, data ) => {\n\t\t\tif ( data.modelPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewBlock = this.findMappedViewAncestor( data.viewPosition );\n\t\t\tconst modelParent = this._viewToModelMapping.get( viewBlock );\n\t\t\tconst modelOffset = this._toModelOffset( data.viewPosition.parent, data.viewPosition.offset, viewBlock );\n\n\t\t\tdata.modelPosition = ModelPosition._createAt( modelParent, modelOffset );\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * Marks model and view elements as corresponding. Corresponding elements can be retrieved by using\n\t * the {@link module:engine/conversion/mapper~Mapper#toModelElement toModelElement} and\n\t * {@link module:engine/conversion/mapper~Mapper#toViewElement toViewElement} methods.\n\t * The information that elements are bound is also used to translate positions.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element.\n\t * @param {module:engine/view/element~Element} viewElement View element.\n\t */\n\tbindElements( modelElement, viewElement ) {\n\t\tthis._modelToViewMapping.set( modelElement, viewElement );\n\t\tthis._viewToModelMapping.set( viewElement, modelElement );\n\t}\n\n\t/**\n\t * Unbinds given {@link module:engine/view/element~Element view element} from the map.\n\t *\n\t * **Note:** view-to-model binding will be removed, if it existed. However, corresponding model-to-view binding\n\t * will be removed only if model element is still bound to passed `viewElement`.\n\t *\n\t * This behavior lets for re-binding model element to another view element without fear of losing the new binding\n\t * when the previously bound view element is unbound.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement View element to unbind.\n\t */\n\tunbindViewElement( viewElement ) {\n\t\tconst modelElement = this.toModelElement( viewElement );\n\n\t\tthis._viewToModelMapping.delete( viewElement );\n\n\t\tif ( this._elementToMarkerNames.has( viewElement ) ) {\n\t\t\tfor ( const markerName of this._elementToMarkerNames.get( viewElement ) ) {\n\t\t\t\tthis._unboundMarkerNames.add( markerName );\n\t\t\t}\n\t\t}\n\n\t\tif ( this._modelToViewMapping.get( modelElement ) == viewElement ) {\n\t\t\tthis._modelToViewMapping.delete( modelElement );\n\t\t}\n\t}\n\n\t/**\n\t * Unbinds given {@link module:engine/model/element~Element model element} from the map.\n\t *\n\t * **Note:** model-to-view binding will be removed, if it existed. However, corresponding view-to-model binding\n\t * will be removed only if view element is still bound to passed `modelElement`.\n\t *\n\t * This behavior lets for re-binding view element to another model element without fear of losing the new binding\n\t * when the previously bound model element is unbound.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element to unbind.\n\t */\n\tunbindModelElement( modelElement ) {\n\t\tconst viewElement = this.toViewElement( modelElement );\n\n\t\tthis._modelToViewMapping.delete( modelElement );\n\n\t\tif ( this._viewToModelMapping.get( viewElement ) == modelElement ) {\n\t\t\tthis._viewToModelMapping.delete( viewElement );\n\t\t}\n\t}\n\n\t/**\n\t * Binds given marker name with given {@link module:engine/view/element~Element view element}. The element\n\t * will be added to the current set of elements bound with given marker name.\n\t *\n\t * @param {module:engine/view/element~Element} element Element to bind.\n\t * @param {String} name Marker name.\n\t */\n\tbindElementToMarker( element, name ) {\n\t\tconst elements = this._markerNameToElements.get( name ) || new Set();\n\t\telements.add( element );\n\n\t\tconst names = this._elementToMarkerNames.get( element ) || new Set();\n\t\tnames.add( name );\n\n\t\tthis._markerNameToElements.set( name, elements );\n\t\tthis._elementToMarkerNames.set( element, names );\n\t}\n\n\t/**\n\t * Unbinds an element from given marker name.\n\t *\n\t * @param {module:engine/view/element~Element} element Element to unbind.\n\t * @param {String} name Marker name.\n\t */\n\tunbindElementFromMarkerName( element, name ) {\n\t\tconst nameToElements = this._markerNameToElements.get( name );\n\n\t\tif ( nameToElements ) {\n\t\t\tnameToElements.delete( element );\n\n\t\t\tif ( nameToElements.size == 0 ) {\n\t\t\t\tthis._markerNameToElements.delete( name );\n\t\t\t}\n\t\t}\n\n\t\tconst elementToNames = this._elementToMarkerNames.get( element );\n\n\t\tif ( elementToNames ) {\n\t\t\telementToNames.delete( name );\n\n\t\t\tif ( elementToNames.size == 0 ) {\n\t\t\t\tthis._elementToMarkerNames.delete( element );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns all marker names of markers which has changed due to unbinding a view element (so it is assumed that the view element\n\t * has been removed, moved or renamed) since the last flush. After returning, the marker names list is cleared.\n\t *\n\t * @returns {Array.<String>}\n\t */\n\tflushUnboundMarkerNames() {\n\t\tconst markerNames = Array.from( this._unboundMarkerNames );\n\n\t\tthis._unboundMarkerNames.clear();\n\n\t\treturn markerNames;\n\t}\n\n\t/**\n\t * Removes all model to view and view to model bindings.\n\t */\n\tclearBindings() {\n\t\tthis._modelToViewMapping = new WeakMap();\n\t\tthis._viewToModelMapping = new WeakMap();\n\t\tthis._markerNameToElements = new Map();\n\t\tthis._elementToMarkerNames = new Map();\n\t\tthis._unboundMarkerNames = new Set();\n\t}\n\n\t/**\n\t * Gets the corresponding model element.\n\t *\n\t * **Note:** {@link module:engine/view/uielement~UIElement} does not have corresponding element in model.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement View element.\n\t * @returns {module:engine/model/element~Element|undefined} Corresponding model element or `undefined` if not found.\n\t */\n\ttoModelElement( viewElement ) {\n\t\treturn this._viewToModelMapping.get( viewElement );\n\t}\n\n\t/**\n\t * Gets the corresponding view element.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element.\n\t * @returns {module:engine/view/element~Element|undefined} Corresponding view element or `undefined` if not found.\n\t */\n\ttoViewElement( modelElement ) {\n\t\treturn this._modelToViewMapping.get( modelElement );\n\t}\n\n\t/**\n\t * Gets the corresponding model range.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {module:engine/model/range~Range} Corresponding model range.\n\t */\n\ttoModelRange( viewRange ) {\n\t\treturn new ModelRange( this.toModelPosition( viewRange.start ), this.toModelPosition( viewRange.end ) );\n\t}\n\n\t/**\n\t * Gets the corresponding view range.\n\t *\n\t * @param {module:engine/model/range~Range} modelRange Model range.\n\t * @returns {module:engine/view/range~Range} Corresponding view range.\n\t */\n\ttoViewRange( modelRange ) {\n\t\treturn new ViewRange( this.toViewPosition( modelRange.start ), this.toViewPosition( modelRange.end ) );\n\t}\n\n\t/**\n\t * Gets the corresponding model position.\n\t *\n\t * @fires viewToModelPosition\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {module:engine/model/position~Position} Corresponding model position.\n\t */\n\ttoModelPosition( viewPosition ) {\n\t\tconst data = {\n\t\t\tviewPosition,\n\t\t\tmapper: this\n\t\t};\n\n\t\tthis.fire( 'viewToModelPosition', data );\n\n\t\treturn data.modelPosition;\n\t}\n\n\t/**\n\t * Gets the corresponding view position.\n\t *\n\t * @fires modelToViewPosition\n\t * @param {module:engine/model/position~Position} modelPosition Model position.\n\t * @param {Object} [options] Additional options for position mapping process.\n\t * @param {Boolean} [options.isPhantom=false] Should be set to `true` if the model position to map is pointing to a place\n\t * in model tree which no longer exists. For example, it could be an end of a removed model range.\n\t * @returns {module:engine/view/position~Position} Corresponding view position.\n\t */\n\ttoViewPosition( modelPosition, options = { isPhantom: false } ) {\n\t\tconst data = {\n\t\t\tmodelPosition,\n\t\t\tmapper: this,\n\t\t\tisPhantom: options.isPhantom\n\t\t};\n\n\t\tthis.fire( 'modelToViewPosition', data );\n\n\t\treturn data.viewPosition;\n\t}\n\n\t/**\n\t * Gets all view elements bound to the given marker name.\n\t *\n\t * @param {String} name Marker name.\n\t * @returns {Set.<module:engine/view/element~Element>|null} View elements bound with given marker name or `null`\n\t * if no elements are bound to given marker name.\n\t */\n\tmarkerNameToElements( name ) {\n\t\tconst boundElements = this._markerNameToElements.get( name );\n\n\t\tif ( !boundElements ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements = new Set();\n\n\t\tfor ( const element of boundElements ) {\n\t\t\tif ( element.is( 'attributeElement' ) ) {\n\t\t\t\tfor ( const clone of element.getElementsWithSameId() ) {\n\t\t\t\t\telements.add( clone );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\telements.add( element );\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Registers a callback that evaluates the length in the model of a view element with given name.\n\t *\n\t * The callback is fired with one argument, which is a view element instance. The callback is expected to return\n\t * a number representing the length of view element in model.\n\t *\n\t *\t\t// List item in view may contain nested list, which have other list items. In model though,\n\t *\t\t// the lists are represented by flat structure. Because of those differences, length of list view element\n\t *\t\t// may be greater than one. In the callback it's checked how many nested list items are in evaluated list item.\n\t *\n\t *\t\tfunction getViewListItemLength( element ) {\n\t *\t\t\tlet length = 1;\n\t *\n\t *\t\t\tfor ( let child of element.getChildren() ) {\n\t *\t\t\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t *\t\t\t\t\tfor ( let item of child.getChildren() ) {\n\t *\t\t\t\t\t\tlength += getViewListItemLength( item );\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn length;\n\t *\t\t}\n\t *\n\t *\t\tmapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t *\n\t * @param {String} viewElementName Name of view element for which callback is registered.\n\t * @param {Function} lengthCallback Function return a length of view element instance in model.\n\t */\n\tregisterViewToModelLength( viewElementName, lengthCallback ) {\n\t\tthis._viewToModelLengthCallbacks.set( viewElementName, lengthCallback );\n\t}\n\n\t/**\n\t * For given `viewPosition`, finds and returns the closest ancestor of this position that has a mapping to\n\t * the model.\n\t *\n\t * @param {module:engine/view/position~Position} viewPosition Position for which mapped ancestor should be found.\n\t * @returns {module:engine/view/element~Element}\n\t */\n\tfindMappedViewAncestor( viewPosition ) {\n\t\tlet parent = viewPosition.parent;\n\n\t\twhile ( !this._viewToModelMapping.has( parent ) ) {\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn parent;\n\t}\n\n\t/**\n\t * Calculates model offset based on the view position and the block element.\n\t *\n\t * Example:\n\t *\n\t *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, p ) -> 5\n\t *\n\t * Is a sum of:\n\t *\n\t *\t\t<p>foo|<b>bar</b></p> // _toModelOffset( p, 3, p ) -> 3\n\t *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, b ) -> 2\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewParent Position parent.\n\t * @param {Number} viewOffset Position offset.\n\t * @param {module:engine/view/element~Element} viewBlock Block used as a base to calculate offset.\n\t * @returns {Number} Offset in the model.\n\t */\n\t_toModelOffset( viewParent, viewOffset, viewBlock ) {\n\t\tif ( viewBlock != viewParent ) {\n\t\t\t// See example.\n\t\t\tconst offsetToParentStart = this._toModelOffset( viewParent.parent, viewParent.index, viewBlock );\n\t\t\tconst offsetInParent = this._toModelOffset( viewParent, viewOffset, viewParent );\n\n\t\t\treturn offsetToParentStart + offsetInParent;\n\t\t}\n\n\t\t// viewBlock == viewParent, so we need to calculate the offset in the parent element.\n\n\t\t// If the position is a text it is simple (\"ba|r\" -> 2).\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\treturn viewOffset;\n\t\t}\n\n\t\t// If the position is in an element we need to sum lengths of siblings ( <b> bar </b> foo | -> 3 + 3 = 6 ).\n\t\tlet modelOffset = 0;\n\n\t\tfor ( let i = 0; i < viewOffset; i++ ) {\n\t\t\tmodelOffset += this.getModelLength( viewParent.getChild( i ) );\n\t\t}\n\n\t\treturn modelOffset;\n\t}\n\n\t/**\n\t * Gets the length of the view element in the model.\n\t *\n\t * The length is calculated as follows:\n\t * * if {@link #registerViewToModelLength length mapping callback} is provided for given `viewNode` it is used to\n\t * evaluate model length (`viewNode` is used as first and only parameter passed to the callback),\n\t * * length of a {@link module:engine/view/text~Text text node} is equal to the length of it's\n\t * {@link module:engine/view/text~Text#data data},\n\t * * length of a {@link module:engine/view/uielement~UIElement ui element} is equal to 0,\n\t * * length of a mapped {@link module:engine/view/element~Element element} is equal to 1,\n\t * * length of a not-mapped {@link module:engine/view/element~Element element} is equal to the length of it's children.\n\t *\n\t * Examples:\n\t *\n\t *\t\tfoo                          -> 3 // Text length is equal to it's data length.\n\t *\t\t<p>foo</p>                   -> 1 // Length of an element which is mapped is by default equal to 1.\n\t *\t\t<b>foo</b>                   -> 3 // Length of an element which is not mapped is a length of its children.\n\t *\t\t<div><p>x</p><p>y</p></div>  -> 2 // Assuming that <div> is not mapped and <p> are mapped.\n\t *\n\t * @param {module:engine/view/element~Element} viewNode View node.\n\t * @returns {Number} Length of the node in the tree model.\n\t */\n\tgetModelLength( viewNode ) {\n\t\tif ( this._viewToModelLengthCallbacks.get( viewNode.name ) ) {\n\t\t\tconst callback = this._viewToModelLengthCallbacks.get( viewNode.name );\n\n\t\t\treturn callback( viewNode );\n\t\t} else if ( this._viewToModelMapping.has( viewNode ) ) {\n\t\t\treturn 1;\n\t\t} else if ( viewNode.is( 'text' ) ) {\n\t\t\treturn viewNode.data.length;\n\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tlet len = 0;\n\n\t\t\tfor ( const child of viewNode.getChildren() ) {\n\t\t\t\tlen += this.getModelLength( child );\n\t\t\t}\n\n\t\t\treturn len;\n\t\t}\n\t}\n\n\t/**\n\t * Finds the position in the view node (or its children) with the expected model offset.\n\t *\n\t * Example:\n\t *\n\t *\t\t<p>fo<b>bar</b>bom</p> -> expected offset: 4\n\t *\n\t *\t\t_findPositionIn( p, 4 ):\n\t *\t\t<p>|fo<b>bar</b>bom</p> -> expected offset: 4, actual offset: 0\n\t *\t\t<p>fo|<b>bar</b>bom</p> -> expected offset: 4, actual offset: 2\n\t *\t\t<p>fo<b>bar</b>|bom</p> -> expected offset: 4, actual offset: 5 -> we are too far\n\t *\n\t *\t\t_findPositionIn( b, 4 - ( 5 - 3 ) ):\n\t *\t\t<p>fo<b>|bar</b>bom</p> -> expected offset: 2, actual offset: 0\n\t *\t\t<p>fo<b>bar|</b>bom</p> -> expected offset: 2, actual offset: 3 -> we are too far\n\t *\n\t *\t\t_findPositionIn( bar, 2 - ( 3 - 3 ) ):\n\t *\t\tWe are in the text node so we can simple find the offset.\n\t *\t\t<p>fo<b>ba|r</b>bom</p> -> expected offset: 2, actual offset: 2 -> position found\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewParent Tree view element in which we are looking for the position.\n\t * @param {Number} expectedOffset Expected offset.\n\t * @returns {module:engine/view/position~Position} Found position.\n\t */\n\t_findPositionIn( viewParent, expectedOffset ) {\n\t\t// Last scanned view node.\n\t\tlet viewNode;\n\t\t// Length of the last scanned view node.\n\t\tlet lastLength = 0;\n\n\t\tlet modelOffset = 0;\n\t\tlet viewOffset = 0;\n\n\t\t// In the text node it is simple: offset in the model equals offset in the text.\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\treturn new ViewPosition( viewParent, expectedOffset );\n\t\t}\n\n\t\t// In other cases we add lengths of child nodes to find the proper offset.\n\n\t\t// If it is smaller we add the length.\n\t\twhile ( modelOffset < expectedOffset ) {\n\t\t\tviewNode = viewParent.getChild( viewOffset );\n\t\t\tlastLength = this.getModelLength( viewNode );\n\t\t\tmodelOffset += lastLength;\n\t\t\tviewOffset++;\n\t\t}\n\n\t\t// If it equals we found the position.\n\t\tif ( modelOffset == expectedOffset ) {\n\t\t\treturn this._moveViewPositionToTextNode( new ViewPosition( viewParent, viewOffset ) );\n\t\t}\n\t\t// If it is higher we need to enter last child.\n\t\telse {\n\t\t\t// ( modelOffset - lastLength ) is the offset to the child we enter,\n\t\t\t// so we subtract it from the expected offset to fine the offset in the child.\n\t\t\treturn this._findPositionIn( viewNode, expectedOffset - ( modelOffset - lastLength ) );\n\t\t}\n\t}\n\n\t/**\n\t * Because we prefer positions in text nodes over positions next to text node moves view position to the text node\n\t * if it was next to it.\n\t *\n\t *\t\t<p>[]<b>foo</b></p> -> <p>[]<b>foo</b></p> // do not touch if position is not directly next to text\n\t *\t\t<p>foo[]<b>foo</b></p> -> <p>foo{}<b>foo</b></p> // move to text node\n\t *\t\t<p><b>[]foo</b></p> -> <p><b>{}foo</b></p> // move to text node\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} viewPosition Position potentially next to text node.\n\t * @returns {module:engine/view/position~Position} Position in text node if possible.\n\t */\n\t_moveViewPositionToTextNode( viewPosition ) {\n\t\t// If the position is just after text node, put it at the end of that text node.\n\t\t// If the position is just before text node, put it at the beginning of that text node.\n\t\tconst nodeBefore = viewPosition.nodeBefore;\n\t\tconst nodeAfter = viewPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof ViewText ) {\n\t\t\treturn new ViewPosition( nodeBefore, nodeBefore.data.length );\n\t\t} else if ( nodeAfter instanceof ViewText ) {\n\t\t\treturn new ViewPosition( nodeAfter, 0 );\n\t\t}\n\n\t\t// Otherwise, just return the given position.\n\t\treturn viewPosition;\n\t}\n\n\t/**\n\t * Fired for each model-to-view position mapping request. The purpose of this event is to enable custom model-to-view position\n\t * mapping. Callbacks added to this event take {@link module:engine/model/position~Position model position} and are expected to\n\t * calculate {@link module:engine/view/position~Position view position}. Calculated view position should be added as `viewPosition`\n\t * value in `data` object that is passed as one of parameters to the event callback.\n\t *\n\t * \t\t// Assume that \"captionedImage\" model element is converted to <img> and following <span> elements in view,\n\t * \t\t// and the model element is bound to <img> element. Force mapping model positions inside \"captionedImage\" to that\n\t * \t\t// <span> element.\n\t *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n\t *\t\t\tconst positionParent = modelPosition.parent;\n\t *\n\t *\t\t\tif ( positionParent.name == 'captionedImage' ) {\n\t *\t\t\t\tconst viewImg = data.mapper.toViewElement( positionParent );\n\t *\t\t\t\tconst viewCaption = viewImg.nextSibling; // The <span> element.\n\t *\n\t *\t\t\t\tdata.viewPosition = new ViewPosition( viewCaption, modelPosition.offset );\n\t *\n\t *\t\t\t\t// Stop the event if other callbacks should not modify calculated value.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** keep in mind that sometimes a \"phantom\" model position is being converted. \"Phantom\" model position is\n\t * a position that points to a non-existing place in model. Such position might still be valid for conversion, though\n\t * (it would point to a correct place in view when converted). One example of such situation is when a range is\n\t * removed from model, there may be a need to map the range's end (which is no longer valid model position). To\n\t * handle such situation, check `data.isPhantom` flag:\n\t *\n\t * \t\t// Assume that there is \"customElement\" model element and whenever position is before it, we want to move it\n\t * \t\t// to the inside of the view element bound to \"customElement\".\n\t *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n\t *\t\t\tif ( data.isPhantom ) {\n\t *\t\t\t\treturn;\n\t *\t\t\t}\n\t *\n\t *\t\t\t// Below line might crash for phantom position that does not exist in model.\n\t *\t\t\tconst sibling = data.modelPosition.nodeBefore;\n\t *\n\t *\t\t\t// Check if this is the element we are interested in.\n\t *\t\t\tif ( !sibling.is( 'customElement' ) ) {\n\t *\t\t\t\treturn;\n\t *\t\t\t}\n\t *\n\t *\t\t\tconst viewElement = data.mapper.toViewElement( sibling );\n\t *\n\t *\t\t\tdata.viewPosition = new ViewPosition( sibling, 0 );\n\t *\n\t *\t\t\tevt.stop();\n\t *\t\t} );\n\t *\n\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n\t * attach a custom callback after default callback and also use `data.viewPosition` calculated by default callback\n\t * (for example to fix it).\n\t *\n\t * **Note:** default mapping callback will not fire if `data.viewPosition` is already set.\n\t *\n\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n\t * the condition that checks if special case scenario happened should be as simple as possible.\n\t *\n\t * @event modelToViewPosition\n\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n\t * `viewPosition` value to that object with calculated {@link module:engine/view/position~Position view position}.\n\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n\t */\n\n\t/**\n\t * Fired for each view-to-model position mapping request. See {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition}.\n\t *\n\t * \t\t// See example in `modelToViewPosition` event description.\n\t * \t\t// This custom mapping will map positions from <span> element next to <img> to the \"captionedImage\" element.\n\t *\t\tmapper.on( 'viewToModelPosition', ( evt, data ) => {\n\t *\t\t\tconst positionParent = viewPosition.parent;\n\t *\n\t *\t\t\tif ( positionParent.hasClass( 'image-caption' ) ) {\n\t *\t\t\t\tconst viewImg = positionParent.previousSibling;\n\t *\t\t\t\tconst modelImg = data.mapper.toModelElement( viewImg );\n\t *\n\t *\t\t\t\tdata.modelPosition = new ModelPosition( modelImg, viewPosition.offset );\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n\t * attach a custom callback after default callback and also use `data.modelPosition` calculated by default callback\n\t * (for example to fix it).\n\t *\n\t * **Note:** default mapping callback will not fire if `data.modelPosition` is already set.\n\t *\n\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n\t * the condition that checks if special case scenario happened should be as simple as possible.\n\t *\n\t * @event viewToModelPosition\n\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n\t * `modelPosition` value to that object with calculated {@link module:engine/model/position~Position model position}.\n\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n\t */\n}\n\nmix( Mapper, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/modelconsumable\n */\n\nimport TextProxy from '../model/textproxy';\n\n/**\n * Manages a list of consumable values for {@link module:engine/model/item~Item model items}.\n *\n * Consumables are various aspects of the model. A model item can be broken down into singular properties that might be\n * taken into consideration when converting that item.\n *\n * `ModelConsumable` is used by {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} while analyzing changed\n * parts of {@link module:engine/model/document~Document the document}. The added / changed / removed model items are broken down\n * into singular properties (the item itself and it's attributes). All those parts are saved in `ModelConsumable`. Then,\n * during conversion, when given part of model item is converted (i.e. the view element has been inserted into the view,\n * but without attributes), consumable value is removed from `ModelConsumable`.\n *\n * For model items, `ModelConsumable` stores consumable values of one of following types: `insert`, `addattribute:<attributeKey>`,\n * `changeattributes:<attributeKey>`, `removeattributes:<attributeKey>`.\n *\n * In most cases, it is enough to let {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * gather consumable values, so there is no need to use\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#add add method} directly.\n * However, it is important to understand how consumable values can be\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n * See {@link module:engine/conversion/downcasthelpers default downcast converters} for more information.\n *\n * Keep in mind, that one conversion event may have multiple callbacks (converters) attached to it. Each of those is\n * able to convert one or more parts of the model. However, when one of those callbacks actually converts\n * something, other should not, because they would duplicate the results. Using `ModelConsumable` helps avoiding\n * this situation, because callbacks should only convert those values, which were not yet consumed from `ModelConsumable`.\n *\n * Consuming multiple values in a single callback:\n *\n *\t\t// Converter for custom `image` element that might have a `caption` element inside which changes\n *\t\t// how the image is displayed in the view:\n *\t\t//\n *\t\t// Model:\n *\t\t//\n *\t\t// [image]\n *\t\t//   └─ [caption]\n *\t\t//       └─ foo\n *\t\t//\n *\t\t// View:\n *\t\t//\n *\t\t// <figure>\n *\t\t//   ├─ <img />\n *\t\t//   └─ <caption>\n *\t\t//       └─ foo\n *\t\tmodelConversionDispatcher.on( 'insert:image', ( evt, data, conversionApi ) => {\n *\t\t\t// First, consume the `image` element.\n *\t\t\tconversionApi.consumable.consume( data.item, 'insert' );\n *\n *\t\t\t// Just create normal image element for the view.\n *\t\t\t// Maybe it will be \"decorated\" later.\n *\t\t\tconst viewImage = new ViewElement( 'img' );\n *\t\t\tconst insertPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\t\t\tconst viewWriter = conversionApi.writer;\n *\n *\t\t\t// Check if the `image` element has children.\n *\t\t\tif ( data.item.childCount > 0 ) {\n *\t\t\t\tconst modelCaption = data.item.getChild( 0 );\n *\n *\t\t\t\t// `modelCaption` insertion change is consumed from consumable values.\n *\t\t\t\t// It will not be converted by other converters, but it's children (probably some text) will be.\n *\t\t\t\t// Through mapping, converters for text will know where to insert contents of `modelCaption`.\n *\t\t\t\tif ( conversionApi.consumable.consume( modelCaption, 'insert' ) ) {\n *\t\t\t\t\tconst viewCaption = new ViewElement( 'figcaption' );\n *\n *\t\t\t\t\tconst viewImageHolder = new ViewElement( 'figure', null, [ viewImage, viewCaption ] );\n *\n *\t\t\t\t\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\n *\t\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImageHolder );\n *\t\t\t\t\tviewWriter.insert( insertPosition, viewImageHolder );\n *\t\t\t\t}\n *\t\t\t} else {\n *\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImage );\n *\t\t\t\tviewWriter.insert( insertPosition, viewImage );\n *\t\t\t}\n *\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class ModelConsumable {\n\t/**\n\t * Creates an empty consumables list.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Contains list of consumable values.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_consumable\n\t\t */\n\t\tthis._consumable = new Map();\n\n\t\t/**\n\t\t * For each {@link module:engine/model/textproxy~TextProxy} added to `ModelConsumable`, this registry holds parent\n\t\t * of that `TextProxy` and start and end indices of that `TextProxy`. This allows identification of `TextProxy`\n\t\t * instances that points to the same part of the model but are different instances. Each distinct `TextProxy`\n\t\t * is given unique `Symbol` which is then registered as consumable. This process is transparent for `ModelConsumable`\n\t\t * API user because whenever `TextProxy` is added, tested, consumed or reverted, internal mechanisms of\n\t\t * `ModelConsumable` translates `TextProxy` to that unique `Symbol`.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_textProxyRegistry\n\t\t */\n\t\tthis._textProxyRegistry = new Map();\n\t}\n\n\t/**\n\t * Adds a consumable value to the consumables list and links it with given model item.\n\t *\n\t *\t\tmodelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.\n\t *\t\tmodelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.\n\t *\t\tmodelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection that has the consumable.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t */\n\tadd( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tif ( !this._consumable.has( item ) ) {\n\t\t\tthis._consumable.set( item, new Map() );\n\t\t}\n\n\t\tthis._consumable.get( item ).set( type, true );\n\t}\n\n\t/**\n\t * Removes given consumable value from given model item.\n\t *\n\t *\t\tmodelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.\n\t *\t\tmodelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.\n\t *\t\tmodelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection from which consumable will be consumed.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t * @returns {Boolean} `true` if consumable value was available and was consumed, `false` otherwise.\n\t */\n\tconsume( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tif ( this.test( item, type ) ) {\n\t\t\tthis._consumable.get( item ).set( type, false );\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Tests whether there is a consumable value of given type connected with given model item.\n\t *\n\t *\t\tmodelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.\n\t *\t\tmodelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.\n\t *\t\tmodelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection to be tested.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t * @returns {null|Boolean} `null` if such consumable was never added, `false` if the consumable values was\n\t * already consumed or `true` if it was added and not consumed yet.\n\t */\n\ttest( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tconst itemConsumables = this._consumable.get( item );\n\n\t\tif ( itemConsumables === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst value = itemConsumables.get( type );\n\n\t\tif ( value === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Reverts consuming of consumable value.\n\t *\n\t *\t\tmodelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.\n\t *\t\tmodelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.\n\t *\t\tmodelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.\n\t *\t\tmodelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.\n\t *\t\tmodelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection to be reverted.\n\t * @param {String} type Consumable type.\n\t * @returns {null|Boolean} `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has\n\t * never been added.\n\t */\n\trevert( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tconst test = this.test( item, type );\n\n\t\tif ( test === false ) {\n\t\t\tthis._consumable.get( item ).set( type, true );\n\n\t\t\treturn true;\n\t\t} else if ( test === true ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets a unique symbol for passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that\n\t * have same parent, same start index and same end index will get the same symbol.\n\t *\n\t * Used internally to correctly consume `TextProxy` instances.\n\t *\n\t * @private\n\t * @param {module:engine/model/textproxy~TextProxy} textProxy `TextProxy` instance to get a symbol for.\n\t * @returns {Symbol} Symbol representing all equal instances of `TextProxy`.\n\t */\n\t_getSymbolForTextProxy( textProxy ) {\n\t\tlet symbol = null;\n\n\t\tconst startMap = this._textProxyRegistry.get( textProxy.startOffset );\n\n\t\tif ( startMap ) {\n\t\t\tconst endMap = startMap.get( textProxy.endOffset );\n\n\t\t\tif ( endMap ) {\n\t\t\t\tsymbol = endMap.get( textProxy.parent );\n\t\t\t}\n\t\t}\n\n\t\tif ( !symbol ) {\n\t\t\tsymbol = this._addSymbolForTextProxy( textProxy.startOffset, textProxy.endOffset, textProxy.parent );\n\t\t}\n\n\t\treturn symbol;\n\t}\n\n\t/**\n\t * Adds a symbol for given properties that characterizes a {@link module:engine/model/textproxy~TextProxy} instance.\n\t *\n\t * Used internally to correctly consume `TextProxy` instances.\n\t *\n\t * @private\n\t * @param {Number} startIndex Text proxy start index in it's parent.\n\t * @param {Number} endIndex Text proxy end index in it's parent.\n\t * @param {module:engine/model/element~Element} parent Text proxy parent.\n\t * @returns {Symbol} Symbol generated for given properties.\n\t */\n\t_addSymbolForTextProxy( start, end, parent ) {\n\t\tconst symbol = Symbol( 'textProxySymbol' );\n\t\tlet startMap, endMap;\n\n\t\tstartMap = this._textProxyRegistry.get( start );\n\n\t\tif ( !startMap ) {\n\t\t\tstartMap = new Map();\n\t\t\tthis._textProxyRegistry.set( start, startMap );\n\t\t}\n\n\t\tendMap = startMap.get( end );\n\n\t\tif ( !endMap ) {\n\t\t\tendMap = new Map();\n\t\t\tstartMap.set( end, endMap );\n\t\t}\n\n\t\tendMap.set( parent, symbol );\n\n\t\treturn symbol;\n\t}\n}\n\n// Returns a normalized consumable type name from given string. A normalized consumable type name is a string that has\n// at most one colon, for example: `insert` or `addMarker:highlight`. If string to normalize has more \"parts\" (more colons),\n// the other parts are dropped, for example: `addattribute:bold:$text` -> `addattributes:bold`.\n//\n// @param {String} type Consumable type.\n// @returns {String} Normalized consumable type.\nfunction _normalizeConsumableType( type ) {\n\tconst parts = type.split( ':' );\n\n\treturn parts.length > 1 ? parts[ 0 ] + ':' + parts[ 1 ] : parts[ 0 ];\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/downcastdispatcher\n */\n\nimport Consumable from './modelconsumable';\nimport Range from '../model/range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { extend } from 'lodash-es';\n\n/**\n * `DowncastDispatcher` is a central point of downcasting (conversion from model to view), which is a process of reacting to changes\n * in the model and firing a set of events. Callbacks listening to those events are called converters. Those\n * converters role is to convert the model changes to changes in view (for example, adding view nodes or\n * changing attributes on view elements).\n *\n * During conversion process, `DowncastDispatcher` fires events, basing on state of the model and prepares\n * data for those events. It is important to understand that those events are connected with changes done on model,\n * for example: \"node has been inserted\" or \"attribute has changed\". This is in a contrary to upcasting (view to model conversion),\n * where we convert view state (view nodes) to a model tree.\n *\n * The events are prepared basing on a diff created by {@link module:engine/model/differ~Differ Differ}, which buffers them\n * and then passes to `DowncastDispatcher` as a diff between old model state and new model state.\n *\n * Note, that because changes are converted there is a need to have a mapping between model structure and view structure.\n * To map positions and elements during downcast (model to view conversion) use {@link module:engine/conversion/mapper~Mapper}.\n *\n * `DowncastDispatcher` fires following events for model tree changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * if a range of nodes has been inserted to the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove remove}\n * if a range of nodes has been removed from the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute}\n * if attribute has been added, changed or removed from a model node.\n *\n * For {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute},\n * `DowncastDispatcher` generates {@link module:engine/conversion/modelconsumable~ModelConsumable consumables}.\n * These are used to have a control over which changes has been already consumed. It is useful when some converters\n * overwrite other or converts multiple changes (for example converts insertion of an element and also converts that\n * element's attributes during insertion).\n *\n * Additionally, `DowncastDispatcher` fires events for {@link module:engine/model/markercollection~Marker marker} changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} if a marker has been added,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} if a marker has been removed.\n *\n * Note, that changing a marker is done through removing the marker from the old range, and adding on the new range,\n * so both those events are fired.\n *\n * Finally, `DowncastDispatcher` also handles firing events for {@link module:engine/model/selection model selection}\n * conversion:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:selection}\n * which converts selection from model to view,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute}\n * which is fired for every selection attribute,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}\n * which is fired for every marker which contains selection.\n *\n * Unlike model tree and markers, events for selection are not fired for changes but for selection state.\n *\n * When providing custom listeners for `DowncastDispatcher` remember to check whether given change has not been\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} yet.\n *\n * When providing custom listeners for `DowncastDispatcher` keep in mind that any callback that had\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} a value from a consumable and\n * converted the change should also stop the event (for efficiency purposes).\n *\n * When providing custom listeners for `DowncastDispatcher` remember to use provided\n * {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer} to apply changes to the view document.\n *\n * Example of a custom converter for `DowncastDispatcher`:\n *\n *\t\t// We will convert inserting \"paragraph\" model element into the model.\n *\t\tdowncastDispatcher.on( 'insert:paragraph', ( evt, data, conversionApi ) => {\n *\t\t\t// Remember to check whether the change has not been consumed yet and consume it.\n *\t\t\tif ( conversionApi.consumable.consume( data.item, 'insert' ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\t// Translate position in model to position in view.\n *\t\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\n *\t\t\t// Create <p> element that will be inserted in view at `viewPosition`.\n *\t\t\tconst viewElement = conversionApi.writer.createContainerElement( 'p' );\n *\n *\t\t\t// Bind the newly created view element to model element so positions will map accordingly in future.\n *\t\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n *\n *\t\t\t// Add the newly created view element to the view.\n *\t\t\tconversionApi.writer.insert( viewPosition, viewElement );\n *\n *\t\t\t// Remember to stop the event propagation.\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class DowncastDispatcher {\n\t/**\n\t * Creates a `DowncastDispatcher` instance.\n\t *\n\t * @see module:engine/conversion/downcastdispatcher~DowncastConversionApi\n\t * @param {Object} conversionApi Additional properties for interface that will be passed to events fired\n\t * by `DowncastDispatcher`.\n\t */\n\tconstructor( conversionApi ) {\n\t\t/**\n\t\t * Interface passed by dispatcher to the events callbacks.\n\t\t *\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastConversionApi}\n\t\t */\n\t\tthis.conversionApi = extend( { dispatcher: this }, conversionApi );\n\t}\n\n\t/**\n\t * Takes {@link module:engine/model/differ~Differ model differ} object with buffered changes and fires conversion basing on it.\n\t *\n\t * @param {module:engine/model/differ~Differ} differ Differ object with buffered changes.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Markers connected with converted model.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertChanges( differ, markers, writer ) {\n\t\t// Before the view is updated, remove markers which have changed.\n\t\tfor ( const change of differ.getMarkersToRemove() ) {\n\t\t\tthis.convertMarkerRemove( change.name, change.range, writer );\n\t\t}\n\n\t\t// Convert changes that happened on model tree.\n\t\tfor ( const entry of differ.getChanges() ) {\n\t\t\tif ( entry.type == 'insert' ) {\n\t\t\t\tthis.convertInsert( Range._createFromPositionAndShift( entry.position, entry.length ), writer );\n\t\t\t} else if ( entry.type == 'remove' ) {\n\t\t\t\tthis.convertRemove( entry.position, entry.length, entry.name, writer );\n\t\t\t} else {\n\t\t\t\t// entry.type == 'attribute'.\n\t\t\t\tthis.convertAttribute( entry.range, entry.attributeKey, entry.attributeOldValue, entry.attributeNewValue, writer );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const markerName of this.conversionApi.mapper.flushUnboundMarkerNames() ) {\n\t\t\tconst markerRange = markers.get( markerName ).getRange();\n\n\t\t\tthis.convertMarkerRemove( markerName, markerRange, writer );\n\t\t\tthis.convertMarkerAdd( markerName, markerRange, writer );\n\t\t}\n\n\t\t// After the view is updated, convert markers which have changed.\n\t\tfor ( const change of differ.getMarkersToAdd() ) {\n\t\t\tthis.convertMarkerAdd( change.name, change.range, writer );\n\t\t}\n\t}\n\n\t/**\n\t * Starts conversion of a range insertion.\n\t *\n\t * For each node in the range, {@link #event:insert insert event is fired}. For each attribute on each node,\n\t * {@link #event:attribute attribute event is fired}.\n\t *\n\t * @fires insert\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Inserted range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertInsert( range, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list of things that can be consumed, consisting of nodes and their attributes.\n\t\tthis.conversionApi.consumable = this._createInsertConsumable( range );\n\n\t\t// Fire a separate insert event for each node and text fragment contained in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range._createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange\n\t\t\t};\n\n\t\t\tthis._testAndFire( 'insert', data );\n\n\t\t\t// Fire a separate addAttribute event for each attribute that was set on inserted items.\n\t\t\t// This is important because most attributes converters will listen only to add/change/removeAttribute events.\n\t\t\t// If we would not add this part, attributes on inserted nodes would not be converted.\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tdata.attributeKey = key;\n\t\t\t\tdata.attributeOldValue = null;\n\t\t\t\tdata.attributeNewValue = item.getAttribute( key );\n\n\t\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of a single node removal. Fires {@link #event:remove remove event} with provided data.\n\t *\n\t * @param {module:engine/model/position~Position} position Position from which node was removed.\n\t * @param {Number} length Offset size of removed node.\n\t * @param {String} name Name of removed node.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertRemove( position, length, name, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'remove:' + name, { position, length }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts conversion of attribute change on given `range`.\n\t *\n\t * For each node in the given `range`, {@link #event:attribute attribute event} is fired with the passed data.\n\t *\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Changed range.\n\t * @param {String} key Key of the attribute that has changed.\n\t * @param {*} oldValue Attribute value before the change or `null` if the attribute has not been set before.\n\t * @param {*} newValue New attribute value or `null` if the attribute has been removed.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertAttribute( range, key, oldValue, newValue, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list with attributes to consume.\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( range, `attribute:${ key }` );\n\n\t\t// Create a separate attribute event for each node in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range._createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\tattributeNewValue: newValue\n\t\t\t};\n\n\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts model selection conversion.\n\t *\n\t * Fires events for given {@link module:engine/model/selection~Selection selection} to start selection conversion.\n\t *\n\t * @fires selection\n\t * @fires addMarker\n\t * @fires attribute\n\t * @param {module:engine/model/selection~Selection} selection Selection to convert.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Markers connected with converted model.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertSelection( selection, markers, writer ) {\n\t\tconst markersAtSelection = Array.from( markers.getMarkersAtPosition( selection.getFirstPosition() ) );\n\n\t\tthis.conversionApi.writer = writer;\n\t\tthis.conversionApi.consumable = this._createSelectionConsumable( selection, markersAtSelection );\n\n\t\tthis.fire( 'selection', { selection }, this.conversionApi );\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const marker of markersAtSelection ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tif ( !shouldMarkerChangeBeConverted( selection.getFirstPosition(), marker, this.conversionApi.mapper ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\tmarkerName: marker.name,\n\t\t\t\tmarkerRange\n\t\t\t};\n\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'addMarker:' + marker.name ) ) {\n\t\t\t\tthis.fire( 'addMarker:' + marker.name, data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\trange: selection.getFirstRange(),\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: selection.getAttribute( key )\n\t\t\t};\n\n\t\t\t// Do not fire event if the attribute has been consumed.\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'attribute:' + data.attributeKey ) ) {\n\t\t\t\tthis.fire( 'attribute:' + data.attributeKey + ':$text', data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Converts added marker. Fires {@link #event:addMarker addMarker} event for each item\n\t * in marker's range. If range is collapsed single event is dispatched. See event description for more details.\n\t *\n\t * @fires addMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange Marker range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertMarkerAdd( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n\t\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// In markers' case, event name == consumable name.\n\t\tconst eventName = 'addMarker:' + markerName;\n\n\t\t//\n\t\t// First, fire an event for the whole marker.\n\t\t//\n\t\tconst consumable = new Consumable();\n\t\tconsumable.add( markerRange, eventName );\n\n\t\tthis.conversionApi.consumable = consumable;\n\n\t\tthis.fire( eventName, { markerName, markerRange }, this.conversionApi );\n\n\t\t//\n\t\t// Do not fire events for each item inside the range if the range got consumed.\n\t\t//\n\t\tif ( !consumable.test( markerRange, eventName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// Then, fire an event for each item inside the marker range.\n\t\t//\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( markerRange, eventName );\n\n\t\tfor ( const item of markerRange.getItems() ) {\n\t\t\t// Do not fire event for already consumed items.\n\t\t\tif ( !this.conversionApi.consumable.test( item, eventName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = { item, range: Range._createOn( item ), markerName, markerRange };\n\n\t\t\tthis.fire( eventName, data, this.conversionApi );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of marker removal. Fires {@link #event:removeMarker removeMarker} event with provided data.\n\t *\n\t * @fires removeMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange Marker range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertMarkerRemove( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n\t\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'removeMarker:' + markerName, { markerName, markerRange }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume from given range,\n\t * assuming that the range has just been inserted to the model.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Inserted range.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createInsertConsumable( range ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\n\t\t\tconsumable.add( item, 'insert' );\n\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tconsumable.add( item, 'attribute:' + key );\n\t\t\t}\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume for given range.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Affected range.\n\t * @param {String} type Consumable type.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createConsumableForRange( range, type ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const item of range.getItems() ) {\n\t\t\tconsumable.add( item, type );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with selection consumable values.\n\t *\n\t * @private\n\t * @param {module:engine/model/selection~Selection} selection Selection to create consumable from.\n\t * @param {Iterable.<module:engine/model/markercollection~Marker>} markers Markers which contains selection.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createSelectionConsumable( selection, markers ) {\n\t\tconst consumable = new Consumable();\n\n\t\tconsumable.add( selection, 'selection' );\n\n\t\tfor ( const marker of markers ) {\n\t\t\tconsumable.add( selection, 'addMarker:' + marker.name );\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconsumable.add( selection, 'attribute:' + key );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Tests passed `consumable` to check whether given event can be fired and if so, fires it.\n\t *\n\t * @private\n\t * @fires insert\n\t * @fires attribute\n\t * @param {String} type Event type.\n\t * @param {Object} data Event data.\n\t */\n\t_testAndFire( type, data ) {\n\t\tif ( !this.conversionApi.consumable.test( data.item, type ) ) {\n\t\t\t// Do not fire event if the item was consumed.\n\t\t\treturn;\n\t\t}\n\n\t\tconst name = data.item.name || '$text';\n\n\t\tthis.fire( type + ':' + name, data, this.conversionApi );\n\t}\n\n\t/**\n\t * Clears conversion API object.\n\t *\n\t * @private\n\t */\n\t_clearConversionApi() {\n\t\tdelete this.conversionApi.writer;\n\t\tdelete this.conversionApi.consumable;\n\t}\n\n\t/**\n\t * Fired for inserted nodes.\n\t *\n\t * `insert` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `insert:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been inserted,\n\t * or {@link module:engine/model/element~Element#name name} of inserted element.\n\t *\n\t * This way listeners can either listen to a general `insert` event or specific event (for example `insert:paragraph`).\n\t *\n\t * @event insert\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item} data.item Inserted item.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over inserted item.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for removed nodes.\n\t *\n\t * `remove` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `remove:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been removed,\n\t * or the {@link module:engine/model/element~Element#name name} of removed element.\n\t *\n\t * This way listeners can either listen to a general `remove` event or specific event (for example `remove:paragraph`).\n\t *\n\t * @event remove\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/position~Position} data.position Position from which the node has been removed.\n\t * @param {Number} data.length Offset size of the removed node.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired in the following cases:\n\t *\n\t * * when an attribute has been added, changed, or removed from a node,\n\t * * when a node with an attribute is inserted,\n\t * * when collapsed model selection attribute is converted.\n\t *\n\t * `attribute` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `attribute:attributeKey:name`. `attributeKey` is the key of added/changed/removed attribute.\n\t * `name` is either `'$text'` if change was on {@link module:engine/model/text~Text a text node},\n\t * or the {@link module:engine/model/element~Element#name name} of element which attribute has changed.\n\t *\n\t * This way listeners can either listen to a general `attribute:bold` event or specific event (for example `attribute:src:image`).\n\t *\n\t * @event attribute\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/documentselection~DocumentSelection} data.item Changed item\n\t * or converted selection.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over changed item or selection range.\n\t * @param {String} data.attributeKey Attribute key.\n\t * @param {*} data.attributeOldValue Attribute value before the change. This is `null` when selection attribute is converted.\n\t * @param {*} data.attributeNewValue New attribute value.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for {@link module:engine/model/selection~Selection selection} changes.\n\t *\n\t * @event selection\n\t * @param {module:engine/model/selection~Selection} selection Selection that is converted.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when a new marker is added to the model. Also fired when collapsed model selection that is inside marker is converted.\n\t *\n\t * `addMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `addMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `addMarker:foo` or `addMarker:foo:abc` and\n\t * `addMarker:foo:bar` events.\n\t *\n\t * If the marker range is not collapsed:\n\t *\n\t * * the event is fired for each item in the marker range one by one,\n\t * * `conversionApi.consumable` includes each item of the marker range and the consumable value is same as event name.\n\t *\n\t * If the marker range is collapsed:\n\t *\n\t * * there is only one event,\n\t * * `conversionApi.consumable` includes marker range with event name.\n\t *\n\t * If selection inside a marker is converted:\n\t *\n\t * * there is only one event,\n\t * * `conversionApi.consumable` includes selection instance with event name.\n\t *\n\t * @event addMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection} data.item Item inside the new marker or\n\t * the selection that is being converted.\n\t * @param {module:engine/model/range~Range} [data.range] Range spanning over converted item. Available only in marker conversion, if\n\t * the marker range was not collapsed.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when marker is removed from the model.\n\t *\n\t * `removeMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `removeMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `removeMarker:foo` or `removeMarker:foo:abc` and\n\t * `removeMarker:foo:bar` events.\n\t *\n\t * @event removeMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n}\n\nmix( DowncastDispatcher, EmitterMixin );\n\n// Helper function, checks whether change of `marker` at `modelPosition` should be converted. Marker changes are not\n// converted if they happen inside an element with custom conversion method.\n//\n// @param {module:engine/model/position~Position} modelPosition\n// @param {module:engine/model/markercollection~Marker} marker\n// @param {module:engine/conversion/mapper~Mapper} mapper\n// @returns {Boolean}\nfunction shouldMarkerChangeBeConverted( modelPosition, marker, mapper ) {\n\tconst range = marker.getRange();\n\tconst ancestors = Array.from( modelPosition.getAncestors() );\n\tancestors.shift(); // Remove root element. It cannot be passed to `model.Range#containsItem`.\n\tancestors.reverse();\n\n\tconst hasCustomHandling = ancestors.some( element => {\n\t\tif ( range.containsItem( element ) ) {\n\t\t\tconst viewElement = mapper.toViewElement( element );\n\n\t\t\treturn !!viewElement.getCustomProperty( 'addHighlight' );\n\t\t}\n\t} );\n\n\treturn !hasCustomHandling;\n}\n\n/**\n * Conversion interface that is registered for given {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * and is passed as one of parameters when {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher dispatcher}\n * fires it's events.\n *\n * @interface module:engine/conversion/downcastdispatcher~DowncastConversionApi\n */\n\n/**\n * The {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} instance.\n *\n * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #dispatcher\n */\n\n/**\n * Stores information about what parts of processed model item are still waiting to be handled. After a piece of model item\n * was converted, appropriate consumable value should be {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n *\n * @member {module:engine/conversion/modelconsumable~ModelConsumable} #consumable\n */\n\n/**\n * The {@link module:engine/conversion/mapper~Mapper} instance.\n *\n * @member {module:engine/conversion/mapper~Mapper} #mapper\n */\n\n/**\n * The {@link module:engine/view/downcastwriter~DowncastWriter} instance used to manipulate data during conversion.\n *\n * @member {module:engine/view/downcastwriter~DowncastWriter} #writer\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/selection\n */\n\nimport Position from './position';\nimport Element from './element';\nimport Node from './node';\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Selection is a set of {@link module:engine/model/range~Range ranges}. It has a direction specified by its\n * {@link module:engine/model/selection~Selection#anchor anchor} and {@link module:engine/model/selection~Selection#focus focus}\n * (it can be {@link module:engine/model/selection~Selection#isBackward forward or backward}).\n * Additionally, selection may have its own attributes (think – whether text typed in in this selection\n * should have those attributes – e.g. whether you type a bolded text).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Selection {\n\t/**\n\t * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n\t * or creates an empty selection if no arguments were passed.\n\t *\n\t *\t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\tconst selection = writer.createSelection( documentSelection );\n\t *\n\t *\t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates selection at the given offset in the given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * Selection's constructor allow passing additional options (`'backward'`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tconstructor( selectable, placeOrOffset, options ) {\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Stores selection ranges.\n\t\t *\n\t\t * @protected\n\t\t * @type {Array.<module:engine/model/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * List of attributes set on current selection.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map.<String,*>}\n\t\t */\n\t\tthis._attrs = new Map();\n\n\t\tif ( selectable ) {\n\t\t\tthis.setTo( selectable, placeOrOffset, options );\n\t\t}\n\t}\n\n\t/**\n\t * Selection anchor. Anchor is the position from which the selection was started. If a user is making a selection\n\t * by dragging the mouse, the anchor is where the user pressed the mouse button (the beggining of the selection).\n\t *\n\t * Anchor and {@link #focus} define the direction of the selection, which is important\n\t * when expanding/shrinking selection. The focus moves, while the anchor should remain in the same place.\n\t *\n\t * Anchor is always set to the {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the last of selection's ranges. Whether it is\n\t * the `start` or `end` depends on the specified `options.backward`. See the {@link #setTo `setTo()`} method.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.end : range.start;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Selection focus. Focus is the position where the selection ends. If a user is making a selection\n\t * by dragging the mouse, the focus is where the mouse cursor is.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.start : range.end;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Whether the selection is collapsed. Selection is collapsed when there is exactly one range in it\n\t * and it is collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\tif ( length === 1 ) {\n\t\t\treturn this._ranges[ 0 ].isCollapsed;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the number of ranges in the selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the selection's {@link #focus} precedes the selection's {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * Checks whether this selection is equal to the given selection. Selections are equal if they have the same directions,\n\t * the same number of ranges and all ranges from one selection equal to ranges from the another selection.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns an iterable object that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield new Range( range.start, range.end );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? new Range( first.start, first.end ) : null;\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? new Range( last.start, last.end ) : null;\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst first = this.getFirstRange();\n\n\t\treturn first ? first.start.clone() : null;\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? lastRange.end.clone() : null;\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable}.\n\t *\n\t *\t\t// Removes all selection's ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tselection.setTo( ranges );\n\t *\n\t *\t\t// Sets selection to other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t *\t\t// Sets selection to the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = new DocumentSelection( doc );\n\t *\t\tselection.setTo( documentSelection );\n\t *\n\t *\t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t *\t\t// Sets collapsed selection at the position of the given node and an offset.\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t *\t\tselection.setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tselection.setTo( paragraph, 'on' );\n\t *\n\t * `Selection#setTo()`' method allow passing additional options (`backward`) as the last argument.\n\t *\n\t *\t\t// Sets backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tsetTo( selectable, placeOrOffset, options ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t} else if ( selectable instanceof Selection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable && typeof selectable.getRanges == 'function' ) {\n\t\t\t// We assume that the selectable is a DocumentSelection.\n\t\t\t// It can't be imported here, because it would lead to circular imports.\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], !!placeOrOffset && !!placeOrOffset.backward );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t} else if ( selectable instanceof Node ) {\n\t\t\tconst backward = !!options && !!options.backward;\n\t\t\tlet range;\n\n\t\t\tif ( placeOrOffset == 'in' ) {\n\t\t\t\trange = Range._createIn( selectable );\n\t\t\t} else if ( placeOrOffset == 'on' ) {\n\t\t\t\trange = Range._createOn( selectable );\n\t\t\t} else if ( placeOrOffset !== undefined ) {\n\t\t\t\trange = new Range( Position._createAt( selectable, placeOrOffset ) );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * selection.setTo requires the second parameter when the first parameter is a node.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-setTo-required-second-parameter\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-setTo-required-second-parameter: ' +\n\t\t\t\t\t'selection.setTo requires the second parameter when the first parameter is a node.',\n\t\t\t\t\t[ this, selectable ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis._setRanges( [ range ], backward );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\tthis._setRanges( selectable, placeOrOffset && !!placeOrOffset.backward );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set the selection to the given place.\n\t\t\t *\n\t\t\t * Invalid parameters were specified when setting the selection. Common issues:\n\t\t\t *\n\t\t\t * * A {@link module:engine/model/textproxy~TextProxy} instance was passed instead of\n\t\t\t * a real {@link module:engine/model/text~Text}.\n\t\t\t * * View nodes were passed instead of model nodes.\n\t\t\t * * `null`/`undefined` was passed.\n\t\t\t *\n\t\t\t * @error model-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-selection-setTo-not-selectable: Cannot set the selection to the given place.',\n\t\t\t\t[ this, selectable ]\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and\n\t * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.\n\t *\n\t * @protected\n\t * @fires change:range\n\t * @param {Iterable.<module:engine/model/range~Range>} newRanges Ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end (`false`)\n\t * or backward - from end to start (`true`).\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\tnewRanges = Array.from( newRanges );\n\n\t\t// Check whether there is any range in new ranges set that is different than all already added ranges.\n\t\tconst anyNewRange = newRanges.some( newRange => {\n\t\t\tif ( !( newRange instanceof Range ) ) {\n\t\t\t\t/**\n\t\t\t\t * Selection range set to an object that is not an instance of {@link module:engine/model/range~Range}.\n\t\t\t\t *\n\t\t\t\t * Only {@link module:engine/model/range~Range} instances can be used to set a selection.\n\t\t\t\t * Common mistakes leading to this error are:\n\t\t\t\t *\n\t\t\t\t * * using DOM `Range` object,\n\t\t\t\t * * incorrect CKEditor 5 installation with multiple `ckeditor5-engine` packages having different versions.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-set-ranges-not-range\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-set-ranges-not-range: ' +\n\t\t\t\t\t'Selection range set to an object that is not an instance of model.Range.',\n\t\t\t\t\t[ this, newRanges ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this._ranges.every( oldRange => {\n\t\t\t\treturn !oldRange.isEqual( newRange );\n\t\t\t} );\n\t\t} );\n\n\t\t// Don't do anything if nothing changed.\n\t\tif ( newRanges.length === this._ranges.length && !anyNewRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._removeAllRanges();\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._pushRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @fires change:range\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error model-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.',\n\t\t\t\t[ this, itemOrPosition ]\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tif ( this._ranges.length ) {\n\t\t\tthis._popRange();\n\t\t}\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._pushRange( new Range( newFocus, anchor ) );\n\t\t\tthis._lastRangeBackward = true;\n\t\t} else {\n\t\t\tthis._pushRange( new Range( anchor, newFocus ) );\n\t\t\tthis._lastRangeBackward = false;\n\t\t}\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t *\n\t * If given attribute was set on the selection, fires the {@link #event:change:range} event with\n\t * removed attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to remove.\n\t */\n\tremoveAttribute( key ) {\n\t\tif ( this.hasAttribute( key ) ) {\n\t\t\tthis._attrs.delete( key );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * If the attribute value has changed, fires the {@link #event:change:range} event with\n\t * the attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\tsetAttribute( key, value ) {\n\t\tif ( this.getAttribute( key ) !== value ) {\n\t\t\tthis._attrs.set( key, value );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = this.getFirstRange();\n\t\tconst nodeAfterStart = range.start.nodeAfter;\n\t\tconst nodeBeforeEnd = range.end.nodeBefore;\n\n\t\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'model:selection' ); // -> true\n\t *\n\t *\t\tselection.is( 'view:selection' ); // -> false\n\t *\t\tselection.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' || type == 'model:selection';\n\t}\n\n\t/**\n\t * Gets elements of type \"block\" touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` always returns the deepest block.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs:\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<quote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</quote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\t* getSelectedBlocks() {\n\t\tconst visited = new WeakSet();\n\n\t\tfor ( const range of this.getRanges() ) {\n\t\t\tconst startBlock = getParentBlock( range.start, visited );\n\n\t\t\tif ( startBlock ) {\n\t\t\t\tyield startBlock;\n\t\t\t}\n\n\t\t\tfor ( const value of range.getWalker() ) {\n\t\t\t\tif ( value.type == 'elementEnd' && isUnvisitedBlockContainer( value.item, visited ) ) {\n\t\t\t\t\tyield value.item;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst endBlock = getParentBlock( range.end, visited );\n\n\t\t\t// #984. Don't return the end block if the range ends right at its beginning.\n\t\t\tif ( endBlock && !range.end.isTouching( Position._createAt( endBlock, 0 ) ) ) {\n\t\t\t\tyield endBlock;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns blocks that aren't nested in other selected blocks.\n\t *\n\t * In this case the method will return blocks A, B and E because C & D are children of block B:\n\t *\n\t *\t\t[<blockA></blockA>\n\t *\t\t<blockB>\n\t *\t\t\t<blockC></blockC>\n\t *\t\t\t<blockD></blockD>\n\t *\t\t</blockB>\n\t *\t\t<blockE></blockE>]\n\t *\n\t * **Note:** To get all selected blocks use {@link #getSelectedBlocks `getSelectedBlocks()`}.\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\t* getTopMostBlocks() {\n\t\tconst selected = Array.from( this.getSelectedBlocks() );\n\n\t\tfor ( const block of selected ) {\n\t\t\tconst parentBlock = findAncestorBlock( block );\n\n\t\t\t// Filter out blocks that are nested in other selected blocks (like paragraphs in tables).\n\t\t\tif ( !parentBlock || !selected.includes( parentBlock ) ) {\n\t\t\t\tyield block;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element = this.anchor.root ) {\n\t\tconst limitStartPosition = Position._createAt( element, 0 );\n\t\tconst limitEndPosition = Position._createAt( element, 'end' );\n\n\t\treturn limitStartPosition.isTouching( this.getFirstPosition() ) &&\n\t\t\tlimitEndPosition.isTouching( this.getLastPosition() );\n\t}\n\n\t/**\n\t * Adds given range to internal {@link #_ranges ranges array}. Throws an error\n\t * if given range is intersecting with any range that is already stored in this selection.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to add.\n\t */\n\t_pushRange( range ) {\n\t\tthis._checkRange( range );\n\t\tthis._ranges.push( new Range( range.start, range.end ) );\n\t}\n\n\t/**\n\t * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to check.\n\t */\n\t_checkRange( range ) {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tif ( range.isIntersecting( this._ranges[ i ] ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range in the selection.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-range-intersects\n\t\t\t\t * @param {module:engine/model/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/model/range~Range} intersectingRange Range in the selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-range-intersects: Trying to add a range that intersects with another range in the selection.',\n\t\t\t\t\t[ this, range ],\n\t\t\t\t\t{ addedRange: range, intersectingRange: this._ranges[ i ] }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to\n\t * ensure proper ranges removal.\n\t *\n\t * @protected\n\t */\n\t_removeAllRanges() {\n\t\twhile ( this._ranges.length > 0 ) {\n\t\t\tthis._popRange();\n\t\t}\n\t}\n\n\t/**\n\t * Removes most recently added range from the selection.\n\t *\n\t * @protected\n\t */\n\t_popRange() {\n\t\tthis._ranges.pop();\n\t}\n\n\t/**\n\t * Fired when selection range(s) changed.\n\t *\n\t * @event change:range\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n\t * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed because the structure of the model has been changed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t */\n\n\t/**\n\t * Fired when selection attribute changed.\n\t *\n\t * @event change:attribute\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n\t * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed in the model and its attributes were refreshed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n\t */\n}\n\nmix( Selection, EmitterMixin );\n\n// Checks whether the given element extends $block in the schema and has a parent (is not a root).\n// Marks it as already visited.\nfunction isUnvisitedBlockContainer( element, visited ) {\n\tif ( visited.has( element ) ) {\n\t\treturn false;\n\t}\n\n\tvisited.add( element );\n\n\treturn element.document.model.schema.isBlock( element ) && element.parent;\n}\n\n// Finds the lowest element in position's ancestors which is a block.\n// It will search until first ancestor that is a limit element.\n// Marks all ancestors as already visited to not include any of them later on.\nfunction getParentBlock( position, visited ) {\n\tconst schema = position.parent.document.model.schema;\n\n\tconst ancestors = position.parent.getAncestors( { parentFirst: true, includeSelf: true } );\n\n\tlet hasParentLimit = false;\n\n\tconst block = ancestors.find( element => {\n\t\t// Stop searching after first parent node that is limit element.\n\t\tif ( hasParentLimit ) {\n\t\t\treturn false;\n\t\t}\n\n\t\thasParentLimit = schema.isLimit( element );\n\n\t\treturn !hasParentLimit && isUnvisitedBlockContainer( element, visited );\n\t} );\n\n\t// Mark all ancestors of this position's parent, because find() might've stopped early and\n\t// the found block may be a child of another block.\n\tancestors.forEach( element => visited.add( element ) );\n\n\treturn block;\n}\n\n// Returns first ancestor block of a node.\n//\n// @param {module:engine/model/node~Node} node\n// @returns {module:engine/model/node~Node|undefined}\nfunction findAncestorBlock( node ) {\n\tconst schema = node.document.model.schema;\n\n\tlet parent = node.parent;\n\n\twhile ( parent ) {\n\t\tif ( schema.isBlock( parent ) ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n}\n\n/**\n * An entity that is used to set selection.\n *\n * See also {@link module:engine/model/selection~Selection#setTo}\n *\n * @typedef {\n *     module:engine/model/selection~Selection|\n *     module:engine/model/documentselection~DocumentSelection|\n *     module:engine/model/position~Position|\n *     module:engine/model/range~Range|\n *     module:engine/model/node~Node|\n *     Iterable.<module:engine/model/range~Range>|\n *     null\n * } module:engine/model/selection~Selectable\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/documentselection\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\nimport Selection from './selection';\nimport LiveRange from './liverange';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n\nconst storePrefix = 'selection:';\n\n/**\n * `DocumentSelection` is a special selection which is used as the\n * {@link module:engine/model/document~Document#selection document's selection}.\n * There can be only one instance of `DocumentSelection` per document.\n *\n * Document selection can only be changed by using the {@link module:engine/model/writer~Writer} instance\n * inside the {@link module:engine/model/model~Model#change `change()`} block, as it provides a secure way to modify model.\n *\n * `DocumentSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `DocumentSelection` are:\n * * there is always a range in `DocumentSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `DocumentSelection` are updated automatically according to selection ranges.\n *\n * Since `DocumentSelection` uses {@link module:engine/model/liverange~LiveRange live ranges}\n * and is updated when {@link module:engine/model/document~Document document}\n * changes, it cannot be set on {@link module:engine/model/node~Node nodes}\n * that are inside {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n * If you need to represent a selection in document fragment,\n * use {@link module:engine/model/selection~Selection Selection class} instead.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class DocumentSelection {\n\t/**\n\t * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document which owns this selection.\n\t */\n\tconstructor( doc ) {\n\t\t/**\n\t\t * Selection used internally by that class (`DocumentSelection` is a proxy to that selection).\n\t\t *\n\t\t * @protected\n\t\t */\n\t\tthis._selection = new LiveSelection( doc );\n\n\t\tthis._selection.delegate( 'change:range' ).to( this );\n\t\tthis._selection.delegate( 'change:attribute' ).to( this );\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this._selection.isCollapsed;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\n\t * Together with {@link #focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the most recently added range.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\treturn this._selection.anchor;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\treturn this._selection.focus;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._selection.rangeCount;\n\t}\n\n\t/**\n\t * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to\n\t * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget hasOwnRange() {\n\t\treturn this._selection.hasOwnRange;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus}\n\t * precedes {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn this._selection.isBackward;\n\t}\n\n\t/**\n\t * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.\n\t *\n\t * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\n\t *\n\t * @readonly\n\t * @returns {Boolean}\n\t */\n\tget isGravityOverridden() {\n\t\treturn this._selection.isGravityOverridden;\n\t}\n\n\t/**\n\t * A collection of selection markers.\n\t * Marker is a selection marker when selection range is inside the marker range.\n\t *\n\t * @readonly\n\t * @type {module:utils/collection~Collection.<module:engine/model/markercollection~Marker>}\n\t */\n\tget markers() {\n\t\treturn this._selection.markers;\n\t}\n\n\t/**\n\t * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.\n\t *\n\t * @protected\n\t */\n\tget _ranges() {\n\t\treturn this._selection._ranges;\n\t}\n\n\t/**\n\t * Returns an iterable that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\tgetRanges() {\n\t\treturn this._selection.getRanges();\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\treturn this._selection.getFirstPosition();\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\treturn this._selection.getLastPosition();\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\treturn this._selection.getFirstRange();\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\treturn this._selection.getLastRange();\n\t}\n\n\t/**\n\t * Gets elements of type \"block\" touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` always returns the deepest block.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs:\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<quote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</quote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\tgetSelectedBlocks() {\n\t\treturn this._selection.getSelectedBlocks();\n\t}\n\n\t/**\n\t * Returns blocks that aren't nested in other selected blocks.\n\t *\n\t * In this case the method will return blocks A, B and E because C & D are children of block B:\n\t *\n\t *\t\t[<blockA></blockA>\n\t *\t\t<blockB>\n\t *\t\t\t<blockC></blockC>\n\t *\t\t\t<blockD></blockD>\n\t *\t\t</blockB>\n\t *\t\t<blockE></blockE>]\n\t *\n\t * **Note:** To get all selected blocks use {@link #getSelectedBlocks `getSelectedBlocks()`}.\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\tgetTopMostBlocks() {\n\t\treturn this._selection.getTopMostBlocks();\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\treturn this._selection.getSelectedElement();\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element ) {\n\t\treturn this._selection.containsEntireContent( element );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by document selection.\n\t */\n\tdestroy() {\n\t\tthis._selection.destroy();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._selection.getAttributeKeys();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._selection.getAttributes();\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._selection.getAttribute( key );\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._selection.hasAttribute( key );\n\t}\n\n\t/**\n\t * Refreshes selection attributes and markers according to the current position in the model.\n\t */\n\trefresh() {\n\t\tthis._selection._updateMarkers();\n\t\tthis._selection._updateAttributes( false );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'documentSelection' ); // -> true\n\t *\t\tselection.is( 'model:selection' ); // -> true\n\t *\t\tselection.is( 'model:documentSelection' ); // -> true\n\t *\n\t *\t\tselection.is( 'view:selection' ); // -> false\n\t *\t\tselection.is( 'element' ); // -> false\n\t *\t\tselection.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' ||\n\t\t\ttype == 'model:selection' ||\n\t\t\ttype == 'documentSelection' ||\n\t\t\ttype == 'model:documentSelection';\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionFocus\n\t * @protected\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tthis._selection.setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable}.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelection\n\t * @protected\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\t_setTo( selectable, placeOrOffset, options ) {\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\t_setAttribute( key, value ) {\n\t\tthis._selection.setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change:range}\n\t * event with removed attribute key.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#removeSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._selection.removeAttribute( key );\n\t}\n\n\t/**\n\t * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t *\n\t * @protected\n\t * @returns {Iterable.<*>}\n\t */\n\t_getStoredAttributes() {\n\t\treturn this._selection._getStoredAttributes();\n\t}\n\n\t/**\n\t * Temporarily changes the gravity of the selection from the left to the right.\n\t *\n\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left\n\t * gravity, the selection (after being moved by the the user) inherits attributes from its left hand side.\n\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\n\t *\n\t * It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n\t * of the process.\n\t *\n\t * @see module:engine/model/writer~Writer#overrideSelectionGravity\n\t * @protected\n\t * @returns {String} The unique id which allows restoring the gravity.\n\t */\n\t_overrideGravity() {\n\t\treturn this._selection.overrideGravity();\n\t}\n\n\t/**\n\t * Restores the {@link ~DocumentSelection#_overrideGravity overridden gravity}.\n\t *\n\t * Restoring the gravity is only possible using the unique identifier returned by\n\t * {@link ~DocumentSelection#_overrideGravity}. Note that the gravity remains overridden as long as won't be restored\n\t * the same number of times it was overridden.\n\t *\n\t * @see module:engine/model/writer~Writer#restoreSelectionGravity\n\t * @protected\n\t * @param {String} uid The unique id returned by {@link #_overrideGravity}.\n\t */\n\t_restoreGravity( uid ) {\n\t\tthis._selection.restoreGravity( uid );\n\t}\n\n\t/**\n\t * Generates and returns an attribute key for selection attributes store, basing on original attribute key.\n\t *\n\t * @protected\n\t * @param {String} key Attribute key to convert.\n\t * @returns {String} Converted attribute key, applicable for selection store.\n\t */\n\tstatic _getStoreAttributeKey( key ) {\n\t\treturn storePrefix + key;\n\t}\n\n\t/**\n\t * Checks whether the given attribute key is an attribute stored on an element.\n\t *\n\t * @protected\n\t * @param {String} key\n\t * @returns {Boolean}\n\t */\n\tstatic _isStoreAttributeKey( key ) {\n\t\treturn key.startsWith( storePrefix );\n\t}\n}\n\nmix( DocumentSelection, EmitterMixin );\n\n/**\n * Fired when selection range(s) changed.\n *\n * @event change:range\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed because the structure of the model has been changed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n */\n\n/**\n * Fired when selection attribute changed.\n *\n * @event change:attribute\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed in the model and its attributes were refreshed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n */\n\n// `LiveSelection` is used internally by {@link module:engine/model/documentselection~DocumentSelection} and shouldn't be used directly.\n//\n// LiveSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n// to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n//\n// Differences between {@link module:engine/model/selection~Selection} and `LiveSelection` are:\n// * there is always a range in `LiveSelection` - even if no ranges were added there is a \"default range\"\n// present in the selection,\n// * ranges added to this selection updates automatically when the document changes,\n// * attributes of `LiveSelection` are updated automatically according to selection ranges.\n//\n// @extends module:engine/model/selection~Selection\n//\n\nclass LiveSelection extends Selection {\n\t// Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t// @param {module:engine/model/document~Document} doc Document which owns this selection.\n\tconstructor( doc ) {\n\t\tsuper();\n\n\t\t// List of selection markers.\n\t\t// Marker is a selection marker when selection range is inside the marker range.\n\t\t//\n\t\t// @type {module:utils/collection~Collection}\n\t\tthis.markers = new Collection( { idProperty: 'name' } );\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/model~Model}\n\t\tthis._model = doc.model;\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/document~Document}\n\t\tthis._document = doc;\n\n\t\t// Keeps mapping of attribute name to priority with which the attribute got modified (added/changed/removed)\n\t\t// last time. Possible values of priority are: `'low'` and `'normal'`.\n\t\t//\n\t\t// Priorities are used by internal `LiveSelection` mechanisms. All attributes set using `LiveSelection`\n\t\t// attributes API are set with `'normal'` priority.\n\t\t//\n\t\t// @private\n\t\t// @member {Map} module:engine/model/liveselection~LiveSelection#_attributePriority\n\t\tthis._attributePriority = new Map();\n\n\t\t// Contains data required to fix ranges which have been moved to the graveyard.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_fixGraveyardRangesData\n\t\tthis._fixGraveyardRangesData = [];\n\n\t\t// Flag that informs whether the selection ranges have changed. It is changed on true when `LiveRange#change:range` event is fired.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_hasChangedRange\n\t\tthis._hasChangedRange = false;\n\n\t\t// Each overriding gravity adds an UID to the set and each removal removes it.\n\t\t// Gravity is overridden when there's at least one UID in the set.\n\t\t// Gravity is restored when the set is empty.\n\t\t// This is to prevent conflicts when gravity is overridden by more than one feature at the same time.\n\t\t// @private\n\t\t// @type {Set}\n\t\tthis._overriddenGravityRegister = new Set();\n\n\t\t// Ensure selection is correct after each operation.\n\t\tthis.listenTo( this._model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation || operation.type == 'marker' || operation.type == 'rename' || operation.type == 'noop' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twhile ( this._fixGraveyardRangesData.length ) {\n\t\t\t\tconst { liveRange, sourcePosition } = this._fixGraveyardRangesData.shift();\n\n\t\t\t\tthis._fixGraveyardSelection( liveRange, sourcePosition );\n\t\t\t}\n\n\t\t\tif ( this._hasChangedRange ) {\n\t\t\t\tthis._hasChangedRange = false;\n\t\t\t\tthis.fire( 'change:range', { directChange: false } );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Ensure selection is correct and up to date after each range change.\n\t\tthis.on( 'change:range', () => {\n\t\t\tfor ( const range of this.getRanges() ) {\n\t\t\t\tif ( !this._document._validateSelectionRange( range ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Range from {@link module:engine/model/documentselection~DocumentSelection document selection}\n\t\t\t\t\t * starts or ends at incorrect position.\n\t\t\t\t\t *\n\t\t\t\t\t * @error document-selection-wrong-position\n\t\t\t\t\t * @param {module:engine/model/range~Range} range\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'document-selection-wrong-position: Range from document selection starts or ends at incorrect position.',\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t{ range }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Update markers data stored by the selection after each marker change.\n\t\tthis.listenTo( this._model.markers, 'update', () => this._updateMarkers() );\n\n\t\t// Ensure selection is up to date after each change block.\n\t\tthis.listenTo( this._document, 'change', ( evt, batch ) => {\n\t\t\tclearAttributesStoredInElement( this._model, batch );\n\t\t} );\n\t}\n\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\treturn length === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed;\n\t}\n\n\tget anchor() {\n\t\treturn super.anchor || this._document._getDefaultRange().start;\n\t}\n\n\tget focus() {\n\t\treturn super.focus || this._document._getDefaultRange().end;\n\t}\n\n\tget rangeCount() {\n\t\treturn this._ranges.length ? this._ranges.length : 1;\n\t}\n\n\t// Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to\n\t// {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t//\n\t// @readonly\n\t// @type {Boolean}\n\tget hasOwnRange() {\n\t\treturn this._ranges.length > 0;\n\t}\n\n\t// When set to `true` then selection attributes on node before the caret won't be taken\n\t// into consideration while updating selection attributes.\n\t//\n\t// @protected\n\t// @type {Boolean}\n\tget isGravityOverridden() {\n\t\treturn !!this._overriddenGravityRegister.size;\n\t}\n\n\t// Unbinds all events previously bound by live selection.\n\tdestroy() {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tthis._ranges[ i ].detach();\n\t\t}\n\n\t\tthis.stopListening();\n\t}\n\n\t* getRanges() {\n\t\tif ( this._ranges.length ) {\n\t\t\tyield* super.getRanges();\n\t\t} else {\n\t\t\tyield this._document._getDefaultRange();\n\t\t}\n\t}\n\n\tgetFirstRange() {\n\t\treturn super.getFirstRange() || this._document._getDefaultRange();\n\t}\n\n\tgetLastRange() {\n\t\treturn super.getLastRange() || this._document._getDefaultRange();\n\t}\n\n\tsetTo( selectable, optionsOrPlaceOrOffset, options ) {\n\t\tsuper.setTo( selectable, optionsOrPlaceOrOffset, options );\n\t\tthis._updateAttributes( true );\n\t}\n\n\tsetFocus( itemOrPosition, offset ) {\n\t\tsuper.setFocus( itemOrPosition, offset );\n\t\tthis._updateAttributes( true );\n\t}\n\n\tsetAttribute( key, value ) {\n\t\tif ( this._setAttribute( key, value ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\tremoveAttribute( key ) {\n\t\tif ( this._removeAttribute( key ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\toverrideGravity() {\n\t\tconst overrideUid = uid();\n\n\t\t// Remember that another overriding has been requested. It will need to be removed\n\t\t// before the gravity is to be restored.\n\t\tthis._overriddenGravityRegister.add( overrideUid );\n\n\t\tif ( this._overriddenGravityRegister.size === 1 ) {\n\t\t\tthis._updateAttributes( true );\n\t\t}\n\n\t\treturn overrideUid;\n\t}\n\n\trestoreGravity( uid ) {\n\t\tif ( !this._overriddenGravityRegister.has( uid ) ) {\n\t\t\t/**\n\t\t\t * Restoring gravity for an unknown UID is not possible. Make sure you are using a correct\n\t\t\t * UID obtained from the {@link module:engine/model/writer~Writer#overrideSelectionGravity} to restore.\n\t\t\t *\n\t\t\t * @error document-selection-gravity-wrong-restore\n\t\t\t * @param {String} uid The unique identifier returned by\n\t\t\t * {@link module:engine/model/documentselection~DocumentSelection#_overrideGravity}.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'document-selection-gravity-wrong-restore: Attempting to restore the selection gravity for an unknown UID.',\n\t\t\t\tthis,\n\t\t\t\t{ uid }\n\t\t\t);\n\t\t}\n\n\t\tthis._overriddenGravityRegister.delete( uid );\n\n\t\t// Restore gravity only when all overriding have been restored.\n\t\tif ( !this.isGravityOverridden ) {\n\t\t\tthis._updateAttributes( true );\n\t\t}\n\t}\n\n\t_popRange() {\n\t\tthis._ranges.pop().detach();\n\t}\n\n\t_pushRange( range ) {\n\t\tconst liveRange = this._prepareRange( range );\n\n\t\t// `undefined` is returned when given `range` is in graveyard root.\n\t\tif ( liveRange ) {\n\t\t\tthis._ranges.push( liveRange );\n\t\t}\n\t}\n\n\t// Prepares given range to be added to selection. Checks if it is correct,\n\t// converts it to {@link module:engine/model/liverange~LiveRange LiveRange}\n\t// and sets listeners listening to the range's change event.\n\t//\n\t// @private\n\t// @param {module:engine/model/range~Range} range\n\t_prepareRange( range ) {\n\t\tthis._checkRange( range );\n\n\t\tif ( range.root == this._document.graveyard ) {\n\t\t\t// @if CK_DEBUG // console.warn( 'Trying to add a Range that is in the graveyard root. Range rejected.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst liveRange = LiveRange.fromRange( range );\n\n\t\tliveRange.on( 'change:range', ( evt, oldRange, data ) => {\n\t\t\tthis._hasChangedRange = true;\n\n\t\t\t// If `LiveRange` is in whole moved to the graveyard, save necessary data. It will be fixed on `Model#applyOperation` event.\n\t\t\tif ( liveRange.root == this._document.graveyard ) {\n\t\t\t\tthis._fixGraveyardRangesData.push( {\n\t\t\t\t\tliveRange,\n\t\t\t\t\tsourcePosition: data.deletionPosition\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\treturn liveRange;\n\t}\n\n\t_updateMarkers() {\n\t\tconst markers = [];\n\n\t\tfor ( const marker of this._model.markers ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tfor ( const selectionRange of this.getRanges() ) {\n\t\t\t\tif ( markerRange.containsRange( selectionRange, !selectionRange.isCollapsed ) ) {\n\t\t\t\t\tmarkers.push( marker );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor ( const marker of markers ) {\n\t\t\tif ( !this.markers.has( marker ) ) {\n\t\t\t\tthis.markers.add( marker );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const marker of Array.from( this.markers ) ) {\n\t\t\tif ( !markers.includes( marker ) ) {\n\t\t\t\tthis.markers.remove( marker );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.\n\t//\n\t// @protected\n\t// @param {Boolean} clearAll\n\t// @fires change:attribute\n\t_updateAttributes( clearAll ) {\n\t\tconst newAttributes = toMap( this._getSurroundingAttributes() );\n\t\tconst oldAttributes = toMap( this.getAttributes() );\n\n\t\tif ( clearAll ) {\n\t\t\t// If `clearAll` remove all attributes and reset priorities.\n\t\t\tthis._attributePriority = new Map();\n\t\t\tthis._attrs = new Map();\n\t\t} else {\n\t\t\t// If not, remove only attributes added with `low` priority.\n\t\t\tfor ( const [ key, priority ] of this._attributePriority ) {\n\t\t\t\tif ( priority == 'low' ) {\n\t\t\t\t\tthis._attrs.delete( key );\n\t\t\t\t\tthis._attributePriority.delete( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._setAttributesTo( newAttributes );\n\n\t\t// Let's evaluate which attributes really changed.\n\t\tconst changed = [];\n\n\t\t// First, loop through all attributes that are set on selection right now.\n\t\t// Check which of them are different than old attributes.\n\t\tfor ( const [ newKey, newValue ] of this.getAttributes() ) {\n\t\t\tif ( !oldAttributes.has( newKey ) || oldAttributes.get( newKey ) !== newValue ) {\n\t\t\t\tchanged.push( newKey );\n\t\t\t}\n\t\t}\n\n\t\t// Then, check which of old attributes got removed.\n\t\tfor ( const [ oldKey ] of oldAttributes ) {\n\t\t\tif ( !this.hasAttribute( oldKey ) ) {\n\t\t\t\tchanged.push( oldKey );\n\t\t\t}\n\t\t}\n\n\t\t// Fire event with exact data (fire only if anything changed).\n\t\tif ( changed.length > 0 ) {\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: changed, directChange: false } );\n\t\t}\n\t}\n\n\t// Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {*} value Attribute value.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether value has changed.\n\t_setAttribute( key, value, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst oldValue = super.getAttribute( key );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( oldValue === value ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.set( key, value );\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// NOTE: Even if attribute is not present in the selection but is provided to this method, it's priority will\n\t// be changed according to `directChange` parameter.\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether attribute was removed. May not be true if such attributes didn't exist or the\n\t// existing attribute had higher priority.\n\t_removeAttribute( key, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( !super.hasAttribute( key ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.delete( key );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through\n\t// `directChange` parameter).\n\t//\n\t// @private\n\t// @param {Map.<String,*>} attrs Iterable object containing attributes to be set.\n\t// @returns {Set.<String>} Changed attribute keys.\n\t_setAttributesTo( attrs ) {\n\t\tconst changed = new Set();\n\n\t\tfor ( const [ oldKey, oldValue ] of this.getAttributes() ) {\n\t\t\t// Do not remove attribute if attribute with same key and value is about to be set.\n\t\t\tif ( attrs.get( oldKey ) === oldValue ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// All rest attributes will be removed so changed attributes won't change .\n\t\t\tthis._removeAttribute( oldKey, false );\n\t\t}\n\n\t\tfor ( const [ key, value ] of attrs ) {\n\t\t\t// Attribute may not be set because of attributes or because same key/value is already added.\n\t\t\tconst gotAdded = this._setAttribute( key, value, false );\n\n\t\t\tif ( gotAdded ) {\n\t\t\t\tchanged.add( key );\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\t// Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t//\n\t// @protected\n\t// @returns {Iterable.<*>}\n\t* _getStoredAttributes() {\n\t\tconst selectionParent = this.getFirstPosition().parent;\n\n\t\tif ( this.isCollapsed && selectionParent.isEmpty ) {\n\t\t\tfor ( const key of selectionParent.getAttributeKeys() ) {\n\t\t\t\tif ( key.startsWith( storePrefix ) ) {\n\t\t\t\t\tconst realKey = key.substr( storePrefix.length );\n\n\t\t\t\t\tyield [ realKey, selectionParent.getAttribute( key ) ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Checks model text nodes that are closest to the selection's first position and returns attributes of first\n\t// found element. If there are no text nodes in selection's first position parent, it returns selection\n\t// attributes stored in that parent.\n\t//\n\t// @private\n\t// @returns {Iterable.<*>} Collection of attributes.\n\t_getSurroundingAttributes() {\n\t\tconst position = this.getFirstPosition();\n\t\tconst schema = this._model.schema;\n\n\t\tlet attrs = null;\n\n\t\tif ( !this.isCollapsed ) {\n\t\t\t// 1. If selection is a range...\n\t\t\tconst range = this.getFirstRange();\n\n\t\t\t// ...look for a first character node in that range and take attributes from it.\n\t\t\tfor ( const value of range ) {\n\t\t\t\t// If the item is an object, we don't want to get attributes from its children.\n\t\t\t\tif ( value.item.is( 'element' ) && schema.isObject( value.item ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( value.type == 'text' ) {\n\t\t\t\t\tattrs = value.item.getAttributes();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// 2. If the selection is a caret or the range does not contain a character node...\n\n\t\t\tconst nodeBefore = position.textNode ? position.textNode : position.nodeBefore;\n\t\t\tconst nodeAfter = position.textNode ? position.textNode : position.nodeAfter;\n\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden ) {\n\t\t\t\t// ...look at the node before caret and take attributes from it if it is a character node.\n\t\t\t\tattrs = getAttrsIfCharacter( nodeBefore );\n\t\t\t}\n\n\t\t\t// 3. If not, look at the node after caret...\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = getAttrsIfCharacter( nodeAfter );\n\t\t\t}\n\n\t\t\t// 4. If not, try to find the first character on the left, that is in the same node.\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden && !attrs ) {\n\t\t\t\tlet node = nodeBefore;\n\n\t\t\t\twhile ( node && !attrs ) {\n\t\t\t\t\tnode = node.previousSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 5. If not found, try to find the first character on the right, that is in the same node.\n\t\t\tif ( !attrs ) {\n\t\t\t\tlet node = nodeAfter;\n\n\t\t\t\twhile ( node && !attrs ) {\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 6. If not found, selection should retrieve attributes from parent.\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = this._getStoredAttributes();\n\t\t\t}\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\t// Fixes a selection range after it ends up in graveyard root.\n\t//\n\t// @private\n\t// @param {module:engine/model/liverange~LiveRange} liveRange The range from selection, that ended up in the graveyard root.\n\t// @param {module:engine/model/position~Position} removedRangeStart Start position of a range which was removed.\n\t_fixGraveyardSelection( liveRange, removedRangeStart ) {\n\t\t// The start of the removed range is the closest position to the `liveRange` - the original selection range.\n\t\t// This is a good candidate for a fixed selection range.\n\t\tconst positionCandidate = removedRangeStart.clone();\n\n\t\t// Find a range that is a correct selection range and is closest to the start of removed range.\n\t\tconst selectionRange = this._model.schema.getNearestSelectionRange( positionCandidate );\n\n\t\t// Remove the old selection range before preparing and adding new selection range. This order is important,\n\t\t// because new range, in some cases, may intersect with old range (it depends on `getNearestSelectionRange()` result).\n\t\tconst index = this._ranges.indexOf( liveRange );\n\t\tthis._ranges.splice( index, 1 );\n\t\tliveRange.detach();\n\n\t\t// If nearest valid selection range has been found - add it in the place of old range.\n\t\tif ( selectionRange ) {\n\t\t\t// Check the range, convert it to live range, bind events, etc.\n\t\t\tconst newRange = this._prepareRange( selectionRange );\n\n\t\t\t// Add new range in the place of old range.\n\t\t\tthis._ranges.splice( index, 0, newRange );\n\t\t}\n\t\t// If nearest valid selection range cannot be found - just removing the old range is fine.\n\t}\n}\n\n// Helper function for {@link module:engine/model/liveselection~LiveSelection#_updateAttributes}.\n//\n// It takes model item, checks whether it is a text node (or text proxy) and, if so, returns it's attributes. If not, returns `null`.\n//\n// @param {module:engine/model/item~Item|null}  node\n// @returns {Boolean}\nfunction getAttrsIfCharacter( node ) {\n\tif ( node instanceof TextProxy || node instanceof Text ) {\n\t\treturn node.getAttributes();\n\t}\n\n\treturn null;\n}\n\n// Removes selection attributes from element which is not empty anymore.\n//\n// @private\n// @param {module:engine/model/model~Model} model\n// @param {module:engine/model/batch~Batch} batch\nfunction clearAttributesStoredInElement( model, batch ) {\n\tconst differ = model.document.differ;\n\n\tfor ( const entry of differ.getChanges() ) {\n\t\tif ( entry.type != 'insert' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst changeParent = entry.position.parent;\n\t\tconst isNoLongerEmpty = entry.length === changeParent.maxOffset;\n\n\t\tif ( isNoLongerEmpty ) {\n\t\t\tmodel.enqueueChange( batch, writer => {\n\t\t\t\tconst storedAttributes = Array.from( changeParent.getAttributeKeys() )\n\t\t\t\t\t.filter( key => key.startsWith( storePrefix ) );\n\n\t\t\t\tfor ( const key of storedAttributes ) {\n\t\t\t\t\twriter.removeAttribute( key, changeParent );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/conversionhelpers\n */\n\n/**\n * Base class for conversion helpers.\n */\nexport default class ConversionHelpers {\n\t/**\n\t * Creates a conversion helpers instance.\n\t *\n\t * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} dispatchers\n\t */\n\tconstructor( dispatchers ) {\n\t\tthis._dispatchers = dispatchers;\n\t}\n\n\t/**\n\t * Registers a conversion helper.\n\t *\n\t * **Note**: See full usage example in the `{@link module:engine/conversion/conversion~Conversion#for conversion.for()}`\n\t * method description.\n\t *\n\t * @param {Function} conversionHelper The function to be called on event.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers|module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\tadd( conversionHelper ) {\n\t\tfor ( const dispatcher of this._dispatchers ) {\n\t\t\tconversionHelper( dispatcher );\n\t\t}\n\n\t\treturn this;\n\t}\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Contains downcast (model-to-view) converters for {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}.\n *\n * @module engine/conversion/downcasthelpers\n */\n\nimport ModelRange from '../model/range';\nimport ModelSelection from '../model/selection';\nimport ModelElement from '../model/element';\n\nimport ViewAttributeElement from '../view/attributeelement';\nimport DocumentSelection from '../model/documentselection';\nimport ConversionHelpers from './conversionhelpers';\n\nimport { cloneDeep } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Downcast conversion helper functions.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\nexport default class DowncastHelpers extends ConversionHelpers {\n\t/**\n\t * Model element to view element conversion helper.\n\t *\n\t * This conversion results in creating a view element. For example, model `<paragraph>Foo</paragraph>` becomes `<p>Foo</p>` in the view.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'p'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'div',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'fancyParagraph',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'fancy'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'heading',\n\t *\t\t\tview: ( modelElement, viewWriter ) => {\n\t *\t\t\t\treturn viewWriter.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) )\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #elementToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model element to convert.\n\t * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n\t * that takes the model element and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n\t * as parameters and returns a view container element.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\telementToElement( config ) {\n\t\treturn this.add( downcastElementToElement( config ) );\n\t}\n\n\t/**\n\t * Model attribute to view element conversion helper.\n\t *\n\t * This conversion results in wrapping view nodes with a view attribute element. For example, a model text node with\n\t * `\"Foo\"` as data and the `bold` attribute becomes `<strong>Foo</strong>` in the view.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'strong'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'b',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'invert',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: [ 'font-light', 'bg-dark' ]\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalues: [ 'big', 'small' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tbig: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '1.2em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '0.8em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: ( modelAttributeValue, viewWriter ) => {\n\t *\t\t\t\treturn viewWriter.createAttributeElement( 'span', {\n\t *\t\t\t\t\tstyle: 'font-weight:' + modelAttributeValue\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'color',\n\t *\t\t\t\tname: '$text'\n\t *\t\t\t},\n\t *\t\t\tview: ( modelAttributeValue, viewWriter ) => {\n\t *\t\t\t\treturn viewWriter.createAttributeElement( 'span', {\n\t *\t\t\t\t\tstyle: 'color:' + modelAttributeValue\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #attributeToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n\t * of `String`s with possible values if the model attribute is an enumerable.\n\t * @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view A view element definition or a function\n\t * that takes the model attribute value and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n\t * as parameters and returns a view attribute element. If `config.model.values` is\n\t * given, `config.view` should be an object assigning values from `config.model.values` to view element definitions or functions.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tattributeToElement( config ) {\n\t\treturn this.add( downcastAttributeToElement( config ) );\n\t}\n\n\t/**\n\t * Model attribute to view attribute conversion helper.\n\t *\n\t * This conversion results in adding an attribute to a view node, basing on an attribute from a model node. For example,\n\t * `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>`.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'source',\n\t *\t\t\tview: 'src'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'source',\n\t *\t\t\tview: 'href',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'source'\n\t *\t\t\t},\n\t *\t\t\tview: 'src'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'styled',\n\t *\t\t\t\tvalues: [ 'dark', 'light' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tdark: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'styled', 'styled-dark' ]\n\t *\t\t\t\t},\n\t *\t\t\t\tlight: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'styled', 'styled-light' ]\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'styled',\n\t *\t\t\tview: modelAttributeValue => ( { key: 'class', value: 'styled-' + modelAttributeValue } )\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #attributeToAttribute\n\t * @param {Object} config Conversion configuration.\n\t * @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n\t * the attribute key, possible values and, optionally, an element name to convert from.\n\t * @param {String|Object|Function} config.view A view attribute key, or a `{ key, value }` object or a function that takes\n\t * the model attribute value and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\n\t * array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n\t * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n\t * `{ key, value }` objects or a functions.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tattributeToAttribute( config ) {\n\t\treturn this.add( downcastAttributeToAttribute( config ) );\n\t}\n\n\t/**\n\t * Model marker to view element conversion helper.\n\t *\n\t * This conversion results in creating a view element on the boundaries of the converted marker. If the converted marker\n\t * is collapsed, only one element is created. For example, model marker set like this: `<paragraph>F[oo b]ar</paragraph>`\n\t * becomes `<p>F<span data-marker=\"search\"></span>oo b<span data-marker=\"search\"></span>ar</p>` in the view.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: 'marker-search'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: 'search-result',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tattributes: {\n\t *\t\t\t\t\t'data-marker': 'search'\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: ( markerData, viewWriter ) => {\n\t *\t\t\t\treturn viewWriter.createUIElement( 'span', {\n\t *\t\t\t\t\t'data-marker': 'search',\n\t *\t\t\t\t\t'data-start': markerData.isOpening\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * If a function is passed as the `config.view` parameter, it will be used to generate both boundary elements. The function\n\t * receives the `data` object as a parameter and should return an instance of the\n\t * {@link module:engine/view/uielement~UIElement view UI element}. The `data` object and\n\t * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi `conversionApi`} are passed from\n\t * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}. Additionally,\n\t * the `data.isOpening` parameter is passed, which is set to `true` for the marker start boundary element, and `false` to\n\t * the marker end boundary element.\n\t *\n\t * This kind of conversion is useful for saving data into the database, so it should be used in the data conversion pipeline.\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #markerToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model marker (or model marker group) to convert.\n\t * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n\t * that takes the model marker data as a parameter and returns a view UI element.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tmarkerToElement( config ) {\n\t\treturn this.add( downcastMarkerToElement( config ) );\n\t}\n\n\t/**\n\t * Model marker to highlight conversion helper.\n\t *\n\t * This conversion results in creating a highlight on view nodes. For this kind of conversion,\n\t * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} should be provided.\n\t *\n\t * For text nodes, a `<span>` {@link module:engine/view/attributeelement~AttributeElement} is created and it wraps all text nodes\n\t * in the converted marker range. For example, a model marker set like this: `<paragraph>F[oo b]ar</paragraph>` becomes\n\t * `<p>F<span class=\"comment\">oo b</span>ar</p>` in the view.\n\t *\n\t * {@link module:engine/view/containerelement~ContainerElement} may provide a custom way of handling highlight. Most often,\n\t * the element itself is given classes and attributes described in the highlight descriptor (instead of being wrapped in `<span>`).\n\t * For example, a model marker set like this: `[<image src=\"foo.jpg\"></image>]` becomes `<img src=\"foo.jpg\" class=\"comment\"></img>`\n\t * in the view.\n\t *\n\t * For container elements, the conversion is two-step. While the converter processes the highlight descriptor and passes it\n\t * to a container element, it is the container element instance itself that applies values from the highlight descriptor.\n\t * So, in a sense, the converter takes care of stating what should be applied on what, while the element decides how to apply that.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( { model: 'comment', view: { classes: 'comment' } } );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( {\n\t *\t\t\tmodel: 'comment',\n\t *\t\t\tview: { classes: 'new-comment' },\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( {\n\t *\t\t\tmodel: 'comment',\n\t *\t\t\tview: data => {\n\t *\t\t\t\t// Assuming that the marker name is in a form of comment:commentType.\n\t *\t\t\t\tconst commentType = data.markerName.split( ':' )[ 1 ];\n\t *\n\t *\t\t\t\treturn {\n\t *\t\t\t\t\tclasses: [ 'comment', 'comment-' + commentType ]\n\t *\t\t\t\t};\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * If a function is passed as the `config.view` parameter, it will be used to generate the highlight descriptor. The function\n\t * receives the `data` object as a parameter and should return a\n\t * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor}.\n\t * The `data` object properties are passed from {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}.\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #markerToHighlight\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model marker (or model marker group) to convert.\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} config.view A highlight descriptor\n\t * that will be used for highlighting or a function that takes the model marker data as a parameter and returns a highlight descriptor.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tmarkerToHighlight( config ) {\n\t\treturn this.add( downcastMarkerToHighlight( config ) );\n\t}\n}\n\n/**\n * Function factory that creates a default downcast converter for text insertion changes.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'insert:$text', insertText() );\n *\n * @returns {Function} Insert text event converter.\n */\nexport function insertText() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\t\tconst viewText = viewWriter.createText( data.item.data );\n\n\t\tviewWriter.insert( viewPosition, viewText );\n\t};\n}\n\n/**\n * Function factory that creates a default downcast converter for node remove changes.\n *\n *\t\tmodelDispatcher.on( 'remove', remove() );\n *\n * @returns {Function} Remove event converter.\n */\nexport function remove() {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Find view range start position by mapping model position at which the remove happened.\n\t\tconst viewStart = conversionApi.mapper.toViewPosition( data.position );\n\n\t\tconst modelEnd = data.position.getShiftedBy( data.length );\n\t\tconst viewEnd = conversionApi.mapper.toViewPosition( modelEnd, { isPhantom: true } );\n\n\t\tconst viewRange = conversionApi.writer.createRange( viewStart, viewEnd );\n\n\t\t// Trim the range to remove in case some UI elements are on the view range boundaries.\n\t\tconst removed = conversionApi.writer.remove( viewRange.getTrimmed() );\n\n\t\t// After the range is removed, unbind all view elements from the model.\n\t\t// Range inside view document fragment is used to unbind deeply.\n\t\tfor ( const child of conversionApi.writer.createRangeIn( removed ).getItems() ) {\n\t\t\tconversionApi.mapper.unbindViewElement( child );\n\t\t}\n\t};\n}\n\n/**\n * Creates a `<span>` {@link module:engine/view/attributeelement~AttributeElement view attribute element} from the information\n * provided by the {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor} object. If a priority\n * is not provided in the descriptor, the default priority will be used.\n *\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n * @returns {module:engine/view/attributeelement~AttributeElement}\n */\nexport function createViewElementFromHighlightDescriptor( descriptor ) {\n\tconst viewElement = new ViewAttributeElement( 'span', descriptor.attributes );\n\n\tif ( descriptor.classes ) {\n\t\tviewElement._addClass( descriptor.classes );\n\t}\n\n\tif ( descriptor.priority ) {\n\t\tviewElement._priority = descriptor.priority;\n\t}\n\n\tviewElement._id = descriptor.id;\n\n\treturn viewElement;\n}\n\n/**\n * Function factory that creates a converter which converts a non-collapsed {@link module:engine/model/selection~Selection model selection}\n * to a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object and maps model positions from the selection to view positions.\n *\n *\t\tmodelDispatcher.on( 'selection', convertRangeSelection() );\n *\n * @returns {Function} Selection converter.\n */\nexport function convertRangeSelection() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst selection = data.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tconst viewRange = conversionApi.mapper.toViewRange( range );\n\t\t\tviewRanges.push( viewRange );\n\t\t}\n\n\t\tconversionApi.writer.setSelection( viewRanges, { backward: selection.isBackward } );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts a collapsed {@link module:engine/model/selection~Selection model selection} to\n * a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object, maps the model selection position to the view position and breaks\n * {@link module:engine/view/attributeelement~AttributeElement attribute elements} at the selection position.\n *\n *\t\tmodelDispatcher.on( 'selection', convertCollapsedSelection() );\n *\n * An example of the view state before and after converting the collapsed selection:\n *\n *\t\t   <p><strong>f^oo<strong>bar</p>\n *\t\t-> <p><strong>f</strong>^<strong>oo</strong>bar</p>\n *\n * By breaking attribute elements like `<strong>`, the selection is in a correct element. Then, when the selection attribute is\n * converted, broken attributes might be merged again, or the position where the selection is may be wrapped\n * with different, appropriate attribute elements.\n *\n * See also {@link module:engine/conversion/downcasthelpers~clearAttributes} which does a clean-up\n * by merging attributes.\n *\n * @returns {Function} Selection converter.\n */\nexport function convertCollapsedSelection() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst selection = data.selection;\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst modelPosition = selection.getFirstPosition();\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( modelPosition );\n\t\tconst brokenPosition = viewWriter.breakAttributes( viewPosition );\n\n\t\tviewWriter.setSelection( brokenPosition );\n\t};\n}\n\n/**\n * Function factory that creates a converter which clears artifacts after the previous\n * {@link module:engine/model/selection~Selection model selection} conversion. It removes all empty\n * {@link module:engine/view/attributeelement~AttributeElement view attribute elements} and merges sibling attributes at all start and end\n * positions of all ranges.\n *\n *\t\t   <p><strong>^</strong></p>\n *\t\t-> <p>^</p>\n *\n *\t\t   <p><strong>foo</strong>^<strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n *\t\t   <p><strong>foo</strong><em>^</em><strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n * This listener should be assigned before any converter for the new selection:\n *\n *\t\tmodelDispatcher.on( 'selection', clearAttributes() );\n *\n * See {@link module:engine/conversion/downcasthelpers~convertCollapsedSelection}\n * which does the opposite by breaking attributes in the selection position.\n *\n * @returns {Function} Selection converter.\n */\nexport function clearAttributes() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t// Not collapsed selection should not have artifacts.\n\t\t\tif ( range.isCollapsed ) {\n\t\t\t\t// Position might be in the node removed by the view writer.\n\t\t\t\tif ( range.end.parent.document ) {\n\t\t\t\t\tconversionApi.writer.mergeAttributes( range.start );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tviewWriter.setSelection( null );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts set/change/remove attribute changes from the model to the view.\n * It can also be used to convert selection attributes. In that case, an empty attribute element will be created and the\n * selection will be put inside it.\n *\n * Attributes from the model are converted to a view element that will be wrapping these view nodes that are bound to\n * model elements having the given attribute. This is useful for attributes like `bold` that may be set on text nodes in the model\n * but are represented as an element in the view:\n *\n *\t\t[paragraph]              MODEL ====> VIEW        <p>\n *\t\t\t|- a {bold: true}                             |- <b>\n *\t\t\t|- b {bold: true}                             |   |- ab\n *\t\t\t|- c                                          |- c\n *\n * Passed `Function` will be provided with the attribute value and then all the parameters of the\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be the wrapping element.\n * When the provided `Function` does not return any element, no conversion will take place.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'attribute:bold', wrap( ( modelAttributeValue, viewWriter ) => {\n *\t\t\treturn viewWriter.createAttributeElement( 'strong' );\n *\t\t} );\n *\n * @protected\n * @param {Function} elementCreator Function returning a view element that will be used for wrapping.\n * @returns {Function} Set/change attribute converter.\n */\nexport function wrap( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Recreate current wrapping node. It will be used to unwrap view range if the attribute value has changed\n\t\t// or the attribute was removed.\n\t\tconst oldViewElement = elementCreator( data.attributeOldValue, conversionApi.writer );\n\n\t\t// Create node to wrap with.\n\t\tconst newViewElement = elementCreator( data.attributeNewValue, conversionApi.writer );\n\n\t\tif ( !oldViewElement && !newViewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\n\t\t\t// Selection attribute conversion.\n\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), newViewElement );\n\t\t} else {\n\t\t\t// Node attribute conversion.\n\t\t\tlet viewRange = conversionApi.mapper.toViewRange( data.range );\n\n\t\t\t// First, unwrap the range from current wrapper.\n\t\t\tif ( data.attributeOldValue !== null && oldViewElement ) {\n\t\t\t\tviewRange = viewWriter.unwrap( viewRange, oldViewElement );\n\t\t\t}\n\n\t\t\tif ( data.attributeNewValue !== null && newViewElement ) {\n\t\t\t\tviewWriter.wrap( viewRange, newViewElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts node insertion changes from the model to the view.\n * The function passed will be provided with all the parameters of the dispatcher's\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be inserted into the view.\n *\n * The converter automatically consumes the corresponding value from the consumables list, stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}) and binds the model and view elements.\n *\n *\t\tdowncastDispatcher.on(\n *\t\t\t'insert:myElem',\n *\t\t\tinsertElement( ( modelItem, viewWriter ) => {\n *\t\t\t\tconst text = viewWriter.createText( 'myText' );\n *\t\t\t\tconst myElem = viewWriter.createElement( 'myElem', { myAttr: 'my-' + modelItem.getAttribute( 'myAttr' ) }, text );\n *\n *\t\t\t\t// Do something fancy with `myElem` using `modelItem` or other parameters.\n *\n *\t\t\t\treturn myElem;\n *\t\t\t}\n *\t\t) );\n *\n * @protected\n * @param {Function} elementCreator Function returning a view element, which will be inserted.\n * @returns {Function} Insert element event converter.\n */\nexport function insertElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewElement = elementCreator( data.item, conversionApi.writer );\n\n\t\tif ( !viewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n\t\tconversionApi.writer.insert( viewPosition, viewElement );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts marker adding change to the\n * {@link module:engine/view/uielement~UIElement view UI element}.\n *\n * The view UI element that will be added to the view depends on the passed parameter. See {@link ~insertElement}.\n * In case of a non-collapsed range, the UI element will not wrap nodes but separate elements will be placed at the beginning\n * and at the end of the range.\n *\n * This converter binds created UI elements with the marker name using {@link module:engine/conversion/mapper~Mapper#bindElementToMarker}.\n *\n * @protected\n * @param {module:engine/view/uielement~UIElement|Function} elementCreator A view UI element or a function returning the view element\n * that will be inserted.\n * @returns {Function} Insert element event converter.\n */\nexport function insertUIElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Create two view elements. One will be inserted at the beginning of marker, one at the end.\n\t\t// If marker is collapsed, only \"opening\" element will be inserted.\n\t\tdata.isOpening = true;\n\t\tconst viewStartElement = elementCreator( data, conversionApi.writer );\n\n\t\tdata.isOpening = false;\n\t\tconst viewEndElement = elementCreator( data, conversionApi.writer );\n\n\t\tif ( !viewStartElement || !viewEndElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst markerRange = data.markerRange;\n\n\t\t// Marker that is collapsed has consumable build differently that non-collapsed one.\n\t\t// For more information see `addMarker` event description.\n\t\t// If marker's range is collapsed - check if it can be consumed.\n\t\tif ( markerRange.isCollapsed && !conversionApi.consumable.consume( markerRange, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If marker's range is not collapsed - consume all items inside.\n\t\tfor ( const value of markerRange ) {\n\t\t\tif ( !conversionApi.consumable.consume( value.item, evt.name ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst mapper = conversionApi.mapper;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// Add \"opening\" element.\n\t\tviewWriter.insert( mapper.toViewPosition( markerRange.start ), viewStartElement );\n\t\tconversionApi.mapper.bindElementToMarker( viewStartElement, data.markerName );\n\n\t\t// Add \"closing\" element only if range is not collapsed.\n\t\tif ( !markerRange.isCollapsed ) {\n\t\t\tviewWriter.insert( mapper.toViewPosition( markerRange.end ), viewEndElement );\n\t\t\tconversionApi.mapper.bindElementToMarker( viewEndElement, data.markerName );\n\t\t}\n\n\t\tevt.stop();\n\t};\n}\n\n// Function factory that returns a default downcast converter for removing a {@link module:engine/view/uielement~UIElement UI element}\n// basing on marker remove change.\n//\n// This converter unbinds elements from the marker name.\n//\n// @returns {Function} Removed UI element converter.\nfunction removeUIElement() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst elements = conversionApi.mapper.markerNameToElements( data.markerName );\n\n\t\tif ( !elements ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const element of elements ) {\n\t\t\tconversionApi.mapper.unbindElementFromMarkerName( element, data.markerName );\n\t\t\tconversionApi.writer.clear( conversionApi.writer.createRangeOn( element ), element );\n\t\t}\n\n\t\tconversionApi.writer.clearClonedElementsGroup( data.markerName );\n\n\t\tevt.stop();\n\t};\n}\n\n// Function factory that creates a converter which converts set/change/remove attribute changes from the model to the view.\n//\n// Attributes from the model are converted to the view element attributes in the view. You may provide a custom function to generate\n// a key-value attribute pair to add/change/remove. If not provided, model attributes will be converted to view element\n// attributes on a one-to-one basis.\n//\n// *Note:** The provided attribute creator should always return the same `key` for a given attribute from the model.\n//\n// The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n// {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n//\n//\t\tmodelDispatcher.on( 'attribute:customAttr:myElem', changeAttribute( ( value, data ) => {\n//\t\t\t// Change attribute key from `customAttr` to `class` in the view.\n//\t\t\tconst key = 'class';\n//\t\t\tlet value = data.attributeNewValue;\n//\n//\t\t\t// Force attribute value to 'empty' if the model element is empty.\n//\t\t\tif ( data.item.childCount === 0 ) {\n//\t\t\t\tvalue = 'empty';\n//\t\t\t}\n//\n//\t\t\t// Return the key-value pair.\n//\t\t\treturn { key, value };\n//\t\t} ) );\n//\n// @param {Function} [attributeCreator] Function returning an object with two properties: `key` and `value`, which\n// represent the attribute key and attribute value to be set on a {@link module:engine/view/element~Element view element}.\n// The function is passed the model attribute value as the first parameter and additional data about the change as the second parameter.\n// @returns {Function} Set/change attribute converter.\nfunction changeAttribute( attributeCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst oldAttribute = attributeCreator( data.attributeOldValue, data );\n\t\tconst newAttribute = attributeCreator( data.attributeNewValue, data );\n\n\t\tif ( !oldAttribute && !newAttribute ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// If model item cannot be mapped to a view element, it means item is not an `Element` instance but a `TextProxy` node.\n\t\t// Only elements can have attributes in a view so do not proceed for anything else (#1587).\n\t\tif ( !viewElement ) {\n\t\t\t/**\n\t\t\t * This error occurs when a {@link module:engine/model/textproxy~TextProxy text node's} attribute is to be downcasted\n\t\t\t * by {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `Attribute to Attribute converter`}.\n\t\t\t * In most cases it is caused by converters misconfiguration when only \"generic\" converter is defined:\n\t\t\t *\n\t\t\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t\t\t *\t\t\tmodel: 'attribute-name',\n\t\t\t *\t\t\tview: 'attribute-name'\n\t\t\t *\t\t} ) );\n\t\t\t *\n\t\t\t * and given attribute is used on text node, for example:\n\t\t\t *\n\t\t\t *\t\tmodel.change( writer => {\n\t\t\t *\t\t\twriter.insertText( 'Foo', { 'attribute-name': 'bar' }, parent, 0 );\n\t\t\t *\t\t} );\n\t\t\t *\n\t\t\t * In such cases, to convert the same attribute for both {@link module:engine/model/element~Element}\n\t\t\t * and {@link module:engine/model/textproxy~TextProxy `Text`} nodes, text specific\n\t\t\t * {@link module:engine/conversion/conversion~Conversion#attributeToElement `Attribute to Element converter`}\n\t\t\t * with higher {@link module:utils/priorities~PriorityString priority} must also be defined:\n\t\t\t *\n\t\t\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t\t\t *\t\t\tmodel: {\n\t\t\t *\t\t\t\tkey: 'attribute-name',\n\t\t\t *\t\t\t\tname: '$text'\n\t\t\t *\t\t\t},\n\t\t\t *\t\t\tview: ( value, writer ) => {\n\t\t\t *\t\t\t\treturn writer.createAttributeElement( 'span', { 'attribute-name': value } );\n\t\t\t *\t\t\t},\n\t\t\t *\t\t\tconverterPriority: 'high'\n\t\t\t *\t\t} ) );\n\t\t\t *\n\t\t\t * @error conversion-attribute-to-attribute-on-text\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'conversion-attribute-to-attribute-on-text: ' +\n\t\t\t\t'Trying to convert text node\\'s attribute with attribute-to-attribute converter.',\n\t\t\t\t[ data, conversionApi ]\n\t\t\t);\n\t\t}\n\n\t\t// First remove the old attribute if there was one.\n\t\tif ( data.attributeOldValue !== null && oldAttribute ) {\n\t\t\tif ( oldAttribute.key == 'class' ) {\n\t\t\t\tconst classes = Array.isArray( oldAttribute.value ) ? oldAttribute.value : [ oldAttribute.value ];\n\n\t\t\t\tfor ( const className of classes ) {\n\t\t\t\t\tviewWriter.removeClass( className, viewElement );\n\t\t\t\t}\n\t\t\t} else if ( oldAttribute.key == 'style' ) {\n\t\t\t\tconst keys = Object.keys( oldAttribute.value );\n\n\t\t\t\tfor ( const key of keys ) {\n\t\t\t\t\tviewWriter.removeStyle( key, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewWriter.removeAttribute( oldAttribute.key, viewElement );\n\t\t\t}\n\t\t}\n\n\t\t// Then set the new attribute.\n\t\tif ( data.attributeNewValue !== null && newAttribute ) {\n\t\t\tif ( newAttribute.key == 'class' ) {\n\t\t\t\tconst classes = Array.isArray( newAttribute.value ) ? newAttribute.value : [ newAttribute.value ];\n\n\t\t\t\tfor ( const className of classes ) {\n\t\t\t\t\tviewWriter.addClass( className, viewElement );\n\t\t\t\t}\n\t\t\t} else if ( newAttribute.key == 'style' ) {\n\t\t\t\tconst keys = Object.keys( newAttribute.value );\n\n\t\t\t\tfor ( const key of keys ) {\n\t\t\t\t\tviewWriter.setStyle( key, newAttribute.value[ key ], viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewWriter.setAttribute( newAttribute.key, newAttribute.value, viewElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Function factory that creates a converter which converts the text inside marker's range. The converter wraps the text with\n// {@link module:engine/view/attributeelement~AttributeElement} created from the provided descriptor.\n// See {link module:engine/conversion/downcasthelpers~createViewElementFromHighlightDescriptor}.\n//\n// It can also be used to convert the selection that is inside a marker. In that case, an empty attribute element will be\n// created and the selection will be put inside it.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter binds the created {@link module:engine/view/attributeelement~AttributeElement attribute elemens} with the marker name\n// using the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\nfunction highlightText( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !data.item ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) && !data.item.is( 'textProxy' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = createViewElementFromHighlightDescriptor( descriptor );\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\n\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), viewElement, viewSelection );\n\t\t} else {\n\t\t\tconst viewRange = conversionApi.mapper.toViewRange( data.range );\n\t\t\tconst rangeAfterWrap = viewWriter.wrap( viewRange, viewElement );\n\n\t\t\tfor ( const element of rangeAfterWrap.getItems() ) {\n\t\t\t\tif ( element.is( 'attributeElement' ) && element.isSimilar( viewElement ) ) {\n\t\t\t\t\tconversionApi.mapper.bindElementToMarker( element, data.markerName );\n\n\t\t\t\t\t// One attribute element is enough, because all of them are bound together by the view writer.\n\t\t\t\t\t// Mapper uses this binding to get all the elements no matter how many of them are registered in the mapper.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Converter function factory. It creates a function which applies the marker's highlight to an element inside the marker's range.\n//\n// The converter checks if an element has the `addHighlight` function stored as a\n// {@link module:engine/view/element~Element#_setCustomProperty custom property} and, if so, uses it to apply the highlight.\n// In such case the converter will consume all element's children, assuming that they were handled by the element itself.\n//\n// When the `addHighlight` custom property is not present, the element is not converted in any special way.\n// This means that converters will proceed to convert the element's child nodes.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter binds altered {@link module:engine/view/containerelement~ContainerElement container elements} with the marker name using\n// the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\nfunction highlightElement( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !data.item ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( data.item instanceof ModelElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\n\t\tif ( viewElement && viewElement.getCustomProperty( 'addHighlight' ) ) {\n\t\t\t// Consume element itself.\n\t\t\tconversionApi.consumable.consume( data.item, evt.name );\n\n\t\t\t// Consume all children nodes.\n\t\t\tfor ( const value of ModelRange._createIn( data.item ) ) {\n\t\t\t\tconversionApi.consumable.consume( value.item, evt.name );\n\t\t\t}\n\n\t\t\tviewElement.getCustomProperty( 'addHighlight' )( viewElement, descriptor, conversionApi.writer );\n\n\t\t\tconversionApi.mapper.bindElementToMarker( viewElement, data.markerName );\n\t\t}\n\t};\n}\n\n// Function factory that creates a converter which converts the removing model marker to the view.\n//\n// Both text nodes and elements are handled by this converter but they are handled a bit differently.\n//\n// Text nodes are unwrapped using the {@link module:engine/view/attributeelement~AttributeElement attribute element} created from the\n// provided highlight descriptor. See {link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n//\n// For elements, the converter checks if an element has the `removeHighlight` function stored as a\n// {@link module:engine/view/element~Element#_setCustomProperty custom property}. If so, it uses it to remove the highlight.\n// In such case, the children of that element will not be converted.\n//\n// When `removeHighlight` is not present, the element is not converted in any special way.\n// The converter will proceed to convert the element's child nodes instead.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter unbinds elements from the marker name.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\nfunction removeHighlight( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// This conversion makes sense only for non-collapsed range.\n\t\tif ( data.markerRange.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// View element that will be used to unwrap `AttributeElement`s.\n\t\tconst viewHighlightElement = createViewElementFromHighlightDescriptor( descriptor );\n\n\t\t// Get all elements bound with given marker name.\n\t\tconst elements = conversionApi.mapper.markerNameToElements( data.markerName );\n\n\t\tif ( !elements ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const element of elements ) {\n\t\t\tconversionApi.mapper.unbindElementFromMarkerName( element, data.markerName );\n\n\t\t\tif ( element.is( 'attributeElement' ) ) {\n\t\t\t\tconversionApi.writer.unwrap( conversionApi.writer.createRangeOn( element ), viewHighlightElement );\n\t\t\t} else {\n\t\t\t\t// if element.is( 'containerElement' ).\n\t\t\t\telement.getCustomProperty( 'removeHighlight' )( element, descriptor.id, conversionApi.writer );\n\t\t\t}\n\t\t}\n\n\t\tconversionApi.writer.clearClonedElementsGroup( data.markerName );\n\n\t\tevt.stop();\n\t};\n}\n\n// Model element to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#elementToElement `.elementToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model element to convert.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n// that takes the model element and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n// as parameters and returns a view container element.\n// @returns {Function} Conversion helper.\nfunction downcastElementToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconfig.view = normalizeToElementConfig( config.view, 'container' );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'insert:' + config.model, insertElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model attribute to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#attributeToElement `.attributeToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n// of `String`s with possible values if the model attribute is an enumerable.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view A view element definition or a function\n// that takes the model attribute value and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n// as parameters and returns a view attribute element. If `config.model.values` is\n// given, `config.view` should be an object assigning values from `config.model.values` to view element definitions or functions.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastAttributeToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst modelKey = config.model.key ? config.model.key : config.model;\n\tlet eventName = 'attribute:' + modelKey;\n\n\tif ( config.model.name ) {\n\t\teventName += ':' + config.model.name;\n\t}\n\n\tif ( config.model.values ) {\n\t\tfor ( const modelValue of config.model.values ) {\n\t\t\tconfig.view[ modelValue ] = normalizeToElementConfig( config.view[ modelValue ], 'attribute' );\n\t\t}\n\t} else {\n\t\tconfig.view = normalizeToElementConfig( config.view, 'attribute' );\n\t}\n\n\tconst elementCreator = getFromAttributeCreator( config );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, wrap( elementCreator ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model attribute to view attribute conversion helper.\n//\n// See {@link ~DowncastHelpers#attributeToAttribute `.attributeToAttribute()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n// the attribute key, possible values and, optionally, an element name to convert from.\n// @param {String|Object|Function} config.view A view attribute key, or a `{ key, value }` object or a function that takes\n// the model attribute value and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\n// array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n// If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n// `{ key, value }` objects or a functions.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastAttributeToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst modelKey = config.model.key ? config.model.key : config.model;\n\tlet eventName = 'attribute:' + modelKey;\n\n\tif ( config.model.name ) {\n\t\teventName += ':' + config.model.name;\n\t}\n\n\tif ( config.model.values ) {\n\t\tfor ( const modelValue of config.model.values ) {\n\t\t\tconfig.view[ modelValue ] = normalizeToAttributeConfig( config.view[ modelValue ] );\n\t\t}\n\t} else {\n\t\tconfig.view = normalizeToAttributeConfig( config.view );\n\t}\n\n\tconst elementCreator = getFromAttributeCreator( config );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, changeAttribute( elementCreator ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model marker to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model marker (or model marker group) to convert.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n// that takes the model marker data as a parameter and returns a view UI element.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastMarkerToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconfig.view = normalizeToElementConfig( config.view, 'ui' );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + config.model, insertUIElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + config.model, removeUIElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model marker to highlight conversion helper.\n//\n// See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model marker (or model marker group) to convert.\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} config.view A highlight descriptor\n// that will be used for highlighting or a function that takes the model marker data as a parameter and returns a highlight descriptor.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastMarkerToHighlight( config ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + config.model, highlightText( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'addMarker:' + config.model, highlightElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + config.model, removeHighlight( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Takes `config.view`, and if it is an {@link module:engine/view/elementdefinition~ElementDefinition}, converts it\n// to a function (because lower level converters accept only element creator functions).\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} view View configuration.\n// @param {'container'|'attribute'|'ui'} viewElementType View element type to create.\n// @returns {Function} Element creator function to use in lower level converters.\nfunction normalizeToElementConfig( view, viewElementType ) {\n\tif ( typeof view == 'function' ) {\n\t\t// If `view` is already a function, don't do anything.\n\t\treturn view;\n\t}\n\n\treturn ( modelData, viewWriter ) => createViewElementFromDefinition( view, viewWriter, viewElementType );\n}\n\n// Creates a view element instance from the provided {@link module:engine/view/elementdefinition~ElementDefinition} and class.\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition} viewElementDefinition\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @param {'container'|'attribute'|'ui'} viewElementType\n// @returns {module:engine/view/element~Element}\nfunction createViewElementFromDefinition( viewElementDefinition, viewWriter, viewElementType ) {\n\tif ( typeof viewElementDefinition == 'string' ) {\n\t\t// If `viewElementDefinition` is given as a `String`, normalize it to an object with `name` property.\n\t\tviewElementDefinition = { name: viewElementDefinition };\n\t}\n\n\tlet element;\n\tconst attributes = Object.assign( {}, viewElementDefinition.attributes );\n\n\tif ( viewElementType == 'container' ) {\n\t\telement = viewWriter.createContainerElement( viewElementDefinition.name, attributes );\n\t} else if ( viewElementType == 'attribute' ) {\n\t\tconst options = {\n\t\t\tpriority: viewElementDefinition.priority || ViewAttributeElement.DEFAULT_PRIORITY\n\t\t};\n\n\t\telement = viewWriter.createAttributeElement( viewElementDefinition.name, attributes, options );\n\t} else {\n\t\t// 'ui'.\n\t\telement = viewWriter.createUIElement( viewElementDefinition.name, attributes );\n\t}\n\n\tif ( viewElementDefinition.styles ) {\n\t\tconst keys = Object.keys( viewElementDefinition.styles );\n\n\t\tfor ( const key of keys ) {\n\t\t\tviewWriter.setStyle( key, viewElementDefinition.styles[ key ], element );\n\t\t}\n\t}\n\n\tif ( viewElementDefinition.classes ) {\n\t\tconst classes = viewElementDefinition.classes;\n\n\t\tif ( typeof classes == 'string' ) {\n\t\t\tviewWriter.addClass( classes, element );\n\t\t} else {\n\t\t\tfor ( const className of classes ) {\n\t\t\t\tviewWriter.addClass( className, element );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn element;\n}\n\nfunction getFromAttributeCreator( config ) {\n\tif ( config.model.values ) {\n\t\treturn ( modelAttributeValue, viewWriter ) => {\n\t\t\tconst view = config.view[ modelAttributeValue ];\n\n\t\t\tif ( view ) {\n\t\t\t\treturn view( modelAttributeValue, viewWriter );\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t} else {\n\t\treturn config.view;\n\t}\n}\n\n// Takes the configuration, adds default parameters if they do not exist and normalizes other parameters to be used in downcast converters\n// for generating a view attribute.\n//\n// @param {Object} view View configuration.\nfunction normalizeToAttributeConfig( view ) {\n\tif ( typeof view == 'string' ) {\n\t\treturn modelAttributeValue => ( { key: view, value: modelAttributeValue } );\n\t} else if ( typeof view == 'object' ) {\n\t\t// { key, value, ... }\n\t\tif ( view.value ) {\n\t\t\treturn () => view;\n\t\t}\n\t\t// { key, ... }\n\t\telse {\n\t\t\treturn modelAttributeValue => ( { key: view.key, value: modelAttributeValue } );\n\t\t}\n\t} else {\n\t\t// function.\n\t\treturn view;\n\t}\n}\n\n// Helper function for `highlight`. Prepares the actual descriptor object using value passed to the converter.\nfunction prepareDescriptor( highlightDescriptor, data, conversionApi ) {\n\t// If passed descriptor is a creator function, call it. If not, just use passed value.\n\tconst descriptor = typeof highlightDescriptor == 'function' ?\n\t\thighlightDescriptor( data, conversionApi ) :\n\t\thighlightDescriptor;\n\n\tif ( !descriptor ) {\n\t\treturn null;\n\t}\n\n\t// Apply default descriptor priority.\n\tif ( !descriptor.priority ) {\n\t\tdescriptor.priority = 10;\n\t}\n\n\t// Default descriptor id is marker name.\n\tif ( !descriptor.id ) {\n\t\tdescriptor.id = data.markerName;\n\t}\n\n\treturn descriptor;\n}\n\n/**\n * An object describing how the marker highlight should be represented in the view.\n *\n * Each text node contained in a highlighted range will be wrapped in a `<span>`\n * {@link module:engine/view/attributeelement~AttributeElement view attribute element} with CSS class(es), attributes and a priority\n * described by this object.\n *\n * Additionally, each {@link module:engine/view/containerelement~ContainerElement container element} can handle displaying the highlight\n * separately by providing the `addHighlight` and `removeHighlight` custom properties. In this case:\n *\n *  * The `HighlightDescriptor` object is passed to the `addHighlight` function upon conversion and should be used to apply the highlight to\n *  the element.\n *  * The descriptor `id` is passed to the `removeHighlight` function upon conversion and should be used to remove the highlight with the\n *  given ID from the element.\n *\n * @typedef {Object} module:engine/conversion/downcasthelpers~HighlightDescriptor\n *\n * @property {String|Array.<String>} classes A CSS class or an array of classes to set. If the descriptor is used to\n * create an {@link module:engine/view/attributeelement~AttributeElement attribute element} over text nodes, these classes will be set\n * on that attribute element. If the descriptor is applied to an element, usually these classes will be set on that element, however,\n * this depends on how the element converts the descriptor.\n *\n * @property {String} [id] Descriptor identifier. If not provided, it defaults to the converted marker's name.\n *\n * @property {Number} [priority] Descriptor priority. If not provided, it defaults to `10`. If the descriptor is used to create\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element}, it will be that element's\n * {@link module:engine/view/attributeelement~AttributeElement#priority priority}. If the descriptor is applied to an element,\n * the priority will be used to determine which descriptor is more important.\n *\n * @property {Object} [attributes] Attributes to set. If the descriptor is used to create\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element} over text nodes, these attributes will be set on that\n * attribute element. If the descriptor is applied to an element, usually these attributes will be set on that element, however,\n * this depends on how the element converts the descriptor.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport Matcher from '../view/matcher';\nimport ModelRange from '../model/range';\nimport ConversionHelpers from './conversionhelpers';\n\nimport { cloneDeep } from 'lodash-es';\nimport ModelSelection from '../model/selection';\n\n/**\n * Contains {@link module:engine/view/view view} to {@link module:engine/model/model model} converters for\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}.\n *\n * @module engine/conversion/upcasthelpers\n */\n\n/**\n * Upcast conversion helper functions.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\nexport default class UpcastHelpers extends ConversionHelpers {\n\t/**\n\t * View element to model element conversion helper.\n\t *\n\t * This conversion results in creating a model element. For example,\n\t * view `<p>Foo</p>` becomes `<paragraph>Foo</paragraph>` in the model.\n\t *\n\t * Keep in mind that the element will be inserted only if it is allowed\n\t * by {@link module:engine/model/schema~Schema schema} configuration.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t *\t\t\tview: 'p',\n\t *\t\t\tmodel: 'paragraph'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t *\t\t\tview: 'p',\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'fancy'\n\t *\t\t\t},\n\t *\t\t\tmodel: 'fancyParagraph'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t * \t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'heading'\n\t * \t\t\t},\n\t * \t\t\tmodel: ( viewElement, modelWriter ) => {\n\t * \t\t\t\treturn modelWriter.createElement( 'heading', { level: viewElement.getAttribute( 'data-level' ) } );\n\t * \t\t\t}\n\t * \t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #elementToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {module:engine/view/matcher~MatcherPattern} [config.view] Pattern matching all view elements which should be converted. If not\n\t * set, the converter will fire for every view element.\n\t * @param {String|module:engine/model/element~Element|Function} config.model Name of the model element, a model element\n\t * instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\telementToElement( config ) {\n\t\treturn this.add( upcastElementToElement( config ) );\n\t}\n\n\t/**\n\t * View element to model attribute conversion helper.\n\t *\n\t * This conversion results in setting an attribute on a model node. For example, view `<strong>Foo</strong>` becomes\n\t * `Foo` {@link module:engine/model/text~Text model text node} with `bold` attribute set to `true`.\n\t *\n\t * This helper is meant to set a model attribute on all the elements that are inside the converted element:\n\t *\n\t *\t\t<strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n\t *\n\t * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n\t * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text. See\n\t * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute} for comparison.\n\t *\n\t * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: 'strong',\n\t *\t\t\tmodel: 'bold'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: 'strong',\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: 'bold'\n\t *\t\t\t},\n\t *\t\t\tmodel: 'bold'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: [ 'styled', 'styled-dark' ]\n\t *\t\t\t},\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'styled',\n\t *\t\t\t\tvalue: 'dark'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * \t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tstyles: {\n\t *\t\t\t\t\t'font-size': /[\\s\\S]+/\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalue: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\t\t\t\t\tconst value = fontSize.substr( 0, fontSize.length - 2 );\n\t *\n\t *\t\t\t\t\tif ( value <= 10 ) {\n\t *\t\t\t\t\t\treturn 'small';\n\t *\t\t\t\t\t} else if ( value > 12 ) {\n\t *\t\t\t\t\t\treturn 'big';\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #elementToAttribute\n\t * @param {Object} config Conversion configuration.\n\t * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n\t * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n\t * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n\t * If `String` is given, the model attribute value will be set to `true`.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n\t * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\telementToAttribute( config ) {\n\t\treturn this.add( upcastElementToAttribute( config ) );\n\t}\n\n\t/**\n\t * View attribute to model attribute conversion helper.\n\t *\n\t * This conversion results in setting an attribute on a model node. For example, view `<img src=\"foo.jpg\"></img>` becomes\n\t * `<image source=\"foo.jpg\"></image>` in the model.\n\t *\n\t * This helper is meant to convert view attributes from view elements which got converted to the model, so the view attribute\n\t * is set only on the corresponding model node:\n\t *\n\t *\t\t<div class=\"dark\"><div>foo</div></div>    -->    <div dark=\"true\"><div>foo</div></div>\n\t *\n\t * Above, `class=\"dark\"` attribute is added only to the `<div>` elements that has it. This is in contrary to\n\t * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute} which sets attributes for\n\t * all the children in the model:\n\t *\n\t *\t\t<strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n\t *\n\t * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n\t * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text.\n\t *\n\t * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: 'src',\n\t *\t\t\tmodel: 'source'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: { key: 'src' },\n\t *\t\t\tmodel: 'source'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: { key: 'src' },\n\t *\t\t\tmodel: 'source',\n\t *\t\t\tconverterPriority: 'normal'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tkey: 'data-style',\n\t *\t\t\t\tvalue: /[\\s\\S]+/\n\t *\t\t\t},\n\t *\t\t\tmodel: 'styled'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'img',\n\t *\t\t\t\tkey: 'class',\n\t *\t\t\t\tvalue: 'styled-dark'\n\t *\t\t\t},\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'styled',\n\t *\t\t\t\tvalue: 'dark'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tkey: 'class',\n\t *\t\t\t\tvalue: /styled-[\\S]+/\n\t *\t\t\t},\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'styled'\n\t *\t\t\t\tvalue: viewElement => {\n\t *\t\t\t\t\tconst regexp = /styled-([\\S]+)/;\n\t *\t\t\t\t\tconst match = viewElement.getAttribute( 'class' ).match( regexp );\n\t *\n\t *\t\t\t\t\treturn match[ 1 ];\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #attributeToAttribute\n\t * @param {Object} config Conversion configuration.\n\t * @param {String|Object} config.view Specifies which view attribute will be converted. If a `String` is passed,\n\t * attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n\t * specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n\t * property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n\t * a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n\t * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n\t * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n\t * If `String` is given, the model attribute value will be same as view attribute value.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n\t * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\tattributeToAttribute( config ) {\n\t\treturn this.add( upcastAttributeToAttribute( config ) );\n\t}\n\n\t/**\n\t * View element to model marker conversion helper.\n\t *\n\t * This conversion results in creating a model marker. For example, if the marker was stored in a view as an element:\n\t * `<p>Fo<span data-marker=\"comment\" data-comment-id=\"7\"></span>o</p><p>B<span data-marker=\"comment\" data-comment-id=\"7\"></span>ar</p>`,\n\t * after the conversion is done, the marker will be available in\n\t * {@link module:engine/model/model~Model#markers model document markers}.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t *\t\t\tview: 'marker-search',\n\t *\t\t\tmodel: 'search'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t *\t\t\tview: 'marker-search',\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t *\t\t\tview: 'marker-search',\n\t *\t\t\tmodel: viewElement => 'comment:' + viewElement.getAttribute( 'data-comment-id' )\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tattributes: {\n\t *\t\t\t\t\t'data-marker': 'search'\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tmodel: 'search'\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #elementToMarker\n\t * @param {Object} config Conversion configuration.\n\t * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n\t * @param {String|Function} config.model Name of the model marker, or a function that takes a view element and returns\n\t * a model marker name.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\telementToMarker( config ) {\n\t\treturn this.add( upcastElementToMarker( config ) );\n\t}\n}\n\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * or all children of {@link module:engine/view/element~Element} into\n * {@link module:engine/model/documentfragment~DocumentFragment model document fragment}.\n * This is the \"entry-point\" converter for upcast (view to model conversion). This converter starts the conversion of all children\n * of passed view document fragment. Those children {@link module:engine/view/node~Node view nodes} are then handled by other converters.\n *\n * This also a \"default\", last resort converter for all view elements that has not been converted by other converters.\n * When a view element is being converted to the model but it does not have converter specified, that view element\n * will be converted to {@link module:engine/model/documentfragment~DocumentFragment model document fragment} and returned.\n *\n * @returns {Function} Universal converter for view {@link module:engine/view/documentfragment~DocumentFragment fragments} and\n * {@link module:engine/view/element~Element elements} that returns\n * {@link module:engine/model/documentfragment~DocumentFragment model fragment} with children of converted view item.\n */\nexport function convertToModelFragment() {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Second argument in `consumable.consume` is discarded for ViewDocumentFragment but is needed for ViewElement.\n\t\tif ( !data.modelRange && conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\n\t\t\tconst { modelRange, modelCursor } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n\n\t\t\tdata.modelRange = modelRange;\n\t\t\tdata.modelCursor = modelCursor;\n\t\t}\n\t};\n}\n\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/text~Text} to {@link module:engine/model/text~Text}.\n *\n * @returns {Function} {@link module:engine/view/text~Text View text} converter.\n */\nexport function convertText() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( conversionApi.schema.checkChild( data.modelCursor, '$text' ) ) {\n\t\t\tif ( conversionApi.consumable.consume( data.viewItem ) ) {\n\t\t\t\tconst text = conversionApi.writer.createText( data.viewItem.data );\n\n\t\t\t\tconversionApi.writer.insert( text, data.modelCursor );\n\n\t\t\t\tdata.modelRange = ModelRange._createFromPositionAndShift( data.modelCursor, text.offsetSize );\n\t\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Function factory, creates a callback function which converts a {@link module:engine/view/selection~Selection\n * view selection} taken from the {@link module:engine/view/document~Document#event:selectionChange} event\n * and sets in on the {@link module:engine/model/document~Document#selection model}.\n *\n * **Note**: because there is no view selection change dispatcher nor any other advanced view selection to model\n * conversion mechanism, the callback should be set directly on view document.\n *\n *\t\tview.document.on( 'selectionChange', convertSelectionChange( modelDocument, mapper ) );\n *\n * @param {module:engine/model/model~Model} model Data model.\n * @param {module:engine/conversion/mapper~Mapper} mapper Conversion mapper.\n * @returns {Function} {@link module:engine/view/document~Document#event:selectionChange} callback function.\n */\nexport function convertSelectionChange( model, mapper ) {\n\treturn ( evt, data ) => {\n\t\tconst viewSelection = data.newSelection;\n\t\tconst modelSelection = new ModelSelection();\n\n\t\tconst ranges = [];\n\n\t\tfor ( const viewRange of viewSelection.getRanges() ) {\n\t\t\tranges.push( mapper.toModelRange( viewRange ) );\n\t\t}\n\n\t\tmodelSelection.setTo( ranges, { backward: viewSelection.isBackward } );\n\n\t\tif ( !modelSelection.isEqual( model.document.selection ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( modelSelection );\n\t\t\t} );\n\t\t}\n\t};\n}\n\n// View element to model element conversion helper.\n//\n// See {@link ~UpcastHelpers#elementToElement `.elementToElement()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {module:engine/view/matcher~MatcherPattern} [config.view] Pattern matching all view elements which should be converted. If not\n// set, the converter will fire for every view element.\n// @param {String|module:engine/model/element~Element|Function} config.model Name of the model element, a model element\n// instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction upcastElementToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst converter = prepareToElementConverter( config );\n\n\tconst elementName = getViewElementNameFromConfig( config );\n\tconst eventName = elementName ? 'element:' + elementName : 'element';\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, converter, { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// View element to model attribute conversion helper.\n//\n// See {@link ~UpcastHelpers#elementToAttribute `.elementToAttribute()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n// @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n// the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n// If `String` is given, the model attribute value will be set to `true`.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction upcastElementToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tnormalizeModelAttributeConfig( config );\n\n\tconst converter = prepareToAttributeConverter( config, false );\n\n\tconst elementName = getViewElementNameFromConfig( config );\n\tconst eventName = elementName ? 'element:' + elementName : 'element';\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, converter, { priority: config.converterPriority || 'low' } );\n\t};\n}\n\n// View attribute to model attribute conversion helper.\n//\n// See {@link ~UpcastHelpers#attributeToAttribute `.attributeToAttribute()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.view Specifies which view attribute will be converted. If a `String` is passed,\n// attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n// specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n// property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n// a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n// @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n// the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n// If `String` is given, the model attribute value will be same as view attribute value.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction upcastAttributeToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tlet viewKey = null;\n\n\tif ( typeof config.view == 'string' || config.view.key ) {\n\t\tviewKey = normalizeViewAttributeKeyValueConfig( config );\n\t}\n\n\tnormalizeModelAttributeConfig( config, viewKey );\n\n\tconst converter = prepareToAttributeConverter( config, true );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'element', converter, { priority: config.converterPriority || 'low' } );\n\t};\n}\n\n// View element to model marker conversion helper.\n//\n// See {@link ~UpcastHelpers#elementToMarker `.elementToMarker()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n// @param {String|Function} config.model Name of the model marker, or a function that takes a view element and returns\n// a model marker name.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction upcastElementToMarker( config ) {\n\tconfig = cloneDeep( config );\n\n\tnormalizeToMarkerConfig( config );\n\n\treturn upcastElementToElement( config );\n}\n\n// Helper function for from-view-element conversion. Checks if `config.view` directly specifies converted view element's name\n// and if so, returns it.\n//\n// @param {Object} config Conversion config.\n// @returns {String|null} View element name or `null` if name is not directly set.\nfunction getViewElementNameFromConfig( config ) {\n\tif ( typeof config.view == 'string' ) {\n\t\treturn config.view;\n\t}\n\n\tif ( typeof config.view == 'object' && typeof config.view.name == 'string' ) {\n\t\treturn config.view.name;\n\t}\n\n\treturn null;\n}\n\n// Helper for to-model-element conversion. Takes a config object and returns a proper converter function.\n//\n// @param {Object} config Conversion configuration.\n// @returns {Function} View to model converter.\nfunction prepareToElementConverter( config ) {\n\tconst matcher = config.view ? new Matcher( config.view ) : null;\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tlet match = {};\n\n\t\t// If `config.view` has not been passed do not try matching. In this case, the converter should fire for all elements.\n\t\tif ( matcher ) {\n\t\t\t// This will be usually just one pattern but we support matchers with many patterns too.\n\t\t\tconst matcherResult = matcher.match( data.viewItem );\n\n\t\t\t// If there is no match, this callback should not do anything.\n\t\t\tif ( !matcherResult ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmatch = matcherResult.match;\n\t\t}\n\n\t\t// Force consuming element's name.\n\t\tmatch.name = true;\n\n\t\t// Create model element basing on config.\n\t\tconst modelElement = getModelElement( config.model, data.viewItem, conversionApi.writer );\n\n\t\t// Do not convert if element building function returned falsy value.\n\t\tif ( !modelElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When element was already consumed then skip it.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, match ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find allowed parent for element that we are going to insert.\n\t\t// If current parent does not allow to insert element but one of the ancestors does\n\t\t// then split nodes to allowed parent.\n\t\tconst splitResult = conversionApi.splitToAllowedParent( modelElement, data.modelCursor );\n\n\t\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\t\tif ( !splitResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Insert element on allowed position.\n\t\tconversionApi.writer.insert( modelElement, splitResult.position );\n\n\t\t// Convert children and insert to element.\n\t\tconversionApi.convertChildren( data.viewItem, conversionApi.writer.createPositionAt( modelElement, 0 ) );\n\n\t\t// Consume appropriate value from consumable values list.\n\t\tconversionApi.consumable.consume( data.viewItem, match );\n\n\t\tconst parts = conversionApi.getSplitParts( modelElement );\n\n\t\t// Set conversion result range.\n\t\tdata.modelRange = new ModelRange(\n\t\t\tconversionApi.writer.createPositionBefore( modelElement ),\n\t\t\tconversionApi.writer.createPositionAfter( parts[ parts.length - 1 ] )\n\t\t);\n\n\t\t// Now we need to check where the `modelCursor` should be.\n\t\tif ( splitResult.cursorParent ) {\n\t\t\t// If we split parent to insert our element then we want to continue conversion in the new part of the split parent.\n\t\t\t//\n\t\t\t// before: <allowed><notAllowed>foo[]</notAllowed></allowed>\n\t\t\t// after:  <allowed><notAllowed>foo</notAllowed><converted></converted><notAllowed>[]</notAllowed></allowed>\n\n\t\t\tdata.modelCursor = conversionApi.writer.createPositionAt( splitResult.cursorParent, 0 );\n\t\t} else {\n\t\t\t// Otherwise just continue after inserted element.\n\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t}\n\t};\n}\n\n// Helper function for upcasting-to-element converter. Takes the model configuration, the converted view element\n// and a writer instance and returns a model element instance to be inserted in the model.\n//\n// @param {String|Function|module:engine/model/element~Element} model Model conversion configuration.\n// @param {module:engine/view/node~Node} input The converted view node.\n// @param {module:engine/model/writer~Writer} writer A writer instance to use to create the model element.\nfunction getModelElement( model, input, writer ) {\n\tif ( model instanceof Function ) {\n\t\treturn model( input, writer );\n\t} else {\n\t\treturn writer.createElement( model );\n\t}\n}\n\n// Helper function view-attribute-to-model-attribute helper. Normalizes `config.view` which was set as `String` or\n// as an `Object` with `key`, `value` and `name` properties. Normalized `config.view` has is compatible with\n// {@link module:engine/view/matcher~MatcherPattern}.\n//\n// @param {Object} config Conversion config.\n// @returns {String} Key of the converted view attribute.\nfunction normalizeViewAttributeKeyValueConfig( config ) {\n\tif ( typeof config.view == 'string' ) {\n\t\tconfig.view = { key: config.view };\n\t}\n\n\tconst key = config.view.key;\n\tlet normalized;\n\n\tif ( key == 'class' || key == 'style' ) {\n\t\tconst keyName = key == 'class' ? 'classes' : 'styles';\n\n\t\tnormalized = {\n\t\t\t[ keyName ]: config.view.value\n\t\t};\n\t} else {\n\t\tconst value = typeof config.view.value == 'undefined' ? /[\\s\\S]*/ : config.view.value;\n\n\t\tnormalized = {\n\t\t\tattributes: {\n\t\t\t\t[ key ]: value\n\t\t\t}\n\t\t};\n\t}\n\n\tif ( config.view.name ) {\n\t\tnormalized.name = config.view.name;\n\t}\n\n\tconfig.view = normalized;\n\n\treturn key;\n}\n\n// Helper function that normalizes `config.model` in from-model-attribute conversion. `config.model` can be set\n// as a `String`, an `Object` with only `key` property or an `Object` with `key` and `value` properties. Normalized\n// `config.model` is an `Object` with `key` and `value` properties.\n//\n// @param {Object} config Conversion config.\n// @param {String} viewAttributeKeyToCopy Key of the converted view attribute. If it is set, model attribute value\n// will be equal to view attribute value.\nfunction normalizeModelAttributeConfig( config, viewAttributeKeyToCopy = null ) {\n\tconst defaultModelValue = viewAttributeKeyToCopy === null ? true : viewElement => viewElement.getAttribute( viewAttributeKeyToCopy );\n\n\tconst key = typeof config.model != 'object' ? config.model : config.model.key;\n\tconst value = typeof config.model != 'object' || typeof config.model.value == 'undefined' ? defaultModelValue : config.model.value;\n\n\tconfig.model = { key, value };\n}\n\n// Helper for to-model-attribute conversion. Takes the model attribute name and conversion configuration and returns\n// a proper converter function.\n//\n// @param {String} modelAttributeKey The key of the model attribute to set on a model node.\n// @param {Object|Array.<Object>} config Conversion configuration. It is possible to provide multiple configurations in an array.\n// @param {Boolean} shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n// on all elements in the range.\nfunction prepareToAttributeConverter( config, shallow ) {\n\tconst matcher = new Matcher( config.view );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst match = matcher.match( data.viewItem );\n\n\t\t// If there is no match, this callback should not do anything.\n\t\tif ( !match ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelKey = config.model.key;\n\t\tconst modelValue = typeof config.model.value == 'function' ? config.model.value( data.viewItem ) : config.model.value;\n\n\t\t// Do not convert if attribute building function returned falsy value.\n\t\tif ( modelValue === null ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( onlyViewNameIsDefined( config ) ) {\n\t\t\tmatch.match.name = true;\n\t\t} else {\n\t\t\t// Do not test or consume `name` consumable.\n\t\t\tdelete match.match.name;\n\t\t}\n\n\t\t// Try to consume appropriate values from consumable values list.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, match.match ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Since we are converting to attribute we need an range on which we will set the attribute.\n\t\t// If the range is not created yet, we will create it.\n\t\tif ( !data.modelRange ) {\n\t\t\t// Convert children and set conversion result as a current data.\n\t\t\tdata = Object.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t\t}\n\n\t\t// Set attribute on current `output`. `Schema` is checked inside this helper function.\n\t\tconst attributeWasSet = setAttributeOn( data.modelRange, { key: modelKey, value: modelValue }, shallow, conversionApi );\n\n\t\tif ( attributeWasSet ) {\n\t\t\tconversionApi.consumable.consume( data.viewItem, match.match );\n\t\t}\n\t};\n}\n\n// Helper function that checks if element name should be consumed in attribute converters.\n//\n// @param {Object} config Conversion config.\n// @returns {Boolean}\nfunction onlyViewNameIsDefined( config ) {\n\tif ( typeof config.view == 'object' && !getViewElementNameFromConfig( config ) ) {\n\t\treturn false;\n\t}\n\n\treturn !config.view.classes && !config.view.attributes && !config.view.styles;\n}\n\n// Helper function for to-model-attribute converter. Sets model attribute on given range. Checks {@link module:engine/model/schema~Schema}\n// to ensure proper model structure.\n//\n// @param {module:engine/model/range~Range} modelRange Model range on which attribute should be set.\n// @param {Object} modelAttribute Model attribute to set.\n// @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion API.\n// @param {Boolean} shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n// on all elements in the range.\n// @returns {Boolean} `true` if attribute was set on at least one node from given `modelRange`.\nfunction setAttributeOn( modelRange, modelAttribute, shallow, conversionApi ) {\n\tlet result = false;\n\n\t// Set attribute on each item in range according to Schema.\n\tfor ( const node of Array.from( modelRange.getItems( { shallow } ) ) ) {\n\t\tif ( conversionApi.schema.checkAttribute( node, modelAttribute.key ) ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttribute.key, modelAttribute.value, node );\n\n\t\t\tresult = true;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n// Helper function for upcasting-to-marker conversion. Takes the config in a format requested by `upcastElementToMarker()`\n// function and converts it to a format that is supported by `_upcastElementToElement()` function.\n//\n// @param {Object} config Conversion configuration.\nfunction normalizeToMarkerConfig( config ) {\n\tconst oldModel = config.model;\n\n\tconfig.model = ( viewElement, modelWriter ) => {\n\t\tconst markerName = typeof oldModel == 'string' ? oldModel : oldModel( viewElement );\n\n\t\treturn modelWriter.createElement( '$marker', { 'data-name': markerName } );\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/controller/editingcontroller\n */\n\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { clearAttributes, convertCollapsedSelection, convertRangeSelection, insertText, remove } from '../conversion/downcasthelpers';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { convertSelectionChange } from '../conversion/upcasthelpers';\n\n/**\n * Controller for the editing pipeline. The editing pipeline controls {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditingController {\n\t/**\n\t * Creates an editing controller instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Editing model.\n\t */\n\tconstructor( model ) {\n\t\t/**\n\t\t * Editor model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Editing view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = new View();\n\n\t\t/**\n\t\t * Mapper which describes the model-view binding.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/mapper~Mapper}\n\t\t */\n\t\tthis.mapper = new Mapper();\n\n\t\t/**\n\t\t * Downcast dispatcher that converts changes from the model to {@link #view the editing view}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\n\t\t */\n\t\tthis.downcastDispatcher = new DowncastDispatcher( {\n\t\t\tmapper: this.mapper\n\t\t} );\n\n\t\tconst doc = this.model.document;\n\t\tconst selection = doc.selection;\n\t\tconst markers = this.model.markers;\n\n\t\t// When plugins listen on model changes (on selection change, post fixers, etc) and change the view as a result of\n\t\t// model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n\t\t// is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n\t\t//\n\t\t// See  https://github.com/ckeditor/ckeditor5-engine/issues/1528\n\t\tthis.listenTo( this.model, '_beforeChanges', () => {\n\t\t\tthis.view._disableRendering( true );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( this.model, '_afterChanges', () => {\n\t\t\tthis.view._disableRendering( false );\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n\t\t// Do it on 'low' priority, so changes are converted after other listeners did their job.\n\t\t// Also convert model selection.\n\t\tthis.listenTo( doc, 'change', () => {\n\t\t\tthis.view.change( writer => {\n\t\t\t\tthis.downcastDispatcher.convertChanges( doc.differ, markers, writer );\n\t\t\t\tthis.downcastDispatcher.convertSelection( selection, markers, writer );\n\t\t\t} );\n\t\t}, { priority: 'low' } );\n\n\t\t// Convert selection from the view to the model when it changes in the view.\n\t\tthis.listenTo( this.view.document, 'selectionChange', convertSelectionChange( this.model, this.mapper ) );\n\n\t\t// Attach default model converters.\n\t\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\n\t\tthis.downcastDispatcher.on( 'remove', remove(), { priority: 'low' } );\n\n\t\t// Attach default model selection converters.\n\t\tthis.downcastDispatcher.on( 'selection', clearAttributes(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertRangeSelection(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertCollapsedSelection(), { priority: 'low' } );\n\n\t\t// Binds {@link module:engine/view/document~Document#roots view roots collection} to\n\t\t// {@link module:engine/model/document~Document#roots model roots collection} so creating\n\t\t// model root automatically creates corresponding view root.\n\t\tthis.view.document.roots.bindTo( this.model.document.roots ).using( root => {\n\t\t\t// $graveyard is a special root that has no reflection in the view.\n\t\t\tif ( root.rootName == '$graveyard' ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewRoot = new RootEditableElement( root.name );\n\n\t\t\tviewRoot.rootName = root.rootName;\n\t\t\tviewRoot._document = this.view.document;\n\t\t\tthis.mapper.bindElements( root, viewRoot );\n\n\t\t\treturn viewRoot;\n\t\t} );\n\t}\n\n\t/**\n\t * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n\t * by `EditingController` that need to be destroyed.\n\t */\n\tdestroy() {\n\t\tthis.view.destroy();\n\t\tthis.stopListening();\n\t}\n}\n\nmix( EditingController, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/plugincollection\n */\n\n/* globals console */\n\nimport CKEditorError, { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class PluginCollection {\n\t/**\n\t * Creates an instance of the PluginCollection class.\n\t * Allows loading and initializing plugins and their dependencies.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Array.<Function>} [availablePlugins] Plugins (constructors) which the collection will be able to use\n\t * when {@link module:core/plugincollection~PluginCollection#init} is used with plugin names (strings, instead of constructors).\n\t * Usually, the editor will pass its built-in plugins to the collection so they can later be\n\t * used in `config.plugins` or `config.removePlugins` by names.\n\t */\n\tconstructor( editor, availablePlugins = [] ) {\n\t\t/**\n\t\t * @protected\n\t\t * @member {module:core/editor/editor~Editor} module:core/plugin~PluginCollection#_editor\n\t\t */\n\t\tthis._editor = editor;\n\n\t\t/**\n\t\t * Map of plugin constructors which can be retrieved by their names.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<String|Function,Function>} module:core/plugin~PluginCollection#_availablePlugins\n\t\t */\n\t\tthis._availablePlugins = new Map();\n\n\t\t/**\n\t\t * @protected\n\t\t * @member {Map} module:core/plugin~PluginCollection#_plugins\n\t\t */\n\t\tthis._plugins = new Map();\n\n\t\tfor ( const PluginConstructor of availablePlugins ) {\n\t\t\tthis._availablePlugins.set( PluginConstructor, PluginConstructor );\n\n\t\t\tif ( PluginConstructor.pluginName ) {\n\t\t\t\tthis._availablePlugins.set( PluginConstructor.pluginName, PluginConstructor );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ PluginConstructor, pluginInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tfor ( const entry of this._plugins ) {\n\t\t\tif ( typeof entry[ 0 ] == 'function' ) {\n\t\t\t\tyield entry;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the plugin instance by its constructor or name.\n\t *\n\t *\t\t// Check if 'Clipboard' plugin was loaded.\n\t *\t\tif ( editor.plugins.has( 'Clipboard' ) ) {\n\t *\t\t\t// Get clipboard plugin instance\n\t *\t\t\tconst clipboard = editor.plugins.get( 'Clipboard' );\n\t *\n\t *\t\t\tthis.listenTo( clipboard, 'inputTransformation', ( evt, data ) => {\n\t *\t\t\t\t// Do something on clipboard input.\n\t *\t\t\t} );\n\t *\t\t}\n\t *\n\t * **Note**: This method will throw error if plugin is not loaded. Use `{@link #has editor.plugins.has()}`\n\t * to check if plugin is available.\n\t *\n\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n\t * @returns {module:core/plugin~PluginInterface}\n\t */\n\tget( key ) {\n\t\tconst plugin = this._plugins.get( key );\n\n\t\tif ( !plugin ) {\n\t\t\t/**\n\t\t\t * The plugin is not loaded and could not be obtained.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor and must be loaded before they can be obtained from\n\t\t\t * the plugin collection.\n\t\t\t * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **Note**: You can use `{@link module:core/plugincollection~PluginCollection#has editor.plugins.has()}`\n\t\t\t * to check if plugin was loaded.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-loaded\n\t\t\t * @param {String} plugin The name of the plugin which is not loaded.\n\t\t\t */\n\t\t\tconst errorMsg = 'plugincollection-plugin-not-loaded: The requested plugin is not loaded.';\n\n\t\t\tlet pluginName = key;\n\n\t\t\tif ( typeof key == 'function' ) {\n\t\t\t\tpluginName = key.pluginName || key.name;\n\t\t\t}\n\n\t\t\tthrow new CKEditorError( errorMsg, this._editor, { plugin: pluginName } );\n\t\t}\n\n\t\treturn plugin;\n\t}\n\n\t/**\n\t * Checks if plugin is loaded.\n\t *\n\t *\t\t// Check if 'Clipboard' plugin was loaded.\n\t *\t\tif ( editor.plugins.has( 'Clipboard' ) ) {\n\t *\t\t\t// Now use clipboard plugin instance:\n\t *\t\t\tconst clipboard = editor.plugins.get( 'Clipboard' );\n\t *\n\t *\t\t\t// ...\n\t *\t\t}\n\t *\n\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n\t * @returns {Boolean}\n\t */\n\thas( key ) {\n\t\treturn this._plugins.has( key );\n\t}\n\n\t/**\n\t * Initializes a set of plugins and adds them to the collection.\n\t *\n\t * @param {Array.<Function|String>} plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\n\t * or {@link module:core/plugin~PluginInterface.pluginName plugin names}. The second option (names) works only if\n\t * `availablePlugins` were passed to the {@link #constructor}.\n\t * @param {Array.<String|Function>} [removePlugins] Names of plugins or plugin constructors\n\t * that should not be loaded (despite being specified in the `plugins` array).\n\t * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which gets resolved once all plugins are loaded\n\t * and available in the collection.\n\t */\n\tinit( plugins, removePlugins = [] ) {\n\t\tconst that = this;\n\t\tconst editor = this._editor;\n\t\tconst loading = new Set();\n\t\tconst loaded = [];\n\n\t\tconst pluginConstructors = mapToAvailableConstructors( plugins );\n\t\tconst removePluginConstructors = mapToAvailableConstructors( removePlugins );\n\t\tconst missingPlugins = getMissingPluginNames( plugins );\n\n\t\tif ( missingPlugins ) {\n\t\t\t/**\n\t\t\t * Some plugins are not available and could not be loaded.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\n\t\t\t * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**, it means\n\t\t\t * that you try to enable a plugin which was not included in that build. This may be due to a typo\n\t\t\t * in the plugin name or simply because that plugin is not a part of this build. In the latter scenario,\n\t\t\t * read more about {@glink builds/guides/development/custom-builds custom builds}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the editor creators directly** (not a build), then it means\n\t\t\t * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \"plugin loader\".\n\t\t\t * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\n\t\t\t * provide each plugin through reference (as a constructor function). Check out the examples in\n\t\t\t * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-found\n\t\t\t * @param {Array.<String>} plugins The name of the plugins which could not be loaded.\n\t\t\t */\n\t\t\tconst errorMsg = 'plugincollection-plugin-not-found: Some plugins are not available and could not be loaded.';\n\n\t\t\t// Log the error so it's more visible on the console. Hopefully, for better DX.\n\t\t\tconsole.error( attachLinkToDocumentation( errorMsg ), { plugins: missingPlugins } );\n\n\t\t\treturn Promise.reject( new CKEditorError( errorMsg, this._editor, { plugins: missingPlugins } ) );\n\t\t}\n\n\t\treturn Promise.all( pluginConstructors.map( loadPlugin ) )\n\t\t\t.then( () => initPlugins( loaded, 'init' ) )\n\t\t\t.then( () => initPlugins( loaded, 'afterInit' ) )\n\t\t\t.then( () => loaded );\n\n\t\tfunction loadPlugin( PluginConstructor ) {\n\t\t\tif ( removePluginConstructors.includes( PluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The plugin is already loaded or being loaded - do nothing.\n\t\t\tif ( that._plugins.has( PluginConstructor ) || loading.has( PluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn instantiatePlugin( PluginConstructor )\n\t\t\t\t.catch( err => {\n\t\t\t\t\t/**\n\t\t\t\t\t * It was not possible to load the plugin.\n\t\t\t\t\t *\n\t\t\t\t\t * This is a generic error logged to the console when a JavaSript error is thrown during the initialization\n\t\t\t\t\t * of one of the plugins.\n\t\t\t\t\t *\n\t\t\t\t\t * If you correctly handled the promise returned by the editor's `create()` method (like shown below)\n\t\t\t\t\t * you will find the original error logged to the console, too:\n\t\t\t\t\t *\n\t\t\t\t\t *\t\tClassicEditor.create( document.getElementById( 'editor' ) )\n\t\t\t\t\t *\t\t\t.then( editor => {\n\t\t\t\t\t *\t\t\t\t// ...\n\t\t\t\t\t * \t\t\t} )\n\t\t\t\t\t *\t\t\t.catch( error => {\n\t\t\t\t\t *\t\t\t\tconsole.error( error );\n\t\t\t\t\t *\t\t\t} );\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-load\n\t\t\t\t\t * @param {String} plugin The name of the plugin that could not be loaded.\n\t\t\t\t\t */\n\t\t\t\t\tconsole.error( attachLinkToDocumentation(\n\t\t\t\t\t\t'plugincollection-load: It was not possible to load the plugin.'\n\t\t\t\t\t), { plugin: PluginConstructor } );\n\n\t\t\t\t\tthrow err;\n\t\t\t\t} );\n\t\t}\n\n\t\tfunction initPlugins( loadedPlugins, method ) {\n\t\t\treturn loadedPlugins.reduce( ( promise, plugin ) => {\n\t\t\t\tif ( !plugin[ method ] ) {\n\t\t\t\t\treturn promise;\n\t\t\t\t}\n\n\t\t\t\treturn promise.then( plugin[ method ].bind( plugin ) );\n\t\t\t}, Promise.resolve() );\n\t\t}\n\n\t\tfunction instantiatePlugin( PluginConstructor ) {\n\t\t\treturn new Promise( resolve => {\n\t\t\t\tloading.add( PluginConstructor );\n\n\t\t\t\tif ( PluginConstructor.requires ) {\n\t\t\t\t\tPluginConstructor.requires.forEach( RequiredPluginConstructorOrName => {\n\t\t\t\t\t\tconst RequiredPluginConstructor = getPluginConstructor( RequiredPluginConstructorOrName );\n\n\t\t\t\t\t\tif ( removePlugins.includes( RequiredPluginConstructor ) ) {\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @error plugincollection-required\n\t\t\t\t\t\t\t * @param {Function} plugin The required plugin.\n\t\t\t\t\t\t\t * @param {Function} requiredBy The parent plugin.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t\t\t'plugincollection-required: Cannot load a plugin because one of its dependencies is listed in' +\n\t\t\t\t\t\t\t\t'the `removePlugins` option.',\n\t\t\t\t\t\t\t\teditor,\n\t\t\t\t\t\t\t\t{ plugin: RequiredPluginConstructor, requiredBy: PluginConstructor }\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tloadPlugin( RequiredPluginConstructor );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tconst plugin = new PluginConstructor( editor );\n\t\t\t\tthat._add( PluginConstructor, plugin );\n\t\t\t\tloaded.push( plugin );\n\n\t\t\t\tresolve();\n\t\t\t} );\n\t\t}\n\n\t\tfunction getPluginConstructor( PluginConstructorOrName ) {\n\t\t\tif ( typeof PluginConstructorOrName == 'function' ) {\n\t\t\t\treturn PluginConstructorOrName;\n\t\t\t}\n\n\t\t\treturn that._availablePlugins.get( PluginConstructorOrName );\n\t\t}\n\n\t\tfunction getMissingPluginNames( plugins ) {\n\t\t\tconst missingPlugins = [];\n\n\t\t\tfor ( const pluginNameOrConstructor of plugins ) {\n\t\t\t\tif ( !getPluginConstructor( pluginNameOrConstructor ) ) {\n\t\t\t\t\tmissingPlugins.push( pluginNameOrConstructor );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn missingPlugins.length ? missingPlugins : null;\n\t\t}\n\n\t\tfunction mapToAvailableConstructors( plugins ) {\n\t\t\treturn plugins\n\t\t\t\t.map( pluginNameOrConstructor => getPluginConstructor( pluginNameOrConstructor ) )\n\t\t\t\t.filter( PluginConstructor => !!PluginConstructor );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys all loaded plugins.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\tconst promises = Array.from( this )\n\t\t\t.map( ( [ , pluginInstance ] ) => pluginInstance )\n\t\t\t.filter( pluginInstance => typeof pluginInstance.destroy == 'function' )\n\t\t\t.map( pluginInstance => pluginInstance.destroy() );\n\n\t\treturn Promise.all( promises );\n\t}\n\n\t/**\n\t * Adds the plugin to the collection. Exposed mainly for testing purposes.\n\t *\n\t * @protected\n\t * @param {Function} PluginConstructor The plugin constructor.\n\t * @param {module:core/plugin~PluginInterface} plugin The instance of the plugin.\n\t */\n\t_add( PluginConstructor, plugin ) {\n\t\tthis._plugins.set( PluginConstructor, plugin );\n\n\t\tconst pluginName = PluginConstructor.pluginName;\n\n\t\tif ( !pluginName ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._plugins.has( pluginName ) ) {\n\t\t\t/**\n\t\t\t * Two plugins with the same {@link module:core/plugin~PluginInterface.pluginName} were loaded.\n\t\t\t * This will lead to runtime conflicts between these plugins.\n\t\t\t *\n\t\t\t * In practice, this warning usually means that new plugins were added to an existing CKEditor 5 build.\n\t\t\t * Plugins should always be added to a source version of the editor (`@ckeditor/ckeditor5-editor-*`),\n\t\t\t * not to an editor imported from one of the `@ckeditor/ckeditor5-build-*` packages.\n\t\t\t *\n\t\t\t * Check your import paths and the list of plugins passed to\n\t\t\t * {@link module:core/editor/editor~Editor.create `Editor.create()`}\n\t\t\t * or specified in {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n\t\t\t *\n\t\t\t * The second option is that your `node_modules/` directory contains duplicated versions of the same\n\t\t\t * CKEditor 5 packages. Normally, on clean installations, npm deduplicates packages in `node_modules/`, so\n\t\t\t * it may be enough to call `rm -rf node_modules && npm i`. However, if you installed conflicting versions\n\t\t\t * of packages, their dependencies may need to be installed in more than one version which may lead to this\n\t\t\t * warning.\n\t\t\t *\n\t\t\t * Technically speaking, this error occurs because after adding a plugin to an existing editor build\n\t\t\t * dependencies of this plugin are being duplicated.\n\t\t\t * They are already built into that editor build and now get added for the second time as dependencies\n\t\t\t * of the plugin you are installing.\n\t\t\t *\n\t\t\t * Read more about {@glink builds/guides/integration/installing-plugins installing plugins}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-name-conflict\n\t\t\t * @param {String} pluginName The duplicated plugin name.\n\t\t\t * @param {Function} plugin1 The first plugin constructor.\n\t\t\t * @param {Function} plugin2 The second plugin constructor.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'plugincollection-plugin-name-conflict: Two plugins with the same name were loaded.',\n\t\t\t\tnull,\n\t\t\t\t{ pluginName, plugin1: this._plugins.get( pluginName ).constructor, plugin2: PluginConstructor }\n\t\t\t);\n\t\t}\n\n\t\tthis._plugins.set( pluginName, plugin );\n\t}\n}\n\nmix( PluginCollection, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/commandcollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n */\nexport default class CommandCollection {\n\t/**\n\t * Creates collection instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Command map.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._commands = new Map();\n\t}\n\n\t/**\n\t * Registers a new command.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @param {module:core/command~Command} command\n\t */\n\tadd( commandName, command ) {\n\t\tthis._commands.set( commandName, command );\n\t}\n\n\t/**\n\t * Retrieves a command from the collection.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @returns {module:core/command~Command}\n\t */\n\tget( commandName ) {\n\t\treturn this._commands.get( commandName );\n\t}\n\n\t/**\n\t * Executes a command.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @param {*} [...commandParams] Command parameters.\n\t */\n\texecute( commandName, ...args ) {\n\t\tconst command = this.get( commandName );\n\n\t\tif ( !command ) {\n\t\t\t/**\n\t\t\t * Command does not exist.\n\t\t\t *\n\t\t\t * @error commandcollection-command-not-found\n\t\t\t * @param {String} commandName Name of the command.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'commandcollection-command-not-found: Command does not exist.', this, { commandName } );\n\t\t}\n\n\t\tcommand.execute( ...args );\n\t}\n\n\t/**\n\t * Returns iterator of command names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* names() {\n\t\tyield* this._commands.keys();\n\t}\n\n\t/**\n\t * Returns iterator of command instances.\n\t *\n\t * @returns {Iterable.<module:core/command~Command>}\n\t */\n\t* commands() {\n\t\tyield* this._commands.values();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ commandName, commandInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._commands[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Destroys all collection commands.\n\t */\n\tdestroy() {\n\t\tfor ( const command of this.commands() ) {\n\t\t\tcommand.destroy();\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window */\n\n/**\n * @module utils/translation-service\n */\n\n/* istanbul ignore else */\nif ( !window.CKEDITOR_TRANSLATIONS ) {\n\twindow.CKEDITOR_TRANSLATIONS = {};\n}\n\n/**\n * Adds translations to existing ones.\n * These translations will later be available for the {@link module:utils/translation-service~translate `translate()`} function.\n *\n *\t\tadd( 'pl', {\n *\t\t\t'OK': 'OK',\n *\t\t\t'Cancel [context: reject]': 'Anuluj'\n *\t\t} );\n *\n * If you cannot import this function from this module (e.g. because you use a CKEditor 5 build), then you can\n * still add translations by extending the global `window.CKEDITOR_TRANSLATIONS` object by using a function like\n * the one below:\n *\n *\t\tfunction addTranslations( language, translations ) {\n *\t\t\tif ( !window.CKEDITOR_TRANSLATIONS ) {\n *\t\t\t\twindow.CKEDITOR_TRANSLATIONS = {};\n *\t\t\t}\n *\n *\t\t\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ] || ( window.CKEDITOR_TRANSLATIONS[ language ] = {} );\n *\n *\t\t\t// Extend the dictionary for the given language.\n *\t\t\tObject.assign( dictionary, translations );\n *\t\t}\n *\n * @param {String} language Target language.\n * @param {Object.<String, String>} translations Translations which will be added to the dictionary.\n */\nexport function add( language, translations ) {\n\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ] || ( window.CKEDITOR_TRANSLATIONS[ language ] = {} );\n\n\tObject.assign( dictionary, translations );\n}\n\n/**\n * Translates string if the translation of the string was previously added to the dictionary.\n * See {@link module:utils/translation-service Translation Service}.\n * This happens in a multi-language mode were translation modules are created by the bundler.\n *\n * When no translation is defined in the dictionary or the dictionary doesn't exist this function returns\n * the original string without the `'[context: ]'` (happens in development and single-language modes).\n *\n * In a single-language mode (when values passed to `t()` were replaced with target language strings) the dictionary\n * is left empty, so this function will return the original strings always.\n *\n *\t\ttranslate( 'pl', 'Cancel [context: reject]' );\n *\n * @param {String} language Target language.\n * @param {String} translationKey String that will be translated.\n * @returns {String} Translated sentence.\n */\nexport function translate( language, translationKey ) {\n\tconst numberOfLanguages = getNumberOfLanguages();\n\n\tif ( numberOfLanguages === 1 ) {\n\t\t// Override the language to the only supported one.\n\t\t// This can't be done in the `Locale` class, because the translations comes after the `Locale` class initialization.\n\t\tlanguage = Object.keys( window.CKEDITOR_TRANSLATIONS )[ 0 ];\n\t}\n\n\tif ( numberOfLanguages === 0 || !hasTranslation( language, translationKey ) ) {\n\t\treturn translationKey.replace( / \\[context: [^\\]]+\\]$/, '' );\n\t}\n\n\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ];\n\n\t// In case of missing translations we still need to cut off the `[context: ]` parts.\n\treturn dictionary[ translationKey ].replace( / \\[context: [^\\]]+\\]$/, '' );\n}\n\n/**\n * Clears dictionaries for test purposes.\n *\n * @protected\n */\nexport function _clear() {\n\twindow.CKEDITOR_TRANSLATIONS = {};\n}\n\n// Checks whether the dictionary exists and translation in that dictionary exists.\nfunction hasTranslation( language, translationKey ) {\n\treturn (\n\t\t( language in window.CKEDITOR_TRANSLATIONS ) &&\n\t\t( translationKey in window.CKEDITOR_TRANSLATIONS[ language ] )\n\t);\n}\n\nfunction getNumberOfLanguages() {\n\treturn Object.keys( window.CKEDITOR_TRANSLATIONS ).length;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/locale\n */\n\n/* globals console */\n\nimport { translate } from './translation-service';\n\nconst RTL_LANGUAGE_CODES = [ 'ar', 'fa', 'he', 'ku', 'ug' ];\n\n/**\n * Represents the localization services.\n */\nexport default class Locale {\n\t/**\n\t * Creates a new instance of the Locale class. Learn more about\n\t * {@glink features/ui-language configuring language of the editor}.\n\t *\n\t * @param {Object} [options] Locale configuration.\n\t * @param {String} [options.uiLanguage='en'] The editor UI language code in the\n\t * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. See {@link #uiLanguage}.\n\t * @param {String} [options.contentLanguage] The editor content language code in the\n\t * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. If not specified, the same as `options.language`.\n\t * See {@link #contentLanguage}.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t\t *\n\t\t * If the {@link #contentLanguage content language} was not specified in the `Locale` constructor,\n\t\t * it also defines the language of the content.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.uiLanguage = options.uiLanguage || 'en';\n\n\t\t/**\n\t\t * The editor content language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t\t *\n\t\t * Usually the same as {@link #uiLanguage editor language}, it can be customized by passing an optional\n\t\t * argument to the `Locale` constructor.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.contentLanguage = options.contentLanguage || this.uiLanguage;\n\n\t\t/**\n\t\t * Text direction of the {@link #uiLanguage editor UI language}. Either `'ltr'` or `'rtl'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.uiLanguageDirection = getLanguageDirection( this.uiLanguage );\n\n\t\t/**\n\t\t * Text direction of the {@link #contentLanguage editor content language}.\n\t\t *\n\t\t * If the content language was passed directly to the `Locale` constructor, this property represents the\n\t\t * direction of that language.\n\t\t *\n\t\t * If the {@link #contentLanguage editor content language} was derived from the {@link #uiLanguage editor language},\n\t\t * the content language direction is the same as the {@link #uiLanguageDirection UI language direction}.\n\t\t *\n\t\t * The value is either `'ltr'` or `'rtl'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.contentLanguageDirection = getLanguageDirection( this.contentLanguage );\n\n\t\t/**\n\t\t * Translates the given string to the {@link #uiLanguage}. This method is also available in\n\t\t * {@link module:core/editor/editor~Editor#t} and {@link module:ui/view~View#t}.\n\t\t *\n\t\t * The strings may contain placeholders (`%<index>`) for values which are passed as the second argument.\n\t\t * `<index>` is the index in the `values` array.\n\t\t *\n\t\t *\t\teditor.t( 'Created file \"%0\" in %1ms.', [ fileName, timeTaken ] );\n\t\t *\n\t\t * This method's context is statically bound to Locale instance,\n\t\t * so it can be called as a function:\n\t\t *\n\t\t *\t\tconst t = this.t;\n\t\t *\t\tt( 'Label' );\n\t\t *\n\t\t * @method #t\n\t\t * @param {String} str The string to translate.\n\t\t * @param {String[]} [values] Values that should be used to interpolate the string.\n\t\t */\n\t\tthis.t = ( ...args ) => this._t( ...args );\n\t}\n\n\t/**\n\t * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t *\n\t * **Note**: This property has been deprecated. Please use {@link #uiLanguage} and {@link #contentLanguage}\n\t * properties instead.\n\t *\n\t * @deprecated\n\t * @member {String}\n\t */\n\tget language() {\n\t\t/**\n\t\t * The {@link module:utils/locale~Locale#language `Locale#language`} property has been deprecated and will\n\t\t * be removed in the near future. Please use {@link #uiLanguage} and {@link #contentLanguage} properties instead.\n\t\t *\n\t\t * @error locale-deprecated-language-property\n\t\t */\n\t\tconsole.warn(\n\t\t\t'locale-deprecated-language-property: ' +\n\t\t\t'The Locale#language property has been deprecated and will be removed in the near future. ' +\n\t\t\t'Please use #uiLanguage and #contentLanguage properties instead.' );\n\n\t\treturn this.uiLanguage;\n\t}\n\n\t/**\n\t * Base for the {@link #t} method.\n\t *\n\t * @private\n\t */\n\t_t( str, values ) {\n\t\tlet translatedString = translate( this.uiLanguage, str );\n\n\t\tif ( values ) {\n\t\t\ttranslatedString = translatedString.replace( /%(\\d+)/g, ( match, index ) => {\n\t\t\t\treturn ( index < values.length ) ? values[ index ] : match;\n\t\t\t} );\n\t\t}\n\n\t\treturn translatedString;\n\t}\n}\n\n// Helps determine whether a language is LTR or RTL.\n//\n// @param {String} language The ISO 639-1 language code.\n// @returns {String} 'ltr' or 'rtl\nfunction getLanguageDirection( languageCode ) {\n\treturn RTL_LANGUAGE_CODES.includes( languageCode ) ? 'rtl' : 'ltr';\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/viewconsumable\n */\n\nimport { isArray } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Class used for handling consumption of view {@link module:engine/view/element~Element elements},\n * {@link module:engine/view/text~Text text nodes} and {@link module:engine/view/documentfragment~DocumentFragment document fragments}.\n * Element's name and its parts (attributes, classes and styles) can be consumed separately. Consuming an element's name\n * does not consume its attributes, classes and styles.\n * To add items for consumption use {@link module:engine/conversion/viewconsumable~ViewConsumable#add add method}.\n * To test items use {@link module:engine/conversion/viewconsumable~ViewConsumable#test test method}.\n * To consume items use {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consume method}.\n * To revert already consumed items use {@link module:engine/conversion/viewconsumable~ViewConsumable#revert revert method}.\n *\n *\t\tviewConsumable.add( element, { name: true } ); // Adds element's name as ready to be consumed.\n *\t\tviewConsumable.add( textNode ); // Adds text node for consumption.\n *\t\tviewConsumable.add( docFragment ); // Adds document fragment for consumption.\n *\t\tviewConsumable.test( element, { name: true }  ); // Tests if element's name can be consumed.\n *\t\tviewConsumable.test( textNode ); // Tests if text node can be consumed.\n *\t\tviewConsumable.test( docFragment ); // Tests if document fragment can be consumed.\n *\t\tviewConsumable.consume( element, { name: true }  ); // Consume element's name.\n *\t\tviewConsumable.consume( textNode ); // Consume text node.\n *\t\tviewConsumable.consume( docFragment ); // Consume document fragment.\n *\t\tviewConsumable.revert( element, { name: true }  ); // Revert already consumed element's name.\n *\t\tviewConsumable.revert( textNode ); // Revert already consumed text node.\n *\t\tviewConsumable.revert( docFragment ); // Revert already consumed document fragment.\n */\nexport default class ViewConsumable {\n\t/**\n\t * Creates new ViewConsumable.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Map of consumable elements. If {@link module:engine/view/element~Element element} is used as a key,\n\t\t * {@link module:engine/conversion/viewconsumable~ViewElementConsumables ViewElementConsumables} instance is stored as value.\n\t\t * For {@link module:engine/view/text~Text text nodes} and\n\t\t * {@link module:engine/view/documentfragment~DocumentFragment document fragments} boolean value is stored as value.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<module:engine/conversion/viewconsumable~ViewElementConsumables|Boolean>}\n\t\t*/\n\t\tthis._consumables = new Map();\n\t}\n\n\t/**\n\t * Adds {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} as ready to be consumed.\n\t *\n\t *\t\tviewConsumable.add( p, { name: true } ); // Adds element's name to consume.\n\t *\t\tviewConsumable.add( p, { attributes: 'name' } ); // Adds element's attribute.\n\t *\t\tviewConsumable.add( p, { classes: 'foobar' } ); // Adds element's class.\n\t *\t\tviewConsumable.add( p, { styles: 'color' } ); // Adds element's style\n\t *\t\tviewConsumable.add( p, { attributes: 'name', styles: 'color' } ); // Adds attribute and style.\n\t *\t\tviewConsumable.add( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be provided.\n\t *\t\tviewConsumable.add( textNode ); // Adds text node to consume.\n\t *\t\tviewConsumable.add( docFragment ); // Adds document fragment to consume.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * attribute is provided - it should be handled separately by providing actual style/class.\n\t *\n\t *\t\tviewConsumable.add( p, { attributes: 'style' } ); // This call will throw an exception.\n\t *\t\tviewConsumable.add( p, { styles: 'color' } ); // This is properly handled style.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t */\n\tadd( element, consumables ) {\n\t\tlet elementConsumables;\n\n\t\t// For text nodes and document fragments just mark them as consumable.\n\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\tthis._consumables.set( element, true );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// For elements create new ViewElementConsumables or update already existing one.\n\t\tif ( !this._consumables.has( element ) ) {\n\t\t\telementConsumables = new ViewElementConsumables();\n\t\t\tthis._consumables.set( element, elementConsumables );\n\t\t} else {\n\t\t\telementConsumables = this._consumables.get( element );\n\t\t}\n\n\t\telementConsumables.add( consumables );\n\t}\n\n\t/**\n\t * Tests if {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} can be consumed.\n\t * It returns `true` when all items included in method's call can be consumed. Returns `false` when\n\t * first already consumed item is found and `null` when first non-consumable item is found.\n\t *\n\t *\t\tviewConsumable.test( p, { name: true } ); // Tests element's name.\n\t *\t\tviewConsumable.test( p, { attributes: 'name' } ); // Tests attribute.\n\t *\t\tviewConsumable.test( p, { classes: 'foobar' } ); // Tests class.\n\t *\t\tviewConsumable.test( p, { styles: 'color' } ); // Tests style.\n\t *\t\tviewConsumable.test( p, { attributes: 'name', styles: 'color' } ); // Tests attribute and style.\n\t *\t\tviewConsumable.test( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be tested.\n\t *\t\tviewConsumable.test( textNode ); // Tests text node.\n\t *\t\tviewConsumable.test( docFragment ); // Tests document fragment.\n\t *\n\t * Testing classes and styles as attribute will test if all added classes/styles can be consumed.\n\t *\n\t *\t\tviewConsumable.test( p, { attributes: 'class' } ); // Tests if all added classes can be consumed.\n\t *\t\tviewConsumable.test( p, { attributes: 'style' } ); // Tests if all added styles can be consumed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t * @returns {Boolean|null} Returns `true` when all items included in method's call can be consumed. Returns `false`\n\t * when first already consumed item is found and `null` when first non-consumable item is found.\n\t */\n\ttest( element, consumables ) {\n\t\tconst elementConsumables = this._consumables.get( element );\n\n\t\tif ( elementConsumables === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// For text nodes and document fragments return stored boolean value.\n\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\treturn elementConsumables;\n\t\t}\n\n\t\t// For elements test consumables object.\n\t\treturn elementConsumables.test( consumables );\n\t}\n\n\t/**\n\t * Consumes {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t * It returns `true` when all items included in method's call can be consumed, otherwise returns `false`.\n\t *\n\t *\t\tviewConsumable.consume( p, { name: true } ); // Consumes element's name.\n\t *\t\tviewConsumable.consume( p, { attributes: 'name' } ); // Consumes element's attribute.\n\t *\t\tviewConsumable.consume( p, { classes: 'foobar' } ); // Consumes element's class.\n\t *\t\tviewConsumable.consume( p, { styles: 'color' } ); // Consumes element's style.\n\t *\t\tviewConsumable.consume( p, { attributes: 'name', styles: 'color' } ); // Consumes attribute and style.\n\t *\t\tviewConsumable.consume( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be consumed.\n\t *\t\tviewConsumable.consume( textNode ); // Consumes text node.\n\t *\t\tviewConsumable.consume( docFragment ); // Consumes document fragment.\n\t *\n\t * Consuming classes and styles as attribute will test if all added classes/styles can be consumed.\n\t *\n\t *\t\tviewConsumable.consume( p, { attributes: 'class' } ); // Consume only if all added classes can be consumed.\n\t *\t\tviewConsumable.consume( p, { attributes: 'style' } ); // Consume only if all added styles can be consumed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t * @returns {Boolean} Returns `true` when all items included in method's call can be consumed,\n\t * otherwise returns `false`.\n\t */\n\tconsume( element, consumables ) {\n\t\tif ( this.test( element, consumables ) ) {\n\t\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\t\t// For text nodes and document fragments set value to false.\n\t\t\t\tthis._consumables.set( element, false );\n\t\t\t} else {\n\t\t\t\t// For elements - consume consumables object.\n\t\t\t\tthis._consumables.get( element ).consume( consumables );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Reverts {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} so they can be consumed once again.\n\t * Method does not revert items that were never previously added for consumption, even if they are included in\n\t * method's call.\n\t *\n\t *\t\tviewConsumable.revert( p, { name: true } ); // Reverts element's name.\n\t *\t\tviewConsumable.revert( p, { attributes: 'name' } ); // Reverts element's attribute.\n\t *\t\tviewConsumable.revert( p, { classes: 'foobar' } ); // Reverts element's class.\n\t *\t\tviewConsumable.revert( p, { styles: 'color' } ); // Reverts element's style.\n\t *\t\tviewConsumable.revert( p, { attributes: 'name', styles: 'color' } ); // Reverts attribute and style.\n\t *\t\tviewConsumable.revert( p, { classes: [ 'baz', 'bar' ] } ); // Multiple names can be reverted.\n\t *\t\tviewConsumable.revert( textNode ); // Reverts text node.\n\t *\t\tviewConsumable.revert( docFragment ); // Reverts document fragment.\n\t *\n\t * Reverting classes and styles as attribute will revert all classes/styles that were previously added for\n\t * consumption.\n\t *\n\t *\t\tviewConsumable.revert( p, { attributes: 'class' } ); // Reverts all classes added for consumption.\n\t *\t\tviewConsumable.revert( p, { attributes: 'style' } ); // Reverts all styles added for consumption.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t */\n\trevert( element, consumables ) {\n\t\tconst elementConsumables = this._consumables.get( element );\n\n\t\tif ( elementConsumables !== undefined ) {\n\t\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\t\t// For text nodes and document fragments - set consumable to true.\n\t\t\t\tthis._consumables.set( element, true );\n\t\t\t} else {\n\t\t\t\t// For elements - revert items from consumables object.\n\t\t\t\telementConsumables.revert( consumables );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates consumable object from {@link module:engine/view/element~Element view element}. Consumable object will include\n\t * element's name and all its attributes, classes and styles.\n\t *\n\t * @static\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Object} consumables\n\t */\n\tstatic consumablesFromElement( element ) {\n\t\tconst consumables = {\n\t\t\tname: true,\n\t\t\tattributes: [],\n\t\t\tclasses: [],\n\t\t\tstyles: []\n\t\t};\n\n\t\tconst attributes = element.getAttributeKeys();\n\n\t\tfor ( const attribute of attributes ) {\n\t\t\t// Skip classes and styles - will be added separately.\n\t\t\tif ( attribute == 'style' || attribute == 'class' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconsumables.attributes.push( attribute );\n\t\t}\n\n\t\tconst classes = element.getClassNames();\n\n\t\tfor ( const className of classes ) {\n\t\t\tconsumables.classes.push( className );\n\t\t}\n\n\t\tconst styles = element.getStyleNames();\n\n\t\tfor ( const style of styles ) {\n\t\t\tconsumables.styles.push( style );\n\t\t}\n\n\t\treturn consumables;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/viewconsumable~ViewConsumable ViewConsumable} instance from\n\t * {@link module:engine/view/node~Node node} or {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t * Instance will contain all elements, child nodes, attributes, styles and classes added for consumption.\n\t *\n\t * @static\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} from View node or document fragment\n\t * from which `ViewConsumable` will be created.\n\t * @param {module:engine/conversion/viewconsumable~ViewConsumable} [instance] If provided, given `ViewConsumable` instance will be used\n\t * to add all consumables. It will be returned instead of a new instance.\n\t */\n\tstatic createFrom( from, instance ) {\n\t\tif ( !instance ) {\n\t\t\tinstance = new ViewConsumable();\n\t\t}\n\n\t\tif ( from.is( 'text' ) ) {\n\t\t\tinstance.add( from );\n\n\t\t\treturn instance;\n\t\t}\n\n\t\t// Add `from` itself, if it is an element.\n\t\tif ( from.is( 'element' ) ) {\n\t\t\tinstance.add( from, ViewConsumable.consumablesFromElement( from ) );\n\t\t}\n\n\t\tif ( from.is( 'documentFragment' ) ) {\n\t\t\tinstance.add( from );\n\t\t}\n\n\t\tfor ( const child of from.getChildren() ) {\n\t\t\tinstance = ViewConsumable.createFrom( child, instance );\n\t\t}\n\n\t\treturn instance;\n\t}\n}\n\n/**\n * This is a private helper-class for {@link module:engine/conversion/viewconsumable~ViewConsumable}.\n * It represents and manipulates consumable parts of a single {@link module:engine/view/element~Element}.\n *\n * @private\n */\nclass ViewElementConsumables {\n\t/**\n\t * Creates ViewElementConsumables instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if name of the element can be consumed.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._canConsumeName = null;\n\n\t\t/**\n\t\t * Contains maps of element's consumables: attributes, classes and styles.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._consumables = {\n\t\t\tattributes: new Map(),\n\t\t\tstyles: new Map(),\n\t\t\tclasses: new Map()\n\t\t};\n\t}\n\n\t/**\n\t * Adds consumable parts of the {@link module:engine/view/element~Element view element}.\n\t * Element's name itself can be marked to be consumed (when element's name is consumed its attributes, classes and\n\t * styles still could be consumed):\n\t *\n\t *\t\tconsumables.add( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.add( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.add( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * attribute is provided - it should be handled separately by providing `style` and `class` in consumables object.\n\t *\n\t * @param {Object} consumables Object describing which parts of the element can be consumed.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be added as consumable.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to add as consumable.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to add as consumable.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to add as consumable.\n\t */\n\tadd( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = true;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._add( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Tests if parts of the {@link module:engine/view/node~Node view node} can be consumed.\n\t *\n\t * Element's name can be tested:\n\t *\n\t *\t\tconsumables.test( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.test( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.test( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be tested.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be tested.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to test.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to test.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to test.\n\t * @returns {Boolean|null} `true` when all tested items can be consumed, `null` when even one of the items\n\t * was never marked for consumption and `false` when even one of the items was already consumed.\n\t */\n\ttest( consumables ) {\n\t\t// Check if name can be consumed.\n\t\tif ( consumables.name && !this._canConsumeName ) {\n\t\t\treturn this._canConsumeName;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tconst value = this._test( type, consumables[ type ] );\n\n\t\t\t\tif ( value !== true ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return true only if all can be consumed.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Consumes parts of {@link module:engine/view/element~Element view element}. This function does not check if consumable item\n\t * is already consumed - it consumes all consumable items provided.\n\t * Element's name can be consumed:\n\t *\n\t *\t\tconsumables.consume( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.consume( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.consume( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be consumed.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be consumed.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to consume.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to consume.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to consume.\n\t */\n\tconsume( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = false;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._consume( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Revert already consumed parts of {@link module:engine/view/element~Element view Element}, so they can be consumed once again.\n\t * Element's name can be reverted:\n\t *\n\t *\t\tconsumables.revert( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.revert( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.revert( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be reverted.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be reverted.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to revert.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to revert.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to revert.\n\t */\n\trevert( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = true;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._revert( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that adds consumables of a given type: attribute, class or style.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * type is provided - it should be handled separately by providing actual style/class type.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_add( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\t/**\n\t\t\t\t * Class and style attributes should be handled separately in\n\t\t\t\t * {@link module:engine/conversion/viewconsumable~ViewConsumable#add `ViewConsumable#add()`}.\n\t\t\t\t *\n\t\t\t\t * What you have done is trying to use:\n\t\t\t\t *\n\t\t\t\t *\t\tconsumables.add( { attributes: [ 'class', 'style' ] } );\n\t\t\t\t *\n\t\t\t\t * While each class and style should be registered separately:\n\t\t\t\t *\n\t\t\t\t *\t\tconsumables.add( { classes: 'some-class', styles: 'font-weight' } );\n\t\t\t\t *\n\t\t\t\t * @error viewconsumable-invalid-attribute\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'viewconsumable-invalid-attribute: Classes and styles should be handled separately.', this );\n\t\t\t}\n\n\t\t\tconsumables.set( name, true );\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that tests consumables of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t * @returns {Boolean|null} Returns `true` if all items can be consumed, `null` when one of the items cannot be\n\t * consumed and `false` when one of the items is already consumed.\n\t */\n\t_test( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// Check all classes/styles if class/style attribute is tested.\n\t\t\t\tconst value = this._test( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\n\t\t\t\tif ( value !== true ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst value = consumables.get( name );\n\t\t\t\t// Return null if attribute is not found.\n\t\t\t\tif ( value === undefined ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif ( !value ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper method that consumes items of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_consume( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// If class or style is provided for consumption - consume them all.\n\t\t\t\tthis._consume( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\t\t\t} else {\n\t\t\t\tconsumables.set( name, false );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that reverts items of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or , `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_revert( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// If class or style is provided for reverting - revert them all.\n\t\t\t\tthis._revert( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\t\t\t} else {\n\t\t\t\tconst value = consumables.get( name );\n\n\t\t\t\tif ( value === false ) {\n\t\t\t\t\tconsumables.set( name, true );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/schema\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport Range from './range';\nimport Position from './position';\nimport Element from './element';\nimport Text from './text';\nimport TreeWalker from './treewalker';\n\n/**\n * The model's schema. It defines allowed and disallowed structures of nodes as well as nodes' attributes.\n * The schema is usually defined by features and based on them the editing framework and features\n * make decisions how to change and process the model.\n *\n * The instance of schema is available in {@link module:engine/model/model~Model#schema `editor.model.schema`}.\n *\n * Read more about the schema in:\n *\n * * {@glink framework/guides/architecture/editing-engine#schema \"Schema\"} section of the\n * {@glink framework/guides/architecture/editing-engine Introduction to the \"Editing engine architecture\"}.\n * * {@glink framework/guides/deep-dive/schema \"Schema\" deep dive} guide.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Schema {\n\t/**\n\t * Creates schema instance.\n\t */\n\tconstructor() {\n\t\tthis._sourceDefinitions = {};\n\n\t\t/**\n\t\t * A dictionary containing attribute properties.\n\t\t *\n\t\t * @private\n\t\t * @member {Object.<String,String>}\n\t\t */\n\t\tthis._attributeProperties = {};\n\n\t\tthis.decorate( 'checkChild' );\n\t\tthis.decorate( 'checkAttribute' );\n\n\t\tthis.on( 'checkAttribute', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.on( 'checkChild', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t\targs[ 1 ] = this.getDefinition( args[ 1 ] );\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Registers schema item. Can only be called once for every item name.\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tinheritAllFrom: '$block'\n\t *\t\t} );\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\tregister( itemName, definition ) {\n\t\tif ( this._sourceDefinitions[ itemName ] ) {\n\t\t\t/**\n\t\t\t * A single item cannot be registered twice in the schema.\n\t\t\t *\n\t\t\t * This situation may happen when:\n\t\t\t *\n\t\t\t * * Two or more plugins called {@link #register `register()`} with the same name. This will usually mean that\n\t\t\t * there is a collision between plugins which try to use the same element in the model. Unfortunately,\n\t\t\t * the only way to solve this is by modifying one of these plugins to use a unique model element name.\n\t\t\t * * A single plugin was loaded twice. This happens when it is installed by npm/yarn in two versions\n\t\t\t * and usually means one or more of the following issues:\n\t\t\t *     * a version mismatch (two of your dependencies require two different versions of this plugin),\n\t\t\t *     * incorrect imports (this plugin is somehow imported twice in a way which confuses webpack),\n\t\t\t *     * mess in `node_modules/` (`rm -rf node_modules/` may help).\n\t\t\t *\n\t\t\t * **Note:** Check the logged `itemName` to better understand which plugin was duplicated/conflicting.\n\t\t\t *\n\t\t\t * @param itemName The name of the model element that is being registered twice.\n\t\t\t * @error schema-cannot-register-item-twice\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'schema-cannot-register-item-twice: A single item cannot be registered twice in the schema.',\n\t\t\t\tthis,\n\t\t\t\t{\n\t\t\t\t\titemName\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ] = [\n\t\t\tObject.assign( {}, definition )\n\t\t];\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Extends a {@link #register registered} item's definition.\n\t *\n\t * Extending properties such as `allowIn` will add more items to the existing properties,\n\t * while redefining properties such as `isBlock` will override the previously defined ones.\n\t *\n\t *\t\tschema.register( 'foo', {\n\t *\t\t\tallowIn: '$root',\n\t *\t\t\tisBlock: true;\n\t *\t\t} );\n\t *\t\tschema.extend( 'foo', {\n\t *\t\t\tallowIn: 'blockQuote',\n\t *\t\t\tisBlock: false\n\t *\t\t} );\n\t *\n\t *\t\tschema.getDefinition( 'foo' );\n\t *\t\t//\t{\n\t *\t\t//\t\tallowIn: [ '$root', 'blockQuote' ],\n\t *\t\t// \t\tisBlock: false\n\t *\t\t//\t}\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\textend( itemName, definition ) {\n\t\tif ( !this._sourceDefinitions[ itemName ] ) {\n\t\t\t/**\n\t\t\t * Cannot extend an item which was not registered yet.\n\t\t\t *\n\t\t\t * This error happens when a plugin tries to extend the schema definition of an item which was not\n\t\t\t * {@link #register registered} yet.\n\t\t\t *\n\t\t\t * @param itemName The name of the model element which is being extended.\n\t\t\t * @error schema-cannot-extend-missing-item\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'schema-cannot-extend-missing-item: Cannot extend an item which was not registered yet.', this, {\n\t\t\t\titemName\n\t\t\t} );\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ].push( Object.assign( {}, definition ) );\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Returns all registered items.\n\t *\n\t * @returns {Object.<String,module:engine/model/schema~SchemaCompiledItemDefinition>}\n\t */\n\tgetDefinitions() {\n\t\tif ( !this._compiledDefinitions ) {\n\t\t\tthis._compile();\n\t\t}\n\n\t\treturn this._compiledDefinitions;\n\t}\n\n\t/**\n\t * Returns a definition of the given item or `undefined` if item is not registered.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t * @returns {module:engine/model/schema~SchemaCompiledItemDefinition}\n\t */\n\tgetDefinition( item ) {\n\t\tlet itemName;\n\n\t\tif ( typeof item == 'string' ) {\n\t\t\titemName = item;\n\t\t} else if ( item.is && ( item.is( 'text' ) || item.is( 'textProxy' ) ) ) {\n\t\t\titemName = '$text';\n\t\t}\n\t\t// Element or module:engine/model/schema~SchemaContextItem.\n\t\telse {\n\t\t\titemName = item.name;\n\t\t}\n\n\t\treturn this.getDefinitions()[ itemName ];\n\t}\n\n\t/**\n\t * Returns `true` if the given item is registered in the schema.\n\t *\n\t *\t\tschema.isRegistered( 'paragraph' ); // -> true\n\t *\t\tschema.isRegistered( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isRegistered( 'foo' ); // -> false\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisRegistered( item ) {\n\t\treturn !!this.getDefinition( item );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a block by {@link module:engine/model/schema~SchemaItemDefinition}'s `isBlock` property.\n\t *\n\t *\t\tschema.isBlock( 'paragraph' ); // -> true\n\t *\t\tschema.isBlock( '$root' ); // -> false\n\t *\n\t *\t\tconst paragraphElement = writer.createElement( 'paragraph' );\n\t *\t\tschema.isBlock( paragraphElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisBlock( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isBlock );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a limit element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isLimit` or `isObject` property\n\t * (all objects are also limits).\n\t *\n\t *\t\tschema.isLimit( 'paragraph' ); // -> false\n\t *\t\tschema.isLimit( '$root' ); // -> true\n\t *\t\tschema.isLimit( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isLimit( 'image' ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisLimit( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!( def.isLimit || def.isObject );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * an object element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isObject` property.\n\t *\n\t *\t\tschema.isObject( 'paragraph' ); // -> false\n\t *\t\tschema.isObject( 'image' ); // -> true\n\t *\n\t *\t\tconst imageElement = writer.createElement( 'image' );\n\t *\t\tschema.isObject( imageElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisObject( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isObject );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * an inline element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isInline` property.\n\t *\n\t *\t\tschema.isInline( 'paragraph' ); // -> false\n\t *\t\tschema.isInline( 'softBreak' ); // -> true\n\t *\n\t *\t\tconst text = writer.createText('foo' );\n\t *\t\tschema.isInline( text ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisInline( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isInline );\n\t}\n\n\t/**\n\t * Checks whether the given node (`child`) can be a child of the given context.\n\t *\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> false\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tallowIn: '$root'\n\t *\t\t} );\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> true\n\t *\n\t * Note: When verifying whether the given node can be a child of the given context, the\n\t * schema also verifies the entire context &mdash; from its root to its last element. Therefore, it is possible\n\t * for `checkChild()` to return `false` even though the context's last element can contain the checked child.\n\t * It happens if one of the context's elements does not allow its child.\n\t *\n\t * @fires checkChild\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the child will be checked.\n\t * @param {module:engine/model/node~Node|String} def The child to check.\n\t */\n\tcheckChild( context, def ) {\n\t\t// Note: context and child are already normalized here to a SchemaContext and SchemaCompiledItemDefinition.\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._checkContextMatch( def, context );\n\t}\n\n\t/**\n\t * Checks whether the given attribute can be applied in the given context (on the last\n\t * item of the context).\n\t *\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> false\n\t *\n\t *\t\tschema.extend( '$text', {\n\t *\t\t\tallowAttributes: 'bold'\n\t *\t\t} );\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> true\n\t *\n\t * @fires checkAttribute\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the attribute will be checked.\n\t * @param {String} attributeName\n\t */\n\tcheckAttribute( context, attributeName ) {\n\t\tconst def = this.getDefinition( context.last );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn def.allowAttributes.includes( attributeName );\n\t}\n\n\t/**\n\t * Checks whether the given element (`elementToMerge`) can be merged with the specified base element (`positionOrBaseElement`).\n\t *\n\t * In other words &mdash; whether `elementToMerge`'s children {@link #checkChild are allowed} in the `positionOrBaseElement`.\n\t *\n\t * This check ensures that elements merged with {@link module:engine/model/writer~Writer#merge `Writer#merge()`}\n\t * will be valid.\n\t *\n\t * Instead of elements, you can pass the instance of the {@link module:engine/model/position~Position} class as the\n\t * `positionOrBaseElement`. It means that the elements before and after the position will be checked whether they can be merged.\n\t *\n\t * @param {module:engine/model/position~Position|module:engine/model/element~Element} positionOrBaseElement The position or base\n\t * element to which the `elementToMerge` will be merged.\n\t * @param {module:engine/model/element~Element} elementToMerge The element to merge. Required if `positionOrBaseElement` is an element.\n\t * @returns {Boolean}\n\t */\n\tcheckMerge( positionOrBaseElement, elementToMerge = null ) {\n\t\tif ( positionOrBaseElement instanceof Position ) {\n\t\t\tconst nodeBefore = positionOrBaseElement.nodeBefore;\n\t\t\tconst nodeAfter = positionOrBaseElement.nodeAfter;\n\n\t\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node before the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-before\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'schema-check-merge-no-element-before: The node before the merge position must be an element.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node after the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-after\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'schema-check-merge-no-element-after: The node after the merge position must be an element.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this.checkMerge( nodeBefore, nodeAfter );\n\t\t}\n\n\t\tfor ( const child of elementToMerge.getChildren() ) {\n\t\t\tif ( !this.checkChild( positionOrBaseElement, child ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkChild} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow elements in specific contexts.\n\t *\n\t * This method is a shorthand for using the {@link #event:checkChild} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow heading1 directly inside a blockQuote.\n\t *\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkChild', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst childDefinition = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkChild()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and\n\t * {@link module:engine/model/schema~SchemaCompiledItemDefinition} (child-to-check definition).\n\t * The callback may return `true/false` to override `checkChild()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkChild()`'s return value.\n\t */\n\taddChildCheck( callback ) {\n\t\tthis.on( 'checkChild', ( evt, [ ctx, childDef ] ) => {\n\t\t\t// checkChild() was called with a non-registered child.\n\t\t\t// In 99% cases such check should return false, so not to overcomplicate all callbacks\n\t\t\t// don't even execute them.\n\t\t\tif ( !childDef ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst retValue = callback( ctx, childDef );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkAttribute} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow attribute if node to which it is applied\n\t * is contained within some other element (e.g. you want to disallow `bold` on `$text` within `heading1`).\n\t *\n\t * This method is a shorthand for using the {@link #event:checkAttribute} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow bold on $text inside heading1.\n\t *\t\tschema.addAttributeCheck( ( context, attributeName ) => {\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst attributeName = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkAttribute()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and attribute name.\n\t * The callback may return `true/false` to override `checkAttribute()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkAttribute()`'s return value.\n\t */\n\taddAttributeCheck( callback ) {\n\t\tthis.on( 'checkAttribute', ( evt, [ ctx, attributeName ] ) => {\n\t\t\tconst retValue = callback( ctx, attributeName );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * This method allows assigning additional metadata to the model attributes. For example,\n\t * {@link module:engine/model/schema~AttributeProperties `AttributeProperties#isFormatting` property} is\n\t * used to mark formatting attributes (like `bold` or `italic`).\n\t *\n\t *\t\t// Mark bold as a formatting attribute.\n\t *\t\tschema.setAttributeProperties( 'bold', {\n\t *\t\t\tisFormatting: true\n\t *\t\t} );\n\t *\n\t *\t\t// Override code not to be considered a formatting markup.\n\t *\t\tschema.setAttributeProperties( 'code', {\n\t *\t\t\tisFormatting: false\n\t *\t\t} );\n\t *\n\t * Properties are not limited to members defined in the\n\t * {@link module:engine/model/schema~AttributeProperties `AttributeProperties` type} and you can also use custom properties:\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\tcustomProperty: 'value'\n\t *\t\t} );\n\t *\n\t * Subsequent calls with the same attribute will extend its custom properties:\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\tone: 1\n\t *\t\t} );\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\ttwo: 2\n\t *\t\t} );\n\t *\n\t *\t\tconsole.log( schema.getAttributeProperties( 'blockQuote' ) );\n\t *\t\t// Logs: { one: 1, two: 2 }\n\t *\n\t * @param {String} attributeName A name of the attribute to receive the properties.\n\t * @param {module:engine/model/schema~AttributeProperties} properties A dictionary of properties.\n\t */\n\tsetAttributeProperties( attributeName, properties ) {\n\t\tthis._attributeProperties[ attributeName ] = Object.assign( this.getAttributeProperties( attributeName ), properties );\n\t}\n\n\t/**\n\t * Returns properties associated with a given model attribute. See {@link #setAttributeProperties `setAttributeProperties()`}.\n\t *\n\t * @param {String} attributeName A name of the attribute.\n\t * @returns {module:engine/model/schema~AttributeProperties}\n\t */\n\tgetAttributeProperties( attributeName ) {\n\t\treturn this._attributeProperties[ attributeName ] || {};\n\t}\n\n\t/**\n\t * Returns the lowest {@link module:engine/model/schema~Schema#isLimit limit element} containing the entire\n\t * selection/range/position or the root otherwise.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/range~Range|module:engine/model/position~Position} selectionOrRangeOrPosition\n\t * The selection/range/position to check.\n\t * @returns {module:engine/model/element~Element} The lowest limit element containing\n\t * the entire `selectionOrRangeOrPosition`.\n\t */\n\tgetLimitElement( selectionOrRangeOrPosition ) {\n\t\tlet element;\n\n\t\tif ( selectionOrRangeOrPosition instanceof Position ) {\n\t\t\telement = selectionOrRangeOrPosition.parent;\n\t\t} else {\n\t\t\tconst ranges = selectionOrRangeOrPosition instanceof Range ?\n\t\t\t\t[ selectionOrRangeOrPosition ] :\n\t\t\t\tArray.from( selectionOrRangeOrPosition.getRanges() );\n\n\t\t\t// Find the common ancestor for all selection's ranges.\n\t\t\telement = ranges\n\t\t\t\t.reduce( ( element, range ) => {\n\t\t\t\t\tconst rangeCommonAncestor = range.getCommonAncestor();\n\n\t\t\t\t\tif ( !element ) {\n\t\t\t\t\t\treturn rangeCommonAncestor;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn element.getCommonAncestor( rangeCommonAncestor, { includeSelf: true } );\n\t\t\t\t}, null );\n\t\t}\n\n\t\twhile ( !this.isLimit( element ) ) {\n\t\t\tif ( element.parent ) {\n\t\t\t\telement = element.parent;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn element;\n\t}\n\n\t/**\n\t * Checks whether the attribute is allowed in selection:\n\t *\n\t * * if the selection is not collapsed, then checks if the attribute is allowed on any of nodes in that range,\n\t * * if the selection is collapsed, then checks if on the selection position there's a text with the\n\t * specified attribute allowed.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * Selection which will be checked.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Boolean}\n\t */\n\tcheckAttributeInSelection( selection, attribute ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\t\t\tconst context = [\n\t\t\t\t...firstPosition.getAncestors(),\n\t\t\t\tnew Text( '', selection.getAttributes() )\n\t\t\t];\n\n\t\t\t// Check whether schema allows for a text with the attribute in the selection.\n\t\t\treturn this.checkAttribute( context, attribute );\n\t\t} else {\n\t\t\tconst ranges = selection.getRanges();\n\n\t\t\t// For all ranges, check nodes in them until you find a node that is allowed to have the attribute.\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tif ( this.checkAttribute( value.item, attribute ) ) {\n\t\t\t\t\t\t// If we found a node that is allowed to have the attribute, return true.\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we haven't found such node, return false.\n\t\treturn false;\n\t}\n\n\t/**\n\t * Transforms the given set of ranges into a set of ranges where the given attribute is allowed (and can be applied).\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be validated.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Iterable.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\t* getValidRanges( ranges, attribute ) {\n\t\tranges = convertToMinimalFlatRanges( ranges );\n\n\t\tfor ( const range of ranges ) {\n\t\t\tyield* this._getValidRangesForRange( range, attribute );\n\t\t}\n\t}\n\n\t/**\n\t * Basing on given `position`, finds and returns a {@link module:engine/model/range~Range range} which is\n\t * nearest to that `position` and is a correct range for selection.\n\t *\n\t * The correct selection range might be collapsed when it is located in a position where the text node can be placed.\n\t * Non-collapsed range is returned when selection can be placed around element marked as an \"object\" in\n\t * the {@link module:engine/model/schema~Schema schema}.\n\t *\n\t * Direction of searching for the nearest correct selection range can be specified as:\n\t *\n\t * * `both` - searching will be performed in both ways,\n\t * * `forward` - searching will be performed only forward,\n\t * * `backward` - searching will be performed only backward.\n\t *\n\t * When valid selection range cannot be found, `null` is returned.\n\t *\n\t * @param {module:engine/model/position~Position} position Reference position where new selection range should be looked for.\n\t * @param {'both'|'forward'|'backward'} [direction='both'] Search direction.\n\t * @returns {module:engine/model/range~Range|null} Nearest selection range or `null` if one cannot be found.\n\t */\n\tgetNearestSelectionRange( position, direction = 'both' ) {\n\t\t// Return collapsed range if provided position is valid.\n\t\tif ( this.checkChild( position, '$text' ) ) {\n\t\t\treturn new Range( position );\n\t\t}\n\n\t\tlet backwardWalker, forwardWalker;\n\n\t\tif ( direction == 'both' || direction == 'backward' ) {\n\t\t\tbackwardWalker = new TreeWalker( { startPosition: position, direction: 'backward' } );\n\t\t}\n\n\t\tif ( direction == 'both' || direction == 'forward' ) {\n\t\t\tforwardWalker = new TreeWalker( { startPosition: position } );\n\t\t}\n\n\t\tfor ( const data of combineWalkers( backwardWalker, forwardWalker ) ) {\n\t\t\tconst type = ( data.walker == backwardWalker ? 'elementEnd' : 'elementStart' );\n\t\t\tconst value = data.value;\n\n\t\t\tif ( value.type == type && this.isObject( value.item ) ) {\n\t\t\t\treturn Range._createOn( value.item );\n\t\t\t}\n\n\t\t\tif ( this.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\t\treturn new Range( value.nextPosition );\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Tries to find position ancestors that allows to insert given node.\n\t * It starts searching from the given position and goes node by node to the top of the model tree\n\t * as long as {@link module:engine/model/schema~Schema#isLimit limit element},\n\t * {@link module:engine/model/schema~Schema#isObject object element} or top-most ancestor won't be reached.\n\t *\n\t * @params {module:engine/model/position~Position} position Position from searching will start.\n\t * @params {module:engine/model/node~Node|String} node Node for which allowed parent should be found or its name.\n\t * @returns {module:engine/model/element~Element|null} element Allowed parent or null if nothing was found.\n\t */\n\tfindAllowedParent( position, node ) {\n\t\tlet parent = position.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( this.checkChild( parent, node ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\t// Do not split limit elements.\n\t\t\tif ( this.isLimit( parent ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes attributes disallowed by the schema.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes that will be filtered.\n\t * @param {module:engine/model/writer~Writer} writer\n\t */\n\tremoveDisallowedAttributes( nodes, writer ) {\n\t\tfor ( const node of nodes ) {\n\t\t\tfor ( const attribute of node.getAttributeKeys() ) {\n\t\t\t\tif ( !this.checkAttribute( node, attribute ) ) {\n\t\t\t\t\twriter.removeAttribute( attribute, node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( node.is( 'element' ) ) {\n\t\t\t\tthis.removeDisallowedAttributes( node.getChildren(), writer );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates an instance of the schema context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t * @returns {module:engine/model/schema~SchemaContext}\n\t */\n\tcreateContext( context ) {\n\t\treturn new SchemaContext( context );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_clearCache() {\n\t\tthis._compiledDefinitions = null;\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_compile() {\n\t\tconst compiledDefinitions = {};\n\t\tconst sourceRules = this._sourceDefinitions;\n\t\tconst itemNames = Object.keys( sourceRules );\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompiledDefinitions[ itemName ] = compileBaseItemRule( sourceRules[ itemName ], itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowContentOf( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowWhere( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowAttributesOf( compiledDefinitions, itemName );\n\t\t\tcompileInheritPropertiesFrom( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcleanUpAllowIn( compiledDefinitions, itemName );\n\t\t\tcleanUpAllowAttributes( compiledDefinitions, itemName );\n\t\t}\n\n\t\tthis._compiledDefinitions = compiledDefinitions;\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/schema~SchemaCompiledItemDefinition} def\n\t * @param {module:engine/model/schema~SchemaContext} context\n\t * @param {Number} contextItemIndex\n\t */\n\t_checkContextMatch( def, context, contextItemIndex = context.length - 1 ) {\n\t\tconst contextItem = context.getItem( contextItemIndex );\n\n\t\tif ( def.allowIn.includes( contextItem.name ) ) {\n\t\t\tif ( contextItemIndex == 0 ) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconst parentRule = this.getDefinition( contextItem );\n\n\t\t\t\treturn this._checkContextMatch( parentRule, context, contextItemIndex - 1 );\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Takes a flat range and an attribute name. Traverses the range recursively and deeply to find and return all ranges\n\t * inside the given range on which the attribute can be applied.\n\t *\n\t * This is a helper function for {@link ~Schema#getValidRanges}.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Range to process.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Iterable.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\t* _getValidRangesForRange( range, attribute ) {\n\t\tlet start = range.start;\n\t\tlet end = range.start;\n\n\t\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\tyield* this._getValidRangesForRange( Range._createIn( item ), attribute );\n\t\t\t}\n\n\t\t\tif ( !this.checkAttribute( item, attribute ) ) {\n\t\t\t\tif ( !start.isEqual( end ) ) {\n\t\t\t\t\tyield new Range( start, end );\n\t\t\t\t}\n\n\t\t\t\tstart = Position._createAfter( item );\n\t\t\t}\n\n\t\t\tend = Position._createAfter( item );\n\t\t}\n\n\t\tif ( !start.isEqual( end ) ) {\n\t\t\tyield new Range( start, end );\n\t\t}\n\t}\n}\n\nmix( Schema, ObservableMixin );\n\n/**\n * Event fired when the {@link #checkChild} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addChildCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkChild} method fires an event because it is\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkChild()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkChild( context, child )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance and `child` to a\n * {@link module:engine/model/schema~SchemaCompiledItemDefinition} instance, so you don't have to worry about\n * the various ways how `context` and `child` may be passed to `checkChild()`.\n *\n * **Note:** `childDefinition` may be `undefined` if `checkChild()` was called with a non-registered element.\n *\n * So, in order to implement a rule \"disallow `heading1` in `blockQuote`\" you can add such a listener:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing elements in specific contexts will be a far less common use case, because it's normally handled by\n * `allowIn` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `listItem` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo' ) && childDefinition.name == 'listItem' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkChild\n * @param {Array} args The `checkChild()`'s arguments.\n */\n\n/**\n * Event fired when the {@link #checkAttribute} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addAttributeCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkAttribute} method fires an event because it's\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkAttribute()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst attributeName = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkAttribute( context, attributeName )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance, so you don't have to worry about\n * the various ways how `context` may be passed to `checkAttribute()`.\n *\n * So, in order to implement a rule \"disallow `bold` in a text which is in a `heading1` you can add such a listener:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing attributes in specific contexts will be a far less common use case, because it's normally handled by\n * `allowAttributes` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `bold` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkAttribute\n * @param {Array} args The `checkAttribute()`'s arguments.\n */\n\n/**\n * A definition of a {@link module:engine/model/schema~Schema schema} item.\n *\n * You can define the following rules:\n *\n * * `allowIn` &ndash; A string or an array of strings. Defines in which other items this item will be allowed.\n * * `allowAttributes` &ndash; A string or an array of strings. Defines allowed attributes of the given item.\n * * `allowContentOf` &ndash; A string or an array of strings. Inherits \"allowed children\" from other items.\n * * `allowWhere` &ndash; A string or an array of strings. Inherits \"allowed in\" from other items.\n * * `allowAttributesOf` &ndash; A string or an array of strings. Inherits attributes from other items.\n * * `inheritTypesFrom` &ndash; A string or an array of strings. Inherits `is*` properties of other items.\n * * `inheritAllFrom` &ndash; A string. A shorthand for `allowContentOf`, `allowWhere`, `allowAttributesOf`, `inheritTypesFrom`.\n * * Additionally, you can define the following `is*` properties: `isBlock`, `isLimit`, `isObject`, `isInline`. Read about them below.\n *\n * # The is* properties\n *\n * There are 3 commonly used `is*` properties. Their role is to assign additional semantics to schema items.\n * You can define more properties but you will also need to implement support for them in the existing editor features.\n *\n * * `isBlock` &ndash; Whether this item is paragraph-like. Generally speaking, content is usually made out of blocks\n * like paragraphs, list items, images, headings, etc. All these elements are marked as blocks. A block\n * should not allow another block inside. Note: There is also the `$block` generic item which has `isBlock` set to `true`.\n * Most block type items will inherit from `$block` (through `inheritAllFrom`).\n * * `isLimit` &ndash; It can be understood as whether this element should not be split by <kbd>Enter</kbd>.\n * Examples of limit elements: `$root`, table cell, image caption, etc. In other words, all actions that happen inside\n * a limit element are limited to its content. **Note:** All objects (`isObject`) are treated as limit elements, too.\n * * `isObject` &ndash; Whether an item is \"self-contained\" and should be treated as a whole. Examples of object elements:\n * `image`, `table`, `video`, etc. **Note:** An object is also a limit, so\n * {@link module:engine/model/schema~Schema#isLimit `isLimit()`} returns `true` for object elements automatically.\n * * `isInline` &ndash; Whether an item is \"text-like\" and should be treated as an inline node. Examples of inline elements:\n * `$text`, `softBreak` (`<br>`), etc.\n *\n * # Generic items\n *\n * There are three basic generic items: `$root`, `$block` and `$text`.\n * They are defined as follows:\n *\n *\t\tthis.schema.register( '$root', {\n *\t\t\tisLimit: true\n *\t\t} );\n *\t\tthis.schema.register( '$block', {\n *\t\t\tallowIn: '$root',\n *\t\t\tisBlock: true\n *\t\t} );\n *\t\tthis.schema.register( '$text', {\n *\t\t\tallowIn: '$block',\n *\t\t\tisInline: true\n *\t\t} );\n *\n * They reflect typical editor content that is contained within one root, consists of several blocks\n * (paragraphs, lists items, headings, images) which, in turn, may contain text inside.\n *\n * By inheriting from the generic items you can define new items which will get extended by other editor features.\n * Read more about generic types in the {@glink framework/guides/deep-dive/schema Defining schema} guide.\n *\n * # Example definitions\n *\n * Allow `paragraph` in roots and block quotes:\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowIn: [ '$root', 'blockQuote' ],\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Allow `paragraph` everywhere where `$block` is allowed (i.e. in `$root`):\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Make `image` a block object, which is allowed everywhere where `$block` is.\n * Also, allow `src` and `alt` attributes in it:\n *\n *\t\tschema.register( 'image', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowAttributes: [ 'src', 'alt' ],\n *\t\t\tisBlock: true,\n *\t\t\tisObject: true\n *\t\t} );\n *\n * Make `caption` allowed in `image` and make it allow all the content of `$block`s (usually, `$text`).\n * Also, mark it as a limit element so it cannot be split:\n *\n *\t\tschema.register( 'caption', {\n *\t\t\tallowIn: 'image',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tisLimit: true\n *\t\t} );\n *\n * Make `listItem` inherit all from `$block` but also allow additional attributes:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tinheritAllFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * Which translates to:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tallowAttributesOf: '$block',\n *\t\t\tinheritTypesFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * # Tips\n *\n * * Check schema definitions of existing features to see how they are defined.\n * * If you want to publish your feature so other developers can use it, try to use\n * generic items as much as possible.\n * * Keep your model clean. Limit it to the actual data and store information in a normalized way.\n * * Remember about definining the `is*` properties. They do not affect the allowed structures, but they can\n * affect how the editor features treat your elements.\n *\n * @typedef {Object} module:engine/model/schema~SchemaItemDefinition\n */\n\n/**\n * A simplified version of {@link module:engine/model/schema~SchemaItemDefinition} after\n * compilation by the {@link module:engine/model/schema~Schema schema}.\n * Rules fed to the schema by {@link module:engine/model/schema~Schema#register}\n * and {@link module:engine/model/schema~Schema#extend} methods are defined in the\n * {@link module:engine/model/schema~SchemaItemDefinition} format.\n * Later on, they are compiled to `SchemaCompiledItemDefition` so when you use e.g.\n * the {@link module:engine/model/schema~Schema#getDefinition} method you get the compiled version.\n *\n * The compiled version contains only the following properties:\n *\n * * The `name` property,\n * * The `is*` properties,\n * * The `allowIn` array,\n * * The `allowAttributes` array.\n *\n * @typedef {Object} module:engine/model/schema~SchemaCompiledItemDefinition\n */\n\n/**\n * A schema context &mdash; a list of ancestors of a given position in the document.\n *\n * Considering such position:\n *\n *\t\t<$root>\n *\t\t\t<blockQuote>\n *\t\t\t\t<paragraph>\n *\t\t\t\t\t^\n *\t\t\t\t</paragraph>\n *\t\t\t</blockQuote>\n *\t\t</$root>\n *\n * The context of this position is its {@link module:engine/model/position~Position#getAncestors lists of ancestors}:\n *\n *\t\t[ rootElement, blockQuoteElement, paragraphElement ]\n *\n * Contexts are used in the {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`} and\n * {@link module:engine/model/schema~Schema#event:checkAttribute `Schema#checkAttribute`} events as a definition\n * of a place in the document where the check occurs. The context instances are created based on the first arguments\n * of the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`} and\n * {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} methods so when\n * using these methods you need to use {@link module:engine/model/schema~SchemaContextDefinition}s.\n */\nexport class SchemaContext {\n\t/**\n\t * Creates an instance of the context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t */\n\tconstructor( context ) {\n\t\tif ( context instanceof SchemaContext ) {\n\t\t\treturn context;\n\t\t}\n\n\t\tif ( typeof context == 'string' ) {\n\t\t\tcontext = [ context ];\n\t\t} else if ( !Array.isArray( context ) ) {\n\t\t\t// `context` is item or position.\n\t\t\t// Position#getAncestors() doesn't accept any parameters but it works just fine here.\n\t\t\tcontext = context.getAncestors( { includeSelf: true } );\n\t\t}\n\n\t\tif ( context[ 0 ] && typeof context[ 0 ] != 'string' && context[ 0 ].is( 'documentFragment' ) ) {\n\t\t\tcontext.shift();\n\t\t}\n\n\t\tthis._items = context.map( mapContextItem );\n\t}\n\n\t/**\n\t * The number of items.\n\t *\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * The last item (the lowest node).\n\t *\n\t * @type {module:engine/model/schema~SchemaContextItem}\n\t */\n\tget last() {\n\t\treturn this._items[ this._items.length - 1 ];\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all context items.\n\t *\n\t * @returns {Iterable.<module:engine/model/schema~SchemaContextItem>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns a new schema context instance with an additional item.\n\t *\n\t * Item can be added as:\n\t *\n\t * \t\tconst context = new SchemaContext( [ '$root' ] );\n\t *\n\t * \t\t// An element.\n\t * \t\tconst fooElement = writer.createElement( 'fooElement' );\n\t * \t\tconst newContext = context.push( fooElement ); // [ '$root', 'fooElement' ]\n\t *\n\t * \t\t// A text node.\n\t * \t\tconst text = writer.createText( 'foobar' );\n\t * \t\tconst newContext = context.push( text ); // [ '$root', '$text' ]\n\t *\n\t * \t\t// A string (element name).\n\t * \t\tconst newContext = context.push( 'barElement' ); // [ '$root', 'barElement' ]\n\t *\n\t * **Note** {@link module:engine/model/node~Node} that is already in the model tree will be added as the only item\n\t * (without ancestors).\n\t *\n\t * @param {String|module:engine/model/node~Node|Array<String|module:engine/model/node~Node>} item An item that will be added\n\t * to the current context.\n\t * @returns {module:engine/model/schema~SchemaContext} A new schema context instance with an additional item.\n\t */\n\tpush( item ) {\n\t\tconst ctx = new SchemaContext( [ item ] );\n\n\t\tctx._items = [ ...this._items, ...ctx._items ];\n\n\t\treturn ctx;\n\t}\n\n\t/**\n\t * Gets an item on the given index.\n\t *\n\t * @returns {module:engine/model/schema~SchemaContextItem}\n\t */\n\tgetItem( index ) {\n\t\treturn this._items[ index ];\n\t}\n\n\t/**\n\t * Returns the names of items.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* getNames() {\n\t\tyield* this._items.map( item => item.name );\n\t}\n\n\t/**\n\t * Checks whether the context ends with the given nodes.\n\t *\n\t *\t\tconst ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n\t *\n\t *\t\tctx.endsWith( '$text' ); // -> true\n\t *\t\tctx.endsWith( 'paragraph $text' ); // -> true\n\t *\t\tctx.endsWith( '$root' ); // -> false\n\t *\t\tctx.endsWith( 'paragraph' ); // -> false\n\t *\n\t * @param {String} query\n\t * @returns {Boolean}\n\t */\n\tendsWith( query ) {\n\t\treturn Array.from( this.getNames() ).join( ' ' ).endsWith( query );\n\t}\n}\n\n/**\n * The definition of a {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * Contexts can be created in multiple ways:\n *\n * * By defining a **node** – in this cases this node and all its ancestors will be used.\n * * By defining a **position** in the document – in this case all its ancestors will be used.\n * * By defining an **array of nodes** – in this case this array defines the entire context.\n * * By defining a **name of node** - in this case node will be \"mocked\". It is not recommended because context\n * will be unrealistic (e.g. attributes of these nodes are not specified). However, at times this may be the only\n * way to define the context (e.g. when checking some hypothetical situation).\n * * By defining an **array of node names** (potentially, mixed with real nodes) – The same as **name of node**\n * but it is possible to create a path.\n * * By defining a {@link module:engine/model/schema~SchemaContext} instance - in this case the same instance as provided\n * will be return.\n *\n * Examples of context definitions passed to the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`}\n * method:\n *\n *\t\t// Assuming that we have a $root > blockQuote > paragraph structure, the following code\n *\t\t// will check node 'foo' in the following context:\n *\t\t// [ rootElement, blockQuoteElement, paragraphElement ]\n *\t\tconst contextDefinition = paragraphElement;\n * \t\tconst childToCheck = 'foo';\n *\t\tschema.checkChild( contextDefinition, childToCheck );\n *\n *\t\t// Also check in [ rootElement, blockQuoteElement, paragraphElement ].\n *\t\tschema.checkChild( model.createPositionAt( paragraphElement, 0 ), 'foo' );\n *\n *\t\t// Check in [ rootElement, paragraphElement ].\n *\t\tschema.checkChild( [ rootElement, paragraphElement ], 'foo' );\n *\n *\t\t// Check only fakeParagraphElement.\n *\t\tschema.checkChild( 'paragraph', 'foo' );\n *\n *\t\t// Check in [ fakeRootElement, fakeBarElement, paragraphElement ].\n *\t\tschema.checkChild( [ '$root', 'bar', paragraphElement ], 'foo' );\n *\n * All these `checkChild()` calls will fire {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`}\n * events in which `args[ 0 ]` is an instance of the context. Therefore, you can write a listener like this:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\n *\t\t\tconsole.log( Array.from( ctx.getNames() ) );\n *\t\t} );\n *\n * Which will log the following:\n *\n *\t\t[ '$root', 'blockQuote', 'paragraph' ]\n *\t\t[ '$root', 'paragraph' ]\n *\t\t[ '$root', 'bar', 'paragraph' ]\n *\n * Note: When using the {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} method\n * you may want to check whether a text node may have an attribute. A {@link module:engine/model/text~Text} is a\n * correct way to define a context so you can do this:\n *\n *\t\tschema.checkAttribute( textNode, 'bold' );\n *\n * But sometimes you want to check whether a text at a given position might've had some attribute,\n * in which case you can create a context by mising an array of elements with a `'$text'` string:\n *\n *\t\t// Check in [ rootElement, paragraphElement, textNode ].\n *\t\tschema.checkChild( [ ...positionInParagraph.getAncestors(), '$text' ], 'bold' );\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/position~Position|module:engine/model/schema~SchemaContext|\n * String|Array.<String|module:engine/model/node~Node>} module:engine/model/schema~SchemaContextDefinition\n */\n\n/**\n * An item of the {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * It contains 3 properties:\n *\n * * `name` – the name of this item,\n * * `* getAttributeKeys()` – a generator of keys of item attributes,\n * * `getAttribute( keyName )` – a method to get attribute values.\n *\n * The context item interface is a highly simplified version of {@link module:engine/model/node~Node} and its role\n * is to expose only the information which schema checks are able to provide (which is the name of the node and\n * node's attributes).\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\t\t\tconst firstItem = ctx.getItem( 0 );\n *\n *\t\t\tconsole.log( firstItem.name ); // -> '$root'\n *\t\t\tconsole.log( firstItem.getAttribute( 'foo' ) ); // -> 'bar'\n *\t\t\tconsole.log( Array.from( firstItem.getAttributeKeys() ) ); // -> [ 'foo', 'faa' ]\n *\t\t} );\n *\n * @typedef {Object} module:engine/model/schema~SchemaContextItem\n */\n\n/**\n * A structure containing additional metadata describing the attribute.\n *\n * See {@link module:engine/model/schema~Schema#setAttributeProperties `Schema#setAttributeProperties()`} for usage examples.\n *\n * @typedef {Object} module:engine/model/schema~AttributeProperties\n * @property {Boolean} [isFormatting] Indicates that the attribute should be considered as a visual formatting, like `bold`, `italic` or\n * `fontSize` rather than semantic attribute (such as `src`, `listType`, etc.). For example, it is used by the \"Remove format\" feature.\n * @property {Boolean} [copyOnEnter] Indicates that given text attribute should be copied to the next block when enter is pressed.\n */\n\nfunction compileBaseItemRule( sourceItemRules, itemName ) {\n\tconst itemRule = {\n\t\tname: itemName,\n\n\t\tallowIn: [],\n\t\tallowContentOf: [],\n\t\tallowWhere: [],\n\n\t\tallowAttributes: [],\n\t\tallowAttributesOf: [],\n\n\t\tinheritTypesFrom: []\n\t};\n\n\tcopyTypes( sourceItemRules, itemRule );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowIn' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowContentOf' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowWhere' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributes' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributesOf' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'inheritTypesFrom' );\n\n\tmakeInheritAllWork( sourceItemRules, itemRule );\n\n\treturn itemRule;\n}\n\nfunction compileAllowContentOf( compiledDefinitions, itemName ) {\n\tfor ( const allowContentOfItemName of compiledDefinitions[ itemName ].allowContentOf ) {\n\t\t// The allowContentOf property may point to an unregistered element.\n\t\tif ( compiledDefinitions[ allowContentOfItemName ] ) {\n\t\t\tconst allowedChildren = getAllowedChildren( compiledDefinitions, allowContentOfItemName );\n\n\t\t\tallowedChildren.forEach( allowedItem => {\n\t\t\t\tallowedItem.allowIn.push( itemName );\n\t\t\t} );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowContentOf;\n}\n\nfunction compileAllowWhere( compiledDefinitions, itemName ) {\n\tfor ( const allowWhereItemName of compiledDefinitions[ itemName ].allowWhere ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowWhereItemName ];\n\n\t\t// The allowWhere property may point to an unregistered element.\n\t\tif ( inheritFrom ) {\n\t\t\tconst allowedIn = inheritFrom.allowIn;\n\n\t\t\tcompiledDefinitions[ itemName ].allowIn.push( ...allowedIn );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowWhere;\n}\n\nfunction compileAllowAttributesOf( compiledDefinitions, itemName ) {\n\tfor ( const allowAttributeOfItem of compiledDefinitions[ itemName ].allowAttributesOf ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowAttributeOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst inheritAttributes = inheritFrom.allowAttributes;\n\n\t\t\tcompiledDefinitions[ itemName ].allowAttributes.push( ...inheritAttributes );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowAttributesOf;\n}\n\nfunction compileInheritPropertiesFrom( compiledDefinitions, itemName ) {\n\tconst item = compiledDefinitions[ itemName ];\n\n\tfor ( const inheritPropertiesOfItem of item.inheritTypesFrom ) {\n\t\tconst inheritFrom = compiledDefinitions[ inheritPropertiesOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst typeNames = Object.keys( inheritFrom ).filter( name => name.startsWith( 'is' ) );\n\n\t\t\tfor ( const name of typeNames ) {\n\t\t\t\tif ( !( name in item ) ) {\n\t\t\t\t\titem[ name ] = inheritFrom[ name ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete item.inheritTypesFrom;\n}\n\n// Remove items which weren't registered (because it may break some checks or we'd need to complicate them).\n// Make sure allowIn doesn't contain repeated values.\nfunction cleanUpAllowIn( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\tconst existingItems = itemRule.allowIn.filter( itemToCheck => compiledDefinitions[ itemToCheck ] );\n\n\titemRule.allowIn = Array.from( new Set( existingItems ) );\n}\n\nfunction cleanUpAllowAttributes( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\titemRule.allowAttributes = Array.from( new Set( itemRule.allowAttributes ) );\n}\n\nfunction copyTypes( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst typeNames = Object.keys( sourceItemRule ).filter( name => name.startsWith( 'is' ) );\n\n\t\tfor ( const name of typeNames ) {\n\t\t\titemRule[ name ] = sourceItemRule[ name ];\n\t\t}\n\t}\n}\n\nfunction copyProperty( sourceItemRules, itemRule, propertyName ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tif ( typeof sourceItemRule[ propertyName ] == 'string' ) {\n\t\t\titemRule[ propertyName ].push( sourceItemRule[ propertyName ] );\n\t\t} else if ( Array.isArray( sourceItemRule[ propertyName ] ) ) {\n\t\t\titemRule[ propertyName ].push( ...sourceItemRule[ propertyName ] );\n\t\t}\n\t}\n}\n\nfunction makeInheritAllWork( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst inheritFrom = sourceItemRule.inheritAllFrom;\n\n\t\tif ( inheritFrom ) {\n\t\t\titemRule.allowContentOf.push( inheritFrom );\n\t\t\titemRule.allowWhere.push( inheritFrom );\n\t\t\titemRule.allowAttributesOf.push( inheritFrom );\n\t\t\titemRule.inheritTypesFrom.push( inheritFrom );\n\t\t}\n\t}\n}\n\nfunction getAllowedChildren( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\treturn getValues( compiledDefinitions ).filter( def => def.allowIn.includes( itemRule.name ) );\n}\n\nfunction getValues( obj ) {\n\treturn Object.keys( obj ).map( key => obj[ key ] );\n}\n\nfunction mapContextItem( ctxItem ) {\n\tif ( typeof ctxItem == 'string' ) {\n\t\treturn {\n\t\t\tname: ctxItem,\n\n\t\t\t* getAttributeKeys() {},\n\n\t\t\tgetAttribute() {}\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\t// '$text' means text nodes and text proxies.\n\t\t\tname: ctxItem.is( 'element' ) ? ctxItem.name : '$text',\n\n\t\t\t* getAttributeKeys() {\n\t\t\t\tyield* ctxItem.getAttributeKeys();\n\t\t\t},\n\n\t\t\tgetAttribute( key ) {\n\t\t\t\treturn ctxItem.getAttribute( key );\n\t\t\t}\n\t\t};\n\t}\n}\n\n// Generator function returning values from provided walkers, switching between them at each iteration. If only one walker\n// is provided it will return data only from that walker.\n//\n// @param {module:engine/module/treewalker~TreeWalker} [backward] Walker iterating in backward direction.\n// @param {module:engine/module/treewalker~TreeWalker} [forward] Walker iterating in forward direction.\n// @returns {Iterable.<Object>} Object returned at each iteration contains `value` and `walker` (informing which walker returned\n// given value) fields.\nfunction* combineWalkers( backward, forward ) {\n\tlet done = false;\n\n\twhile ( !done ) {\n\t\tdone = true;\n\n\t\tif ( backward ) {\n\t\t\tconst step = backward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: backward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( forward ) {\n\t\t\tconst step = forward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: forward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Takes an array of non-intersecting ranges. For each of them gets minimal flat ranges covering that range and returns\n// all those minimal flat ranges.\n//\n// @param {Array.<module:engine/model/range~Range>} ranges Ranges to process.\n// @returns {Iterable.<module:engine/model/range~Range>} Minimal flat ranges of given `ranges`.\nfunction* convertToMinimalFlatRanges( ranges ) {\n\tfor ( const range of ranges ) {\n\t\tyield* range.getMinimalFlatRanges();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/upcastdispatcher\n */\n\nimport ViewConsumable from './viewconsumable';\nimport ModelRange from '../model/range';\nimport ModelPosition from '../model/position';\nimport { SchemaContext } from '../model/schema';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * `UpcastDispatcher` is a central point of {@link module:engine/view/view view} conversion, which is a process of\n * converting given {@link module:engine/view/documentfragment~DocumentFragment view document fragment} or\n * {@link module:engine/view/element~Element} into another structure.\n * In default application, {@link module:engine/view/view view} is converted to {@link module:engine/model/model}.\n *\n * During conversion process, for all {@link module:engine/view/node~Node view nodes} from the converted view document fragment,\n * `UpcastDispatcher` fires corresponding events. Special callbacks called \"converters\" should listen to\n * `UpcastDispatcher` for those events.\n *\n * Each callback, as the second argument, is passed a special object `data` that has `viewItem`, `modelCursor` and\n * `modelRange` properties. `viewItem` property contains {@link module:engine/view/node~Node view node} or\n * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * that is converted at the moment and might be handled by the callback. `modelRange` property should be used to save the result\n * of conversion and is always a {@link module:engine/model/range~Range} when conversion result is correct.\n * `modelCursor` property is a {@link module:engine/model/position~Position position} on which conversion result will be inserted\n * and is a context according to {@link module:engine/model/schema~Schema schema} will be checked before the conversion.\n * See also {@link ~UpcastDispatcher#convert}. It is also shared by reference by all callbacks listening to given event.\n *\n * The third parameter passed to a callback is an instance of {@link ~UpcastDispatcher}\n * which provides additional tools for converters.\n *\n * Examples of providing callbacks for `UpcastDispatcher`:\n *\n *\t\t// Converter for links (<a>).\n *\t\teditor.data.upcastDispatcher.on( 'element:a', ( evt, data, conversionApi ) => {\n *\t\t\tif ( conversionApi.consumable.consume( data.viewItem, { name: true, attributes: [ 'href' ] } ) ) {\n *\t\t\t\t// <a> element is inline and is represented by an attribute in the model.\n *\t\t\t\t// This is why we need to convert only children.\n *\t\t\t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n *\n *\t\t\t\tfor ( let item of modelRange.getItems() ) {\n *\t\t\t\t\tif ( conversionApi.schema.checkAttribute( item, 'linkHref' ) ) {\n *\t\t\t\t\t\tconversionApi.writer.setAttribute( 'linkHref', data.viewItem.getAttribute( 'href' ), item );\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// Convert <p>'s font-size style.\n *\t\t// Note: You should use a low-priority observer in order to ensure that\n *\t\t// it's executed after the element-to-element converter.\n *\t\teditor.data.upcastDispatcher.on( 'element:p', ( evt, data, conversionApi ) => {\n *\t\t\tconst { consumable, schema, writer } = conversionApi;\n *\n *\t\t\tif ( !consumable.consume( data.viewItem, { style: 'font-size' } ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\tconst fontSize = data.viewItem.getStyle( 'font-size' );\n *\n *\t\t\t// Don't go for the model element after data.modelCursor because it might happen\n *\t\t\t// that a single view element was converted to multiple model elements. Get all of them.\n *\t\t\tfor ( const item of data.modelRange.getItems( { shallow: true } ) ) {\n *\t\t\t\tif ( schema.checkAttribute( item, 'fontSize' ) ) {\n *\t\t\t\t\twriter.setAttribute( 'fontSize', fontSize, item );\n *\t\t\t\t}\n *\t\t\t}\n *\t\t}, { priority: 'low' } );\n *\n *\t\t// Convert all elements which have no custom converter into paragraph (autoparagraphing).\n *  \teditor.data.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n *  \t \t// When element is already consumed by higher priority converters then do nothing.\n *  \t \tif ( conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n *  \t \t\t\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n *\n *  \t \t\t\t// Find allowed parent for paragraph that we are going to insert. If current parent does not allow\n *  \t \t\t\t// to insert paragraph but one of the ancestors does then split nodes to allowed parent.\n *  \t \t\t\tconst splitResult = conversionApi.splitToAllowedParent( paragraph, data.modelCursor );\n *\n *  \t \t\t\t// When there is no split result it means that we can't insert paragraph in this position.\n *  \t \t\t\tif ( splitResult ) {\n *  \t \t\t\t\t// Insert paragraph in allowed position.\n *  \t \t\t\t\tconversionApi.writer.insert( paragraph, splitResult.position );\n *\n *  \t \t\t\t\t// Convert children to paragraph.\n *  \t \t\t\t\tconst { modelRange } = conversionApi.convertChildren(\n *  \t \t\t\t\t\tdata.viewItem,\n *  \t \t\t\t\t\tconversionApi.writer.createPositionAt( paragraph, 0 )\n *  \t \t\t\t\t);\n *\n * \t\t\t\t\t\t// Set as conversion result, attribute converters may use this property.\n *  \t \t\t\t\tdata.modelRange = conversionApi.writer.createRange(\n *  \t \t\t\t\t\tconversionApi.writer.createPositionBefore( paragraph ),\n *  \t \t\t\t\t\tmodelRange.end\n *  \t \t\t\t\t);\n *\n *  \t \t\t\t\t// Continue conversion inside paragraph.\n *  \t \t\t\t\tdata.modelCursor = data.modelRange.end;\n *  \t \t\t\t}\n *  \t \t\t}\n *  \t \t}\n *  \t }, { priority: 'low' } );\n *\n * Before each conversion process, `UpcastDispatcher` fires {@link ~UpcastDispatcher#event:viewCleanup}\n * event which can be used to prepare tree view for conversion.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @fires viewCleanup\n * @fires element\n * @fires text\n * @fires documentFragment\n */\nexport default class UpcastDispatcher {\n\t/**\n\t * Creates a `UpcastDispatcher` that operates using passed API.\n\t *\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi\n\t * @param {Object} [conversionApi] Additional properties for interface that will be passed to events fired\n\t * by `UpcastDispatcher`.\n\t */\n\tconstructor( conversionApi = {} ) {\n\t\t/**\n\t\t * List of the elements that were created during splitting.\n\t\t *\n\t\t * After conversion process the list is cleared.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<module:engine/model/element~Element,Array.<module:engine/model/element~Element>>}\n\t\t */\n\t\tthis._splitParts = new Map();\n\n\t\t/**\n\t\t * Position in the temporary structure where the converted content is inserted. The structure reflect the context of\n\t\t * the target position where the content will be inserted. This property is build based on the context parameter of the\n\t\t * convert method.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/position~Position|null}\n\t\t */\n\t\tthis._modelCursor = null;\n\n\t\t/**\n\t\t * Interface passed by dispatcher to the events callbacks.\n\t\t *\n\t\t * @member {module:engine/conversion/upcastdispatcher~UpcastConversionApi}\n\t\t */\n\t\tthis.conversionApi = Object.assign( {}, conversionApi );\n\n\t\t// `convertItem`, `convertChildren` and `splitToAllowedParent` are bound to this `UpcastDispatcher`\n\t\t// instance and set on `conversionApi`. This way only a part of `UpcastDispatcher` API is exposed.\n\t\tthis.conversionApi.convertItem = this._convertItem.bind( this );\n\t\tthis.conversionApi.convertChildren = this._convertChildren.bind( this );\n\t\tthis.conversionApi.splitToAllowedParent = this._splitToAllowedParent.bind( this );\n\t\tthis.conversionApi.getSplitParts = this._getSplitParts.bind( this );\n\t}\n\n\t/**\n\t * Starts the conversion process. The entry point for the conversion.\n\t *\n\t * @fires element\n\t * @fires text\n\t * @fires documentFragment\n\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element} viewItem\n\t * Part of the view to be converted.\n\t * @param {module:engine/model/writer~Writer} writer Instance of model writer.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context=['$root']] Elements will be converted according to this context.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Model data that is a result of the conversion process\n\t * wrapped in `DocumentFragment`. Converted marker elements will be set as that document fragment's\n\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n\t */\n\tconvert( viewItem, writer, context = [ '$root' ] ) {\n\t\tthis.fire( 'viewCleanup', viewItem );\n\n\t\t// Create context tree and set position in the top element.\n\t\t// Items will be converted according to this position.\n\t\tthis._modelCursor = createContextTree( context, writer );\n\n\t\t// Store writer in conversion as a conversion API\n\t\t// to be sure that conversion process will use the same batch.\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create consumable values list for conversion process.\n\t\tthis.conversionApi.consumable = ViewConsumable.createFrom( viewItem );\n\n\t\t// Custom data stored by converter for conversion process.\n\t\tthis.conversionApi.store = {};\n\n\t\t// Do the conversion.\n\t\tconst { modelRange } = this._convertItem( viewItem, this._modelCursor );\n\n\t\t// Conversion result is always a document fragment so let's create it.\n\t\tconst documentFragment = writer.createDocumentFragment();\n\n\t\t// When there is a conversion result.\n\t\tif ( modelRange ) {\n\t\t\t// Remove all empty elements that were create while splitting.\n\t\t\tthis._removeEmptyElements();\n\n\t\t\t// Move all items that were converted in context tree to the document fragment.\n\t\t\tfor ( const item of Array.from( this._modelCursor.parent.getChildren() ) ) {\n\t\t\t\twriter.append( item, documentFragment );\n\t\t\t}\n\n\t\t\t// Extract temporary markers elements from model and set as static markers collection.\n\t\t\tdocumentFragment.markers = extractMarkersFromModelFragment( documentFragment, writer );\n\t\t}\n\n\t\t// Clear context position.\n\t\tthis._modelCursor = null;\n\n\t\t// Clear split elements lists.\n\t\tthis._splitParts.clear();\n\n\t\t// Clear conversion API.\n\t\tthis.conversionApi.writer = null;\n\t\tthis.conversionApi.store = null;\n\n\t\t// Return fragment as conversion result.\n\t\treturn documentFragment;\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertItem\n\t */\n\t_convertItem( viewItem, modelCursor ) {\n\t\tconst data = Object.assign( { viewItem, modelCursor, modelRange: null } );\n\n\t\tif ( viewItem.is( 'element' ) ) {\n\t\t\tthis.fire( 'element:' + viewItem.name, data, this.conversionApi );\n\t\t} else if ( viewItem.is( 'text' ) ) {\n\t\t\tthis.fire( 'text', data, this.conversionApi );\n\t\t} else {\n\t\t\tthis.fire( 'documentFragment', data, this.conversionApi );\n\t\t}\n\n\t\t// Handle incorrect conversion result.\n\t\tif ( data.modelRange && !( data.modelRange instanceof ModelRange ) ) {\n\t\t\t/**\n\t\t\t * Incorrect conversion result was dropped.\n\t\t\t *\n\t\t\t * {@link module:engine/model/range~Range Model range} should be a conversion result.\n\t\t\t *\n\t\t\t * @error view-conversion-dispatcher-incorrect-result\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-conversion-dispatcher-incorrect-result: Incorrect conversion result was dropped.', this );\n\t\t}\n\n\t\treturn { modelRange: data.modelRange, modelCursor: data.modelCursor };\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertChildren\n\t */\n\t_convertChildren( viewItem, modelCursor ) {\n\t\tconst modelRange = new ModelRange( modelCursor );\n\t\tlet nextModelCursor = modelCursor;\n\n\t\tfor ( const viewChild of Array.from( viewItem.getChildren() ) ) {\n\t\t\tconst result = this._convertItem( viewChild, nextModelCursor );\n\n\t\t\tif ( result.modelRange instanceof ModelRange ) {\n\t\t\t\tmodelRange.end = result.modelRange.end;\n\t\t\t\tnextModelCursor = result.modelCursor;\n\t\t\t}\n\t\t}\n\n\t\treturn { modelRange, modelCursor: nextModelCursor };\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#splitToAllowedParent\n\t */\n\t_splitToAllowedParent( node, modelCursor ) {\n\t\t// Try to find allowed parent.\n\t\tconst allowedParent = this.conversionApi.schema.findAllowedParent( modelCursor, node );\n\n\t\t// When there is no parent that allows to insert node then return `null`.\n\t\tif ( !allowedParent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// When current position parent allows to insert node then return this position.\n\t\tif ( allowedParent === modelCursor.parent ) {\n\t\t\treturn { position: modelCursor };\n\t\t}\n\n\t\t// When allowed parent is in context tree.\n\t\tif ( this._modelCursor.parent.getAncestors().includes( allowedParent ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Split element to allowed parent.\n\t\tconst splitResult = this.conversionApi.writer.split( modelCursor, allowedParent );\n\n\t\t// Using the range returned by `model.Writer#split`, we will pair original elements with their split parts.\n\t\t//\n\t\t// The range returned from the writer spans \"over the split\" or, precisely saying, from the end of the original element (the one\n\t\t// that got split) to the beginning of the other part of that element:\n\t\t//\n\t\t// <limit><a><b><c>X[]Y</c></b><a></limit> ->\n\t\t// <limit><a><b><c>X[</c></b></a><a><b><c>]Y</c></b></a>\n\t\t//\n\t\t// After the split there cannot be any full node between the positions in `splitRange`. The positions are touching.\n\t\t// Also, because of how splitting works, it is easy to notice, that \"closing tags\" are in the reverse order than \"opening tags\".\n\t\t// Also, since we split all those elements, each of them has to have the other part.\n\t\t//\n\t\t// With those observations in mind, we will pair the original elements with their split parts by saving \"closing tags\" and matching\n\t\t// them with \"opening tags\" in the reverse order. For that we can use a stack.\n\t\tconst stack = [];\n\n\t\tfor ( const treeWalkerValue of splitResult.range.getWalker() ) {\n\t\t\tif ( treeWalkerValue.type == 'elementEnd' ) {\n\t\t\t\tstack.push( treeWalkerValue.item );\n\t\t\t} else {\n\t\t\t\t// There should not be any text nodes after the element is split, so the only other value is `elementStart`.\n\t\t\t\tconst originalPart = stack.pop();\n\t\t\t\tconst splitPart = treeWalkerValue.item;\n\n\t\t\t\tthis._registerSplitPair( originalPart, splitPart );\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tposition: splitResult.position,\n\t\t\tcursorParent: splitResult.range.end.parent\n\t\t};\n\t}\n\n\t/**\n\t * Registers that `splitPart` element is a split part of the `originalPart` element.\n\t *\n\t * Data set by this method is used by {@link #_getSplitParts} and {@link #_removeEmptyElements}.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} originalPart\n\t * @param {module:engine/model/element~Element} splitPart\n\t */\n\t_registerSplitPair( originalPart, splitPart ) {\n\t\tif ( !this._splitParts.has( originalPart ) ) {\n\t\t\tthis._splitParts.set( originalPart, [ originalPart ] );\n\t\t}\n\n\t\tconst list = this._splitParts.get( originalPart );\n\n\t\tthis._splitParts.set( splitPart, list );\n\t\tlist.push( splitPart );\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#getSplitParts\n\t */\n\t_getSplitParts( element ) {\n\t\tlet parts;\n\n\t\tif ( !this._splitParts.has( element ) ) {\n\t\t\tparts = [ element ];\n\t\t} else {\n\t\t\tparts = this._splitParts.get( element );\n\t\t}\n\n\t\treturn parts;\n\t}\n\n\t/**\n\t * Checks if there are any empty elements created while splitting and removes them.\n\t *\n\t * This method works recursively to re-check empty elements again after at least one element was removed in the initial call,\n\t * as some elements might have become empty after other empty elements were removed from them.\n\t *\n\t * @private\n\t */\n\t_removeEmptyElements() {\n\t\tlet anyRemoved = false;\n\n\t\tfor ( const element of this._splitParts.keys() ) {\n\t\t\tif ( element.isEmpty ) {\n\t\t\t\tthis.conversionApi.writer.remove( element );\n\t\t\t\tthis._splitParts.delete( element );\n\n\t\t\t\tanyRemoved = true;\n\t\t\t}\n\t\t}\n\n\t\tif ( anyRemoved ) {\n\t\t\tthis._removeEmptyElements();\n\t\t}\n\t}\n\n\t/**\n\t * Fired before the first conversion event, at the beginning of upcast (view to model conversion) process.\n\t *\n\t * @event viewCleanup\n\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element}\n\t * viewItem Part of the view to be converted.\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/element~Element} is converted.\n\t *\n\t * `element` is a namespace event for a class of events. Names of actually called events follow this pattern:\n\t * `element:<elementName>` where `elementName` is the name of converted element. This way listeners may listen to\n\t * all elements conversion or to conversion of specific elements.\n\t *\n\t * @event element\n\t * @param {Object} data Conversion data. Keep in mind that this object is shared by reference between all\n\t * callbacks that will be called. This means that callbacks can override values if needed, and those values will\n\t * be available in other callbacks.\n\t * @param {module:engine/view/item~Item} data.viewItem Converted item.\n\t * @param {module:engine/model/position~Position} data.modelCursor Position where a converter should start changes.\n\t * Change this value for the next converter to tell where the conversion should continue.\n\t * @param {module:engine/model/range~Range} data.modelRange The current state of conversion result. Every change to\n\t * converted element should be reflected by setting or modifying this property.\n\t * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion utilities to be used by callback.\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/text~Text} is converted.\n\t *\n\t * @event text\n\t * @see #event:element\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/documentfragment~DocumentFragment} is converted.\n\t *\n\t * @event documentFragment\n\t * @see #event:element\n\t */\n}\n\nmix( UpcastDispatcher, EmitterMixin );\n\n// Traverses given model item and searches elements which marks marker range. Found element is removed from\n// DocumentFragment but path of this element is stored in a Map which is then returned.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/node~Node} modelItem Fragment of model.\n// @returns {Map<String, module:engine/model/range~Range>} List of static markers.\nfunction extractMarkersFromModelFragment( modelItem, writer ) {\n\tconst markerElements = new Set();\n\tconst markers = new Map();\n\n\t// Create ModelTreeWalker.\n\tconst range = ModelRange._createIn( modelItem ).getItems();\n\n\t// Walk through DocumentFragment and collect marker elements.\n\tfor ( const item of range ) {\n\t\t// Check if current element is a marker.\n\t\tif ( item.name == '$marker' ) {\n\t\t\tmarkerElements.add( item );\n\t\t}\n\t}\n\n\t// Walk through collected marker elements store its path and remove its from the DocumentFragment.\n\tfor ( const markerElement of markerElements ) {\n\t\tconst markerName = markerElement.getAttribute( 'data-name' );\n\t\tconst currentPosition = writer.createPositionBefore( markerElement );\n\n\t\t// When marker of given name is not stored it means that we have found the beginning of the range.\n\t\tif ( !markers.has( markerName ) ) {\n\t\t\tmarkers.set( markerName, new ModelRange( currentPosition.clone() ) );\n\t\t// Otherwise is means that we have found end of the marker range.\n\t\t} else {\n\t\t\tmarkers.get( markerName ).end = currentPosition.clone();\n\t\t}\n\n\t\t// Remove marker element from DocumentFragment.\n\t\twriter.remove( markerElement );\n\t}\n\n\treturn markers;\n}\n\n// Creates model fragment according to given context and returns position in the bottom (the deepest) element.\nfunction createContextTree( contextDefinition, writer ) {\n\tlet position;\n\n\tfor ( const item of new SchemaContext( contextDefinition ) ) {\n\t\tconst attributes = {};\n\n\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\tattributes[ key ] = item.getAttribute( key );\n\t\t}\n\n\t\tconst current = writer.createElement( item.name, attributes );\n\n\t\tif ( position ) {\n\t\t\twriter.append( current, position );\n\t\t}\n\n\t\tposition = ModelPosition._createAt( current, 0 );\n\t}\n\n\treturn position;\n}\n\n/**\n * Conversion interface that is registered for given {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n * and is passed as one of parameters when {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher dispatcher}\n * fires it's events.\n *\n * @interface module:engine/conversion/upcastdispatcher~UpcastConversionApi\n */\n\n/**\n * Starts conversion of given item by firing an appropriate event.\n *\n * Every fired event is passed (as first parameter) an object with `modelRange` property. Every event may set and/or\n * modify that property. When all callbacks are done, the final value of `modelRange` property is returned by this method.\n * The `modelRange` must be {@link module:engine/model/range~Range model range} or `null` (as set by default).\n *\n * @method #convertItem\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Item to convert.\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\n * @returns {Object} result Conversion result.\n * @returns {module:engine/model/range~Range|null} result.modelRange Model range containing result of item conversion,\n * created and modified by callbacks attached to fired event, or `null` if the conversion result was incorrect.\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\n */\n\n/**\n * Starts conversion of all children of given item by firing appropriate events for all those children.\n *\n * @method #convertChildren\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Element which children should be converted.\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\n * @returns {Object} result Conversion result.\n * @returns {module:engine/model/range~Range} result.modelRange Model range containing results of conversion of all children of given item.\n * When no children was converted then range is collapsed.\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\n */\n\n/**\n * Checks {@link module:engine/model/schema~Schema schema} to find allowed parent for element that we are going to insert\n * starting from given position. If current parent does not allow to insert element but one of the ancestors does then\n * split nodes to allowed parent.\n *\n * If schema allows to insert node in given position, nothing is split and object with that position is returned.\n *\n * If it was not possible to find allowed parent, `null` is returned, nothing is split.\n *\n * Otherwise, ancestors are split and object with position and the copy of the split element is returned.\n *\n * For instance, if `<image>` is not allowed in `<paragraph>` but is allowed in `$root`:\n *\n *\t\t<paragraph>foo[]bar</paragraph>\n *\n *  \t-> split for `<image>` ->\n *\n *  \t<paragraph>foo</paragraph>[]<paragraph>bar</paragraph>\n *\n * In the sample above position between `<paragraph>` elements will be returned as `position` and the second `paragraph`\n * as `cursorParent`.\n *\n * @method #splitToAllowedParent\n * @param {module:engine/model/position~Position} position Position on which element is going to be inserted.\n * @param {module:engine/model/node~Node} node Node to insert.\n * @returns {Object|null} Split result. If it was not possible to find allowed position `null` is returned.\n * @returns {module:engine/model/position~Position} position between split elements.\n * @returns {module:engine/model/element~Element} [cursorParent] Element inside which cursor should be placed to\n * continue conversion. When element is not defined it means that there was no split.\n */\n\n/**\n * Returns all the split parts of given `element` that were created during upcasting through using {@link #splitToAllowedParent}.\n * It enables you to easily track those elements and continue processing them after they are split during their children conversion.\n *\n *\t\t<paragraph>Foo<image />bar<image />baz</paragraph> ->\n *\t\t<paragraph>Foo</paragraph><image /><paragraph>bar</paragraph><image /><paragraph>baz</paragraph>\n *\n * For a reference to any of above paragraphs, the function will return all three paragraphs (the original element included),\n * sorted in the order of their creation (the original element is the first one).\n *\n * If given `element` was not split, an array with single element is returned.\n *\n * Example of a usage in a converter code:\n *\n *\t\tconst myElement = conversionApi.writer.createElement( 'myElement' );\n *\n *\t\t// Children conversion may split `myElement`.\n *\t\tconversionApi.convertChildren( myElement, modelCursor );\n *\n *\t\tconst splitParts = conversionApi.getSplitParts( myElement );\n *\t\tconst lastSplitPart = splitParts[ splitParts.length - 1 ];\n *\n *\t\t// Setting `data.modelRange` basing on split parts:\n *\t\tdata.modelRange = conversionApi.writer.createRange(\n *\t\t\tconversionApi.writer.createPositionBefore( myElement ),\n *\t\t\tconversionApi.writer.createPositionAfter( lastSplitPart )\n *\t\t);\n *\n *\t\t// Setting `data.modelCursor` to continue after the last split element:\n *\t\tdata.modelCursor = conversionApi.writer.createPositionAfter( lastSplitPart );\n *\n * **Tip:** if you are unable to get a reference to the original element (for example because the code is split into multiple converters\n * or even classes) but it was already converted, you might want to check first element in `data.modelRange`. This is a common situation\n * if an attribute converter is separated from an element converter.\n *\n * @method #getSplitParts\n * @param {module:engine/model/element~Element} element\n * @returns {Array.<module:engine/model/element~Element>}\n */\n\n/**\n * Stores information about what parts of processed view item are still waiting to be handled. After a piece of view item\n * was converted, appropriate consumable value should be {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consumed}.\n *\n * @member {module:engine/conversion/viewconsumable~ViewConsumable} #consumable\n */\n\n/**\n * Custom data stored by converters for conversion process. Custom properties of this object can be defined and use to\n * pass parameters between converters.\n *\n * The difference between this property and `data` parameter of\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element} is that `data` parameters allows you\n * to pass parameters within a single event and `store` within the whole conversion.\n *\n * @member {Object} #store\n */\n\n/**\n * The model's schema instance.\n *\n * @member {module:engine/model/schema~Schema} #schema\n */\n\n/**\n * The {@link module:engine/model/writer~Writer} instance used to manipulate data during conversion.\n *\n * @member {module:engine/model/writer~Writer} #writer\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/controller/datacontroller\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nimport Mapper from '../conversion/mapper';\n\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { insertText } from '../conversion/downcasthelpers';\n\nimport UpcastDispatcher from '../conversion/upcastdispatcher';\nimport { convertText, convertToModelFragment } from '../conversion/upcasthelpers';\n\nimport ViewDocumentFragment from '../view/documentfragment';\nimport ViewDocument from '../view/document';\nimport ViewDowncastWriter from '../view/downcastwriter';\n\nimport ModelRange from '../model/range';\n\n/**\n * Controller for the data pipeline. The data pipeline controls how data is retrieved from the document\n * and set inside it. Hence, the controller features two methods which allow to {@link ~DataController#get get}\n * and {@link ~DataController#set set} data of the {@link ~DataController#model model}\n * using given:\n *\n * * {@link module:engine/dataprocessor/dataprocessor~DataProcessor data processor},\n * * downcast converters,\n * * upcast converters.\n *\n * An instance of the data controller is always available in the {@link module:core/editor/editor~Editor#data `editor.data`}\n * property:\n *\n *\t\teditor.data.get( { rootName: 'customRoot' } ); // -> '<p>Hello!</p>'\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class DataController {\n\t/**\n\t * Creates a data controller instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Data model.\n\t * @param {module:engine/dataprocessor/dataprocessor~DataProcessor} [dataProcessor] Data processor that should be used\n\t * by the controller.\n\t */\n\tconstructor( model, dataProcessor ) {\n\t\t/**\n\t\t * Data model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Data processor used during the conversion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/dataprocessor/dataprocessor~DataProcessor}\n\t\t */\n\t\tthis.processor = dataProcessor;\n\n\t\t/**\n\t\t * Mapper used for the conversion. It has no permanent bindings, because they are created when getting data and\n\t\t * cleared directly after the data are converted. However, the mapper is defined as a class property, because\n\t\t * it needs to be passed to the `DowncastDispatcher` as a conversion API.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/mapper~Mapper}\n\t\t */\n\t\tthis.mapper = new Mapper();\n\n\t\t/**\n\t\t * Downcast dispatcher used by the {@link #get get method}. Downcast converters should be attached to it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n\t\t */\n\t\tthis.downcastDispatcher = new DowncastDispatcher( {\n\t\t\tmapper: this.mapper\n\t\t} );\n\t\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\n\n\t\t/**\n\t\t * Upcast dispatcher used by the {@link #set set method}. Upcast converters should be attached to it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n\t\t */\n\t\tthis.upcastDispatcher = new UpcastDispatcher( {\n\t\t\tschema: model.schema\n\t\t} );\n\n\t\t// Define default converters for text and elements.\n\t\t//\n\t\t// Note that if there is no default converter for the element it will be skipped, for instance `<b>foo</b>` will be\n\t\t// converted to nothing. We add `convertToModelFragment` as a last converter so it converts children of that\n\t\t// element to the document fragment so `<b>foo</b>` will be converted to `foo` if there is no converter for `<b>`.\n\t\tthis.upcastDispatcher.on( 'text', convertText(), { priority: 'lowest' } );\n\t\tthis.upcastDispatcher.on( 'element', convertToModelFragment(), { priority: 'lowest' } );\n\t\tthis.upcastDispatcher.on( 'documentFragment', convertToModelFragment(), { priority: 'lowest' } );\n\n\t\tthis.decorate( 'init' );\n\n\t\t// Fire `ready` event when initialisation has completed. Such low level listener gives possibility\n\t\t// to plug into initialisation pipeline without interrupting the initialisation flow.\n\t\tthis.on( 'init', () => {\n\t\t\tthis.fire( 'ready' );\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Returns the model's data converted by downcast dispatchers attached to {@link #downcastDispatcher} and\n\t * formatted by the {@link #processor data processor}.\n\t *\n\t * @param {Object} [options]\n\t * @param {String} [options.rootName='main'] Root name.\n\t * @param {String} [options.trim='empty'] Whether returned data should be trimmed. This option is set to `empty` by default,\n\t * which means whenever editor content is considered empty, an empty string will be returned. To turn off trimming completely\n\t * use `'none'`. In such cases exact content will be returned (for example `<p>&nbsp;</p>` for an empty editor).\n\t * @returns {String} Output data.\n\t */\n\tget( options ) {\n\t\tconst { rootName = 'main', trim = 'empty' } = options || {};\n\n\t\tif ( !this._checkIfRootsExists( [ rootName ] ) ) {\n\t\t\t/**\n\t\t\t * Cannot get data from a non-existing root. This error is thrown when {@link #get DataController#get() method}\n\t\t\t * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n\t\t\t * calling {@link #get} like:\n\t\t\t *\n\t\t\t *\t\tdata.get( { rootName: 'root2' } );\n\t\t\t *\n\t\t\t * will throw this error.\n\t\t\t *\n\t\t\t * @error datacontroller-get-non-existent-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-get-non-existent-root: Attempting to get data from a non-existing root.', this );\n\t\t}\n\n\t\tconst root = this.model.document.getRoot( rootName );\n\n\t\tif ( trim === 'empty' && !this.model.hasContent( root, { ignoreWhitespaces: true } ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn this.stringify( root );\n\t}\n\n\t/**\n\t * Returns the content of the given {@link module:engine/model/element~Element model's element} or\n\t * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast converters\n\t * attached to {@link #downcastDispatcher} and formatted by the {@link #processor data processor}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\n\t * Element whose content will be stringified.\n\t * @returns {String} Output data.\n\t */\n\tstringify( modelElementOrFragment ) {\n\t\t// Model -> view.\n\t\tconst viewDocumentFragment = this.toView( modelElementOrFragment );\n\n\t\t// View -> data.\n\t\treturn this.processor.toData( viewDocumentFragment );\n\t}\n\n\t/**\n\t * Returns the content of the given {@link module:engine/model/element~Element model element} or\n\t * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast\n\t * converters attached to {@link #downcastDispatcher} to a\n\t * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\n\t * Element or document fragment whose content will be converted.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} Output view DocumentFragment.\n\t */\n\ttoView( modelElementOrFragment ) {\n\t\t// Clear bindings so the call to this method gives correct results.\n\t\tthis.mapper.clearBindings();\n\n\t\t// First, convert elements.\n\t\tconst modelRange = ModelRange._createIn( modelElementOrFragment );\n\n\t\tconst viewDocumentFragment = new ViewDocumentFragment();\n\n\t\t// Create separate ViewDowncastWriter just for data conversion purposes.\n\t\t// We have no view controller and rendering do DOM in DataController so view.change() block is not used here.\n\t\tconst viewWriter = new ViewDowncastWriter( new ViewDocument() );\n\t\tthis.mapper.bindElements( modelElementOrFragment, viewDocumentFragment );\n\n\t\tthis.downcastDispatcher.convertInsert( modelRange, viewWriter );\n\n\t\tif ( !modelElementOrFragment.is( 'documentFragment' ) ) {\n\t\t\t// Then, if a document element is converted, convert markers.\n\t\t\t// From all document markers, get those, which \"intersect\" with the converter element.\n\t\t\tconst markers = _getMarkersRelativeToElement( modelElementOrFragment );\n\n\t\t\tfor ( const [ name, range ] of markers ) {\n\t\t\t\tthis.downcastDispatcher.convertMarkerAdd( name, range, viewWriter );\n\t\t\t}\n\t\t}\n\n\t\treturn viewDocumentFragment;\n\t}\n\n\t/**\n\t * Sets initial input data parsed by the {@link #processor data processor} and\n\t * converted by the {@link #upcastDispatcher view-to-model converters}.\n\t * Initial data can be set only to document that {@link module:engine/model/document~Document#version} is equal 0.\n\t *\n\t * **Note** This method is {@link module:utils/observablemixin~ObservableMixin#decorate decorated} which is\n\t * used by e.g. collaborative editing plugin that syncs remote data on init.\n\t *\n\t * When data is passed as a string it is initialized on a default `main` root:\n\t *\n\t *\t\tdataController.init( '<p>Foo</p>' ); // Initializes data on the `main` root.\n\t *\n\t * To initialize data on a different root or multiple roots at once, object containing `rootName` - `data` pairs should be passed:\n\t *\n\t *\t\tdataController.init( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Initializes data on the `main` and `title` roots.\n\t *\n\t * @fires init\n\t * @param {String|Object.<String,String>} data Input data as a string or an object containing `rootName` - `data`\n\t * pairs to initialize data on multiple roots at once.\n\t * @returns {Promise} Promise that is resolved after the data is set on the editor.\n\t */\n\tinit( data ) {\n\t\tif ( this.model.document.version ) {\n\t\t\t/**\n\t\t\t * Cannot set initial data to not empty {@link module:engine/model/document~Document}.\n\t\t\t * Initial data should be set once, during {@link module:core/editor/editor~Editor} initialization,\n\t\t\t * when the {@link module:engine/model/document~Document#version} is equal 0.\n\t\t\t *\n\t\t\t * @error datacontroller-init-document-not-empty\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-init-document-not-empty: Trying to set initial data to not empty document.', this );\n\t\t}\n\n\t\tlet initialData = {};\n\t\tif ( typeof data === 'string' ) {\n\t\t\tinitialData.main = data; // Default root is 'main'. To initiate data on a different root, object should be passed.\n\t\t} else {\n\t\t\tinitialData = data;\n\t\t}\n\n\t\tif ( !this._checkIfRootsExists( Object.keys( initialData ) ) ) {\n\t\t\t/**\n\t\t\t * Cannot init data on a non-existing root. This error is thrown when {@link #init DataController#init() method}\n\t\t\t * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n\t\t\t * calling {@link #init} like:\n\t\t\t *\n\t\t\t * \t\tdata.init( { main: '<p>Foo</p>', root2: '<p>Bar</p>' } );\n\t\t\t *\n\t\t\t * will throw this error.\n\t\t\t *\n\t\t\t * @error datacontroller-init-non-existent-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-init-non-existent-root: Attempting to init data on a non-existing root.', this );\n\t\t}\n\n\t\tthis.model.enqueueChange( 'transparent', writer => {\n\t\t\tfor ( const rootName of Object.keys( initialData ) ) {\n\t\t\t\tconst modelRoot = this.model.document.getRoot( rootName );\n\t\t\t\twriter.insert( this.parse( initialData[ rootName ], modelRoot ), modelRoot, 0 );\n\t\t\t}\n\t\t} );\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Sets input data parsed by the {@link #processor data processor} and\n\t * converted by the {@link #upcastDispatcher view-to-model converters}.\n\t * This method can be used any time to replace existing editor data by the new one without clearing the\n\t * {@link module:engine/model/document~Document#history document history}.\n\t *\n\t * This method also creates a batch with all the changes applied. If all you need is to parse data, use\n\t * the {@link #parse} method.\n\t *\n\t * When data is passed as a string it is set on a default `main` root:\n\t *\n\t *\t\tdataController.set( '<p>Foo</p>' ); // Sets data on the `main` root.\n\t *\n\t * To set data on a different root or multiple roots at once, object containing `rootName` - `data` pairs should be passed:\n\t *\n\t *\t\tdataController.set( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Sets data on the `main` and `title` roots.\n\t *\n\t * @param {String|Object.<String,String>} data Input data as a string or an object containing `rootName` - `data`\n\t * pairs to set data on multiple roots at once.\n\t */\n\tset( data ) {\n\t\tlet newData = {};\n\n\t\tif ( typeof data === 'string' ) {\n\t\t\tnewData.main = data; // Default root is 'main'. To set data on a different root, object should be passed.\n\t\t} else {\n\t\t\tnewData = data;\n\t\t}\n\n\t\tif ( !this._checkIfRootsExists( Object.keys( newData ) ) ) {\n\t\t\t/**\n\t\t\t * Cannot set data on a non-existing root. This error is thrown when {@link #set DataController#set() method}\n\t\t\t * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n\t\t\t * calling {@link #set} like:\n\t\t\t *\n\t\t\t * \t\tdata.set( { main: '<p>Foo</p>', root2: '<p>Bar</p>' } );\n\t\t\t *\n\t\t\t * will throw this error.\n\t\t\t *\n\t\t\t * @error datacontroller-set-non-existent-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-set-non-existent-root: Attempting to set data on a non-existing root.', this );\n\t\t}\n\n\t\tthis.model.enqueueChange( 'transparent', writer => {\n\t\t\twriter.setSelection( null );\n\t\t\twriter.removeSelectionAttribute( this.model.document.selection.getAttributeKeys() );\n\n\t\t\tfor ( const rootName of Object.keys( newData ) ) {\n\t\t\t\t// Save to model.\n\t\t\t\tconst modelRoot = this.model.document.getRoot( rootName );\n\n\t\t\t\twriter.remove( writer.createRangeIn( modelRoot ) );\n\t\t\t\twriter.insert( this.parse( newData[ rootName ], modelRoot ), modelRoot, 0 );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the data parsed by the {@link #processor data processor} and then converted by upcast converters\n\t * attached to the {@link #upcastDispatcher}.\n\t *\n\t * @see #set\n\t * @param {String} data Data to parse.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\n\t * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Parsed data.\n\t */\n\tparse( data, context = '$root' ) {\n\t\t// data -> view\n\t\tconst viewDocumentFragment = this.processor.toView( data );\n\n\t\t// view -> model\n\t\treturn this.toModel( viewDocumentFragment, context );\n\t}\n\n\t/**\n\t * Returns the result of the given {@link module:engine/view/element~Element view element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment view document fragment} converted by the\n\t * {@link #upcastDispatcher view-to-model converters}, wrapped by {@link module:engine/model/documentfragment~DocumentFragment}.\n\t *\n\t * When marker elements were converted during the conversion process, it will be set as a document fragment's\n\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElementOrFragment\n\t * Element or document fragment whose content will be converted.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\n\t * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Output document fragment.\n\t */\n\ttoModel( viewElementOrFragment, context = '$root' ) {\n\t\treturn this.model.change( writer => {\n\t\t\treturn this.upcastDispatcher.convert( viewElementOrFragment, writer, context );\n\t\t} );\n\t}\n\n\t/**\n\t * Removes all event listeners set by the DataController.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Checks if all provided root names are existing editor roots.\n\t *\n\t * @private\n\t * @param {Array.<String>} rootNames Root names to check.\n\t * @returns {Boolean} Whether all provided root names are existing editor roots.\n\t */\n\t_checkIfRootsExists( rootNames ) {\n\t\tfor ( const rootName of rootNames ) {\n\t\t\tif ( !this.model.document.getRootNames().includes( rootName ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Event fired once data initialisation has finished.\n\t *\n\t * @event ready\n\t */\n\n\t/**\n\t * Event fired after {@link #init init() method} has been run. It can be {@link #listenTo listened to} to adjust/modify\n\t * the initialisation flow. However, if the `init` event is stopped or prevented, the {@link #event:ready ready event}\n\t * should be fired manually.\n\t *\n\t * The `init` event is fired by decorated {@link #init} method.\n\t * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n\t *\n\t * @event init\n\t */\n}\n\nmix( DataController, ObservableMixin );\n\n// Helper function for downcast conversion.\n//\n// Takes a document element (element that is added to a model document) and checks which markers are inside it\n// and which markers are containing it. If the marker is intersecting with element, the intersection is returned.\nfunction _getMarkersRelativeToElement( element ) {\n\tconst result = [];\n\tconst doc = element.root.document;\n\n\tif ( !doc ) {\n\t\treturn [];\n\t}\n\n\tconst elementRange = ModelRange._createIn( element );\n\n\tfor ( const marker of doc.model.markers ) {\n\t\tconst intersection = elementRange.getIntersection( marker.getRange() );\n\n\t\tif ( intersection ) {\n\t\t\tresult.push( [ marker.name, intersection ] );\n\t\t}\n\t}\n\n\treturn result;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/conversion\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport UpcastHelpers from './upcasthelpers';\nimport DowncastHelpers from './downcasthelpers';\n\n/**\n * A utility class that helps add converters to upcast and downcast dispatchers.\n *\n * We recommend reading the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide first to\n * understand the core concepts of the conversion mechanisms.\n *\n * An instance of the conversion manager is available in the\n * {@link module:core/editor/editor~Editor#conversion `editor.conversion`} property\n * and by default has the following groups of dispatchers (i.e. directions of conversion):\n *\n * * `downcast` (editing and data downcasts)\n * * `editingDowncast`\n * * `dataDowncast`\n * * `upcast`\n *\n * # One-way converters\n *\n * To add a converter to a specific group, use the {@link module:engine/conversion/conversion~Conversion#for `for()`}\n * method:\n *\n *\t\t// Add a converter to editing downcast and data downcast.\n *\t\teditor.conversion.for( 'downcast' ).elementToElement( config ) );\n *\n *\t\t// Add a converter to the data pipepline only:\n *\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( dataConversionConfig ) );\n *\n *\t\t// And a slightly different one for the editing pipeline:\n *\t\teditor.conversion.for( 'editingDowncast' ).elementToElement( editingConversionConfig ) );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for `for()`} method documentation to learn more about\n * available conversion helpers and how to use your custom ones.\n *\n * # Two-way converters\n *\n * Besides using one-way converters via the `for()` method, you can also use other methods available in this\n * class to add two-way converters (upcast and downcast):\n *\n * * {@link module:engine/conversion/conversion~Conversion#elementToElement `elementToElement()`} &ndash;\n * Model element to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement()`} &ndash;\n * Model attribute to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `attributeToAttribute()`} &ndash;\n * Model attribute to view element and vice versa.\n */\nexport default class Conversion {\n\t/**\n\t * Creates a new conversion instance.\n\t *\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher>} downcastDispatchers\n\t * @param {module:engine/conversion/upcastdispatcher~UpcastDispatcher|\n\t * Array.<module:engine/conversion/upcastdispatcher~UpcastDispatcher>} upcastDispatchers\n\t */\n\tconstructor( downcastDispatchers, upcastDispatchers ) {\n\t\t/**\n\t\t * Maps dispatchers group name to ConversionHelpers instances.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<String,module:engine/conversion/conversionhelpers~ConversionHelpers>}\n\t\t */\n\t\tthis._helpers = new Map();\n\n\t\t// Define default 'downcast' & 'upcast' dispatchers groups. Those groups are always available as two-way converters needs them.\n\t\tthis._downcast = Array.isArray( downcastDispatchers ) ? downcastDispatchers : [ downcastDispatchers ];\n\t\tthis._createConversionHelpers( { name: 'downcast', dispatchers: this._downcast, isDowncast: true } );\n\n\t\tthis._upcast = Array.isArray( upcastDispatchers ) ? upcastDispatchers : [ upcastDispatchers ];\n\t\tthis._createConversionHelpers( { name: 'upcast', dispatchers: this._upcast, isDowncast: false } );\n\t}\n\n\t/**\n\t * Define an alias for registered dispatcher.\n\t *\n\t *\t\tconst conversion = new Conversion(\n\t *\t\t\t[ dataDowncastDispatcher, editingDowncastDispatcher ],\n\t *\t\t\tupcastDispatcher\n\t *\t\t);\n\t *\n\t *\t\tconversion.addAlias( 'dataDowncast', dataDowncastDispatcher );\n\t *\n\t * @param {String} alias An alias of a dispatcher.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher} dispatcher Dispatcher which should have an alias.\n\t */\n\taddAlias( alias, dispatcher ) {\n\t\tconst isDowncast = this._downcast.includes( dispatcher );\n\t\tconst isUpcast = this._upcast.includes( dispatcher );\n\n\t\tif ( !isUpcast && !isDowncast ) {\n\t\t\t/**\n\t\t\t * Trying to register and alias for a dispatcher that nas not been registered.\n\t\t\t *\n\t\t\t * @error conversion-add-alias-dispatcher-not-registered\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'conversion-add-alias-dispatcher-not-registered: ' +\n\t\t\t\t'Trying to register and alias for a dispatcher that nas not been registered.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tthis._createConversionHelpers( { name: alias, dispatchers: [ dispatcher ], isDowncast } );\n\t}\n\n\t/**\n\t * Provides a chainable API to assign converters to conversion dispatchers group.\n\t *\n\t * If the given group name has not been registered, the\n\t * {@link module:utils/ckeditorerror~CKEditorError `conversion-for-unknown-group` error} is thrown.\n\t *\n\t * You can use conversion helpers available directly in the `for()` chain or your custom ones via\n\t * the {@link module:engine/conversion/conversionhelpers~ConversionHelpers#add `add()`} method.\n\t *\n\t * # Using bulit-in conversion helpers\n\t *\n\t * The `for()` chain comes with a set of conversion helpers which you can use like this:\n\t *\n\t *\t\teditor.conversion.for( 'downcast' )\n\t *\t\t\t.elementToElement( config1 )        // Adds an element-to-element downcast converter.\n\t *\t\t\t.attributeToElement( config2 );     // Adds an attribute-to-element downcast converter.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' )\n\t *\t\t\t.elementToAttribute( config3 );     // Adds an element-to-attribute upcast converter.\n\t *\n\t * Refer to the documentation of built-in conversion helpers to learn about their configuration options.\n\t *\n\t * * downcast (model-to-view) conversion helpers:\n\t *\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`},\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement `attributeToElement()`},\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToAttribute `attributeToAttribute()`}.\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToElement `markerToElement()`}.\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToHighlight `markerToHighlight()`}.\n\t *\n\t * * upcast (view-to-model) conversion helpers:\n\t *\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToElement `elementToElement()`},\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute `elementToAttribute()`},\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute `attributeToAttribute()`}.\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToMarker `elementToMarker()`}.\n\t *\n\t * # Using custom conversion helpers\n\t *\n\t * If you need to implement a nontypical converter, you can do so by calling:\n\t *\n\t *\t\teditor.conversion.for( direction ).add( customHelper );\n\t *\n\t * The `.add()` method takes exactly one parameter, which is a function. This function should accept one parameter that\n\t * is a dispatcher instance. The function should add an actual converter to the passed dispatcher instance.\n\t *\n\t * Example:\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).add( dispatcher => {\n\t *\t\t\tdispatcher.on( 'element:a',  ( evt, data, conversionApi ) => {\n\t *\t\t\t\t// Do something with a view <a> element.\n\t *\t\t\t} );\n\t *\t\t} );\n\t *\n\t * Refer to the documentation of {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n\t * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} to learn how to write\n\t * custom converters.\n\t *\n\t * @param {String} groupName The name of dispatchers group to add the converters to.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers|module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\tfor( groupName ) {\n\t\tif ( !this._helpers.has( groupName ) ) {\n\t\t\t/**\n\t\t\t * Trying to add a converter to an unknown dispatchers group.\n\t\t\t *\n\t\t\t * @error conversion-for-unknown-group\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'conversion-for-unknown-group: Trying to add a converter to an unknown dispatchers group.', this );\n\t\t}\n\n\t\treturn this._helpers.get( groupName );\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model element to a view element (and vice versa).\n\t * For example, the model `<paragraph>Foo</paragraph>` is `<p>Foo</p>` in the view.\n\t *\n\t *\t\t// A simple conversion from the `paragraph` model element to the `<p>` view element (and vice versa).\n\t *\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\t *\n\t *\t\t// Override other converters by specifying a converter definition with a higher priority.\n\t *\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'div', converterPriority: 'high' } );\n\t *\n\t *\t\t// View specified as an object instead of a string.\n\t *\t\teditor.conversion.elementToElement( {\n\t *\t\t\tmodel: 'fancyParagraph',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'fancy'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to a `paragraph` element.\n\t *\t\teditor.conversion.elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'p',\n\t *\t\t\tupcastAlso: [\n\t *\t\t\t\t'div',\n\t *\t\t\t\t{\n\t *\t\t\t\t\t// Any element with the `display: block` style.\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\tdisplay: 'block'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n\t *\t\teditor.conversion.elementToElement( {\n\t *\t\t\tmodel: 'heading',\n\t *\t\t\tview: 'h2',\n\t *\t\t\t// Convert \"headling-like\" paragraphs to headings.\n\t *\t\t\tupcastAlso: viewElement => {\n\t *\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\tif ( size > 26 ) {\n\t *\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * `definition.model` is a `String` with a model element name to convert from or to.\n\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n\t *\n\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n\t */\n\telementToElement( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).elementToElement( definition );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' )\n\t\t\t\t.elementToElement( {\n\t\t\t\t\tmodel,\n\t\t\t\t\tview,\n\t\t\t\t\tconverterPriority: definition.converterPriority\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model attribute to a view element (and vice versa).\n\t * For example, a model text node with `\"Foo\"` as data and the `bold` attribute is `<strong>Foo</strong>` in the view.\n\t *\n\t *\t\t// A simple conversion from the `bold=true` attribute to the `<strong>` view element (and vice versa).\n\t *\t\teditor.conversion.attributeToElement( { model: 'bold', view: 'strong' } );\n\t *\n\t *\t\t// Override other converters by specifying a converter definition with a higher priority.\n\t *\t\teditor.conversion.attributeToElement( { model: 'bold', view: 'b', converterPriority: 'high' } );\n\t *\n\t *\t\t// View specified as an object instead of a string.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: 'bold'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `config.model.name` to define the conversion only from a given node type, `$text` in this case.\n\t *\t\t// The same attribute on different elements may then be handled by a different converter.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'textDecoration',\n\t *\t\t\t\tvalues: [ 'underline', 'lineThrough' ],\n\t *\t\t\t\tname: '$text'\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tunderline: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-decoration': 'underline'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tlineThrough: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-decoration': 'line-through'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `bold` attribute.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'strong',\n\t *\t\t\tupcastAlso: [\n\t *\t\t\t\t'b',\n\t *\t\t\t\t{\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tclasses: 'bold'\n\t *\t\t\t\t},\n\t *\t\t\t\t{\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-weight': 'bold'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tviewElement => {\n\t *\t\t\t\t\tconst fontWeight = viewElement.getStyle( 'font-weight' );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && fontWeight && /\\d+/.test() && Number( fontWeight ) > 500 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn {\n\t *\t\t\t\t\t\t\tname: true,\n\t *\t\t\t\t\t\t\tstyles: [ 'font-weight' ]\n\t *\t\t\t\t\t\t};\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Conversion from and to a model attribute key whose value is an enum (`fontSize=big|small`).\n\t *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalues: [ 'big', 'small' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tbig: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '1.2em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '0.8em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tupcastAlso: {\n\t *\t\t\t\tbig: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && size > 10 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && size < 10 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * The `definition.model` parameter specifies which model attribute should be converted from or to. It can be a `{ key, value }` object\n\t * describing the attribute key and value to convert or a `String` specifying just the attribute key (then `value` is set to `true`).\n\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n\t *\n\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n\t */\n\tattributeToElement( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).attributeToElement( definition );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' )\n\t\t\t\t.elementToAttribute( {\n\t\t\t\t\tview,\n\t\t\t\t\tmodel,\n\t\t\t\t\tconverterPriority: definition.converterPriority\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model attribute to a view attribute (and vice versa).\n\t * For example, `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>` (the same attribute key and value).\n\t * This type of converters is intended to be used with {@link module:engine/model/element~Element model element} nodes.\n\t * To convert text attributes {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement converter`}\n\t * should be set up.\n\t *\n\t *\t\t// A simple conversion from the `source` model attribute to the `src` view attribute (and vice versa).\n\t *\t\teditor.conversion.attributeToAttribute( { model: 'source', view: 'src' } );\n\t *\n\t *\t\t// Attribute values are strictly specified.\n\t *\t\teditor.conversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'aside',\n\t *\t\t\t\tvalues: [ 'aside' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\taside: {\n\t *\t\t\t\t\tname: 'img',\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'aside', 'half-size' ]\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Set the style attribute.\n\t *\t\teditor.conversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'aside',\n\t *\t\t\t\tvalues: [ 'aside' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\taside: {\n\t *\t\t\t\t\tname: 'img',\n\t *\t\t\t\t\tkey: 'style',\n\t *\t\t\t\t\tvalue: {\n\t *\t\t\t\t\t\tfloat: 'right',\n\t *\t\t\t\t\t\twidth: '50%',\n\t *\t\t\t\t\t\tmargin: '5px'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Conversion from and to a model attribute key whose value is an enum (`align=right|center`).\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `align=right` attribute.\n\t *\t\teditor.conversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'align',\n\t *\t\t\t\tvalues: [ 'right', 'center' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tright: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: 'align-right'\n\t *\t\t\t\t},\n\t *\t\t\t\tcenter: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: 'align-center'\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tupcastAlso: {\n\t *\t\t\t\tright: {\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-align': 'right'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tcenter: {\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-align': 'center'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * The `definition.model` parameter specifies which model attribute should be converted from and to.\n\t * It can be a `{ key, [ values ], [ name ] }` object or a `String`, which will be treated like `{ key: definition.model }`.\n\t * The `key` property is the model attribute key to convert from and to.\n\t * The `values` are the possible model attribute values. If `values` is not set, the model attribute value will be the same as the\n\t * view attribute value.\n\t * If `name` is set, the conversion will be set up only for model elements with the given name.\n\t *\n\t * The `definition.view` parameter specifies which view attribute should be converted from and to.\n\t * It can be a `{ key, value, [ name ] }` object or a `String`, which will be treated like `{ key: definition.view }`.\n\t * The `key` property is the view attribute key to convert from and to.\n\t * The `value` is the view attribute value to convert from and to. If `definition.value` is not set, the view attribute value will be\n\t * the same as the model attribute value.\n\t * If `key` is `'class'`, `value` can be a `String` or an array of `String`s.\n\t * If `key` is `'style'`, `value` is an object with key-value pairs.\n\t * In other cases, `value` is a `String`.\n\t * If `name` is set, the conversion will be set up only for model elements with the given name.\n\t * If `definition.model.values` is set, `definition.view` is an object that assigns values from `definition.model.values`\n\t * to `{ key, value, [ name ] }` objects.\n\t *\n\t * `definition.upcastAlso` specifies which other matching view elements should also be upcast to the given model configuration.\n\t * If `definition.model.values` is set, `definition.upcastAlso` should be an object assigning values from `definition.model.values`\n\t * to {@link module:engine/view/matcher~MatcherPattern}s or arrays of {@link module:engine/view/matcher~MatcherPattern}s.\n\t *\n\t * **Note:** `definition.model` and `definition.view` form should be mirrored, so the same types of parameters should\n\t * be given in both parameters.\n\t *\n\t * @param {Object} definition The converter definition.\n\t * @param {String|Object} definition.model The model attribute to convert from and to.\n\t * @param {String|Object} definition.view The view attribute to convert from and to.\n\t * @param {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [definition.upcastAlso]\n\t * Any view element matching `definition.upcastAlso` will also be converted to the given model attribute. `definition.upcastAlso`\n\t * is used only if `config.model.values` is specified.\n\t */\n\tattributeToAttribute( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).attributeToAttribute( definition );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' )\n\t\t\t\t.attributeToAttribute( {\n\t\t\t\t\tview,\n\t\t\t\t\tmodel\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Creates and caches conversion helpers for given dispatchers group.\n\t *\n\t * @private\n\t * @param {Object} options\n\t * @param {String} options.name Group name.\n\t * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} options.dispatchers\n\t * @param {Boolean} options.isDowncast\n\t */\n\t_createConversionHelpers( { name, dispatchers, isDowncast } ) {\n\t\tif ( this._helpers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Trying to register a group name that has already been registered.\n\t\t\t *\n\t\t\t * @error conversion-group-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'conversion-group-exists: Trying to register a group name that has already been registered.', this );\n\t\t}\n\n\t\tconst helpers = isDowncast ? new DowncastHelpers( dispatchers ) : new UpcastHelpers( dispatchers );\n\n\t\tthis._helpers.set( name, helpers );\n\t}\n}\n\n/**\n * Defines how the model should be converted from and to the view.\n *\n * @typedef {Object} module:engine/conversion/conversion~ConverterDefinition\n *\n * @property {*} [model] The model conversion definition. Describes the model element or model attribute to convert. This parameter differs\n * for different functions that accept `ConverterDefinition`. See the description of the function to learn how to set it.\n * @property {module:engine/view/elementdefinition~ElementDefinition|Object} view The definition of the view element to convert from and\n * to. If `model` describes multiple values, `view` is an object that assigns these values (`view` object keys) to view element definitions\n * (`view` object values).\n * @property {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [upcastAlso]\n * Any view element matching `upcastAlso` will also be converted to the model. If `model` describes multiple values, `upcastAlso`\n * is an object that assigns these values (`upcastAlso` object keys) to {@link module:engine/view/matcher~MatcherPattern}s\n * (`upcastAlso` object values).\n * @property {module:utils/priorities~PriorityString} [converterPriority] The converter priority.\n */\n\n// Helper function that creates a joint array out of an item passed in `definition.view` and items passed in\n// `definition.upcastAlso`.\n//\n// @param {module:engine/conversion/conversion~ConverterDefinition} definition\n// @returns {Array} Array containing view definitions.\nfunction* _getAllUpcastDefinitions( definition ) {\n\tif ( definition.model.values ) {\n\t\tfor ( const value of definition.model.values ) {\n\t\t\tconst model = { key: definition.model.key, value };\n\t\t\tconst view = definition.view[ value ];\n\t\t\tconst upcastAlso = definition.upcastAlso ? definition.upcastAlso[ value ] : undefined;\n\n\t\t\tyield* _getUpcastDefinition( model, view, upcastAlso );\n\t\t}\n\t} else {\n\t\tyield* _getUpcastDefinition( definition.model, definition.view, definition.upcastAlso );\n\t}\n}\n\nfunction* _getUpcastDefinition( model, view, upcastAlso ) {\n\tyield { model, view };\n\n\tif ( upcastAlso ) {\n\t\tupcastAlso = Array.isArray( upcastAlso ) ? upcastAlso : [ upcastAlso ];\n\n\t\tfor ( const upcastAlsoItem of upcastAlso ) {\n\t\t\tyield { model, view: upcastAlsoItem };\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/batch\n */\n\n/**\n * A batch instance groups model changes ({@link module:engine/model/operation/operation~Operation operations}). All operations\n * grouped in a single batch can be reverted together, so you can also think about a batch as of a single undo step. If you want\n * to extend a given undo step, you can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n *\t\tmodel.enqueueChange( batch, writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\nexport default class Batch {\n\t/**\n\t * Creates a batch instance.\n\t *\n\t * @see module:engine/model/model~Model#enqueueChange\n\t * @see module:engine/model/model~Model#change\n\t * @param {'transparent'|'default'} [type='default'] The type of the batch.\n\t */\n\tconstructor( type = 'default' ) {\n\t\t/**\n\t\t * An array of operations that compose this batch.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Array.<module:engine/model/operation/operation~Operation>}\n\t\t */\n\t\tthis.operations = [];\n\n\t\t/**\n\t\t * The type of the batch.\n\t\t *\n\t\t * It can be one of the following values:\n\t\t * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n\t\t * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n\t\t * changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {'transparent'|'default'}\n\t\t */\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.\n\t * If there are no operations in the batch or neither operation has the base version set, it returns `null`.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget baseVersion() {\n\t\tfor ( const op of this.operations ) {\n\t\t\tif ( op.baseVersion !== null ) {\n\t\t\t\treturn op.baseVersion;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Adds an operation to the batch instance.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation An operation to add.\n\t * @returns {module:engine/model/operation/operation~Operation} The added operation.\n\t */\n\taddOperation( operation ) {\n\t\toperation.batch = this;\n\t\tthis.operations.push( operation );\n\n\t\treturn operation;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/detachoperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\nimport { _remove } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to permanently remove node from detached root.\n * Note this operation is only a local operation and won't be send to the other clients.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class DetachOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition\n\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n\t * `sourcePosition` with offset shifted by `howMany`.\n\t */\n\tconstructor( sourcePosition, howMany ) {\n\t\tsuper( null );\n\n\t\t/**\n\t\t * Position before the first {@link module:engine/model/item~Item model item} to detach.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} #sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\n\t\t/**\n\t\t * Offset size of moved range.\n\t\t *\n\t\t * @member {Number} #howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'detach';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = this.sourcePosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( this.sourcePosition.root.document ) {\n\t\t\t/**\n\t\t\t * Cannot detach document node.\n\t\t\t *\n\t\t\t * @error detach-operation-on-document-node\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'detach-operation-on-document-node: Cannot detach document node.', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t_remove( Range._createFromPositionAndShift( this.sourcePosition, this.howMany ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'DetachOperation';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/rootelement\n */\n\nimport Element from './element';\n\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n * @extends module:engine/model/element~Element\n */\nexport default class RootElement extends Element {\n\t/**\n\t * Creates root element.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document that is an owner of this root.\n\t * @param {String} name Node name.\n\t * @param {String} [rootName='main'] Unique root name used to identify this root\n\t * element by {@link module:engine/model/document~Document}.\n\t */\n\tconstructor( doc, name, rootName = 'main' ) {\n\t\tsuper( name );\n\n\t\t/**\n\t\t * Document that is an owner of this root.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/document~Document}\n\t\t */\n\t\tthis._doc = doc;\n\n\t\t/**\n\t\t * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.rootName = rootName;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns this root element.\n\t *\n\t * In contrary, to {@link module:engine/model/node~Node node}, root element always have a `document`.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this._doc;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\trootElement.is( 'rootElement' ); // -> true\n\t *\t\trootElement.is( 'element' ); // -> true\n\t *\t\trootElement.is( 'node' ); // -> true\n\t *\t\trootElement.is( 'model:rootElement' ); // -> true\n\t *\t\trootElement.is( 'model:element' ); // -> true\n\t *\t\trootElement.is( 'model:node' ); // -> true\n\t *\n\t *\t\trootElement.is( 'view:element' ); // -> false\n\t *\t\trootElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/model/element~Element#name name}:\n\t *\n\t *\t\trootElement.is( '$root' ); // -> true if this is a $root element\n\t *\t\trootElement.is( 'rootElement', '$root' ); // -> same as above\n\t *\t\ttext.is( '$root' ); -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name ) {\n\t\tconst cutType = type.replace( 'model:', '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'rootElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'rootElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Converts `RootElement` instance to `String` containing it's name.\n\t *\n\t * @returns {String} `RootElement` instance converted to `String`.\n\t */\n\ttoJSON() {\n\t\treturn this.rootName;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/writer\n */\n\nimport AttributeOperation from './operation/attributeoperation';\nimport DetachOperation from './operation/detachoperation';\nimport InsertOperation from './operation/insertoperation';\nimport MarkerOperation from './operation/markeroperation';\nimport MoveOperation from './operation/moveoperation';\nimport RenameOperation from './operation/renameoperation';\nimport RootAttributeOperation from './operation/rootattributeoperation';\nimport SplitOperation from './operation/splitoperation';\nimport MergeOperation from './operation/mergeoperation';\n\nimport DocumentFragment from './documentfragment';\nimport Text from './text';\nimport Element from './element';\nimport RootElement from './rootelement';\nimport Position from './position';\nimport Range from './range.js';\nimport DocumentSelection from './documentselection';\n\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The model can only be modified by using the writer. It should be used whenever you want to create a node, modify\n * child nodes, attributes or text, set the selection's position and its attributes.\n *\n * The instance of the writer is only available in the {@link module:engine/model/model~Model#change `change()`} or\n * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`}.\n *\n *\t\tmodel.change( writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * Note that the writer should never be stored and used outside of the `change()` and\n * `enqueueChange()` blocks.\n *\n * Note that writer's methods do not check the {@link module:engine/model/schema~Schema}. It is possible\n * to create incorrect model structures by using the writer. Read more about in\n * {@glink framework/guides/deep-dive/schema#who-checks-the-schema \"Who checks the schema?\"}.\n *\n * @see module:engine/model/model~Model#change\n * @see module:engine/model/model~Model#enqueueChange\n */\nexport default class Writer {\n\t/**\n\t * Creates a writer instance.\n\t *\n\t * **Note:** It is not recommended to use it directly. Use {@link module:engine/model/model~Model#change `Model#change()`} or\n\t * {@link module:engine/model/model~Model#enqueueChange `Model#enqueueChange()`} instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/model~Model} model\n\t * @param {module:engine/model/batch~Batch} batch\n\t */\n\tconstructor( model, batch ) {\n\t\t/**\n\t\t * Instance of the model on which this writer operates.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The batch to which this writer will add changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/batch~Batch}\n\t\t */\n\t\tthis.batch = batch;\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\t\twriter.createText( 'foo', { bold: true } );\n\t *\n\t * @param {String} data Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @returns {module:engine/model/text~Text} Created text node.\n\t */\n\tcreateText( data, attributes ) {\n\t\treturn new Text( data, attributes );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/element~Element element}.\n\t *\n\t *\t\twriter.createElement( 'paragraph' );\n\t *\t\twriter.createElement( 'paragraph', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/model/element~Element} Created element.\n\t */\n\tcreateElement( name, attributes ) {\n\t\treturn new Element( name, attributes );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Created document fragment.\n\t */\n\tcreateDocumentFragment() {\n\t\treturn new DocumentFragment();\n\t}\n\n\t/**\n\t * Inserts item on given position.\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.insert( paragraph, position );\n\t *\n\t * Instead of using position you can use parent and offset:\n\t *\n\t *\t\tconst text = writer.createText( 'foo' );\n\t *\t\twriter.insert( text, paragraph, 5 );\n\t *\n\t * You can also use `end` instead of the offset to insert at the end:\n\t *\n\t *\t\tconst text = writer.createText( 'foo' );\n\t *\t\twriter.insert( text, paragraph, 'end' );\n\t *\n\t * Or insert before or after another element:\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.insert( paragraph, anotherParagraph, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * Note that if the item already has parent it will be removed from the previous parent.\n\t *\n\t * Note that you cannot re-insert a node from a document to a different document or a document fragment. In this case,\n\t * `model-writer-insert-forbidden-move` is thrown.\n\t *\n\t * If you want to move {@link module:engine/model/range~Range range} instead of an\n\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n\t *\n\t * **Note:** For a paste-like content insertion mechanism see\n\t * {@link module:engine/model/model~Model#insertContent `model.insertContent()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment} item Item or document\n\t * fragment to insert.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * second parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsert( item, itemOrPosition, offset = 0 ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( item instanceof Text && item.data == '' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = Position._createAt( itemOrPosition, offset );\n\n\t\t// If item has a parent already.\n\t\tif ( item.parent ) {\n\t\t\t// We need to check if item is going to be inserted within the same document.\n\t\t\tif ( isSameTree( item.root, position.root ) ) {\n\t\t\t\t// If it's we just need to move it.\n\t\t\t\tthis.move( Range._createOn( item ), position );\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If it isn't the same root.\n\t\t\telse {\n\t\t\t\tif ( item.root.document ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Cannot move a node from a document to a different tree.\n\t\t\t\t\t * It is forbidden to move a node that was already in a document outside of it.\n\t\t\t\t\t *\n\t\t\t\t\t * @error model-writer-insert-forbidden-move\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'model-writer-insert-forbidden-move: ' +\n\t\t\t\t\t\t'Cannot move a node from a document to a different tree. ' +\n\t\t\t\t\t\t'It is forbidden to move a node that was already in a document outside of it.',\n\t\t\t\t\t\tthis\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Move between two different document fragments or from document fragment to a document is possible.\n\t\t\t\t\t// In that case, remove the item from it's original parent.\n\t\t\t\t\tthis.remove( item );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst version = position.root.document ? position.root.document.version : null;\n\n\t\tconst insert = new InsertOperation( position, item, version );\n\n\t\tif ( item instanceof Text ) {\n\t\t\tinsert.shouldReceiveAttributes = true;\n\t\t}\n\n\t\tthis.batch.addOperation( insert );\n\t\tthis.model.applyOperation( insert );\n\n\t\t// When element is a DocumentFragment we need to move its markers to Document#markers.\n\t\tif ( item instanceof DocumentFragment ) {\n\t\t\tfor ( const [ markerName, markerRange ] of item.markers ) {\n\t\t\t\t// We need to migrate marker range from DocumentFragment to Document.\n\t\t\t\tconst rangeRootPosition = Position._createAt( markerRange.root, 0 );\n\t\t\t\tconst range = new Range(\n\t\t\t\t\tmarkerRange.start._getCombined( rangeRootPosition, position ),\n\t\t\t\t\tmarkerRange.end._getCombined( rangeRootPosition, position )\n\t\t\t\t);\n\n\t\t\t\tconst options = { range, usingOperation: true, affectsData: true };\n\n\t\t\t\tif ( this.model.markers.has( markerName ) ) {\n\t\t\t\t\tthis.updateMarker( markerName, options );\n\t\t\t\t} else {\n\t\t\t\t\tthis.addMarker( markerName, options );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates and inserts text on given position. You can optionally set text attributes:\n\t *\n\t *\t\twriter.insertText( 'foo', position );\n\t *\t\twriter.insertText( 'foo', { bold: true }, position );\n\t *\n\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\n\t * or before or after other node:\n\t *\n\t *\t\t// Inserts 'foo' in paragraph, at offset 5:\n\t *\t\twriter.insertText( 'foo', paragraph, 5 );\n\t *\t\t// Inserts 'foo' at the end of a paragraph:\n\t *\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t// Inserts 'foo' after an image:\n\t *\t\twriter.insertText( 'foo', image, 'after' );\n\t *\n\t * These parameters work in the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * @param {String} data Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * third parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsertText( text, attributes, itemOrPosition, offset ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\n\t\t\tthis.insert( this.createText( text ), attributes, itemOrPosition );\n\t\t} else {\n\t\t\tthis.insert( this.createText( text, attributes ), itemOrPosition, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates and inserts element on given position. You can optionally set attributes:\n\t *\n\t *\t\twriter.insertElement( 'paragraph', position );\n\t *\t\twriter.insertElement( 'paragraph', { alignment: 'center' }, position );\n\t *\n\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\n\t * or before or after other node:\n\t *\n\t *\t\t// Inserts paragraph in the root at offset 5:\n\t *\t\twriter.insertElement( 'paragraph', root, 5 );\n\t *\t\t// Inserts paragraph at the end of a blockquote:\n\t *\t\twriter.insertElement( 'paragraph', blockquote, 'end' );\n\t *\t\t// Inserts after an image:\n\t *\t\twriter.insertElement( 'paragraph', image, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * third parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsertElement( name, attributes, itemOrPosition, offset ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\n\t\t\tthis.insert( this.createElement( name ), attributes, itemOrPosition );\n\t\t} else {\n\t\t\tthis.insert( this.createElement( name, attributes ), itemOrPosition, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts item at the end of the given parent.\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.append( paragraph, root );\n\t *\n\t * Note that if the item already has parent it will be removed from the previous parent.\n\t *\n\t * If you want to move {@link module:engine/model/range~Range range} instead of an\n\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment}\n\t * item Item or document fragment to insert.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappend( item, parent ) {\n\t\tthis.insert( item, parent, 'end' );\n\t}\n\n\t/**\n\t * Creates text node and inserts it at the end of the parent. You can optionally set text attributes:\n\t *\n\t *\t\twriter.appendText( 'foo', paragraph );\n\t *\t\twriter.appendText( 'foo', { bold: true }, paragraph );\n\t *\n\t * @param {String} text Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappendText( text, attributes, parent ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\n\t\t\tthis.insert( this.createText( text ), attributes, 'end' );\n\t\t} else {\n\t\t\tthis.insert( this.createText( text, attributes ), parent, 'end' );\n\t\t}\n\t}\n\n\t/**\n\t * Creates element and inserts it at the end of the parent. You can optionally set attributes:\n\t *\n\t *\t\twriter.appendElement( 'paragraph', root );\n\t *\t\twriter.appendElement( 'paragraph', { alignment: 'center' }, root );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappendElement( name, attributes, parent ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\n\t\t\tthis.insert( this.createElement( name ), attributes, 'end' );\n\t\t} else {\n\t\t\tthis.insert( this.createElement( name, attributes ), parent, 'end' );\n\t\t}\n\t}\n\n\t/**\n\t * Sets value of the attribute with given key on a {@link module:engine/model/item~Item model item}\n\t * or on a {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {*} value Attribute new value.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range on which the attribute will be set.\n\t */\n\tsetAttribute( key, value, itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\tconst ranges = itemOrRange.getMinimalFlatRanges();\n\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tsetAttributeOnRange( this, key, value, range );\n\t\t\t}\n\t\t} else {\n\t\t\tsetAttributeOnItem( this, key, value, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Sets values of attributes on a {@link module:engine/model/item~Item model item}\n\t * or on a {@link module:engine/model/range~Range range}.\n\t *\n\t *\t\twriter.setAttributes( {\n\t *\t\t\tbold: true,\n\t *\t\t\titalic: true\n\t *\t\t}, range );\n\t *\n\t * @param {Object} attributes Attributes keys and values.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range on which the attributes will be set.\n\t */\n\tsetAttributes( attributes, itemOrRange ) {\n\t\tfor ( const [ key, val ] of toMap( attributes ) ) {\n\t\t\tthis.setAttribute( key, val, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Removes an attribute with given key from a {@link module:engine/model/item~Item model item}\n\t * or from a {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range from which the attribute will be removed.\n\t */\n\tremoveAttribute( key, itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\tconst ranges = itemOrRange.getMinimalFlatRanges();\n\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tsetAttributeOnRange( this, key, null, range );\n\t\t\t}\n\t\t} else {\n\t\t\tsetAttributeOnItem( this, key, null, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Removes all attributes from all elements in the range or from the given item.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range from which all attributes will be removed.\n\t */\n\tclearAttributes( itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst removeAttributesFromItem = item => {\n\t\t\tfor ( const attribute of item.getAttributeKeys() ) {\n\t\t\t\tthis.removeAttribute( attribute, item );\n\t\t\t}\n\t\t};\n\n\t\tif ( !( itemOrRange instanceof Range ) ) {\n\t\t\tremoveAttributesFromItem( itemOrRange );\n\t\t} else {\n\t\t\tfor ( const item of itemOrRange.getItems() ) {\n\t\t\t\tremoveAttributesFromItem( item );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves all items in the source range to the target position.\n\t *\n\t *\t\twriter.move( sourceRange, targetPosition );\n\t *\n\t * Instead of the target position you can use parent and offset or define that range should be moved to the end\n\t * or before or after chosen item:\n\t *\n\t *\t\t// Moves all items in the range to the paragraph at offset 5:\n\t *\t\twriter.move( sourceRange, paragraph, 5 );\n\t *\t\t// Moves all items in the range to the end of a blockquote:\n\t *\t\twriter.move( sourceRange, blockquote, 'end' );\n\t *\t\t// Moves all items in the range to a position after an image:\n\t *\t\twriter.move( sourceRange, image, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * Note that items can be moved only within the same tree. It means that you can move items within the same root\n\t * (element or document fragment) or between {@link module:engine/model/document~Document#roots documents roots},\n\t * but you can not move items from document fragment to the document or from one detached element to another. Use\n\t * {@link module:engine/model/writer~Writer#insert} in such cases.\n\t *\n\t * @param {module:engine/model/range~Range} range Source range.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * second parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tmove( range, itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !( range instanceof Range ) ) {\n\t\t\t/**\n\t\t\t * Invalid range to move.\n\t\t\t *\n\t\t\t * @error writer-move-invalid-range\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-invalid-range: Invalid range to move.', this );\n\t\t}\n\n\t\tif ( !range.isFlat ) {\n\t\t\t/**\n\t\t\t * Range to move is not flat.\n\t\t\t *\n\t\t\t * @error writer-move-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-range-not-flat: Range to move is not flat.', this );\n\t\t}\n\n\t\tconst position = Position._createAt( itemOrPosition, offset );\n\n\t\t// Do not move anything if the move target is same as moved range start.\n\t\tif ( position.isEqual( range.start ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If part of the marker is removed, create additional marker operation for undo purposes.\n\t\tthis._addOperationForAffectedMarkers( 'move', range );\n\n\t\tif ( !isSameTree( range.root, position.root ) ) {\n\t\t\t/**\n\t\t\t * Range is going to be moved within not the same document. Please use\n\t\t\t * {@link module:engine/model/writer~Writer#insert insert} instead.\n\t\t\t *\n\t\t\t * @error writer-move-different-document\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-different-document: Range is going to be moved between different documents.', this );\n\t\t}\n\n\t\tconst version = range.root.document ? range.root.document.version : null;\n\t\tconst operation = new MoveOperation( range.start, range.end.offset - range.start.offset, position, version );\n\n\t\tthis.batch.addOperation( operation );\n\t\tthis.model.applyOperation( operation );\n\t}\n\n\t/**\n\t * Removes given model {@link module:engine/model/item~Item item} or {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange Model item or range to remove.\n\t */\n\tremove( itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst rangeToRemove = itemOrRange instanceof Range ? itemOrRange : Range._createOn( itemOrRange );\n\t\tconst ranges = rangeToRemove.getMinimalFlatRanges().reverse();\n\n\t\tfor ( const flat of ranges ) {\n\t\t\t// If part of the marker is removed, create additional marker operation for undo purposes.\n\t\t\tthis._addOperationForAffectedMarkers( 'move', flat );\n\n\t\t\tapplyRemoveOperation( flat.start, flat.end.offset - flat.start.offset, this.batch, this.model );\n\t\t}\n\t}\n\n\t/**\n\t * Merges two siblings at the given position.\n\t *\n\t * Node before and after the position have to be an element. Otherwise `writer-merge-no-element-before` or\n\t * `writer-merge-no-element-after` error will be thrown.\n\t *\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\tmerge( position ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst nodeBefore = position.nodeBefore;\n\t\tconst nodeAfter = position.nodeAfter;\n\n\t\t// If part of the marker is removed, create additional marker operation for undo purposes.\n\t\tthis._addOperationForAffectedMarkers( 'merge', position );\n\n\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Node before merge position must be an element.\n\t\t\t *\n\t\t\t * @error writer-merge-no-element-before\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-merge-no-element-before: Node before merge position must be an element.', this );\n\t\t}\n\n\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Node after merge position must be an element.\n\t\t\t *\n\t\t\t * @error writer-merge-no-element-after\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-merge-no-element-after: Node after merge position must be an element.', this );\n\t\t}\n\n\t\tif ( !position.root.document ) {\n\t\t\tthis._mergeDetached( position );\n\t\t} else {\n\t\t\tthis._merge( position );\n\t\t}\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionFromPath `Model#createPositionFromPath()`}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionFromPath( root, path, stickiness ) {\n\t\treturn this.model.createPositionFromPath( root, path, stickiness );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn this.model.createPositionAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionAfter `Model#createPositionAfter()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn this.model.createPositionAfter( item );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionBefore `Model#createPositionBefore()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn this.model.createPositionBefore( item );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRange `Model#createRange()`}.\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn this.model.createRange( start, end );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRangeIn `Model#createRangeIn()`}.\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn this.model.createRangeIn( element );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRangeOn `Model#createRangeOn()`}.\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeOn( element ) {\n\t\treturn this.model.createRangeOn( element );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createSelection `Model#createSelection()`}.\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @returns {module:engine/model/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn this.model.createSelection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Performs merge action in a detached tree.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\t_mergeDetached( position ) {\n\t\tconst nodeBefore = position.nodeBefore;\n\t\tconst nodeAfter = position.nodeAfter;\n\n\t\tthis.move( Range._createIn( nodeAfter ), Position._createAt( nodeBefore, 'end' ) );\n\t\tthis.remove( nodeAfter );\n\t}\n\n\t/**\n\t * Performs merge action in a non-detached tree.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\t_merge( position ) {\n\t\tconst targetPosition = Position._createAt( position.nodeBefore, 'end' );\n\t\tconst sourcePosition = Position._createAt( position.nodeAfter, 0 );\n\n\t\tconst graveyard = position.root.document.graveyard;\n\t\tconst graveyardPosition = new Position( graveyard, [ 0 ] );\n\n\t\tconst version = position.root.document.version;\n\n\t\tconst merge = new MergeOperation( sourcePosition, position.nodeAfter.maxOffset, targetPosition, graveyardPosition, version );\n\n\t\tthis.batch.addOperation( merge );\n\t\tthis.model.applyOperation( merge );\n\t}\n\n\t/**\n\t * Renames the given element.\n\t *\n\t * @param {module:engine/model/element~Element} element The element to rename.\n\t * @param {String} newName New element name.\n\t */\n\trename( element, newName ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !( element instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Trying to rename an object which is not an instance of Element.\n\t\t\t *\n\t\t\t * @error writer-rename-not-element-instance\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-rename-not-element-instance: Trying to rename an object which is not an instance of Element.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst version = element.root.document ? element.root.document.version : null;\n\t\tconst renameOperation = new RenameOperation( Position._createBefore( element ), element.name, newName, version );\n\n\t\tthis.batch.addOperation( renameOperation );\n\t\tthis.model.applyOperation( renameOperation );\n\t}\n\n\t/**\n\t * Splits elements starting from the given position and going to the top of the model tree as long as given\n\t * `limitElement` is reached. When `limitElement` is not defined then only the parent of the given position will be split.\n\t *\n\t * The element needs to have a parent. It cannot be a root element nor a document fragment.\n\t * The `writer-split-element-no-parent` error will be thrown if you try to split an element with no parent.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of split.\n\t * @param {module:engine/model/node~Node} [limitElement] Stop splitting when this element will be reached.\n\t * @returns {Object} result Split result.\n\t * @returns {module:engine/model/position~Position} result.position Position between split elements.\n\t * @returns {module:engine/model/range~Range} result.range Range that stars from the end of the first split element and ends\n\t * at the beginning of the first copy element.\n\t */\n\tsplit( position, limitElement ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tlet splitElement = position.parent;\n\n\t\tif ( !splitElement.parent ) {\n\t\t\t/**\n\t\t\t * Element with no parent can not be split.\n\t\t\t *\n\t\t\t * @error writer-split-element-no-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-split-element-no-parent: Element with no parent can not be split.', this );\n\t\t}\n\n\t\t// When limit element is not defined lets set splitElement parent as limit.\n\t\tif ( !limitElement ) {\n\t\t\tlimitElement = splitElement.parent;\n\t\t}\n\n\t\tif ( !position.parent.getAncestors( { includeSelf: true } ).includes( limitElement ) ) {\n\t\t\tthrow new CKEditorError( 'writer-split-invalid-limit-element: Limit element is not a position ancestor.', this );\n\t\t}\n\n\t\t// We need to cache elements that will be created as a result of the first split because\n\t\t// we need to create a range from the end of the first split element to the beginning of the\n\t\t// first copy element. This should be handled by LiveRange but it doesn't work on detached nodes.\n\t\tlet firstSplitElement, firstCopyElement;\n\n\t\tdo {\n\t\t\tconst version = splitElement.root.document ? splitElement.root.document.version : null;\n\t\t\tconst howMany = splitElement.maxOffset - position.offset;\n\t\t\tconst split = new SplitOperation( position, howMany, null, version );\n\n\t\t\tthis.batch.addOperation( split );\n\t\t\tthis.model.applyOperation( split );\n\n\t\t\t// Cache result of the first split.\n\t\t\tif ( !firstSplitElement && !firstCopyElement ) {\n\t\t\t\tfirstSplitElement = splitElement;\n\t\t\t\tfirstCopyElement = position.parent.nextSibling;\n\t\t\t}\n\n\t\t\tposition = this.createPositionAfter( position.parent );\n\t\t\tsplitElement = position.parent;\n\t\t} while ( splitElement !== limitElement );\n\n\t\treturn {\n\t\t\tposition,\n\t\t\trange: new Range( Position._createAt( firstSplitElement, 'end' ), Position._createAt( firstCopyElement, 0 ) )\n\t\t};\n\t}\n\n\t/**\n\t * Wraps the given range with the given element or with a new element (if a string was passed).\n\t *\n\t * **Note:** range to wrap should be a \"flat range\" (see {@link module:engine/model/range~Range#isFlat `Range#isFlat`}).\n\t * If not, an error will be thrown.\n\t *\n\t * @param {module:engine/model/range~Range} range Range to wrap.\n\t * @param {module:engine/model/element~Element|String} elementOrString Element or name of element to wrap the range with.\n\t */\n\twrap( range, elementOrString ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !range.isFlat ) {\n\t\t\t/**\n\t\t\t * Range to wrap is not flat.\n\t\t\t *\n\t\t\t * @error writer-wrap-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-range-not-flat: Range to wrap is not flat.', this );\n\t\t}\n\n\t\tconst element = elementOrString instanceof Element ? elementOrString : new Element( elementOrString );\n\n\t\tif ( element.childCount > 0 ) {\n\t\t\t/**\n\t\t\t * Element to wrap with is not empty.\n\t\t\t *\n\t\t\t * @error writer-wrap-element-not-empty\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-element-not-empty: Element to wrap with is not empty.', this );\n\t\t}\n\n\t\tif ( element.parent !== null ) {\n\t\t\t/**\n\t\t\t * Element to wrap with is already attached to a tree model.\n\t\t\t *\n\t\t\t * @error writer-wrap-element-attached\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-element-attached: Element to wrap with is already attached to tree model.', this );\n\t\t}\n\n\t\tthis.insert( element, range.start );\n\n\t\t// Shift the range-to-wrap because we just inserted an element before that range.\n\t\tconst shiftedRange = new Range( range.start.getShiftedBy( 1 ), range.end.getShiftedBy( 1 ) );\n\n\t\tthis.move( shiftedRange, Position._createAt( element, 0 ) );\n\t}\n\n\t/**\n\t * Unwraps children of the given element – all its children are moved before it and then the element is removed.\n\t * Throws error if you try to unwrap an element which does not have a parent.\n\t *\n\t * @param {module:engine/model/element~Element} element Element to unwrap.\n\t */\n\tunwrap( element ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( element.parent === null ) {\n\t\t\t/**\n\t\t\t * Trying to unwrap an element which has no parent.\n\t\t\t *\n\t\t\t * @error writer-unwrap-element-no-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-unwrap-element-no-parent: Trying to unwrap an element which has no parent.', this );\n\t\t}\n\n\t\tthis.move( Range._createIn( element ), this.createPositionAfter( element ) );\n\t\tthis.remove( element );\n\t}\n\n\t/**\n\t * Adds a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n\t * changes in the document and updates its range automatically, when model tree changes.\n\t *\n\t * As the first parameter you can set marker name.\n\t *\n\t * The required `options.usingOperation` parameter lets you decide if the marker should be managed by operations or not. See\n\t * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n\t * markers managed by operations and not-managed by operations.\n\t *\n\t * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n\t * `true` when the marker change changes the data returned by the\n\t * {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n\t * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n\t * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n\t *\n\t * Create marker directly base on marker's name:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: false } );\n\t *\n\t * Create marker using operation:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: true } );\n\t *\n\t * Create marker that affects the editor data:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: false, affectsData: true } );\n\t *\n\t * Note: For efficiency reasons, it's best to create and keep as little markers as possible.\n\t *\n\t * @see module:engine/model/markercollection~Marker\n\t * @param {String} name Name of a marker to create - must be unique.\n\t * @param {Object} options\n\t * @param {Boolean} options.usingOperation Flag indicating that the marker should be added by MarkerOperation.\n\t * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n\t * @param {module:engine/model/range~Range} options.range Marker range.\n\t * @param {Boolean} [options.affectsData=false] Flag indicating that the marker changes the editor data.\n\t * @returns {module:engine/model/markercollection~Marker} Marker that was set.\n\t */\n\taddMarker( name, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !options || typeof options.usingOperation != 'boolean' ) {\n\t\t\t/**\n\t\t\t * The `options.usingOperation` parameter is required when adding a new marker.\n\t\t\t *\n\t\t\t * @error writer-addMarker-no-usingOperation\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-addMarker-no-usingOperation: The options.usingOperation parameter is required when adding a new marker.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst usingOperation = options.usingOperation;\n\t\tconst range = options.range;\n\t\tconst affectsData = options.affectsData === undefined ? false : options.affectsData;\n\n\t\tif ( this.model.markers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Marker with provided name already exists.\n\t\t\t *\n\t\t\t * @error writer-addMarker-marker-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-addMarker-marker-exists: Marker with provided name already exists.', this );\n\t\t}\n\n\t\tif ( !range ) {\n\t\t\t/**\n\t\t\t * Range parameter is required when adding a new marker.\n\t\t\t *\n\t\t\t * @error writer-addMarker-no-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-addMarker-no-range: Range parameter is required when adding a new marker.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tif ( !usingOperation ) {\n\t\t\treturn this.model.markers._set( name, range, usingOperation, affectsData );\n\t\t}\n\n\t\tapplyMarkerOperation( this, name, null, range, affectsData );\n\n\t\treturn this.model.markers.get( name );\n\t}\n\n\t/**\n\t * Adds, updates or refreshes a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n\t * changes in the document and updates its range automatically, when model tree changes. Still, it is possible to change the\n\t * marker's range directly using this method.\n\t *\n\t * As the first parameter you can set marker name or instance. If none of them is provided, new marker, with a unique\n\t * name is created and returned.\n\t *\n\t * As the second parameter you can set the new marker data or leave this parameter as empty which will just refresh\n\t * the marker by triggering downcast conversion for it. Refreshing the marker is useful when you want to change\n\t * the marker {@link module:engine/view/element~Element view element} without changing any marker data.\n\t *\n\t * \t\tlet isCommentActive = false;\n\t *\n\t * \t\tmodel.conversion.markerToHighlight( {\n\t * \t\t\tmodel: 'comment',\n\t *\t\t\tview: data => {\n\t *\t\t\t\tconst classes = [ 'comment-marker' ];\n\t *\n\t *\t\t\t\tif ( isCommentActive ) {\n\t *\t\t\t\t\tclasses.push( 'comment-marker--active' );\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\treturn { classes };\n\t *\t\t\t}\n\t * \t\t} );\n\t *\n\t * \t\t// Change the property that indicates if marker is displayed as active or not.\n\t * \t\tisCommentActive = true;\n\t *\n\t * \t\t// And refresh the marker to convert it with additional class.\n\t * \t\tmodel.change( writer => writer.updateMarker( 'comment' ) );\n\t *\n\t * The `options.usingOperation` parameter lets you change if the marker should be managed by operations or not. See\n\t * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n\t * markers managed by operations and not-managed by operations. It is possible to change this option for an existing marker.\n\t *\n\t * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n\t * `true` when the marker change changes the data returned by\n\t * the {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n\t * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n\t * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n\t *\n\t * Update marker directly base on marker's name:\n\t *\n\t *\t\tupdateMarker( markerName, { range } );\n\t *\n\t * Update marker using operation:\n\t *\n\t *\t\tupdateMarker( marker, { range, usingOperation: true } );\n\t *\t\tupdateMarker( markerName, { range, usingOperation: true } );\n\t *\n\t * Change marker's option (start using operations to manage it):\n\t *\n\t *\t\tupdateMarker( marker, { usingOperation: true } );\n\t *\n\t * Change marker's option (inform the engine, that the marker does not affect the data anymore):\n\t *\n\t *\t\tupdateMarker( markerName, { affectsData: false } );\n\t *\n\t * @see module:engine/model/markercollection~Marker\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of a marker to update, or a marker instance.\n\t * @param {Object} [options] If options object is not defined then marker will be refreshed by triggering\n\t * downcast conversion for this marker with the same data.\n\t * @param {module:engine/model/range~Range} [options.range] Marker range to update.\n\t * @param {Boolean} [options.usingOperation] Flag indicated whether the marker should be added by MarkerOperation.\n\t * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n\t * @param {Boolean} [options.affectsData] Flag indicating that the marker changes the editor data.\n\t */\n\tupdateMarker( markerOrName, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\t\tconst currentMarker = this.model.markers.get( markerName );\n\n\t\tif ( !currentMarker ) {\n\t\t\t/**\n\t\t\t * Marker with provided name does not exists.\n\t\t\t *\n\t\t\t * @error writer-updateMarker-marker-not-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-updateMarker-marker-not-exists: Marker with provided name does not exists.', this );\n\t\t}\n\n\t\tif ( !options ) {\n\t\t\tthis.model.markers._refresh( currentMarker );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst hasUsingOperationDefined = typeof options.usingOperation == 'boolean';\n\t\tconst affectsDataDefined = typeof options.affectsData == 'boolean';\n\n\t\t// Use previously defined marker's affectsData if the property is not provided.\n\t\tconst affectsData = affectsDataDefined ? options.affectsData : currentMarker.affectsData;\n\n\t\tif ( !hasUsingOperationDefined && !options.range && !affectsDataDefined ) {\n\t\t\t/**\n\t\t\t * One of the options is required - provide range, usingOperations or affectsData.\n\t\t\t *\n\t\t\t * @error writer-updateMarker-wrong-options\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-updateMarker-wrong-options: One of the options is required - provide range, usingOperations or affectsData.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst currentRange = currentMarker.getRange();\n\t\tconst updatedRange = options.range ? options.range : currentRange;\n\n\t\tif ( hasUsingOperationDefined && options.usingOperation !== currentMarker.managedUsingOperations ) {\n\t\t\t// The marker type is changed so it's necessary to create proper operations.\n\t\t\tif ( options.usingOperation ) {\n\t\t\t\t// If marker changes to a managed one treat this as synchronizing existing marker.\n\t\t\t\t// Create `MarkerOperation` with `oldRange` set to `null`, so reverse operation will remove the marker.\n\t\t\t\tapplyMarkerOperation( this, markerName, null, updatedRange, affectsData );\n\t\t\t} else {\n\t\t\t\t// If marker changes to a marker that do not use operations then we need to create additional operation\n\t\t\t\t// that removes that marker first.\n\t\t\t\tapplyMarkerOperation( this, markerName, currentRange, null, affectsData );\n\n\t\t\t\t// Although not managed the marker itself should stay in model and its range should be preserver or changed to passed range.\n\t\t\t\tthis.model.markers._set( markerName, updatedRange, undefined, affectsData );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Marker's type doesn't change so update it accordingly.\n\t\tif ( currentMarker.managedUsingOperations ) {\n\t\t\tapplyMarkerOperation( this, markerName, currentRange, updatedRange, affectsData );\n\t\t} else {\n\t\t\tthis.model.markers._set( markerName, updatedRange, undefined, affectsData );\n\t\t}\n\t}\n\n\t/**\n\t * Removes given {@link module:engine/model/markercollection~Marker marker} or marker with given name.\n\t * The marker is removed accordingly to how it has been created, so if the marker was created using operation,\n\t * it will be destroyed using operation.\n\t *\n\t * @param {module:engine/model/markercollection~Marker|String} markerOrName Marker or marker name to remove.\n\t */\n\tremoveMarker( markerOrName ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst name = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\n\t\tif ( !this.model.markers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Trying to remove marker which does not exist.\n\t\t\t *\n\t\t\t * @error writer-removeMarker-no-marker\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-removeMarker-no-marker: Trying to remove marker which does not exist.', this );\n\t\t}\n\n\t\tconst marker = this.model.markers.get( name );\n\n\t\tif ( !marker.managedUsingOperations ) {\n\t\t\tthis.model.markers._remove( name );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldRange = marker.getRange();\n\n\t\tapplyMarkerOperation( this, name, oldRange, null, marker.affectsData );\n\t}\n\n\t/**\n\t * Sets the document's selection (ranges and direction) to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable} or creates an empty selection if no arguments were passed.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t *\t\t// Sets selection to the given document selection.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\twriter.setSelection( documentSelection );\n\t *\n\t *\t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPosition( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t *\t\t// Sets collapsed selection at the position of the given node and an offset.\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'on' );\n\t *\n\t *\t\t// Removes all selection's ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * `Writer#setSelection()` allow passing additional options (`backward`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\twriter.setSelection( range, { backward: true } );\n\t *\n\t * Throws `writer-incorrect-use` error when the writer is used outside the `change()` block.\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tsetSelection( selectable, placeOrOffset, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tthis.model.document.selection._setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link #createPositionAt `writer.createPositionAt()`} parameters.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tthis.model.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets attribute(s) on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * Using key and value pair:\n\t *\n\t * \twriter.setSelectionAttribute( 'italic', true );\n\t *\n\t * Using key-value object:\n\t *\n\t * \twriter.setSelectionAttribute( { italic: true, bold: false } );\n\t *\n\t * Using iterable object:\n\t *\n\t * \twriter.setSelectionAttribute( new Map( [ [ 'italic', true ] ] ) );\n\t *\n\t * @param {String|Object|Iterable.<*>} keyOrObjectOrIterable Key of the attribute to set\n\t * or object / iterable of key => value attribute pairs.\n\t * @param {*} [value] Attribute value.\n\t */\n\tsetSelectionAttribute( keyOrObjectOrIterable, value ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( typeof keyOrObjectOrIterable === 'string' ) {\n\t\t\tthis._setSelectionAttribute( keyOrObjectOrIterable, value );\n\t\t} else {\n\t\t\tfor ( const [ key, value ] of toMap( keyOrObjectOrIterable ) ) {\n\t\t\t\tthis._setSelectionAttribute( key, value );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute(s) with given key(s) from the selection.\n\t *\n\t * Remove one attribute:\n\t *\n\t *\t\twriter.removeSelectionAttribute( 'italic' );\n\t *\n\t * Remove multiple attributes:\n\t *\n\t *\t\twriter.removeSelectionAttribute( [ 'italic', 'bold' ] );\n\t *\n\t * @param {String|Iterable.<String>} keyOrIterableOfKeys Key of the attribute to remove or an iterable of attribute keys to remove.\n\t */\n\tremoveSelectionAttribute( keyOrIterableOfKeys ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( typeof keyOrIterableOfKeys === 'string' ) {\n\t\t\tthis._removeSelectionAttribute( keyOrIterableOfKeys );\n\t\t} else {\n\t\t\tfor ( const key of keyOrIterableOfKeys ) {\n\t\t\t\tthis._removeSelectionAttribute( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Temporarily changes the {@link module:engine/model/documentselection~DocumentSelection#isGravityOverridden gravity}\n\t * of the selection from left to right.\n\t *\n\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left gravity,\n\t * then the selection (after being moved by the user) inherits attributes from its left-hand side.\n\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\n\t *\n\t * For the following model fragment:\n\t *\n\t *\t\t<$text bold=\"true\" linkHref=\"url\">bar[]</$text><$text bold=\"true\">biz</$text>\n\t *\n\t * * Default gravity: selection will have the `bold` and `linkHref` attributes.\n\t * * Overridden gravity: selection will have `bold` attribute.\n\t *\n\t * **Note**: It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n\t * of the process.\n\t *\n\t * @returns {String} The unique id which allows restoring the gravity.\n\t */\n\toverrideSelectionGravity() {\n\t\treturn this.model.document.selection._overrideGravity();\n\t}\n\n\t/**\n\t * Restores {@link ~Writer#overrideSelectionGravity} gravity to default.\n\t *\n\t * Restoring the gravity is only possible using the unique identifier returned by\n\t * {@link ~Writer#overrideSelectionGravity}. Note that the gravity remains overridden as long as won't be restored\n\t * the same number of times it was overridden.\n\t *\n\t * @param {String} uid The unique id returned by {@link ~Writer#overrideSelectionGravity}.\n\t */\n\trestoreSelectionGravity( uid ) {\n\t\tthis.model.document.selection._restoreGravity( uid );\n\t}\n\n\t/**\n\t * @private\n\t * @param {String} key Key of the attribute to remove.\n\t * @param {*} value Attribute value.\n\t */\n\t_setSelectionAttribute( key, value ) {\n\t\tconst selection = this.model.document.selection;\n\n\t\t// Store attribute in parent element if the selection is collapsed in an empty node.\n\t\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\n\t\t\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\n\n\t\t\tthis.setAttribute( storeKey, value, selection.anchor.parent );\n\t\t}\n\n\t\tselection._setAttribute( key, value );\n\t}\n\n\t/**\n\t * @private\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeSelectionAttribute( key ) {\n\t\tconst selection = this.model.document.selection;\n\n\t\t// Remove stored attribute from parent element if the selection is collapsed in an empty node.\n\t\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\n\t\t\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\n\n\t\t\tthis.removeAttribute( storeKey, selection.anchor.parent );\n\t\t}\n\n\t\tselection._removeAttribute( key );\n\t}\n\n\t/**\n\t * Throws `writer-detached-writer-tries-to-modify-model` error when the writer is used outside of the `change()` block.\n\t *\n\t * @private\n\t */\n\t_assertWriterUsedCorrectly() {\n\t\t/**\n\t\t * Trying to use a writer outside a {@link module:engine/model/model~Model#change `change()` or\n\t\t * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`} blocks.\n\t\t *\n\t\t * The writer can only be used inside these blocks which ensures that the model\n\t\t * can only be changed during such \"sessions\".\n\t\t *\n\t\t * @error writer-incorrect-use\n\t\t */\n\t\tif ( this.model._currentWriter !== this ) {\n\t\t\tthrow new CKEditorError( 'writer-incorrect-use: Trying to use a writer outside the change() block.', this );\n\t\t}\n\t}\n\n\t/**\n\t * For given action `type` and `positionOrRange` where the action happens, this function finds all affected markers\n\t * and applies a marker operation with the new marker range equal to the current range. Thanks to this, the marker range\n\t * can be later correctly processed during undo.\n\t *\n\t * @private\n\t * @param {'move'|'merge'} type Writer action type.\n\t * @param {module:engine/model/position~Position|module:engine/model/range~Range} positionOrRange Position or range\n\t * where the writer action happens.\n\t */\n\t_addOperationForAffectedMarkers( type, positionOrRange ) {\n\t\tfor ( const marker of this.model.markers ) {\n\t\t\tif ( !marker.managedUsingOperations ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst markerRange = marker.getRange();\n\t\t\tlet isAffected = false;\n\n\t\t\tif ( type == 'move' ) {\n\t\t\t\tisAffected =\n\t\t\t\t\tpositionOrRange.containsPosition( markerRange.start ) ||\n\t\t\t\t\tpositionOrRange.start.isEqual( markerRange.start ) ||\n\t\t\t\t\tpositionOrRange.containsPosition( markerRange.end ) ||\n\t\t\t\t\tpositionOrRange.end.isEqual( markerRange.end );\n\t\t\t} else {\n\t\t\t\t// if type == 'merge'.\n\t\t\t\tconst elementBefore = positionOrRange.nodeBefore;\n\t\t\t\tconst elementAfter = positionOrRange.nodeAfter;\n\n\t\t\t\t//               Start:  <p>Foo[</p><p>Bar]</p>\n\t\t\t\t//         After merge:  <p>Foo[Bar]</p>\n\t\t\t\t// After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedInLeftElement = markerRange.start.parent == elementBefore && markerRange.start.isAtEnd;\n\n\t\t\t\t//               Start:  <p>[Foo</p><p>]Bar</p>\n\t\t\t\t//         After merge:  <p>[Foo]Bar</p>\n\t\t\t\t// After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedInRightElement = markerRange.end.parent == elementAfter && markerRange.end.offset == 0;\n\n\t\t\t\t//               Start:  <p>[Foo</p>]<p>Bar</p>\n\t\t\t\t//         After merge:  <p>[Foo]Bar</p>\n\t\t\t\t// After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedAfterLeftElement = markerRange.end.nodeAfter == elementAfter;\n\n\t\t\t\t//               Start:  <p>Foo</p>[<p>Bar]</p>\n\t\t\t\t//         After merge:  <p>Foo[Bar]</p>\n\t\t\t\t// After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedBeforeRightElement = markerRange.start.nodeAfter == elementAfter;\n\n\t\t\t\tisAffected = affectedInLeftElement || affectedInRightElement || affectedAfterLeftElement || affectedBeforeRightElement;\n\t\t\t}\n\n\t\t\tif ( isAffected ) {\n\t\t\t\tthis.updateMarker( marker.name, { range: markerRange } );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Sets given attribute to each node in given range. When attribute value is null then attribute will be removed.\n//\n// Because attribute operation needs to have the same attribute value on the whole range, this function splits\n// the range into smaller parts.\n//\n// Given `range` must be flat.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/range~Range} range Model range on which the attribute will be set.\nfunction setAttributeOnRange( writer, key, value, range ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\n\t// Position of the last split, the beginning of the new range.\n\tlet lastSplitPosition = range.start;\n\n\t// Currently position in the scanning range. Because we need value after the position, it is not a current\n\t// position of the iterator but the previous one (we need to iterate one more time to get the value after).\n\tlet position;\n\n\t// Value before the currently position.\n\tlet valueBefore;\n\n\t// Value after the currently position.\n\tlet valueAfter;\n\n\tfor ( const val of range.getWalker( { shallow: true } ) ) {\n\t\tvalueAfter = val.item.getAttribute( key );\n\n\t\t// At the first run of the iterator the position in undefined. We also do not have a valueBefore, but\n\t\t// because valueAfter may be null, valueBefore may be equal valueAfter ( undefined == null ).\n\t\tif ( position && valueBefore != valueAfter ) {\n\t\t\t// if valueBefore == value there is nothing to change, so we add operation only if these values are different.\n\t\t\tif ( valueBefore != value ) {\n\t\t\t\taddOperation();\n\t\t\t}\n\n\t\t\tlastSplitPosition = position;\n\t\t}\n\n\t\tposition = val.nextPosition;\n\t\tvalueBefore = valueAfter;\n\t}\n\n\t// Because position in the loop is not the iterator position (see let position comment), the last position in\n\t// the while loop will be last but one position in the range. We need to check the last position manually.\n\tif ( position instanceof Position && position != lastSplitPosition && valueBefore != value ) {\n\t\taddOperation();\n\t}\n\n\tfunction addOperation() {\n\t\tconst range = new Range( lastSplitPosition, position );\n\t\tconst version = range.root.document ? doc.version : null;\n\t\tconst operation = new AttributeOperation( range, key, valueBefore, value, version );\n\n\t\twriter.batch.addOperation( operation );\n\t\tmodel.applyOperation( operation );\n\t}\n}\n\n// Sets given attribute to the given node. When attribute value is null then attribute will be removed.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\nfunction setAttributeOnItem( writer, key, value, item ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\tconst previousValue = item.getAttribute( key );\n\tlet range, operation;\n\n\tif ( previousValue != value ) {\n\t\tconst isRootChanged = item.root === item;\n\n\t\tif ( isRootChanged ) {\n\t\t\t// If we change attributes of root element, we have to use `RootAttributeOperation`.\n\t\t\tconst version = item.document ? doc.version : null;\n\n\t\t\toperation = new RootAttributeOperation( item, key, previousValue, value, version );\n\t\t} else {\n\t\t\trange = new Range( Position._createBefore( item ), writer.createPositionAfter( item ) );\n\n\t\t\tconst version = range.root.document ? doc.version : null;\n\n\t\t\toperation = new AttributeOperation( range, key, previousValue, value, version );\n\t\t}\n\n\t\twriter.batch.addOperation( operation );\n\t\tmodel.applyOperation( operation );\n\t}\n}\n\n// Creates and applies marker operation to {@link module:engine/model/operation/operation~Operation operation}.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} name Marker name.\n// @param {module:engine/model/range~Range} oldRange Marker range before the change.\n// @param {module:engine/model/range~Range} newRange Marker range after the change.\n// @param {Boolean} affectsData\nfunction applyMarkerOperation( writer, name, oldRange, newRange, affectsData ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\n\tconst operation = new MarkerOperation( name, oldRange, newRange, model.markers, affectsData, doc.version );\n\n\twriter.batch.addOperation( operation );\n\tmodel.applyOperation( operation );\n}\n\n// Creates `MoveOperation` or `DetachOperation` that removes `howMany` nodes starting from `position`.\n// The operation will be applied on given model instance and added to given operation instance.\n//\n// @private\n// @param {module:engine/model/position~Position} position Position from which nodes are removed.\n// @param {Number} howMany Number of nodes to remove.\n// @param {Batch} batch Batch to which the operation will be added.\n// @param {module:engine/model/model~Model} model Model instance on which operation will be applied.\nfunction applyRemoveOperation( position, howMany, batch, model ) {\n\tlet operation;\n\n\tif ( position.root.document ) {\n\t\tconst doc = model.document;\n\t\tconst graveyardPosition = new Position( doc.graveyard, [ 0 ] );\n\n\t\toperation = new MoveOperation( position, howMany, graveyardPosition, doc.version );\n\t} else {\n\t\toperation = new DetachOperation( position, howMany );\n\t}\n\n\tbatch.addOperation( operation );\n\tmodel.applyOperation( operation );\n}\n\n// Returns `true` if both root elements are the same element or both are documents root elements.\n//\n// Elements in the same tree can be moved (for instance you can move element form one documents root to another, or\n// within the same document fragment), but when element supposed to be moved from document fragment to the document, or\n// to another document it should be removed and inserted to avoid problems with OT. This is because features like undo or\n// collaboration may track changes on the document but ignore changes on detached fragments and should not get\n// unexpected `move` operation.\nfunction isSameTree( rootA, rootB ) {\n\t// If it is the same root this is the same tree.\n\tif ( rootA === rootB ) {\n\t\treturn true;\n\t}\n\n\t// If both roots are documents root it is operation within the document what we still treat as the same tree.\n\tif ( rootA instanceof RootElement && rootB instanceof RootElement ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/differ\n */\n\nimport Position from './position';\nimport Range from './range';\n\n/**\n * Calculates the difference between two model states.\n *\n * Receives operations that are to be applied on the model document. Marks parts of the model document tree which\n * are changed and saves the state of these elements before the change. Then, it compares saved elements with the\n * changed elements, after all changes are applied on the model document. Calculates the diff between saved\n * elements and new ones and returns a change set.\n */\nexport default class Differ {\n\t/**\n\t * Creates a `Differ` instance.\n\t *\n\t * @param {module:engine/model/markercollection~MarkerCollection} markerCollection Model's marker collection.\n\t */\n\tconstructor( markerCollection ) {\n\t\t/**\n\t\t * Reference to the model's marker collection.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis._markerCollection = markerCollection;\n\n\t\t/**\n\t\t * A map that stores changes that happened in a given element.\n\t\t *\n\t\t * The keys of the map are references to the model elements.\n\t\t * The values of the map are arrays with changes that were done on this element.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._changesInElement = new Map();\n\n\t\t/**\n\t\t * A map that stores \"element's children snapshots\". A snapshot is representing children of a given element before\n\t\t * the first change was applied on that element. Snapshot items are objects with two properties: `name`,\n\t\t * containing the element name (or `'$text'` for a text node) and `attributes` which is a map of the node's attributes.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._elementSnapshots = new Map();\n\n\t\t/**\n\t\t * A map that stores all changed markers.\n\t\t *\n\t\t * The keys of the map are marker names.\n\t\t * The values of the map are objects with the `oldRange` and `newRange` properties. They store the marker range\n\t\t * state before and after the change.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._changedMarkers = new Map();\n\n\t\t/**\n\t\t * Stores the number of changes that were processed. Used to order the changes chronologically. It is important\n\t\t * when changes are sorted.\n\t\t *\n\t\t * @private\n\t\t * @type {Number}\n\t\t */\n\t\tthis._changeCount = 0;\n\n\t\t/**\n\t\t * For efficiency purposes, `Differ` stores the change set returned by the differ after {@link #getChanges} call.\n\t\t * Cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n\t\t * return the cached value instead of calculating it again.\n\t\t *\n\t\t * This property stores those changes that did not take place in graveyard root.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Object>|null}\n\t\t */\n\t\tthis._cachedChanges = null;\n\n\t\t/**\n\t\t * For efficiency purposes, `Differ` stores the change set returned by the differ after the {@link #getChanges} call.\n\t\t * The cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n\t\t * return the cached value instead of calculating it again.\n\t\t *\n\t\t * This property stores all changes evaluated by `Differ`, including those that took place in the graveyard.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Object>|null}\n\t\t */\n\t\tthis._cachedChangesWithGraveyard = null;\n\t}\n\n\t/**\n\t * Informs whether there are any changes buffered in `Differ`.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._changesInElement.size == 0 && this._changedMarkers.size == 0;\n\t}\n\n\t/**\n\t * Marks given `item` in differ to be \"refreshed\". It means that the item will be marked as removed and inserted in the differ changes\n\t * set, so it will be effectively re-converted when differ changes will be handled by a dispatcher.\n\t *\n\t * @param {module:engine/model/item~Item} item Item to refresh.\n\t */\n\trefreshItem( item ) {\n\t\tif ( this._isInInsertedElement( item.parent ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._markRemove( item.parent, item.startOffset, item.offsetSize );\n\t\tthis._markInsert( item.parent, item.startOffset, item.offsetSize );\n\n\t\tconst range = Range._createOn( item );\n\n\t\tfor ( const marker of this._markerCollection.getMarkersIntersectingRange( range ) ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tthis.bufferMarkerChange( marker.name, markerRange, markerRange, marker.affectsData );\n\t\t}\n\n\t\t// Clear cache after each buffered operation as it is no longer valid.\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Buffers the given operation. An operation has to be buffered before it is executed.\n\t *\n\t * Operation type is checked and it is checked which nodes it will affect. These nodes are then stored in `Differ`\n\t * in the state before the operation is executed.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation An operation to buffer.\n\t */\n\tbufferOperation( operation ) {\n\t\t// Below we take an operation, check its type, then use its parameters in marking (private) methods.\n\t\t// The general rule is to not mark elements inside inserted element. All inserted elements are re-rendered.\n\t\t// Marking changes in them would cause a \"double\" changing then.\n\t\t//\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert': {\n\t\t\t\tif ( this._isInInsertedElement( operation.position.parent ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._markInsert( operation.position.parent, operation.position.offset, operation.nodes.maxOffset );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'addAttribute':\n\t\t\tcase 'removeAttribute':\n\t\t\tcase 'changeAttribute': {\n\t\t\t\tfor ( const item of operation.range.getItems( { shallow: true } ) ) {\n\t\t\t\t\tif ( this._isInInsertedElement( item.parent ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._markAttribute( item );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'remove':\n\t\t\tcase 'move':\n\t\t\tcase 'reinsert': {\n\t\t\t\t// When range is moved to the same position then not mark it as a change.\n\t\t\t\t// See: https://github.com/ckeditor/ckeditor5-engine/issues/1664.\n\t\t\t\tif (\n\t\t\t\t\toperation.sourcePosition.isEqual( operation.targetPosition ) ||\n\t\t\t\t\toperation.sourcePosition.getShiftedBy( operation.howMany ).isEqual( operation.targetPosition )\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceParentInserted = this._isInInsertedElement( operation.sourcePosition.parent );\n\t\t\t\tconst targetParentInserted = this._isInInsertedElement( operation.targetPosition.parent );\n\n\t\t\t\tif ( !sourceParentInserted ) {\n\t\t\t\t\tthis._markRemove( operation.sourcePosition.parent, operation.sourcePosition.offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\tif ( !targetParentInserted ) {\n\t\t\t\t\tthis._markInsert( operation.targetPosition.parent, operation.getMovedRangeStart().offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'rename': {\n\t\t\t\tif ( this._isInInsertedElement( operation.position.parent ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._markRemove( operation.position.parent, operation.position.offset, 1 );\n\t\t\t\tthis._markInsert( operation.position.parent, operation.position.offset, 1 );\n\n\t\t\t\tconst range = Range._createFromPositionAndShift( operation.position, 1 );\n\n\t\t\t\tfor ( const marker of this._markerCollection.getMarkersIntersectingRange( range ) ) {\n\t\t\t\t\tconst markerRange = marker.getRange();\n\n\t\t\t\t\tthis.bufferMarkerChange( marker.name, markerRange, markerRange, marker.affectsData );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'split': {\n\t\t\t\tconst splitElement = operation.splitPosition.parent;\n\n\t\t\t\t// Mark that children of the split element were removed.\n\t\t\t\tif ( !this._isInInsertedElement( splitElement ) ) {\n\t\t\t\t\tthis._markRemove( splitElement, operation.splitPosition.offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\t// Mark that the new element (split copy) was inserted.\n\t\t\t\tif ( !this._isInInsertedElement( operation.insertionPosition.parent ) ) {\n\t\t\t\t\tthis._markInsert( operation.insertionPosition.parent, operation.insertionPosition.offset, 1 );\n\t\t\t\t}\n\n\t\t\t\t// If the split took the element from the graveyard, mark that the element from the graveyard was removed.\n\t\t\t\tif ( operation.graveyardPosition ) {\n\t\t\t\t\tthis._markRemove( operation.graveyardPosition.parent, operation.graveyardPosition.offset, 1 );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'merge': {\n\t\t\t\t// Mark that the merged element was removed.\n\t\t\t\tconst mergedElement = operation.sourcePosition.parent;\n\n\t\t\t\tif ( !this._isInInsertedElement( mergedElement.parent ) ) {\n\t\t\t\t\tthis._markRemove( mergedElement.parent, mergedElement.startOffset, 1 );\n\t\t\t\t}\n\n\t\t\t\t// Mark that the merged element was inserted into graveyard.\n\t\t\t\tconst graveyardParent = operation.graveyardPosition.parent;\n\n\t\t\t\tthis._markInsert( graveyardParent, operation.graveyardPosition.offset, 1 );\n\n\t\t\t\t// Mark that children of merged element were inserted at new parent.\n\t\t\t\tconst mergedIntoElement = operation.targetPosition.parent;\n\n\t\t\t\tif ( !this._isInInsertedElement( mergedIntoElement ) ) {\n\t\t\t\t\tthis._markInsert( mergedIntoElement, operation.targetPosition.offset, mergedElement.maxOffset );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Clear cache after each buffered operation as it is no longer valid.\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Buffers a marker change.\n\t *\n\t * @param {String} markerName The name of the marker that changed.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the change or `null` if the marker has just\n\t * been created.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after the change or `null` if the marker was removed.\n\t * @param {Boolean} affectsData Flag indicating whether marker affects the editor data.\n\t */\n\tbufferMarkerChange( markerName, oldRange, newRange, affectsData ) {\n\t\tconst buffered = this._changedMarkers.get( markerName );\n\n\t\tif ( !buffered ) {\n\t\t\tthis._changedMarkers.set( markerName, {\n\t\t\t\toldRange,\n\t\t\t\tnewRange,\n\t\t\t\taffectsData\n\t\t\t} );\n\t\t} else {\n\t\t\tbuffered.newRange = newRange;\n\t\t\tbuffered.affectsData = affectsData;\n\n\t\t\tif ( buffered.oldRange == null && buffered.newRange == null ) {\n\t\t\t\t// The marker is going to be removed (`newRange == null`) but it did not exist before the first buffered change\n\t\t\t\t// (`buffered.oldRange == null`). In this case, do not keep the marker in buffer at all.\n\t\t\t\tthis._changedMarkers.delete( markerName );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns all markers that should be removed as a result of buffered changes.\n\t *\n\t * @returns {Array.<Object>} Markers to remove. Each array item is an object containing the `name` and `range` properties.\n\t */\n\tgetMarkersToRemove() {\n\t\tconst result = [];\n\n\t\tfor ( const [ name, change ] of this._changedMarkers ) {\n\t\t\tif ( change.oldRange != null ) {\n\t\t\t\tresult.push( { name, range: change.oldRange } );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns all markers which should be added as a result of buffered changes.\n\t *\n\t * @returns {Array.<Object>} Markers to add. Each array item is an object containing the `name` and `range` properties.\n\t */\n\tgetMarkersToAdd() {\n\t\tconst result = [];\n\n\t\tfor ( const [ name, change ] of this._changedMarkers ) {\n\t\t\tif ( change.newRange != null ) {\n\t\t\t\tresult.push( { name, range: change.newRange } );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns all markers which changed.\n\t *\n\t * @returns {Array.<Object>}\n\t */\n\tgetChangedMarkers() {\n\t\treturn Array.from( this._changedMarkers ).map( item => (\n\t\t\t{\n\t\t\t\tname: item[ 0 ],\n\t\t\t\tdata: {\n\t\t\t\t\toldRange: item[ 1 ].oldRange,\n\t\t\t\t\tnewRange: item[ 1 ].newRange\n\t\t\t\t}\n\t\t\t}\n\t\t) );\n\t}\n\n\t/**\n\t * Checks whether some of the buffered changes affect the editor data.\n\t *\n\t * Types of changes which affect the editor data:\n\t *\n\t * * model structure changes,\n\t * * attribute changes,\n\t * * changes of markers which were defined as `affectingData`.\n\t *\n\t * @returns {Boolean}\n\t */\n\thasDataChanges() {\n\t\tfor ( const [ , change ] of this._changedMarkers ) {\n\t\t\tif ( change.affectsData ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// If markers do not affect the data, check whether there are some changes in elements.\n\t\treturn this._changesInElement.size > 0;\n\t}\n\n\t/**\n\t * Calculates the diff between the old model tree state (the state before the first buffered operations since the last {@link #reset}\n\t * call) and the new model tree state (actual one). It should be called after all buffered operations are executed.\n\t *\n\t * The diff set is returned as an array of diff items, each describing a change done on the model. The items are sorted by\n\t * the position on which the change happened. If a position {@link module:engine/model/position~Position#isBefore is before}\n\t * another one, it will be on an earlier index in the diff set.\n\t *\n\t * Because calculating the diff is a costly operation, the result is cached. If no new operation was buffered since the\n\t * previous {@link #getChanges} call, the next call will return the cached value.\n\t *\n\t * @param {Object} options Additional options.\n\t * @param {Boolean} [options.includeChangesInGraveyard=false] If set to `true`, also changes that happened\n\t * in the graveyard root will be returned. By default, changes in the graveyard root are not returned.\n\t * @returns {Array.<Object>} Diff between the old and the new model tree state.\n\t */\n\tgetChanges( options = { includeChangesInGraveyard: false } ) {\n\t\t// If there are cached changes, just return them instead of calculating changes again.\n\t\tif ( this._cachedChanges ) {\n\t\t\tif ( options.includeChangesInGraveyard ) {\n\t\t\t\treturn this._cachedChangesWithGraveyard.slice();\n\t\t\t} else {\n\t\t\t\treturn this._cachedChanges.slice();\n\t\t\t}\n\t\t}\n\n\t\t// Will contain returned results.\n\t\tconst diffSet = [];\n\n\t\t// Check all changed elements.\n\t\tfor ( const element of this._changesInElement.keys() ) {\n\t\t\t// Get changes for this element and sort them.\n\t\t\tconst changes = this._changesInElement.get( element ).sort( ( a, b ) => {\n\t\t\t\tif ( a.offset === b.offset ) {\n\t\t\t\t\tif ( a.type != b.type ) {\n\t\t\t\t\t\t// If there are multiple changes at the same position, \"remove\" change should be first.\n\t\t\t\t\t\t// If the order is different, for example, we would first add some nodes and then removed them\n\t\t\t\t\t\t// (instead of the nodes that we should remove).\n\t\t\t\t\t\treturn a.type == 'remove' ? -1 : 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn a.offset < b.offset ? -1 : 1;\n\t\t\t} );\n\n\t\t\t// Get children of this element before any change was applied on it.\n\t\t\tconst snapshotChildren = this._elementSnapshots.get( element );\n\t\t\t// Get snapshot of current element's children.\n\t\t\tconst elementChildren = _getChildrenSnapshot( element.getChildren() );\n\n\t\t\t// Generate actions basing on changes done on element.\n\t\t\tconst actions = _generateActionsFromChanges( snapshotChildren.length, changes );\n\n\t\t\tlet i = 0; // Iterator in `elementChildren` array -- iterates through current children of element.\n\t\t\tlet j = 0; // Iterator in `snapshotChildren` array -- iterates through old children of element.\n\n\t\t\t// Process every action.\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action === 'i' ) {\n\t\t\t\t\t// Generate diff item for this element and insert it into the diff set.\n\t\t\t\t\tdiffSet.push( this._getInsertDiff( element, i, elementChildren[ i ].name ) );\n\n\t\t\t\t\ti++;\n\t\t\t\t} else if ( action === 'r' ) {\n\t\t\t\t\t// Generate diff item for this element and insert it into the diff set.\n\t\t\t\t\tdiffSet.push( this._getRemoveDiff( element, i, snapshotChildren[ j ].name ) );\n\n\t\t\t\t\tj++;\n\t\t\t\t} else if ( action === 'a' ) {\n\t\t\t\t\t// Take attributes from saved and current children.\n\t\t\t\t\tconst elementAttributes = elementChildren[ i ].attributes;\n\t\t\t\t\tconst snapshotAttributes = snapshotChildren[ j ].attributes;\n\t\t\t\t\tlet range;\n\n\t\t\t\t\tif ( elementChildren[ i ].name == '$text' ) {\n\t\t\t\t\t\trange = new Range( Position._createAt( element, i ), Position._createAt( element, i + 1 ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst index = element.offsetToIndex( i );\n\t\t\t\t\t\trange = new Range( Position._createAt( element, i ), Position._createAt( element.getChild( index ), 0 ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Generate diff items for this change (there might be multiple attributes changed and\n\t\t\t\t\t// there is a single diff for each of them) and insert them into the diff set.\n\t\t\t\t\tdiffSet.push( ...this._getAttributesDiff( range, snapshotAttributes, elementAttributes ) );\n\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\t// `action` is 'equal'. Child not changed.\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Then, sort the changes by the position (change at position before other changes is first).\n\t\tdiffSet.sort( ( a, b ) => {\n\t\t\t// If the change is in different root, we don't care much, but we'd like to have all changes in given\n\t\t\t// root \"together\" in the array. So let's just sort them by the root name. It does not matter which root\n\t\t\t// will be processed first.\n\t\t\tif ( a.position.root != b.position.root ) {\n\t\t\t\treturn a.position.root.rootName < b.position.root.rootName ? -1 : 1;\n\t\t\t}\n\n\t\t\t// If change happens at the same position...\n\t\t\tif ( a.position.isEqual( b.position ) ) {\n\t\t\t\t// Keep chronological order of operations.\n\t\t\t\treturn a.changeCount - b.changeCount;\n\t\t\t}\n\n\t\t\t// If positions differ, position \"on the left\" should be earlier in the result.\n\t\t\treturn a.position.isBefore( b.position ) ? -1 : 1;\n\t\t} );\n\n\t\t// Glue together multiple changes (mostly on text nodes).\n\t\tfor ( let i = 1; i < diffSet.length; i++ ) {\n\t\t\tconst prevDiff = diffSet[ i - 1 ];\n\t\t\tconst thisDiff = diffSet[ i ];\n\n\t\t\t// Glue remove changes if they happen on text on same position.\n\t\t\tconst isConsecutiveTextRemove =\n\t\t\t\tprevDiff.type == 'remove' && thisDiff.type == 'remove' &&\n\t\t\t\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\n\t\t\t\tprevDiff.position.isEqual( thisDiff.position );\n\n\t\t\t// Glue insert changes if they happen on text on consecutive fragments.\n\t\t\tconst isConsecutiveTextAdd =\n\t\t\t\tprevDiff.type == 'insert' && thisDiff.type == 'insert' &&\n\t\t\t\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\n\t\t\t\tprevDiff.position.parent == thisDiff.position.parent &&\n\t\t\t\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset;\n\n\t\t\t// Glue attribute changes if they happen on consecutive fragments and have same key, old value and new value.\n\t\t\tconst isConsecutiveAttributeChange =\n\t\t\t\tprevDiff.type == 'attribute' && thisDiff.type == 'attribute' &&\n\t\t\t\tprevDiff.position.parent == thisDiff.position.parent &&\n\t\t\t\tprevDiff.range.isFlat && thisDiff.range.isFlat &&\n\t\t\t\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset &&\n\t\t\t\tprevDiff.attributeKey == thisDiff.attributeKey &&\n\t\t\t\tprevDiff.attributeOldValue == thisDiff.attributeOldValue &&\n\t\t\t\tprevDiff.attributeNewValue == thisDiff.attributeNewValue;\n\n\t\t\tif ( isConsecutiveTextRemove || isConsecutiveTextAdd || isConsecutiveAttributeChange ) {\n\t\t\t\tdiffSet[ i - 1 ].length++;\n\n\t\t\t\tif ( isConsecutiveAttributeChange ) {\n\t\t\t\t\tdiffSet[ i - 1 ].range.end = diffSet[ i - 1 ].range.end.getShiftedBy( 1 );\n\t\t\t\t}\n\n\t\t\t\tdiffSet.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\n\t\t// Remove `changeCount` property from diff items. It is used only for sorting and is internal thing.\n\t\tfor ( const item of diffSet ) {\n\t\t\tdelete item.changeCount;\n\n\t\t\tif ( item.type == 'attribute' ) {\n\t\t\t\tdelete item.position;\n\t\t\t\tdelete item.length;\n\t\t\t}\n\t\t}\n\n\t\tthis._changeCount = 0;\n\n\t\t// Cache changes.\n\t\tthis._cachedChangesWithGraveyard = diffSet.slice();\n\t\tthis._cachedChanges = diffSet.slice().filter( _changesInGraveyardFilter );\n\n\t\tif ( options.includeChangesInGraveyard ) {\n\t\t\treturn this._cachedChangesWithGraveyard;\n\t\t} else {\n\t\t\treturn this._cachedChanges;\n\t\t}\n\t}\n\n\t/**\n\t * Resets `Differ`. Removes all buffered changes.\n\t */\n\treset() {\n\t\tthis._changesInElement.clear();\n\t\tthis._elementSnapshots.clear();\n\t\tthis._changedMarkers.clear();\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Saves and handles an insert change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_markInsert( parent, offset, howMany ) {\n\t\tconst changeItem = { type: 'insert', offset, howMany, count: this._changeCount++ };\n\n\t\tthis._markChange( parent, changeItem );\n\t}\n\n\t/**\n\t * Saves and handles a remove change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_markRemove( parent, offset, howMany ) {\n\t\tconst changeItem = { type: 'remove', offset, howMany, count: this._changeCount++ };\n\n\t\tthis._markChange( parent, changeItem );\n\n\t\tthis._removeAllNestedChanges( parent, offset, howMany );\n\t}\n\n\t/**\n\t * Saves and handles an attribute change.\n\t *\n\t * @private\n\t * @param {module:engine/model/item~Item} item\n\t */\n\t_markAttribute( item ) {\n\t\tconst changeItem = { type: 'attribute', offset: item.startOffset, howMany: item.offsetSize, count: this._changeCount++ };\n\n\t\tthis._markChange( item.parent, changeItem );\n\t}\n\n\t/**\n\t * Saves and handles a model change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Object} changeItem\n\t */\n\t_markChange( parent, changeItem ) {\n\t\t// First, make a snapshot of this parent's children (it will be made only if it was not made before).\n\t\tthis._makeSnapshot( parent );\n\n\t\t// Then, get all changes that already were done on the element (empty array if this is the first change).\n\t\tconst changes = this._getChangesForElement( parent );\n\n\t\t// Then, look through all the changes, and transform them or the new change.\n\t\tthis._handleChange( changeItem, changes );\n\n\t\t// Add the new change.\n\t\tchanges.push( changeItem );\n\n\t\t// Remove incorrect changes. During transformation some change might be, for example, included in another.\n\t\t// In that case, the change will have `howMany` property set to `0` or less. We need to remove those changes.\n\t\tfor ( let i = 0; i < changes.length; i++ ) {\n\t\t\tif ( changes[ i ].howMany < 1 ) {\n\t\t\t\tchanges.splice( i, 1 );\n\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets an array of changes that have already been saved for a given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {Array.<Object>}\n\t */\n\t_getChangesForElement( element ) {\n\t\tlet changes;\n\n\t\tif ( this._changesInElement.has( element ) ) {\n\t\t\tchanges = this._changesInElement.get( element );\n\t\t} else {\n\t\t\tchanges = [];\n\n\t\t\tthis._changesInElement.set( element, changes );\n\t\t}\n\n\t\treturn changes;\n\t}\n\n\t/**\n\t * Saves a children snapshot for a given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t */\n\t_makeSnapshot( element ) {\n\t\tif ( !this._elementSnapshots.has( element ) ) {\n\t\t\tthis._elementSnapshots.set( element, _getChildrenSnapshot( element.getChildren() ) );\n\t\t}\n\t}\n\n\t/**\n\t * For a given newly saved change, compares it with a change already done on the element and modifies the incoming\n\t * change and/or the old change.\n\t *\n\t * @private\n\t * @param {Object} inc Incoming (new) change.\n\t * @param {Array.<Object>} changes An array containing all the changes done on that element.\n\t */\n\t_handleChange( inc, changes ) {\n\t\t// We need a helper variable that will store how many nodes are to be still handled for this change item.\n\t\t// `nodesToHandle` (how many nodes still need to be handled) and `howMany` (how many nodes were affected)\n\t\t// needs to be differentiated.\n\t\t//\n\t\t// This comes up when there are multiple changes that are affected by `inc` change item.\n\t\t//\n\t\t// For example: assume two insert changes: `{ offset: 2, howMany: 1 }` and `{ offset: 5, howMany: 1 }`.\n\t\t// Assume that `inc` change is remove `{ offset: 2, howMany: 2, nodesToHandle: 2 }`.\n\t\t//\n\t\t// Then, we:\n\t\t// - \"forget\" about first insert change (it is \"eaten\" by remove),\n\t\t// - because of that, at the end we will want to remove only one node (`nodesToHandle = 1`),\n\t\t// - but still we have to change offset of the second insert change from `5` to `3`!\n\t\t//\n\t\t// So, `howMany` does not change throughout items transformation and keeps information about how many nodes were affected,\n\t\t// while `nodesToHandle` means how many nodes need to be handled after the change item is transformed by other changes.\n\t\tinc.nodesToHandle = inc.howMany;\n\n\t\tfor ( const old of changes ) {\n\t\t\tconst incEnd = inc.offset + inc.howMany;\n\t\t\tconst oldEnd = old.offset + old.howMany;\n\n\t\t\tif ( inc.type == 'insert' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\told.howMany += inc.nodesToHandle;\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\tif ( inc.offset < old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\t// This case is more complicated, because attribute change has to be split into two.\n\t\t\t\t\t\t// Example (assume that uppercase and lowercase letters mean different attributes):\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// initial state:\t\tabcxyz\n\t\t\t\t\t\t// attribute change:\taBCXYz\n\t\t\t\t\t\t// incoming insert:\t\taBCfooXYz\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Change ranges cannot intersect because each item has to be described exactly (it was either\n\t\t\t\t\t\t// not changed, inserted, removed, or its attribute was changed). That's why old attribute\n\t\t\t\t\t\t// change has to be split and both parts has to be handled separately from now on.\n\t\t\t\t\t\tconst howMany = old.howMany;\n\n\t\t\t\t\t\told.howMany = inc.offset - old.offset;\n\n\t\t\t\t\t\t// Add the second part of attribute change to the beginning of processed array so it won't\n\t\t\t\t\t\t// be processed again in this loop.\n\t\t\t\t\t\tchanges.unshift( {\n\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\toffset: incEnd,\n\t\t\t\t\t\t\thowMany: howMany - old.howMany,\n\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( inc.type == 'remove' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( incEnd <= oldEnd ) {\n\t\t\t\t\t\tif ( inc.offset < old.offset ) {\n\t\t\t\t\t\t\tconst intersectionLength = incEnd - old.offset;\n\n\t\t\t\t\t\t\told.offset = inc.offset;\n\n\t\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t\t\tinc.nodesToHandle -= intersectionLength;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\told.howMany -= inc.nodesToHandle;\n\t\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\t\tinc.nodesToHandle -= old.howMany;\n\t\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\t\tconst intersectionLength = oldEnd - inc.offset;\n\n\t\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t\t\tinc.nodesToHandle -= intersectionLength;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < old.offset ) {\n\t\t\t\t\t\tinc.nodesToHandle += old.howMany;\n\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < old.offset ) {\n\t\t\t\t\t\tconst intersectionLength = incEnd - old.offset;\n\n\t\t\t\t\t\told.offset = inc.offset;\n\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\tif ( incEnd <= oldEnd ) {\n\t\t\t\t\t\t\t// On first sight in this case we don't need to split attribute operation into two.\n\t\t\t\t\t\t\t// However the changes set is later converted to actions (see `_generateActionsFromChanges`).\n\t\t\t\t\t\t\t// For that reason, no two changes may intersect.\n\t\t\t\t\t\t\t// So we cannot have an attribute change that \"contains\" remove change.\n\t\t\t\t\t\t\t// Attribute change needs to be split.\n\t\t\t\t\t\t\tconst howMany = old.howMany;\n\n\t\t\t\t\t\t\told.howMany = inc.offset - old.offset;\n\n\t\t\t\t\t\t\tconst howManyAfter = howMany - old.howMany - inc.nodesToHandle;\n\n\t\t\t\t\t\t\t// Add the second part of attribute change to the beginning of processed array so it won't\n\t\t\t\t\t\t\t// be processed again in this loop.\n\t\t\t\t\t\t\tchanges.unshift( {\n\t\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\t\toffset: inc.offset,\n\t\t\t\t\t\t\t\thowMany: howManyAfter,\n\t\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\told.howMany -= oldEnd - inc.offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( inc.type == 'attribute' ) {\n\t\t\t\t// In case of attribute change, `howMany` should be kept same as `nodesToHandle`. It's not an error.\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( inc.offset < old.offset && incEnd > old.offset ) {\n\t\t\t\t\t\tif ( incEnd > oldEnd ) {\n\t\t\t\t\t\t\t// This case is similar to a case described when incoming change was insert and old change was attribute.\n\t\t\t\t\t\t\t// See comment above.\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// This time incoming change is attribute. We need to split incoming change in this case too.\n\t\t\t\t\t\t\t// However this time, the second part of the attribute change needs to be processed further\n\t\t\t\t\t\t\t// because there might be other changes that it collides with.\n\t\t\t\t\t\t\tconst attributePart = {\n\t\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\t\toffset: oldEnd,\n\t\t\t\t\t\t\t\thowMany: incEnd - oldEnd,\n\t\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tthis._handleChange( attributePart, changes );\n\n\t\t\t\t\t\t\tchanges.push( attributePart );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tinc.nodesToHandle = old.offset - inc.offset;\n\t\t\t\t\t\tinc.howMany = inc.nodesToHandle;\n\t\t\t\t\t} else if ( inc.offset >= old.offset && inc.offset < oldEnd ) {\n\t\t\t\t\t\tif ( incEnd > oldEnd ) {\n\t\t\t\t\t\t\tinc.nodesToHandle = incEnd - oldEnd;\n\t\t\t\t\t\t\tinc.offset = oldEnd;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\t// This is a case when attribute change \"contains\" remove change.\n\t\t\t\t\t// The attribute change needs to be split into two because changes cannot intersect.\n\t\t\t\t\tif ( inc.offset < old.offset && incEnd > old.offset ) {\n\t\t\t\t\t\tconst attributePart = {\n\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\toffset: old.offset,\n\t\t\t\t\t\t\thowMany: incEnd - old.offset,\n\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis._handleChange( attributePart, changes );\n\n\t\t\t\t\t\tchanges.push( attributePart );\n\n\t\t\t\t\t\tinc.nodesToHandle = old.offset - inc.offset;\n\t\t\t\t\t\tinc.howMany = inc.nodesToHandle;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\t// There are only two conflicting scenarios possible here:\n\t\t\t\t\tif ( inc.offset >= old.offset && incEnd <= oldEnd ) {\n\t\t\t\t\t\t// `old` change includes `inc` change, or they are the same.\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\tinc.howMany = 0;\n\t\t\t\t\t\tinc.offset = 0;\n\t\t\t\t\t} else if ( inc.offset <= old.offset && incEnd >= oldEnd ) {\n\t\t\t\t\t\t// `inc` change includes `old` change.\n\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinc.howMany = inc.nodesToHandle;\n\t\tdelete inc.nodesToHandle;\n\t}\n\n\t/**\n\t * Returns an object with a single insert change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent The element in which the change happened.\n\t * @param {Number} offset The offset at which change happened.\n\t * @param {String} name The name of the removed element or `'$text'` for a character.\n\t * @returns {Object} The diff item.\n\t */\n\t_getInsertDiff( parent, offset, name ) {\n\t\treturn {\n\t\t\ttype: 'insert',\n\t\t\tposition: Position._createAt( parent, offset ),\n\t\t\tname,\n\t\t\tlength: 1,\n\t\t\tchangeCount: this._changeCount++\n\t\t};\n\t}\n\n\t/**\n\t * Returns an object with a single remove change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent The element in which change happened.\n\t * @param {Number} offset The offset at which change happened.\n\t * @param {String} name The name of the removed element or `'$text'` for a character.\n\t * @returns {Object} The diff item.\n\t */\n\t_getRemoveDiff( parent, offset, name ) {\n\t\treturn {\n\t\t\ttype: 'remove',\n\t\t\tposition: Position._createAt( parent, offset ),\n\t\t\tname,\n\t\t\tlength: 1,\n\t\t\tchangeCount: this._changeCount++\n\t\t};\n\t}\n\n\t/**\n\t * Returns an array of objects where each one is a single attribute change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range The range where the change happened.\n\t * @param {Map} oldAttributes A map, map iterator or compatible object that contains attributes before the change.\n\t * @param {Map} newAttributes A map, map iterator or compatible object that contains attributes after the change.\n\t * @returns {Array.<Object>} An array containing one or more diff items.\n\t */\n\t_getAttributesDiff( range, oldAttributes, newAttributes ) {\n\t\t// Results holder.\n\t\tconst diffs = [];\n\n\t\t// Clone new attributes as we will be performing changes on this object.\n\t\tnewAttributes = new Map( newAttributes );\n\n\t\t// Look through old attributes.\n\t\tfor ( const [ key, oldValue ] of oldAttributes ) {\n\t\t\t// Check what is the new value of the attribute (or if it was removed).\n\t\t\tconst newValue = newAttributes.has( key ) ? newAttributes.get( key ) : null;\n\n\t\t\t// If values are different (or attribute was removed)...\n\t\t\tif ( newValue !== oldValue ) {\n\t\t\t\t// Add diff item.\n\t\t\t\tdiffs.push( {\n\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\tposition: range.start,\n\t\t\t\t\trange: range.clone(),\n\t\t\t\t\tlength: 1,\n\t\t\t\t\tattributeKey: key,\n\t\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\t\tattributeNewValue: newValue,\n\t\t\t\t\tchangeCount: this._changeCount++\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Prevent returning two diff items for the same change.\n\t\t\tnewAttributes.delete( key );\n\t\t}\n\n\t\t// Look through new attributes that weren't handled above.\n\t\tfor ( const [ key, newValue ] of newAttributes ) {\n\t\t\t// Each of them is a new attribute. Add diff item.\n\t\t\tdiffs.push( {\n\t\t\t\ttype: 'attribute',\n\t\t\t\tposition: range.start,\n\t\t\t\trange: range.clone(),\n\t\t\t\tlength: 1,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: newValue,\n\t\t\t\tchangeCount: this._changeCount++\n\t\t\t} );\n\t\t}\n\n\t\treturn diffs;\n\t}\n\n\t/**\n\t * Checks whether given element or any of its parents is an element that is buffered as an inserted element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element Element to check.\n\t * @returns {Boolean}\n\t */\n\t_isInInsertedElement( element ) {\n\t\tconst parent = element.parent;\n\n\t\tif ( !parent ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst changes = this._changesInElement.get( parent );\n\t\tconst offset = element.startOffset;\n\n\t\tif ( changes ) {\n\t\t\tfor ( const change of changes ) {\n\t\t\t\tif ( change.type == 'insert' && offset >= change.offset && offset < change.offset + change.howMany ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._isInInsertedElement( parent );\n\t}\n\n\t/**\n\t * Removes deeply all buffered changes that are registered in elements from range specified by `parent`, `offset`\n\t * and `howMany`.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_removeAllNestedChanges( parent, offset, howMany ) {\n\t\tconst range = new Range( Position._createAt( parent, offset ), Position._createAt( parent, offset + howMany ) );\n\n\t\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\tthis._elementSnapshots.delete( item );\n\t\t\t\tthis._changesInElement.delete( item );\n\n\t\t\t\tthis._removeAllNestedChanges( item, 0, item.maxOffset );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Returns an array that is a copy of passed child list with the exception that text nodes are split to one or more\n// objects, each representing one character and attributes set on that character.\nfunction _getChildrenSnapshot( children ) {\n\tconst snapshot = [];\n\n\tfor ( const child of children ) {\n\t\tif ( child.is( 'text' ) ) {\n\t\t\tfor ( let i = 0; i < child.data.length; i++ ) {\n\t\t\t\tsnapshot.push( {\n\t\t\t\t\tname: '$text',\n\t\t\t\t\tattributes: new Map( child.getAttributes() )\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\t\t\tsnapshot.push( {\n\t\t\t\tname: child.name,\n\t\t\t\tattributes: new Map( child.getAttributes() )\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn snapshot;\n}\n\n// Generates array of actions for given changes set.\n// It simulates what `diff` function does.\n// Generated actions are:\n// - 'e' for 'equal' - when item at that position did not change,\n// - 'i' for 'insert' - when item at that position was inserted,\n// - 'r' for 'remove' - when item at that position was removed,\n// - 'a' for 'attribute' - when item at that position has it attributes changed.\n//\n// Example (assume that uppercase letters have bold attribute, compare with function code):\n//\n// children before:\tfooBAR\n// children after:\tfoxybAR\n//\n// changes: type: remove, offset: 1, howMany: 1\n//\t\t\ttype: insert, offset: 2, howMany: 2\n//\t\t\ttype: attribute, offset: 4, howMany: 1\n//\n// expected actions: equal (f), remove (o), equal (o), insert (x), insert (y), attribute (b), equal (A), equal (R)\n//\n// steps taken by th script:\n//\n// 1. change = \"type: remove, offset: 1, howMany: 1\"; offset = 0; oldChildrenHandled = 0\n//    1.1 between this change and the beginning is one not-changed node, fill with one equal action, one old child has been handled\n//    1.2 this change removes one node, add one remove action\n//    1.3 change last visited `offset` to 1\n//    1.4 since an old child has been removed, one more old child has been handled\n//    1.5 actions at this point are: equal, remove\n//\n// 2. change = \"type: insert, offset: 2, howMany: 2\"; offset = 1; oldChildrenHandled = 2\n//    2.1 between this change and previous change is one not-changed node, add equal action, another one old children has been handled\n//    2.2 this change inserts two nodes, add two insert actions\n//    2.3 change last visited offset to the end of the inserted range, that is 4\n//    2.4 actions at this point are: equal, remove, equal, insert, insert\n//\n// 3. change = \"type: attribute, offset: 4, howMany: 1\"; offset = 4, oldChildrenHandled = 3\n//    3.1 between this change and previous change are no not-changed nodes\n//    3.2 this change changes one node, add one attribute action\n//    3.3 change last visited `offset` to the end of change range, that is 5\n//    3.4 since an old child has been changed, one more old child has been handled\n//    3.5 actions at this point are: equal, remove, equal, insert, insert, attribute\n//\n// 4. after loop oldChildrenHandled = 4, oldChildrenLength = 6 (fooBAR is 6 characters)\n//    4.1 fill up with two equal actions\n//\n// The result actions are: equal, remove, equal, insert, insert, attribute, equal, equal.\nfunction _generateActionsFromChanges( oldChildrenLength, changes ) {\n\tconst actions = [];\n\n\tlet offset = 0;\n\tlet oldChildrenHandled = 0;\n\n\t// Go through all buffered changes.\n\tfor ( const change of changes ) {\n\t\t// First, fill \"holes\" between changes with \"equal\" actions.\n\t\tif ( change.offset > offset ) {\n\t\t\tfor ( let i = 0; i < change.offset - offset; i++ ) {\n\t\t\t\tactions.push( 'e' );\n\t\t\t}\n\n\t\t\toldChildrenHandled += change.offset - offset;\n\t\t}\n\n\t\t// Then, fill up actions accordingly to change type.\n\t\tif ( change.type == 'insert' ) {\n\t\t\tfor ( let i = 0; i < change.howMany; i++ ) {\n\t\t\t\tactions.push( 'i' );\n\t\t\t}\n\n\t\t\t// The last handled offset is after inserted range.\n\t\t\toffset = change.offset + change.howMany;\n\t\t} else if ( change.type == 'remove' ) {\n\t\t\tfor ( let i = 0; i < change.howMany; i++ ) {\n\t\t\t\tactions.push( 'r' );\n\t\t\t}\n\n\t\t\t// The last handled offset is at the position where the nodes were removed.\n\t\t\toffset = change.offset;\n\t\t\t// We removed `howMany` old nodes, update `oldChildrenHandled`.\n\t\t\toldChildrenHandled += change.howMany;\n\t\t} else {\n\t\t\tactions.push( ...'a'.repeat( change.howMany ).split( '' ) );\n\n\t\t\t// The last handled offset is at the position after the changed range.\n\t\t\toffset = change.offset + change.howMany;\n\t\t\t// We changed `howMany` old nodes, update `oldChildrenHandled`.\n\t\t\toldChildrenHandled += change.howMany;\n\t\t}\n\t}\n\n\t// Fill \"equal\" actions at the end of actions set. Use `oldChildrenHandled` to see how many children\n\t// has not been changed / removed at the end of their parent.\n\tif ( oldChildrenHandled < oldChildrenLength ) {\n\t\tfor ( let i = 0; i < oldChildrenLength - oldChildrenHandled - offset; i++ ) {\n\t\t\tactions.push( 'e' );\n\t\t}\n\t}\n\n\treturn actions;\n}\n\n// Filter callback for Array.filter that filters out change entries that are in graveyard.\nfunction _changesInGraveyardFilter( entry ) {\n\tconst posInGy = entry.position && entry.position.root.rootName == '$graveyard';\n\tconst rangeInGy = entry.range && entry.range.root.rootName == '$graveyard';\n\n\treturn !posInGy && !rangeInGy;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/history\n */\n\n/**\n * `History` keeps the track of all the operations applied to the {@link module:engine/model/document~Document document}.\n */\nexport default class History {\n\t/**\n\t * Creates an empty History instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Operations added to the history.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/model/operation/operation~Operation>} module:engine/model/history~History#_operations\n\t\t */\n\t\tthis._operations = [];\n\n\t\t/**\n\t\t * Holds an information which {@link module:engine/model/operation/operation~Operation operation} undoes which\n\t\t * {@link module:engine/model/operation/operation~Operation operation}.\n\t\t *\n\t\t * Keys of the map are \"undoing operations\", that is operations that undone some other operations. For each key, the\n\t\t * value is an operation that has been undone by the \"undoing operation\".\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/model/history~History#_undoPairs\n\t\t */\n\t\tthis._undoPairs = new Map();\n\n\t\t/**\n\t\t * Holds all undone operations.\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<module:engine/model/operation/operation~Operation>} module:engine/model/history~History#_undoneOperations\n\t\t */\n\t\tthis._undoneOperations = new Set();\n\t}\n\n\t/**\n\t * Adds an operation to the history.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to add.\n\t */\n\taddOperation( operation ) {\n\t\tif ( this._operations.includes( operation ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._operations.push( operation );\n\t}\n\n\t/**\n\t * Returns operations added to the history.\n\t *\n\t * @param {Number} [from=0] Base version from which operations should be returned (inclusive). Defaults to `0`, which means\n\t * that operations from the first one will be returned.\n\t * @param {Number} [to=Number.POSITIVE_INFINITY] Base version up to which operations should be returned (exclusive).\n\t * Defaults to `Number.POSITIVE_INFINITY` which means that operations up to the last one will be returned.\n\t * @returns {Iterable.<module:engine/model/operation/operation~Operation>} Operations added to the history.\n\t */\n\tgetOperations( from = 0, to = Number.POSITIVE_INFINITY ) {\n\t\tif ( from < 0 ) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn this._operations.slice( from, to );\n\t}\n\n\t/**\n\t * Returns operation from the history that bases on given `baseVersion`.\n\t *\n\t * @param {Number} baseVersion Base version of the operation to get.\n\t * @returns {module:engine/model/operation/operation~Operation|null} Operation with given base version or `null` if\n\t * there is no such operation in history.\n\t */\n\tgetOperation( baseVersion ) {\n\t\treturn this._operations[ baseVersion ];\n\t}\n\n\t/**\n\t * Marks in history that one operation is an operation that is undoing the other operation. By marking operation this way,\n\t * history is keeping more context information about operations, which helps in operational transformation.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} undoneOperation Operation which is undone by `undoingOperation`.\n\t * @param {module:engine/model/operation/operation~Operation} undoingOperation Operation which undoes `undoneOperation`.\n\t */\n\tsetOperationAsUndone( undoneOperation, undoingOperation ) {\n\t\tthis._undoPairs.set( undoingOperation, undoneOperation );\n\t\tthis._undoneOperations.add( undoneOperation );\n\t}\n\n\t/**\n\t * Checks whether given `operation` is undoing any other operation.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to check.\n\t * @returns {Boolean} `true` if given `operation` is undoing any other operation, `false` otherwise.\n\t */\n\tisUndoingOperation( operation ) {\n\t\treturn this._undoPairs.has( operation );\n\t}\n\n\t/**\n\t * Checks whether given `operation` has been undone by any other operation.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to check.\n\t * @returns {Boolean} `true` if given `operation` has been undone any other operation, `false` otherwise.\n\t */\n\tisUndoneOperation( operation ) {\n\t\treturn this._undoneOperations.has( operation );\n\t}\n\n\t/**\n\t * For given `undoingOperation`, returns the operation which has been undone by it.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} undoingOperation\n\t * @returns {module:engine/model/operation/operation~Operation|undefined} Operation that has been undone by given\n\t * `undoingOperation` or `undefined` if given `undoingOperation` is not undoing any other operation.\n\t */\n\tgetUndoneOperation( undoingOperation ) {\n\t\treturn this._undoPairs.get( undoingOperation );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils to handle unicode characters.\n *\n * @module utils/unicode\n */\n\n/**\n * Checks whether given `character` is a combining mark.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isCombiningMark( character ) {\n\treturn !!character && character.length == 1 && /[\\u0300-\\u036f\\u1ab0-\\u1aff\\u1dc0-\\u1dff\\u20d0-\\u20ff\\ufe20-\\ufe2f]/.test( character );\n}\n\n/**\n * Checks whether given `character` is a high half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isHighSurrogateHalf( character ) {\n\treturn !!character && character.length == 1 && /[\\ud800-\\udbff]/.test( character );\n}\n\n/**\n * Checks whether given `character` is a low half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isLowSurrogateHalf( character ) {\n\treturn !!character && character.length == 1 && /[\\udc00-\\udfff]/.test( character );\n}\n\n/**\n * Checks whether given offset in a string is inside a surrogate pair (between two surrogate halves).\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideSurrogatePair( string, offset ) {\n\treturn isHighSurrogateHalf( string.charAt( offset - 1 ) ) && isLowSurrogateHalf( string.charAt( offset ) );\n}\n\n/**\n * Checks whether given offset in a string is between base character and combining mark or between two combining marks.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideCombinedSymbol( string, offset ) {\n\treturn isCombiningMark( string.charAt( offset ) );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/document\n */\n\nimport Differ from './differ';\nimport RootElement from './rootelement';\nimport History from './history';\nimport DocumentSelection from './documentselection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\nimport { clone } from 'lodash-es';\n\nconst graveyardName = '$graveyard';\n\n/**\n * Data model's document. It contains the model's structure, its selection and the history of changes.\n *\n * Read more about working with the model in\n * {@glink framework/guides/architecture/editing-engine#model introduction to the the editing engine's architecture}.\n *\n * Usually, the document contains just one {@link module:engine/model/document~Document#roots root element}, so\n * you can retrieve it by just calling {@link module:engine/model/document~Document#getRoot} without specifying its name:\n *\n *\t\tmodel.document.getRoot(); // -> returns the main root\n *\n * However, the document may contain multiple roots – e.g. when the editor has multiple editable areas\n * (e.g. a title and a body of a message).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Document {\n\t/**\n\t * Creates an empty document instance with no {@link #roots} (other than\n\t * the {@link #graveyard graveyard root}).\n\t */\n\tconstructor( model ) {\n\t\t/**\n\t\t * The {@link module:engine/model/model~Model model} that the document is a part of.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The document version. It starts from `0` and every operation increases the version number. It is used to ensure that\n\t\t * operations are applied on a proper document version.\n\t\t *\n\t\t * If the {@link module:engine/model/operation/operation~Operation#baseVersion base version} does not match the document version,\n\t\t * a {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Number}\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * The document's history.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/history~History}\n\t\t */\n\t\tthis.history = new History( this );\n\n\t\t/**\n\t\t * The selection in this document.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/documentselection~DocumentSelection}\n\t\t */\n\t\tthis.selection = new DocumentSelection( this );\n\n\t\t/**\n\t\t * A list of roots that are owned and managed by this document. Use {@link #createRoot} and\n\t\t * {@link #getRoot} to manipulate it.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils/collection~Collection}\n\t\t */\n\t\tthis.roots = new Collection( { idProperty: 'rootName' } );\n\n\t\t/**\n\t\t * The model differ object. Its role is to buffer changes done on the model document and then calculate a diff of those changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/differ~Differ}\n\t\t */\n\t\tthis.differ = new Differ( model.markers );\n\n\t\t/**\n\t\t * Post-fixer callbacks registered to the model document.\n\t\t *\n\t\t * @private\n\t\t * @type {Set.<Function>}\n\t\t */\n\t\tthis._postFixers = new Set();\n\n\t\t/**\n\t\t * A boolean indicates whether the selection has changed until\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._hasSelectionChangedFromTheLastChangeBlock = false;\n\n\t\t// Graveyard tree root. Document always have a graveyard root, which stores removed nodes.\n\t\tthis.createRoot( '$root', graveyardName );\n\n\t\t// First, if the operation is a document operation check if it's base version is correct.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation && operation.baseVersion !== this.version ) {\n\t\t\t\t/**\n\t\t\t\t * Only operations with matching versions can be applied.\n\t\t\t\t *\n\t\t\t\t * @error document-applyOperation-wrong-version\n\t\t\t\t * @param {module:engine/model/operation/operation~Operation} operation\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-document-applyOperation-wrong-version: Only operations with matching versions can be applied.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ operation }\n\t\t\t\t);\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\t// Then, still before an operation is applied on model, buffer the change in differ.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation ) {\n\t\t\t\tthis.differ.bufferOperation( operation );\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// After the operation is applied, bump document's version and add the operation to the history.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation ) {\n\t\t\t\tthis.version++;\n\t\t\t\tthis.history.addOperation( operation );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Listen to selection changes. If selection changed, mark it.\n\t\tthis.listenTo( this.selection, 'change', () => {\n\t\t\tthis._hasSelectionChangedFromTheLastChangeBlock = true;\n\t\t} );\n\n\t\t// Buffer marker changes.\n\t\t// This is not covered in buffering operations because markers may change outside of them (when they\n\t\t// are modified using `model.markers` collection, not through `MarkerOperation`).\n\t\tthis.listenTo( model.markers, 'update', ( evt, marker, oldRange, newRange ) => {\n\t\t\t// Whenever marker is updated, buffer that change.\n\t\t\tthis.differ.bufferMarkerChange( marker.name, oldRange, newRange, marker.affectsData );\n\n\t\t\tif ( oldRange === null ) {\n\t\t\t\t// If this is a new marker, add a listener that will buffer change whenever marker changes.\n\t\t\t\tmarker.on( 'change', ( evt, oldRange ) => {\n\t\t\t\t\tthis.differ.bufferMarkerChange( marker.name, oldRange, marker.getRange(), marker.affectsData );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * The graveyard tree root. A document always has a graveyard root that stores removed nodes.\n\t *\n\t * @readonly\n\t * @member {module:engine/model/rootelement~RootElement}\n\t */\n\tget graveyard() {\n\t\treturn this.getRoot( graveyardName );\n\t}\n\n\t/**\n\t * Creates a new root.\n\t *\n\t * @param {String} [elementName='$root'] The element name. Defaults to `'$root'` which also has some basic schema defined\n\t * (`$block`s are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.\n\t * @param {String} [rootName='main'] A unique root name.\n\t * @returns {module:engine/model/rootelement~RootElement} The created root.\n\t */\n\tcreateRoot( elementName = '$root', rootName = 'main' ) {\n\t\tif ( this.roots.get( rootName ) ) {\n\t\t\t/**\n\t\t\t * A root with the specified name already exists.\n\t\t\t *\n\t\t\t * @error model-document-createRoot-name-exists\n\t\t\t * @param {module:engine/model/document~Document} doc\n\t\t\t * @param {String} name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-document-createRoot-name-exists: Root with specified name already exists.',\n\t\t\t\tthis,\n\t\t\t\t{ name: rootName }\n\t\t\t);\n\t\t}\n\n\t\tconst root = new RootElement( this, elementName, rootName );\n\t\tthis.roots.add( root );\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * Removes all event listeners set by the document instance.\n\t */\n\tdestroy() {\n\t\tthis.selection.destroy();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Returns a root by its name.\n\t *\n\t * @param {String} [name='main'] A unique root name.\n\t * @returns {module:engine/model/rootelement~RootElement|null} The root registered under a given name or `null` when\n\t * there is no root with the given name.\n\t */\n\tgetRoot( name = 'main' ) {\n\t\treturn this.roots.get( name );\n\t}\n\n\t/**\n\t * Returns an array with names of all roots (without the {@link #graveyard}) added to the document.\n\t *\n\t * @returns {Array.<String>} Roots names.\n\t */\n\tgetRootNames() {\n\t\treturn Array.from( this.roots, root => root.rootName ).filter( name => name != graveyardName );\n\t}\n\n\t/**\n\t * Used to register a post-fixer callback. A post-fixer mechanism guarantees that the features\n\t * will operate on a correct model state.\n\t *\n\t * An execution of a feature may lead to an incorrect document tree state. The callbacks are used to fix the document tree after\n\t * it has changed. Post-fixers are fired just after all changes from the outermost change block were applied but\n\t * before the {@link module:engine/model/document~Document#event:change change event} is fired. If a post-fixer callback made\n\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n\t * not be fixed in the new document tree state.\n\t *\n\t * As a parameter, a post-fixer callback receives a {@link module:engine/model/writer~Writer writer} instance connected with the\n\t * executed changes block. Thanks to that, all changes done by the callback will be added to the same\n\t * {@link module:engine/model/batch~Batch batch} (and undo step) as the original changes. This makes post-fixer changes transparent\n\t * for the user.\n\t *\n\t * An example of a post-fixer is a callback that checks if all the data were removed from the editor. If so, the\n\t * callback should add an empty paragraph so that the editor is never empty:\n\t *\n\t *\t\tdocument.registerPostFixer( writer => {\n\t *\t\t\tconst changes = document.differ.getChanges();\n\t *\n\t *\t\t\t// Check if the changes lead to an empty root in the editor.\n\t *\t\t\tfor ( const entry of changes ) {\n\t *\t\t\t\tif ( entry.type == 'remove' && entry.position.root.isEmpty ) {\n\t *\t\t\t\t\twriter.insertElement( 'paragraph', entry.position.root, 0 );\n\t *\n\t *\t\t\t\t\t// It is fine to return early, even if multiple roots would need to be fixed.\n\t *\t\t\t\t\t// All post-fixers will be fired again, so if there are more empty roots, those will be fixed, too.\n\t *\t\t\t\t\treturn true;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @param {Function} postFixer\n\t */\n\tregisterPostFixer( postFixer ) {\n\t\tthis._postFixers.add( postFixer );\n\t}\n\n\t/**\n\t * A custom `toJSON()` method to solve child-parent circular dependencies.\n\t *\n\t * @returns {Object} A clone of this object with the document property changed to a string.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\t// Due to circular references we need to remove parent reference.\n\t\tjson.selection = '[engine.model.DocumentSelection]';\n\t\tjson.model = '[engine.model.Model]';\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Check if there were any changes done on document, and if so, call post-fixers,\n\t * fire `change` event for features and conversion and then reset the differ.\n\t * Fire `change:data` event when at least one operation or buffered marker changes the data.\n\t *\n\t * @protected\n\t * @fires change\n\t * @fires change:data\n\t * @param {module:engine/model/writer~Writer} writer The writer on which post-fixers will be called.\n\t */\n\t_handleChangeBlock( writer ) {\n\t\tif ( this._hasDocumentChangedFromTheLastChangeBlock() ) {\n\t\t\tthis._callPostFixers( writer );\n\n\t\t\t// Refresh selection attributes according to the final position in the model after the change.\n\t\t\tthis.selection.refresh();\n\n\t\t\tif ( this.differ.hasDataChanges() ) {\n\t\t\t\tthis.fire( 'change:data', writer.batch );\n\t\t\t} else {\n\t\t\t\tthis.fire( 'change', writer.batch );\n\t\t\t}\n\n\t\t\t// Theoretically, it is not necessary to refresh selection after change event because\n\t\t\t// post-fixers are the last who should change the model, but just in case...\n\t\t\tthis.selection.refresh();\n\n\t\t\tthis.differ.reset();\n\t\t}\n\n\t\tthis._hasSelectionChangedFromTheLastChangeBlock = false;\n\t}\n\n\t/**\n\t * Returns whether there is a buffered change or if the selection has changed from the last\n\t * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()` block}\n\t * or {@link module:engine/model/model~Model#change `change()` block}.\n\t *\n\t * @protected\n\t * @returns {Boolean} Returns `true` if document has changed from the last `change()` or `enqueueChange()` block.\n\t */\n\t_hasDocumentChangedFromTheLastChangeBlock() {\n\t\treturn !this.differ.isEmpty || this._hasSelectionChangedFromTheLastChangeBlock;\n\t}\n\n\t/**\n\t * Returns the default root for this document which is either the first root that was added to the document using\n\t * {@link #createRoot} or the {@link #graveyard graveyard root} if no other roots were created.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/rootelement~RootElement} The default root for this document.\n\t */\n\t_getDefaultRoot() {\n\t\tfor ( const root of this.roots ) {\n\t\t\tif ( root !== this.graveyard ) {\n\t\t\t\treturn root;\n\t\t\t}\n\t\t}\n\n\t\treturn this.graveyard;\n\t}\n\n\t/**\n\t * Returns the default range for this selection. The default range is a collapsed range that starts and ends\n\t * at the beginning of this selection's document {@link #_getDefaultRoot default root}.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getDefaultRange() {\n\t\tconst defaultRoot = this._getDefaultRoot();\n\t\tconst model = this.model;\n\t\tconst schema = model.schema;\n\n\t\t// Find the first position where the selection can be put.\n\t\tconst position = model.createPositionFromPath( defaultRoot, [ 0 ] );\n\t\tconst nearestRange = schema.getNearestSelectionRange( position );\n\n\t\t// If valid selection range is not found - return range collapsed at the beginning of the root.\n\t\treturn nearestRange || model.createRange( position );\n\t}\n\n\t/**\n\t * Checks whether a given {@link module:engine/model/range~Range range} is a valid range for\n\t * the {@link #selection document's selection}.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range A range to check.\n\t * @returns {Boolean} `true` if `range` is valid, `false` otherwise.\n\t */\n\t_validateSelectionRange( range ) {\n\t\treturn validateTextNodePosition( range.start ) && validateTextNodePosition( range.end );\n\t}\n\n\t/**\n\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer The writer on which post-fixer callbacks will be called.\n\t */\n\t_callPostFixers( writer ) {\n\t\tlet wasFixed = false;\n\n\t\tdo {\n\t\t\tfor ( const callback of this._postFixers ) {\n\t\t\t\t// Ensure selection attributes are up to date before each post-fixer.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/1673.\n\t\t\t\t//\n\t\t\t\t// It might be good to refresh the selection after each operation but at the moment it leads\n\t\t\t\t// to losing attributes for composition or and spell checking\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-typing/issues/188\n\t\t\t\tthis.selection.refresh();\n\n\t\t\t\twasFixed = callback( writer );\n\n\t\t\t\tif ( wasFixed ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while ( wasFixed );\n\t}\n\n\t/**\n\t * Fired after each {@link module:engine/model/model~Model#enqueueChange `enqueueChange()` block} or the outermost\n\t * {@link module:engine/model/model~Model#change `change()` block} was executed and the document was changed\n\t * during that block's execution.\n\t *\n\t * The changes which this event will cover include:\n\t *\n\t * * document structure changes,\n\t * * selection changes,\n\t * * marker changes.\n\t *\n\t * If you want to be notified about all these changes, then simply listen to this event like this:\n\t *\n\t *\t\tmodel.document.on( 'change', () => {\n\t *\t\t\tconsole.log( 'The document has changed!' );\n\t *\t\t} );\n\t *\n\t * If, however, you only want to be notified about the data changes, then use the\n\t * {@link module:engine/model/document~Document#event:change:data change:data} event,\n\t * which is fired for document structure changes and marker changes (which affects the data).\n\t *\n\t *\t\tmodel.document.on( 'change:data', () => {\n\t *\t\t\tconsole.log( 'The data has changed!' );\n\t *\t\t} );\n\t *\n\t * @event change\n\t * @param {module:engine/model/batch~Batch} batch The batch that was used in the executed changes block.\n\t */\n\n\t/**\n\t * It is a narrower version of the {@link #event:change} event. It is fired for changes which\n\t * affect the editor data. This is:\n\t *\n\t * * document structure changes,\n\t * * marker changes (which affects the data).\n\t *\n\t * If you want to be notified about the data changes, then listen to this event:\n\t *\n\t *\t\tmodel.document.on( 'change:data', () => {\n\t *\t\t\tconsole.log( 'The data has changed!' );\n\t *\t\t} );\n\t *\n\t * If you would like to listen to all document changes, then check out the\n\t * {@link module:engine/model/document~Document#event:change change} event.\n\t *\n\t * @event change:data\n\t * @param {module:engine/model/batch~Batch} batch The batch that was used in the executed changes block.\n\t */\n}\n\nmix( Document, EmitterMixin );\n\n// Checks whether given range boundary position is valid for document selection, meaning that is not between\n// unicode surrogate pairs or base character and combining marks.\nfunction validateTextNodePosition( rangeBoundary ) {\n\tconst textNode = rangeBoundary.textNode;\n\n\tif ( textNode ) {\n\t\tconst data = textNode.data;\n\t\tconst offset = rangeBoundary.offset - textNode.startOffset;\n\n\t\treturn !isInsideSurrogatePair( data, offset ) && !isInsideCombinedSymbol( data, offset );\n\t}\n\n\treturn true;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/markercollection\n */\n\nimport LiveRange from './liverange';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The collection of all {@link module:engine/model/markercollection~Marker markers} attached to the document.\n * It lets you {@link module:engine/model/markercollection~MarkerCollection#get get} markers or track them using\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} event.\n *\n * To create, change or remove makers use {@link module:engine/model/writer~Writer model writers'} methods:\n * {@link module:engine/model/writer~Writer#addMarker} or {@link module:engine/model/writer~Writer#removeMarker}. Since\n * the writer is the only proper way to change the data model it is not possible to change markers directly using this\n * collection. All markers created by the writer will be automatically added to this collection.\n *\n * By default there is one marker collection available as {@link module:engine/model/model~Model#markers model property}.\n *\n * @see module:engine/model/markercollection~Marker\n */\nexport default class MarkerCollection {\n\t/**\n\t * Creates a markers collection.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Stores {@link ~Marker markers} added to the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} #_markers\n\t\t */\n\t\tthis._markers = new Map();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link ~Marker markers} added to the collection.\n\t *\n\t * @returns {Iterable}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._markers.values();\n\t}\n\n\t/**\n\t * Checks if marker with given `markerName` is in the collection.\n\t *\n\t * @param {String} markerName Marker name.\n\t * @returns {Boolean} `true` if marker with given `markerName` is in the collection, `false` otherwise.\n\t */\n\thas( markerName ) {\n\t\treturn this._markers.has( markerName );\n\t}\n\n\t/**\n\t * Returns {@link ~Marker marker} with given `markerName`.\n\t *\n\t * @param {String} markerName Name of marker to get.\n\t * @returns {module:engine/model/markercollection~Marker|null} Marker with given name or `null` if such marker was\n\t * not added to the collection.\n\t */\n\tget( markerName ) {\n\t\treturn this._markers.get( markerName ) || null;\n\t}\n\n\t/**\n\t * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given\n\t * {@link module:engine/model/range~Range range}.\n\t *\n\t * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in\n\t * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired\n\t * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}\n\t * flag has changed.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of marker to set or marker instance to update.\n\t * @param {module:engine/model/range~Range} range Marker range.\n\t * @param {Boolean} [managedUsingOperations=false] Specifies whether the marker is managed using operations.\n\t * @param {Boolean} [affectsData=false] Specifies whether the marker affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t * @returns {module:engine/model/markercollection~Marker} `Marker` instance which was added or updated.\n\t */\n\t_set( markerOrName, range, managedUsingOperations = false, affectsData = false ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tconst oldRange = oldMarker.getRange();\n\t\t\tlet hasChanged = false;\n\n\t\t\tif ( !oldRange.isEqual( range ) ) {\n\t\t\t\toldMarker._attachLiveRange( LiveRange.fromRange( range ) );\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( managedUsingOperations != oldMarker.managedUsingOperations ) {\n\t\t\t\toldMarker._managedUsingOperations = managedUsingOperations;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( typeof affectsData === 'boolean' && affectsData != oldMarker.affectsData ) {\n\t\t\t\toldMarker._affectsData = affectsData;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( hasChanged ) {\n\t\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldRange, range );\n\t\t\t}\n\n\t\t\treturn oldMarker;\n\t\t}\n\n\t\tconst liveRange = LiveRange.fromRange( range );\n\t\tconst marker = new Marker( markerName, liveRange, managedUsingOperations, affectsData );\n\n\t\tthis._markers.set( markerName, marker );\n\t\tthis.fire( 'update:' + markerName, marker, null, range );\n\n\t\treturn marker;\n\t}\n\n\t/**\n\t * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String} markerOrName Marker or name of a marker to remove.\n\t * @returns {Boolean} `true` if marker was found and removed, `false` otherwise.\n\t */\n\t_remove( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tthis._markers.delete( markerName );\n\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldMarker.getRange(), null );\n\n\t\t\tthis._destroyMarker( oldMarker );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Fires an {@link module:engine/model/markercollection~MarkerCollection#event:update} event for the given {@link ~Marker marker}\n\t * but does not change the marker. Useful to force {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast\n\t * conversion} for the marker.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String} markerOrName Marker or name of a marker to refresh.\n\t */\n\t_refresh( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst marker = this._markers.get( markerName );\n\n\t\tif ( !marker ) {\n\t\t\tthrow new CKEditorError( 'markercollection-refresh-marker-not-exists: Marker with provided name does not exists.', this );\n\t\t}\n\n\t\tconst range = marker.getRange();\n\n\t\tthis.fire( 'update:' + markerName, marker, range, range, marker.managedUsingOperations, marker.affectsData );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersAtPosition( position ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().containsPosition( position ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which intersects with given {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {module:engine/model/range~Range} range\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersIntersectingRange( range ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().getIntersection( range ) !== null ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys marker collection and all markers inside it.\n\t */\n\tdestroy() {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tthis._destroyMarker( marker );\n\t\t}\n\n\t\tthis._markers = null;\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Iterates over all markers that starts with given `prefix`.\n\t *\n\t *\t\tconst markerFooA = markersCollection.set( 'foo:a', rangeFooA );\n\t *\t\tconst markerFooB = markersCollection.set( 'foo:b', rangeFooB );\n\t *\t\tconst markerBarA = markersCollection.set( 'bar:a', rangeBarA );\n\t *\t\tconst markerFooBarA = markersCollection.set( 'foobar:a', rangeFooBarA );\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'a' ) ); // []\n\t *\n\t * @param prefix\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersGroup( prefix ) {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tif ( marker.name.startsWith( prefix + ':' ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the marker.\n\t *\n\t * @private\n\t * @param {module:engine/model/markercollection~Marker} marker Marker to destroy.\n\t */\n\t_destroyMarker( marker ) {\n\t\tmarker.stopListening();\n\t\tmarker._detachLiveRange();\n\t}\n\n\t/**\n\t * Fired whenever marker is added, updated or removed from `MarkerCollection`.\n\t *\n\t * @event update\n\t * @param {module:engine/model/markercollection~Marker} marker Updated Marker.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the update. When is not defined it\n\t * means that marker is just added.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after update. When is not defined it\n\t * means that marker is just removed.\n\t */\n}\n\nmix( MarkerCollection, EmitterMixin );\n\n/**\n * `Marker` is a continuous parts of model (like a range), is named and represent some kind of information about marked\n * part of model document. In contrary to {@link module:engine/model/node~Node nodes}, which are building blocks of\n * model document tree, markers are not stored directly in document tree but in\n * {@link module:engine/model/model~Model#markers model markers' collection}. Still, they are document data, by giving\n * additional meaning to the part of a model document between marker start and marker end.\n *\n * In this sense, markers are similar to adding and converting attributes on nodes. The difference is that attribute is\n * connected with a given node (e.g. a character is bold no matter if it gets moved or content around it changes).\n * Markers on the other hand are continuous ranges and are characterized by their start and end position. This means that\n * any character in the marker is marked by the marker. For example, if a character is moved outside of marker it stops being\n * \"special\" and the marker is shrunk. Similarly, when a character is moved into the marker from other place in document\n * model, it starts being \"special\" and the marker is enlarged.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * Markers are built from a name and a range.\n *\n * Range of the marker is updated automatically when document changes, using\n * {@link module:engine/model/liverange~LiveRange live range} mechanism.\n *\n * Name is used to group and identify markers. Names have to be unique, but markers can be grouped by\n * using common prefixes, separated with `:`, for example: `user:john` or `search:3`. That's useful in term of creating\n * namespaces for custom elements (e.g. comments, highlights). You can use this prefixes in\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} listeners to listen on changes in a group of markers.\n * For instance: `model.markers.on( 'set:user', callback );` will be called whenever any `user:*` markers changes.\n *\n * There are two types of markers.\n *\n * 1. Markers managed directly, without using operations. They are added directly by {@link module:engine/model/writer~Writer}\n * to the {@link module:engine/model/markercollection~MarkerCollection} without any additional mechanism. They can be used\n * as bookmarks or visual markers. They are great for showing results of the find, or select link when the focus is in the input.\n *\n * 1. Markers managed using operations. These markers are also stored in {@link module:engine/model/markercollection~MarkerCollection}\n * but changes in these markers is managed the same way all other changes in the model structure - using operations.\n * Therefore, they are handled in the undo stack and synchronized between clients if the collaboration plugin is enabled.\n * This type of markers is useful for solutions like spell checking or comments.\n *\n * Both type of them should be added / updated by {@link module:engine/model/writer~Writer#addMarker}\n * and removed by {@link module:engine/model/writer~Writer#removeMarker} methods.\n *\n *\t\tmodel.change( ( writer ) => {\n * \t\t\tconst marker = writer.addMarker( name, { range, usingOperation: true } );\n *\n * \t\t\t// ...\n *\n * \t\t\twriter.removeMarker( marker );\n *\t\t} );\n *\n * See {@link module:engine/model/writer~Writer} to find more examples.\n *\n * Since markers need to track change in the document, for efficiency reasons, it is best to create and keep as little\n * markers as possible and remove them as soon as they are not needed anymore.\n *\n * Markers can be downcasted and upcasted.\n *\n * Markers downcast happens on {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} and\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} events.\n * Use {@link module:engine/conversion/downcasthelpers downcast converters} or attach a custom converter to mentioned events.\n * For {@link module:engine/controller/datacontroller~DataController data pipeline}, marker should be downcasted to an element.\n * Then, it can be upcasted back to a marker. Again, use {@link module:engine/conversion/upcasthelpers upcast converters} or\n * attach a custom converter to {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element}.\n *\n * `Marker` instances are created and destroyed only by {@link ~MarkerCollection MarkerCollection}.\n */\nclass Marker {\n\t/**\n\t * Creates a marker instance.\n\t *\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Range marked by the marker.\n\t * @param {Boolean} managedUsingOperations Specifies whether the marker is managed using operations.\n\t * @param {Boolean} affectsData Specifies whether the marker affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t */\n\tconstructor( name, liveRange, managedUsingOperations, affectsData ) {\n\t\t/**\n\t\t * Marker's name.\n\t\t *\n\t\t * @readonly\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Range marked by the marker.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/model/liverange~LiveRange}\n\t\t */\n\t\tthis._liveRange = this._attachLiveRange( liveRange );\n\n\t\t/**\n\t\t * Flag indicates if the marker is managed using operations or not.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._managedUsingOperations = managedUsingOperations;\n\n\t\t/**\n\t\t * Specifies whether the marker affects the data produced by the data pipeline\n\t\t * (is persisted in the editor's data).\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._affectsData = affectsData;\n\t}\n\n\t/**\n\t * A value indicating if the marker is managed using operations.\n\t * See {@link ~Marker marker class description} to learn more about marker types.\n\t * See {@link module:engine/model/writer~Writer#addMarker}.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget managedUsingOperations() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._managedUsingOperations;\n\t}\n\n\t/**\n\t * A value indicating if the marker changes the data.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget affectsData() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._affectsData;\n\t}\n\n\t/**\n\t * Returns current marker start position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetStart() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._liveRange.start.clone();\n\t}\n\n\t/**\n\t * Returns current marker end position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetEnd() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._liveRange.end.clone();\n\t}\n\n\t/**\n\t * Returns a range that represents the current state of the marker.\n\t *\n\t * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a\n\t * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only\n\t * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}\n\t * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every\n\t * time there is a need to read marker properties. This will guarantee that the marker has not been removed and\n\t * that it's data is up-to-date.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tgetRange() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._liveRange.toRange();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tmarker.is( 'marker' ); // -> true\n\t *\t\tmarker.is( 'model:marker' ); // -> true\n\t *\n\t *\t\tmarker.is( 'view:element' ); // -> false\n\t *\t\tmarker.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'marker' || type == 'model:marker';\n\t}\n\n\t/**\n\t * Binds new live range to the marker and detach the old one if is attached.\n\t *\n\t * @protected\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Live range to attach\n\t * @returns {module:engine/model/liverange~LiveRange} Attached live range.\n\t */\n\t_attachLiveRange( liveRange ) {\n\t\tif ( this._liveRange ) {\n\t\t\tthis._detachLiveRange();\n\t\t}\n\n\t\t// Delegating does not work with namespaces. Alternatively, we could delegate all events (using `*`).\n\t\tliveRange.delegate( 'change:range' ).to( this );\n\t\tliveRange.delegate( 'change:content' ).to( this );\n\n\t\tthis._liveRange = liveRange;\n\n\t\treturn liveRange;\n\t}\n\n\t/**\n\t * Unbinds and destroys currently attached live range.\n\t *\n\t * @protected\n\t */\n\t_detachLiveRange() {\n\t\tthis._liveRange.stopDelegating( 'change:range', this );\n\t\tthis._liveRange.stopDelegating( 'change:content', this );\n\t\tthis._liveRange.detach();\n\t\tthis._liveRange = null;\n\t}\n\n\t/**\n\t * Fired whenever {@link ~Marker#_liveRange marker range} is changed due to changes on {@link module:engine/model/document~Document}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:range LiveRange change:range event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:range\n\t * @event change:range\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n\n\t/**\n\t * Fired whenever change on {@link module:engine/model/document~Document} is done inside {@link ~Marker#_liveRange marker range}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:content LiveRange change:content event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:content\n\t * @event change:content\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n}\n\nmix( Marker, EmitterMixin );\n\n/**\n * Cannot use a {@link module:engine/model/markercollection~MarkerCollection#destroy destroyed marker} instance.\n *\n * @error marker-destroyed\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/insertcontent\n */\n\nimport Position from '../position';\nimport LivePosition from '../liveposition';\nimport Element from '../element';\nimport Range from '../range';\nimport DocumentSelection from '../documentselection';\nimport Selection from '../selection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Inserts content into the editor (specified selection) as one would expect the paste\n * functionality to work.\n *\n * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable` it will be modified\n * to the insertion selection (equal to a range to be selected after insertion).\n *\n * If `selectable` is not passed, the content will be inserted using the current selection of the model document.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertContent} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n * @param {module:engine/model/selection~Selectable} [selectable=model.document.selection]\n * Selection into which the content should be inserted.\n * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n * @returns {module:engine/model/range~Range} Range which contains all the performed changes. This is a range that, if removed,\n * would return the model to the state before the insertion. If no changes were preformed by `insertContent`, returns a range collapsed\n * at the insertion position.\n */\nexport default function insertContent( model, content, selectable, placeOrOffset ) {\n\treturn model.change( writer => {\n\t\tlet selection;\n\n\t\tif ( !selectable ) {\n\t\t\tselection = model.document.selection;\n\t\t} else if ( selectable instanceof Selection || selectable instanceof DocumentSelection ) {\n\t\t\tselection = selectable;\n\t\t} else {\n\t\t\tselection = writer.createSelection( selectable, placeOrOffset );\n\t\t}\n\n\t\tconst insertionPosition = selection.getFirstPosition();\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\tmodel.deleteContent( selection, { doNotAutoparagraph: true } );\n\t\t}\n\n\t\tconst insertion = new Insertion( model, writer, insertionPosition );\n\n\t\tlet nodesToInsert;\n\n\t\tif ( content.is( 'documentFragment' ) ) {\n\t\t\tnodesToInsert = content.getChildren();\n\t\t} else {\n\t\t\tnodesToInsert = [ content ];\n\t\t}\n\n\t\tinsertion.handleNodes( nodesToInsert, {\n\t\t\t// The set of children being inserted is the only set in this context\n\t\t\t// so it's the first and last (it's a hack ;)).\n\t\t\tisFirst: true,\n\t\t\tisLast: true\n\t\t} );\n\n\t\tconst newRange = insertion.getSelectionRange();\n\n\t\t/* istanbul ignore else */\n\t\tif ( newRange ) {\n\t\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\t\twriter.setSelection( newRange );\n\t\t\t} else {\n\t\t\t\tselection.setTo( newRange );\n\t\t\t}\n\t\t} else {\n\t\t\t// We are not testing else because it's a safe check for unpredictable edge cases:\n\t\t\t// an insertion without proper range to select.\n\t\t\t//\n\t\t\t// @if CK_DEBUG // console.warn( 'Cannot determine a proper selection range after insertion.' );\n\t\t}\n\n\t\tconst affectedRange = insertion.getAffectedRange() || model.createRange( insertionPosition );\n\n\t\tinsertion.destroy();\n\n\t\treturn affectedRange;\n\t} );\n}\n\n/**\n * Utility class for performing content insertion.\n *\n * @private\n */\nclass Insertion {\n\tconstructor( model, writer, position ) {\n\t\t/**\n\t\t * The model in context of which the insertion should be performed.\n\t\t *\n\t\t * @member {module:engine/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Batch to which operations will be added.\n\t\t *\n\t\t * @member {module:engine/controller/writer~Batch} #writer\n\t\t */\n\t\tthis.writer = writer;\n\n\t\t/**\n\t\t * The position at which (or near which) the next node will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} #position\n\t\t */\n\t\tthis.position = position;\n\n\t\t/**\n\t\t * Elements with which the inserted elements can be merged.\n\t\t *\n\t\t *\t\t<p>x^</p><p>y</p> + <p>z</p> (can merge to <p>x</p>)\n\t\t *\t\t<p>x</p><p>^y</p> + <p>z</p> (can merge to <p>y</p>)\n\t\t *\t\t<p>x^y</p> + <p>z</p> (can merge to <p>xy</p> which will be split during the action,\n\t\t *\t\t\t\t\t\t\t\tso both its pieces will be added to this set)\n\t\t *\n\t\t *\n\t\t * @member {Set} #canMergeWith\n\t\t */\n\t\tthis.canMergeWith = new Set( [ this.position.parent ] );\n\n\t\t/**\n\t\t * Schema of the model.\n\t\t *\n\t\t * @member {module:engine/model/schema~Schema} #schema\n\t\t */\n\t\tthis.schema = model.schema;\n\n\t\tthis._filterAttributesOf = [];\n\n\t\t/**\n\t\t * Beginning of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/liveposition~LivePosition|null} #_affectedStart\n\t\t */\n\t\tthis._affectedStart = null;\n\n\t\t/**\n\t\t * End of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/liveposition~LivePosition|null} #_affectedEnd\n\t\t */\n\t\tthis._affectedEnd = null;\n\t}\n\n\t/**\n\t * Handles insertion of a set of nodes.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to insert.\n\t * @param {Object} parentContext Context in which parent of these nodes was supposed to be inserted.\n\t * If the parent context is passed it means that the parent element was stripped (was not allowed).\n\t */\n\thandleNodes( nodes, parentContext ) {\n\t\tnodes = Array.from( nodes );\n\n\t\tfor ( let i = 0; i < nodes.length; i++ ) {\n\t\t\tconst node = nodes[ i ];\n\n\t\t\tthis._handleNode( node, {\n\t\t\t\tisFirst: i === 0 && parentContext.isFirst,\n\t\t\t\tisLast: ( i === ( nodes.length - 1 ) ) && parentContext.isLast\n\t\t\t} );\n\t\t}\n\n\t\t// TMP this will become a post-fixer.\n\t\tthis.schema.removeDisallowedAttributes( this._filterAttributesOf, this.writer );\n\t\tthis._filterAttributesOf = [];\n\t}\n\n\t/**\n\t * Returns range to be selected after insertion.\n\t * Returns `null` if there is no valid range to select after insertion.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetSelectionRange() {\n\t\tif ( this.nodeToSelect ) {\n\t\t\treturn Range._createOn( this.nodeToSelect );\n\t\t}\n\n\t\treturn this.model.schema.getNearestSelectionRange( this.position );\n\t}\n\n\t/**\n\t * Returns a range which contains all the performed changes. This is a range that, if removed, would return the model to the state\n\t * before the insertion. Returns `null` if no changes were done.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetAffectedRange() {\n\t\tif ( !this._affectedStart ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn new Range( this._affectedStart, this._affectedEnd );\n\t}\n\n\t/**\n\t * Destroys `Insertion` instance.\n\t */\n\tdestroy() {\n\t\tif ( this._affectedStart ) {\n\t\t\tthis._affectedStart.detach();\n\t\t}\n\n\t\tif ( this._affectedEnd ) {\n\t\t\tthis._affectedEnd.detach();\n\t\t}\n\t}\n\n\t/**\n\t * Handles insertion of a single node.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node\n\t * @param {Object} context\n\t * @param {Boolean} context.isFirst Whether the given node is the first one in the content to be inserted.\n\t * @param {Boolean} context.isLast Whether the given node is the last one in the content to be inserted.\n\t */\n\t_handleNode( node, context ) {\n\t\t// Let's handle object in a special way.\n\t\t// * They should never be merged with other elements.\n\t\t// * If they are not allowed in any of the selection ancestors, they could be either autoparagraphed or totally removed.\n\t\tif ( this.schema.isObject( node ) ) {\n\t\t\tthis._handleObject( node, context );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Try to find a place for the given node.\n\t\t// Split the position.parent's branch up to a point where the node can be inserted.\n\t\t// If it isn't allowed in the whole branch, then of course don't split anything.\n\t\tconst isAllowed = this._checkAndSplitToAllowedPosition( node, context );\n\n\t\tif ( !isAllowed ) {\n\t\t\tthis._handleDisallowedNode( node, context );\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._insert( node );\n\n\t\t// After the node was inserted we may try to merge it with its siblings.\n\t\t// This should happen only if it was the first and/or last of the nodes (so only with boundary nodes)\n\t\t// and only if the selection was in those elements initially.\n\t\t//\n\t\t// E.g.:\n\t\t// <p>x^</p> + <p>y</p> => <p>x</p><p>y</p> => <p>xy[]</p>\n\t\t// and:\n\t\t// <p>x^y</p> + <p>z</p> => <p>x</p>^<p>y</p> + <p>z</p> => <p>x</p><p>z</p><p>y</p> => <p>xz[]y</p>\n\t\t// but:\n\t\t// <p>x</p><p>^</p><p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging)\n\t\t// <p>x</p>[<img>]<p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging, note: after running deleteContents\n\t\t//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t it's exactly the same case as above)\n\t\tthis._mergeSiblingsOf( node, context );\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/element~Element} node The object element.\n\t * @param {Object} context\n\t */\n\t_handleObject( node, context ) {\n\t\t// Try finding it a place in the tree.\n\t\tif ( this._checkAndSplitToAllowedPosition( node ) ) {\n\t\t\tthis._insert( node );\n\t\t}\n\t\t// Try autoparagraphing.\n\t\telse {\n\t\t\tthis._tryAutoparagraphing( node, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The disallowed node which needs to be handled.\n\t * @param {Object} context\n\t */\n\t_handleDisallowedNode( node, context ) {\n\t\t// If the node is an element, try inserting its children (strip the parent).\n\t\tif ( node.is( 'element' ) ) {\n\t\t\tthis.handleNodes( node.getChildren(), context );\n\t\t}\n\t\t// If text is not allowed, try autoparagraphing it.\n\t\telse {\n\t\t\tthis._tryAutoparagraphing( node, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node to insert.\n\t */\n\t_insert( node ) {\n\t\t/* istanbul ignore if */\n\t\tif ( !this.schema.checkChild( this.position, node ) ) {\n\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t// Note that it would often be a silent issue if we insert node in a place where it's not allowed.\n\n\t\t\t/**\n\t\t\t * Given node cannot be inserted on the given position.\n\t\t\t *\n\t\t\t * @error insertcontent-wrong-position\n\t\t\t * @param {module:engine/model/node~Node} node Node to insert.\n\t\t\t * @param {module:engine/model/position~Position} position Position to insert the node at.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insertcontent-wrong-position: Given node cannot be inserted on the given position.',\n\t\t\t\tthis,\n\t\t\t\t{ node, position: this.position }\n\t\t\t);\n\t\t}\n\n\t\tconst livePos = LivePosition.fromPosition( this.position, 'toNext' );\n\n\t\tthis._setAffectedBoundaries( this.position );\n\t\tthis.writer.insert( node, this.position );\n\n\t\tthis.position = livePos.toPosition();\n\t\tlivePos.detach();\n\n\t\t// The last inserted object should be selected because we can't put a collapsed selection after it.\n\t\tif ( this.schema.isObject( node ) && !this.schema.checkChild( this.position, '$text' ) ) {\n\t\t\tthis.nodeToSelect = node;\n\t\t} else {\n\t\t\tthis.nodeToSelect = null;\n\t\t}\n\n\t\tthis._filterAttributesOf.push( node );\n\t}\n\n\t/**\n\t * Sets `_affectedStart` and `_affectedEnd` to the given `position`. Should be used before a change is done during insertion process to\n\t * mark the affected range.\n\t *\n\t * This method is used before inserting a node or splitting a parent node. `_affectedStart` and `_affectedEnd` are also changed\n\t * during merging, but the logic there is more complicated so it is left out of this function.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position\n\t */\n\t_setAffectedBoundaries( position ) {\n\t\t// Set affected boundaries stickiness so that those position will \"expand\" when something is inserted in between them:\n\t\t// <paragraph>Foo][bar</paragraph> -> <paragraph>Foo]xx[bar</paragraph>\n\t\t// This is why it cannot be a range but two separate positions.\n\t\tif ( !this._affectedStart ) {\n\t\t\tthis._affectedStart = LivePosition.fromPosition( position, 'toPrevious' );\n\t\t}\n\n\t\t// If `_affectedEnd` is before the new boundary position, expand `_affectedEnd`. This can happen if first inserted node was\n\t\t// inserted into the parent but the next node is moved-out of that parent:\n\t\t// (1) <paragraph>Foo][</paragraph> -> <paragraph>Foo]xx[</paragraph>\n\t\t// (2) <paragraph>Foo]xx[</paragraph> -> <paragraph>Foo]xx</paragraph><widget></widget>[\n\t\tif ( !this._affectedEnd || this._affectedEnd.isBefore( position ) ) {\n\t\t\tif ( this._affectedEnd ) {\n\t\t\t\tthis._affectedEnd.detach();\n\t\t\t}\n\n\t\t\tthis._affectedEnd = LivePosition.fromPosition( position, 'toNext' );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t */\n\t_mergeSiblingsOf( node, context ) {\n\t\tif ( !( node instanceof Element ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mergeLeft = this._canMergeLeft( node, context );\n\t\tconst mergeRight = this._canMergeRight( node, context );\n\t\tconst mergePosLeft = LivePosition._createBefore( node );\n\t\tmergePosLeft.stickiness = 'toNext';\n\t\tconst mergePosRight = LivePosition._createAfter( node );\n\t\tmergePosRight.stickiness = 'toNext';\n\n\t\tif ( mergeLeft ) {\n\t\t\tconst livePosition = LivePosition.fromPosition( this.position );\n\t\t\tlivePosition.stickiness = 'toNext';\n\n\t\t\t// If `_affectedStart` is sames as merge position, it means that the element \"marked\" by `_affectedStart` is going to be\n\t\t\t// removed and its contents will be moved. This won't transform `LivePosition` so `_affectedStart` needs to be moved\n\t\t\t// by hand to properly reflect affected range. (Due to `_affectedStart` and `_affectedEnd` stickiness, the \"range\" is\n\t\t\t// shown as `][`).\n\t\t\t//\n\t\t\t// Example - insert `<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>` at the end of `<paragraph>Foo^</paragraph>`:\n\t\t\t//\n\t\t\t// <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo]Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>\n\t\t\t//\n\t\t\t// Note, that if we are here then something must have been inserted, so `_affectedStart` and `_affectedEnd` have to be set.\n\t\t\tif ( this._affectedStart.isEqual( mergePosLeft ) ) {\n\t\t\t\tthis._affectedStart.detach();\n\t\t\t\tthis._affectedStart = LivePosition._createAt( mergePosLeft.nodeBefore, 'end', 'toPrevious' );\n\t\t\t}\n\n\t\t\tthis.writer.merge( mergePosLeft );\n\n\t\t\t// If only one element (the merged one) is in the \"affected range\", also move the affected range end appropriately.\n\t\t\t//\n\t\t\t// Example - insert `<paragraph>Abc</paragraph>` at the of `<paragraph>Foo^</paragraph>`:\n\t\t\t//\n\t\t\t// <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo]Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo]Abc[</paragraph><paragraph>Bar</paragraph>\n\t\t\tif ( mergePosLeft.isEqual( this._affectedEnd ) && context.isLast ) {\n\t\t\t\tthis._affectedEnd.detach();\n\t\t\t\tthis._affectedEnd = LivePosition._createAt( mergePosLeft.nodeBefore, 'end', 'toNext' );\n\t\t\t}\n\n\t\t\tthis.position = livePosition.toPosition();\n\t\t\tlivePosition.detach();\n\t\t}\n\n\t\tif ( mergeRight ) {\n\t\t\t/* istanbul ignore if */\n\t\t\tif ( !this.position.isEqual( mergePosRight ) ) {\n\t\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t\t// At this point the insertion position should be after the node we'll merge. If it isn't,\n\t\t\t\t// it should need to be secured as in the left merge case.\n\t\t\t\t/**\n\t\t\t\t * An internal error occured during merging insertion content with siblings.\n\t\t\t\t * The insertion position should equal to the merge position.\n\t\t\t\t *\n\t\t\t\t * @error insertcontent-invalid-insertion-position\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'insertcontent-invalid-insertion-position', this );\n\t\t\t}\n\n\t\t\t// Move the position to the previous node, so it isn't moved to the graveyard on merge.\n\t\t\t// <p>x</p>[]<p>y</p> => <p>x[]</p><p>y</p>\n\t\t\tthis.position = Position._createAt( mergePosRight.nodeBefore, 'end' );\n\n\t\t\t// OK:  <p>xx[]</p> + <p>yy</p> => <p>xx[]yy</p> (when sticks to previous)\n\t\t\t// NOK: <p>xx[]</p> + <p>yy</p> => <p>xxyy[]</p> (when sticks to next)\n\t\t\tconst livePosition = LivePosition.fromPosition( this.position, 'toPrevious' );\n\n\t\t\t// See comment above on moving `_affectedStart`.\n\t\t\tif ( this._affectedEnd.isEqual( mergePosRight ) ) {\n\t\t\t\tthis._affectedEnd.detach();\n\t\t\t\tthis._affectedEnd = LivePosition._createAt( mergePosRight.nodeBefore, 'end', 'toNext' );\n\t\t\t}\n\n\t\t\tthis.writer.merge( mergePosRight );\n\n\t\t\t// See comment above on moving `_affectedStart`.\n\t\t\tif ( mergePosRight.getShiftedBy( -1 ).isEqual( this._affectedStart ) && context.isFirst ) {\n\t\t\t\tthis._affectedStart.detach();\n\t\t\t\tthis._affectedStart = LivePosition._createAt( mergePosRight.nodeBefore, 0, 'toPrevious' );\n\t\t\t}\n\n\t\t\tthis.position = livePosition.toPosition();\n\t\t\tlivePosition.detach();\n\t\t}\n\n\t\tif ( mergeLeft || mergeRight ) {\n\t\t\t// After merge elements that were marked by _insert() to be filtered might be gone so\n\t\t\t// we need to mark the new container.\n\t\t\tthis._filterAttributesOf.push( this.position.parent );\n\t\t}\n\n\t\tmergePosLeft.detach();\n\t\tmergePosRight.detach();\n\t}\n\n\t/**\n\t * Checks whether specified node can be merged with previous sibling element.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t * @returns {Boolean}\n\t */\n\t_canMergeLeft( node, context ) {\n\t\tconst previousSibling = node.previousSibling;\n\n\t\treturn context.isFirst &&\n\t\t\t( previousSibling instanceof Element ) &&\n\t\t\tthis.canMergeWith.has( previousSibling ) &&\n\t\t\tthis.model.schema.checkMerge( previousSibling, node );\n\t}\n\n\t/**\n\t * Checks whether specified node can be merged with next sibling element.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t * @returns {Boolean}\n\t */\n\t_canMergeRight( node, context ) {\n\t\tconst nextSibling = node.nextSibling;\n\n\t\treturn context.isLast &&\n\t\t\t( nextSibling instanceof Element ) &&\n\t\t\tthis.canMergeWith.has( nextSibling ) &&\n\t\t\tthis.model.schema.checkMerge( node, nextSibling );\n\t}\n\n\t/**\n\t * Tries wrapping the node in a new paragraph and inserting it this way.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which needs to be autoparagraphed.\n\t * @param {Object} context\n\t */\n\t_tryAutoparagraphing( node, context ) {\n\t\tconst paragraph = this.writer.createElement( 'paragraph' );\n\n\t\t// Do not autoparagraph if the paragraph won't be allowed there,\n\t\t// cause that would lead to an infinite loop. The paragraph would be rejected in\n\t\t// the next _handleNode() call and we'd be here again.\n\t\tif ( this._getAllowedIn( paragraph, this.position.parent ) && this.schema.checkChild( paragraph, node ) ) {\n\t\t\tparagraph._appendChild( node );\n\t\t\tthis._handleNode( paragraph, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node\n\t * @returns {Boolean} Whether an allowed position was found.\n\t * `false` is returned if the node isn't allowed at any position up in the tree, `true` if was.\n\t */\n\t_checkAndSplitToAllowedPosition( node ) {\n\t\tconst allowedIn = this._getAllowedIn( node, this.position.parent );\n\n\t\tif ( !allowedIn ) {\n\t\t\treturn false;\n\t\t}\n\n\t\twhile ( allowedIn != this.position.parent ) {\n\t\t\t// If a parent which we'd need to leave is a limit element, break.\n\t\t\tif ( this.schema.isLimit( this.position.parent ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( this.position.isAtStart ) {\n\t\t\t\t// If insertion position is at the beginning of the parent, move it out instead of splitting.\n\t\t\t\t// <p>^Foo</p> -> ^<p>Foo</p>\n\t\t\t\tconst parent = this.position.parent;\n\n\t\t\t\tthis.position = this.writer.createPositionBefore( parent );\n\n\t\t\t\t// Special case – parent is empty (<p>^</p>).\n\t\t\t\t//\n\t\t\t\t// 1. parent.isEmpty\n\t\t\t\t// We can remove the element after moving insertion position out of it.\n\t\t\t\t//\n\t\t\t\t// 2. parent.parent === allowedIn\n\t\t\t\t// However parent should remain in place when allowed element is above limit element in document tree.\n\t\t\t\t// For example there shouldn't be allowed to remove empty paragraph from tableCell, when is pasted\n\t\t\t\t// content allowed in $root.\n\t\t\t\tif ( parent.isEmpty && parent.parent === allowedIn ) {\n\t\t\t\t\tthis.writer.remove( parent );\n\t\t\t\t}\n\t\t\t} else if ( this.position.isAtEnd ) {\n\t\t\t\t// If insertion position is at the end of the parent, move it out instead of splitting.\n\t\t\t\t// <p>Foo^</p> -> <p>Foo</p>^\n\t\t\t\tthis.position = this.writer.createPositionAfter( this.position.parent );\n\t\t\t} else {\n\t\t\t\tconst tempPos = this.writer.createPositionAfter( this.position.parent );\n\n\t\t\t\tthis._setAffectedBoundaries( this.position );\n\t\t\t\tthis.writer.split( this.position );\n\n\t\t\t\tthis.position = tempPos;\n\n\t\t\t\tthis.canMergeWith.add( this.position.nodeAfter );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the element in which the given node is allowed. It checks the passed element and all its ancestors.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node to check.\n\t * @param {module:engine/model/element~Element} element The element in which the node's correctness should be checked.\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\t_getAllowedIn( node, element ) {\n\t\tif ( this.schema.checkChild( element, node ) ) {\n\t\t\treturn element;\n\t\t}\n\n\t\tif ( element.parent ) {\n\t\t\treturn this._getAllowedIn( node, element.parent );\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/deletecontent\n */\n\nimport LivePosition from '../liveposition';\nimport Range from '../range';\nimport DocumentSelection from '../documentselection';\n\n/**\n * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n *\n * **Note:** Use {@link module:engine/model/model~Model#deleteContent} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#deleteContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * Selection of which the content should be deleted.\n * @param {module:engine/model/batch~Batch} batch Batch to which the operations will be added.\n * @param {Object} [options]\n * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\n *\n * For example `<heading>x[x</heading><paragraph>y]y</paragraph>` will become:\n *\n * * `<heading>x^y</heading>` with the option disabled (`leaveUnmerged == false`)\n * * `<heading>x^</heading><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n *\n * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n * elements will not be merged.\n *\n * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\n * paragraph when the entire content was selected.\n *\n * For example `<heading>[x</heading><paragraph>y]</paragraph>` will become:\n *\n * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n * * `<heading>^</heading>` with enabled (`doNotResetEntireContent == true`).\n *\n * @param {Boolean} [options.doNotAutoparagraph=false] Whether to create a paragraph if after content deletion selection is moved\n * to a place where text cannot be inserted.\n *\n * For example `<paragraph>x</paragraph>[<image src=\"foo.jpg\"></image>]` will become:\n *\n * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n * * `<paragraph>x[]</paragraph>` with the option enabled (`doNotAutoparagraph == true`).\n *\n * **Note:** if there is no valid position for the selection, the paragraph will always be created:\n *\n * `[<image src=\"foo.jpg\"></image>]` -> `<paragraph>[]</paragraph>`.\n */\nexport default function deleteContent( model, selection, options = {} ) {\n\tif ( selection.isCollapsed ) {\n\t\treturn;\n\t}\n\n\tconst selRange = selection.getFirstRange();\n\n\t// If the selection is already removed, don't do anything.\n\tif ( selRange.root.rootName == '$graveyard' ) {\n\t\treturn;\n\t}\n\n\tconst schema = model.schema;\n\n\tmodel.change( writer => {\n\t\t// 1. Replace the entire content with paragraph.\n\t\t// See: https://github.com/ckeditor/ckeditor5-engine/issues/1012#issuecomment-315017594.\n\t\tif ( !options.doNotResetEntireContent && shouldEntireContentBeReplacedWithParagraph( schema, selection ) ) {\n\t\t\treplaceEntireContentWithParagraph( writer, selection, schema );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst startPos = selRange.start;\n\t\tconst endPos = LivePosition.fromPosition( selRange.end, 'toNext' );\n\n\t\t// 2. Remove the content if there is any.\n\t\tif ( !selRange.start.isTouching( selRange.end ) ) {\n\t\t\twriter.remove( selRange );\n\t\t}\n\n\t\t// 3. Merge elements in the right branch to the elements in the left branch.\n\t\t// The only reasonable (in terms of data and selection correctness) case in which we need to do that is:\n\t\t//\n\t\t// <heading type=1>Fo[</heading><paragraph>]ar</paragraph> => <heading type=1>Fo^ar</heading>\n\t\t//\n\t\t// However, the algorithm supports also merging deeper structures (up to the depth of the shallower branch),\n\t\t// as it's hard to imagine what should actually be the default behavior. Usually, specific features will\n\t\t// want to override that behavior anyway.\n\t\tif ( !options.leaveUnmerged ) {\n\t\t\tmergeBranches( writer, startPos, endPos );\n\n\t\t\t// TMP this will be replaced with a postfixer.\n\t\t\t// We need to check and strip disallowed attributes in all nested nodes because after merge\n\t\t\t// some attributes could end up in a path where are disallowed.\n\t\t\t//\n\t\t\t// e.g. bold is disallowed for <H1>\n\t\t\t// <h1>Fo{o</h1><p>b}a<b>r</b><p> -> <h1>Fo{}a<b>r</b><h1> -> <h1>Fo{}ar<h1>.\n\t\t\tschema.removeDisallowedAttributes( startPos.parent.getChildren(), writer );\n\t\t}\n\n\t\tcollapseSelectionAt( writer, selection, startPos );\n\n\t\t// 4. Add a paragraph to set selection in it.\n\t\t// Check if a text is allowed in the new container. If not, try to create a new paragraph (if it's allowed here).\n\t\tif ( shouldAutoparagraph( schema, startPos ) ) {\n\t\t\t// If auto-paragraphing is off, find the closest valid selection range and collapse the selection there.\n\t\t\t// If there is no valid selection range, create paragraph anyway and set selection there.\n\t\t\tconst validSelectionRange = schema.getNearestSelectionRange( startPos );\n\n\t\t\tif ( options.doNotAutoparagraph && validSelectionRange ) {\n\t\t\t\tcollapseSelectionAt( writer, selection, validSelectionRange );\n\t\t\t} else {\n\t\t\t\tinsertParagraph( writer, startPos, selection );\n\t\t\t}\n\t\t}\n\n\t\tendPos.detach();\n\t} );\n}\n\n// This function is a result of reaching the Ballmer's peak for just the right amount of time.\n// Even I had troubles documenting it after a while and after reading it again I couldn't believe that it really works.\nfunction mergeBranches( writer, startPos, endPos ) {\n\tconst startParent = startPos.parent;\n\tconst endParent = endPos.parent;\n\n\t// If both positions ended up in the same parent, then there's nothing more to merge:\n\t// <$root><p>x[]</p><p>{}y</p></$root> => <$root><p>xy</p>[]{}</$root>\n\tif ( startParent == endParent ) {\n\t\treturn;\n\t}\n\n\t// If one of the positions is a limit element, then there's nothing to merge because we don't want to cross the limit boundaries.\n\tif ( writer.model.schema.isLimit( startParent ) || writer.model.schema.isLimit( endParent ) ) {\n\t\treturn;\n\t}\n\n\t// Check if operations we'll need to do won't need to cross object or limit boundaries.\n\t// E.g., we can't merge endParent into startParent in this case:\n\t// <limit><startParent>x[]</startParent></limit><endParent>{}</endParent>\n\tif ( !checkCanBeMerged( startPos, endPos, writer.model.schema ) ) {\n\t\treturn;\n\t}\n\n\t// Remember next positions to merge. For example:\n\t// <a><b>x[]</b></a><c><d>{}y</d></c>\n\t// will become:\n\t// <a><b>xy</b>[]</a><c>{}</c>\n\tstartPos = writer.createPositionAfter( startParent );\n\tendPos = writer.createPositionBefore( endParent );\n\n\tif ( !endPos.isEqual( startPos ) ) {\n\t\t// In this case, before we merge, we need to move `endParent` to the `startPos`:\n\t\t// <a><b>x[]</b></a><c><d>{}y</d></c>\n\t\t// becomes:\n\t\t// <a><b>x</b>[]<d>y</d></a><c>{}</c>\n\t\twriter.insert( endParent, startPos );\n\t}\n\n\t// Merge two siblings:\n\t// <a>x</a>[]<b>y</b> -> <a>xy</a> (the usual case)\n\t// <a><b>x</b>[]<d>y</d></a><c></c> -> <a><b>xy</b>[]</a><c></c> (this is the \"move parent\" case shown above)\n\twriter.merge( startPos );\n\n\t// Remove empty end ancestors:\n\t// <a>fo[o</a><b><a><c>bar]</c></a></b>\n\t// becomes:\n\t// <a>fo[]</a><b><a>{}</a></b>\n\t// So we can remove <a> and <b>.\n\twhile ( endPos.parent.isEmpty ) {\n\t\tconst parentToRemove = endPos.parent;\n\n\t\tendPos = writer.createPositionBefore( parentToRemove );\n\n\t\twriter.remove( parentToRemove );\n\t}\n\n\t// Continue merging next level.\n\tmergeBranches( writer, startPos, endPos );\n}\n\nfunction shouldAutoparagraph( schema, position ) {\n\tconst isTextAllowed = schema.checkChild( position, '$text' );\n\tconst isParagraphAllowed = schema.checkChild( position, 'paragraph' );\n\n\treturn !isTextAllowed && isParagraphAllowed;\n}\n\n// Check if parents of two positions can be merged by checking if there are no limit/object\n// boundaries between those two positions.\n//\n// E.g. in <bQ><p>x[]</p></bQ><widget><caption>{}</caption></widget>\n// we'll check <p>, <bQ>, <widget> and <caption>.\n// Usually, widget and caption are marked as objects/limits in the schema, so in this case merging will be blocked.\nfunction checkCanBeMerged( leftPos, rightPos, schema ) {\n\tconst rangeToCheck = new Range( leftPos, rightPos );\n\n\tfor ( const value of rangeToCheck.getWalker() ) {\n\t\tif ( schema.isLimit( value.item ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction insertParagraph( writer, position, selection ) {\n\tconst paragraph = writer.createElement( 'paragraph' );\n\n\twriter.insert( paragraph, position );\n\n\tcollapseSelectionAt( writer, selection, writer.createPositionAt( paragraph, 0 ) );\n}\n\nfunction replaceEntireContentWithParagraph( writer, selection ) {\n\tconst limitElement = writer.model.schema.getLimitElement( selection );\n\n\twriter.remove( writer.createRangeIn( limitElement ) );\n\tinsertParagraph( writer, writer.createPositionAt( limitElement, 0 ), selection );\n}\n\n// We want to replace the entire content with a paragraph when:\n// * the entire content is selected,\n// * selection contains at least two elements,\n// * whether the paragraph is allowed in schema in the common ancestor.\nfunction shouldEntireContentBeReplacedWithParagraph( schema, selection ) {\n\tconst limitElement = schema.getLimitElement( selection );\n\n\tif ( !selection.containsEntireContent( limitElement ) ) {\n\t\treturn false;\n\t}\n\n\tconst range = selection.getFirstRange();\n\n\tif ( range.start.parent == range.end.parent ) {\n\t\treturn false;\n\t}\n\n\treturn schema.checkChild( limitElement, 'paragraph' );\n}\n\n// Helper function that sets the selection. Depending whether given `selection` is a document selection or not,\n// uses a different method to set it.\nfunction collapseSelectionAt( writer, selection, positionOrRange ) {\n\tif ( selection instanceof DocumentSelection ) {\n\t\twriter.setSelection( positionOrRange );\n\t} else {\n\t\tselection.setTo( positionOrRange );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/modifyselection\n */\n\nimport Position from '../position';\nimport TreeWalker from '../treewalker';\nimport Range from '../range';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\nimport DocumentSelection from '../documentselection';\n\nconst wordBoundaryCharacters = ' ,.?!:;\"-()';\n\n/**\n * Modifies the selection. Currently, the supported modifications are:\n *\n * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n * Possible values for `unit` are:\n *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n *  why `'character'` value is most natural and common method of modifying selection.\n *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n *  extension will include whole \"surrogate pair\".\n *  * `'word'` - moves selection by a whole word.\n *\n * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n *\n * **Note:** Use {@link module:engine/model/model~Model#modifySelection} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#modifySelection}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which\n * the selection modification should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection to modify.\n * @param {Object} [options]\n * @param {'forward'|'backward'} [options.direction='forward'] The direction in which the selection should be modified.\n * @param {'character'|'codePoint'|'word'} [options.unit='character'] The unit by which selection should be modified.\n */\nexport default function modifySelection( model, selection, options = {} ) {\n\tconst schema = model.schema;\n\tconst isForward = options.direction != 'backward';\n\tconst unit = options.unit ? options.unit : 'character';\n\n\tconst focus = selection.focus;\n\n\tconst walker = new TreeWalker( {\n\t\tboundaries: getSearchRange( focus, isForward ),\n\t\tsingleCharacters: true,\n\t\tdirection: isForward ? 'forward' : 'backward'\n\t} );\n\n\tconst data = { walker, schema, isForward, unit };\n\n\tlet next;\n\n\twhile ( ( next = walker.next() ) ) {\n\t\tif ( next.done ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = tryExtendingTo( data, next.value );\n\n\t\tif ( position ) {\n\t\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelectionFocus( position );\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tselection.setFocus( position );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n// Checks whether the selection can be extended to the the walker's next value (next position).\n// @param {{ walker, unit, isForward, schema }} data\n// @param {module:engine/view/treewalker~TreeWalkerValue} value\nfunction tryExtendingTo( data, value ) {\n\t// If found text, we can certainly put the focus in it. Let's just find a correct position\n\t// based on the unit.\n\tif ( value.type == 'text' ) {\n\t\tif ( data.unit === 'word' ) {\n\t\t\treturn getCorrectWordBreakPosition( data.walker, data.isForward );\n\t\t}\n\n\t\treturn getCorrectPosition( data.walker, data.unit, data.isForward );\n\t}\n\n\t// Entering an element.\n\tif ( value.type == ( data.isForward ? 'elementStart' : 'elementEnd' ) ) {\n\t\t// If it's an object, we can select it now.\n\t\tif ( data.schema.isObject( value.item ) ) {\n\t\t\treturn Position._createAt( value.item, data.isForward ? 'after' : 'before' );\n\t\t}\n\n\t\t// If text allowed on this position, extend to this place.\n\t\tif ( data.schema.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\treturn value.nextPosition;\n\t\t}\n\t}\n\t// Leaving an element.\n\telse {\n\t\t// If leaving a limit element, stop.\n\t\tif ( data.schema.isLimit( value.item ) ) {\n\t\t\t// NOTE: Fast-forward the walker until the end.\n\t\t\tdata.walker.skip( () => true );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If text allowed on this position, extend to this place.\n\t\tif ( data.schema.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\treturn value.nextPosition;\n\t\t}\n\t}\n}\n\n// Finds a correct position by walking in a text node and checking whether selection can be extended to given position\n// or should be extended further.\n//\n// @param {module:engine/model/treewalker~TreeWalker} walker\n// @param {String} unit The unit by which selection should be modified.\nfunction getCorrectPosition( walker, unit ) {\n\tconst textNode = walker.position.textNode;\n\n\tif ( textNode ) {\n\t\tconst data = textNode.data;\n\t\tlet offset = walker.position.offset - textNode.startOffset;\n\n\t\twhile ( isInsideSurrogatePair( data, offset ) || ( unit == 'character' && isInsideCombinedSymbol( data, offset ) ) ) {\n\t\t\twalker.next();\n\n\t\t\toffset = walker.position.offset - textNode.startOffset;\n\t\t}\n\t}\n\n\treturn walker.position;\n}\n\n// Finds a correct position of a word break by walking in a text node and checking whether selection can be extended to given position\n// or should be extended further.\n//\n// @param {module:engine/model/treewalker~TreeWalker} walker\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction getCorrectWordBreakPosition( walker, isForward ) {\n\tlet textNode = walker.position.textNode;\n\n\tif ( textNode ) {\n\t\tlet offset = walker.position.offset - textNode.startOffset;\n\n\t\twhile ( !isAtWordBoundary( textNode.data, offset, isForward ) && !isAtNodeBoundary( textNode, offset, isForward ) ) {\n\t\t\twalker.next();\n\n\t\t\t// Check of adjacent text nodes with different attributes (like BOLD).\n\t\t\t// Example          : 'foofoo []bar<$text bold=\"true\">bar</$text> bazbaz'\n\t\t\t// should expand to : 'foofoo [bar<$text bold=\"true\">bar</$text>] bazbaz'.\n\t\t\tconst nextNode = isForward ? walker.position.nodeAfter : walker.position.nodeBefore;\n\n\t\t\t// Scan only text nodes. Ignore inline elements (like `<softBreak>`).\n\t\t\tif ( nextNode && nextNode.is( 'text' ) ) {\n\t\t\t\t// Check boundary char of an adjacent text node.\n\t\t\t\tconst boundaryChar = nextNode.data.charAt( isForward ? 0 : nextNode.data.length - 1 );\n\n\t\t\t\t// Go to the next node if the character at the boundary of that node belongs to the same word.\n\t\t\t\tif ( !wordBoundaryCharacters.includes( boundaryChar ) ) {\n\t\t\t\t\t// If adjacent text node belongs to the same word go to it & reset values.\n\t\t\t\t\twalker.next();\n\n\t\t\t\t\ttextNode = walker.position.textNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toffset = walker.position.offset - textNode.startOffset;\n\t\t}\n\t}\n\n\treturn walker.position;\n}\n\nfunction getSearchRange( start, isForward ) {\n\tconst root = start.root;\n\tconst searchEnd = Position._createAt( root, isForward ? 'end' : 0 );\n\n\tif ( isForward ) {\n\t\treturn new Range( start, searchEnd );\n\t} else {\n\t\treturn new Range( searchEnd, start );\n\t}\n}\n\n// Checks if selection is on word boundary.\n//\n// @param {String} data The text node value to investigate.\n// @param {Number} offset Position offset.\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction isAtWordBoundary( data, offset, isForward ) {\n\t// The offset to check depends on direction.\n\tconst offsetToCheck = offset + ( isForward ? 0 : -1 );\n\n\treturn wordBoundaryCharacters.includes( data.charAt( offsetToCheck ) );\n}\n\n// Checks if selection is on node boundary.\n//\n// @param {module:engine/model/text~Text} textNode The text node to investigate.\n// @param {Number} offset Position offset.\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction isAtNodeBoundary( textNode, offset, isForward ) {\n\treturn offset === ( isForward ? textNode.endOffset : 0 );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/getselectedcontent\n */\n\n/**\n * Gets a clone of the selected content.\n *\n * For example, for the following selection:\n *\n * ```html\n * <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n * ```\n *\n * It will return a document fragment with such a content:\n *\n * ```html\n * <quote><h>st</h></quote><p>se</p>\n * ```\n *\n * @param {module:engine/model/model~Model} model The model in context of which\n * the selection modification should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection of which content will be returned.\n * @returns {module:engine/model/documentfragment~DocumentFragment}\n */\nexport default function getSelectedContent( model, selection ) {\n\treturn model.change( writer => {\n\t\tconst frag = writer.createDocumentFragment();\n\t\tconst range = selection.getFirstRange();\n\n\t\tif ( !range || range.isCollapsed ) {\n\t\t\treturn frag;\n\t\t}\n\n\t\tconst root = range.start.root;\n\t\tconst commonPath = range.start.getCommonPath( range.end );\n\t\tconst commonParent = root.getNodeByPath( commonPath );\n\n\t\t// ## 1st step\n\t\t//\n\t\t// First, we'll clone a fragment represented by a minimal flat range\n\t\t// containing the original range to be cloned.\n\t\t// E.g. let's consider such a range:\n\t\t//\n\t\t// <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n\t\t//\n\t\t// A minimal flat range containing this one is:\n\t\t//\n\t\t// <p>x</p>[<quote><p>y</p><h>first</h></quote><p>second</p>]<p>z</p>\n\t\t//\n\t\t// We can easily clone this structure, preserving e.g. the <quote> element.\n\t\tlet flatSubtreeRange;\n\n\t\tif ( range.start.parent == range.end.parent ) {\n\t\t\t// The original range is flat, so take it.\n\t\t\tflatSubtreeRange = range;\n\t\t} else {\n\t\t\tflatSubtreeRange = writer.createRange(\n\t\t\t\twriter.createPositionAt( commonParent, range.start.path[ commonPath.length ] ),\n\t\t\t\twriter.createPositionAt( commonParent, range.end.path[ commonPath.length ] + 1 )\n\t\t\t);\n\t\t}\n\n\t\tconst howMany = flatSubtreeRange.end.offset - flatSubtreeRange.start.offset;\n\n\t\t// Clone the whole contents.\n\t\tfor ( const item of flatSubtreeRange.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\t\twriter.appendText( item.data, item.getAttributes(), frag );\n\t\t\t} else {\n\t\t\t\twriter.append( item._clone( true ), frag );\n\t\t\t}\n\t\t}\n\n\t\t// ## 2nd step\n\t\t//\n\t\t// If the original range wasn't flat, then we need to remove the excess nodes from the both ends of the cloned fragment.\n\t\t//\n\t\t// For example, for the range shown in the 1st step comment, we need to remove these pieces:\n\t\t//\n\t\t// <quote>[<p>y</p>]<h>[fir]st</h></quote><p>se[cond]</p>\n\t\t//\n\t\t// So this will be the final copied content:\n\t\t//\n\t\t// <quote><h>st</h></quote><p>se</p>\n\t\t//\n\t\t// In order to do that, we remove content from these two ranges:\n\t\t//\n\t\t// [<quote><p>y</p><h>fir]st</h></quote><p>se[cond</p>]\n\t\tif ( flatSubtreeRange != range ) {\n\t\t\t// Find the position of the original range in the cloned fragment.\n\t\t\tconst newRange = range._getTransformedByMove( flatSubtreeRange.start, writer.createPositionAt( frag, 0 ), howMany )[ 0 ];\n\n\t\t\tconst leftExcessRange = writer.createRange( writer.createPositionAt( frag, 0 ), newRange.start );\n\t\t\tconst rightExcessRange = writer.createRange( newRange.end, writer.createPositionAt( frag, 'end' ) );\n\n\t\t\tremoveRangeContent( rightExcessRange, writer );\n\t\t\tremoveRangeContent( leftExcessRange, writer );\n\t\t}\n\n\t\treturn frag;\n\t} );\n}\n\n// After https://github.com/ckeditor/ckeditor5-engine/issues/690 is fixed,\n// this function will, most likely, be able to rewritten using getMinimalFlatRanges().\nfunction removeRangeContent( range, writer ) {\n\tconst parentsToCheck = [];\n\n\tArray.from( range.getItems( { direction: 'backward' } ) )\n\t\t// We should better store ranges because text proxies will lose integrity\n\t\t// with the text nodes when we'll start removing content.\n\t\t.map( item => writer.createRangeOn( item ) )\n\t\t// Filter only these items which are fully contained in the passed range.\n\t\t//\n\t\t// E.g. for the following range: [<quote><p>y</p><h>fir]st</h>\n\t\t// the walker will return the entire <h> element, when only the \"fir\" item inside it is fully contained.\n\t\t.filter( itemRange => {\n\t\t\t// We should be able to use Range.containsRange, but https://github.com/ckeditor/ckeditor5-engine/issues/691.\n\t\t\tconst contained =\n\t\t\t\t( itemRange.start.isAfter( range.start ) || itemRange.start.isEqual( range.start ) ) &&\n\t\t\t\t( itemRange.end.isBefore( range.end ) || itemRange.end.isEqual( range.end ) );\n\n\t\t\treturn contained;\n\t\t} )\n\t\t.forEach( itemRange => {\n\t\t\tparentsToCheck.push( itemRange.start.parent );\n\n\t\t\twriter.remove( itemRange );\n\t\t} );\n\n\t// Remove ancestors of the removed items if they turned to be empty now\n\t// (their whole content was contained in the range).\n\tparentsToCheck.forEach( parentToCheck => {\n\t\tlet parent = parentToCheck;\n\n\t\twhile ( parent.parent && parent.isEmpty ) {\n\t\t\tconst removeRange = writer.createRangeOn( parent );\n\n\t\t\tparent = parent.parent;\n\n\t\t\twriter.remove( removeRange );\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/selection-post-fixer\n */\n\nimport Range from '../range';\nimport Position from '../position';\n\n/**\n * Injects selection post-fixer to the model.\n *\n * The role of the selection post-fixer is to ensure that the selection is in a correct place\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct position means that:\n *\n * * All collapsed selection ranges are in a place where the {@link module:engine/model/schema~Schema}\n * allows a `$text`.\n * * None of the selection's non-collapsed ranges crosses a {@link module:engine/model/schema~Schema#isLimit limit element}\n * boundary (a range must be rooted within one limit element).\n * * Only {@link module:engine/model/schema~Schema#isObject object elements} can be selected from the outside\n * (e.g. `[<paragraph>foo</paragraph>]` is invalid). This rule applies independently to both selection ends, so this\n * selection is correct: `<paragraph>f[oo</paragraph><image></image>]`.\n *\n * If the position is not correct, the post-fixer will automatically correct it.\n *\n * ## Fixing a non-collapsed selection\n *\n * See as an example a selection that starts in a P1 element and ends inside the text of a TD element\n * (`[` and `]` are range boundaries and `(l)` denotes an element defined as `isLimit=true`):\n *\n *\t\troot\n *\t\t |- element P1\n *\t\t |   |- \"foo\"                                      root\n *\t\t |- element TABLE (l)                   P1         TABLE             P2\n *\t\t |   |- element TR (l)                 f o[o     TR      TR         b a r\n *\t\t |   |   |- element TD (l)                       TD      TD\n *\t\t |   |       |- \"aaa\"                          a]a a    b b b\n *\t\t |   |- element TR (l)\n *\t\t |   |   |- element TD (l)                           ||\n *\t\t |   |       |- \"bbb\"                                ||\n *\t\t |- element P2                                       VV\n *\t\t |   |- \"bar\"\n *\t\t                                                   root\n *\t\t                                        P1         TABLE]            P2\n *\t\t                                       f o[o     TR      TR         b a r\n *\t\t                                                 TD      TD\n *\t\t                                               a a a    b b b\n *\n * In the example above, the TABLE, TR and TD are defined as `isLimit=true` in the schema. The range which is not contained within\n * a single limit element must be expanded to select the outermost limit element. The range end is inside the text node of the TD element.\n * As the TD element is a child of the TR and TABLE elements, where both are defined as `isLimit=true` in the schema, the range must be\n * expanded to select the whole TABLE element.\n *\n * **Note** If the selection contains multiple ranges, the method returns a minimal set of ranges that are not intersecting after expanding\n * them to select `isLimit=true` elements.\n *\n * @param {module:engine/model/model~Model} model\n */\nexport function injectSelectionPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => selectionPostFixer( writer, model ) );\n}\n\n// The selection post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction selectionPostFixer( writer, model ) {\n\tconst selection = model.document.selection;\n\tconst schema = model.schema;\n\n\tconst ranges = [];\n\n\tlet wasFixed = false;\n\n\tfor ( const modelRange of selection.getRanges() ) {\n\t\t// Go through all ranges in selection and try fixing each of them.\n\t\t// Those ranges might overlap but will be corrected later.\n\t\tconst correctedRange = tryFixingRange( modelRange, schema );\n\n\t\tif ( correctedRange ) {\n\t\t\tranges.push( correctedRange );\n\t\t\twasFixed = true;\n\t\t} else {\n\t\t\tranges.push( modelRange );\n\t\t}\n\t}\n\n\t// If any of ranges were corrected update the selection.\n\tif ( wasFixed ) {\n\t\t// The above algorithm might create ranges that intersects each other when selection contains more then one range.\n\t\t// This is case happens mostly on Firefox which creates multiple ranges for selected table.\n\t\tlet fixedRanges = ranges;\n\n\t\t// Fixing selection with many ranges usually breaks the selection in Firefox. As only Firefox supports multiple selection ranges\n\t\t// we simply create one continuous range from fixed selection ranges (even if they are not adjacent).\n\t\tif ( ranges.length > 1 ) {\n\t\t\tconst selectionStart = ranges[ 0 ].start;\n\t\t\tconst selectionEnd = ranges[ ranges.length - 1 ].end;\n\n\t\t\tfixedRanges = [ new Range( selectionStart, selectionEnd ) ];\n\t\t}\n\n\t\twriter.setSelection( fixedRanges, { backward: selection.isBackward } );\n\t}\n}\n\n// Tries fixing a range if it's incorrect.\n//\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingRange( range, schema ) {\n\tif ( range.isCollapsed ) {\n\t\treturn tryFixingCollapsedRange( range, schema );\n\t}\n\n\treturn tryFixingNonCollapsedRage( range, schema );\n}\n\n// Tries to fix collapsed ranges.\n//\n// * Fixes situation when a range is in a place where $text is not allowed\n//\n// @param {module:engine/model/range~Range} range Collapsed range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingCollapsedRange( range, schema ) {\n\tconst originalPosition = range.start;\n\n\tconst nearestSelectionRange = schema.getNearestSelectionRange( originalPosition );\n\n\t// This might be null ie when editor data is empty.\n\t// In such cases there is no need to fix the selection range.\n\tif ( !nearestSelectionRange ) {\n\t\treturn null;\n\t}\n\n\tconst fixedPosition = nearestSelectionRange.start;\n\n\t// Fixed position is the same as original - no need to return corrected range.\n\tif ( originalPosition.isEqual( fixedPosition ) ) {\n\t\treturn null;\n\t}\n\n\t// Check single node selection (happens in tables).\n\tif ( fixedPosition.nodeAfter && schema.isLimit( fixedPosition.nodeAfter ) ) {\n\t\treturn new Range( fixedPosition, Position._createAfter( fixedPosition.nodeAfter ) );\n\t}\n\n\treturn new Range( fixedPosition );\n}\n\n// Tries to fix an expanded range.\n//\n// @param {module:engine/model/range~Range} range Expanded range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingNonCollapsedRage( range, schema ) {\n\tconst start = range.start;\n\tconst end = range.end;\n\n\tconst isTextAllowedOnStart = schema.checkChild( start, '$text' );\n\tconst isTextAllowedOnEnd = schema.checkChild( end, '$text' );\n\n\tconst startLimitElement = schema.getLimitElement( start );\n\tconst endLimitElement = schema.getLimitElement( end );\n\n\t// Ranges which both end are inside the same limit element (or root) might needs only minor fix.\n\tif ( startLimitElement === endLimitElement ) {\n\t\t// Range is valid when both position allows to place a text:\n\t\t// - <block>f[oobarba]z</block>\n\t\t// This would be \"fixed\" by a next check but as it will be the same it's better to return null so the selection stays the same.\n\t\tif ( isTextAllowedOnStart && isTextAllowedOnEnd ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Range that is on non-limit element (or is partially) must be fixed so it is placed inside the block around $text:\n\t\t// - [<block>foo</block>]    ->    <block>[foo]</block>\n\t\t// - [<block>foo]</block>    ->    <block>[foo]</block>\n\t\t// - <block>f[oo</block>]    ->    <block>f[oo]</block>\n\t\t// - [<block>foo</block><object></object>]    ->    <block>[foo</block><object></object>]\n\t\tif ( checkSelectionOnNonLimitElements( start, end, schema ) ) {\n\t\t\tconst isStartObject = start.nodeAfter && schema.isObject( start.nodeAfter );\n\t\t\tconst fixedStart = isStartObject ? null : schema.getNearestSelectionRange( start, 'forward' );\n\n\t\t\tconst isEndObject = end.nodeBefore && schema.isObject( end.nodeBefore );\n\t\t\tconst fixedEnd = isEndObject ? null : schema.getNearestSelectionRange( end, 'backward' );\n\n\t\t\t// The schema.getNearestSelectionRange might return null - if that happens use original position.\n\t\t\tconst rangeStart = fixedStart ? fixedStart.start : start;\n\t\t\tconst rangeEnd = fixedEnd ? fixedEnd.start : end;\n\n\t\t\treturn new Range( rangeStart, rangeEnd );\n\t\t}\n\t}\n\n\tconst isStartInLimit = startLimitElement && !startLimitElement.is( 'rootElement' );\n\tconst isEndInLimit = endLimitElement && !endLimitElement.is( 'rootElement' );\n\n\t// At this point we eliminated valid positions on text nodes so if one of range positions is placed inside a limit element\n\t// then the range crossed limit element boundaries and needs to be fixed.\n\tif ( isStartInLimit || isEndInLimit ) {\n\t\tconst bothInSameParent = ( start.nodeAfter && end.nodeBefore ) && start.nodeAfter.parent === end.nodeBefore.parent;\n\n\t\tconst expandStart = isStartInLimit && ( !bothInSameParent || !isInObject( start.nodeAfter, schema ) );\n\t\tconst expandEnd = isEndInLimit && ( !bothInSameParent || !isInObject( end.nodeBefore, schema ) );\n\n\t\t// Although we've already found limit element on start/end positions we must find the outer-most limit element.\n\t\t// as limit elements might be nested directly inside (ie table > tableRow > tableCell).\n\t\tlet fixedStart = start;\n\t\tlet fixedEnd = end;\n\n\t\tif ( expandStart ) {\n\t\t\tfixedStart = Position._createBefore( findOutermostLimitAncestor( startLimitElement, schema ) );\n\t\t}\n\n\t\tif ( expandEnd ) {\n\t\t\tfixedEnd = Position._createAfter( findOutermostLimitAncestor( endLimitElement, schema ) );\n\t\t}\n\n\t\treturn new Range( fixedStart, fixedEnd );\n\t}\n\n\t// Range was not fixed at this point so it is valid - ie it was placed around limit element already.\n\treturn null;\n}\n\n// Finds the outer-most ancestor.\n//\n// @param {module:engine/model/node~Node} startingNode\n// @param {module:engine/model/schema~Schema} schema\n// @param {String} expandToDirection Direction of expansion - either 'start' or 'end' of the range.\n// @returns {module:engine/model/node~Node}\nfunction findOutermostLimitAncestor( startingNode, schema ) {\n\tlet isLimitNode = startingNode;\n\tlet parent = isLimitNode;\n\n\t// Find outer most isLimit block as such blocks might be nested (ie. in tables).\n\twhile ( schema.isLimit( parent ) && parent.parent ) {\n\t\tisLimitNode = parent;\n\t\tparent = parent.parent;\n\t}\n\n\treturn isLimitNode;\n}\n\n// Checks whether any of range boundaries is placed around non-limit elements.\n//\n// @param {module:engine/model/position~Position} start\n// @param {module:engine/model/position~Position} end\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction checkSelectionOnNonLimitElements( start, end, schema ) {\n\tconst startIsOnBlock = ( start.nodeAfter && !schema.isLimit( start.nodeAfter ) ) || schema.checkChild( start, '$text' );\n\tconst endIsOnBlock = ( end.nodeBefore && !schema.isLimit( end.nodeBefore ) ) || schema.checkChild( end, '$text' );\n\n\t// We should fix such selection when one of those nodes needs fixing.\n\treturn startIsOnBlock || endIsOnBlock;\n}\n\n// Checks if node exists and if it's an object.\n//\n// @param {module:engine/model/node~Node} node\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction isInObject( node, schema ) {\n\treturn node && schema.isObject( node );\n}\n\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/model\n */\n\nimport Batch from './batch';\nimport Writer from './writer';\nimport Schema from './schema';\nimport Document from './document';\nimport MarkerCollection from './markercollection';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ModelElement from './element';\nimport ModelRange from './range';\nimport ModelPosition from './position';\nimport ModelSelection from './selection';\n\nimport insertContent from './utils/insertcontent';\nimport deleteContent from './utils/deletecontent';\nimport modifySelection from './utils/modifyselection';\nimport getSelectedContent from './utils/getselectedcontent';\nimport { injectSelectionPostFixer } from './utils/selection-post-fixer';\n\n/**\n * Editor's data model. Read about the model in the\n * {@glink framework/guides/architecture/editing-engine engine architecture guide}.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Model {\n\tconstructor() {\n\t\t/**\n\t\t * Model's marker collection.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis.markers = new MarkerCollection();\n\n\t\t/**\n\t\t * Model's document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/document~Document}\n\t\t */\n\t\tthis.document = new Document( this );\n\n\t\t/**\n\t\t * Model's schema.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/schema~Schema}\n\t\t */\n\t\tthis.schema = new Schema();\n\n\t\t/**\n\t\t * All callbacks added by {@link module:engine/model/model~Model#change} or\n\t\t * {@link module:engine/model/model~Model#enqueueChange} methods waiting to be executed.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Function>}\n\t\t */\n\t\tthis._pendingChanges = [];\n\n\t\t/**\n\t\t * The last created and currently used writer instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/writer~Writer}\n\t\t */\n\t\tthis._currentWriter = null;\n\n\t\t[ 'insertContent', 'deleteContent', 'modifySelection', 'getSelectedContent', 'applyOperation' ]\n\t\t\t.forEach( methodName => this.decorate( methodName ) );\n\n\t\t// Adding operation validation with `highest` priority, so it is called before any other feature would like\n\t\t// to do anything with the operation. If the operation has incorrect parameters it should throw on the earliest occasion.\n\t\tthis.on( 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\toperation._validate();\n\t\t}, { priority: 'highest' } );\n\n\t\t// Register some default abstract entities.\n\t\tthis.schema.register( '$root', {\n\t\t\tisLimit: true\n\t\t} );\n\t\tthis.schema.register( '$block', {\n\t\t\tallowIn: '$root',\n\t\t\tisBlock: true\n\t\t} );\n\t\tthis.schema.register( '$text', {\n\t\t\tallowIn: '$block',\n\t\t\tisInline: true\n\t\t} );\n\t\tthis.schema.register( '$clipboardHolder', {\n\t\t\tallowContentOf: '$root',\n\t\t\tisLimit: true\n\t\t} );\n\t\tthis.schema.extend( '$text', { allowIn: '$clipboardHolder' } );\n\n\t\t// An element needed by the `upcastElementToMarker` converter.\n\t\t// This element temporarily represents a marker boundary during the conversion process and is removed\n\t\t// at the end of the conversion. `UpcastDispatcher` or at least `Conversion` class looks like a\n\t\t// better place for this registration but both know nothing about `Schema`.\n\t\tthis.schema.register( '$marker' );\n\t\tthis.schema.addChildCheck( ( context, childDefinition ) => {\n\t\t\tif ( childDefinition.name === '$marker' ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} );\n\n\t\tinjectSelectionPostFixer( this );\n\t}\n\n\t/**\n\t * The `change()` method is the primary way of changing the model. You should use it to modify all document nodes\n\t * (including detached nodes – i.e. nodes not added to the {@link module:engine/model/model~Model#document model document}),\n\t * the {@link module:engine/model/document~Document#selection document's selection}, and\n\t * {@link module:engine/model/model~Model#markers model markers}.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t} );\n\t *\n\t * All changes inside the change block use the same {@link module:engine/model/batch~Batch} so they are combined\n\t * into a single undo step.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' ); // foo.\n\t *\n\t *\t\t\tmodel.change( writer => {\n\t *\t\t\t\twriter.insertText( 'bar', paragraph, 'end' ); // foobar.\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.insertText( 'bom', paragraph, 'end' ); // foobarbom.\n\t *\t\t} );\n\t *\n\t * The callback of the `change()` block is executed synchronously.\n\t *\n\t * You can also return a value from the change block.\n\t *\n\t *\t\tconst img = model.change( writer => {\n\t *\t\t\treturn writer.createElement( 'img' );\n\t *\t\t} );\n\t *\n\t * @see #enqueueChange\n\t * @param {Function} callback Callback function which may modify the model.\n\t * @returns {*} Value returned by the callback.\n\t */\n\tchange( callback ) {\n\t\tif ( this._pendingChanges.length === 0 ) {\n\t\t\t// If this is the outermost block, create a new batch and start `_runPendingChanges` execution flow.\n\t\t\tthis._pendingChanges.push( { batch: new Batch(), callback } );\n\n\t\t\treturn this._runPendingChanges()[ 0 ];\n\t\t} else {\n\t\t\t// If this is not the outermost block, just execute the callback.\n\t\t\treturn callback( this._currentWriter );\n\t\t}\n\t}\n\n\t/**\n\t * The `enqueueChange()` method performs similar task as the {@link #change `change()` method}, with two major differences.\n\t *\n\t * First, the callback of `enqueueChange()` is executed when all other enqueued changes are done. It might be executed\n\t * immediately if it is not nested in any other change block, but if it is nested in another (enqueue)change block,\n\t * it will be delayed and executed after the outermost block.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconsole.log( 1 );\n\t *\n\t *\t\t\tmodel.enqueueChange( writer => {\n\t *\t\t\t\tconsole.log( 2 );\n\t *\t\t\t} );\n\t *\n\t * \t\t\tconsole.log( 3 );\n\t *\t\t} ); // Will log: 1, 3, 2.\n\t *\n\t * Second, it lets you define the {@link module:engine/model/batch~Batch} into which you want to add your changes.\n\t * By default, a new batch is created. In the sample above, `change` and `enqueueChange` blocks use a different\n\t * batch (and different {@link module:engine/model/writer~Writer} since each of them operates on the separate batch).\n\t *\n\t * When using the `enqueueChange()` block you can also add some changes to the batch you used before.\n\t *\n\t *\t\tmodel.enqueueChange( batch, writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t} );\n\t *\n\t * The batch instance can be obtained from {@link module:engine/model/writer~Writer#batch the writer}.\n\t *\n\t * @param {module:engine/model/batch~Batch|'transparent'|'default'} batchOrType Batch or batch type should be used in the callback.\n\t * If not defined, a new batch will be created.\n\t * @param {Function} callback Callback function which may modify the model.\n\t */\n\tenqueueChange( batchOrType, callback ) {\n\t\tif ( typeof batchOrType === 'string' ) {\n\t\t\tbatchOrType = new Batch( batchOrType );\n\t\t} else if ( typeof batchOrType == 'function' ) {\n\t\t\tcallback = batchOrType;\n\t\t\tbatchOrType = new Batch();\n\t\t}\n\n\t\tthis._pendingChanges.push( { batch: batchOrType, callback } );\n\n\t\tif ( this._pendingChanges.length == 1 ) {\n\t\t\tthis._runPendingChanges();\n\t\t}\n\t}\n\n\t/**\n\t * {@link module:utils/observablemixin~ObservableMixin#decorate Decorated} function for applying\n\t * {@link module:engine/model/operation/operation~Operation operations} to the model.\n\t *\n\t * This is a low-level way of changing the model. It is exposed for very specific use cases (like the undo feature).\n\t * Normally, to modify the model, you will want to use {@link module:engine/model/writer~Writer `Writer`}.\n\t * See also {@glink framework/guides/architecture/editing-engine#changing-the-model Changing the model} section\n\t * of the {@glink framework/guides/architecture/editing-engine Editing architecture} guide.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation The operation to apply.\n\t */\n\tapplyOperation( operation ) {\n\t\toperation._execute();\n\t}\n\n\t/**\n\t * Inserts content at the position in the editor specified by the selection, as one would expect the paste\n\t * functionality to work.\n\t *\n\t * This is a high-level method. It takes the {@link #schema schema} into consideration when inserting\n\t * the content, clears the given selection's content before inserting nodes and moves the selection\n\t * to its target position at the end of the process.\n\t * It can split elements, merge them, wrap bare text nodes with paragraphs, etc. &mdash; just like the\n\t * pasting feature should do.\n\t *\n\t * For lower-level methods see {@link module:engine/model/writer~Writer `Writer`}.\n\t *\n\t * This method, unlike {@link module:engine/model/writer~Writer `Writer`}'s methods, does not have to be used\n\t * inside a {@link #change `change()` block}.\n\t *\n\t * # Conversion and schema\n\t *\n\t * Inserting elements and text nodes into the model is not enough to make CKEditor 5 render that content\n\t * to the user. CKEditor 5 implements a model-view-controller architecture and what `model.insertContent()` does\n\t * is only adding nodes to the model. Additionally, you need to define\n\t * {@glink framework/guides/architecture/editing-engine#conversion converters} between the model and view\n\t * and define those nodes in the {@glink framework/guides/architecture/editing-engine#schema schema}.\n\t *\n\t * So, while this method may seem similar to CKEditor 4 `editor.insertHtml()` (in fact, both methods\n\t * are used for paste-like content insertion), the CKEditor 5 method cannot be use to insert arbitrary HTML\n\t * unless converters are defined for all elements and attributes in that HTML.\n\t *\n\t * # Examples\n\t *\n\t * Using `insertContent()` with a manually created model structure:\n\t *\n\t *\t\t// Let's create a document fragment containing such content as:\n\t *\t\t//\n\t *\t\t// <paragrap>foo</paragraph>\n\t *\t\t// <blockQuote>\n\t *\t\t//    <paragraph>bar</paragraph>\n\t *\t\t// </blockQuote>\n\t *\t\tconst docFrag = editor.model.change( writer => {\n\t *\t\t\tconst p1 = writer.createElement( 'paragraph' );\n\t *\t\t\tconst p2 = writer.createElement( 'paragraph' );\n\t *\t\t\tconst blockQuote = writer.createElement( 'blockQuote' );\n\t *\t\t\tconst docFrag = writer.createDocumentFragment();\n\t *\n\t *\t\t\twriter.append( p1, docFrag );\n\t *\t\t\twriter.append( blockQuote, docFrag );\n\t *\t\t\twriter.append( p2, blockQuote );\n\t *\t\t\twriter.insertText( 'foo', p1 );\n\t *\t\t\twriter.insertText( 'bar', p2 );\n\t *\n\t *\t\t\treturn docFrag;\n\t *\t\t} );\n\t *\n\t *\t\t// insertContent() does not have to be used in a change() block. It can, though,\n\t *\t\t// so this code could be moved to the callback defined above.\n\t *\t\teditor.model.insertContent( docFrag );\n\t *\n\t * Using `insertContent()` with an HTML string converted to a model document fragment (similar to the pasting mechanism):\n\t *\n\t *\t\t// You can create your own HtmlDataProcessor instance or use editor.data.processor\n\t *\t\t// if you have not overridden the default one (which is the HtmlDataProcessor instance).\n\t *\t\tconst htmlDP = new HtmlDataProcessor();\n\t *\n\t *\t\t// Convert an HTML string to a view document fragment:\n\t *\t\tconst viewFragment = htmlDP.toView( htmlString );\n\t *\n\t *\t\t// Convert the view document fragment to a model document fragment\n\t *\t\t// in the context of $root. This conversion takes the schema into\n\t *\t\t// account so if, for example, the view document fragment contained a bare text node,\n\t *\t\t// this text node cannot be a child of $root, so it will be automatically\n\t *\t\t// wrapped with a <paragraph>. You can define the context yourself (in the second parameter),\n\t *\t\t// and e.g. convert the content like it would happen in a <paragraph>.\n\t *\t\t// Note: The clipboard feature uses a custom context called $clipboardHolder\n\t *\t\t// which has a loosened schema.\n\t *\t\tconst modelFragment = editor.data.toModel( viewFragment );\n\t *\n\t *\t\teditor.model.insertContent( modelFragment );\n\t *\n\t * By default this method will use the document selection but it can also be used with a position, range or selection instance.\n\t *\n\t *\t\t// Insert text at the current document selection position.\n\t *\t\teditor.model.change( writer => {\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ) );\n\t *\t\t} );\n\t *\n\t *\t\t// Insert text at a given position - the document selection will not be modified.\n\t *\t\teditor.model.change( writer => {\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ), doc.getRoot(), 2 );\n\t *\n\t *\t\t\t// Which is a shorthand for:\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ), writer.createPositionAt( doc.getRoot(), 2 ) );\n\t *\t\t} );\n\t *\n\t * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable`\n\t * it will be moved to the target position (where the document selection should be moved after the insertion).\n\t *\n\t *\t\teditor.model.change( writer => {\n\t *\t\t\t// Insert text replacing the given selection instance.\n\t *\t\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ), selection );\n\t *\n\t *\t\t\t// insertContent() modifies the passed selection instance so it can be used to set the document selection.\n\t *\t\t\t// Note: This is not necessary when you passed the document selection to insertContent().\n\t *\t\t\twriter.setSelection( selection );\n\t *\t\t} );\n\t *\n\t * @fires insertContent\n\t * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n\t * @param {module:engine/model/selection~Selectable} [selectable=model.document.selection]\n\t * The selection into which the content should be inserted. If not provided the current model document selection will be used.\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] To be used when a model item was passed as `selectable`.\n\t * This param defines a position in relation to that item.\n\t * @returns {module:engine/model/range~Range} Range which contains all the performed changes. This is a range that, if removed,\n\t * would return the model to the state before the insertion. If no changes were preformed by `insertContent`, returns a range collapsed\n\t * at the insertion position.\n\t */\n\tinsertContent( content, selectable, placeOrOffset ) {\n\t\treturn insertContent( this, content, selectable, placeOrOffset );\n\t}\n\n\t/**\n\t * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n\t *\n\t * **Note:** For the sake of predictability, the resulting selection should always be collapsed.\n\t * In cases where a feature wants to modify deleting behavior so selection isn't collapsed\n\t * (e.g. a table feature may want to keep row selection after pressing <kbd>Backspace</kbd>),\n\t * then that behavior should be implemented in the view's listener. At the same time, the table feature\n\t * will need to modify this method's behavior too, e.g. to \"delete contents and then collapse\n\t * the selection inside the last selected cell\" or \"delete the row and collapse selection somewhere near\".\n\t * That needs to be done in order to ensure that other features which use `deleteContent()` will work well with tables.\n\t *\n\t * @fires deleteContent\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * Selection of which the content should be deleted.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\n\t *\n\t * For example `<heading1>x[x</heading1><paragraph>y]y</paragraph>` will become:\n\t *\n\t * * `<heading1>x^y</heading1>` with the option disabled (`leaveUnmerged == false`)\n\t * * `<heading1>x^</heading1><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n\t *\n\t * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n\t * elements will not be merged.\n\t *\n\t * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\n\t * paragraph when the entire content was selected.\n\t *\n\t * For example `<heading1>[x</heading1><paragraph>y]</paragraph>` will become:\n\t *\n\t * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n\t * * `<heading1>^</heading1>` with enabled (`doNotResetEntireContent == true`)\n\t *\n\t * @param {Boolean} [options.doNotAutoparagraph=false] Whether to create a paragraph if after content deletion selection is moved\n\t * to a place where text cannot be inserted.\n\t *\n\t * For example `<paragraph>x</paragraph>[<image src=\"foo.jpg\"></image>]` will become:\n\t *\n\t * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n\t * * `<paragraph>x[]</paragraph>` with the option enabled (`doNotAutoparagraph == true`).\n\t *\n\t * **Note:** if there is no valid position for the selection, the paragraph will always be created:\n\t *\n\t * `[<image src=\"foo.jpg\"></image>]` -> `<paragraph>[]</paragraph>`.\n\t */\n\tdeleteContent( selection, options ) {\n\t\tdeleteContent( this, selection, options );\n\t}\n\n\t/**\n\t * Modifies the selection. Currently, the supported modifications are:\n\t *\n\t * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n\t * Possible values for `unit` are:\n\t *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n\t *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n\t *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n\t *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n\t *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n\t *  why `'character'` value is most natural and common method of modifying selection.\n\t *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n\t *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n\t *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n\t *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n\t *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n\t *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n\t *  extension will include whole \"surrogate pair\".\n\t *  * `'word'` - moves selection by a whole word.\n\t *\n\t * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n\t *\n\t * @fires modifySelection\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * The selection to modify.\n\t * @param {Object} [options]\n\t * @param {'forward'|'backward'} [options.direction='forward'] The direction in which the selection should be modified.\n\t * @param {'character'|'codePoint'|'word'} [options.unit='character'] The unit by which selection should be modified.\n\t */\n\tmodifySelection( selection, options ) {\n\t\tmodifySelection( this, selection, options );\n\t}\n\n\t/**\n\t * Gets a clone of the selected content.\n\t *\n\t * For example, for the following selection:\n\t *\n\t * ```html\n\t * <paragraph>x</paragraph>\n\t * <blockQuote>\n\t *\t<paragraph>y</paragraph>\n\t *\t<heading1>fir[st</heading1>\n\t * </blockQuote>\n\t * <paragraph>se]cond</paragraph>\n\t * <paragraph>z</paragraph>\n\t * ```\n\t *\n\t * It will return a document fragment with such a content:\n\t *\n\t * ```html\n\t * <blockQuote>\n\t *\t<heading1>st</heading1>\n\t * </blockQuote>\n\t * <paragraph>se</paragraph>\n\t * ```\n\t *\n\t * @fires getSelectedContent\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * The selection of which content will be returned.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tgetSelectedContent( selection ) {\n\t\treturn getSelectedContent( this, selection );\n\t}\n\n\t/**\n\t * Checks whether the given {@link module:engine/model/range~Range range} or\n\t * {@link module:engine/model/element~Element element} has any meaningful content.\n\t *\n\t * Meaningful content is:\n\t *\n\t * * any text node (`options.ignoreWhitespaces` allows controlling whether this text node must also contain\n\t * any non-whitespace characters),\n\t * * or any {@link module:engine/model/schema~Schema#isObject object element},\n\t * * or any {@link module:engine/model/markercollection~Marker marker} which\n\t * {@link module:engine/model/markercollection~Marker#_affectsData affects data}.\n\t *\n\t * This means that a range containing an empty `<paragraph></paragraph>` is not considered to have a meaningful content.\n\t * However, a range containing an `<image></image>` (which would normally be marked in the schema as an object element)\n\t * is considered non-empty.\n\t *\n\t * @param {module:engine/model/range~Range|module:engine/model/element~Element} rangeOrElement Range or element to check.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.ignoreWhitespaces] Whether text node with whitespaces only should be considered empty.\n\t * @returns {Boolean}\n\t */\n\thasContent( rangeOrElement, options ) {\n\t\tconst range = rangeOrElement instanceof ModelElement ? ModelRange._createIn( rangeOrElement ) : rangeOrElement;\n\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if there are any markers which affects data in this given range.\n\t\tfor ( const intersectingMarker of this.markers.getMarkersIntersectingRange( range ) ) {\n\t\t\tif ( intersectingMarker.affectsData ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst { ignoreWhitespaces = false } = options || {};\n\n\t\tfor ( const item of range.getItems() ) {\n\t\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\t\tif ( !ignoreWhitespaces ) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if ( item.data.search( /\\S/ ) !== -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else if ( this.schema.isObject( item ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Creates a position from the given root and path in that root.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionFromPath `Writer#createPositionFromPath()`}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionFromPath( root, path, stickiness ) {\n\t\treturn new ModelPosition( root, path, stickiness );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/model/position~Position position},\n\t * * a parent element and offset in that element,\n\t * * a parent element and `'end'` (the position will be set at the end of that element),\n\t * * a {@link module:engine/model/item~Item model item} and `'before'` or `'after'`\n\t * (the position will be set before or after the given model item).\n\t *\n\t * This method is a shortcut to other factory methods such as:\n\t *\n\t * * {@link module:engine/model/model~Model#createPositionBefore `createPositionBefore()`},\n\t * * {@link module:engine/model/model~Model#createPositionAfter `createPositionAfter()`}.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionAt `Writer#createPositionAt()`},\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn ModelPosition._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionAfter `Writer#createPositionAfter()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn ModelPosition._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionBefore `Writer#createPositionBefore()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn ModelPosition._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from the `start` position to the `end` position.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createRange `Writer#createRange()`}:\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconst range = writer.createRange( start, end );\n\t *\t\t} );\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, the range will be collapsed\n\t * to the `start` position.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new ModelRange( start, end );\n\t}\n\n\t/**\n\t * Creates a range inside the given element which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createRangeIn `Writer#createRangeIn()`}:\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconst range = writer.createRangeIn( paragraph );\n\t *\t\t} );\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn ModelRange._createIn( element );\n\t}\n\n\t/**\n\t * Creates a range that starts before the given {@link module:engine/model/item~Item model item} and ends after it.\n\t *\n\t * Note: This method is also available on `writer` instance as\n\t * {@link module:engine/model/writer~Writer#createRangeOn `Writer.createRangeOn()`}:\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconst range = writer.createRangeOn( paragraph );\n\t *\t\t} );\n\t *\n\t * @param {module:engine/model/item~Item} item\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn ModelRange._createOn( item );\n\t}\n\n\t/**\n\t * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n\t * or creates an empty selection if no arguments were passed.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createSelection `Writer#createSelection()`}.\n\t *\n\t *\t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\tconst selection = writer.createSelection( documentSelection );\n\t *\n\t *\t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates selection at the given offset in the given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t *\t\t// Additional options (`'backward'`) can be specified as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @returns {module:engine/model/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new ModelSelection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/batch~Batch} instance.\n\t *\n\t * **Note:** In most cases creating a batch instance is not necessary as they are created when using:\n\t *\n\t * * {@link #change `change()`},\n\t * * {@link #enqueueChange `enqueueChange()`}.\n\t *\n\t * @param {'transparent'|'default'} [type='default'] The type of the batch.\n\t * @returns {module:engine/model/batch~Batch}\n\t */\n\tcreateBatch( type ) {\n\t\treturn new Batch( type );\n\t}\n\n\t/**\n\t * Removes all events listeners set by model instance and destroys {@link module:engine/model/document~Document}.\n\t */\n\tdestroy() {\n\t\tthis.document.destroy();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Common part of {@link module:engine/model/model~Model#change} and {@link module:engine/model/model~Model#enqueueChange}\n\t * which calls callbacks and returns array of values returned by these callbacks.\n\t *\n\t * @private\n\t * @returns {Array.<*>} Array of values returned by callbacks.\n\t */\n\t_runPendingChanges() {\n\t\tconst ret = [];\n\n\t\tthis.fire( '_beforeChanges' );\n\n\t\twhile ( this._pendingChanges.length ) {\n\t\t\t// Create a new writer using batch instance created for this chain of changes.\n\t\t\tconst currentBatch = this._pendingChanges[ 0 ].batch;\n\t\t\tthis._currentWriter = new Writer( this, currentBatch );\n\n\t\t\t// Execute changes callback and gather the returned value.\n\t\t\tconst callbackReturnValue = this._pendingChanges[ 0 ].callback( this._currentWriter );\n\t\t\tret.push( callbackReturnValue );\n\n\t\t\tthis.document._handleChangeBlock( this._currentWriter );\n\n\t\t\tthis._pendingChanges.shift();\n\t\t\tthis._currentWriter = null;\n\t\t}\n\n\t\tthis.fire( '_afterChanges' );\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Fired when entering the outermost {@link module:engine/model/model~Model#enqueueChange} or\n\t * {@link module:engine/model/model~Model#change} block.\n\t *\n\t * @protected\n\t * @event _beforeChanges\n\t */\n\n\t/**\n\t * Fired when leaving the outermost {@link module:engine/model/model~Model#enqueueChange} or\n\t * {@link module:engine/model/model~Model#change} block.\n\t *\n\t * @protected\n\t * @event _afterChanges\n\t */\n\n\t/**\n\t * Fired every time any {@link module:engine/model/operation/operation~Operation operation} is applied on the model\n\t * using {@link #applyOperation}.\n\t *\n\t * Note that this event is suitable only for very specific use-cases. Use it if you need to listen to every single operation\n\t * applied on the document. However, in most cases {@link module:engine/model/document~Document#event:change} should\n\t * be used.\n\t *\n\t * A few callbacks are already added to this event by engine internal classes:\n\t *\n\t * * with `highest` priority operation is validated,\n\t * * with `normal` priority operation is executed,\n\t * * with `low` priority the {@link module:engine/model/document~Document} updates its version,\n\t * * with `low` priority {@link module:engine/model/liveposition~LivePosition} and {@link module:engine/model/liverange~LiveRange}\n\t * update themselves.\n\t *\n\t * @event applyOperation\n\t * @param {Array} args Arguments of the `applyOperation` which is an array with a single element - applied\n\t * {@link module:engine/model/operation/operation~Operation operation}.\n\t */\n\n\t/**\n\t * Event fired when {@link #insertContent} method is called.\n\t *\n\t * The {@link #insertContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * **Note** The `selectable` parameter for the {@link #insertContent} is optional. When `undefined` value is passed the method uses\n\t * `model.document.selection`.\n\t *\n\t * @event insertContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #deleteContent} method is called.\n\t *\n\t * The {@link #deleteContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event deleteContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #modifySelection} method is called.\n\t *\n\t * The {@link #modifySelection default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event modifySelection\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #getSelectedContent} method is called.\n\t *\n\t * The {@link #getSelectedContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event getSelectedContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n}\n\nmix( Model, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editingkeystrokehandler\n */\n\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+Z', 'undo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Y', 'redo' );\n *\n * @extends module:utils/keystrokehandler~KeystrokeHandler\n */\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * The handler can be specified as a command name or a callback.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function|String} callback If a string is passed, then the keystroke will\n\t * {@link module:core/editor/editor~Editor#execute execute a command}.\n\t * If a function, then it will be called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tif ( typeof callback == 'string' ) {\n\t\t\tconst commandName = callback;\n\n\t\t\tcallback = ( evtData, cancel ) => {\n\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\tcancel();\n\t\t\t};\n\t\t}\n\n\t\tsuper.set( keystroke, callback, options );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/editor\n */\n\nimport Config from '@ckeditor/ckeditor5-utils/src/config';\nimport EditingController from '@ckeditor/ckeditor5-engine/src/controller/editingcontroller';\nimport PluginCollection from '../plugincollection';\nimport CommandCollection from '../commandcollection';\nimport Locale from '@ckeditor/ckeditor5-utils/src/locale';\nimport DataController from '@ckeditor/ckeditor5-engine/src/controller/datacontroller';\nimport Conversion from '@ckeditor/ckeditor5-engine/src/conversion/conversion';\nimport Model from '@ckeditor/ckeditor5-engine/src/model/model';\nimport EditingKeystrokeHandler from '../editingkeystrokehandler';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Class representing a basic, generic editor.\n *\n * Check out the list of its subclasses to learn about specific editor implementations.\n *\n * All editor implementations (like {@link module:editor-classic/classiceditor~ClassicEditor} or\n * {@link module:editor-inline/inlineeditor~InlineEditor}) should extend this class. They can add their\n * own methods and properties.\n *\n * When you are implementing a plugin, then this editor represents the API\n * which your plugin can expect to get when using its {@link module:core/plugin~Plugin#editor} property.\n *\n * This API should be sufficient in order to implement the \"editing\" part of your feature\n * (schema definition, conversion, commands, keystrokes, etc.).\n * It does not define the editor UI, which is available only if the\n * the specific editor implements also the {@link module:core/editor/editorwithui~EditorWithUI} interface\n * (as most editor implementations do).\n *\n * @abstract\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Editor {\n\t/**\n\t * Creates a new instance of the Editor class.\n\t *\n\t * Usually, not to be used directly. See the static {@link module:core/editor/editor~Editor.create `create()`} method.\n\t *\n\t * @param {Object} [config] The editor config.\n\t */\n\tconstructor( config ) {\n\t\tconst availablePlugins = this.constructor.builtinPlugins;\n\n\t\t/**\n\t\t * Holds all configurations specific to this editor instance.\n\t\t *\n\t\t *\t\teditor.config.get( 'image.toolbar' );\n\t\t *\t\t// -> [ 'imageStyle:full', 'imageStyle:side', '|', 'imageTextAlternative' ]\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/config~Config}\n\t\t */\n\t\tthis.config = new Config( config, this.constructor.defaultConfig );\n\n\t\tthis.config.define( 'plugins', availablePlugins );\n\n\t\t/**\n\t\t * The plugins loaded and in use by this editor instance.\n\t\t *\n\t\t *\t\teditor.plugins.get( 'Clipboard' ); // -> instance of the Clipboard plugin.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/plugincollection~PluginCollection}\n\t\t */\n\t\tthis.plugins = new PluginCollection( this, availablePlugins );\n\n\t\t/**\n\t\t * Commands registered to the editor.\n\t\t *\n\t\t * Use the shorthand {@link #execute `editor.execute()`} method to execute commands:\n\t\t *\n\t\t *\t\t// Execute the bold command:\n\t\t *\t\teditor.execute( 'bold' );\n\t\t *\n\t\t *\t\t// Check the state of the bold command:\n\t\t *\t\teditor.commands.get( 'bold' ).value;\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/commandcollection~CommandCollection}\n\t\t */\n\t\tthis.commands = new CommandCollection();\n\n\t\tconst languageConfig = this.config.get( 'language' ) || {};\n\n\t\t/**\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = new Locale( {\n\t\t\tuiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n\t\t\tcontentLanguage: this.config.get( 'language.content' )\n\t\t} );\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method #t\n\t\t */\n\t\tthis.t = this.locale.t;\n\n\t\t/**\n\t\t * Indicates the editor life-cycle state.\n\t\t *\n\t\t * The editor is in one of the following states:\n\t\t *\n\t\t * * `initializing` - during the editor initialization (before {@link module:core/editor/editor~Editor.create `Editor.create()`})\n\t\t * finished its job,\n\t\t * * `ready` - after the promise returned by the {@link module:core/editor/editor~Editor.create `Editor.create()`}\n\t\t * method is resolved,\n\t\t * * `destroyed` - once the {@link #destroy `editor.destroy()`} method was called.\n\t\t *\n\t\t * @observable\n\t\t * @member {'initializing'|'ready'|'destroyed'} #state\n\t\t */\n\t\tthis.set( 'state', 'initializing' );\n\t\tthis.once( 'ready', () => ( this.state = 'ready' ), { priority: 'high' } );\n\t\tthis.once( 'destroy', () => ( this.state = 'destroyed' ), { priority: 'high' } );\n\n\t\t/**\n\t\t * Defines whether this editor is in read-only mode.\n\t\t *\n\t\t * In read-only mode the editor {@link #commands commands} are disabled so it is not possible\n\t\t * to modify the document by using them. Also, the editable element(s) become non-editable.\n\t\t *\n\t\t * In order to make the editor read-only, you can set this value directly:\n\t\t *\n\t\t *\t\teditor.isReadOnly = true;\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * The editor's model.\n\t\t *\n\t\t * The central point of the editor's abstract data model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = new Model();\n\n\t\t/**\n\t\t * The {@link module:engine/controller/datacontroller~DataController data controller}.\n\t\t * Used e.g. for setting and retrieving editor data.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/datacontroller~DataController}\n\t\t */\n\t\tthis.data = new DataController( this.model );\n\n\t\t/**\n\t\t * The {@link module:engine/controller/editingcontroller~EditingController editing controller}.\n\t\t * Controls user input and rendering the content for editing.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/editingcontroller~EditingController}\n\t\t */\n\t\tthis.editing = new EditingController( this.model );\n\t\tthis.editing.view.document.bind( 'isReadOnly' ).to( this );\n\n\t\t/**\n\t\t * Conversion manager through which you can register model to view and view to model converters.\n\t\t *\n\t\t * See {@link module:engine/conversion/conversion~Conversion}'s documentation to learn how to add converters.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/conversion~Conversion}\n\t\t */\n\t\tthis.conversion = new Conversion( [ this.editing.downcastDispatcher, this.data.downcastDispatcher ], this.data.upcastDispatcher );\n\t\tthis.conversion.addAlias( 'dataDowncast', this.data.downcastDispatcher );\n\t\tthis.conversion.addAlias( 'editingDowncast', this.editing.downcastDispatcher );\n\n\t\t/**\n\t\t * Instance of the {@link module:core/editingkeystrokehandler~EditingKeystrokeHandler}.\n\t\t *\n\t\t * It allows setting simple keystrokes:\n\t\t *\n\t\t *\t\t// Execute the bold command on Ctrl+E:\n\t\t *\t\teditor.keystrokes.set( 'Ctrl+E', 'bold' );\n\t\t *\n\t\t *\t\t// Execute your own callback:\n\t\t *\t\teditor.keystrokes.set( 'Ctrl+E', ( data, cancel ) => {\n\t\t *\t\t\tconsole.log( data.keyCode );\n\t\t *\n\t\t *\t\t\t// Prevent default (native) action and stop the underlying keydown event\n\t\t *\t\t\t// so no other editor feature will interfere.\n\t\t *\t\t\tcancel();\n\t\t *\t\t} );\n\t\t *\n\t\t * Note: Certain, typing oriented keystrokes (like <kbd>Backspace</kbd> or <kbd>Enter</kbd>) are handled\n\t\t * by low level mechanism and trying to listen to them via the keystroke handler will not work reliably.\n\t\t * To handle those specific keystrokes see the events fired by the\n\t\t * {@link module:engine/view/document~Document editing view document} (`editor.editing.view.document`).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editingkeystrokehandler~EditingKeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new EditingKeystrokeHandler( this );\n\t\tthis.keystrokes.listenTo( this.editing.view.document );\n\t}\n\n\t/**\n\t * Loads and initializes plugins specified in the config.\n\t *\n\t * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which resolves\n\t * once the initialization is completed providing an array of loaded plugins.\n\t */\n\tinitPlugins() {\n\t\tconst config = this.config;\n\t\tconst plugins = config.get( 'plugins' ) || [];\n\t\tconst removePlugins = config.get( 'removePlugins' ) || [];\n\t\tconst extraPlugins = config.get( 'extraPlugins' ) || [];\n\n\t\treturn this.plugins.init( plugins.concat( extraPlugins ), removePlugins );\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * **Note** The editor cannot be destroyed during the initialization phase so if it is called\n\t * while the editor {@link #state is being initialized}, it will wait for the editor initialization before destroying it.\n\t *\n\t * @fires destroy\n\t * @returns {Promise} A promise that resolves once the editor instance is fully destroyed.\n\t */\n\tdestroy() {\n\t\tlet readyPromise = Promise.resolve();\n\n\t\tif ( this.state == 'initializing' ) {\n\t\t\treadyPromise = new Promise( resolve => this.once( 'ready', resolve ) );\n\t\t}\n\n\t\treturn readyPromise\n\t\t\t.then( () => {\n\t\t\t\tthis.fire( 'destroy' );\n\t\t\t\tthis.stopListening();\n\t\t\t\tthis.commands.destroy();\n\t\t\t} )\n\t\t\t.then( () => this.plugins.destroy() )\n\t\t\t.then( () => {\n\t\t\t\tthis.model.destroy();\n\t\t\t\tthis.data.destroy();\n\t\t\t\tthis.editing.destroy();\n\t\t\t\tthis.keystrokes.destroy();\n\t\t\t} );\n\t}\n\n\t/**\n\t * Executes specified command with given parameters.\n\t *\n\t * Shorthand for:\n\t *\n\t *\t\teditor.commands.get( commandName ).execute( ... );\n\t *\n\t * @param {String} commandName Name of command to execute.\n\t * @param {*} [...commandParams] Command parameters.\n\t */\n\texecute( ...args ) {\n\t\tthis.commands.execute( ...args );\n\t}\n\n\t/**\n\t * Creates and initializes a new editor instance.\n\t *\n\t * This is an abstract method. Every editor type needs to implement its own initialization logic.\n\t *\n\t * See the `create()` methods of the existing editor types to learn how to use them:\n\t *\n\t * * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}\n\t * * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}\n\t * * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}\n\t * * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`}\n\t *\n\t * @abstract\n\t * @method module:core/editor/editor~Editor.create\n\t */\n}\n\nmix( Editor, ObservableMixin );\n\n/**\n * Fired when {@link module:engine/controller/datacontroller~DataController#event:ready data} and all additional\n * editor components are ready.\n *\n * Note: This event is most useful for plugin developers. When integrating the editor with your website or\n * application you do not have to listen to `editor#ready` because when the promise returned by the static\n * {@link module:core/editor/editor~Editor.create `Editor.create()`} event is resolved, the editor is already ready.\n * In fact, since the first moment when the editor instance is available to you is inside `then()`'s callback,\n * you cannot even add a listener to the `editor#ready` event.\n *\n * See also the {@link #state `editor.state`} property.\n *\n * @event ready\n */\n\n/**\n * Fired when this editor instance is destroyed. The editor at this point is not usable and this event should be used to\n * perform the clean-up in any plugin.\n *\n *\n * See also the {@link #state `editor.state`} property.\n *\n * @event destroy\n */\n\n/**\n * This error is thrown when a user tries to use a `<textarea>` element to create a non-classic editor in it.\n *\n * Textarea element represents a plain-text and cannot be used as a editable root element with included CKEditor5.\n * Content of an editor should be nicely present to the user and show him how it's going to looks like. Textarea element\n * doesn't support such behavior.\n *\n * Only {@glink builds/guides/overview#classic-editor Classic Editor} has implemented a special system, which\n * **replace** DOM element and load data from it\n * ({@link module:editor-classic/classiceditor~ClassicEditor.create more information}). All other editors\n * use an existing element, load data from it and make this element editable. Details about behaviour of each editor\n * might be found in an associated description of a `create` method of each editor.\n *\n * @error editor-wrong-element\n */\n\n/**\n * An array of plugins built into this editor class.\n * It is used in CKEditor 5 builds to provide a list of plugins which are later automatically initialized\n * during the editor initialization.\n *\n * They will be automatically initialized by the editor, unless listed in `config.removePlugins` and\n * unless `config.plugins` is passed.\n *\n *\t\t// Build some plugins into the editor class first.\n *\t\tClassicEditor.builtinPlugins = [ FooPlugin, BarPlugin ];\n *\n *\t\t// Normally, you need to define config.plugins, but since ClassicEditor.builtinPlugins was\n *\t\t// defined, now you can call create() without any configuration.\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> instance of the Foo plugin\n *\t\t\t\teditor.plugins.get( BarPlugin ); // -> instance of the Bar plugin\n *\t\t\t} );\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, {\n *\t\t\t\t// Don't initialize this plugins (note: it's defined by a string):\n *\t\t\t\tremovePlugins: [ 'Foo' ]\n *\t\t\t} )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> undefined\n *\t\t\t\teditor.config.get( BarPlugin ); // -> instance of the Bar plugin\n *\t\t\t} );\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, {\n *\t\t\t\t// Load only this plugin. Can also be define by a string if\n *\t\t\t\t// this plugin was built into the editor class.\n *\t\t\t\tplugins: [ FooPlugin ]\n *\t\t\t} )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> instance of the Foo plugin\n *\t\t\t\teditor.config.get( BarPlugin ); // -> undefined\n *\t\t\t} );\n *\n * See also {@link module:core/editor/editor~Editor.defaultConfig}.\n *\n * @static\n * @member {Array.<Function>} module:core/editor/editor~Editor.builtinPlugins\n */\n\n/**\n * The default config which is built into the editor class.\n * It is used in CKEditor 5 builds to provide the default config options which are later used during editor initialization.\n *\n *\t\tClassicEditor.defaultConfig = {\n *\t\t\tfoo: 1,\n *\t\t\tbar: 2\n *\t\t};\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.config.get( 'foo' ); // -> 1\n *\t\t\t\teditor.config.get( 'bar' ); // -> 2\n *\t\t\t} );\n *\n *\t\t// The default options can be overridden by the config passed to create().\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, { bar: 3 } )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.config.get( 'foo' ); // -> 1\n *\t\t\t\teditor.config.get( 'bar' ); // -> 3\n *\t\t\t} );\n *\n * See also {@link module:core/editor/editor~Editor.builtinPlugins}.\n *\n * @static\n * @member {Object} module:core/editor/editor~Editor.defaultConfig\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/componentfactory\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * A helper class implementing the UI component ({@link module:ui/view~View view}) factory.\n *\n * It allows functions producing specific UI components to be registered under their unique names\n * in the factory. A registered component can be then instantiated by providing its name.\n * Note that names are case insensitive.\n *\n *\t\t// The editor provides localization tools for the factory.\n *\t\tconst factory = new ComponentFactory( editor );\n *\n *\t\tfactory.add( 'foo', locale => new FooView( locale ) );\n *\t\tfactory.add( 'bar', locale => new BarView( locale ) );\n *\n *\t\t// An instance of FooView.\n *\t\tconst fooInstance = factory.create( 'foo' );\n *\n *\t\t// Names are case insensitive so this is also allowed:\n *\t\tconst barInstance = factory.create( 'Bar' );\n *\n * The {@link module:core/editor/editor~Editor#locale editor locale} is passed to the factory\n * function when {@link module:ui/componentfactory~ComponentFactory#create} is called.\n */\nexport default class ComponentFactory {\n\t/**\n\t * Creates an instance of the factory.\n\t *\n\t * @constructor\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor instance that the factory belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * Registered component factories.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._components = new Map();\n\t}\n\n\t/**\n\t * Returns an iterator of registered component names. Names are returned in lower case.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* names() {\n\t\tfor ( const value of this._components.values() ) {\n\t\t\tyield value.originalName;\n\t\t}\n\t}\n\n\t/**\n\t * Registers a component factory function that will be used by the\n\t * {@link #create create} method and called with the\n\t * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,\n\t * allowing localization of the {@link module:ui/view~View view}.\n\t *\n\t * @param {String} name The name of the component.\n\t * @param {Function} callback The callback that returns the component.\n\t */\n\tadd( name, callback ) {\n\t\tif ( this.has( name ) ) {\n\t\t\t/**\n\t\t\t * The item already exists in the component factory.\n\t\t\t *\n\t\t\t * @error componentfactory-item-exists\n\t\t\t * @param {String} name The name of the component.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'componentfactory-item-exists: The item already exists in the component factory.',\n\t\t\t\tthis,\n\t\t\t\t{ name }\n\t\t\t);\n\t\t}\n\n\t\tthis._components.set( getNormalized( name ), { callback, originalName: name } );\n\t}\n\n\t/**\n\t * Creates an instance of a component registered in the factory under a specific name.\n\t *\n\t * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to\n\t * the previously {@link #add added} factory function, allowing localization of the\n\t * {@link module:ui/view~View view}.\n\t *\n\t * @param {String} name The name of the component.\n\t * @returns {module:ui/view~View} The instantiated component view.\n\t */\n\tcreate( name ) {\n\t\tif ( !this.has( name ) ) {\n\t\t\t/**\n\t\t\t * The required component is not registered in the component factory. Please make sure\n\t\t\t * the provided name is correct and the component has been correctly\n\t\t\t * {@link #add added} to the factory.\n\t\t\t *\n\t\t\t * @error componentfactory-item-missing\n\t\t\t * @param {String} name The name of the missing component.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'componentfactory-item-missing: The required component is not registered in the factory.',\n\t\t\t\tthis,\n\t\t\t\t{ name }\n\t\t\t);\n\t\t}\n\n\t\treturn this._components.get( getNormalized( name ) ).callback( this.editor.locale );\n\t}\n\n\t/**\n\t * Checks if a component of a given name is registered in the factory.\n\t *\n\t * @param {String} name The name of the component.\n\t * @returns {Boolean}\n\t */\n\thas( name ) {\n\t\treturn this._components.has( getNormalized( name ) );\n\t}\n}\n\n//\n// Ensures that the component name used as the key in the internal map is in lower case.\n//\n// @private\n// @param {String} name\n// @returns {String}\nfunction getNormalized( name ) {\n\treturn String( name ).toLowerCase();\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/editorui\n */\n\n/* globals console */\n\nimport ComponentFactory from '@ckeditor/ckeditor5-ui/src/componentfactory';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * A class providing the minimal interface that is required to successfully bootstrap any editor UI.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class EditorUI {\n\t/**\n\t * Creates an instance of the editor UI class.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor that the UI belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * An instance of the {@link module:ui/componentfactory~ComponentFactory}, a registry used by plugins\n\t\t * to register factories of specific UI components.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/componentfactory~ComponentFactory} #componentFactory\n\t\t */\n\t\tthis.componentFactory = new ComponentFactory( editor );\n\n\t\t/**\n\t\t * Stores the information about the editor UI focus and propagates it so various plugins and components\n\t\t * are unified as a focus group.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Stores all editable elements used by the editor instance.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<String,HTMLElement>}\n\t\t */\n\t\tthis._editableElementsMap = new Map();\n\n\t\t// Informs UI components that should be refreshed after layout change.\n\t\tthis.listenTo( editor.editing.view.document, 'layoutChanged', () => this.update() );\n\t}\n\n\t/**\n\t * The main (outermost) DOM element of the editor UI.\n\t *\n\t * For example, in {@link module:editor-classic/classiceditor~ClassicEditor} it is a `<div>` which\n\t * wraps the editable element and the toolbar. In {@link module:editor-inline/inlineeditor~InlineEditor}\n\t * it is the editable element itself (as there is no other wrapper). However, in\n\t * {@link module:editor-decoupled/decouplededitor~DecoupledEditor} it is set to `null` because this editor does not\n\t * come with a single \"main\" HTML element (its editable element and toolbar are separate).\n\t *\n\t * This property can be understood as a shorthand for retrieving the element that a specific editor integration\n\t * considers to be its main DOM element.\n\t *\n\t * @readonly\n\t * @member {HTMLElement|null} #element\n\t */\n\tget element() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Fires the {@link module:core/editor/editorui~EditorUI#event:update `update`} event.\n\t *\n\t * This method should be called when the editor UI (e.g. positions of its balloons) needs to be updated due to\n\t * some environmental change which CKEditor 5 is not aware of (e.g. resize of a container in which it is used).\n\t */\n\tupdate() {\n\t\tthis.fire( 'update' );\n\t}\n\n\t/**\n\t * Destroys the UI.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\n\t\tthis.focusTracker.destroy();\n\n\t\t// Clean–up the references to the CKEditor instance stored in the native editable DOM elements.\n\t\tfor ( const domElement of this._editableElementsMap.values() ) {\n\t\t\tdomElement.ckeditorInstance = null;\n\t\t}\n\n\t\tthis._editableElementsMap = new Map();\n\t}\n\n\t/**\n\t * Store the native DOM editable element used by the editor under\n\t * a unique name.\n\t *\n\t * @param {String} rootName The unique name of the editable element.\n\t * @param {HTMLElement} domElement The native DOM editable element.\n\t */\n\tsetEditableElement( rootName, domElement ) {\n\t\tthis._editableElementsMap.set( rootName, domElement );\n\n\t\t// Put a reference to the CKEditor instance in the editable native DOM element.\n\t\t// It helps 3rd–party software (browser extensions, other libraries) access and recognize\n\t\t// CKEditor 5 instances (editing roots) and use their API (there is no global editor\n\t\t// instance registry).\n\t\tif ( !domElement.ckeditorInstance ) {\n\t\t\tdomElement.ckeditorInstance = this.editor;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the editable editor element with the given name or null if editable does not exist.\n\t *\n\t * @param {String} [rootName=main] The editable name.\n\t * @returns {HTMLElement|undefined}\n\t */\n\tgetEditableElement( rootName = 'main' ) {\n\t\treturn this._editableElementsMap.get( rootName );\n\t}\n\n\t/**\n\t * Returns array of names of all editor editable elements.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetEditableElementsNames() {\n\t\treturn this._editableElementsMap.keys();\n\t}\n\n\t/**\n\t * Stores all editable elements used by the editor instance.\n\t *\n\t * @protected\n\t * @deprecated\n\t * @member {Map.<String,HTMLElement>}\n\t */\n\tget _editableElements() {\n\t\t/**\n\t\t * The {@link module:core/editor/editorui~EditorUI#_editableElements `EditorUI#_editableElements`} property has been\n\t\t * deprecated and will be removed in the near future. Please use {@link #setEditableElement `setEditableElement()`} and\n\t\t * {@link #getEditableElement `getEditableElement()`} methods instead.\n\t\t *\n\t\t * @error editor-ui-deprecated-editable-elements\n\t\t * @param {module:core/editor/editorui~EditorUI} editorUI Editor UI instance the deprecated property belongs to.\n\t\t */\n\t\tconsole.warn(\n\t\t\t'editor-ui-deprecated-editable-elements: ' +\n\t\t\t'The EditorUI#_editableElements property has been deprecated and will be removed in the near future.',\n\t\t\t{ editorUI: this } );\n\n\t\treturn this._editableElementsMap;\n\t}\n\n\t/**\n\t * Fired when the editor UI is ready.\n\t *\n\t * Fired before {@link module:engine/controller/datacontroller~DataController#event:ready}.\n\t *\n\t * @event ready\n\t */\n\n\t/**\n\t * Fired whenever the UI (all related components) should be refreshed.\n\t *\n\t * **Note:**: The event is fired after each {@link module:engine/view/document~Document#event:layoutChanged}.\n\t * It can also be fired manually via the {@link module:core/editor/editorui~EditorUI#update} method.\n\t *\n\t * @event update\n\t */\n}\n\nmix( EditorUI, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/editableui/editableuiview\n */\n\nimport View from '../view';\n\n/**\n * The editable UI view class.\n *\n * @extends module:ui/view~View\n */\nexport default class EditableUIView extends View {\n\t/**\n\t * Creates an instance of EditableUIView class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t * @param {module:engine/view/view~View} editingView The editing view instance the editable is related to.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, this view\n\t * should create it. Otherwise, the existing element should be used.\n\t */\n\tconstructor( locale, editingView, editableElement ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-content',\n\t\t\t\t\t'ck-editor__editable',\n\t\t\t\t\t'ck-rounded-corners'\n\t\t\t\t],\n\t\t\t\tlang: locale.contentLanguage,\n\t\t\t\tdir: locale.contentLanguageDirection\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The name of the editable UI view.\n\t\t *\n\t\t * @member {String} #name\n\t\t */\n\t\tthis.name = null;\n\n\t\t/**\n\t\t * Controls whether the editable is focused, i.e. the user is typing in it.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The element which is the main editable element (usually the one with `contentEditable=\"true\"`).\n\t\t *\n\t\t * @private\n\t\t * @member {HTMLElement} #_editableElement\n\t\t */\n\t\tthis._editableElement = editableElement;\n\n\t\t/**\n\t\t * Whether an external {@link #_editableElement} was passed into the constructor, which also means\n\t\t * the view will not render its {@link #template}.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean} #_hasExternalElement\n\t\t */\n\t\tthis._hasExternalElement = !!this._editableElement;\n\n\t\t/**\n\t\t * The editing view instance the editable is related to. Editable uses the editing\n\t\t * view to dynamically modify its certain DOM attributes after {@link #render rendering}.\n\t\t *\n\t\t * **Note**: The DOM attributes are performed by the editing view and not UI\n\t\t * {@link module:ui/view~View#bindTemplate template bindings} because once rendered,\n\t\t * the editable DOM element must remain under the full control of the engine to work properly.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/view/view~View} #isFocused\n\t\t */\n\t\tthis._editingView = editingView;\n\t}\n\n\t/**\n\t * Renders the view by either applying the {@link #template} to the existing\n\t * {@link #_editableElement} or assigning {@link #element} as {@link #_editableElement}.\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tif ( this._hasExternalElement ) {\n\t\t\tthis.template.apply( this.element = this._editableElement );\n\t\t} else {\n\t\t\tthis._editableElement = this.element;\n\t\t}\n\n\t\tthis.on( 'change:isFocused', () => this._updateIsFocusedClasses() );\n\t\tthis._updateIsFocusedClasses();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tif ( this._hasExternalElement ) {\n\t\t\tthis.template.revert( this._editableElement );\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Updates the `ck-focused` and `ck-blurred` CSS classes on the {@link #element} according to\n\t * the {@link #isFocused} property value using the {@link #_editingView editing view} API.\n\t *\n\t * @private\n\t */\n\t_updateIsFocusedClasses() {\n\t\tconst editingView = this._editingView;\n\n\t\tif ( editingView.isRenderingInProgress ) {\n\t\t\tupdateAfterRender( this );\n\t\t} else {\n\t\t\tupdate( this );\n\t\t}\n\n\t\tfunction update( view ) {\n\t\t\teditingView.change( writer => {\n\t\t\t\tconst viewRoot = editingView.document.getRoot( view.name );\n\n\t\t\t\twriter.addClass( view.isFocused ? 'ck-focused' : 'ck-blurred', viewRoot );\n\t\t\t\twriter.removeClass( view.isFocused ? 'ck-blurred' : 'ck-focused', viewRoot );\n\t\t\t} );\n\t\t}\n\n\t\t// In a case of a multi-root editor, a callback will be attached more than once (one callback for each root).\n\t\t// While executing one callback the `isRenderingInProgress` observable is changing what causes executing another\n\t\t// callback and render is called inside the already pending render.\n\t\t// We need to be sure that callback is executed only when the value has changed from `true` to `false`.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1676.\n\t\tfunction updateAfterRender( view ) {\n\t\t\teditingView.once( 'change:isRenderingInProgress', ( evt, name, value ) => {\n\t\t\t\tif ( !value ) {\n\t\t\t\t\tupdate( view );\n\t\t\t\t} else {\n\t\t\t\t\tupdateAfterRender( view );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editableui/inline/inlineeditableuiview\n */\nimport EditableUIView from '../../editableui/editableuiview';\n/**\n * The inline editable UI class implementing an inline {@link module:ui/editableui/editableuiview~EditableUIView}.\n *\n * @extends module:ui/editableui/editableuiview~EditableUIView\n */\nexport default class InlineEditableUIView extends EditableUIView {\n    /**\n\t * Creates an instance of the InlineEditableUIView class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t * @param {module:engine/view/view~View} editingView The editing view instance the editable is related to.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, the\n\t * {@link module:ui/editableui/editableuiview~EditableUIView}\n\t * will create it. Otherwise, the existing element will be used.\n\t */\n    constructor(locale, editingView, editableElement) {\n        super(locale, editingView, editableElement);\n        this.extendTemplate({\n            attributes: {\n                role: 'textbox',\n                class: 'ck-editor__editable_inline'\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        const editingView = this._editingView;\n        const t = this.t;\n        editingView.change(writer => {\n            const viewRoot = editingView.document.getRoot(this.name);\n            writer.setAttribute('aria-label', t('Rich Text Editor, %0', [this.name]), viewRoot);\n        });\n    }\n}","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/list/listview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\nimport '../../theme/components/list/list.css';\n\n/**\n * The list view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ListView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Collection of the child list views.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * Helps cycling over focusable {@link #items} in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.items,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate list items backwards using the arrowup key.\n\t\t\t\tfocusPrevious: 'arrowup',\n\n\t\t\t\t// Navigate toolbar items forwards using the arrowdown key.\n\t\t\t\tfocusNext: 'arrowdown',\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'ul',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-reset',\n\t\t\t\t\t'ck-list'\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.items\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Items added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #items}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #items}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/list/listitemview\n */\n\nimport View from '../view';\n\n/**\n * The list item view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ListItemView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Collection of the child views inside of the list item {@link #element}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'li',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-list__item'\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the list item.\n\t */\n\tfocus() {\n\t\tthis.children.first.focus();\n\t}\n}\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import root from './_root.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nexport default cloneBuffer;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/bold/boldediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\n\nconst BOLD = 'bold';\n\n/**\n * The bold editing feature.\n *\n * It registers the `'bold'` command and introduces the `bold` attribute in the model which renders to the view\n * as a `<strong>` element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BoldEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\t// Allow bold attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: BOLD } );\n\t\teditor.model.schema.setAttributeProperties( BOLD, {\n\t\t\tisFormatting: true,\n\t\t\tcopyOnEnter: true\n\t\t} );\n\n\t\t// Build converter from model to view for data and editing pipelines.\n\n\t\teditor.conversion.attributeToElement( {\n\t\t\tmodel: BOLD,\n\t\t\tview: 'strong',\n\t\t\tupcastAlso: [\n\t\t\t\t'b',\n\t\t\t\t{\n\t\t\t\t\tstyles: {\n\t\t\t\t\t\t'font-weight': 'bold'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\t// Create bold command.\n\t\teditor.commands.add( BOLD, new AttributeCommand( editor, BOLD ) );\n\n\t\t// Set the Ctrl+B keystroke.\n\t\teditor.keystrokes.set( 'CTRL+B', BOLD );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/italic/italicediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\n\nconst ITALIC = 'italic';\n\n/**\n * The italic editing feature.\n *\n * It registers the `'italic'` command, the <kbd>Ctrl+I</kbd> keystroke and introduces the `italic` attribute in the model\n * which renders to the view as an `<i>` element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ItalicEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Allow italic attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: ITALIC } );\n\t\teditor.model.schema.setAttributeProperties( ITALIC, {\n\t\t\tisFormatting: true,\n\t\t\tcopyOnEnter: true\n\t\t} );\n\n\t\teditor.conversion.attributeToElement( {\n\t\t\tmodel: ITALIC,\n\t\t\tview: 'i',\n\t\t\tupcastAlso: [\n\t\t\t\t'em',\n\t\t\t\t{\n\t\t\t\t\tstyles: {\n\t\t\t\t\t\t'font-style': 'italic'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\t// Create italic command.\n\t\teditor.commands.add( ITALIC, new AttributeCommand( editor, ITALIC ) );\n\n\t\t// Set the Ctrl+I keystroke.\n\t\teditor.keystrokes.set( 'CTRL+I', ITALIC );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/changebuffer\n */\n\n/**\n * Change buffer allows to group atomic changes (like characters that have been typed) into\n * {@link module:engine/model/batch~Batch batches}.\n *\n * Batches represent single undo steps, hence changes added to one single batch are undone together.\n *\n * The buffer has a configurable limit of atomic changes that it can accommodate. After the limit was\n * exceeded (see {@link ~ChangeBuffer#input}), a new batch is created in {@link ~ChangeBuffer#batch}.\n *\n * To use the change buffer you need to let it know about the number of changes that were added to the batch:\n *\n *\t\tconst buffer = new ChangeBuffer( model, LIMIT );\n *\n *\t\t// Later on in your feature:\n *\t\tbuffer.batch.insert( pos, insertedCharacters );\n *\t\tbuffer.input( insertedCharacters.length );\n *\n */\nexport default class ChangeBuffer {\n\t/**\n\t * Creates a new instance of the change buffer.\n\t *\n\t * @param {module:engine/model/model~Model} model\n\t * @param {Number} [limit=20] The maximum number of atomic changes which can be contained in one batch.\n\t */\n\tconstructor( model, limit = 20 ) {\n\t\t/**\n\t\t * The model instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},\n\t\t * the {@link #batch batch} is set to a new one.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #size\n\t\t */\n\t\tthis.size = 0;\n\n\t\t/**\n\t\t * The maximum number of atomic changes which can be contained in one batch.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #limit\n\t\t */\n\t\tthis.limit = limit;\n\n\t\t/**\n\t\t * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isLocked\n\t\t */\n\t\tthis.isLocked = false;\n\n\t\t// The function to be called in order to notify the buffer about batches which appeared in the document.\n\t\t// The callback will check whether it is a new batch and in that case the buffer will be flushed.\n\t\t//\n\t\t// The reason why the buffer needs to be flushed whenever a new batch appears is that the changes added afterwards\n\t\t// should be added to a new batch. For instance, when the  user types, then inserts an image, and then types again,\n\t\t// the characters typed after inserting the image should be added to a different batch than the characters typed before.\n\t\tthis._changeCallback = ( evt, batch ) => {\n\t\t\tif ( batch.type != 'transparent' && batch !== this._batch ) {\n\t\t\t\tthis._reset( true );\n\t\t\t}\n\t\t};\n\n\t\tthis._selectionChangeCallback = () => {\n\t\t\tthis._reset();\n\t\t};\n\n\t\tthis.model.document.on( 'change', this._changeCallback );\n\n\t\tthis.model.document.selection.on( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.on( 'change:attribute', this._selectionChangeCallback );\n\n\t\t/**\n\t\t * The current batch instance.\n\t\t *\n\t\t * @private\n\t\t * @member #_batch\n\t\t */\n\n\t\t/**\n\t\t * The callback to document the change event which later needs to be removed.\n\t\t *\n\t\t * @private\n\t\t * @member #_changeCallback\n\t\t */\n\n\t\t/**\n\t\t * The callback to document selection `change:attribute` and `change:range` events which resets the buffer.\n\t\t *\n\t\t * @private\n\t\t * @member #_selectionChangeCallback\n\t\t */\n\t}\n\n\t/**\n\t * The current batch to which a feature should add its operations. Once the {@link #size}\n\t * is reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @type {module:engine/model/batch~Batch}\n\t */\n\tget batch() {\n\t\tif ( !this._batch ) {\n\t\t\tthis._batch = this.model.createBatch();\n\t\t}\n\n\t\treturn this._batch;\n\t}\n\n\t/**\n\t * The input number of changes into the buffer. Once the {@link #size} is\n\t * reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @param {Number} changeCount The number of atomic changes to input.\n\t */\n\tinput( changeCount ) {\n\t\tthis.size += changeCount;\n\n\t\tif ( this.size >= this.limit ) {\n\t\t\tthis._reset( true );\n\t\t}\n\t}\n\n\t/**\n\t * Locks the buffer.\n\t */\n\tlock() {\n\t\tthis.isLocked = true;\n\t}\n\n\t/**\n\t * Unlocks the buffer.\n\t */\n\tunlock() {\n\t\tthis.isLocked = false;\n\t}\n\n\t/**\n\t * Destroys the buffer.\n\t */\n\tdestroy() {\n\t\tthis.model.document.off( 'change', this._changeCallback );\n\t\tthis.model.document.selection.off( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.off( 'change:attribute', this._selectionChangeCallback );\n\t}\n\n\t/**\n\t * Resets the change buffer.\n\t *\n\t * @private\n\t * @param {Boolean} [ignoreLock] Whether internal lock {@link #isLocked} should be ignored.\n\t */\n\t_reset( ignoreLock ) {\n\t\tif ( !this.isLocked || ignoreLock ) {\n\t\t\tthis._batch = null;\n\t\t\tthis.size = 0;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/inputcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport ChangeBuffer from './utils/changebuffer';\n\n/**\n * The input command. Used by the {@link module:typing/input~Input input feature} to handle typing.\n *\n * @extends module:core/command~Command\n */\nexport default class InputCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Number} undoStepSize The maximum number of atomic changes\n\t * which can be contained in one batch in the command buffer.\n\t */\n\tconstructor( editor, undoStepSize ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Typing's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {module:typing/utils/changebuffer~ChangeBuffer} #_buffer\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, undoStepSize );\n\n\t\t/**\n\t\t * Stores batches created by the input command. The batches are used to differentiate input batches from other batches using\n\t\t * {@link module:typing/input~Input#isInput} method.\n\t\t *\n\t\t * @type {WeakSet<module:engine/model/batch~Batch>}\n\t\t * @protected\n\t\t */\n\t\tthis._batches = new WeakSet();\n\t}\n\n\t/**\n\t * The current change buffer.\n\t *\n\t * @type {module:typing/utils/changebuffer~ChangeBuffer}\n\t */\n\tget buffer() {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._buffer.destroy();\n\t}\n\n\t/**\n\t * Executes the input command. It replaces the content within the given range with the given text.\n\t * Replacing is a two step process, first the content within the range is removed and then the new text is inserted\n\t * at the beginning of the range (which after the removal is a collapsed range).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {String} [options.text=''] The text to be inserted.\n\t * @param {module:engine/model/range~Range} [options.range] The range in which the text is inserted. Defaults\n\t * to the first range in the current selection.\n\t * @param {module:engine/model/range~Range} [options.resultRange] The range where the selection\n\t * should be placed after the insertion. If not specified, the selection will be placed right after\n\t * the inserted text.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst text = options.text || '';\n\t\tconst textInsertions = text.length;\n\t\tconst range = options.range || doc.selection.getFirstRange();\n\t\tconst resultRange = options.resultRange;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tconst isCollapsedRange = range.isCollapsed;\n\n\t\t\tthis._buffer.lock();\n\n\t\t\tmodel.deleteContent( model.createSelection( range ) );\n\n\t\t\tif ( text ) {\n\t\t\t\tmodel.insertContent( writer.createText( text, doc.selection.getAttributes() ), range.start );\n\t\t\t}\n\n\t\t\tif ( resultRange ) {\n\t\t\t\twriter.setSelection( resultRange );\n\t\t\t} else if ( isCollapsedRange ) {\n\t\t\t\t// If range was collapsed just shift the selection by the number of inserted characters.\n\t\t\t\twriter.setSelection( range.start.getShiftedBy( textInsertions ) );\n\t\t\t}\n\n\t\t\tthis._buffer.unlock();\n\n\t\t\tthis._buffer.input( textInsertions );\n\n\t\t\t// Store the batch as an 'input' batch for the Input.isInput( batch ) check.\n\t\t\tthis._batches.add( this._buffer.batch );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/injectunsafekeystrokeshandling\n */\n\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Handles keystrokes which are unsafe for typing. This handler's logic is explained\n * in https://github.com/ckeditor/ckeditor5-typing/issues/83#issuecomment-398690251.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport default function injectUnsafeKeystrokesHandling( editor ) {\n\tlet latestCompositionSelection = null;\n\n\tconst model = editor.model;\n\tconst view = editor.editing.view;\n\tconst inputCommand = editor.commands.get( 'input' );\n\n\t// For Android, we want to handle keystrokes on `beforeinput` to be sure that code in `DeleteObserver` already had a chance to be fired.\n\tif ( env.isAndroid ) {\n\t\tview.document.on( 'beforeinput', ( evt, evtData ) => handleUnsafeKeystroke( evtData ), { priority: 'lowest' } );\n\t} else {\n\t\tview.document.on( 'keydown', ( evt, evtData ) => handleUnsafeKeystroke( evtData ), { priority: 'lowest' } );\n\t}\n\n\tview.document.on( 'compositionstart', handleCompositionStart, { priority: 'lowest' } );\n\n\tview.document.on( 'compositionend', () => {\n\t\tlatestCompositionSelection = model.createSelection( model.document.selection );\n\t}, { priority: 'lowest' } );\n\n\t// Handles the keydown event. We need to guess whether such keystroke is going to result\n\t// in typing. If so, then before character insertion happens, any selected content needs\n\t// to be deleted. Otherwise the default browser deletion mechanism would be\n\t// triggered, resulting in:\n\t//\n\t// * Hundreds of mutations which could not be handled.\n\t// * But most importantly, loss of control over how the content is being deleted.\n\t//\n\t// The method is used in a low-priority listener, hence allowing other listeners (e.g. delete or enter features)\n\t// to handle the event.\n\t//\n\t// @param {module:engine/view/observer/keyobserver~KeyEventData} evtData\n\tfunction handleUnsafeKeystroke( evtData ) {\n\t\tconst doc = model.document;\n\t\tconst isComposing = view.document.isComposing;\n\t\tconst isSelectionUnchanged = latestCompositionSelection && latestCompositionSelection.isEqual( doc.selection );\n\n\t\t// Reset stored composition selection.\n\t\tlatestCompositionSelection = null;\n\n\t\t// By relying on the state of the input command we allow disabling the entire input easily\n\t\t// by just disabling the input command. We could’ve used here the delete command but that\n\t\t// would mean requiring the delete feature which would block loading one without the other.\n\t\t// We could also check the editor.isReadOnly property, but that wouldn't allow to block\n\t\t// the input without blocking other features.\n\t\tif ( !inputCommand.isEnabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isSafeKeystroke( evtData ) || doc.selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If during composition, deletion should be prevented as it may remove composed sequence (#83).\n\t\tif ( isComposing && evtData.keyCode === 229 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there is a `keydown` event fired with '229' keycode it might be related\n\t\t// to recent composition. Check if selection is the same as upon ending recent composition,\n\t\t// if so do not remove selected content as it will remove composed sequence (#83).\n\t\tif ( !isComposing && evtData.keyCode === 229 && isSelectionUnchanged ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeleteSelectionContent();\n\t}\n\n\t// Handles the `compositionstart` event. It is used only in special cases to remove the contents\n\t// of a non-collapsed selection so composition itself does not result in complex mutations.\n\t//\n\t// The special case mentioned above is a situation in which the `keydown` event is fired after\n\t// `compositionstart` event. In such cases {@link #handleKeydown} cannot clear current selection\n\t// contents (because it is too late and will break the composition) so the composition handler takes care of it.\n\tfunction handleCompositionStart() {\n\t\tconst doc = model.document;\n\t\tconst isFlatSelection = doc.selection.rangeCount === 1 ? doc.selection.getFirstRange().isFlat : true;\n\n\t\t// If on `compositionstart` there is a non-collapsed selection which start and end have different parents\n\t\t// it means the `handleKeydown()` method did not remove its contents. It happens usually because\n\t\t// of different order of events (`compositionstart` before `keydown` - in Safari). In such cases\n\t\t// we need to remove selection contents on composition start (#83).\n\t\tif ( doc.selection.isCollapsed || isFlatSelection ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeleteSelectionContent();\n\t}\n\n\tfunction deleteSelectionContent() {\n\t\tconst buffer = inputCommand.buffer;\n\n\t\tbuffer.lock();\n\n\t\tmodel.enqueueChange( buffer.batch, () => {\n\t\t\tmodel.deleteContent( model.document.selection );\n\t\t} );\n\n\t\tbuffer.unlock();\n\t}\n}\n\nconst safeKeycodes = [\n\tgetCode( 'arrowUp' ),\n\tgetCode( 'arrowRight' ),\n\tgetCode( 'arrowDown' ),\n\tgetCode( 'arrowLeft' ),\n\t9, // Tab\n\t16, // Shift\n\t17, // Ctrl\n\t18, // Alt\n\t19, // Pause\n\t20, // CapsLock\n\t27, // Escape\n\t33, // PageUp\n\t34, // PageDown\n\t35, // Home\n\t36, // End,\n\t45, // Insert,\n\t91, // Windows,\n\t93, // Menu key,\n\t144, // NumLock\n\t145, // ScrollLock,\n\t173, // Mute/Unmute\n\t174, // Volume up\n\t175, // Volume down,\n\t176, // Next song,\n\t177, // Previous song,\n\t178, // Stop,\n\t179, // Play/Pause,\n\t255 // Display brightness (increase and decrease)\n];\n\n// Function keys.\nfor ( let code = 112; code <= 135; code++ ) {\n\tsafeKeycodes.push( code );\n}\n\n// Returns `true` if a keystroke should not cause any content change caused by \"typing\".\n//\n// Note: This implementation is very simple and will need to be refined with time.\n//\n// @private\n// @param {engine.view.observer.keyObserver.KeyEventData} keyData\n// @returns {Boolean}\nfunction isSafeKeystroke( keyData ) {\n\t// Keystrokes which contain Ctrl don't represent typing.\n\tif ( keyData.ctrlKey ) {\n\t\treturn true;\n\t}\n\n\treturn safeKeycodes.includes( keyData.keyCode );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/utils\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\n\n/**\n * Returns true if container children have mutated or more than a single text node was changed.\n *\n * @private\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n * @returns {Boolean}\n */\nexport function containerChildrenMutated( mutations ) {\n\tif ( mutations.length == 0 ) {\n\t\treturn false;\n\t}\n\n\t// Check if there is any mutation of `children` type or any mutation that changes more than one text node.\n\tfor ( const mutation of mutations ) {\n\t\tif ( mutation.type === 'children' && !getSingleTextNodeChange( mutation ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns change made to a single text node.\n *\n * @private\n * @param {module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren} mutation\n * @returns {Object|undefined} Change object (see {@link module:utils/difftochanges~diffToChanges} output)\n * or undefined if more than a single text node was changed.\n */\nexport function getSingleTextNodeChange( mutation ) {\n\t// One new node.\n\tif ( mutation.newChildren.length - mutation.oldChildren.length != 1 ) {\n\t\treturn;\n\t}\n\n\t// Which is text.\n\tconst diffResult = diff( mutation.oldChildren, mutation.newChildren, compareChildNodes );\n\tconst changes = diffToChanges( diffResult, mutation.newChildren );\n\n\t// In case of [ delete, insert, insert ] the previous check will not exit.\n\tif ( changes.length > 1 ) {\n\t\treturn;\n\t}\n\n\tconst change = changes[ 0 ];\n\n\t// Which is text.\n\tif ( !( !!change.values[ 0 ] && change.values[ 0 ].is( 'text' ) ) ) {\n\t\treturn;\n\t}\n\n\treturn change;\n}\n\n/**\n * Checks whether two view nodes are identical, which means they are the same object\n * or contain exactly same data (in case of text nodes).\n *\n * @private\n * @param {module:engine/view/node~Node} oldChild\n * @param {module:engine/view/node~Node} newChild\n * @returns {Boolean}\n */\nexport function compareChildNodes( oldChild, newChild ) {\n\tif ( !!oldChild && oldChild.is( 'text' ) && !!newChild && newChild.is( 'text' ) ) {\n\t\treturn oldChild.data === newChild.data;\n\t} else {\n\t\treturn oldChild === newChild;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/difftochanges\n */\n\n/**\n * Creates a set of changes which need to be applied to the input in order to transform\n * it into the output. This function can be used with strings or arrays.\n *\n *\t\tconst input = Array.from( 'abc' );\n *\t\tconst output = Array.from( 'xaby' );\n *\t\tconst changes = diffToChanges( diff( input, output ), output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput.splice( change.index, 0, ...change.values );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput.splice( change.index, change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\tinput.join( '' ) == output.join( '' ); // -> true\n *\n * @param {Array.<'equal'|'insert'|'delete'>} diff Result of {@link module:utils/diff~diff}.\n * @param {String|Array} output The string or array which was passed as diff's output.\n * @returns {Array.<Object>} Set of changes (insert or delete) which need to be applied to the input\n * in order to transform it into the output.\n */\nexport default function diffToChanges( diff, output ) {\n\tconst changes = [];\n\tlet index = 0;\n\tlet lastOperation;\n\n\tdiff.forEach( change => {\n\t\tif ( change == 'equal' ) {\n\t\t\tpushLast();\n\n\t\t\tindex++;\n\t\t} else if ( change == 'insert' ) {\n\t\t\tif ( isContinuationOf( 'insert' ) ) {\n\t\t\t\tlastOperation.values.push( output[ index ] );\n\t\t\t} else {\n\t\t\t\tpushLast();\n\n\t\t\t\tlastOperation = {\n\t\t\t\t\ttype: 'insert',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalues: [ output[ index ] ]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tindex++;\n\t\t} else /* if ( change == 'delete' ) */ {\n\t\t\tif ( isContinuationOf( 'delete' ) ) {\n\t\t\t\tlastOperation.howMany++;\n\t\t\t} else {\n\t\t\t\tpushLast();\n\n\t\t\t\tlastOperation = {\n\t\t\t\t\ttype: 'delete',\n\t\t\t\t\tindex,\n\t\t\t\t\thowMany: 1\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} );\n\n\tpushLast();\n\n\treturn changes;\n\n\tfunction pushLast() {\n\t\tif ( lastOperation ) {\n\t\t\tchanges.push( lastOperation );\n\t\t\tlastOperation = null;\n\t\t}\n\t}\n\n\tfunction isContinuationOf( expected ) {\n\t\treturn lastOperation && lastOperation.type == expected;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/injecttypingmutationshandling\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\n\nimport { getSingleTextNodeChange, containerChildrenMutated } from './utils';\n\n/**\n * Handles mutations caused by normal typing.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport default function injectTypingMutationsHandling( editor ) {\n\teditor.editing.view.document.on( 'mutations', ( evt, mutations, viewSelection ) => {\n\t\tnew MutationHandler( editor ).handle( mutations, viewSelection );\n\t} );\n}\n\n/**\n * Helper class for translating DOM mutations into model changes.\n *\n * @private\n */\nclass MutationHandler {\n\t/**\n\t * Creates an instance of the mutation handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * Editor instance for which mutations are handled.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The editing controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/editingcontroller~EditingController} #editing\n\t\t */\n\t\tthis.editing = this.editor.editing;\n\t}\n\n\t/**\n\t * Handles given mutations.\n\t *\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\thandle( mutations, viewSelection ) {\n\t\tif ( containerChildrenMutated( mutations ) ) {\n\t\t\tthis._handleContainerChildrenMutations( mutations, viewSelection );\n\t\t} else {\n\t\t\tfor ( const mutation of mutations ) {\n\t\t\t\t// Fortunately it will never be both.\n\t\t\t\tthis._handleTextMutation( mutation, viewSelection );\n\t\t\t\tthis._handleTextNodeInsertion( mutation );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles situations when container's children mutated during input. This can happen when\n\t * the browser is trying to \"fix\" DOM in certain situations. For example, when the user starts to type\n\t * in `<p><a href=\"\"><i>Link{}</i></a></p>`, the browser might change the order of elements\n\t * to `<p><i><a href=\"\">Link</a>x{}</i></p>`. A similar situation happens when the spell checker\n\t * replaces a word wrapped with `<strong>` with a word wrapped with a `<b>` element.\n\t *\n\t * To handle such situations, the common DOM ancestor of all mutations is converted to the model representation\n\t * and then compared with the current model to calculate the proper text change.\n\t *\n\t * Note: Single text node insertion is handled in {@link #_handleTextNodeInsertion} and text node mutation is handled\n\t * in {@link #_handleTextMutation}).\n\t *\n\t * @private\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\t_handleContainerChildrenMutations( mutations, viewSelection ) {\n\t\t// Get common ancestor of all mutations.\n\t\tconst mutationsCommonAncestor = getMutationsContainer( mutations );\n\n\t\t// Quit if there is no common ancestor.\n\t\tif ( !mutationsCommonAncestor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domConverter = this.editor.editing.view.domConverter;\n\n\t\t// Get common ancestor in DOM.\n\t\tconst domMutationCommonAncestor = domConverter.mapViewToDom( mutationsCommonAncestor );\n\n\t\t// Create fresh DomConverter so it will not use existing mapping and convert current DOM to model.\n\t\t// This wouldn't be needed if DomConverter would allow to create fresh view without checking any mappings.\n\t\tconst freshDomConverter = new DomConverter();\n\t\tconst modelFromCurrentDom = this.editor.data.toModel(\n\t\t\tfreshDomConverter.domToView( domMutationCommonAncestor )\n\t\t).getChild( 0 );\n\n\t\t// Current model.\n\t\tconst currentModel = this.editor.editing.mapper.toModelElement( mutationsCommonAncestor );\n\n\t\t// If common ancestor is not mapped, do not do anything. It probably is a parent of another view element.\n\t\t// That means that we would need to diff model elements (see `if` below). Better return early instead of\n\t\t// trying to get a reasonable model ancestor. It will fell into the `if` below anyway.\n\t\t// This situation happens for example for lists. If `<ul>` is a common ancestor, `currentModel` is `undefined`\n\t\t// because `<ul>` is not mapped (`<li>`s are).\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/718.\n\t\tif ( !currentModel ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get children from both ancestors.\n\t\tconst modelFromDomChildren = Array.from( modelFromCurrentDom.getChildren() );\n\t\tconst currentModelChildren = Array.from( currentModel.getChildren() );\n\n\t\t// Remove the last `<softBreak>` from the end of `modelFromDomChildren` if there is no `<softBreak>` in current model.\n\t\t// If the described scenario happened, it means that this is a bogus `<br />` added by a browser.\n\t\tconst lastDomChild = modelFromDomChildren[ modelFromDomChildren.length - 1 ];\n\t\tconst lastCurrentChild = currentModelChildren[ currentModelChildren.length - 1 ];\n\n\t\tif ( lastDomChild && lastDomChild.is( 'softBreak' ) && lastCurrentChild && !lastCurrentChild.is( 'softBreak' ) ) {\n\t\t\tmodelFromDomChildren.pop();\n\t\t}\n\n\t\tconst schema = this.editor.model.schema;\n\n\t\t// Skip situations when common ancestor has any container elements.\n\t\tif ( !isSafeForTextMutation( modelFromDomChildren, schema ) || !isSafeForTextMutation( currentModelChildren, schema ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace &nbsp; inserted by the browser with normal space. See comment in `_handleTextMutation`.\n\t\t// Replace non-texts with any character. This is potentially dangerous but passes in manual tests. The thing is\n\t\t// that we need to take care of proper indexes so we cannot simply remove non-text elements from the content.\n\t\t// By inserting a character we keep all the real texts on their indexes.\n\t\tconst newText = modelFromDomChildren.map( item => item.is( 'text' ) ? item.data : '@' ).join( '' ).replace( /\\u00A0/g, ' ' );\n\t\tconst oldText = currentModelChildren.map( item => item.is( 'text' ) ? item.data : '@' ).join( '' ).replace( /\\u00A0/g, ' ' );\n\n\t\t// Do nothing if mutations created same text.\n\t\tif ( oldText === newText ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst diffResult = diff( oldText, newText );\n\n\t\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\n\n\t\t// Try setting new model selection according to passed view selection.\n\t\tlet modelSelectionRange = null;\n\n\t\tif ( viewSelection ) {\n\t\t\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\n\t\t}\n\n\t\tconst insertText = newText.substr( firstChangeAt, insertions );\n\t\tconst removeRange = this.editor.model.createRange(\n\t\t\tthis.editor.model.createPositionAt( currentModel, firstChangeAt ),\n\t\t\tthis.editor.model.createPositionAt( currentModel, firstChangeAt + deletions )\n\t\t);\n\n\t\tthis.editor.execute( 'input', {\n\t\t\ttext: insertText,\n\t\t\trange: removeRange,\n\t\t\tresultRange: modelSelectionRange\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTextMutation( mutation, viewSelection ) {\n\t\tif ( mutation.type != 'text' ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t// We want only normal spaces in the model and in the view. Renderer and DOM Converter will be then responsible\n\t\t// for rendering consecutive spaces using &nbsp;, but the model and the view has to be clear.\n\t\t// Other feature may introduce inserting non-breakable space on specific key stroke (for example shift + space).\n\t\t// However then it will be handled outside of mutations, like enter key is.\n\t\t// The replacing is here because it has to be done before `diff` and `diffToChanges` functions, as they\n\t\t// take `newText` and compare it to (cleaned up) view.\n\t\t// It could also be done in mutation observer too, however if any outside plugin would like to\n\t\t// introduce additional events for mutations, they would get already cleaned up version (this may be good or not).\n\t\tconst newText = mutation.newText.replace( /\\u00A0/g, ' ' );\n\t\t// To have correct `diffResult`, we also compare view node text data with &nbsp; replaced by space.\n\t\tconst oldText = mutation.oldText.replace( /\\u00A0/g, ' ' );\n\n\t\t// Do nothing if mutations created same text.\n\t\tif ( oldText === newText ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst diffResult = diff( oldText, newText );\n\n\t\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\n\n\t\t// Try setting new model selection according to passed view selection.\n\t\tlet modelSelectionRange = null;\n\n\t\tif ( viewSelection ) {\n\t\t\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\n\t\t}\n\n\t\t// Get the position in view and model where the changes will happen.\n\t\tconst viewPos = this.editing.view.createPositionAt( mutation.node, firstChangeAt );\n\t\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\n\t\tconst removeRange = this.editor.model.createRange( modelPos, modelPos.getShiftedBy( deletions ) );\n\t\tconst insertText = newText.substr( firstChangeAt, insertions );\n\n\t\tthis.editor.execute( 'input', {\n\t\t\ttext: insertText,\n\t\t\trange: removeRange,\n\t\t\tresultRange: modelSelectionRange\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTextNodeInsertion( mutation ) {\n\t\tif ( mutation.type != 'children' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst change = getSingleTextNodeChange( mutation );\n\t\tconst viewPos = this.editing.view.createPositionAt( mutation.node, change.index );\n\t\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\n\t\tconst insertedText = change.values[ 0 ].data;\n\n\t\tthis.editor.execute( 'input', {\n\t\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t\t// See comment in `_handleTextMutation`.\n\t\t\t// In this case we don't need to do this before `diff` because we diff whole nodes.\n\t\t\t// Just change &nbsp; in case there are some.\n\t\t\ttext: insertedText.replace( /\\u00A0/g, ' ' ),\n\t\t\trange: this.editor.model.createRange( modelPos )\n\t\t} );\n\t}\n}\n\n// Returns first common ancestor of all mutations that is either {@link module:engine/view/containerelement~ContainerElement}\n// or {@link module:engine/view/rootelement~RootElement}.\n//\n// @private\n// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n// @returns {module:engine/view/containerelement~ContainerElement|engine/view/rootelement~RootElement|undefined}\nfunction getMutationsContainer( mutations ) {\n\tconst lca = mutations\n\t\t.map( mutation => mutation.node )\n\t\t.reduce( ( commonAncestor, node ) => {\n\t\t\treturn commonAncestor.getCommonAncestor( node, { includeSelf: true } );\n\t\t} );\n\n\tif ( !lca ) {\n\t\treturn;\n\t}\n\n\t// We need to look for container and root elements only, so check all LCA's\n\t// ancestors (starting from itself).\n\treturn lca.getAncestors( { includeSelf: true, parentFirst: true } )\n\t\t.find( element => element.is( 'containerElement' ) || element.is( 'rootElement' ) );\n}\n\n// Returns true if provided array contains content that won't be problematic during diffing and text mutation handling.\n//\n// @param {Array.<module:engine/model/node~Node>} children\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction isSafeForTextMutation( children, schema ) {\n\treturn children.every( child => schema.isInline( child ) );\n}\n\n// Calculates first change index and number of characters that should be inserted and deleted starting from that index.\n//\n// @private\n// @param diffResult\n// @returns {{insertions: number, deletions: number, firstChangeAt: *}}\nfunction calculateChanges( diffResult ) {\n\t// Index where the first change happens. Used to set the position from which nodes will be removed and where will be inserted.\n\tlet firstChangeAt = null;\n\t// Index where the last change happens. Used to properly count how many characters have to be removed and inserted.\n\tlet lastChangeAt = null;\n\n\t// Get `firstChangeAt` and `lastChangeAt`.\n\tfor ( let i = 0; i < diffResult.length; i++ ) {\n\t\tconst change = diffResult[ i ];\n\n\t\tif ( change != 'equal' ) {\n\t\t\tfirstChangeAt = firstChangeAt === null ? i : firstChangeAt;\n\t\t\tlastChangeAt = i;\n\t\t}\n\t}\n\n\t// How many characters, starting from `firstChangeAt`, should be removed.\n\tlet deletions = 0;\n\t// How many characters, starting from `firstChangeAt`, should be inserted.\n\tlet insertions = 0;\n\n\tfor ( let i = firstChangeAt; i <= lastChangeAt; i++ ) {\n\t\t// If there is no change (equal) or delete, the character is existing in `oldText`. We count it for removing.\n\t\tif ( diffResult[ i ] != 'insert' ) {\n\t\t\tdeletions++;\n\t\t}\n\n\t\t// If there is no change (equal) or insert, the character is existing in `newText`. We count it for inserting.\n\t\tif ( diffResult[ i ] != 'delete' ) {\n\t\t\tinsertions++;\n\t\t}\n\t}\n\n\treturn { insertions, deletions, firstChangeAt };\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/input\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport InputCommand from './inputcommand';\n\nimport injectUnsafeKeystrokesHandling from './utils/injectunsafekeystrokeshandling';\nimport injectTypingMutationsHandling from './utils/injecttypingmutationshandling';\n\n/**\n * Handles text input coming from the keyboard or other input methods.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Input extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Input';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// TODO The above default configuration value should be defined using editor.config.define() once it's fixed.\n\t\tconst inputCommand = new InputCommand( editor, editor.config.get( 'typing.undoStep' ) || 20 );\n\n\t\teditor.commands.add( 'input', inputCommand );\n\n\t\tinjectUnsafeKeystrokesHandling( editor );\n\t\tinjectTypingMutationsHandling( editor );\n\t}\n\n\t/**\n\t * Checks batch if it is a result of user input - e.g. typing.\n\t *\n\t *\t\tconst input = editor.plugins.get( 'Input' );\n\t *\n\t *\t\teditor.model.document.on( 'change:data', ( evt, batch ) => {\n\t *\t\t\tif ( input.isTyping( batch ) ) {\n\t *\t\t\t\tconsole.log( 'The user typed something...' );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** This method checks if the batch was created using {@link module:typing/inputcommand~InputCommand 'input'}\n\t * command as typing changes coming from user input are inserted to the document using that command.\n\t *\n\t * @param {module:engine/model/batch~Batch} batch A batch to check.\n\t * @returns {Boolean}\n\t */\n\tisInput( batch ) {\n\t\tconst inputCommand = this.editor.commands.get( 'input' );\n\n\t\treturn inputCommand._batches.has( batch );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/deletecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\n\nimport ChangeBuffer from './utils/changebuffer';\n\n/**\n * The delete command. Used by the {@link module:typing/delete~Delete delete feature} to handle the <kbd>Delete</kbd> and\n * <kbd>Backspace</kbd> keys.\n *\n * @extends module:core/command~Command\n */\nexport default class DeleteCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {'forward'|'backward'} direction The directionality of the delete describing in what direction it\n\t * should consume the content when the selection is collapsed.\n\t */\n\tconstructor( editor, direction ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The directionality of the delete describing in what direction it should\n\t\t * consume the content when the selection is collapsed.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'forward'|'backward'} #direction\n\t\t */\n\t\tthis.direction = direction;\n\n\t\t/**\n\t\t * Delete's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {typing.ChangeBuffer} #buffer\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, editor.config.get( 'typing.undoStep' ) );\n\t}\n\n\t/**\n\t * The current change buffer.\n\t *\n\t * @type {module:typing/utils/changebuffer~ChangeBuffer}\n\t */\n\tget buffer() {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * Executes the delete command. Depending on whether the selection is collapsed or not, deletes its content\n\t * or a piece of content in the {@link #direction defined direction}.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {'character'} [options.unit='character'] See {@link module:engine/model/utils/modifyselection~modifySelection}'s options.\n\t * @param {Number} [options.sequence=1] A number describing which subsequent delete event it is without the key being released.\n\t * See the {@link module:engine/view/document~Document#event:delete} event data.\n\t * @param {module:engine/model/selection~Selection} [options.selection] Selection to remove. If not set, current model selection\n\t * will be used.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tthis._buffer.lock();\n\n\t\t\tconst selection = writer.createSelection( options.selection || doc.selection );\n\n\t\t\t// Do not replace the whole selected content if selection was collapsed.\n\t\t\t// This prevents such situation:\n\t\t\t//\n\t\t\t// <h1></h1><p>[]</p>\t-->  <h1>[</h1><p>]</p> \t\t-->  <p></p>\n\t\t\t// starting content\t\t-->   after `modifySelection`\t-->  after `deleteContent`.\n\t\t\tconst doNotResetEntireContent = selection.isCollapsed;\n\n\t\t\t// Try to extend the selection in the specified direction.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tmodel.modifySelection( selection, { direction: this.direction, unit: options.unit } );\n\t\t\t}\n\n\t\t\t// Check if deleting in an empty editor. See #61.\n\t\t\tif ( this._shouldEntireContentBeReplacedWithParagraph( options.sequence || 1 ) ) {\n\t\t\t\tthis._replaceEntireContentWithParagraph( writer );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If selection is still collapsed, then there's nothing to delete.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet changeCount = 0;\n\n\t\t\tselection.getFirstRange().getMinimalFlatRanges().forEach( range => {\n\t\t\t\tchangeCount += count(\n\t\t\t\t\trange.getWalker( { singleCharacters: true, ignoreElementEnd: true, shallow: true } )\n\t\t\t\t);\n\t\t\t} );\n\n\t\t\tmodel.deleteContent( selection, { doNotResetEntireContent } );\n\t\t\tthis._buffer.input( changeCount );\n\n\t\t\twriter.setSelection( selection );\n\n\t\t\tthis._buffer.unlock();\n\t\t} );\n\t}\n\n\t/**\n\t * If the user keeps <kbd>Backspace</kbd> or <kbd>Delete</kbd> key pressed, the content of the current\n\t * editable will be cleared. However, this will not yet lead to resetting the remaining block to a paragraph\n\t * (which happens e.g. when the user does <kbd>Ctrl</kbd> + <kbd>A</kbd>, <kbd>Backspace</kbd>).\n\t *\n\t * But, if the user pressed the key in an empty editable for the first time,\n\t * we want to replace the entire content with a paragraph if:\n\t *\n\t * * the current limit element is empty,\n\t * * the paragraph is allowed in the limit element,\n\t * * the limit doesn't already have a paragraph inside.\n\t *\n\t * See https://github.com/ckeditor/ckeditor5-typing/issues/61.\n\t *\n\t * @private\n\t * @param {Number} sequence A number describing which subsequent delete event it is without the key being released.\n\t * @returns {Boolean}\n\t */\n\t_shouldEntireContentBeReplacedWithParagraph( sequence ) {\n\t\t// Does nothing if user pressed and held the \"Backspace\" or \"Delete\" key.\n\t\tif ( sequence > 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst limitElement = model.schema.getLimitElement( selection );\n\n\t\t// If a collapsed selection contains the whole content it means that the content is empty\n\t\t// (from the user perspective).\n\t\tconst limitElementIsEmpty = selection.isCollapsed && selection.containsEntireContent( limitElement );\n\n\t\tif ( !limitElementIsEmpty ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !model.schema.checkChild( limitElement, 'paragraph' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst limitElementFirstChild = limitElement.getChild( 0 );\n\n\t\t// Does nothing if the limit element already contains only a paragraph.\n\t\t// We ignore the case when paragraph might have some inline elements (<p><inlineWidget>[]</inlineWidget></p>)\n\t\t// because we don't support such cases yet and it's unclear whether inlineWidget shouldn't be a limit itself.\n\t\tif ( limitElementFirstChild && limitElementFirstChild.name === 'paragraph' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * The entire content is replaced with the paragraph. Selection is moved inside the paragraph.\n\t *\n\t * @private\n\t */\n\t_replaceEntireContentWithParagraph( writer ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst limitElement = model.schema.getLimitElement( selection );\n\t\tconst paragraph = writer.createElement( 'paragraph' );\n\n\t\twriter.remove( writer.createRangeIn( limitElement ) );\n\t\twriter.insert( paragraph, limitElement );\n\n\t\twriter.setSelection( paragraph, 0 );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/deleteobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Delete observer introduces the {@link module:engine/view/document~Document#event:delete} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DeleteObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst document = view.document;\n\t\tlet sequence = 0;\n\n\t\tdocument.on( 'keyup', ( evt, data ) => {\n\t\t\tif ( data.keyCode == keyCodes.delete || data.keyCode == keyCodes.backspace ) {\n\t\t\t\tsequence = 0;\n\t\t\t}\n\t\t} );\n\n\t\tdocument.on( 'keydown', ( evt, data ) => {\n\t\t\tconst deleteData = {};\n\n\t\t\tif ( data.keyCode == keyCodes.delete ) {\n\t\t\t\tdeleteData.direction = 'forward';\n\t\t\t\tdeleteData.unit = 'character';\n\t\t\t} else if ( data.keyCode == keyCodes.backspace ) {\n\t\t\t\tdeleteData.direction = 'backward';\n\t\t\t\tdeleteData.unit = 'codePoint';\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasWordModifier = env.isMac ? data.altKey : data.ctrlKey;\n\t\t\tdeleteData.unit = hasWordModifier ? 'word' : deleteData.unit;\n\t\t\tdeleteData.sequence = ++sequence;\n\n\t\t\tfireViewDeleteEvent( evt, data.domEvent, deleteData );\n\t\t} );\n\n\t\t// `beforeinput` is handled only for Android devices. Desktop Chrome and iOS are skipped because they are working fine now.\n\t\tif ( env.isAndroid ) {\n\t\t\tdocument.on( 'beforeinput', ( evt, data ) => {\n\t\t\t\t// If event type is other than `deleteContentBackward` then this is not deleting.\n\t\t\t\tif ( data.domEvent.inputType != 'deleteContentBackward' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst deleteData = {\n\t\t\t\t\tunit: 'codepoint',\n\t\t\t\t\tdirection: 'backward',\n\t\t\t\t\tsequence: 1\n\t\t\t\t};\n\n\t\t\t\t// Android IMEs may change the DOM selection on `beforeinput` event so that the selection contains all the text\n\t\t\t\t// that the IME wants to remove. We will pass this information to `delete` event so proper part of the content is removed.\n\t\t\t\t//\n\t\t\t\t// Sometimes it is only expanding by a one character (in case of collapsed selection). In this case we don't need to\n\t\t\t\t// set a different selection to remove, it will work just fine.\n\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\tif ( domSelection.anchorNode == domSelection.focusNode && domSelection.anchorOffset + 1 != domSelection.focusOffset ) {\n\t\t\t\t\tdeleteData.selectionToRemove = view.domConverter.domSelectionToView( domSelection );\n\t\t\t\t}\n\n\t\t\t\tfireViewDeleteEvent( evt, data.domEvent, deleteData );\n\t\t\t} );\n\t\t}\n\n\t\tfunction fireViewDeleteEvent( originalEvent, domEvent, deleteData ) {\n\t\t\t// Save the event object to check later if it was stopped or not.\n\t\t\tlet event;\n\t\t\tdocument.once( 'delete', evt => ( event = evt ), { priority: Number.POSITIVE_INFINITY } );\n\n\t\t\tdocument.fire( 'delete', new DomEventData( document, domEvent, deleteData ) );\n\n\t\t\t// Stop the original event if `delete` event was stopped.\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\tif ( event && event.stop.called ) {\n\t\t\t\toriginalEvent.stop();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user tries to delete content (e.g. presses <kbd>Delete</kbd> or <kbd>Backspace</kbd>).\n *\n * Note: This event is fired by the {@link module:typing/deleteobserver~DeleteObserver observer}\n * (usually registered by the {@link module:typing/delete~Delete delete feature}).\n *\n * @event module:engine/view/document~Document#event:delete\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {'forward'|'delete'} data.direction The direction in which the deletion should happen.\n * @param {'character'|'word'} data.unit The \"amount\" of content that should be deleted.\n * @param {Number} data.sequence A number describing which subsequent delete event it is without the key being released.\n * If it's 2 or more it means that the key was pressed and hold.\n * @param {module:engine/view/selection~Selection} [data.selectionToRemove] View selection which content should be removed. If not set,\n * current selection should be used.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/delete\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport DeleteCommand from './deletecommand';\nimport DeleteObserver from './deleteobserver';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * The delete and backspace feature. Handles the <kbd>Delete</kbd> and <kbd>Backspace</kbd> keys in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Delete extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Delete';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tview.addObserver( DeleteObserver );\n\n\t\teditor.commands.add( 'forwardDelete', new DeleteCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'delete', new DeleteCommand( editor, 'backward' ) );\n\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tconst deleteCommandParams = { unit: data.unit, sequence: data.sequence };\n\n\t\t\t// If a specific (view) selection to remove was set, convert it to a model selection and set as a parameter for `DeleteCommand`.\n\t\t\tif ( data.selectionToRemove ) {\n\t\t\t\tconst modelSelection = editor.model.createSelection();\n\t\t\t\tconst ranges = [];\n\n\t\t\t\tfor ( const viewRange of data.selectionToRemove.getRanges() ) {\n\t\t\t\t\tranges.push( editor.editing.mapper.toModelRange( viewRange ) );\n\t\t\t\t}\n\n\t\t\t\tmodelSelection.setTo( ranges );\n\n\t\t\t\tdeleteCommandParams.selection = modelSelection;\n\t\t\t}\n\n\t\t\teditor.execute( data.direction == 'forward' ? 'forwardDelete' : 'delete', deleteCommandParams );\n\n\t\t\tdata.preventDefault();\n\n\t\t\tview.scrollToTheSelection();\n\t\t} );\n\n\t\t// Android IMEs have a quirk - they change DOM selection after the input changes were performed by the browser.\n\t\t// This happens on `keyup` event. Android doesn't know anything about our deletion and selection handling. Even if the selection\n\t\t// was changed during input events, IME remembers the position where the selection \"should\" be placed and moves it there.\n\t\t//\n\t\t// To prevent incorrect selection, we save the selection after deleting here and then re-set it on `keyup`. This has to be done\n\t\t// on DOM selection level, because on `keyup` the model selection is still the same as it was just after deletion, so it\n\t\t// wouldn't be changed and the fix would do nothing.\n\t\t//\n\t\tif ( env.isAndroid ) {\n\t\t\tlet domSelectionAfterDeletion = null;\n\n\t\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\tdomSelectionAfterDeletion = {\n\t\t\t\t\tanchorNode: domSelection.anchorNode,\n\t\t\t\t\tanchorOffset: domSelection.anchorOffset,\n\t\t\t\t\tfocusNode: domSelection.focusNode,\n\t\t\t\t\tfocusOffset: domSelection.focusOffset\n\t\t\t\t};\n\t\t\t}, { priority: 'lowest' } );\n\n\t\t\tthis.listenTo( viewDocument, 'keyup', ( evt, data ) => {\n\t\t\t\tif ( domSelectionAfterDeletion ) {\n\t\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\t\tdomSelection.collapse( domSelectionAfterDeletion.anchorNode, domSelectionAfterDeletion.anchorOffset );\n\t\t\t\t\tdomSelection.extend( domSelectionAfterDeletion.focusNode, domSelectionAfterDeletion.focusOffset );\n\n\t\t\t\t\tdomSelectionAfterDeletion = null;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/typing\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Input from './input';\nimport Delete from './delete';\n\n/**\n * The typing feature. It handles typing.\n *\n * This is a \"glue\" plugin which loads the {@link module:typing/input~Input} and {@link module:typing/delete~Delete}\n * plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Typing extends Plugin {\n\tstatic get requires() {\n\t\treturn [ Input, Delete ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Typing';\n\t}\n}\n\n/**\n * The configuration of the typing features. Used by the features from the `@ckeditor/ckeditor5-typing` package.\n *\n * Read more in {@link module:typing/typing~TypingConfig}.\n *\n * @member {module:typing/typing~TypingConfig} module:core/editor/editorconfig~EditorConfig#typing\n */\n\n/**\n * The configuration of the typing features. Used by the typing features in `@ckeditor/ckeditor5-typing` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\ttyping: ... // Typing feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface TypingConfig\n */\n\n/**\n * The granularity of undo/redo for typing and deleting. The value `20` means (more or less) that a new undo step\n * is created every 20 characters are inserted or deleted.\n *\n * @member {Number} [module:typing/typing~TypingConfig#undoStep=20]\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/nooperation\n */\n\nimport Operation from './operation';\n\n/**\n * Operation which is doing nothing (\"empty operation\", \"do-nothing operation\", \"noop\"). This is an operation,\n * which when executed does not change the tree model. It still has some parameters defined for transformation purposes.\n *\n * In most cases this operation is a result of transforming operations. When transformation returns\n * {@link module:engine/model/operation/nooperation~NoOperation} it means that changes done by the transformed operation\n * have already been applied.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class NoOperation extends Operation {\n\tget type() {\n\t\treturn 'noop';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/nooperation~NoOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new NoOperation( this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/nooperation~NoOperation}\n\t */\n\tgetReversed() {\n\t\treturn new NoOperation( this.baseVersion + 1 );\n\t}\n\n\t_execute() {\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'NoOperation';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport InsertOperation from './insertoperation';\nimport AttributeOperation from './attributeoperation';\nimport RenameOperation from './renameoperation';\nimport MarkerOperation from './markeroperation';\nimport MoveOperation from './moveoperation';\nimport RootAttributeOperation from './rootattributeoperation';\nimport MergeOperation from './mergeoperation';\nimport SplitOperation from './splitoperation';\nimport NoOperation from './nooperation';\nimport Range from '../range';\nimport Position from '../position';\n\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\nconst transformations = new Map();\n\n/**\n * @module engine/model/operation/transform\n */\n\n/**\n * Sets a transformation function to be be used to transform instances of class `OperationA` by instances of class `OperationB`.\n *\n * The `transformationFunction` is passed three parameters:\n *\n * * `a` - operation to be transformed, an instance of `OperationA`,\n * * `b` - operation to be transformed by, an instance of `OperationB`,\n * * {@link module:engine/model/operation/transform~TransformationContext `context`} - object with additional information about\n * transformation context.\n *\n * The `transformationFunction` should return transformation result, which is an array with one or multiple\n * {@link module:engine/model/operation/operation~Operation operation} instances.\n *\n * @protected\n * @param {Function} OperationA\n * @param {Function} OperationB\n * @param {Function} transformationFunction Function to use for transforming.\n */\nfunction setTransformation( OperationA, OperationB, transformationFunction ) {\n\tlet aGroup = transformations.get( OperationA );\n\n\tif ( !aGroup ) {\n\t\taGroup = new Map();\n\t\ttransformations.set( OperationA, aGroup );\n\t}\n\n\taGroup.set( OperationB, transformationFunction );\n}\n\n/**\n * Returns a previously set transformation function for transforming an instance of `OperationA` by an instance of `OperationB`.\n *\n * If no transformation was set for given pair of operations, {@link module:engine/model/operation/transform~noUpdateTransformation}\n * is returned. This means that if no transformation was set, the `OperationA` instance will not change when transformed\n * by the `OperationB` instance.\n *\n * @private\n * @param {Function} OperationA\n * @param {Function} OperationB\n * @returns {Function} Function set to transform an instance of `OperationA` by an instance of `OperationB`.\n */\nfunction getTransformation( OperationA, OperationB ) {\n\tconst aGroup = transformations.get( OperationA );\n\n\tif ( aGroup && aGroup.has( OperationB ) ) {\n\t\treturn aGroup.get( OperationB );\n\t}\n\n\treturn noUpdateTransformation;\n}\n\n/**\n * A transformation function that only clones operation to transform, without changing it.\n *\n * @private\n * @param {module:engine/model/operation/operation~Operation} a Operation to transform.\n * @returns {Array.<module:engine/model/operation/operation~Operation>}\n */\nfunction noUpdateTransformation( a ) {\n\treturn [ a ];\n}\n\n/**\n * Transforms operation `a` by operation `b`.\n *\n * @param {module:engine/model/operation/operation~Operation} a Operation to be transformed.\n * @param {module:engine/model/operation/operation~Operation} b Operation to transform by.\n * @param {module:engine/model/operation/transform~TransformationContext} context Transformation context for this transformation.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} Transformation result.\n */\nexport function transform( a, b, context = {} ) {\n\tconst transformationFunction = getTransformation( a.constructor, b.constructor );\n\n\ttry {\n\t\ta = a.clone();\n\n\t\treturn transformationFunction( a, b, context );\n\t} catch ( e ) {\n\t\t// @if CK_DEBUG // console.warn( 'Error during operation transformation!', e.message );\n\t\t// @if CK_DEBUG // console.warn( 'Transformed operation', a );\n\t\t// @if CK_DEBUG // console.warn( 'Operation transformed by', b );\n\t\t// @if CK_DEBUG // console.warn( 'context.aIsStrong', context.aIsStrong );\n\t\t// @if CK_DEBUG // console.warn( 'context.aWasUndone', context.aWasUndone );\n\t\t// @if CK_DEBUG // console.warn( 'context.bWasUndone', context.bWasUndone );\n\t\t// @if CK_DEBUG // console.warn( 'context.abRelation', context.abRelation );\n\t\t// @if CK_DEBUG // console.warn( 'context.baRelation', context.baRelation );\n\n\t\tthrow e;\n\t}\n}\n\n/**\n * Performs a transformation of two sets of operations - `operationsA` and `operationsB`. The transformation is two-way -\n * both transformed `operationsA` and transformed `operationsB` are returned.\n *\n * Note, that the first operation in each set should base on the same document state (\n * {@link module:engine/model/document~Document#version document version}).\n *\n * It is assumed that `operationsA` are \"more important\" during conflict resolution between two operations.\n *\n * New copies of both passed arrays and operations inside them are returned. Passed arguments are not altered.\n *\n * Base versions of the transformed operations sets are updated accordingly. For example, assume that base versions are `4`\n * and there are `3` operations in `operationsA` and `5` operations in `operationsB`. Then:\n *\n * * transformed `operationsA` will start from base version `9` (`4` base version + `5` operations B),\n * * transformed `operationsB` will start from base version `7` (`4` base version + `3` operations A).\n *\n * If no operation was broken into two during transformation, then both sets will end up with an operation that bases on version `11`:\n *\n * * transformed `operationsA` start from `9` and there are `3` of them, so the last will have `baseVersion` equal to `11`,\n * * transformed `operationsB` start from `7` and there are `5` of them, so the last will have `baseVersion` equal to `11`.\n *\n * @param {Array.<module:engine/model/operation/operation~Operation>} operationsA\n * @param {Array.<module:engine/model/operation/operation~Operation>} operationsB\n * @param {Object} options Additional transformation options.\n * @param {module:engine/model/document~Document|null} options.document Document which the operations change.\n * @param {Boolean} [options.useRelations=false] Whether during transformation relations should be used (used during undo for\n * better conflict resolution).\n * @param {Boolean} [options.padWithNoOps=false] Whether additional {@link module:engine/model/operation/nooperation~NoOperation}s\n * should be added to the transformation results to force the same last base version for both transformed sets (in case\n * if some operations got broken into multiple operations during transformation).\n * @returns {Object} Transformation result.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} return.operationsA Transformed `operationsA`.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} return.operationsB Transformed `operationsB`.\n * @returns {Map} return.originalOperations A map that links transformed operations to original operations. The keys are the transformed\n * operations and the values are the original operations from the input (`operationsA` and `operationsB`).\n */\nexport function transformSets( operationsA, operationsB, options ) {\n\t// Create new arrays so the originally passed arguments are not changed.\n\t// No need to clone operations, they are cloned as they are transformed.\n\toperationsA = operationsA.slice();\n\toperationsB = operationsB.slice();\n\n\tconst contextFactory = new ContextFactory( options.document, options.useRelations, options.forceWeakRemove );\n\tcontextFactory.setOriginalOperations( operationsA );\n\tcontextFactory.setOriginalOperations( operationsB );\n\n\tconst originalOperations = contextFactory.originalOperations;\n\n\t// If one of sets is empty there is simply nothing to transform, so return sets as they are.\n\tif ( operationsA.length == 0 || operationsB.length == 0 ) {\n\t\treturn { operationsA, operationsB, originalOperations };\n\t}\n\t//\n\t// Following is a description of transformation process:\n\t//\n\t// There are `operationsA` and `operationsB` to be transformed, both by both.\n\t//\n\t// So, suppose we have sets of two operations each: `operationsA` = `[ a1, a2 ]`, `operationsB` = `[ b1, b2 ]`.\n\t//\n\t// Remember, that we can only transform operations that base on the same context. We assert that `a1` and `b1` base on\n\t// the same context and we transform them. Then, we get `a1'` and `b1'`. `a2` bases on a context with `a1` -- `a2`\n\t// is an operation that followed `a1`. Similarly, `b2` bases on a context with `b1`.\n\t//\n\t// However, since `a1'` is a result of transformation by `b1`, `a1'` now also has a context with `b1`. This means that\n\t// we can safely transform `a1'` by `b2`. As we finish transforming `a1`, we also transformed all `operationsB`.\n\t// All `operationsB` also have context including `a1`. Now, we can properly transform `a2` by those operations.\n\t//\n\t// The transformation process can be visualized on a transformation diagram (\"diamond diagram\"):\n\t//\n\t//          [the initial state]\n\t//         [common for a1 and b1]\n\t//\n\t//                   *\n\t//                  / \\\n\t//                 /   \\\n\t//               b1     a1\n\t//               /       \\\n\t//              /         \\\n\t//             *           *\n\t//            / \\         / \\\n\t//           /   \\       /   \\\n\t//         b2    a1'   b1'    a2\n\t//         /       \\   /       \\\n\t//        /         \\ /         \\\n\t//       *           *           *\n\t//        \\         / \\         /\n\t//         \\       /   \\       /\n\t//        a1''   b2'   a2'   b1''\n\t//           \\   /       \\   /\n\t//            \\ /         \\ /\n\t//             *           *\n\t//              \\         /\n\t//               \\       /\n\t//              a2''   b2''\n\t//                 \\   /\n\t//                  \\ /\n\t//                   *\n\t//\n\t//           [the final state]\n\t//\n\t// The final state can be reached from the initial state by applying `a1`, `a2`, `b1''` and `b2''`, as well as by\n\t// applying `b1`, `b2`, `a1''`, `a2''`. Note how the operations get to a proper common state before each pair is\n\t// transformed.\n\t//\n\t// Another thing to consider is that an operation during transformation can be broken into multiple operations.\n\t// Suppose that `a1` * `b1` = `[ a11', a12' ]` (instead of `a1'` that we considered previously).\n\t//\n\t// In that case, we leave `a12'` for later and we continue transforming `a11'` until it is transformed by all `operationsB`\n\t// (in our case it is just `b2`). At this point, `b1` is transformed by \"whole\" `a1`, while `b2` is only transformed\n\t// by `a11'`. Similarly, `a12'` is only transformed by `b1`. This leads to a conclusion that we need to start transforming `a12'`\n\t// from the moment just after it was broken. So, `a12'` is transformed by `b2`. Now, \"the whole\" `a1` is transformed\n\t// by `operationsB`, while all `operationsB` are transformed by \"the whole\" `a1`. This means that we can continue with\n\t// following `operationsA` (in our case it is just `a2`).\n\t//\n\t// Of course, also `operationsB` can be broken. However, since we focus on transforming operation `a` to the end,\n\t// the only thing to do is to store both pieces of operation `b`, so that the next transformed operation `a` will\n\t// be transformed by both of them.\n\t//\n\t//                       *\n\t//                      / \\\n\t//                     /   \\\n\t//                    /     \\\n\t//                  b1       a1\n\t//                  /         \\\n\t//                 /           \\\n\t//                /             \\\n\t//               *               *\n\t//              / \\             / \\\n\t//             /  a11'         /   \\\n\t//            /     \\         /     \\\n\t//          b2       *      b1'      a2\n\t//          /       / \\     /         \\\n\t//         /       /  a12' /           \\\n\t//        /       /     \\ /             \\\n\t//       *       b2'     *               *\n\t//        \\     /       / \\             /\n\t//       a11'' /     b21'' \\           /\n\t//          \\ /       /     \\         /\n\t//           *       *      a2'     b1''\n\t//            \\     / \\       \\     /\n\t//          a12'' b22''\\       \\   /\n\t//              \\ /     \\       \\ /\n\t//               *      a2''     *\n\t//                \\       \\     /\n\t//                 \\       \\  b21'''\n\t//                  \\       \\ /\n\t//                a2'''      *\n\t//                    \\     /\n\t//                     \\  b22'''\n\t//                      \\ /\n\t//                       *\n\t//\n\t// Note, how `a1` is broken and transformed into `a11'` and `a12'`, while `b2'` got broken and transformed into `b21''` and `b22''`.\n\t//\n\t// Having all that on mind, here is an outline for the transformation process algorithm:\n\t//\n\t// 1. We have `operationsA` and `operationsB` array, which we dynamically update as the transformation process goes.\n\t//\n\t// 2. We take next (or first) operation from `operationsA` and check from which operation `b` we need to start transforming it.\n\t// All original `operationsA` are set to be transformed starting from the first operation `b`.\n\t//\n\t// 3. We take operations from `operationsB`, one by one, starting from the correct one, and transform operation `a`\n\t// by operation `b` (and vice versa). We update `operationsA` and `operationsB` by replacing the original operations\n\t// with the transformation results.\n\t//\n\t// 4. If operation is broken into multiple operations, we save all the new operations in the place of the\n\t// original operation.\n\t//\n\t// 5. Additionally, if operation `a` was broken, for the \"new\" operation, we remember from which operation `b` it should\n\t// be transformed by.\n\t//\n\t// 6. We continue transforming \"current\" operation `a` until it is transformed by all `operationsB`. Then, go to 2.\n\t// unless the last operation `a` was transformed.\n\t//\n\t// The actual implementation of the above algorithm is slightly different, as only one loop (while) is used.\n\t// The difference is that we have \"current\" `a` operation to transform and we store the index of the next `b` operation\n\t// to transform by. Each loop operates on two indexes then: index pointing to currently processed `a` operation and\n\t// index pointing to next `b` operation. Each loop is just one `a * b` + `b * a` transformation. After each loop\n\t// operation `b` index is updated. If all `b` operations were visited for the current `a` operation, we change\n\t// current `a` operation index to the next one.\n\t//\n\n\t// For each operation `a`, keeps information what is the index in `operationsB` from which the transformation should start.\n\tconst nextTransformIndex = new WeakMap();\n\n\t// For all the original `operationsA`, set that they should be transformed starting from the first of `operationsB`.\n\tfor ( const op of operationsA ) {\n\t\tnextTransformIndex.set( op, 0 );\n\t}\n\n\t// Additional data that is used for some postprocessing after the main transformation process is done.\n\tconst data = {\n\t\tnextBaseVersionA: operationsA[ operationsA.length - 1 ].baseVersion + 1,\n\t\tnextBaseVersionB: operationsB[ operationsB.length - 1 ].baseVersion + 1,\n\t\toriginalOperationsACount: operationsA.length,\n\t\toriginalOperationsBCount: operationsB.length\n\t};\n\n\t// Index of currently transformed operation `a`.\n\tlet i = 0;\n\n\t// While not all `operationsA` are transformed...\n\twhile ( i < operationsA.length ) {\n\t\t// Get \"current\" operation `a`.\n\t\tconst opA = operationsA[ i ];\n\n\t\t// For the \"current\" operation `a`, get the index of the next operation `b` to transform by.\n\t\tconst indexB = nextTransformIndex.get( opA );\n\n\t\t// If operation `a` was already transformed by every operation `b`, change \"current\" operation `a` to the next one.\n\t\tif ( indexB == operationsB.length ) {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst opB = operationsB[ indexB ];\n\n\t\t// Transform `a` by `b` and `b` by `a`.\n\t\tconst newOpsA = transform( opA, opB, contextFactory.getContext( opA, opB, true ) );\n\t\tconst newOpsB = transform( opB, opA, contextFactory.getContext( opB, opA, false ) );\n\t\t// As a result we get one or more `newOpsA` and one or more `newOpsB` operations.\n\n\t\t// Update contextual information about operations.\n\t\tcontextFactory.updateRelation( opA, opB );\n\n\t\tcontextFactory.setOriginalOperations( newOpsA, opA );\n\t\tcontextFactory.setOriginalOperations( newOpsB, opB );\n\n\t\t// For new `a` operations, update their index of the next operation `b` to transform them by.\n\t\t//\n\t\t// This is needed even if there was only one result (`a` was not broken) because that information is used\n\t\t// at the beginning of this loop every time.\n\t\tfor ( const newOpA of newOpsA ) {\n\t\t\t// Acknowledge, that operation `b` also might be broken into multiple operations.\n\t\t\t//\n\t\t\t// This is why we raise `indexB` not just by 1. If `newOpsB` are multiple operations, they will be\n\t\t\t// spliced in the place of `opB`. So we need to change `transformBy` accordingly, so that an operation won't\n\t\t\t// be transformed by the same operation (part of it) again.\n\t\t\tnextTransformIndex.set( newOpA, indexB + newOpsB.length );\n\t\t}\n\n\t\t// Update `operationsA` and `operationsB` with the transformed versions.\n\t\toperationsA.splice( i, 1, ...newOpsA );\n\t\toperationsB.splice( indexB, 1, ...newOpsB );\n\t}\n\n\tif ( options.padWithNoOps ) {\n\t\t// If no-operations padding is enabled, count how many extra `a` and `b` operations were generated.\n\t\tconst brokenOperationsACount = operationsA.length - data.originalOperationsACount;\n\t\tconst brokenOperationsBCount = operationsB.length - data.originalOperationsBCount;\n\n\t\t// Then, if that number is not the same, pad `operationsA` or `operationsB` with correct number of no-ops so\n\t\t// that the base versions are equalled.\n\t\t//\n\t\t// Note that only one array will be updated, as only one of those subtractions can be greater than zero.\n\t\tpadWithNoOps( operationsA, brokenOperationsBCount - brokenOperationsACount );\n\t\tpadWithNoOps( operationsB, brokenOperationsACount - brokenOperationsBCount );\n\t}\n\n\t// Finally, update base versions of transformed operations.\n\tupdateBaseVersions( operationsA, data.nextBaseVersionB );\n\tupdateBaseVersions( operationsB, data.nextBaseVersionA );\n\n\treturn { operationsA, operationsB, originalOperations };\n}\n\n// Gathers additional data about operations processed during transformation. Can be used to obtain contextual information\n// about two operations that are about to be transformed. This contextual information can be used for better conflict resolution.\nclass ContextFactory {\n\t// Creates `ContextFactory` instance.\n\t//\n\t// @param {module:engine/model/document~Document} document Document which the operations change.\n\t// @param {Boolean} useRelations Whether during transformation relations should be used (used during undo for\n\t// better conflict resolution).\n\t// @param {Boolean} [forceWeakRemove=false] If set to `false`, remove operation will be always stronger than move operation,\n\t// so the removed nodes won't end up back in the document root. When set to `true`, context data will be used.\n\tconstructor( document, useRelations, forceWeakRemove = false ) {\n\t\t// For each operation that is created during transformation process, we keep a reference to the original operation\n\t\t// which it comes from. The original operation works as a kind of \"identifier\". Every contextual information\n\t\t// gathered during transformation that we want to save for given operation, is actually saved for the original operation.\n\t\t// This way no matter if operation `a` is cloned, then transformed, even breaks, we still have access to the previously\n\t\t// gathered data through original operation reference.\n\t\tthis.originalOperations = new Map();\n\n\t\t// `model.History` instance which information about undone operations will be taken from.\n\t\tthis._history = document.history;\n\n\t\t// Whether additional context should be used.\n\t\tthis._useRelations = useRelations;\n\n\t\tthis._forceWeakRemove = !!forceWeakRemove;\n\n\t\t// Relations is a double-map structure (maps in map) where for two operations we store how those operations were related\n\t\t// to each other. Those relations are evaluated during transformation process. For every transformated pair of operations\n\t\t// we keep relations between them.\n\t\tthis._relations = new Map();\n\t}\n\n\t// Sets \"original operation\" for given operations.\n\t//\n\t// During transformation process, operations are cloned, then changed, then processed again, sometimes broken into two\n\t// or multiple operations. When gathering additional data it is important that all operations can be somehow linked\n\t// so a cloned and transformed \"version\" still kept track of the data assigned earlier to it.\n\t//\n\t// The original operation object will be used as such an universal linking id. Throughout the transformation process\n\t// all cloned operations will refer to \"the original operation\" when storing and reading additional data.\n\t//\n\t// If `takeFrom` is not set, each operation from `operations` array will be assigned itself as \"the original operation\".\n\t// This should be used as an initialization step.\n\t//\n\t// If `takeFrom` is set, each operation from `operations` will be assigned the same original operation as assigned\n\t// for `takeFrom` operation. This should be used to update original operations. It should be used in a way that\n\t// `operations` are the result of `takeFrom` transformation to ensure proper \"original operation propagation\".\n\t//\n\t// @param {Array.<module:engine/model/operation/operation~Operation>} operations\n\t// @param {module:engine/model/operation/operation~Operation|null} [takeFrom=null]\n\tsetOriginalOperations( operations, takeFrom = null ) {\n\t\tconst originalOperation = takeFrom ? this.originalOperations.get( takeFrom ) : null;\n\n\t\tfor ( const operation of operations ) {\n\t\t\tthis.originalOperations.set( operation, originalOperation || operation );\n\t\t}\n\t}\n\n\t// Saves a relation between operations `opA` and `opB`.\n\t//\n\t// Relations are then later used to help solve conflicts when operations are transformed.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\tupdateRelation( opA, opB ) {\n\t\t// The use of relations is described in a bigger detail in transformation functions.\n\t\t//\n\t\t// In brief, this function, for specified pairs of operation types, checks how positions defined in those operations relate.\n\t\t// Then those relations are saved. For example, for two move operations, it is saved if one of those operations target\n\t\t// position is before the other operation source position. This kind of information gives contextual information when\n\t\t// transformation is used during undo. Similar checks are done for other pairs of operations.\n\t\t//\n\t\tswitch ( opA.constructor ) {\n\t\t\tcase MoveOperation: {\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tif ( opA.targetPosition.isEqual( opB.sourcePosition ) || opB.movedRange.containsPosition( opA.targetPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertAtSource' );\n\t\t\t\t\t\t} else if ( opA.targetPosition.isEqual( opB.deletionPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertBetween' );\n\t\t\t\t\t\t} else if ( opA.targetPosition.isAfter( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'moveTargetAfter' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase MoveOperation: {\n\t\t\t\t\t\tif ( opA.targetPosition.isEqual( opB.sourcePosition ) || opA.targetPosition.isBefore( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertBefore' );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertAfter' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase SplitOperation: {\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tif ( opA.splitPosition.isBefore( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'splitBefore' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase MoveOperation: {\n\t\t\t\t\t\tif ( opA.splitPosition.isEqual( opB.sourcePosition ) || opA.splitPosition.isBefore( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'splitBefore' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase MergeOperation: {\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tif ( !opA.targetPosition.isEqual( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'mergeTargetNotMoved' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( opA.sourcePosition.isEqual( opB.targetPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'mergeSourceNotMoved' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( opA.sourcePosition.isEqual( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'mergeSameElement' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase SplitOperation: {\n\t\t\t\t\t\tif ( opA.sourcePosition.isEqual( opB.splitPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'splitAtSource' );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase MarkerOperation: {\n\t\t\t\tconst markerRange = opA.newRange;\n\n\t\t\t\tif ( !markerRange ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MoveOperation: {\n\t\t\t\t\t\tconst movedRange = Range._createFromPositionAndShift( opB.sourcePosition, opB.howMany );\n\n\t\t\t\t\t\tconst affectedLeft = movedRange.containsPosition( markerRange.start ) ||\n\t\t\t\t\t\t\tmovedRange.start.isEqual( markerRange.start );\n\n\t\t\t\t\t\tconst affectedRight = movedRange.containsPosition( markerRange.end ) ||\n\t\t\t\t\t\t\tmovedRange.end.isEqual( markerRange.end );\n\n\t\t\t\t\t\tif ( ( affectedLeft || affectedRight ) && !movedRange.containsRange( markerRange ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, {\n\t\t\t\t\t\t\t\tside: affectedLeft ? 'left' : 'right',\n\t\t\t\t\t\t\t\tpath: affectedLeft ? markerRange.start.path.slice() : markerRange.end.path.slice()\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tconst wasInLeftElement = markerRange.start.isEqual( opB.targetPosition );\n\t\t\t\t\t\tconst wasStartBeforeMergedElement = markerRange.start.isEqual( opB.deletionPosition );\n\t\t\t\t\t\tconst wasEndBeforeMergedElement = markerRange.end.isEqual( opB.deletionPosition );\n\t\t\t\t\t\tconst wasInRightElement = markerRange.end.isEqual( opB.sourcePosition );\n\n\t\t\t\t\t\tif ( wasInLeftElement || wasStartBeforeMergedElement || wasEndBeforeMergedElement || wasInRightElement ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, {\n\t\t\t\t\t\t\t\twasInLeftElement,\n\t\t\t\t\t\t\t\twasStartBeforeMergedElement,\n\t\t\t\t\t\t\t\twasEndBeforeMergedElement,\n\t\t\t\t\t\t\t\twasInRightElement\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Evaluates and returns contextual information about two given operations `opA` and `opB` which are about to be transformed.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\t// @returns {module:engine/model/operation/transform~TransformationContext}\n\tgetContext( opA, opB, aIsStrong ) {\n\t\treturn {\n\t\t\taIsStrong,\n\t\t\taWasUndone: this._wasUndone( opA ),\n\t\t\tbWasUndone: this._wasUndone( opB ),\n\t\t\tabRelation: this._useRelations ? this._getRelation( opA, opB ) : null,\n\t\t\tbaRelation: this._useRelations ? this._getRelation( opB, opA ) : null,\n\t\t\tforceWeakRemove: this._forceWeakRemove\n\t\t};\n\t}\n\n\t// Returns whether given operation `op` has already been undone.\n\t//\n\t// Information whether an operation was undone gives more context when making a decision when two operations are in conflict.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} op\n\t// @returns {Boolean}\n\t_wasUndone( op ) {\n\t\t// For `op`, get its original operation. After all, if `op` is a clone (or even transformed clone) of another\n\t\t// operation, literally `op` couldn't be undone. It was just generated. If anything, it was the operation it origins\n\t\t// from which was undone. So get that original operation.\n\t\tconst originalOp = this.originalOperations.get( op );\n\n\t\t// And check with the document if the original operation was undone.\n\t\treturn originalOp.wasUndone || this._history.isUndoneOperation( originalOp );\n\t}\n\n\t// Returns a relation between `opA` and an operation which is undone by `opB`. This can be `String` value if a relation\n\t// was set earlier or `null` if there was no relation between those operations.\n\t//\n\t// This is a little tricky to understand, so let's compare it to `ContextFactory#_wasUndone`.\n\t//\n\t// When `wasUndone( opB )` is used, we check if the `opB` has already been undone. It is obvious, that the\n\t// undoing operation must happen after the undone operation. So, essentially, we have `opB`, we take document history,\n\t// we look forward in the future and ask if in that future `opB` was undone.\n\t//\n\t// Relations is a backward process to `wasUndone()`.\n\t//\n\t// Long story short - using relations is asking what happened in the past. Looking back. This time we have an undoing\n\t// operation `opB` which has undone some other operation. When there is a transformation `opA` x `opB` and there is\n\t// a conflict to solve and `opB` is an undoing operation, we can look back in the history and see what was a relation\n\t// between `opA` and the operation which `opB` undone. Basing on that relation from the past, we can now make\n\t// a better decision when resolving a conflict between two operations, because we know more about the context of\n\t// those two operations.\n\t//\n\t// This is why this function does not return a relation directly between `opA` and `opB` because we need to look\n\t// back to search for a meaningful contextual information.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\t// @returns {String|null}\n\t_getRelation( opA, opB ) {\n\t\t// Get the original operation. Similarly as in `wasUndone()` it is used as an universal identifier for stored data.\n\t\tconst origB = this.originalOperations.get( opB );\n\t\tconst undoneB = this._history.getUndoneOperation( origB );\n\n\t\t// If `opB` is not undoing any operation, there is no relation.\n\t\tif ( !undoneB ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst origA = this.originalOperations.get( opA );\n\t\tconst relationsA = this._relations.get( origA );\n\n\t\t// Get all relations for `opA`, and check if there is a relation with `opB`-undone-counterpart. If so, return it.\n\t\tif ( relationsA ) {\n\t\t\treturn relationsA.get( undoneB ) || null;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// Helper function for `ContextFactory#updateRelations`.\n\t//\n\t// @private\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\t// @param {String} relation\n\t_setRelation( opA, opB, relation ) {\n\t\t// As always, setting is for original operations, not the clones/transformed operations.\n\t\tconst origA = this.originalOperations.get( opA );\n\t\tconst origB = this.originalOperations.get( opB );\n\n\t\tlet relationsA = this._relations.get( origA );\n\n\t\tif ( !relationsA ) {\n\t\t\trelationsA = new Map();\n\t\t\tthis._relations.set( origA, relationsA );\n\t\t}\n\n\t\trelationsA.set( origB, relation );\n\t}\n}\n\n/**\n * Holds additional contextual information about a transformed pair of operations (`a` and `b`). Those information\n * can be used for better conflict resolving.\n *\n * @typedef {Object} module:engine/model/operation/transform~TransformationContext\n *\n * @property {Boolean} aIsStrong Whether `a` is strong operation in this transformation, or weak.\n * @property {Boolean} aWasUndone Whether `a` operation was undone.\n * @property {Boolean} bWasUndone Whether `b` operation was undone.\n * @property {String|null} abRelation The relation between `a` operation and an operation undone by `b` operation.\n * @property {String|null} baRelation The relation between `b` operation and an operation undone by `a` operation.\n */\n\n/**\n * An utility function that updates {@link module:engine/model/operation/operation~Operation#baseVersion base versions}\n * of passed operations.\n *\n * The function simply sets `baseVersion` as a base version of the first passed operation and then increments it for\n * each following operation in `operations`.\n *\n * @private\n * @param {Array.<module:engine/model/operation/operation~Operation>} operations Operations to update.\n * @param {Number} baseVersion Base version to set for the first operation in `operations`.\n */\nfunction updateBaseVersions( operations, baseVersion ) {\n\tfor ( const operation of operations ) {\n\t\toperation.baseVersion = baseVersion++;\n\t}\n}\n\n/**\n * Adds `howMany` instances of {@link module:engine/model/operation/nooperation~NoOperation} to `operations` set.\n *\n * @private\n * @param {Array.<module:engine/model/operation/operation~Operation>} operations\n * @param {Number} howMany\n */\nfunction padWithNoOps( operations, howMany ) {\n\tfor ( let i = 0; i < howMany; i++ ) {\n\t\toperations.push( new NoOperation( 0 ) );\n\t}\n}\n\n// -----------------------\n\nsetTransformation( AttributeOperation, AttributeOperation, ( a, b, context ) => {\n\tif ( a.key === b.key ) {\n\t\t// If operations attributes are in conflict, check if their ranges intersect and manage them properly.\n\n\t\t// First, we want to apply change to the part of a range that has not been changed by the other operation.\n\t\tconst operations = a.range.getDifference( b.range ).map( range => {\n\t\t\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, 0 );\n\t\t} );\n\n\t\t// Then we take care of the common part of ranges.\n\t\tconst common = a.range.getIntersection( b.range );\n\n\t\tif ( common ) {\n\t\t\t// If this operation is more important, we also want to apply change to the part of the\n\t\t\t// original range that has already been changed by the other operation. Since that range\n\t\t\t// got changed we also have to update `oldValue`.\n\t\t\tif ( context.aIsStrong ) {\n\t\t\t\toperations.push( new AttributeOperation( common, b.key, b.newValue, a.newValue, 0 ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( operations.length == 0 ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\n\t\treturn operations;\n\t} else {\n\t\t// If operations don't conflict, simply return an array containing just a clone of this operation.\n\t\treturn [ a ];\n\t}\n} );\n\nsetTransformation( AttributeOperation, InsertOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// The attribute operation range includes the position where nodes were inserted.\n\t// There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n\t// the inserted nodes were elements and they should not receive attributes.\n\t//\n\tif ( a.range.start.hasSameParentAs( b.position ) && a.range.containsPosition( b.position ) ) {\n\t\t// If new nodes should not receive attributes, two separated ranges will be returned.\n\t\t// Otherwise, one expanded range will be returned.\n\t\tconst range = a.range._getTransformedByInsertion( b.position, b.howMany, !b.shouldReceiveAttributes );\n\t\tconst result = range.map( r => {\n\t\t\treturn new AttributeOperation( r, a.key, a.oldValue, a.newValue, a.baseVersion );\n\t\t} );\n\n\t\tif ( b.shouldReceiveAttributes ) {\n\t\t\t// `AttributeOperation#range` includes some newly inserted text.\n\t\t\t// The operation should also change the attribute of that text. An example:\n\t\t\t//\n\t\t\t// Bold should be applied on the following range:\n\t\t\t// <p>Fo[zb]ar</p>\n\t\t\t//\n\t\t\t// In meantime, new text is typed:\n\t\t\t// <p>Fozxxbar</p>\n\t\t\t//\n\t\t\t// Bold should be applied also on the new text:\n\t\t\t// <p>Fo[zxxb]ar</p>\n\t\t\t// <p>Fo<$text bold=\"true\">zxxb</$text>ar</p>\n\t\t\t//\n\t\t\t// There is a special case to consider here to consider.\n\t\t\t//\n\t\t\t// Consider setting an attribute with multiple possible values, for example `highlight`. The inserted text might\n\t\t\t// have already an attribute value applied and the `oldValue` property of the attribute operation might be wrong:\n\t\t\t//\n\t\t\t// Attribute `highlight=\"yellow\"` should be applied on the following range:\n\t\t\t// <p>Fo[zb]ar<p>\n\t\t\t//\n\t\t\t// In meantime, character `x` with `highlight=\"red\"` is typed:\n\t\t\t// <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>\n\t\t\t//\n\t\t\t// In this case we cannot simply apply operation changing the attribute value from `null` to `\"yellow\"` for the whole range\n\t\t\t// because that would lead to an exception (`oldValue` is incorrect for `x`).\n\t\t\t//\n\t\t\t// We also cannot break the original range as this would mess up a scenario when there are multiple following\n\t\t\t// insert operations, because then only the first inserted character is included in those ranges:\n\t\t\t// <p>Fo[z][x][b]ar</p>   -->   <p>Fo[z][x]x[b]ar</p>   -->   <p>Fo[z][x]xx[b]ar</p>\n\t\t\t//\n\t\t\t// So, the attribute range needs be expanded, no matter what attributes are set on the inserted nodes:\n\t\t\t//\n\t\t\t// <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>      <--- Change from `null` to `yellow`, throwing an exception.\n\t\t\t//\n\t\t\t// But before that operation would be applied, we will add an additional attribute operation that will change\n\t\t\t// attributes on the inserted nodes in a way which would make the original operation correct:\n\t\t\t//\n\t\t\t// <p>Fo[z{<$text highlight=\"red\">}x</$text>b]ar</p>    <--- Change range `{}` from `red` to `null`.\n\t\t\t// <p>Fo[zxb]ar</p>                                     <--- Now change from `null` to `yellow` is completely fine.\n\t\t\t//\n\n\t\t\t// Generate complementary attribute operation. Be sure to add it before the original operation.\n\t\t\tconst op = _getComplementaryAttributeOperations( b, a.key, a.oldValue );\n\n\t\t\tif ( op ) {\n\t\t\t\tresult.unshift( op );\n\t\t\t}\n\t\t}\n\n\t\t// If nodes should not receive new attribute, we are done here.\n\t\treturn result;\n\t}\n\n\t// If insert operation is not expanding the attribute operation range, simply transform the range.\n\ta.range = a.range._getTransformedByInsertion( b.position, b.howMany, false )[ 0 ];\n\n\treturn [ a ];\n} );\n\n/**\n * Helper function for `AttributeOperation` x `InsertOperation` (and reverse) transformation.\n *\n * For given `insertOperation` it checks the inserted node if it has an attribute `key` set to a value different\n * than `newValue`. If so, it generates an `AttributeOperation` which changes the value of `key` attribute to `newValue`.\n *\n * @private\n * @param {module:engine/model/operation/insertoperation~InsertOperation} insertOperation\n * @param {String} key\n * @param {*} newValue\n * @returns {module:engine/model/operation/attributeoperation~AttributeOperation|null}\n */\nfunction _getComplementaryAttributeOperations( insertOperation, key, newValue ) {\n\tconst nodes = insertOperation.nodes;\n\n\t// At the beginning we store the attribute value from the first node.\n\tconst insertValue = nodes.getNode( 0 ).getAttribute( key );\n\n\tif ( insertValue == newValue ) {\n\t\treturn null;\n\t}\n\n\tconst range = new Range( insertOperation.position, insertOperation.position.getShiftedBy( insertOperation.howMany ) );\n\n\treturn new AttributeOperation( range, key, insertValue, newValue, 0 );\n}\n\nsetTransformation( AttributeOperation, MergeOperation, ( a, b ) => {\n\tconst ranges = [];\n\n\t// Case 1:\n\t//\n\t// Attribute change on the merged element. In this case, the merged element was moved to the graveyard.\n\t// An additional attribute operation that will change the (re)moved element needs to be generated.\n\t//\n\tif ( a.range.start.hasSameParentAs( b.deletionPosition ) ) {\n\t\tif ( a.range.containsPosition( b.deletionPosition ) || a.range.start.isEqual( b.deletionPosition ) ) {\n\t\t\tranges.push( Range._createFromPositionAndShift( b.graveyardPosition, 1 ) );\n\t\t}\n\t}\n\n\tconst range = a.range._getTransformedByMergeOperation( b );\n\n\t// Do not add empty (collapsed) ranges to the result. `range` may be collapsed if it contained only the merged element.\n\tif ( !range.isCollapsed ) {\n\t\tranges.push( range );\n\t}\n\n\t// Create `AttributeOperation`s out of the ranges.\n\treturn ranges.map( range => {\n\t\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion );\n\t} );\n} );\n\nsetTransformation( AttributeOperation, MoveOperation, ( a, b ) => {\n\tconst ranges = _breakRangeByMoveOperation( a.range, b );\n\n\t// Create `AttributeOperation`s out of the ranges.\n\treturn ranges.map( range => new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion ) );\n} );\n\n// Helper function for `AttributeOperation` x `MoveOperation` transformation.\n//\n// Takes the passed `range` and transforms it by move operation `moveOp` in a specific way. Only top-level nodes of `range`\n// are considered to be in the range. If move operation moves nodes deep from inside of the range, those nodes won't\n// be included in the result. In other words, top-level nodes of the ranges from the result are exactly the same as\n// top-level nodes of the original `range`.\n//\n// This is important for `AttributeOperation` because, for its range, it changes only the top-level nodes. So we need to\n// track only how those nodes have been affected by `MoveOperation`.\n//\n// @private\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/operation/moveoperation~MoveOperation} moveOp\n// @returns {Array.<module:engine/model/range~Range>}\nfunction _breakRangeByMoveOperation( range, moveOp ) {\n\tconst moveRange = Range._createFromPositionAndShift( moveOp.sourcePosition, moveOp.howMany );\n\n\t// We are transforming `range` (original range) by `moveRange` (range moved by move operation). As usual when it comes to\n\t// transforming a ranges, we may have a common part of the ranges and we may have a difference part (zero to two ranges).\n\tlet common = null;\n\tlet difference = [];\n\n\t// Let's compare the ranges.\n\tif ( moveRange.containsRange( range, true ) ) {\n\t\t// If the whole original range is moved, treat it whole as a common part. There's also no difference part.\n\t\tcommon = range;\n\t} else if ( range.start.hasSameParentAs( moveRange.start ) ) {\n\t\t// If the ranges are \"on the same level\" (in the same parent) then move operation may move exactly those nodes\n\t\t// that are changed by the attribute operation. In this case we get common part and difference part in the usual way.\n\t\tdifference = range.getDifference( moveRange );\n\t\tcommon = range.getIntersection( moveRange );\n\t} else {\n\t\t// In any other situation we assume that original range is different than move range, that is that move operation\n\t\t// moves other nodes that attribute operation change. Even if the moved range is deep inside in the original range.\n\t\t//\n\t\t// Note that this is different than in `.getIntersection` (we would get a common part in that case) and different\n\t\t// than `.getDifference` (we would get two ranges).\n\t\tdifference = [ range ];\n\t}\n\n\tconst result = [];\n\n\t// The default behaviour of `_getTransformedByMove` might get wrong results for difference part, though, so\n\t// we do it by hand.\n\tfor ( let diff of difference ) {\n\t\t// First, transform the range by removing moved nodes. Since this is a difference, this is safe, `null` won't be returned\n\t\t// as the range is different than the moved range.\n\t\tdiff = diff._getTransformedByDeletion( moveOp.sourcePosition, moveOp.howMany );\n\n\t\t// Transform also `targetPosition`.\n\t\tconst targetPosition = moveOp.getMovedRangeStart();\n\n\t\t// Spread the range only if moved nodes are inserted only between the top-level nodes of the `diff` range.\n\t\tconst spread = diff.start.hasSameParentAs( targetPosition );\n\n\t\t// Transform by insertion of moved nodes.\n\t\tdiff = diff._getTransformedByInsertion( targetPosition, moveOp.howMany, spread );\n\n\t\tresult.push( ...diff );\n\t}\n\n\t// Common part can be simply transformed by the move operation. This is because move operation will not target to\n\t// that common part (the operation would have to target inside its own moved range).\n\tif ( common ) {\n\t\tresult.push(\n\t\t\tcommon._getTransformedByMove( moveOp.sourcePosition, moveOp.targetPosition, moveOp.howMany, false )[ 0 ]\n\t\t);\n\t}\n\n\treturn result;\n}\n\nsetTransformation( AttributeOperation, SplitOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// Split node is the last node in `AttributeOperation#range`.\n\t// `AttributeOperation#range` needs to be expanded to include the new (split) node.\n\t//\n\t// Attribute `type` to be changed to `numbered` but the `listItem` is split.\n\t// <listItem type=\"bulleted\">foobar</listItem>\n\t//\n\t// After split:\n\t// <listItem type=\"bulleted\">foo</listItem><listItem type=\"bulleted\">bar</listItem>\n\t//\n\t// After attribute change:\n\t// <listItem type=\"numbered\">foo</listItem><listItem type=\"numbered\">foo</listItem>\n\t//\n\tif ( a.range.end.isEqual( b.insertionPosition ) ) {\n\t\tif ( !b.graveyardPosition ) {\n\t\t\ta.range.end.offset++;\n\t\t}\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 2:\n\t//\n\t// Split position is inside `AttributeOperation#range`, at the same level, so the nodes to change are\n\t// not going to make a flat range.\n\t//\n\t// Content with range-to-change and split position:\n\t// <p>Fo[zb^a]r</p>\n\t//\n\t// After split:\n\t// <p>Fozb</p><p>ar</p>\n\t//\n\t// Make two separate ranges containing all nodes to change:\n\t// <p>Fo[zb]</p><p>[a]r</p>\n\t//\n\tif ( a.range.start.hasSameParentAs( b.splitPosition ) && a.range.containsPosition( b.splitPosition ) ) {\n\t\tconst secondPart = a.clone();\n\n\t\tsecondPart.range = new Range(\n\t\t\tb.moveTargetPosition.clone(),\n\t\t\ta.range.end._getCombined( b.splitPosition, b.moveTargetPosition )\n\t\t);\n\n\t\ta.range.end = b.splitPosition.clone();\n\t\ta.range.end.stickiness = 'toPrevious';\n\n\t\treturn [ a, secondPart ];\n\t}\n\n\t// The default case.\n\t//\n\ta.range = a.range._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, AttributeOperation, ( a, b ) => {\n\tconst result = [ a ];\n\n\t// Case 1:\n\t//\n\t// The attribute operation range includes the position where nodes were inserted.\n\t// There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n\t// the inserted nodes were elements and they should not receive attributes.\n\t//\n\t// This is a mirror scenario to the one described in `AttributeOperation` x `InsertOperation` transformation,\n\t// although this case is a little less complicated. In this case we simply need to change attributes of the\n\t// inserted nodes and that's it.\n\t//\n\tif ( a.shouldReceiveAttributes && a.position.hasSameParentAs( b.range.start ) && b.range.containsPosition( a.position ) ) {\n\t\tconst op = _getComplementaryAttributeOperations( a, b.key, b.newValue );\n\n\t\tif ( op ) {\n\t\t\tresult.push( op );\n\t\t}\n\t}\n\n\t// The default case is: do nothing.\n\t// `AttributeOperation` does not change the model tree structure so `InsertOperation` does not need to be changed.\n\t//\n\treturn result;\n} );\n\nsetTransformation( InsertOperation, InsertOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Two insert operations insert nodes at the same position. Since they are the same, it needs to be decided\n\t// what will be the order of inserted nodes. However, there is no additional information to help in that\n\t// decision. Also, when `b` will be transformed by `a`, the same order must be maintained.\n\t//\n\t// To achieve that, we will check if the operation is strong.\n\t// If it is, it won't get transformed. If it is not, it will be moved.\n\t//\n\tif ( a.position.isEqual( b.position ) && context.aIsStrong ) {\n\t\treturn [ a ];\n\t}\n\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedByInsertOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, MoveOperation, ( a, b ) => {\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedByMoveOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, SplitOperation, ( a, b ) => {\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, MergeOperation, ( a, b ) => {\n\ta.position = a.position._getTransformedByMergeOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( MarkerOperation, InsertOperation, ( a, b ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = a.oldRange._getTransformedByInsertOperation( b )[ 0 ];\n\t}\n\n\tif ( a.newRange ) {\n\t\ta.newRange = a.newRange._getTransformedByInsertOperation( b )[ 0 ];\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, MarkerOperation, ( a, b, context ) => {\n\tif ( a.name == b.name ) {\n\t\tif ( context.aIsStrong ) {\n\t\t\ta.oldRange = b.newRange ? b.newRange.clone() : null;\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, MergeOperation, ( a, b ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = a.oldRange._getTransformedByMergeOperation( b );\n\t}\n\n\tif ( a.newRange ) {\n\t\ta.newRange = a.newRange._getTransformedByMergeOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, MoveOperation, ( a, b, context ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = Range._createFromRanges( a.oldRange._getTransformedByMoveOperation( b ) );\n\t}\n\n\tif ( a.newRange ) {\n\t\tif ( context.abRelation ) {\n\t\t\tconst aNewRange = Range._createFromRanges( a.newRange._getTransformedByMoveOperation( b ) );\n\n\t\t\tif ( context.abRelation.side == 'left' && b.targetPosition.isEqual( a.newRange.start ) ) {\n\t\t\t\ta.newRange.start.path = context.abRelation.path;\n\t\t\t\ta.newRange.end = aNewRange.end;\n\n\t\t\t\treturn [ a ];\n\t\t\t} else if ( context.abRelation.side == 'right' && b.targetPosition.isEqual( a.newRange.end ) ) {\n\t\t\t\ta.newRange.start = aNewRange.start;\n\t\t\t\ta.newRange.end.path = context.abRelation.path;\n\n\t\t\t\treturn [ a ];\n\t\t\t}\n\t\t}\n\n\t\ta.newRange = Range._createFromRanges( a.newRange._getTransformedByMoveOperation( b ) );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, SplitOperation, ( a, b, context ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = a.oldRange._getTransformedBySplitOperation( b );\n\t}\n\n\tif ( a.newRange ) {\n\t\tif ( context.abRelation ) {\n\t\t\tconst aNewRange = a.newRange._getTransformedBySplitOperation( b );\n\n\t\t\tif ( a.newRange.start.isEqual( b.splitPosition ) && context.abRelation.wasStartBeforeMergedElement ) {\n\t\t\t\ta.newRange.start = Position._createAt( b.insertionPosition );\n\t\t\t} else if ( a.newRange.start.isEqual( b.splitPosition ) && !context.abRelation.wasInLeftElement ) {\n\t\t\t\ta.newRange.start = Position._createAt( b.moveTargetPosition );\n\t\t\t}\n\n\t\t\tif ( a.newRange.end.isEqual( b.splitPosition ) && context.abRelation.wasInRightElement ) {\n\t\t\t\ta.newRange.end = Position._createAt( b.moveTargetPosition );\n\t\t\t} else if ( a.newRange.end.isEqual( b.splitPosition ) && context.abRelation.wasEndBeforeMergedElement ) {\n\t\t\t\ta.newRange.end = Position._createAt( b.insertionPosition );\n\t\t\t} else {\n\t\t\t\ta.newRange.end = aNewRange.end;\n\t\t\t}\n\n\t\t\treturn [ a ];\n\t\t}\n\n\t\ta.newRange = a.newRange._getTransformedBySplitOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( MergeOperation, InsertOperation, ( a, b ) => {\n\tif ( a.sourcePosition.hasSameParentAs( b.position ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedByInsertOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedByInsertOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( MergeOperation, MergeOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Same merge operations.\n\t//\n\t// Both operations have same source and target positions. So the element already got merged and there is\n\t// theoretically nothing to do.\n\t//\n\tif ( a.sourcePosition.isEqual( b.sourcePosition ) && a.targetPosition.isEqual( b.targetPosition ) ) {\n\t\t// There are two ways that we can provide a do-nothing operation.\n\t\t//\n\t\t// First is simply a NoOperation instance. We will use it if `b` operation was not undone.\n\t\t//\n\t\t// Second is a merge operation that has the source operation in the merged element - in the graveyard -\n\t\t// same target position and `howMany` equal to `0`. So it is basically merging an empty element from graveyard\n\t\t// which is almost the same as NoOperation.\n\t\t//\n\t\t// This way the merge operation can be later transformed by split operation\n\t\t// to provide correct undo. This will be used if `b` operation was undone (only then it is correct).\n\t\t//\n\t\tif ( !context.bWasUndone ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t} else {\n\t\t\tconst path = b.graveyardPosition.path.slice();\n\t\t\tpath.push( 0 );\n\n\t\t\ta.sourcePosition = new Position( b.graveyardPosition.root, path );\n\t\t\ta.howMany = 0;\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// Case 2:\n\t//\n\t// Same merge source position but different target position.\n\t//\n\t// This can happen during collaboration. For example, if one client merged a paragraph to the previous paragraph\n\t// and the other person removed that paragraph and merged the same paragraph to something before:\n\t//\n\t// Client A:\n\t// <p>Foo</p><p>Bar</p><p>[]Xyz</p>\n\t// <p>Foo</p><p>BarXyz</p>\n\t//\n\t// Client B:\n\t// <p>Foo</p>[<p>Bar</p>]<p>Xyz</p>\n\t// <p>Foo</p><p>[]Xyz</p>\n\t// <p>FooXyz</p>\n\t//\n\t// In this case we need to decide where finally \"Xyz\" will land:\n\t//\n\t// <p>FooXyz</p>               graveyard: <p>Bar</p>\n\t// <p>Foo</p>                  graveyard: <p>BarXyz</p>\n\t//\n\t// Let's move it in a way so that a merge operation that does not target to graveyard is more important so that\n\t// nodes does not end up in the graveyard. It makes sense. Both for Client A and for Client B \"Xyz\" finally did not\n\t// end up in the graveyard (see above).\n\t//\n\t// If neither or both operations point to graveyard, then let `aIsStrong` decide.\n\t//\n\tif (\n\t\ta.sourcePosition.isEqual( b.sourcePosition ) && !a.targetPosition.isEqual( b.targetPosition ) &&\n\t\t!context.bWasUndone && context.abRelation != 'splitAtSource'\n\t) {\n\t\tconst aToGraveyard = a.targetPosition.root.rootName == '$graveyard';\n\t\tconst bToGraveyard = b.targetPosition.root.rootName == '$graveyard';\n\n\t\t// If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n\t\tconst aIsWeak = aToGraveyard && !bToGraveyard;\n\n\t\t// If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n\t\tconst bIsWeak = bToGraveyard && !aToGraveyard;\n\n\t\t// Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n\t\tconst forceMove = bIsWeak || ( !aIsWeak && context.aIsStrong );\n\n\t\tif ( forceMove ) {\n\t\t\tconst sourcePosition = b.targetPosition._getTransformedByMergeOperation( b );\n\t\t\tconst targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\t\t\treturn [ new MoveOperation( sourcePosition, a.howMany, targetPosition, 0 ) ];\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.sourcePosition.hasSameParentAs( b.targetPosition ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedByMergeOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\t// Handle positions in graveyard.\n\t// If graveyard positions are same and `a` operation is strong - do not transform.\n\tif ( !a.graveyardPosition.isEqual( b.graveyardPosition ) || !context.aIsStrong ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MergeOperation, MoveOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// The element to merge got removed.\n\t//\n\t// Merge operation does support merging elements which are not siblings. So it would not be a problem\n\t// from technical point of view. However, if the element was removed, the intention of the user deleting it\n\t// was to have it all deleted, together with its children. From user experience point of view, moving back the\n\t// removed nodes might be unexpected. This means that in this scenario we will block the merging.\n\t//\n\t// The exception of this rule would be if the remove operation was later undone.\n\t//\n\tconst removedRange = Range._createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\tif ( b.type == 'remove' && !context.bWasUndone && !context.forceWeakRemove ) {\n\t\tif ( a.deletionPosition.hasSameParentAs( b.sourcePosition ) && removedRange.containsPosition( a.sourcePosition ) ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.sourcePosition.hasSameParentAs( b.targetPosition ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\tif ( a.sourcePosition.hasSameParentAs( b.sourcePosition ) ) {\n\t\ta.howMany -= b.howMany;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedByMoveOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedByMoveOperation( b );\n\n\t// `MergeOperation` graveyard position is like `MoveOperation` target position. It is a position where element(s) will\n\t// be moved. Like in other similar cases, we need to consider the scenario when those positions are same.\n\t// Here, we will treat `MergeOperation` like it is always strong (see `InsertOperation` x `InsertOperation` for comparison).\n\t// This means that we won't transform graveyard position if it is equal to move operation target position.\n\tif ( !a.graveyardPosition.isEqual( b.targetPosition ) ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MergeOperation, SplitOperation, ( a, b, context ) => {\n\tif ( b.graveyardPosition ) {\n\t\t// If `b` operation defines graveyard position, a node from graveyard will be moved. This means that we need to\n\t\t// transform `a.graveyardPosition` accordingly.\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByDeletion( b.graveyardPosition, 1 );\n\n\t\t// This is a scenario foreseen in `MergeOperation` x `MergeOperation`, with two identical merge operations.\n\t\t//\n\t\t// So, there was `MergeOperation` x `MergeOperation` transformation earlier. Now, `a` is a merge operation which\n\t\t// source position is in graveyard. Interestingly, split operation wants to use the node to be merged by `a`. This\n\t\t// means that `b` is undoing that merge operation from earlier, which caused `a` to be in graveyard.\n\t\t//\n\t\t// If that's the case, at this point, we will only \"fix\" `a.howMany`. It was earlier set to `0` in\n\t\t// `MergeOperation` x `MergeOperation` transformation. Later transformations in this function will change other\n\t\t// properties.\n\t\t//\n\t\tif ( a.deletionPosition.isEqual( b.graveyardPosition ) ) {\n\t\t\ta.howMany = b.howMany;\n\t\t}\n\t}\n\n\t// Case 1:\n\t//\n\t// Merge operation moves nodes to the place where split happens.\n\t// This is a classic situation when there are two paragraphs, and there is a split (enter) after the first\n\t// paragraph and there is a merge (delete) at the beginning of the second paragraph:\n\t//\n\t// <p>Foo{}</p><p>[]Bar</p>.\n\t//\n\t// Split is after `Foo`, while merge is from `Bar` to the end of `Foo`.\n\t//\n\t// State after split:\n\t// <p>Foo</p><p></p><p>Bar</p>\n\t//\n\t// Now, `Bar` should be merged to the new paragraph:\n\t// <p>Foo</p><p>Bar</p>\n\t//\n\t// Instead of merging it to the original paragraph:\n\t// <p>FooBar</p><p></p>\n\t//\n\t// This means that `targetPosition` needs to be transformed. This is the default case though.\n\t// For example, if the split would be after `F`, `targetPosition` should also be transformed.\n\t//\n\t// There are three exceptions, though, when we want to keep `targetPosition` as it was.\n\t//\n\t// First exception is when the merge target position is inside an element (not at the end, as usual). This\n\t// happens when the merge operation earlier was transformed by \"the same\" merge operation. If merge operation\n\t// targets inside the element we want to keep the original target position (and not transform it) because\n\t// we have additional context telling us that we want to merge to the original element. We can check if the\n\t// merge operation points inside element by checking what is `SplitOperation#howMany`. Since merge target position\n\t// is same as split position, if `howMany` is non-zero, it means that the merge target position is inside an element.\n\t//\n\t// Second exception is when the element to merge is in the graveyard and split operation uses it. In that case\n\t// if target position would be transformed, the merge operation would target at the source position:\n\t//\n\t// root: <p>Foo</p>\t\t\t\tgraveyard: <p></p>\n\t//\n\t// SplitOperation: root [ 0, 3 ] using graveyard [ 0 ] (howMany = 0)\n\t// MergeOperation: graveyard [ 0, 0 ] -> root [ 0, 3 ] (howMany = 0)\n\t//\n\t// Since split operation moves the graveyard node back to the root, the merge operation source position changes.\n\t// We would like to merge from the empty <p> to the \"Foo\" <p>:\n\t//\n\t// root: <p>Foo</p><p></p>\t\t\tgraveyard:\n\t//\n\t// MergeOperation#sourcePosition = root [ 1, 0 ]\n\t//\n\t// If `targetPosition` is transformed, it would become root [ 1, 0 ] as well. It has to be kept as it was.\n\t//\n\t// Third exception is connected with relations. If this happens during undo and we have explicit information\n\t// that target position has not been affected by the operation which is undone by this split then this split should\n\t// not move the target position either.\n\t//\n\tif ( a.targetPosition.isEqual( b.splitPosition ) ) {\n\t\tconst mergeInside = b.howMany != 0;\n\t\tconst mergeSplittingElement = b.graveyardPosition && a.deletionPosition.isEqual( b.graveyardPosition );\n\n\t\tif ( mergeInside || mergeSplittingElement || context.abRelation == 'mergeTargetNotMoved' ) {\n\t\t\ta.sourcePosition = a.sourcePosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// Case 2:\n\t//\n\t// Merge source is at the same position as split position. This sometimes happen, mostly during undo.\n\t// The decision here is mostly to choose whether merge source position should stay where it is (so it will be at the end of the\n\t// split element) or should be move to the beginning of the new element.\n\t//\n\tif ( a.sourcePosition.isEqual( b.splitPosition ) ) {\n\t\t// Use context to check if `SplitOperation` is not undoing a merge operation, that didn't change the `a` operation.\n\t\t// This scenario happens the undone merge operation moved nodes at the source position of `a` operation.\n\t\t// In that case `a` operation source position should stay where it is.\n\t\tif ( context.abRelation == 'mergeSourceNotMoved' ) {\n\t\t\ta.howMany = 0;\n\t\t\ta.targetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\n\t\t// This merge operation might have been earlier transformed by a merge operation which both merged the same element.\n\t\t// See that case in `MergeOperation` x `MergeOperation` transformation. In that scenario, if the merge operation has been undone,\n\t\t// the special case is not applied.\n\t\t//\n\t\t// Now, the merge operation is transformed by the split which has undone that previous merge operation.\n\t\t// So now we are fixing situation which was skipped in `MergeOperation` x `MergeOperation` case.\n\t\t//\n\t\tif ( context.abRelation == 'mergeSameElement' || a.sourcePosition.offset > 0 ) {\n\t\t\ta.sourcePosition = b.moveTargetPosition.clone();\n\t\t\ta.targetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.sourcePosition.hasSameParentAs( b.splitPosition ) ) {\n\t\ta.howMany = b.splitPosition.offset;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedBySplitOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( MoveOperation, InsertOperation, ( a, b ) => {\n\tconst moveRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\tconst transformed = moveRange._getTransformedByInsertOperation( b, false )[ 0 ];\n\n\ta.sourcePosition = transformed.start;\n\ta.howMany = transformed.end.offset - transformed.start.offset;\n\n\t// See `InsertOperation` x `MoveOperation` transformation for details on this case.\n\t//\n\t// In summary, both operations point to the same place, so the order of nodes needs to be decided.\n\t// `MoveOperation` is considered weaker, so it is always transformed, unless there was a certain relation\n\t// between operations.\n\t//\n\tif ( !a.targetPosition.isEqual( b.position ) ) {\n\t\ta.targetPosition = a.targetPosition._getTransformedByInsertOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MoveOperation, MoveOperation, ( a, b, context ) => {\n\t//\n\t// Setting and evaluating some variables that will be used in special cases and default algorithm.\n\t//\n\t// Create ranges from `MoveOperations` properties.\n\tconst rangeA = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\tconst rangeB = Range._createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\t// Assign `context.aIsStrong` to a different variable, because the value may change during execution of\n\t// this algorithm and we do not want to override original `context.aIsStrong` that will be used in later transformations.\n\tlet aIsStrong = context.aIsStrong;\n\n\t// This will be used to decide the order of nodes if both operations target at the same position.\n\t// By default, use strong/weak operation mechanism.\n\tlet insertBefore = !context.aIsStrong;\n\n\t// If the relation is set, then use it to decide nodes order.\n\tif ( context.abRelation == 'insertBefore' || context.baRelation == 'insertAfter' ) {\n\t\tinsertBefore = true;\n\t} else if ( context.abRelation == 'insertAfter' || context.baRelation == 'insertBefore' ) {\n\t\tinsertBefore = false;\n\t}\n\n\t// `a.targetPosition` could be affected by the `b` operation. We will transform it.\n\tlet newTargetPosition;\n\n\tif ( a.targetPosition.isEqual( b.targetPosition ) && insertBefore ) {\n\t\tnewTargetPosition = a.targetPosition._getTransformedByDeletion(\n\t\t\tb.sourcePosition,\n\t\t\tb.howMany\n\t\t);\n\t} else {\n\t\tnewTargetPosition = a.targetPosition._getTransformedByMove(\n\t\t\tb.sourcePosition,\n\t\t\tb.targetPosition,\n\t\t\tb.howMany\n\t\t);\n\t}\n\n\t//\n\t// Special case #1 + mirror.\n\t//\n\t// Special case when both move operations' target positions are inside nodes that are\n\t// being moved by the other move operation. So in other words, we move ranges into inside of each other.\n\t// This case can't be solved reasonably (on the other hand, it should not happen often).\n\tif ( _moveTargetIntoMovedRange( a, b ) && _moveTargetIntoMovedRange( b, a ) ) {\n\t\t// Instead of transforming operation, we return a reverse of the operation that we transform by.\n\t\t// So when the results of this \"transformation\" will be applied, `b` MoveOperation will get reversed.\n\t\treturn [ b.getReversed() ];\n\t}\n\t//\n\t// End of special case #1.\n\t//\n\n\t//\n\t// Special case #2.\n\t//\n\t// Check if `b` operation targets inside `rangeA`.\n\tconst bTargetsToA = rangeA.containsPosition( b.targetPosition );\n\n\t// If `b` targets to `rangeA` and `rangeA` contains `rangeB`, `b` operation has no influence on `a` operation.\n\t// You might say that operation `b` is captured inside operation `a`.\n\tif ( bTargetsToA && rangeA.containsRange( rangeB, true ) ) {\n\t\t// There is a mini-special case here, where `rangeB` is on other level than `rangeA`. That's why\n\t\t// we need to transform `a` operation anyway.\n\t\trangeA.start = rangeA.start._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\t\trangeA.end = rangeA.end._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\n\t\treturn _makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition );\n\t}\n\n\t//\n\t// Special case #2 mirror.\n\t//\n\tconst aTargetsToB = rangeB.containsPosition( a.targetPosition );\n\n\tif ( aTargetsToB && rangeB.containsRange( rangeA, true ) ) {\n\t\t// `a` operation is \"moved together\" with `b` operation.\n\t\t// Here, just move `rangeA` \"inside\" `rangeB`.\n\t\trangeA.start = rangeA.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\t\trangeA.end = rangeA.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\n\t\treturn _makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition );\n\t}\n\t//\n\t// End of special case #2.\n\t//\n\n\t//\n\t// Special case #3 + mirror.\n\t//\n\t// `rangeA` has a node which is an ancestor of `rangeB`. In other words, `rangeB` is inside `rangeA`\n\t// but not on the same tree level. In such case ranges have common part but we have to treat it\n\t// differently, because in such case those ranges are not really conflicting and should be treated like\n\t// two separate ranges. Also we have to discard two difference parts.\n\tconst aCompB = compareArrays( a.sourcePosition.getParentPath(), b.sourcePosition.getParentPath() );\n\n\tif ( aCompB == 'prefix' || aCompB == 'extension' ) {\n\t\t// Transform `rangeA` by `b` operation and make operation out of it, and that's all.\n\t\t// Note that this is a simplified version of default case, but here we treat the common part (whole `rangeA`)\n\t\t// like a one difference part.\n\t\trangeA.start = rangeA.start._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\t\trangeA.end = rangeA.end._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\n\t\treturn _makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition );\n\t}\n\t//\n\t// End of special case #3.\n\t//\n\n\t//\n\t// Default case - ranges are on the same level or are not connected with each other.\n\t//\n\t// Modifier for default case.\n\t// Modifies `aIsStrong` flag in certain conditions.\n\t//\n\t// If only one of operations is a remove operation, we force remove operation to be the \"stronger\" one\n\t// to provide more expected results.\n\tif ( a.type == 'remove' && b.type != 'remove' && !context.aWasUndone && !context.forceWeakRemove ) {\n\t\taIsStrong = true;\n\t} else if ( a.type != 'remove' && b.type == 'remove' && !context.bWasUndone && !context.forceWeakRemove ) {\n\t\taIsStrong = false;\n\t}\n\n\t// Handle operation's source ranges - check how `rangeA` is affected by `b` operation.\n\t// This will aggregate transformed ranges.\n\tconst ranges = [];\n\n\t// Get the \"difference part\" of `a` operation source range.\n\t// This is an array with one or two ranges. Two ranges if `rangeB` is inside `rangeA`.\n\tconst difference = rangeA.getDifference( rangeB );\n\n\tfor ( const range of difference ) {\n\t\t// Transform those ranges by `b` operation. For example if `b` moved range from before those ranges, fix those ranges.\n\t\trange.start = range.start._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\t\trange.end = range.end._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\n\t\t// If `b` operation targets into `rangeA` on the same level, spread `rangeA` into two ranges.\n\t\tconst shouldSpread = compareArrays( range.start.getParentPath(), b.getMovedRangeStart().getParentPath() ) == 'same';\n\t\tconst newRanges = range._getTransformedByInsertion( b.getMovedRangeStart(), b.howMany, shouldSpread );\n\n\t\tranges.push( ...newRanges );\n\t}\n\n\t// Then, we have to manage the \"common part\" of both move ranges.\n\tconst common = rangeA.getIntersection( rangeB );\n\n\tif ( common !== null && aIsStrong ) {\n\t\t// Calculate the new position of that part of original range.\n\t\tcommon.start = common.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\t\tcommon.end = common.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\n\t\t// Take care of proper range order.\n\t\t//\n\t\t// Put `common` at appropriate place. Keep in mind that we are interested in original order.\n\t\t// Basically there are only three cases: there is zero, one or two difference ranges.\n\t\t//\n\t\t// If there is zero difference ranges, just push `common` in the array.\n\t\tif ( ranges.length === 0 ) {\n\t\t\tranges.push( common );\n\t\t}\n\t\t// If there is one difference range, we need to check whether common part was before it or after it.\n\t\telse if ( ranges.length == 1 ) {\n\t\t\tif ( rangeB.start.isBefore( rangeA.start ) || rangeB.start.isEqual( rangeA.start ) ) {\n\t\t\t\tranges.unshift( common );\n\t\t\t} else {\n\t\t\t\tranges.push( common );\n\t\t\t}\n\t\t}\n\t\t// If there are more ranges (which means two), put common part between them. This is the only scenario\n\t\t// where there could be two difference ranges so we don't have to make any comparisons.\n\t\telse {\n\t\t\tranges.splice( 1, 0, common );\n\t\t}\n\t}\n\n\tif ( ranges.length === 0 ) {\n\t\t// If there are no \"source ranges\", nothing should be changed.\n\t\t// Note that this can happen only if `aIsStrong == false` and `rangeA.isEqual( rangeB )`.\n\t\treturn [ new NoOperation( a.baseVersion ) ];\n\t}\n\n\treturn _makeMoveOperationsFromRanges( ranges, newTargetPosition );\n} );\n\nsetTransformation( MoveOperation, SplitOperation, ( a, b, context ) => {\n\tlet newTargetPosition = a.targetPosition.clone();\n\n\t// Do not transform if target position is same as split insertion position and this split comes from undo.\n\t// This should be done on relations but it is too much work for now as it would require relations working in collaboration.\n\t// We need to make a decision how we will resolve such conflict and this is less harmful way.\n\tif ( !a.targetPosition.isEqual( b.insertionPosition ) || !b.graveyardPosition || context.abRelation == 'moveTargetAfter' ) {\n\t\tnewTargetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\t}\n\n\t// Case 1:\n\t//\n\t// Last element in the moved range got split.\n\t//\n\t// In this case the default range transformation will not work correctly as the element created by\n\t// split operation would be outside the range. The range to move needs to be fixed manually.\n\t//\n\tconst moveRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\n\tif ( moveRange.end.isEqual( b.insertionPosition ) ) {\n\t\t// Do it only if this is a \"natural\" split, not a one that comes from undo.\n\t\t// If this is undo split, only `targetPosition` needs to be changed (if the move is a remove).\n\t\tif ( !b.graveyardPosition ) {\n\t\t\ta.howMany++;\n\t\t}\n\n\t\ta.targetPosition = newTargetPosition;\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 2:\n\t//\n\t// Split happened between the moved nodes. In this case two ranges to move need to be generated.\n\t//\n\t// Characters `ozba` are moved to the end of paragraph `Xyz` but split happened.\n\t// <p>F[oz|ba]r</p><p>Xyz</p>\n\t//\n\t// After split:\n\t// <p>F[oz</p><p>ba]r</p><p>Xyz</p>\n\t//\n\t// Correct ranges:\n\t// <p>F[oz]</p><p>[ba]r</p><p>Xyz</p>\n\t//\n\t// After move:\n\t// <p>F</p><p>r</p><p>Xyzozba</p>\n\t//\n\tif ( moveRange.start.hasSameParentAs( b.splitPosition ) && moveRange.containsPosition( b.splitPosition ) ) {\n\t\tlet rightRange = new Range( b.splitPosition, moveRange.end );\n\t\trightRange = rightRange._getTransformedBySplitOperation( b );\n\n\t\tconst ranges = [\n\t\t\tnew Range( moveRange.start, b.splitPosition ),\n\t\t\trightRange\n\t\t];\n\n\t\treturn _makeMoveOperationsFromRanges( ranges, newTargetPosition );\n\t}\n\n\t// Case 3:\n\t//\n\t// Move operation targets at the split position. We need to decide if the nodes should be inserted\n\t// at the end of the split element or at the beginning of the new element.\n\t//\n\tif ( a.targetPosition.isEqual( b.splitPosition ) && context.abRelation == 'insertAtSource' ) {\n\t\tnewTargetPosition = b.moveTargetPosition;\n\t}\n\n\t// Case 4:\n\t//\n\t// Move operation targets just after the split element. We need to decide if the nodes should be inserted\n\t// between two parts of split element, or after the new element.\n\t//\n\t// Split at `|`, while move operation moves `<p>Xyz</p>` and targets at `^`:\n\t// <p>Foo|bar</p>^<p>baz</p>\n\t// <p>Foo</p>^<p>bar</p><p>baz</p> or <p>Foo</p><p>bar</p>^<p>baz</p>?\n\t//\n\t// If there is no contextual information between operations (for example, they come from collaborative\n\t// editing), we don't want to put some unrelated content (move) between parts of related content (split parts).\n\t// However, if the split is from undo, in the past, the moved content might be targeting between the\n\t// split parts, meaning that was exactly user's intention:\n\t//\n\t// <p>Foo</p>^<p>bar</p>\t\t<--- original situation, in \"past\".\n\t// <p>Foobar</p>^\t\t\t\t<--- after merge target position is transformed.\n\t// <p>Foo|bar</p>^\t\t\t\t<--- then the merge is undone, and split happens, which leads us to current situation.\n\t//\n\t// In this case it is pretty clear that the intention was to put new paragraph between those nodes,\n\t// so we need to transform accordingly. We can detect this scenario thanks to relations.\n\t//\n\tif ( a.targetPosition.isEqual( b.insertionPosition ) && context.abRelation == 'insertBetween' ) {\n\t\tnewTargetPosition = a.targetPosition;\n\t}\n\n\t// The default case.\n\t//\n\tconst transformed = moveRange._getTransformedBySplitOperation( b );\n\tconst ranges = [ transformed ];\n\n\t// Case 5:\n\t//\n\t// Moved range contains graveyard element used by split operation. Add extra move operation to the result.\n\t//\n\tif ( b.graveyardPosition ) {\n\t\tconst movesGraveyardElement = moveRange.start.isEqual( b.graveyardPosition ) || moveRange.containsPosition( b.graveyardPosition );\n\n\t\tif ( a.howMany > 1 && movesGraveyardElement && !context.aWasUndone ) {\n\t\t\tranges.push( Range._createFromPositionAndShift( b.insertionPosition, 1 ) );\n\t\t}\n\t}\n\n\treturn _makeMoveOperationsFromRanges( ranges, newTargetPosition );\n} );\n\nsetTransformation( MoveOperation, MergeOperation, ( a, b, context ) => {\n\tconst movedRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\n\tif ( b.deletionPosition.hasSameParentAs( a.sourcePosition ) && movedRange.containsPosition( b.sourcePosition ) ) {\n\t\tif ( a.type == 'remove' && !context.forceWeakRemove ) {\n\t\t\t// Case 1:\n\t\t\t//\n\t\t\t// The element to remove got merged.\n\t\t\t//\n\t\t\t// Merge operation does support merging elements which are not siblings. So it would not be a problem\n\t\t\t// from technical point of view. However, if the element was removed, the intention of the user\n\t\t\t// deleting it was to have it all deleted. From user experience point of view, moving back the\n\t\t\t// removed nodes might be unexpected. This means that in this scenario we will reverse merging and remove the element.\n\t\t\t//\n\t\t\tif ( !context.aWasUndone ) {\n\t\t\t\tconst results = [];\n\n\t\t\t\tlet gyMoveSource = b.graveyardPosition.clone();\n\t\t\t\tlet splitNodesMoveSource = b.targetPosition._getTransformedByMergeOperation( b );\n\n\t\t\t\tif ( a.howMany > 1 ) {\n\t\t\t\t\tresults.push( new MoveOperation( a.sourcePosition, a.howMany - 1, a.targetPosition, 0 ) );\n\n\t\t\t\t\tgyMoveSource = gyMoveSource._getTransformedByMove( a.sourcePosition, a.targetPosition, a.howMany - 1 );\n\t\t\t\t\tsplitNodesMoveSource = splitNodesMoveSource._getTransformedByMove( a.sourcePosition, a.targetPosition, a.howMany - 1 );\n\t\t\t\t}\n\n\t\t\t\tconst gyMoveTarget = b.deletionPosition._getCombined( a.sourcePosition, a.targetPosition );\n\t\t\t\tconst gyMove = new MoveOperation( gyMoveSource, 1, gyMoveTarget, 0 );\n\n\t\t\t\tconst splitNodesMoveTargetPath = gyMove.getMovedRangeStart().path.slice();\n\t\t\t\tsplitNodesMoveTargetPath.push( 0 );\n\n\t\t\t\tconst splitNodesMoveTarget = new Position( gyMove.targetPosition.root, splitNodesMoveTargetPath );\n\t\t\t\tsplitNodesMoveSource = splitNodesMoveSource._getTransformedByMove( gyMoveSource, gyMoveTarget, 1 );\n\t\t\t\tconst splitNodesMove = new MoveOperation( splitNodesMoveSource, b.howMany, splitNodesMoveTarget, 0 );\n\n\t\t\t\tresults.push( gyMove );\n\t\t\t\tresults.push( splitNodesMove );\n\n\t\t\t\treturn results;\n\t\t\t}\n\t\t} else {\n\t\t\t// Case 2:\n\t\t\t//\n\t\t\t// The element to move got merged and it was the only element to move.\n\t\t\t// In this case just don't do anything, leave the node in the graveyard. Without special case\n\t\t\t// it would be a move operation that moves 0 nodes, so maybe it is better just to return no-op.\n\t\t\t//\n\t\t\tif ( a.howMany == 1 ) {\n\t\t\t\tif ( !context.bWasUndone ) {\n\t\t\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t\t\t} else {\n\t\t\t\t\ta.sourcePosition = b.graveyardPosition.clone();\n\t\t\t\t\ta.targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\t\t\t\t\treturn [ a ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tconst moveRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\tconst transformed = moveRange._getTransformedByMergeOperation( b );\n\n\ta.sourcePosition = transformed.start;\n\ta.howMany = transformed.end.offset - transformed.start.offset;\n\ta.targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( RenameOperation, InsertOperation, ( a, b ) => {\n\ta.position = a.position._getTransformedByInsertOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, MergeOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// Element to rename got merged, so it was moved to `b.graveyardPosition`.\n\t//\n\tif ( a.position.isEqual( b.deletionPosition ) ) {\n\t\ta.position = b.graveyardPosition.clone();\n\t\ta.position.stickiness = 'toNext';\n\n\t\treturn [ a ];\n\t}\n\n\ta.position = a.position._getTransformedByMergeOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, MoveOperation, ( a, b ) => {\n\ta.position = a.position._getTransformedByMoveOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, RenameOperation, ( a, b, context ) => {\n\tif ( a.position.isEqual( b.position ) ) {\n\t\tif ( context.aIsStrong ) {\n\t\t\ta.oldName = b.newName;\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, SplitOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// The element to rename has been split. In this case, the new element should be also renamed.\n\t//\n\t// User decides to change the paragraph to a list item:\n\t// <paragraph>Foobar</paragraph>\n\t//\n\t// However, in meantime, split happens:\n\t// <paragraph>Foo</paragraph><paragraph>bar</paragraph>\n\t//\n\t// As a result, rename both elements:\n\t// <listItem>Foo</listItem><listItem>bar</listItem>\n\t//\n\tconst renamePath = a.position.path;\n\tconst splitPath = b.splitPosition.getParentPath();\n\n\tif ( compareArrays( renamePath, splitPath ) == 'same' && !b.graveyardPosition ) {\n\t\tconst extraRename = new RenameOperation( a.position.getShiftedBy( 1 ), a.oldName, a.newName, 0 );\n\n\t\treturn [ a, extraRename ];\n\t}\n\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( RootAttributeOperation, RootAttributeOperation, ( a, b, context ) => {\n\tif ( a.root === b.root && a.key === b.key ) {\n\t\tif ( !context.aIsStrong || a.newValue === b.newValue ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t} else {\n\t\t\ta.oldValue = b.newValue;\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( SplitOperation, InsertOperation, ( a, b ) => {\n\t// The default case.\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.position ) && a.splitPosition.offset < b.position.offset ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.splitPosition = a.splitPosition._getTransformedByInsertOperation( b );\n\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\treturn [ a ];\n} );\n\nsetTransformation( SplitOperation, MergeOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Split element got merged. If two different elements were merged, clients will have different content.\n\t//\n\t// Example. Merge at `{}`, split at `[]`:\n\t// <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n\t//\n\t// On merge side it will look like this:\n\t// <heading>FooB[]ar</heading>\n\t// <heading>FooB</heading><heading>ar</heading>\n\t//\n\t// On split side it will look like this:\n\t// <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n\t// <heading>FooB</heading><paragraph>ar</paragraph>\n\t//\n\t// Clearly, the second element is different for both clients.\n\t//\n\t// We could use the removed merge element from graveyard as a split element but then clients would have a different\n\t// model state (in graveyard), because the split side client would still have an element in graveyard (removed by merge).\n\t//\n\t// To overcome this, in `SplitOperation` x `MergeOperation` transformation we will add additional `SplitOperation`\n\t// in the graveyard, which will actually clone the merged-and-deleted element. Then, that cloned element will be\n\t// used for splitting. Example below.\n\t//\n\t// Original state:\n\t// <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n\t//\n\t// Merge side client:\n\t//\n\t// After merge:\n\t// <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph>\n\t//\n\t// Extra split:\n\t// <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph><paragraph></paragraph>\n\t//\n\t// Use the \"cloned\" element from graveyard:\n\t// <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n\t//\n\t// Split side client:\n\t//\n\t// After split:\n\t// <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n\t//\n\t// After merge:\n\t// <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n\t//\n\t// This special case scenario only applies if the original split operation clones the split element.\n\t// If the original split operation has `graveyardPosition` set, it all doesn't have sense because split operation\n\t// knows exactly which element it should use. So there would be no original problem with different contents.\n\t//\n\t// Additionally, the special case applies only if the merge wasn't already undone.\n\t//\n\tif ( !a.graveyardPosition && !context.bWasUndone && a.splitPosition.hasSameParentAs( b.sourcePosition ) ) {\n\t\tconst splitPath = b.graveyardPosition.path.slice();\n\t\tsplitPath.push( 0 );\n\n\t\tconst splitPosition = new Position( b.graveyardPosition.root, splitPath );\n\t\tconst insertionPosition = SplitOperation.getInsertionPosition( new Position( b.graveyardPosition.root, splitPath ) );\n\n\t\tconst additionalSplit = new SplitOperation( splitPosition, 0, null, 0 );\n\t\tadditionalSplit.insertionPosition = insertionPosition;\n\n\t\ta.splitPosition = a.splitPosition._getTransformedByMergeOperation( b );\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\t\ta.graveyardPosition = additionalSplit.insertionPosition.clone();\n\t\ta.graveyardPosition.stickiness = 'toNext';\n\n\t\treturn [ additionalSplit, a ];\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.deletionPosition ) && !a.splitPosition.isAfter( b.deletionPosition ) ) {\n\t\ta.howMany--;\n\t}\n\n\tif ( a.splitPosition.hasSameParentAs( b.targetPosition ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.splitPosition = a.splitPosition._getTransformedByMergeOperation( b );\n\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\tif ( a.graveyardPosition ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( SplitOperation, MoveOperation, ( a, b, context ) => {\n\tconst rangeToMove = Range._createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\tif ( a.graveyardPosition ) {\n\t\t// Case 1:\n\t\t//\n\t\t// Split operation graveyard node was moved. In this case move operation is stronger. Since graveyard element\n\t\t// is already moved to the correct position, we need to only move the nodes after the split position.\n\t\t// This will be done by `MoveOperation` instead of `SplitOperation`.\n\t\t//\n\t\tconst gyElementMoved = rangeToMove.start.isEqual( a.graveyardPosition ) || rangeToMove.containsPosition( a.graveyardPosition );\n\n\t\tif ( !context.bWasUndone && gyElementMoved ) {\n\t\t\tconst sourcePosition = a.splitPosition._getTransformedByMoveOperation( b );\n\n\t\t\tconst newParentPosition = a.graveyardPosition._getTransformedByMoveOperation( b );\n\t\t\tconst newTargetPath = newParentPosition.path.slice();\n\t\t\tnewTargetPath.push( 0 );\n\n\t\t\tconst newTargetPosition = new Position( newParentPosition.root, newTargetPath );\n\t\t\tconst moveOp = new MoveOperation( sourcePosition, a.howMany, newTargetPosition, 0 );\n\n\t\t\treturn [ moveOp ];\n\t\t}\n\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation( b );\n\t}\n\n\t// Case 2:\n\t//\n\t// If the split position is inside the moved range, we need to shift the split position to a proper place.\n\t// The position cannot be moved together with moved range because that would result in splitting of an incorrect element.\n\t//\n\t// Characters `bc` should be moved to the second paragraph while split position is between them:\n\t// <paragraph>A[b|c]d</paragraph><paragraph>Xyz</paragraph>\n\t//\n\t// After move, new split position is incorrect:\n\t// <paragraph>Ad</paragraph><paragraph>Xb|cyz</paragraph>\n\t//\n\t// Correct split position:\n\t// <paragraph>A|d</paragraph><paragraph>Xbcyz</paragraph>\n\t//\n\t// After split:\n\t// <paragraph>A</paragraph><paragraph>d</paragraph><paragraph>Xbcyz</paragraph>\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.sourcePosition ) && rangeToMove.containsPosition( a.splitPosition ) ) {\n\t\tconst howManyRemoved = b.howMany - ( a.splitPosition.offset - b.sourcePosition.offset );\n\t\ta.howMany -= howManyRemoved;\n\n\t\tif ( a.splitPosition.hasSameParentAs( b.targetPosition ) && a.splitPosition.offset < b.targetPosition.offset ) {\n\t\t\ta.howMany += b.howMany;\n\t\t}\n\n\t\ta.splitPosition = b.sourcePosition.clone();\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 3:\n\t//\n\t// Split is at a position where nodes were moved.\n\t//\n\t// This is a scenario described in `MoveOperation` x `SplitOperation` transformation but from the\n\t// \"split operation point of view\".\n\t//\n\tconst splitAtTarget = a.splitPosition.isEqual( b.targetPosition );\n\n\tif ( splitAtTarget && ( context.baRelation == 'insertAtSource' || context.abRelation == 'splitBefore' ) ) {\n\t\ta.howMany += b.howMany;\n\t\ta.splitPosition = a.splitPosition._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\t\treturn [ a ];\n\t}\n\n\t// The default case.\n\t// Don't change `howMany` if move operation does not really move anything.\n\t//\n\tif ( !b.sourcePosition.isEqual( b.targetPosition ) ) {\n\t\tif ( a.splitPosition.hasSameParentAs( b.sourcePosition ) && a.splitPosition.offset <= b.sourcePosition.offset ) {\n\t\t\ta.howMany -= b.howMany;\n\t\t}\n\n\t\tif ( a.splitPosition.hasSameParentAs( b.targetPosition ) && a.splitPosition.offset < b.targetPosition.offset ) {\n\t\t\ta.howMany += b.howMany;\n\t\t}\n\t}\n\n\t// Change position stickiness to force a correct transformation.\n\ta.splitPosition.stickiness = 'toNone';\n\ta.splitPosition = a.splitPosition._getTransformedByMoveOperation( b );\n\ta.splitPosition.stickiness = 'toNext';\n\n\tif ( a.graveyardPosition ) {\n\t\ta.insertionPosition = a.insertionPosition._getTransformedByMoveOperation( b );\n\t} else {\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( SplitOperation, SplitOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Split at the same position.\n\t//\n\t// If there already was a split at the same position as in `a` operation, it means that the intention\n\t// conveyed by `a` operation has already been fulfilled and `a` should not do anything (to avoid double split).\n\t//\n\t// However, there is a difference if these are new splits or splits created by undo. These have different\n\t// intentions. Also splits moving back different elements from graveyard have different intentions. They\n\t// are just different operations.\n\t//\n\t// So we cancel split operation only if it was really identical.\n\t//\n\t// Also, there is additional case, where split operations aren't identical and should not be cancelled, however the\n\t// default transformation is incorrect too.\n\t//\n\tif ( a.splitPosition.isEqual( b.splitPosition ) ) {\n\t\tif ( !a.graveyardPosition && !b.graveyardPosition ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\n\t\tif ( a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual( b.graveyardPosition ) ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\n\t\t// Use context to know that the `a.splitPosition` should stay where it is.\n\t\t// This happens during undo when first a merge operation moved nodes to `a.splitPosition` and now `b` operation undoes that merge.\n\t\tif ( context.abRelation == 'splitBefore' ) {\n\t\t\t// Since split is at the same position, there are no nodes left to split.\n\t\t\ta.howMany = 0;\n\n\t\t\t// Note: there was `if ( a.graveyardPosition )` here but it was uncovered in tests and I couldn't find any scenarios for now.\n\t\t\t// That would have to be a `SplitOperation` that didn't come from undo but is transformed by operations that were undone.\n\t\t\t// It could happen if `context` is enabled in collaboration.\n\t\t\ta.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// Case 2:\n\t//\n\t// Same node is using to split different elements. This happens in undo when previously same element was merged to\n\t// two different elements. This is described in `MergeOperation` x `MergeOperation` transformation.\n\t//\n\t// In this case we will follow the same logic. We will assume that `insertionPosition` is same for both\n\t// split operations. This might not always be true but in the real cases that were experienced it was. After all,\n\t// if these splits are reverses of merge operations that were merging the same element, then the `insertionPosition`\n\t// should be same for both of those splits.\n\t//\n\t// Again, we will decide which operation is stronger by checking if split happens in graveyard or in non-graveyard root.\n\t//\n\tif ( a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual( b.graveyardPosition ) ) {\n\t\tconst aInGraveyard = a.splitPosition.root.rootName == '$graveyard';\n\t\tconst bInGraveyard = b.splitPosition.root.rootName == '$graveyard';\n\n\t\t// If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n\t\tconst aIsWeak = aInGraveyard && !bInGraveyard;\n\n\t\t// If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n\t\tconst bIsWeak = bInGraveyard && !aInGraveyard;\n\n\t\t// Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n\t\tconst forceMove = bIsWeak || ( !aIsWeak && context.aIsStrong );\n\n\t\tif ( forceMove ) {\n\t\t\tconst result = [];\n\n\t\t\t// First we need to move any nodes split by `b` back to where they were.\n\t\t\t// Do it only if `b` actually moved something.\n\t\t\tif ( b.howMany ) {\n\t\t\t\tresult.push( new MoveOperation( b.moveTargetPosition, b.howMany, b.splitPosition, 0 ) );\n\t\t\t}\n\n\t\t\t// Then we need to move nodes from `a` split position to their new element.\n\t\t\t// Do it only if `a` actually should move something.\n\t\t\tif ( a.howMany ) {\n\t\t\t\tresult.push( new MoveOperation( a.splitPosition, a.howMany, a.moveTargetPosition, 0 ) );\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\tif ( a.graveyardPosition ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation( b );\n\t}\n\n\t// Case 3:\n\t//\n\t// Position where operation `b` inserted a new node after split is the same as the operation `a` split position.\n\t// As in similar cases, there is ambiguity if the split should be before the new node (created by `b`) or after.\n\t//\n\tif ( a.splitPosition.isEqual( b.insertionPosition ) && context.abRelation == 'splitBefore' ) {\n\t\ta.howMany++;\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 4:\n\t//\n\t// This is a mirror to the case 2. above.\n\t//\n\tif ( b.splitPosition.isEqual( a.insertionPosition ) && context.baRelation == 'splitBefore' ) {\n\t\tconst newPositionPath = b.insertionPosition.path.slice();\n\t\tnewPositionPath.push( 0 );\n\n\t\tconst newPosition = new Position( b.insertionPosition.root, newPositionPath );\n\t\tconst moveOp = new MoveOperation( a.insertionPosition, 1, newPosition, 0 );\n\n\t\treturn [ a, moveOp ];\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.splitPosition ) && a.splitPosition.offset < b.splitPosition.offset ) {\n\t\ta.howMany -= b.howMany;\n\t}\n\n\ta.splitPosition = a.splitPosition._getTransformedBySplitOperation( b );\n\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\treturn [ a ];\n} );\n\n// Checks whether `MoveOperation` `targetPosition` is inside a node from the moved range of the other `MoveOperation`.\n//\n// @private\n// @param {module:engine/model/operation/moveoperation~MoveOperation} a\n// @param {module:engine/model/operation/moveoperation~MoveOperation} b\n// @returns {Boolean}\nfunction _moveTargetIntoMovedRange( a, b ) {\n\treturn a.targetPosition._getTransformedByDeletion( b.sourcePosition, b.howMany ) === null;\n}\n\n// Helper function for `MoveOperation` x `MoveOperation` transformation. Converts given ranges and target position to\n// move operations and returns them.\n//\n// Ranges and target position will be transformed on-the-fly when generating operations.\n//\n// Given `ranges` should be in the order of how they were in the original transformed operation.\n//\n// Given `targetPosition` is the target position of the first range from `ranges`.\n//\n// @private\n// @param {Array.<module:engine/model/range~Range>} ranges\n// @param {module:engine/model/position~Position} targetPosition\n// @returns {Array.<module:engine/model/operation/moveoperation~MoveOperation>}\nfunction _makeMoveOperationsFromRanges( ranges, targetPosition ) {\n\t// At this moment we have some ranges and a target position, to which those ranges should be moved.\n\t// Order in `ranges` array is the go-to order of after transformation.\n\t//\n\t// We are almost done. We have `ranges` and `targetPosition` to make operations from.\n\t// Unfortunately, those operations may affect each other. Precisely, first operation after move\n\t// may affect source range and target position of second and third operation. Same with second\n\t// operation affecting third.\n\t//\n\t// We need to fix those source ranges and target positions once again, before converting `ranges` to operations.\n\tconst operations = [];\n\n\t// Keep in mind that nothing will be transformed if there is just one range in `ranges`.\n\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t// Create new operation out of a range and target position.\n\t\tconst range = ranges[ i ];\n\t\tconst op = new MoveOperation(\n\t\t\trange.start,\n\t\t\trange.end.offset - range.start.offset,\n\t\t\ttargetPosition,\n\t\t\t0\n\t\t);\n\n\t\toperations.push( op );\n\n\t\t// Transform other ranges by the generated operation.\n\t\tfor ( let j = i + 1; j < ranges.length; j++ ) {\n\t\t\t// All ranges in `ranges` array should be:\n\t\t\t//\n\t\t\t// * non-intersecting (these are part of original operation source range), and\n\t\t\t// * `targetPosition` does not target into them (opposite would mean that transformed operation targets \"inside itself\").\n\t\t\t//\n\t\t\t// This means that the transformation will be \"clean\" and always return one result.\n\t\t\tranges[ j ] = ranges[ j ]._getTransformedByMove( op.sourcePosition, op.targetPosition, op.howMany )[ 0 ];\n\t\t}\n\n\t\ttargetPosition = targetPosition._getTransformedByMove( op.sourcePosition, op.targetPosition, op.howMany );\n\t}\n\n\treturn operations;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/basecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { transformSets } from '@ckeditor/ckeditor5-engine/src/model/operation/transform';\n\n/**\n * Base class for undo feature commands: {@link module:undo/undocommand~UndoCommand} and {@link module:undo/redocommand~RedoCommand}.\n *\n * @protected\n * @extends module:core/command~Command\n */\nexport default class BaseCommand extends Command {\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Stack of items stored by the command. These are pairs of:\n\t\t *\n\t\t * * {@link module:engine/model/batch~Batch batch} saved by the command,\n\t\t * * {@link module:engine/model/selection~Selection selection} state at the moment of saving the batch.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array} #_stack\n\t\t */\n\t\tthis._stack = [];\n\n\t\t/**\n\t\t * Stores all batches that were created by this command.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakSet.<module:engine/model/batch~Batch>} #_createdBatches\n\t\t */\n\t\tthis._createdBatches = new WeakSet();\n\n\t\t// Refresh state, so the command is inactive right after initialization.\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._stack.length > 0;\n\t}\n\n\t/**\n\t * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}\n\t * created by the editor which this command is registered to.\n\t *\n\t * @param {module:engine/model/batch~Batch} batch The batch to add.\n\t */\n\taddBatch( batch ) {\n\t\tconst docSelection = this.editor.model.document.selection;\n\n\t\tconst selection = {\n\t\t\tranges: docSelection.hasOwnRange ? Array.from( docSelection.getRanges() ) : [],\n\t\t\tisBackward: docSelection.isBackward\n\t\t};\n\n\t\tthis._stack.push( { batch, selection } );\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * Removes all items from the stack.\n\t */\n\tclearStack() {\n\t\tthis._stack = [];\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.\n\t *\n\t * @protected\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be restored.\n\t * @param {Boolean} isBackward A flag describing whether the restored range was selected forward or backward.\n\t * @param {Array.<module:engine/model/operation/operation~Operation>} operations Operations which has been applied\n\t * since selection has been stored.\n\t */\n\t_restoreSelection( ranges, isBackward, operations ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// This will keep the transformed selection ranges.\n\t\tconst selectionRanges = [];\n\n\t\t// Transform all ranges from the restored selection.\n\t\tfor ( const range of ranges ) {\n\t\t\tconst transformed = transformSelectionRange( range, operations );\n\n\t\t\t// For each `range` from `ranges`, we take only one transformed range.\n\t\t\t// This is because we want to prevent situation where single-range selection\n\t\t\t// got transformed to multi-range selection. We will take the first range that\n\t\t\t// is not in the graveyard.\n\t\t\tconst newRange = transformed.find(\n\t\t\t\trange => range.start.root != document.graveyard\n\t\t\t);\n\n\t\t\t// `transformedRange` might be `undefined` if transformed range ended up in graveyard.\n\t\t\tif ( newRange ) {\n\t\t\t\tselectionRanges.push( newRange );\n\t\t\t}\n\t\t}\n\n\t\t// `selectionRanges` may be empty if all ranges ended up in graveyard. If that is the case, do not restore selection.\n\t\tif ( selectionRanges.length ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( selectionRanges, { backward: isBackward } );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.\n\t * This is a helper method for {@link #execute}.\n\t *\n\t * @protected\n\t * @param {module:engine/model/batch~Batch} batchToUndo The batch to be undone.\n\t * @param {module:engine/model/batch~Batch} undoingBatch The batch that will contain undoing changes.\n\t */\n\t_undo( batchToUndo, undoingBatch ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// All changes done by the command execution will be saved as one batch.\n\t\tthis._createdBatches.add( undoingBatch );\n\n\t\tconst operationsToUndo = batchToUndo.operations.slice().filter( operation => operation.isDocumentOperation );\n\t\toperationsToUndo.reverse();\n\n\t\t// We will process each operation from `batchToUndo`, in reverse order. If there were operations A, B and C in undone batch,\n\t\t// we need to revert them in reverse order, so first C' (reversed C), then B', then A'.\n\t\tfor ( const operationToUndo of operationsToUndo ) {\n\t\t\tconst nextBaseVersion = operationToUndo.baseVersion + 1;\n\t\t\tconst historyOperations = Array.from( document.history.getOperations( nextBaseVersion ) );\n\n\t\t\tconst transformedSets = transformSets(\n\t\t\t\t[ operationToUndo.getReversed() ],\n\t\t\t\thistoryOperations,\n\t\t\t\t{\n\t\t\t\t\tuseRelations: true,\n\t\t\t\t\tdocument: this.editor.model.document,\n\t\t\t\t\tpadWithNoOps: false,\n\t\t\t\t\tforceWeakRemove: true\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst reversedOperations = transformedSets.operationsA;\n\n\t\t\t// After reversed operation has been transformed by all history operations, apply it.\n\t\t\tfor ( const operation of reversedOperations ) {\n\t\t\t\t// Before applying, add the operation to the `undoingBatch`.\n\t\t\t\tundoingBatch.addOperation( operation );\n\t\t\t\tmodel.applyOperation( operation );\n\n\t\t\t\tdocument.history.setOperationAsUndone( operationToUndo, operation );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Transforms given range `range` by given `operations`.\n// Returns an array containing one or more ranges, which are result of the transformation.\nfunction transformSelectionRange( range, operations ) {\n\tconst transformed = range.getTransformedByOperations( operations );\n\n\t// After `range` got transformed, we have an array of ranges. Some of those\n\t// ranges may be \"touching\" -- they can be next to each other and could be merged.\n\t// First, we have to sort those ranges to assure that they are in order.\n\ttransformed.sort( ( a, b ) => a.start.isBefore( b.start ) ? -1 : 1 );\n\n\t// Then, we check if two consecutive ranges are touching.\n\tfor ( let i = 1; i < transformed.length; i++ ) {\n\t\tconst a = transformed[ i - 1 ];\n\t\tconst b = transformed[ i ];\n\n\t\tif ( a.end.isTouching( b.start ) ) {\n\t\t\t// And join them together if they are.\n\t\t\ta.end = b.end;\n\t\t\ttransformed.splice( i, 1 );\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn transformed;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undocommand\n */\n\nimport BaseCommand from './basecommand';\n\n/**\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\n *\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\nexport default class UndoCommand extends BaseCommand {\n\t/**\n\t * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\n\t * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t * @fires revert\n\t * @param {module:engine/model/batch~Batch} [batch] A batch that should be undone. If not set, the last added batch will be undone.\n\t */\n\texecute( batch = null ) {\n\t\t// If batch is not given, set `batchIndex` to the last index in command stack.\n\t\tconst batchIndex = batch ? this._stack.findIndex( a => a.batch == batch ) : this._stack.length - 1;\n\n\t\tconst item = this._stack.splice( batchIndex, 1 )[ 0 ];\n\t\tconst undoingBatch = this.editor.model.createBatch( 'transparent' );\n\n\t\t// All changes has to be done in one `enqueueChange` callback so other listeners will not\n\t\t// step between consecutive operations, or won't do changes to the document before selection is properly restored.\n\t\tthis.editor.model.enqueueChange( undoingBatch, () => {\n\t\t\tthis._undo( item.batch, undoingBatch );\n\n\t\t\tconst operations = this.editor.model.document.history.getOperations( item.batch.baseVersion );\n\t\t\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, operations );\n\n\t\t\tthis.fire( 'revert', item.batch, undoingBatch );\n\t\t} );\n\n\t\tthis.refresh();\n\t}\n}\n\n/**\n * Fired when execution of the command reverts some batch.\n *\n * @event revert\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/redocommand\n */\n\nimport BaseCommand from './basecommand';\n\n/**\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\n *\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\nexport default class RedoCommand extends BaseCommand {\n\t/**\n\t * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\n\t * the command's stack, applies the reverted and transformed version on the\n\t * {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst item = this._stack.pop();\n\t\tconst redoingBatch = this.editor.model.createBatch( 'transparent' );\n\n\t\t// All changes have to be done in one `enqueueChange` callback so other listeners will not step between consecutive\n\t\t// operations, or won't do changes to the document before selection is properly restored.\n\t\tthis.editor.model.enqueueChange( redoingBatch, () => {\n\t\t\tconst lastOperation = item.batch.operations[ item.batch.operations.length - 1 ];\n\t\t\tconst nextBaseVersion = lastOperation.baseVersion + 1;\n\t\t\tconst operations = this.editor.model.document.history.getOperations( nextBaseVersion );\n\n\t\t\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, operations );\n\t\t\tthis._undo( item.batch, redoingBatch );\n\t\t} );\n\n\t\tthis.refresh();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undoediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoCommand from './undocommand';\nimport RedoCommand from './redocommand';\n\n/**\n * The undo engine feature.\n *\n * It introduces the `'undo'` and `'redo'` commands to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UndoEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The command that manages undo {@link module:engine/model/batch~Batch batches} stack (history).\n\t\t * Created and registered during the {@link #init feature initialization}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:undo/undocommand~UndoCommand} #_undoCommand\n\t\t */\n\n\t\t/**\n\t\t * The command that manages redo {@link module:engine/model/batch~Batch batches} stack (history).\n\t\t * Created and registered during the {@link #init feature initialization}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:undo/undocommand~UndoCommand} #_redoCommand\n\t\t */\n\n\t\t/**\n\t\t * Keeps track of which batches were registered in undo.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakSet.<module:engine/model/batch~Batch>}\n\t\t */\n\t\tthis._batchRegistry = new WeakSet();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Create commands.\n\t\tthis._undoCommand = new UndoCommand( editor );\n\t\tthis._redoCommand = new RedoCommand( editor );\n\n\t\t// Register command to the editor.\n\t\teditor.commands.add( 'undo', this._undoCommand );\n\t\teditor.commands.add( 'redo', this._redoCommand );\n\n\t\tthis.listenTo( editor.model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\t// Do not register batch if the operation is not a document operation.\n\t\t\t// This prevents from creating empty undo steps, where all operations where non-document operations.\n\t\t\t// Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n\t\t\t// Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n\t\t\t// Such operations should not be reversed.\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst batch = operation.batch;\n\n\t\t\tconst isRedoBatch = this._redoCommand._createdBatches.has( batch );\n\t\t\tconst isUndoBatch = this._undoCommand._createdBatches.has( batch );\n\t\t\tconst isRegisteredBatch = this._batchRegistry.has( batch );\n\n\t\t\t// If changes are not a part of a batch or this is not a new batch, omit those changes.\n\t\t\tif ( isRegisteredBatch || ( batch.type == 'transparent' && !isRedoBatch && !isUndoBatch ) ) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tif ( isRedoBatch ) {\n\t\t\t\t\t// If this batch comes from `redoCommand`, add it to `undoCommand` stack.\n\t\t\t\t\tthis._undoCommand.addBatch( batch );\n\t\t\t\t} else if ( !isUndoBatch ) {\n\t\t\t\t\t// A default batch - these are new changes in the document, not introduced by undo feature.\n\t\t\t\t\t// Add them to `undoCommand` stack and clear `redoCommand` stack.\n\t\t\t\t\tthis._undoCommand.addBatch( batch );\n\t\t\t\t\tthis._redoCommand.clearStack();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the batch to the registry so it will not be processed again.\n\t\t\tthis._batchRegistry.add( batch );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( this._undoCommand, 'revert', ( evt, undoneBatch, undoingBatch ) => {\n\t\t\tthis._redoCommand.addBatch( undoingBatch );\n\t\t} );\n\n\t\teditor.keystrokes.set( 'CTRL+Z', 'undo' );\n\t\teditor.keystrokes.set( 'CTRL+Y', 'redo' );\n\t\teditor.keystrokes.set( 'CTRL+SHIFT+Z', 'redo' );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/entercommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { getCopyOnEnterAttributes } from './utils';\n\n/**\n * Enter command. It is used by the {@link module:enter/enter~Enter Enter feature} to handle the <kbd>Enter</kbd> key.\n *\n * @extends module:core/command~Command\n */\nexport default class EnterCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tenterBlock( this.editor.model, writer, doc.selection, model.schema );\n\t\t\tthis.fire( 'afterExecute', { writer } );\n\t\t} );\n\t}\n}\n\n// Creates a new block in the way that the <kbd>Enter</kbd> key is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// Selection on which the action should be performed.\n// @param {module:engine/model/schema~Schema} schema\nfunction enterBlock( model, writer, selection, schema ) {\n\tconst isSelectionEmpty = selection.isCollapsed;\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\n\t// Don't touch the roots and other limit elements.\n\tif ( schema.isLimit( startElement ) || schema.isLimit( endElement ) ) {\n\t\t// Delete the selected content but only if inside a single limit element.\n\t\t// Abort, when crossing limit elements boundary (e.g. <limit1>x[x</limit1>donttouchme<limit2>y]y</limit2>).\n\t\t// This is an edge case and it's hard to tell what should actually happen because such a selection\n\t\t// is not entirely valid.\n\t\tif ( !isSelectionEmpty && startElement == endElement ) {\n\t\t\tmodel.deleteContent( selection );\n\t\t}\n\n\t\treturn;\n\t}\n\n\tif ( isSelectionEmpty ) {\n\t\tconst attributesToCopy = getCopyOnEnterAttributes( writer.model.schema, selection.getAttributes() );\n\t\tsplitBlock( writer, range.start );\n\t\twriter.setSelectionAttribute( attributesToCopy );\n\t} else {\n\t\tconst leaveUnmerged = !( range.start.isAtStart && range.end.isAtEnd );\n\t\tconst isContainedWithinOneElement = ( startElement == endElement );\n\n\t\tmodel.deleteContent( selection, { leaveUnmerged } );\n\n\t\tif ( leaveUnmerged ) {\n\t\t\t// Partially selected elements.\n\t\t\t//\n\t\t\t// <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x</h><h>^x</h>\n\t\t\tif ( isContainedWithinOneElement ) {\n\t\t\t\tsplitBlock( writer, selection.focus );\n\t\t\t}\n\t\t\t// Selection over multiple elements.\n\t\t\t//\n\t\t\t// <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n\t\t\telse {\n\t\t\t\twriter.setSelection( endElement, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction splitBlock( writer, splitPos ) {\n\twriter.split( splitPos );\n\twriter.setSelection( splitPos.parent.nextSibling, 0 );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/enter\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport EnterCommand from './entercommand';\nimport EnterObserver from './enterobserver';\n\n/**\n * This plugin handles the <kbd>Enter</kbd> key (hard line break) in the editor.\n *\n * See also the {@link module:enter/shiftenter~ShiftEnter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Enter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Enter';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tview.addObserver( EnterObserver );\n\n\t\teditor.commands.add( 'enter', new EnterCommand( editor ) );\n\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tdata.preventDefault();\n\n\t\t\t// The soft enter key is handled by the ShiftEnter plugin.\n\t\t\tif ( data.isSoft ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.execute( 'enter' );\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/enabletoolbarkeyboardfocus\n */\n\n/**\n * Enables focus/blur toolbar navigation using `Alt+F10` and `Esc` keystrokes.\n *\n * @param {Object} options Options of the utility.\n * @param {*} options.origin A view to which the focus will return when `Esc` is pressed and\n * `options.toolbar` is focused.\n * @param {module:utils/keystrokehandler~KeystrokeHandler} options.originKeystrokeHandler A keystroke\n * handler to register `Alt+F10` keystroke.\n * @param {module:utils/focustracker~FocusTracker} options.originFocusTracker A focus tracker\n * for `options.origin`.\n * @param {module:ui/toolbar/toolbarview~ToolbarView} options.toolbar A toolbar which is to gain\n * focus when `Alt+F10` is pressed.\n * @param {Function} [options.beforeFocus] A callback executed before the `options.toolbar` gains focus\n * upon the `Alt+F10` keystroke.\n * @param {Function} [options.afterBlur] A callback executed after `options.toolbar` loses focus upon\n * `Esc` keystroke but before the focus goes back to `options.origin`.\n */\nexport default function enableToolbarKeyboardFocus( {\n\torigin,\n\toriginKeystrokeHandler,\n\toriginFocusTracker,\n\ttoolbar,\n\tbeforeFocus,\n\tafterBlur\n} ) {\n\t// Because toolbar items can get focus, the overall state of the toolbar must\n\t// also be tracked.\n\toriginFocusTracker.add( toolbar.element );\n\n\t// Focus the toolbar on the keystroke, if not already focused.\n\toriginKeystrokeHandler.set( 'Alt+F10', ( data, cancel ) => {\n\t\tif ( originFocusTracker.isFocused && !toolbar.focusTracker.isFocused ) {\n\t\t\tif ( beforeFocus ) {\n\t\t\t\tbeforeFocus();\n\t\t\t}\n\n\t\t\ttoolbar.focus();\n\n\t\t\tcancel();\n\t\t}\n\t} );\n\n\t// Blur the toolbar and bring the focus back to origin.\n\ttoolbar.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\tif ( toolbar.focusTracker.isFocused ) {\n\t\t\torigin.focus();\n\n\t\t\tif ( afterBlur ) {\n\t\t\t\tafterBlur();\n\t\t\t}\n\n\t\t\tcancel();\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/normalizetoolbarconfig\n */\n\n/**\n * Normalizes the toolbar configuration (`config.toolbar`), which:\n *\n * * may be defined as an `Array`:\n *\n * \t\ttoolbar: [ 'heading', 'bold', 'italic', 'link', ... ]\n *\n * * or an `Object`:\n *\n *\t\ttoolbar: {\n *\t\t\titems: [ 'heading', 'bold', 'italic', 'link', ... ],\n *\t\t\t...\n *\t\t}\n *\n * * or may not be defined at all (`undefined`)\n *\n * and returns it in the object form.\n *\n * @param {Array|Object|undefined} config The value of `config.toolbar`.\n * @returns {Object} A normalized toolbar config object.\n */\nexport default function normalizeToolbarConfig( config ) {\n\tif ( Array.isArray( config ) ) {\n\t\treturn {\n\t\t\titems: config\n\t\t};\n\t}\n\n\tif ( !config ) {\n\t\treturn {\n\t\t\titems: []\n\t\t};\n\t}\n\n\treturn Object.assign( {\n\t\titems: []\n\t}, config );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/shiftentercommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { getCopyOnEnterAttributes } from './utils';\n\n/**\n * ShiftEnter command. It is used by the {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature} to handle\n * the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke.\n *\n * @extends module:core/command~Command\n */\nexport default class ShiftEnterCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tsoftBreakAction( model, writer, doc.selection );\n\t\t\tthis.fire( 'afterExecute', { writer } );\n\t\t} );\n\t}\n\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.isEnabled = isEnabled( model.schema, doc.selection );\n\t}\n}\n\n// Checks whether the ShiftEnter command should be enabled in the specified selection.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\nfunction isEnabled( schema, selection ) {\n\t// At this moment it is okay to support single range selections only.\n\t// But in the future we may need to change that.\n\tif ( selection.rangeCount > 1 ) {\n\t\treturn false;\n\t}\n\n\tconst anchorPos = selection.anchor;\n\n\t// Check whether the break element can be inserted in the current selection anchor.\n\tif ( !anchorPos || !schema.checkChild( anchorPos, 'softBreak' ) ) {\n\t\treturn false;\n\t}\n\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\n\t// Do not modify the content if selection is cross-limit elements.\n\tif ( ( isInsideLimitElement( startElement, schema ) || isInsideLimitElement( endElement, schema ) ) && startElement !== endElement ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// Creates a break in the way that the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// Selection on which the action should be performed.\nfunction softBreakAction( model, writer, selection ) {\n\tconst isSelectionEmpty = selection.isCollapsed;\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\tconst isContainedWithinOneElement = ( startElement == endElement );\n\n\tif ( isSelectionEmpty ) {\n\t\tconst attributesToCopy = getCopyOnEnterAttributes( model.schema, selection.getAttributes() );\n\t\tinsertBreak( writer, range.end );\n\n\t\twriter.removeSelectionAttribute( selection.getAttributeKeys() );\n\t\twriter.setSelectionAttribute( attributesToCopy );\n\t} else {\n\t\tconst leaveUnmerged = !( range.start.isAtStart && range.end.isAtEnd );\n\t\tmodel.deleteContent( selection, { leaveUnmerged } );\n\n\t\t// Selection within one element:\n\t\t//\n\t\t// <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x<br>^x</h>\n\t\tif ( isContainedWithinOneElement ) {\n\t\t\tinsertBreak( writer, selection.focus );\n\t\t}\n\t\t// Selection over multiple elements.\n\t\t//\n\t\t// <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n\t\t//\n\t\t// We chose not to insert a line break in this case because:\n\t\t//\n\t\t// * it's not a very common scenario,\n\t\t// * it actually surprised me when I saw the \"expected behavior\" in real life.\n\t\t//\n\t\t// It's ok if the user will need to be more specific where they want the <br> to be inserted.\n\t\telse {\n\t\t\t// Move the selection to the 2nd element (last step of the example above).\n\t\t\tif ( leaveUnmerged ) {\n\t\t\t\twriter.setSelection( endElement, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction insertBreak( writer, position ) {\n\tconst breakLineElement = writer.createElement( 'softBreak' );\n\n\twriter.insert( breakLineElement, position );\n\twriter.setSelection( breakLineElement, 'after' );\n}\n\n// Checks whether the specified `element` is a child of the limit element.\n//\n// Checking whether the `<p>` element is inside a limit element:\n//   - <$root><p>Text.</p></$root> => false\n//   - <$root><limitElement><p>Text</p></limitElement></$root> => true\n//\n// @param {module:engine/model/element~Element} element\n// @param {module:engine/schema~Schema} schema\n// @returns {Boolean}\nfunction isInsideLimitElement( element, schema ) {\n\t// `$root` is a limit element but in this case is an invalid element.\n\tif ( element.is( 'rootElement' ) ) {\n\t\treturn false;\n\t}\n\n\treturn schema.isLimit( element ) || isInsideLimitElement( element.parent, schema );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/shiftenter\n */\n\nimport ShiftEnterCommand from './shiftentercommand';\nimport EnterObserver from './enterobserver';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * This plugin handles the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke (soft line break) in the editor.\n *\n * See also the {@link module:enter/enter~Enter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ShiftEnter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ShiftEnter';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t// Configure the schema.\n\t\tschema.register( 'softBreak', {\n\t\t\tallowWhere: '$text',\n\t\t\tisInline: true\n\t\t} );\n\n\t\t// Configure converters.\n\t\tconversion.for( 'upcast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'softBreak',\n\t\t\t\tview: 'br'\n\t\t\t} );\n\n\t\tconversion.for( 'downcast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'softBreak',\n\t\t\t\tview: ( modelElement, viewWriter ) => viewWriter.createEmptyElement( 'br' )\n\t\t\t} );\n\n\t\tview.addObserver( EnterObserver );\n\n\t\teditor.commands.add( 'shiftEnter', new ShiftEnterCommand( editor ) );\n\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tdata.preventDefault();\n\n\t\t\t// The hard enter key is handled by the Enter plugin.\n\t\t\tif ( !data.isSoft ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.execute( 'shiftEnter' );\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module essentials/essentials\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport Clipboard from '@ckeditor/ckeditor5-clipboard/src/clipboard';\nimport Enter from '@ckeditor/ckeditor5-enter/src/enter';\nimport ShiftEnter from '@ckeditor/ckeditor5-enter/src/shiftenter';\nimport Typing from '@ckeditor/ckeditor5-typing/src/typing';\nimport Undo from '@ckeditor/ckeditor5-undo/src/undo';\n\n/**\n * A plugin including all essential editing features. It represents a set of features that enables similar functionalities\n * to a `<textarea>` element.\n *\n * It includes:\n *\n * * {@link module:clipboard/clipboard~Clipboard},\n * * {@link module:enter/enter~Enter},\n * * {@link module:enter/shiftenter~ShiftEnter},\n * * {@link module:typing/typing~Typing},\n * * {@link module:undo/undo~Undo}.\n *\n * This plugin set does not define any block-level containers (such as {@link module:paragraph/paragraph~Paragraph}).\n * If your editor is supposed to handle block content, make sure to include it.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Essentials extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Clipboard, Enter, ShiftEnter, Typing, Undo ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Essentials';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The heading command. It is used by the {@link module:heading/heading~Heading heading feature} to apply headings.\n *\n * @extends module:core/command~Command\n */\nexport default class HeadingCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor instance.\n\t * @param {Array.<String>} modelElements Names of the element which this command can apply in the model.\n\t */\n\tconstructor( editor, modelElements ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * If the selection starts in a heading (which {@link #modelElements is supported by this command})\n\t\t * the value is set to the name of that heading model element.\n\t\t * It is  set to `false` otherwise.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean|String} #value\n\t\t */\n\n\t\t/**\n\t\t * Set of defined model's elements names that this command support.\n\t\t * See {@link module:heading/heading~HeadingOption}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>}\n\t\t */\n\t\tthis.modelElements = modelElements;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst block = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\tthis.value = !!block && this.modelElements.includes( block.name ) && block.name;\n\t\tthis.isEnabled = !!block && this.modelElements.some( heading => checkCanBecomeHeading( block, heading, this.editor.model.schema ) );\n\t}\n\n\t/**\n\t * Executes the command. Applies the heading to the selected blocks or, if the first selected\n\t * block is a heading already, turns selected headings (of this level only) to paragraphs.\n\t *\n\t * @param {Object} options\n\t * @param {String} options.value Name of the element which this command will apply in the model.\n\t * @fires execute\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tconst modelElement = options.value;\n\n\t\tmodel.change( writer => {\n\t\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t\t.filter( block => {\n\t\t\t\t\treturn checkCanBecomeHeading( block, modelElement, model.schema );\n\t\t\t\t} );\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tif ( !block.is( modelElement ) ) {\n\t\t\t\t\twriter.rename( block, modelElement );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks whether the given block can be replaced by a specific heading.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:heading/headingcommand~HeadingCommand#modelElement} heading Command element name in the model.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeHeading( block, heading, schema ) {\n\treturn schema.checkChild( block.parent, heading ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\nimport HeadingCommand from './headingcommand';\n\nimport priorities from '@ckeditor/ckeditor5-utils/src/priorities';\n\nconst defaultModelElement = 'paragraph';\n\n/**\n * The headings engine feature. It handles switching between block formats &ndash; headings and paragraph.\n * This class represents the engine part of the heading feature. See also {@link module:heading/heading~Heading}.\n * It introduces `heading1`-`headingN` commands which allow to convert paragraphs into headings.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'heading', {\n\t\t\toptions: [\n\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n\t\t\t\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n\t\t\t\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n\t\t\t\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Paragraph ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst options = editor.config.get( 'heading.options' );\n\n\t\tconst modelElements = [];\n\n\t\tfor ( const option of options ) {\n\t\t\t// Skip paragraph - it is defined in required Paragraph feature.\n\t\t\tif ( option.model !== defaultModelElement ) {\n\t\t\t\t// Schema.\n\t\t\t\teditor.model.schema.register( option.model, {\n\t\t\t\t\tinheritAllFrom: '$block'\n\t\t\t\t} );\n\n\t\t\t\teditor.conversion.elementToElement( option );\n\n\t\t\t\tmodelElements.push( option.model );\n\t\t\t}\n\t\t}\n\n\t\tthis._addDefaultH1Conversion( editor );\n\n\t\t// Register the heading command for this option.\n\t\teditor.commands.add( 'heading', new HeadingCommand( editor, modelElements ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\t// If the enter command is added to the editor, alter its behavior.\n\t\t// Enter at the end of a heading element should create a paragraph.\n\t\tconst editor = this.editor;\n\t\tconst enterCommand = editor.commands.get( 'enter' );\n\t\tconst options = editor.config.get( 'heading.options' );\n\n\t\tif ( enterCommand ) {\n\t\t\tthis.listenTo( enterCommand, 'afterExecute', ( evt, data ) => {\n\t\t\t\tconst positionParent = editor.model.document.selection.getFirstPosition().parent;\n\t\t\t\tconst isHeading = options.some( option => positionParent.is( option.model ) );\n\n\t\t\t\tif ( isHeading && !positionParent.is( defaultModelElement ) && positionParent.childCount === 0 ) {\n\t\t\t\t\tdata.writer.rename( positionParent, defaultModelElement );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds default conversion for `h1` -> `heading1` with a low priority.\n\t *\n\t * @private\n\t * @param {module:core/editor/editor~Editor} editor Editor instance on which to add the `h1` conversion.\n\t */\n\t_addDefaultH1Conversion( editor ) {\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: 'heading1',\n\t\t\tview: 'h1',\n\t\t\t// With a `low` priority, `paragraph` plugin autoparagraphing mechanism is executed. Make sure\n\t\t\t// this listener is called before it. If not, `h1` will be transformed into a paragraph.\n\t\t\tconverterPriority: priorities.get( 'low' ) + 1\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport setDataInElement from '@ckeditor/ckeditor5-utils/src/dom/setdatainelement';\n\n/**\n * @module core/editor/utils/elementapimixin\n */\n\n/**\n * Implementation of the {@link module:core/editor/utils/elementapimixin~ElementApi}.\n *\n * @mixin ElementApiMixin\n * @implements module:core/editor/utils/elementapimixin~ElementApi\n */\nconst ElementApiMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tupdateSourceElement() {\n\t\tif ( !this.sourceElement ) {\n\t\t\t/**\n\t\t\t * Cannot update the source element of a detached editor.\n\t\t\t *\n\t\t\t * The {@link ~ElementApi#updateSourceElement `updateSourceElement()`} method cannot be called if you did not\n\t\t\t * pass an element to `Editor.create()`.\n\t\t\t *\n\t\t\t * @error editor-missing-sourceelement\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'editor-missing-sourceelement: Cannot update the source element of a detached editor.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tsetDataInElement( this.sourceElement, this.data.get() );\n\t}\n};\n\nexport default ElementApiMixin;\n\n/**\n * Interface describing an editor that replaced a DOM element (was \"initialized on an element\").\n *\n * Such an editor should provide a method to\n * {@link module:core/editor/utils/elementapimixin~ElementApi#updateSourceElement update the replaced element with the current data}.\n *\n * @interface ElementApi\n */\n\n/**\n * The element on which the editor has been initialized.\n *\n * @readonly\n * @member {HTMLElement} #sourceElement\n */\n\n/**\n * Updates the {@link #sourceElement editor source element}'s content with the data.\n *\n * @method #updateSourceElement\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport { isFunction } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * @module core/editor/utils/attachtoform\n */\n\n/**\n * Checks if the editor is initialized on a `<textarea>` element that belongs to a form. If yes, it updates the editor's element\n * content before submitting the form.\n *\n * This helper requires the {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface}.\n *\n * @param {module:core/editor/editor~Editor} editor Editor instance.\n */\nexport default function attachToForm( editor ) {\n\tif ( !isFunction( editor.updateSourceElement ) ) {\n\t\t/**\n\t\t * The editor passed to `attachToForm()` must implement the\n\t\t * {@link module:core/editor/utils/elementapimixin~ElementApi} interface.\n\t\t *\n\t\t * @error attachtoform-missing-elementapi-interface\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'attachtoform-missing-elementapi-interface: Editor passed to attachToForm() must implement ElementApi.',\n\t\t\teditor\n\t\t);\n\t}\n\n\tconst sourceElement = editor.sourceElement;\n\n\t// Only when replacing a textarea which is inside of a form element.\n\tif ( sourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.form ) {\n\t\tlet originalSubmit;\n\t\tconst form = sourceElement.form;\n\t\tconst onSubmit = () => editor.updateSourceElement();\n\n\t\t// Replace the original form#submit() to call a custom submit function first.\n\t\t// Check if #submit is a function because the form might have an input named \"submit\".\n\t\tif ( isFunction( form.submit ) ) {\n\t\t\toriginalSubmit = form.submit;\n\n\t\t\tform.submit = () => {\n\t\t\t\tonSubmit();\n\t\t\t\toriginalSubmit.apply( form );\n\t\t\t};\n\t\t}\n\n\t\t// Update the replaced textarea with data before each form#submit event.\n\t\tform.addEventListener( 'submit', onSubmit );\n\n\t\t// Remove the submit listener and revert the original submit method on\n\t\t// editor#destroy.\n\t\teditor.on( 'destroy', () => {\n\t\t\tform.removeEventListener( 'submit', onSubmit );\n\n\t\t\tif ( originalSubmit ) {\n\t\t\t\tform.submit = originalSubmit;\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/utils\n */\n/**\n * Returns heading options as defined in `config.heading.options` but processed to consider\n * editor localization, i.e. to display {@link module:heading/heading~HeadingOption}\n * in the correct language.\n *\n * Note: The reason behind this method is that there's no way to use {@link module:utils/locale~Locale#t}\n * when the user config is defined because the editor does not exist yet.\n *\n * @param {module:core/editor/editor~Editor} editor\n * @returns {Array.<module:heading/heading~HeadingOption>}.\n */\nexport function getLocalizedOptions(editor) {\n    const t = editor.t;\n    const localizedTitles = {\n        Paragraph: t('Paragraph'),\n        'Heading 1': t('Heading 1'),\n        'Heading 2': t('Heading 2'),\n        'Heading 3': t('Heading 3'),\n        'Heading 4': t('Heading 4'),\n        'Heading 5': t('Heading 5'),\n        'Heading 6': t('Heading 6')\n    };\n    return editor.config.get('heading.options').map(option => {\n        const title = localizedTitles[option.title];\n        if (title && title != option.title) {\n            option.title = title;\n        }\n        return option;\n    });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/headingui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport {\n    createDropdown,\n    addListToDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport { getLocalizedOptions } from './utils';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport '../theme/heading.css';\n/**\n * The headings UI feature. It introduces the `headings` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = getLocalizedOptions(editor);\n        const defaultTitle = t('Choose heading');\n        const dropdownTooltip = t('Heading');\n        // Register UI component.\n        editor.ui.componentFactory.add('heading', locale => {\n            const titles = {};\n            const itemDefinitions = new Collection();\n            const headingCommand = editor.commands.get('heading');\n            const paragraphCommand = editor.commands.get('paragraph');\n            const commands = [headingCommand];\n            for (const option of options) {\n                const def = {\n                    type: 'button',\n                    model: new Model({\n                        label: option.title,\n                        class: option.class,\n                        withText: true\n                    })\n                };\n                if (option.model === 'paragraph') {\n                    def.model.bind('isOn').to(paragraphCommand, 'value');\n                    def.model.set('commandName', 'paragraph');\n                    commands.push(paragraphCommand);\n                } else {\n                    def.model.bind('isOn').to(headingCommand, 'value', value => value === option.model);\n                    def.model.set({\n                        commandName: 'heading',\n                        commandValue: option.model\n                    });\n                }\n                // Add the option to the collection.\n                itemDefinitions.add(def);\n                titles[option.model] = option.title;\n            }\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, itemDefinitions);\n            dropdownView.buttonView.set({\n                isOn: false,\n                withText: true,\n                tooltip: dropdownTooltip\n            });\n            dropdownView.extendTemplate({ attributes: { class: ['ck-heading-dropdown'] } });\n            dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n                return areEnabled.some(isEnabled => isEnabled);\n            });\n            dropdownView.buttonView.bind('label').to(headingCommand, 'value', paragraphCommand, 'value', (value, para) => {\n                const whichModel = value || para && 'paragraph';\n                // If none of the commands is active, display default title.\n                return titles[whichModel] ? titles[whichModel] : defaultTitle;\n            });\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', evt => {\n                editor.execute(evt.source.commandName, evt.source.commandValue ? { value: evt.source.commandValue } : undefined);\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/heading\n */\n\nimport HeadingEditing from './headingediting';\nimport HeadingUI from './headingui';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport '../theme/heading.css';\n\n/**\n * The headings feature.\n *\n * For a detailed overview, check the {@glink features/headings Headings feature documentation}\n * and the {@glink api/heading package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:heading/headingediting~HeadingEditing heading editing feature}\n * and {@link module:heading/headingui~HeadingUI heading UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Heading extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ HeadingEditing, HeadingUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Heading';\n\t}\n}\n\n/**\n * The configuration of the heading feature. Introduced by the {@link module:heading/headingediting~HeadingEditing} feature.\n *\n * Read more in {@link module:heading/heading~HeadingConfig}.\n *\n * @member {module:heading/heading~HeadingConfig} module:core/editor/editorconfig~EditorConfig#heading\n */\n\n/**\n * The configuration of the heading feature.\n * The option is used by the {@link module:heading/headingediting~HeadingEditing} feature.\n *\n *\t\tClassicEditor\n *\t\t\t.create( {\n * \t\t\t\theading: ... // Heading feature config.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface HeadingConfig\n */\n\n/**\n * The available heading options.\n *\n * The default value is:\n *\n *\t\tconst headingConfig = {\n *\t\t\toptions: [\n *\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n *\t\t\t\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n *\t\t\t\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n *\t\t\t\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n *\t\t\t]\n *\t\t};\n *\n * It defines 3 levels of headings. In the editor model they will use `heading1`, `heading2`, and `heading3` elements.\n * Their respective view elements (so the elements output by the editor) will be: `h2`, `h3`, and `h4`. This means that\n * if you choose \"Heading 1\" in the headings dropdown the editor will turn the current block to `<heading1>` in the model\n * which will result in rendering (and outputting to data) the `<h2>` element.\n *\n * The `title` and `class` properties will be used by the `headings` dropdown to render available options.\n * Usually, the first option in the headings dropdown is the \"Paragraph\" option, hence it's also defined on the list.\n * However, you don't need to define its view representation because it's handled by\n * the {@link module:paragraph/paragraph~Paragraph} feature (which is required by\n * the {@link module:heading/headingediting~HeadingEditing} feature).\n *\n * You can **read more** about configuring heading levels and **see more examples** in\n * the {@glink features/headings Headings} guide.\n *\n * Note: In the model you should always start from `heading1`, regardless of how the headings are represented in the view.\n * That's assumption is used by features like {@link module:autoformat/autoformat~Autoformat} to know which element\n * they should use when applying the first level heading.\n *\n * The defined headings are also available as values passed to the `'heading'` command under their model names.\n * For example, the below code will apply `<heading1>` to the current selection:\n *\n *\t\teditor.execute( 'heading', { value: 'heading1' } );\n *\n * @member {Array.<module:heading/heading~HeadingOption>} module:heading/heading~HeadingConfig#options\n */\n\n/**\n * Heading option descriptor.\n *\n * @typedef {Object} module:heading/heading~HeadingOption\n * @property {String} model Name of the model element to convert.\n * @property {module:engine/view/elementdefinition~ElementDefinition} view Definition of a view element to convert from/to.\n * @property {String} title The user-readable title of the option.\n * @property {String} class The class which will be added to the dropdown item representing this option.\n * @property {String} [icon] Icon used by {@link module:heading/headingbuttonsui~HeadingButtonsUI}. It can be omitted when using\n * the default configuration.\n * @extends module:engine/conversion/conversion~ConverterDefinition\n */\n","\n/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/clickobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:click Click} event observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View view controller}\n * by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class ClickObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = 'click';\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when one of the editables has been clicked.\n *\n * Introduced by {@link module:engine/view/observer/clickobserver~ClickObserver}.\n *\n * Note that this event is not available by default. To make it available\n * {@link module:engine/view/observer/clickobserver~ClickObserver} needs to be added\n * to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:engine/view/observer/clickobserver~ClickObserver\n * @event module:engine/view/document~Document#event:click\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/elementreplacer\n */\n\n/**\n * Utility class allowing to hide existing HTML elements or replace them with given ones in a way that doesn't remove\n * the original elements from the DOM.\n */\nexport default class ElementReplacer {\n\tconstructor() {\n\t\t/**\n\t\t * The elements replaced by {@link #replace} and their replacements.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<Object>}\n\t\t */\n\t\tthis._replacedElements = [];\n\t}\n\n\t/**\n\t * Hides the `element` and, if specified, inserts the the given element next to it.\n\t *\n\t * The effect of this method can be reverted by {@link #restore}.\n\t *\n\t * @param {HTMLElement} element The element to replace.\n\t * @param {HTMLElement} [newElement] The replacement element. If not passed, then the `element` will just be hidden.\n\t */\n\treplace( element, newElement ) {\n\t\tthis._replacedElements.push( { element, newElement } );\n\n\t\telement.style.display = 'none';\n\n\t\tif ( newElement ) {\n\t\t\telement.parentNode.insertBefore( newElement, element.nextSibling );\n\t\t}\n\t}\n\n\t/**\n\t * Restores what {@link #replace} did.\n\t */\n\trestore() {\n\t\tthis._replacedElements.forEach( ( { element, newElement } ) => {\n\t\t\telement.style.display = '';\n\n\t\t\tif ( newElement ) {\n\t\t\t\tnewElement.remove();\n\t\t\t}\n\t\t} );\n\n\t\tthis._replacedElements = [];\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditorui\n */\n\nimport EditorUI from '@ckeditor/ckeditor5-core/src/editor/editorui';\nimport enableToolbarKeyboardFocus from '@ckeditor/ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus';\nimport normalizeToolbarConfig from '@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig';\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/src/view/placeholder';\nimport ElementReplacer from '@ckeditor/ckeditor5-utils/src/elementreplacer';\n\n/**\n * The classic editor UI class.\n *\n * @extends module:core/editor/editorui~EditorUI\n */\nexport default class ClassicEditorUI extends EditorUI {\n\t/**\n\t * Creates an instance of the classic editor UI class.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {module:ui/editorui/editoruiview~EditorUIView} view The view of the UI.\n\t */\n\tconstructor( editor, view ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The main (top–most) view of the editor UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/editorui/editoruiview~EditorUIView} #view\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * A normalized `config.toolbar` object.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._toolbarConfig = normalizeToolbarConfig( editor.config.get( 'toolbar' ) );\n\n\t\t/**\n\t\t * The element replacer instance used to hide the editor's source element.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/elementreplacer~ElementReplacer}\n\t\t */\n\t\tthis._elementReplacer = new ElementReplacer();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget element() {\n\t\treturn this.view.element;\n\t}\n\n\t/**\n\t * Initializes the UI.\n\t *\n\t * @param {HTMLElement|null} replacementElement The DOM element that will be the source for the created editor.\n\t */\n\tinit( replacementElement ) {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\t\tconst editingView = editor.editing.view;\n\t\tconst editable = view.editable;\n\t\tconst editingRoot = editingView.document.getRoot();\n\n\t\t// The editable UI and editing root should share the same name. Then name is used\n\t\t// to recognize the particular editable, for instance in ARIA attributes.\n\t\teditable.name = editingRoot.rootName;\n\n\t\tview.render();\n\n\t\t// The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n\t\t// But it can be available earlier if a DOM element has been passed to BalloonEditor.create().\n\t\tconst editableElement = editable.element;\n\n\t\t// Register the editable UI view in the editor. A single editor instance can aggregate multiple\n\t\t// editable areas (roots) but the classic editor has only one.\n\t\tthis.setEditableElement( editable.name, editableElement );\n\n\t\t// Let the global focus tracker know that the editable UI element is focusable and\n\t\t// belongs to the editor. From now on, the focus tracker will sustain the editor focus\n\t\t// as long as the editable is focused (e.g. the user is typing).\n\t\tthis.focusTracker.add( editableElement );\n\n\t\t// Let the editable UI element respond to the changes in the global editor focus\n\t\t// tracker. It has been added to the same tracker a few lines above but, in reality, there are\n\t\t// many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n\t\t// as they have focus, the editable should act like it is focused too (although technically\n\t\t// it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n\t\t// Doing otherwise will result in editable focus styles disappearing, once e.g. the\n\t\t// toolbar gets focused.\n\t\tview.editable.bind( 'isFocused' ).to( this.focusTracker );\n\n\t\t// Bind the editable UI element to the editing view, making it an end– and entry–point\n\t\t// of the editor's engine. This is where the engine meets the UI.\n\t\teditingView.attachDomRoot( editableElement );\n\n\t\t// If an element containing the initial data of the editor was provided, replace it with\n\t\t// an editor instance's UI in DOM until the editor is destroyed. For instance, a <textarea>\n\t\t// can be such element.\n\t\tif ( replacementElement ) {\n\t\t\tthis._elementReplacer.replace( replacementElement, this.element );\n\t\t}\n\n\t\tthis._initPlaceholder();\n\t\tthis._initToolbar();\n\t\tthis.fire( 'ready' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tconst view = this.view;\n\t\tconst editingView = this.editor.editing.view;\n\n\t\tthis._elementReplacer.restore();\n\t\teditingView.detachDomRoot( view.editable.name );\n\t\tview.destroy();\n\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Initializes the editor toolbar.\n\t *\n\t * @private\n\t */\n\t_initToolbar() {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\t\tconst editingView = editor.editing.view;\n\n\t\t// Set–up the sticky panel with toolbar.\n\t\tview.stickyPanel.bind( 'isActive' ).to( this.focusTracker, 'isFocused' );\n\t\tview.stickyPanel.limiterElement = view.element;\n\n\t\tif ( this._toolbarConfig.viewportTopOffset ) {\n\t\t\tview.stickyPanel.viewportTopOffset = this._toolbarConfig.viewportTopOffset;\n\t\t}\n\n\t\tview.toolbar.fillFromConfig( this._toolbarConfig.items, this.componentFactory );\n\n\t\tenableToolbarKeyboardFocus( {\n\t\t\torigin: editingView,\n\t\t\toriginFocusTracker: this.focusTracker,\n\t\t\toriginKeystrokeHandler: editor.keystrokes,\n\t\t\ttoolbar: view.toolbar\n\t\t} );\n\t}\n\n\t/**\n\t * Enable the placeholder text on the editing root, if any was configured.\n\t *\n\t * @private\n\t */\n\t_initPlaceholder() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst editingRoot = editingView.document.getRoot();\n\t\tconst sourceElement = editor.sourceElement;\n\n\t\tconst placeholderText = editor.config.get( 'placeholder' ) ||\n\t\t\tsourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.getAttribute( 'placeholder' );\n\n\t\tif ( placeholderText ) {\n\t\t\tenablePlaceholder( {\n\t\t\t\tview: editingView,\n\t\t\t\telement: editingRoot,\n\t\t\t\ttext: placeholderText,\n\t\t\t\tisDirectHost: false\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/boxed/boxededitoruiview\n */\nimport EditorUIView from '../../editorui/editoruiview';\nimport LabelView from '../../label/labelview';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n/**\n * The boxed editor UI view class. This class represents an editor interface\n * consisting of a toolbar and an editable area, enclosed within a box.\n *\n * @extends module:ui/editorui/editoruiview~EditorUIView\n */\nexport default class BoxedEditorUIView extends EditorUIView {\n    /**\n\t * Creates an instance of the boxed editor UI view class.\n\t *\n\t * @param {module:utils/locale~Locale} locale The locale instance..\n\t */\n    constructor(locale) {\n        super(locale);\n        const ariaLabelUid = uid();\n        /**\n\t\t * Collection of the child views located in the top (`.ck-editor__top`)\n\t\t * area of the UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.top = this.createCollection();\n        /**\n\t\t * Collection of the child views located in the main (`.ck-editor__main`)\n\t\t * area of the UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.main = this.createCollection();\n        /**\n\t\t * Voice label of the UI.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #_voiceLabelView\n\t\t */\n        this._voiceLabelView = this._createVoiceLabel(ariaLabelUid);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset',\n                    'ck-editor',\n                    'ck-rounded-corners'\n                ],\n                role: 'application',\n                dir: locale.uiLanguageDirection,\n                lang: locale.uiLanguage,\n                'aria-labelledby': `ck-editor__aria-label_${ ariaLabelUid }`\n            },\n            children: [\n                this._voiceLabelView,\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-editor__top',\n                            'ck-reset_all'\n                        ],\n                        role: 'presentation'\n                    },\n                    children: this.top\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-editor__main'\n                        ],\n                        role: 'presentation'\n                    },\n                    children: this.main\n                }\n            ]\n        });\n    }\n    /**\n\t * Creates a voice label view instance.\n\t *\n\t * @private\n\t * @returns {module:ui/label/labelview~LabelView}\n\t */\n    _createVoiceLabel(ariaLabelUid) {\n        const t = this.t;\n        const voiceLabel = new LabelView();\n        voiceLabel.text = t('Rich Text Editor');\n        voiceLabel.extendTemplate({\n            attributes: {\n                id: `ck-editor__aria-label_${ ariaLabelUid }`,\n                class: 'ck-voice-label'\n            }\n        });\n        return voiceLabel;\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/panel/sticky/stickypanelview\n */\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport View from '../../view';\nimport Template from '../../template';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\n\nimport '../../../theme/components/panel/stickypanel.css';\n\nconst toPx = toUnit( 'px' );\n\n/**\n * The sticky panel view class.\n */\nexport default class StickyPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Controls whether the sticky panel should be active.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isActive\n\t\t */\n\t\tthis.set( 'isActive', false );\n\n\t\t/**\n\t\t * Controls whether the sticky panel is in the \"sticky\" state.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isSticky\n\t\t */\n\t\tthis.set( 'isSticky', false );\n\n\t\t/**\n\t\t * The limiter element for the sticky panel instance. Its bounding rect limits\n\t\t * the \"stickyness\" of the panel, i.e. when the panel reaches the bottom\n\t\t * edge of the limiter, it becomes sticky to that edge and does not float\n\t\t * off the limiter. It is mandatory for the panel to work properly and once\n\t\t * set, it cannot be changed.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {HTMLElement} #limiterElement\n\t\t */\n\t\tthis.set( 'limiterElement', null );\n\n\t\t/**\n\t\t * The offset from the bottom edge of {@link #limiterElement}\n\t\t * which stops the panel from stickying any further to prevent limiter's content\n\t\t * from being completely covered.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @default 50\n\t\t * @member {Number} #limiterBottomOffset\n\t\t */\n\t\tthis.set( 'limiterBottomOffset', 50 );\n\n\t\t/**\n\t\t * The offset from the top edge of the web browser's viewport which makes the\n\t\t * panel become sticky. The default value is `0`, which means the panel becomes\n\t\t * sticky when it's upper edge touches the top of the page viewport.\n\t\t *\n\t\t * This attribute is useful when the web page has UI elements positioned to the top\n\t\t * either using `position: fixed` or `position: sticky`, which would cover the\n\t\t * sticky panel or vice–versa (depending on the `z-index` hierarchy).\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #viewportTopOffset\n\t\t */\n\t\tthis.set( 'viewportTopOffset', 0 );\n\n\t\t/**\n\t\t * Controls the `margin-left` CSS style of the panel.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String} #_marginLeft\n\t\t */\n\t\tthis.set( '_marginLeft', null );\n\n\t\t/**\n\t\t * Set `true` if the sticky panel reached the bottom edge of the\n\t\t * {@link #limiterElement}.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_isStickyToTheLimiter\n\t\t */\n\t\tthis.set( '_isStickyToTheLimiter', false );\n\n\t\t/**\n\t\t * Set `true` if the sticky panel uses the {@link #viewportTopOffset},\n\t\t * i.e. not {@link #_isStickyToTheLimiter} and the {@link #viewportTopOffset}\n\t\t * is not `0`.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_hasViewportTopOffset\n\t\t */\n\t\tthis.set( '_hasViewportTopOffset', false );\n\n\t\t/**\n\t\t * Collection of the child views which creates balloon panel contents.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.content = this.createCollection();\n\n\t\t/**\n\t\t * The DOM bounding client rect of the {@link module:ui/view~View#element} of the panel.\n\t\t *\n\t\t * @protected\n\t\t * @member {Object} #_panelRect\n\t\t */\n\n\t\t/**\n\t\t * The DOM bounding client rect of the {@link #limiterElement}\n\t\t * of the panel.\n\t\t *\n\t\t * @protected\n\t\t * @member {Object} #_limiterRect\n\t\t */\n\n\t\t/**\n\t\t * A dummy element which visually fills the space as long as the\n\t\t * actual panel is sticky. It prevents flickering of the UI.\n\t\t *\n\t\t * @protected\n\t\t * @property {HTMLElement}\n\t\t */\n\t\tthis._contentPanelPlaceholder = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-sticky-panel__placeholder'\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\tdisplay: bind.to( 'isSticky', isSticky => isSticky ? 'block' : 'none' ),\n\t\t\t\t\theight: bind.to( 'isSticky', isSticky => {\n\t\t\t\t\t\treturn isSticky ? toPx( this._panelRect.height ) : null;\n\t\t\t\t\t} )\n\t\t\t\t}\n\t\t\t}\n\t\t} ).render();\n\n\t\t/**\n\t\t * The panel which accepts children into {@link #content} collection.\n\t\t * Also an element which is positioned when {@link #isSticky}.\n\t\t *\n\t\t * @protected\n\t\t * @property {HTMLElement}\n\t\t */\n\t\tthis._contentPanel = new Template( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-sticky-panel__content',\n\t\t\t\t\t// Toggle class of the panel when \"sticky\" state changes in the view.\n\t\t\t\t\tbind.if( 'isSticky', 'ck-sticky-panel__content_sticky' ),\n\t\t\t\t\tbind.if( '_isStickyToTheLimiter', 'ck-sticky-panel__content_sticky_bottom-limit' ),\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\twidth: bind.to( 'isSticky', isSticky => {\n\t\t\t\t\t\treturn isSticky ? toPx( this._contentPanelPlaceholder.getBoundingClientRect().width ) : null;\n\t\t\t\t\t} ),\n\n\t\t\t\t\ttop: bind.to( '_hasViewportTopOffset', _hasViewportTopOffset => {\n\t\t\t\t\t\treturn _hasViewportTopOffset ? toPx( this.viewportTopOffset ) : null;\n\t\t\t\t\t} ),\n\n\t\t\t\t\tbottom: bind.to( '_isStickyToTheLimiter', _isStickyToTheLimiter => {\n\t\t\t\t\t\treturn _isStickyToTheLimiter ? toPx( this.limiterBottomOffset ) : null;\n\t\t\t\t\t} ),\n\n\t\t\t\t\tmarginLeft: bind.to( '_marginLeft' )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.content\n\t\t} ).render();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-sticky-panel'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis._contentPanelPlaceholder,\n\t\t\t\tthis._contentPanel\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Check if the panel should go into the sticky state immediately.\n\t\tthis._checkIfShouldBeSticky();\n\n\t\t// Update sticky state of the panel as the window is being scrolled.\n\t\tthis.listenTo( global.window, 'scroll', () => {\n\t\t\tthis._checkIfShouldBeSticky();\n\t\t} );\n\n\t\t// Synchronize with `model.isActive` because sticking an inactive panel is pointless.\n\t\tthis.listenTo( this, 'change:isActive', () => {\n\t\t\tthis._checkIfShouldBeSticky();\n\t\t} );\n\t}\n\n\t/**\n\t * Analyzes the environment to decide whether the panel should\n\t * be sticky or not.\n\t *\n\t * @protected\n\t */\n\t_checkIfShouldBeSticky() {\n\t\tconst panelRect = this._panelRect = this._contentPanel.getBoundingClientRect();\n\t\tlet limiterRect;\n\n\t\tif ( !this.limiterElement ) {\n\t\t\tthis.isSticky = false;\n\t\t} else {\n\t\t\tlimiterRect = this._limiterRect = this.limiterElement.getBoundingClientRect();\n\n\t\t\t// The panel must be active to become sticky.\n\t\t\tthis.isSticky = this.isActive &&\n\t\t\t\t// The limiter's top edge must be beyond the upper edge of the visible viewport (+the viewportTopOffset).\n\t\t\t\tlimiterRect.top < this.viewportTopOffset &&\n\t\t\t\t// The model#limiterElement's height mustn't be smaller than the panel's height and model#limiterBottomOffset.\n\t\t\t\t// There's no point in entering the sticky mode if the model#limiterElement is very, very small, because\n\t\t\t\t// it would immediately set model#_isStickyToTheLimiter true and, given model#limiterBottomOffset, the panel\n\t\t\t\t// would be positioned before the model#limiterElement.\n\t\t\t\tthis._panelRect.height + this.limiterBottomOffset < limiterRect.height;\n\t\t}\n\n\t\t// Stick the panel to the top edge of the viewport simulating CSS position:sticky.\n\t\t// TODO: Possibly replaced by CSS in the future http://caniuse.com/#feat=css-sticky\n\t\tif ( this.isSticky ) {\n\t\t\tthis._isStickyToTheLimiter =\n\t\t\t\tlimiterRect.bottom < panelRect.height + this.limiterBottomOffset + this.viewportTopOffset;\n\t\t\tthis._hasViewportTopOffset = !this._isStickyToTheLimiter && !!this.viewportTopOffset;\n\t\t\tthis._marginLeft = this._isStickyToTheLimiter ? null : toPx( -global.window.scrollX );\n\t\t}\n\t\t// Detach the panel from the top edge of the viewport.\n\t\telse {\n\t\t\tthis._isStickyToTheLimiter = false;\n\t\t\tthis._hasViewportTopOffset = false;\n\t\t\tthis._marginLeft = null;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditoruiview\n */\n\nimport BoxedEditorUIView from '@ckeditor/ckeditor5-ui/src/editorui/boxed/boxededitoruiview';\nimport InlineEditableUIView from '@ckeditor/ckeditor5-ui/src/editableui/inline/inlineeditableuiview';\nimport StickyPanelView from '@ckeditor/ckeditor5-ui/src/panel/sticky/stickypanelview';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\n\nimport '../theme/classiceditor.css';\n\n/**\n * Classic editor UI view. Uses an inline editable and a sticky toolbar, all\n * enclosed in a boxed UI view.\n *\n * @extends module:ui/editorui/boxed/boxededitoruiview~BoxedEditorUIView\n */\nexport default class ClassicEditorUIView extends BoxedEditorUIView {\n\t/**\n\t * Creates an instance of the classic editor UI view.\n\t *\n\t * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param {module:engine/view/view~View} editingView The editing view instance this view is related to.\n\t */\n\tconstructor( locale, editingView ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Sticky panel view instance. This is a parent view of a {@link #toolbar}\n\t\t * that makes toolbar sticky.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/panel/sticky/stickypanelview~StickyPanelView}\n\t\t */\n\t\tthis.stickyPanel = new StickyPanelView( locale );\n\n\t\t/**\n\t\t * Toolbar view instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarView}\n\t\t */\n\t\tthis.toolbar = new ToolbarView( locale );\n\n\t\t/**\n\t\t * Editable UI view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView}\n\t\t */\n\t\tthis.editable = new InlineEditableUIView( locale, editingView );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Set toolbar as a child of a stickyPanel and makes toolbar sticky.\n\t\tthis.stickyPanel.content.add( this.toolbar );\n\n\t\tthis.top.add( this.stickyPanel );\n\t\tthis.main.add( this.editable );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditor\n */\n\nimport Editor from '@ckeditor/ckeditor5-core/src/editor/editor';\nimport DataApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin';\nimport ElementApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/elementapimixin';\nimport attachToForm from '@ckeditor/ckeditor5-core/src/editor/utils/attachtoform';\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\nimport ClassicEditorUI from './classiceditorui';\nimport ClassicEditorUIView from './classiceditoruiview';\nimport getDataFromElement from '@ckeditor/ckeditor5-utils/src/dom/getdatafromelement';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isElement } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The {@glink builds/guides/overview#classic-editor classic editor} implementation.\n * It uses an inline editable and a sticky toolbar, all enclosed in a boxed UI.\n * See the {@glink examples/builds/classic-editor demo}.\n *\n * In order to create a classic editor instance, use the static\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method.\n *\n * # Classic editor and classic build\n *\n * The classic editor can be used directly from source (if you installed the\n * [`@ckeditor/ckeditor5-editor-classic`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-classic) package)\n * but it is also available in the {@glink builds/guides/overview#classic-editor classic build}.\n *\n * {@glink builds/guides/overview Builds} are ready-to-use editors with plugins bundled in. When using the editor from\n * source you need to take care of loading all plugins by yourself\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\n * Using the editor from source gives much better flexibility and allows easier customization.\n *\n * Read more about initializing the editor from source or as a build in\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n *\n * @mixes module:core/editor/utils/dataapimixin~DataApiMixin\n * @mixes module:core/editor/utils/elementapimixin~ElementApiMixin\n * @implements module:core/editor/editorwithui~EditorWithUI\n * @extends module:core/editor/editor~Editor\n */\nexport default class ClassicEditor extends Editor {\n\t/**\n\t * Creates an instance of the classic editor.\n\t *\n\t * **Note:** do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method instead.\n\t *\n\t * @protected\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data. For more information see\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n\t * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n\t */\n\tconstructor( sourceElementOrData, config ) {\n\t\tsuper( config );\n\n\t\tif ( isElement( sourceElementOrData ) ) {\n\t\t\tthis.sourceElement = sourceElementOrData;\n\t\t}\n\n\t\tthis.data.processor = new HtmlDataProcessor();\n\n\t\tthis.model.document.createRoot();\n\n\t\tthis.ui = new ClassicEditorUI( this, new ClassicEditorUIView( this.locale, this.editing.view ) );\n\n\t\tattachToForm( this );\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * Updates the editor's source element with the data.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\tif ( this.sourceElement ) {\n\t\t\tthis.updateSourceElement();\n\t\t}\n\n\t\tthis.ui.destroy();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Creates a new classic editor instance.\n\t *\n\t * There are three ways how the editor can be initialized.\n\t *\n\t * # Replacing a DOM element (and loading data from it)\n\t *\n\t * You can initialize the editor using an existing DOM element:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ) )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * The element's content will be used as the editor data and the element will be replaced by the editor UI.\n\t *\n\t * # Creating a detached editor\n\t *\n\t * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n\t * In this case, the editor will render an element that must be inserted into the DOM:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( '<p>Hello world!</p>' )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t *\t\t\t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n\t *\t\t\t\tdocument.body.appendChild( editor.ui.element );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n\t * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n\t *\n\t * # Replacing a DOM element (and data provided in `config.initialData`)\n\t *\n\t * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ), {\n\t *\t\t\t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n\t * makes it difficult to set the content of the source element.\n\t *\n\t * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n\t *\n\t * # Configuring the editor\n\t *\n\t * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n\t * customizing plugins, toolbar and more.\n\t *\n\t * # Using the editor from source\n\t *\n\t * The code samples listed in the previous sections of this documentation assume that you are using an\n\t * {@glink builds/guides/overview editor build} (for example – `@ckeditor/ckeditor5-build-classic`).\n\t *\n\t * If you want to use the classic editor from source (`@ckeditor/ckeditor5-editor-classic/src/classiceditor`),\n\t * you need to define the list of\n\t * {@link module:core/editor/editorconfig~EditorConfig#plugins plugins to be initialized} and\n\t * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar items}. Read more about using the editor from\n\t * source in the {@glink builds/guides/integration/advanced-setup \"Advanced setup\" guide}.\n\t *\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data.\n\t *\n\t * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization\n\t * and the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element editor element} will replace the passed element\n\t * in the DOM (the original one will be hidden and the editor will be injected next to it).\n\t *\n\t * Moreover, the editor data will be set back to the original element once the editor is destroyed and when a form, in which\n\t * this element is contained, is submitted (if the original element is a `<textarea>`). This ensures seamless integration with native\n\t * web forms.\n\t *\n\t * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n\t * It is available under the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element `editor.ui.element`} property.\n\t *\n\t * @param {module:core/editor/editorconfig~EditorConfig} [config] The editor configuration.\n\t * @returns {Promise} A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n\t */\n\tstatic create( sourceElementOrData, config = {} ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst editor = new this( sourceElementOrData, config );\n\n\t\t\tresolve(\n\t\t\t\teditor.initPlugins()\n\t\t\t\t\t.then( () => editor.ui.init( isElement( sourceElementOrData ) ? sourceElementOrData : null ) )\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\tif ( !isElement( sourceElementOrData ) && config.initialData ) {\n\t\t\t\t\t\t\t// Documented in core/editor/editorconfig.jdoc.\n\t\t\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t\t\t'editor-create-initial-data: ' +\n\t\t\t\t\t\t\t\t'The config.initialData option cannot be used together with initial data passed in Editor.create().',\n\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst initialData = config.initialData || getInitialData( sourceElementOrData );\n\n\t\t\t\t\t\treturn editor.data.init( initialData );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => editor.fire( 'ready' ) )\n\t\t\t\t\t.then( () => editor )\n\t\t\t);\n\t\t} );\n\t}\n}\n\nmix( ClassicEditor, DataApiMixin );\nmix( ClassicEditor, ElementApiMixin );\n\nfunction getInitialData( sourceElementOrData ) {\n\treturn isElement( sourceElementOrData ) ? getDataFromElement( sourceElementOrData ) : sourceElementOrData;\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.cloneWith` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @param {Function} [customizer] The function to customize cloning.\n * @returns {*} Returns the deep cloned value.\n * @see _.cloneWith\n * @example\n *\n * function customizer(value) {\n *   if (_.isElement(value)) {\n *     return value.cloneNode(true);\n *   }\n * }\n *\n * var el = _.cloneDeepWith(document.body, customizer);\n *\n * console.log(el === document.body);\n * // => false\n * console.log(el.nodeName);\n * // => 'BODY'\n * console.log(el.childNodes.length);\n * // => 20\n */\nfunction cloneDeepWith(value, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n}\n\nexport default cloneDeepWith;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","/* eslint-disable */\nvar md5;\nexport default md5;\n\n(function () {\n  var HxOverrides = function () { }\n  HxOverrides.__name__ = true;\n  HxOverrides.dateStr = function (date) {\n    var m = date.getMonth() + 1;\n    var d = date.getDate();\n    var h = date.getHours();\n    var mi = date.getMinutes();\n    var s = date.getSeconds();\n    return date.getFullYear() + \"-\" + (m < 10 ? \"0\" + m : \"\" + m) + \"-\" + (d < 10 ? \"0\" + d : \"\" + d) + \" \" + (h < 10 ? \"0\" + h : \"\" + h) + \":\" + (mi < 10 ? \"0\" + mi : \"\" + mi) + \":\" + (s < 10 ? \"0\" + s : \"\" + s);\n  }\n  HxOverrides.strDate = function (s) {\n    switch (s.length) {\n      case 8:\n        var k = s.split(\":\");\n        var d = new Date();\n        d.setTime(0);\n        d.setUTCHours(k[0]);\n        d.setUTCMinutes(k[1]);\n        d.setUTCSeconds(k[2]);\n        return d;\n      case 10:\n        var k = s.split(\"-\");\n        return new Date(k[0], k[1] - 1, k[2], 0, 0, 0);\n      case 19:\n        var k = s.split(\" \");\n        var y = k[0].split(\"-\");\n        var t = k[1].split(\":\");\n        return new Date(y[0], y[1] - 1, y[2], t[0], t[1], t[2]);\n      default:\n        throw \"Invalid date format : \" + s;\n    }\n  }\n  HxOverrides.cca = function (s, index) {\n    var x = s.charCodeAt(index);\n    if (x != x) return undefined;\n    return x;\n  }\n  HxOverrides.substr = function (s, pos, len) {\n    if (pos != null && pos != 0 && len != null && len < 0) return \"\";\n    if (len == null) len = s.length;\n    if (pos < 0) {\n      pos = s.length + pos;\n      if (pos < 0) pos = 0;\n    } else if (len < 0) len = s.length + len - pos;\n    return s.substr(pos, len);\n  }\n  HxOverrides.remove = function (a, obj) {\n    var i = 0;\n    var l = a.length;\n    while (i < l) {\n      if (a[i] == obj) {\n        a.splice(i, 1);\n        return true;\n      }\n      i++;\n    }\n    return false;\n  }\n  HxOverrides.iter = function (a) {\n    return {\n      cur: 0, arr: a, hasNext: function () {\n        return this.cur < this.arr.length;\n      }, next: function () {\n        return this.arr[this.cur++];\n      }\n    };\n  }\n  var IntIter = function (min, max) {\n    this.min = min;\n    this.max = max;\n  };\n  IntIter.__name__ = true;\n  IntIter.prototype = {\n    next: function () {\n      return this.min++;\n    }\n    , hasNext: function () {\n      return this.min < this.max;\n    }\n    , __class__: IntIter\n  }\n  var Std = function () { }\n  Std.__name__ = true;\n  Std[\"is\"] = function (v, t) {\n    return js.Boot.__instanceof(v, t);\n  }\n  Std.string = function (s) {\n    return js.Boot.__string_rec(s, \"\");\n  }\n  Std[\"int\"] = function (x) {\n    return x | 0;\n  }\n  Std.parseInt = function (x) {\n    var v = parseInt(x, 10);\n    if (v == 0 && (HxOverrides.cca(x, 1) == 120 || HxOverrides.cca(x, 1) == 88)) v = parseInt(x);\n    if (isNaN(v)) return null;\n    return v;\n  }\n  Std.parseFloat = function (x) {\n    return parseFloat(x);\n  }\n  Std.random = function (x) {\n    return Math.floor(Math.random() * x);\n  }\n  var com = com || {}\n  if (!com.wiris) com.wiris = {}\n  if (!com.wiris.js) com.wiris.js = {}\n  com.wiris.js.JsPluginTools = function () {\n    this.tryReady();\n  };\n  com.wiris.js.JsPluginTools.__name__ = true;\n  com.wiris.js.JsPluginTools.main = function () {\n    var ev;\n    ev = com.wiris.js.JsPluginTools.getInstance();\n    haxe.Timer.delay($bind(ev, ev.tryReady), 100);\n  }\n  com.wiris.js.JsPluginTools.getInstance = function () {\n    if (com.wiris.js.JsPluginTools.instance == null) com.wiris.js.JsPluginTools.instance = new com.wiris.js.JsPluginTools();\n    return com.wiris.js.JsPluginTools.instance;\n  }\n  com.wiris.js.JsPluginTools.bypassEncapsulation = function () {\n    if (window.com == null) window.com = {};\n    if (window.com.wiris == null) window.com.wiris = {};\n    if (window.com.wiris.js == null) window.com.wiris.js = {};\n    if (window.com.wiris.js.JsPluginTools == null) window.com.wiris.js.JsPluginTools = com.wiris.js.JsPluginTools.getInstance();\n  }\n  com.wiris.js.JsPluginTools.prototype = {\n    md5encode: function (content) {\n      return haxe.Md5.encode(content);\n    }\n    , doLoad: function () {\n      this.ready = true;\n      com.wiris.js.JsPluginTools.instance = this;\n      com.wiris.js.JsPluginTools.bypassEncapsulation();\n    }\n    , tryReady: function () {\n      this.ready = false;\n      if (js.Lib.document.readyState) {\n        this.doLoad();\n        this.ready = true;\n      }\n      if (!this.ready) haxe.Timer.delay($bind(this, this.tryReady), 100);\n    }\n    , __class__: com.wiris.js.JsPluginTools\n  }\n  var haxe = haxe || {}\n  haxe.Log = function () { }\n  haxe.Log.__name__ = true;\n  haxe.Log.trace = function (v, infos) {\n    js.Boot.__trace(v, infos);\n  }\n  haxe.Log.clear = function () {\n    js.Boot.__clear_trace();\n  }\n  haxe.Md5 = function () {\n  };\n  haxe.Md5.__name__ = true;\n  haxe.Md5.encode = function (s) {\n    return new haxe.Md5().doEncode(s);\n  }\n  haxe.Md5.prototype = {\n    doEncode: function (str) {\n      var x = this.str2blks(str);\n      var a = 1732584193;\n      var b = -271733879;\n      var c = -1732584194;\n      var d = 271733878;\n      var step;\n      var i = 0;\n      while (i < x.length) {\n        var olda = a;\n        var oldb = b;\n        var oldc = c;\n        var oldd = d;\n        step = 0;\n        a = this.ff(a, b, c, d, x[i], 7, -680876936);\n        d = this.ff(d, a, b, c, x[i + 1], 12, -389564586);\n        c = this.ff(c, d, a, b, x[i + 2], 17, 606105819);\n        b = this.ff(b, c, d, a, x[i + 3], 22, -1044525330);\n        a = this.ff(a, b, c, d, x[i + 4], 7, -176418897);\n        d = this.ff(d, a, b, c, x[i + 5], 12, 1200080426);\n        c = this.ff(c, d, a, b, x[i + 6], 17, -1473231341);\n        b = this.ff(b, c, d, a, x[i + 7], 22, -45705983);\n        a = this.ff(a, b, c, d, x[i + 8], 7, 1770035416);\n        d = this.ff(d, a, b, c, x[i + 9], 12, -1958414417);\n        c = this.ff(c, d, a, b, x[i + 10], 17, -42063);\n        b = this.ff(b, c, d, a, x[i + 11], 22, -1990404162);\n        a = this.ff(a, b, c, d, x[i + 12], 7, 1804603682);\n        d = this.ff(d, a, b, c, x[i + 13], 12, -40341101);\n        c = this.ff(c, d, a, b, x[i + 14], 17, -1502002290);\n        b = this.ff(b, c, d, a, x[i + 15], 22, 1236535329);\n        a = this.gg(a, b, c, d, x[i + 1], 5, -165796510);\n        d = this.gg(d, a, b, c, x[i + 6], 9, -1069501632);\n        c = this.gg(c, d, a, b, x[i + 11], 14, 643717713);\n        b = this.gg(b, c, d, a, x[i], 20, -373897302);\n        a = this.gg(a, b, c, d, x[i + 5], 5, -701558691);\n        d = this.gg(d, a, b, c, x[i + 10], 9, 38016083);\n        c = this.gg(c, d, a, b, x[i + 15], 14, -660478335);\n        b = this.gg(b, c, d, a, x[i + 4], 20, -405537848);\n        a = this.gg(a, b, c, d, x[i + 9], 5, 568446438);\n        d = this.gg(d, a, b, c, x[i + 14], 9, -1019803690);\n        c = this.gg(c, d, a, b, x[i + 3], 14, -187363961);\n        b = this.gg(b, c, d, a, x[i + 8], 20, 1163531501);\n        a = this.gg(a, b, c, d, x[i + 13], 5, -1444681467);\n        d = this.gg(d, a, b, c, x[i + 2], 9, -51403784);\n        c = this.gg(c, d, a, b, x[i + 7], 14, 1735328473);\n        b = this.gg(b, c, d, a, x[i + 12], 20, -1926607734);\n        a = this.hh(a, b, c, d, x[i + 5], 4, -378558);\n        d = this.hh(d, a, b, c, x[i + 8], 11, -2022574463);\n        c = this.hh(c, d, a, b, x[i + 11], 16, 1839030562);\n        b = this.hh(b, c, d, a, x[i + 14], 23, -35309556);\n        a = this.hh(a, b, c, d, x[i + 1], 4, -1530992060);\n        d = this.hh(d, a, b, c, x[i + 4], 11, 1272893353);\n        c = this.hh(c, d, a, b, x[i + 7], 16, -155497632);\n        b = this.hh(b, c, d, a, x[i + 10], 23, -1094730640);\n        a = this.hh(a, b, c, d, x[i + 13], 4, 681279174);\n        d = this.hh(d, a, b, c, x[i], 11, -358537222);\n        c = this.hh(c, d, a, b, x[i + 3], 16, -722521979);\n        b = this.hh(b, c, d, a, x[i + 6], 23, 76029189);\n        a = this.hh(a, b, c, d, x[i + 9], 4, -640364487);\n        d = this.hh(d, a, b, c, x[i + 12], 11, -421815835);\n        c = this.hh(c, d, a, b, x[i + 15], 16, 530742520);\n        b = this.hh(b, c, d, a, x[i + 2], 23, -995338651);\n        a = this.ii(a, b, c, d, x[i], 6, -198630844);\n        d = this.ii(d, a, b, c, x[i + 7], 10, 1126891415);\n        c = this.ii(c, d, a, b, x[i + 14], 15, -1416354905);\n        b = this.ii(b, c, d, a, x[i + 5], 21, -57434055);\n        a = this.ii(a, b, c, d, x[i + 12], 6, 1700485571);\n        d = this.ii(d, a, b, c, x[i + 3], 10, -1894986606);\n        c = this.ii(c, d, a, b, x[i + 10], 15, -1051523);\n        b = this.ii(b, c, d, a, x[i + 1], 21, -2054922799);\n        a = this.ii(a, b, c, d, x[i + 8], 6, 1873313359);\n        d = this.ii(d, a, b, c, x[i + 15], 10, -30611744);\n        c = this.ii(c, d, a, b, x[i + 6], 15, -1560198380);\n        b = this.ii(b, c, d, a, x[i + 13], 21, 1309151649);\n        a = this.ii(a, b, c, d, x[i + 4], 6, -145523070);\n        d = this.ii(d, a, b, c, x[i + 11], 10, -1120210379);\n        c = this.ii(c, d, a, b, x[i + 2], 15, 718787259);\n        b = this.ii(b, c, d, a, x[i + 9], 21, -343485551);\n        a = this.addme(a, olda);\n        b = this.addme(b, oldb);\n        c = this.addme(c, oldc);\n        d = this.addme(d, oldd);\n        i += 16;\n      }\n      return this.rhex(a) + this.rhex(b) + this.rhex(c) + this.rhex(d);\n    }\n    , ii: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitXOR(c, this.bitOR(b, ~d)), a, b, x, s, t);\n    }\n    , hh: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitXOR(this.bitXOR(b, c), d), a, b, x, s, t);\n    }\n    , gg: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitOR(this.bitAND(b, d), this.bitAND(c, ~d)), a, b, x, s, t);\n    }\n    , ff: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitOR(this.bitAND(b, c), this.bitAND(~b, d)), a, b, x, s, t);\n    }\n    , cmn: function (q, a, b, x, s, t) {\n      return this.addme(this.rol(this.addme(this.addme(a, q), this.addme(x, t)), s), b);\n    }\n    , rol: function (num, cnt) {\n      return num << cnt | num >>> 32 - cnt;\n    }\n    , str2blks: function (str) {\n      var nblk = (str.length + 8 >> 6) + 1;\n      var blks = new Array();\n      var _g1 = 0, _g = nblk * 16;\n      while (_g1 < _g) {\n        var i = _g1++;\n        blks[i] = 0;\n      }\n      var i = 0;\n      while (i < str.length) {\n        blks[i >> 2] |= HxOverrides.cca(str, i) << (str.length * 8 + i) % 4 * 8;\n        i++;\n      }\n      blks[i >> 2] |= 128 << (str.length * 8 + i) % 4 * 8;\n      var l = str.length * 8;\n      var k = nblk * 16 - 2;\n      blks[k] = l & 255;\n      blks[k] |= (l >>> 8 & 255) << 8;\n      blks[k] |= (l >>> 16 & 255) << 16;\n      blks[k] |= (l >>> 24 & 255) << 24;\n      return blks;\n    }\n    , rhex: function (num) {\n      var str = \"\";\n      var hex_chr = \"0123456789abcdef\";\n      var _g = 0;\n      while (_g < 4) {\n        var j = _g++;\n        str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);\n      }\n      return str;\n    }\n    , addme: function (x, y) {\n      var lsw = (x & 65535) + (y & 65535);\n      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n      return msw << 16 | lsw & 65535;\n    }\n    , bitAND: function (a, b) {\n      var lsb = a & 1 & (b & 1);\n      var msb31 = a >>> 1 & b >>> 1;\n      return msb31 << 1 | lsb;\n    }\n    , bitXOR: function (a, b) {\n      var lsb = a & 1 ^ b & 1;\n      var msb31 = a >>> 1 ^ b >>> 1;\n      return msb31 << 1 | lsb;\n    }\n    , bitOR: function (a, b) {\n      var lsb = a & 1 | b & 1;\n      var msb31 = a >>> 1 | b >>> 1;\n      return msb31 << 1 | lsb;\n    }\n    , __class__: haxe.Md5\n  }\n  haxe.Timer = function (time_ms) {\n    var me = this;\n    this.id = window.setInterval(function () {\n      me.run();\n    }, time_ms);\n  };\n  haxe.Timer.__name__ = true;\n  haxe.Timer.delay = function (f, time_ms) {\n    var t = new haxe.Timer(time_ms);\n    t.run = function () {\n      t.stop();\n      f();\n    };\n    return t;\n  }\n  haxe.Timer.measure = function (f, pos) {\n    var t0 = haxe.Timer.stamp();\n    var r = f();\n    haxe.Log.trace(haxe.Timer.stamp() - t0 + \"s\", pos);\n    return r;\n  }\n  haxe.Timer.stamp = function () {\n    return new Date().getTime() / 1000;\n  }\n  haxe.Timer.prototype = {\n    run: function () {\n    }\n    , stop: function () {\n      if (this.id == null) return;\n      window.clearInterval(this.id);\n      this.id = null;\n    }\n    , __class__: haxe.Timer\n  }\n  var js = js || {}\n  js.Boot = function () { }\n  js.Boot.__name__ = true;\n  js.Boot.__unhtml = function (s) {\n    return s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n  }\n  js.Boot.__trace = function (v, i) {\n    var msg = i != null ? i.fileName + \":\" + i.lineNumber + \": \" : \"\";\n    msg += js.Boot.__string_rec(v, \"\");\n    var d;\n    if (typeof (document) != \"undefined\" && (d = document.getElementById(\"haxe:trace\")) != null) d.innerHTML += js.Boot.__unhtml(msg) + \"<br/>\"; else if (typeof (console) != \"undefined\" && console.log != null) console.log(msg);\n  }\n  js.Boot.__clear_trace = function () {\n    var d = document.getElementById(\"haxe:trace\");\n    if (d != null) d.innerHTML = \"\";\n  }\n  js.Boot.isClass = function (o) {\n    return o.__name__;\n  }\n  js.Boot.isEnum = function (e) {\n    return e.__ename__;\n  }\n  js.Boot.getClass = function (o) {\n    return o.__class__;\n  }\n  js.Boot.__string_rec = function (o, s) {\n    if (o == null) return \"null\";\n    if (s.length >= 5) return \"<...>\";\n    var t = typeof (o);\n    if (t == \"function\" && (o.__name__ || o.__ename__)) t = \"object\";\n    switch (t) {\n      case \"object\":\n        if (o instanceof Array) {\n          if (o.__enum__) {\n            if (o.length == 2) return o[0];\n            var str = o[0] + \"(\";\n            s += \"\\t\";\n            var _g1 = 2, _g = o.length;\n            while (_g1 < _g) {\n              var i = _g1++;\n              if (i != 2) str += \",\" + js.Boot.__string_rec(o[i], s); else str += js.Boot.__string_rec(o[i], s);\n            }\n            return str + \")\";\n          }\n          var l = o.length;\n          var i;\n          var str = \"[\";\n          s += \"\\t\";\n          var _g = 0;\n          while (_g < l) {\n            var i1 = _g++;\n            str += (i1 > 0 ? \",\" : \"\") + js.Boot.__string_rec(o[i1], s);\n          }\n          str += \"]\";\n          return str;\n        }\n        var tostr;\n        try {\n          tostr = o.toString;\n        } catch (e) {\n          return \"???\";\n        }\n        if (tostr != null && tostr != Object.toString) {\n          var s2 = o.toString();\n          if (s2 != \"[object Object]\") return s2;\n        }\n        var k = null;\n        var str = \"{\\n\";\n        s += \"\\t\";\n        var hasp = o.hasOwnProperty != null;\n        for (var k in o) {\n          ;\n          if (hasp && !o.hasOwnProperty(k)) {\n            continue;\n          }\n          if (k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\") {\n            continue;\n          }\n          if (str.length != 2) str += \", \\n\";\n          str += s + k + \" : \" + js.Boot.__string_rec(o[k], s);\n        }\n        s = s.substring(1);\n        str += \"\\n\" + s + \"}\";\n        return str;\n      case \"function\":\n        return \"<function>\";\n      case \"string\":\n        return o;\n      default:\n        return String(o);\n    }\n  }\n  js.Boot.__interfLoop = function (cc, cl) {\n    if (cc == null) return false;\n    if (cc == cl) return true;\n    var intf = cc.__interfaces__;\n    if (intf != null) {\n      var _g1 = 0, _g = intf.length;\n      while (_g1 < _g) {\n        var i = _g1++;\n        var i1 = intf[i];\n        if (i1 == cl || js.Boot.__interfLoop(i1, cl)) return true;\n      }\n    }\n    return js.Boot.__interfLoop(cc.__super__, cl);\n  }\n  js.Boot.__instanceof = function (o, cl) {\n    try {\n      if (o instanceof cl) {\n        if (cl == Array) return o.__enum__ == null;\n        return true;\n      }\n      if (js.Boot.__interfLoop(o.__class__, cl)) return true;\n    } catch (e) {\n      if (cl == null) return false;\n    }\n    switch (cl) {\n      case Int:\n        return Math.ceil(o % 2147483648.0) === o;\n      case Float:\n        return typeof (o) == \"number\";\n      case Bool:\n        return o === true || o === false;\n      case String:\n        return typeof (o) == \"string\";\n      case Dynamic:\n        return true;\n      default:\n        if (o == null) return false;\n        if (cl == Class && o.__name__ != null) return true; else null;\n        if (cl == Enum && o.__ename__ != null) return true; else null;\n        return o.__enum__ == cl;\n    }\n  }\n  js.Boot.__cast = function (o, t) {\n    if (js.Boot.__instanceof(o, t)) return o; else throw \"Cannot cast \" + Std.string(o) + \" to \" + Std.string(t);\n  }\n  js.Lib = function () { }\n  js.Lib.__name__ = true;\n  js.Lib.debug = function () {\n    debugger;\n  }\n  js.Lib.alert = function (v) {\n    alert(js.Boot.__string_rec(v, \"\"));\n  }\n  js.Lib.eval = function (code) {\n    return eval(code);\n  }\n  js.Lib.setErrorHandler = function (f) {\n    js.Lib.onerror = f;\n  }\n  var $_;\n  function $bind(o, m) { var f = function () { return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; return f; };\n  if (Array.prototype.indexOf) HxOverrides.remove = function (a, o) {\n    var i = a.indexOf(o);\n    if (i == -1) return false;\n    a.splice(i, 1);\n    return true;\n  }; else null;\n  Math.__name__ = [\"Math\"];\n  Math.NaN = Number.NaN;\n  Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;\n  Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;\n  Math.isFinite = function (i) {\n    return isFinite(i);\n  };\n  Math.isNaN = function (i) {\n    return isNaN(i);\n  };\n  String.prototype.__class__ = String;\n  String.__name__ = true;\n  Array.prototype.__class__ = Array;\n  Array.__name__ = true;\n  Date.prototype.__class__ = Date;\n  Date.__name__ = [\"Date\"];\n  var Int = { __name__: [\"Int\"] };\n  var Dynamic = { __name__: [\"Dynamic\"] };\n  var Float = Number;\n  Float.__name__ = [\"Float\"];\n  var Bool = Boolean;\n  Bool.__ename__ = [\"Bool\"];\n  var Class = { __name__: [\"Class\"] };\n  var Enum = {};\n  var Void = { __ename__: [\"Void\"] };\n  if (typeof document != \"undefined\") js.Lib.document = document;\n  if (typeof window != \"undefined\") {\n    js.Lib.window = window;\n    js.Lib.window.onerror = function (msg, url, line) {\n      var f = js.Lib.onerror;\n      if (f == null) return false;\n      return f(msg, [url + \":\" + line]);\n    };\n  }\n  com.wiris.js.JsPluginTools.main();\n  delete Array.prototype.__class__;\n}());\n\n\n(function () {\n  var HxOverrides = function () { }\n  HxOverrides.__name__ = true;\n  HxOverrides.dateStr = function (date) {\n    var m = date.getMonth() + 1;\n    var d = date.getDate();\n    var h = date.getHours();\n    var mi = date.getMinutes();\n    var s = date.getSeconds();\n    return date.getFullYear() + \"-\" + (m < 10 ? \"0\" + m : \"\" + m) + \"-\" + (d < 10 ? \"0\" + d : \"\" + d) + \" \" + (h < 10 ? \"0\" + h : \"\" + h) + \":\" + (mi < 10 ? \"0\" + mi : \"\" + mi) + \":\" + (s < 10 ? \"0\" + s : \"\" + s);\n  }\n  HxOverrides.strDate = function (s) {\n    switch (s.length) {\n      case 8:\n        var k = s.split(\":\");\n        var d = new Date();\n        d.setTime(0);\n        d.setUTCHours(k[0]);\n        d.setUTCMinutes(k[1]);\n        d.setUTCSeconds(k[2]);\n        return d;\n      case 10:\n        var k = s.split(\"-\");\n        return new Date(k[0], k[1] - 1, k[2], 0, 0, 0);\n      case 19:\n        var k = s.split(\" \");\n        var y = k[0].split(\"-\");\n        var t = k[1].split(\":\");\n        return new Date(y[0], y[1] - 1, y[2], t[0], t[1], t[2]);\n      default:\n        throw \"Invalid date format : \" + s;\n    }\n  }\n  HxOverrides.cca = function (s, index) {\n    var x = s.charCodeAt(index);\n    if (x != x) return undefined;\n    return x;\n  }\n  HxOverrides.substr = function (s, pos, len) {\n    if (pos != null && pos != 0 && len != null && len < 0) return \"\";\n    if (len == null) len = s.length;\n    if (pos < 0) {\n      pos = s.length + pos;\n      if (pos < 0) pos = 0;\n    } else if (len < 0) len = s.length + len - pos;\n    return s.substr(pos, len);\n  }\n  HxOverrides.remove = function (a, obj) {\n    var i = 0;\n    var l = a.length;\n    while (i < l) {\n      if (a[i] == obj) {\n        a.splice(i, 1);\n        return true;\n      }\n      i++;\n    }\n    return false;\n  }\n  HxOverrides.iter = function (a) {\n    return {\n      cur: 0, arr: a, hasNext: function () {\n        return this.cur < this.arr.length;\n      }, next: function () {\n        return this.arr[this.cur++];\n      }\n    };\n  }\n  var IntIter = function (min, max) {\n    this.min = min;\n    this.max = max;\n  };\n  IntIter.__name__ = true;\n  IntIter.prototype = {\n    next: function () {\n      return this.min++;\n    }\n    , hasNext: function () {\n      return this.min < this.max;\n    }\n    , __class__: IntIter\n  }\n  var Std = function () { }\n  Std.__name__ = true;\n  Std[\"is\"] = function (v, t) {\n    return js.Boot.__instanceof(v, t);\n  }\n  Std.string = function (s) {\n    return js.Boot.__string_rec(s, \"\");\n  }\n  Std[\"int\"] = function (x) {\n    return x | 0;\n  }\n  Std.parseInt = function (x) {\n    var v = parseInt(x, 10);\n    if (v == 0 && (HxOverrides.cca(x, 1) == 120 || HxOverrides.cca(x, 1) == 88)) v = parseInt(x);\n    if (isNaN(v)) return null;\n    return v;\n  }\n  Std.parseFloat = function (x) {\n    return parseFloat(x);\n  }\n  Std.random = function (x) {\n    return Math.floor(Math.random() * x);\n  }\n  var com = com || {}\n  if (!com.wiris) com.wiris = {}\n  if (!com.wiris.js) com.wiris.js = {}\n  com.wiris.js.JsPluginTools = function () {\n    this.tryReady();\n  };\n  com.wiris.js.JsPluginTools.__name__ = true;\n  com.wiris.js.JsPluginTools.main = function () {\n    var ev;\n    ev = com.wiris.js.JsPluginTools.getInstance();\n    haxe.Timer.delay($bind(ev, ev.tryReady), 100);\n  }\n  com.wiris.js.JsPluginTools.getInstance = function () {\n    if (com.wiris.js.JsPluginTools.instance == null) com.wiris.js.JsPluginTools.instance = new com.wiris.js.JsPluginTools();\n    return com.wiris.js.JsPluginTools.instance;\n  }\n  com.wiris.js.JsPluginTools.bypassEncapsulation = function () {\n    if (window.com == null) window.com = {};\n    if (window.com.wiris == null) window.com.wiris = {};\n    if (window.com.wiris.js == null) window.com.wiris.js = {};\n    if (window.com.wiris.js.JsPluginTools == null) window.com.wiris.js.JsPluginTools = com.wiris.js.JsPluginTools.getInstance();\n  }\n  com.wiris.js.JsPluginTools.prototype = {\n    md5encode: function (content) {\n      return haxe.Md5.encode(content);\n    }\n    , doLoad: function () {\n      this.ready = true;\n      com.wiris.js.JsPluginTools.instance = this;\n      com.wiris.js.JsPluginTools.bypassEncapsulation();\n    }\n    , tryReady: function () {\n      this.ready = false;\n      if (js.Lib.document.readyState) {\n        this.doLoad();\n        this.ready = true;\n      }\n      if (!this.ready) haxe.Timer.delay($bind(this, this.tryReady), 100);\n    }\n    , __class__: com.wiris.js.JsPluginTools\n  }\n  var haxe = haxe || {}\n  haxe.Log = function () { }\n  haxe.Log.__name__ = true;\n  haxe.Log.trace = function (v, infos) {\n    js.Boot.__trace(v, infos);\n  }\n  haxe.Log.clear = function () {\n    js.Boot.__clear_trace();\n  }\n  haxe.Md5 = function () {\n  };\n  haxe.Md5.__name__ = true;\n  haxe.Md5.encode = function (s) {\n    return new haxe.Md5().doEncode(s);\n  }\n  haxe.Md5.prototype = {\n    doEncode: function (str) {\n      var x = this.str2blks(str);\n      var a = 1732584193;\n      var b = -271733879;\n      var c = -1732584194;\n      var d = 271733878;\n      var step;\n      var i = 0;\n      while (i < x.length) {\n        var olda = a;\n        var oldb = b;\n        var oldc = c;\n        var oldd = d;\n        step = 0;\n        a = this.ff(a, b, c, d, x[i], 7, -680876936);\n        d = this.ff(d, a, b, c, x[i + 1], 12, -389564586);\n        c = this.ff(c, d, a, b, x[i + 2], 17, 606105819);\n        b = this.ff(b, c, d, a, x[i + 3], 22, -1044525330);\n        a = this.ff(a, b, c, d, x[i + 4], 7, -176418897);\n        d = this.ff(d, a, b, c, x[i + 5], 12, 1200080426);\n        c = this.ff(c, d, a, b, x[i + 6], 17, -1473231341);\n        b = this.ff(b, c, d, a, x[i + 7], 22, -45705983);\n        a = this.ff(a, b, c, d, x[i + 8], 7, 1770035416);\n        d = this.ff(d, a, b, c, x[i + 9], 12, -1958414417);\n        c = this.ff(c, d, a, b, x[i + 10], 17, -42063);\n        b = this.ff(b, c, d, a, x[i + 11], 22, -1990404162);\n        a = this.ff(a, b, c, d, x[i + 12], 7, 1804603682);\n        d = this.ff(d, a, b, c, x[i + 13], 12, -40341101);\n        c = this.ff(c, d, a, b, x[i + 14], 17, -1502002290);\n        b = this.ff(b, c, d, a, x[i + 15], 22, 1236535329);\n        a = this.gg(a, b, c, d, x[i + 1], 5, -165796510);\n        d = this.gg(d, a, b, c, x[i + 6], 9, -1069501632);\n        c = this.gg(c, d, a, b, x[i + 11], 14, 643717713);\n        b = this.gg(b, c, d, a, x[i], 20, -373897302);\n        a = this.gg(a, b, c, d, x[i + 5], 5, -701558691);\n        d = this.gg(d, a, b, c, x[i + 10], 9, 38016083);\n        c = this.gg(c, d, a, b, x[i + 15], 14, -660478335);\n        b = this.gg(b, c, d, a, x[i + 4], 20, -405537848);\n        a = this.gg(a, b, c, d, x[i + 9], 5, 568446438);\n        d = this.gg(d, a, b, c, x[i + 14], 9, -1019803690);\n        c = this.gg(c, d, a, b, x[i + 3], 14, -187363961);\n        b = this.gg(b, c, d, a, x[i + 8], 20, 1163531501);\n        a = this.gg(a, b, c, d, x[i + 13], 5, -1444681467);\n        d = this.gg(d, a, b, c, x[i + 2], 9, -51403784);\n        c = this.gg(c, d, a, b, x[i + 7], 14, 1735328473);\n        b = this.gg(b, c, d, a, x[i + 12], 20, -1926607734);\n        a = this.hh(a, b, c, d, x[i + 5], 4, -378558);\n        d = this.hh(d, a, b, c, x[i + 8], 11, -2022574463);\n        c = this.hh(c, d, a, b, x[i + 11], 16, 1839030562);\n        b = this.hh(b, c, d, a, x[i + 14], 23, -35309556);\n        a = this.hh(a, b, c, d, x[i + 1], 4, -1530992060);\n        d = this.hh(d, a, b, c, x[i + 4], 11, 1272893353);\n        c = this.hh(c, d, a, b, x[i + 7], 16, -155497632);\n        b = this.hh(b, c, d, a, x[i + 10], 23, -1094730640);\n        a = this.hh(a, b, c, d, x[i + 13], 4, 681279174);\n        d = this.hh(d, a, b, c, x[i], 11, -358537222);\n        c = this.hh(c, d, a, b, x[i + 3], 16, -722521979);\n        b = this.hh(b, c, d, a, x[i + 6], 23, 76029189);\n        a = this.hh(a, b, c, d, x[i + 9], 4, -640364487);\n        d = this.hh(d, a, b, c, x[i + 12], 11, -421815835);\n        c = this.hh(c, d, a, b, x[i + 15], 16, 530742520);\n        b = this.hh(b, c, d, a, x[i + 2], 23, -995338651);\n        a = this.ii(a, b, c, d, x[i], 6, -198630844);\n        d = this.ii(d, a, b, c, x[i + 7], 10, 1126891415);\n        c = this.ii(c, d, a, b, x[i + 14], 15, -1416354905);\n        b = this.ii(b, c, d, a, x[i + 5], 21, -57434055);\n        a = this.ii(a, b, c, d, x[i + 12], 6, 1700485571);\n        d = this.ii(d, a, b, c, x[i + 3], 10, -1894986606);\n        c = this.ii(c, d, a, b, x[i + 10], 15, -1051523);\n        b = this.ii(b, c, d, a, x[i + 1], 21, -2054922799);\n        a = this.ii(a, b, c, d, x[i + 8], 6, 1873313359);\n        d = this.ii(d, a, b, c, x[i + 15], 10, -30611744);\n        c = this.ii(c, d, a, b, x[i + 6], 15, -1560198380);\n        b = this.ii(b, c, d, a, x[i + 13], 21, 1309151649);\n        a = this.ii(a, b, c, d, x[i + 4], 6, -145523070);\n        d = this.ii(d, a, b, c, x[i + 11], 10, -1120210379);\n        c = this.ii(c, d, a, b, x[i + 2], 15, 718787259);\n        b = this.ii(b, c, d, a, x[i + 9], 21, -343485551);\n        a = this.addme(a, olda);\n        b = this.addme(b, oldb);\n        c = this.addme(c, oldc);\n        d = this.addme(d, oldd);\n        i += 16;\n      }\n      return this.rhex(a) + this.rhex(b) + this.rhex(c) + this.rhex(d);\n    }\n    , ii: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitXOR(c, this.bitOR(b, ~d)), a, b, x, s, t);\n    }\n    , hh: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitXOR(this.bitXOR(b, c), d), a, b, x, s, t);\n    }\n    , gg: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitOR(this.bitAND(b, d), this.bitAND(c, ~d)), a, b, x, s, t);\n    }\n    , ff: function (a, b, c, d, x, s, t) {\n      return this.cmn(this.bitOR(this.bitAND(b, c), this.bitAND(~b, d)), a, b, x, s, t);\n    }\n    , cmn: function (q, a, b, x, s, t) {\n      return this.addme(this.rol(this.addme(this.addme(a, q), this.addme(x, t)), s), b);\n    }\n    , rol: function (num, cnt) {\n      return num << cnt | num >>> 32 - cnt;\n    }\n    , str2blks: function (str) {\n      var nblk = (str.length + 8 >> 6) + 1;\n      var blks = new Array();\n      var _g1 = 0, _g = nblk * 16;\n      while (_g1 < _g) {\n        var i = _g1++;\n        blks[i] = 0;\n      }\n      var i = 0;\n      while (i < str.length) {\n        blks[i >> 2] |= HxOverrides.cca(str, i) << (str.length * 8 + i) % 4 * 8;\n        i++;\n      }\n      blks[i >> 2] |= 128 << (str.length * 8 + i) % 4 * 8;\n      var l = str.length * 8;\n      var k = nblk * 16 - 2;\n      blks[k] = l & 255;\n      blks[k] |= (l >>> 8 & 255) << 8;\n      blks[k] |= (l >>> 16 & 255) << 16;\n      blks[k] |= (l >>> 24 & 255) << 24;\n      return blks;\n    }\n    , rhex: function (num) {\n      var str = \"\";\n      var hex_chr = \"0123456789abcdef\";\n      var _g = 0;\n      while (_g < 4) {\n        var j = _g++;\n        str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);\n      }\n      return str;\n    }\n    , addme: function (x, y) {\n      var lsw = (x & 65535) + (y & 65535);\n      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n      return msw << 16 | lsw & 65535;\n    }\n    , bitAND: function (a, b) {\n      var lsb = a & 1 & (b & 1);\n      var msb31 = a >>> 1 & b >>> 1;\n      return msb31 << 1 | lsb;\n    }\n    , bitXOR: function (a, b) {\n      var lsb = a & 1 ^ b & 1;\n      var msb31 = a >>> 1 ^ b >>> 1;\n      return msb31 << 1 | lsb;\n    }\n    , bitOR: function (a, b) {\n      var lsb = a & 1 | b & 1;\n      var msb31 = a >>> 1 | b >>> 1;\n      return msb31 << 1 | lsb;\n    }\n    , __class__: haxe.Md5\n  }\n  haxe.Timer = function (time_ms) {\n    var me = this;\n    this.id = window.setInterval(function () {\n      me.run();\n    }, time_ms);\n  };\n  haxe.Timer.__name__ = true;\n  haxe.Timer.delay = function (f, time_ms) {\n    var t = new haxe.Timer(time_ms);\n    t.run = function () {\n      t.stop();\n      f();\n    };\n    return t;\n  }\n  haxe.Timer.measure = function (f, pos) {\n    var t0 = haxe.Timer.stamp();\n    var r = f();\n    haxe.Log.trace(haxe.Timer.stamp() - t0 + \"s\", pos);\n    return r;\n  }\n  haxe.Timer.stamp = function () {\n    return new Date().getTime() / 1000;\n  }\n  haxe.Timer.prototype = {\n    run: function () {\n    }\n    , stop: function () {\n      if (this.id == null) return;\n      window.clearInterval(this.id);\n      this.id = null;\n    }\n    , __class__: haxe.Timer\n  }\n  var js = js || {}\n  js.Boot = function () { }\n  js.Boot.__name__ = true;\n  js.Boot.__unhtml = function (s) {\n    return s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n  }\n  js.Boot.__trace = function (v, i) {\n    var msg = i != null ? i.fileName + \":\" + i.lineNumber + \": \" : \"\";\n    msg += js.Boot.__string_rec(v, \"\");\n    var d;\n    if (typeof (document) != \"undefined\" && (d = document.getElementById(\"haxe:trace\")) != null) d.innerHTML += js.Boot.__unhtml(msg) + \"<br/>\"; else if (typeof (console) != \"undefined\" && console.log != null) console.log(msg);\n  }\n  js.Boot.__clear_trace = function () {\n    var d = document.getElementById(\"haxe:trace\");\n    if (d != null) d.innerHTML = \"\";\n  }\n  js.Boot.isClass = function (o) {\n    return o.__name__;\n  }\n  js.Boot.isEnum = function (e) {\n    return e.__ename__;\n  }\n  js.Boot.getClass = function (o) {\n    return o.__class__;\n  }\n  js.Boot.__string_rec = function (o, s) {\n    if (o == null) return \"null\";\n    if (s.length >= 5) return \"<...>\";\n    var t = typeof (o);\n    if (t == \"function\" && (o.__name__ || o.__ename__)) t = \"object\";\n    switch (t) {\n      case \"object\":\n        if (o instanceof Array) {\n          if (o.__enum__) {\n            if (o.length == 2) return o[0];\n            var str = o[0] + \"(\";\n            s += \"\\t\";\n            var _g1 = 2, _g = o.length;\n            while (_g1 < _g) {\n              var i = _g1++;\n              if (i != 2) str += \",\" + js.Boot.__string_rec(o[i], s); else str += js.Boot.__string_rec(o[i], s);\n            }\n            return str + \")\";\n          }\n          var l = o.length;\n          var i;\n          var str = \"[\";\n          s += \"\\t\";\n          var _g = 0;\n          while (_g < l) {\n            var i1 = _g++;\n            str += (i1 > 0 ? \",\" : \"\") + js.Boot.__string_rec(o[i1], s);\n          }\n          str += \"]\";\n          return str;\n        }\n        var tostr;\n        try {\n          tostr = o.toString;\n        } catch (e) {\n          return \"???\";\n        }\n        if (tostr != null && tostr != Object.toString) {\n          var s2 = o.toString();\n          if (s2 != \"[object Object]\") return s2;\n        }\n        var k = null;\n        var str = \"{\\n\";\n        s += \"\\t\";\n        var hasp = o.hasOwnProperty != null;\n        for (var k in o) {\n          ;\n          if (hasp && !o.hasOwnProperty(k)) {\n            continue;\n          }\n          if (k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\") {\n            continue;\n          }\n          if (str.length != 2) str += \", \\n\";\n          str += s + k + \" : \" + js.Boot.__string_rec(o[k], s);\n        }\n        s = s.substring(1);\n        str += \"\\n\" + s + \"}\";\n        return str;\n      case \"function\":\n        return \"<function>\";\n      case \"string\":\n        return o;\n      default:\n        return String(o);\n    }\n  }\n  js.Boot.__interfLoop = function (cc, cl) {\n    if (cc == null) return false;\n    if (cc == cl) return true;\n    var intf = cc.__interfaces__;\n    if (intf != null) {\n      var _g1 = 0, _g = intf.length;\n      while (_g1 < _g) {\n        var i = _g1++;\n        var i1 = intf[i];\n        if (i1 == cl || js.Boot.__interfLoop(i1, cl)) return true;\n      }\n    }\n    return js.Boot.__interfLoop(cc.__super__, cl);\n  }\n  js.Boot.__instanceof = function (o, cl) {\n    try {\n      if (o instanceof cl) {\n        if (cl == Array) return o.__enum__ == null;\n        return true;\n      }\n      if (js.Boot.__interfLoop(o.__class__, cl)) return true;\n    } catch (e) {\n      if (cl == null) return false;\n    }\n    switch (cl) {\n      case Int:\n        return Math.ceil(o % 2147483648.0) === o;\n      case Float:\n        return typeof (o) == \"number\";\n      case Bool:\n        return o === true || o === false;\n      case String:\n        return typeof (o) == \"string\";\n      case Dynamic:\n        return true;\n      default:\n        if (o == null) return false;\n        if (cl == Class && o.__name__ != null) return true; else null;\n        if (cl == Enum && o.__ename__ != null) return true; else null;\n        return o.__enum__ == cl;\n    }\n  }\n  js.Boot.__cast = function (o, t) {\n    if (js.Boot.__instanceof(o, t)) return o; else throw \"Cannot cast \" + Std.string(o) + \" to \" + Std.string(t);\n  }\n  js.Lib = function () { }\n  js.Lib.__name__ = true;\n  js.Lib.debug = function () {\n    debugger;\n  }\n  js.Lib.alert = function (v) {\n    alert(js.Boot.__string_rec(v, \"\"));\n  }\n  js.Lib.eval = function (code) {\n    return eval(code);\n  }\n  js.Lib.setErrorHandler = function (f) {\n    js.Lib.onerror = f;\n  }\n  var $_;\n  function $bind(o, m) { var f = function () { return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; return f; };\n  if (Array.prototype.indexOf) HxOverrides.remove = function (a, o) {\n    var i = a.indexOf(o);\n    if (i == -1) return false;\n    a.splice(i, 1);\n    return true;\n  }; else null;\n  Math.__name__ = [\"Math\"];\n  Math.NaN = Number.NaN;\n  Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;\n  Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;\n  Math.isFinite = function (i) {\n    return isFinite(i);\n  };\n  Math.isNaN = function (i) {\n    return isNaN(i);\n  };\n  String.prototype.__class__ = String;\n  String.__name__ = true;\n  Array.prototype.__class__ = Array;\n  Array.__name__ = true;\n  Date.prototype.__class__ = Date;\n  Date.__name__ = [\"Date\"];\n  var Int = { __name__: [\"Int\"] };\n  var Dynamic = { __name__: [\"Dynamic\"] };\n  var Float = Number;\n  Float.__name__ = [\"Float\"];\n  var Bool = Boolean;\n  Bool.__ename__ = [\"Bool\"];\n  var Class = { __name__: [\"Class\"] };\n  var Enum = {};\n  var Void = { __ename__: [\"Void\"] };\n  if (typeof document != \"undefined\") js.Lib.document = document;\n  if (typeof window != \"undefined\") {\n    js.Lib.window = window;\n    js.Lib.window.onerror = function (msg, url, line) {\n      var f = js.Lib.onerror;\n      if (f == null) return false;\n      return f(msg, [url + \":\" + line]);\n    };\n  }\n  com.wiris.js.JsPluginTools.main();\n}());\ndelete Array.prototype.__class__;\n// @codingStandardsIgnoreEnd\n","/**\n * This class represents all the constants needed in a MathType integration among different classes.\n * If a constant should be used across different classes should be defined using attribute\n * accessors.\n */\nexport default class Constants {\n  /**\n   * Safe XML entities.\n   * @type {Object}\n   */\n  static get safeXmlCharactersEntities() {\n    return {\n      tagOpener: '&laquo;',\n      tagCloser: '&raquo;',\n      doubleQuote: '&uml;',\n      realDoubleQuote: '&quot;',\n    };\n  }\n\n  /**\n   * Blackboard invalid safe characters.\n   * @type {Object}\n   */\n  static get safeBadBlackboardCharacters() {\n    return {\n      ltElement: '«mo»<«/mo»',\n      gtElement: '«mo»>«/mo»',\n      ampElement: '«mo»&«/mo»',\n    };\n  }\n\n  /**\n   * Blackboard valid safe characters.\n   * @type{Object}\n   */\n  static get safeGoodBlackboardCharacters() {\n    return {\n      ltElement: '«mo»§lt;«/mo»',\n      gtElement: '«mo»§gt;«/mo»',\n      ampElement: '«mo»§amp;«/mo»',\n    };\n  }\n\n  /**\n   * Standard XML special characters.\n   * @type {Object}\n   */\n  static get xmlCharacters() {\n    return {\n      id: 'xmlCharacters',\n      tagOpener: '<', // Hex: \\x3C.\n      tagCloser: '>', // Hex: \\x3E.\n      doubleQuote: '\"', // Hex: \\x22.\n      ampersand: '&', // Hex: \\x26.\n      quote: '\\'', // Hex: \\x27.\n    };\n  }\n\n  /**\n  * Safe XML special characters. This characters are used instead the standard\n  * the standard to parse the  MathML if safeXML save mode is enable. Each XML\n  * special character have a UTF-8 representation.\n  * @type {Object}\n  */\n  static get safeXmlCharacters() {\n    return {\n      id: 'safeXmlCharacters',\n      tagOpener: '«', // Hex: \\xAB.\n      tagCloser: '»', // Hex: \\xBB.\n      doubleQuote: '¨', // Hex: \\xA8.\n      ampersand: '§', // Hex: \\xA7.\n      quote: '`', // Hex: \\x60.\n      realDoubleQuote: '¨',\n    };\n  }\n}\n","import Constants from './constants';\nimport Util from './util';\n\n/**\n * @classdesc\n * This class represents a class to manage MathML objects.\n */\nexport default class MathML {\n  /**\n   * Checks if the mathml at position i is inside an HTML attribute or not.\n   * @param {string} content - a string containing MathML code.\n   * @param {number} i -  search index.\n   * @return {boolean} true if is inside an HTML attribute. false otherwise.\n   */\n  static isMathmlInAttribute(content, i) {\n    // Regex =\n    // '^[\\'\"][\\\\s]*=[\\\\s]*[\\\\w-]+([\\\\s]*(\"[^\"]*\"|\\'[^\\']*\\')[\\\\s]*\n    // =[\\\\s]*[\\\\w-]+[\\\\s]*)*[\\\\s]+gmi<';\n    const mathAtt = '[\\'\"][\\\\s]*=[\\\\s]*[\\\\w-]+'; // \"=att OR '=att\n    const attContent = '\"[^\"]*\"|\\'[^\\']*\\''; // \"blabla\" OR 'blabla'\n    const att = `[\\\\s]*(${attContent})[\\\\s]*=[\\\\s]*[\\\\w-]+[\\\\s]*`; // \"blabla\"=att OR 'blabla'=att\n    const atts = `('${att}')*`; // \"blabla\"=att1 \"blabla\"=att2\n    const regex = `^${mathAtt}${atts}[\\\\s]+gmi<`; // \"=att \"blabla\"=att1 \"blabla\"=att2 gmi< .\n    const expression = new RegExp(regex);\n\n    const actualContent = content.substring(0, i);\n    const reversed = actualContent.split('').reverse().join('');\n    const exists = expression.test(reversed);\n\n    return exists;\n  }\n\n  /**\n   * Decodes an encoded MathML with standard XML tags.\n   * We use these entities because IE doesn't support html entities\n   * on its attributes sometimes. Yes, sometimes.\n   * @param {string} input - string to be decoded.\n   * @return {string} decoded string.\n   */\n  static safeXmlDecode(input) {\n    let { tagOpener } = Constants.safeXmlCharactersEntities;\n    let { tagCloser } = Constants.safeXmlCharactersEntities;\n    let { doubleQuote } = Constants.safeXmlCharactersEntities;\n    let { realDoubleQuote } = Constants.safeXmlCharactersEntities;\n    // Decoding entities.\n    input = input.split(tagOpener).join(Constants.safeXmlCharacters.tagOpener);\n    input = input.split(tagCloser).join(Constants.safeXmlCharacters.tagCloser);\n    input = input.split(doubleQuote).join(Constants.safeXmlCharacters.doubleQuote);\n    // Added to fix problem due to import from 1.9.x.\n    input = input.split(realDoubleQuote).join(Constants.safeXmlCharacters.realDoubleQuote);\n\n    // Blackboard.\n    const { ltElement } = Constants.safeBadBlackboardCharacters;\n    const { gtElement } = Constants.safeBadBlackboardCharacters;\n    const { ampElement } = Constants.safeBadBlackboardCharacters;\n    if ('_wrs_blackboard' in window && window._wrs_blackboard) {\n      input = input.split(ltElement).join(Constants.safeGoodBlackboardCharacters.ltElement);\n      input = input.split(gtElement).join(Constants.safeGoodBlackboardCharacters.gtElement);\n      input = input.split(ampElement).join(Constants.safeGoodBlackboardCharacters.ampElement);\n    }\n\n    ({ tagOpener } = Constants.safeXmlCharacters);\n    ({ tagCloser } = Constants.safeXmlCharacters);\n    ({ doubleQuote } = Constants.safeXmlCharacters);\n    ({ realDoubleQuote } = Constants.safeXmlCharacters);\n    const { ampersand } = Constants.safeXmlCharacters;\n    const { quote } = Constants.safeXmlCharacters;\n\n    // Decoding characters.\n    input = input.split(tagOpener).join(Constants.xmlCharacters.tagOpener);\n    input = input.split(tagCloser).join(Constants.xmlCharacters.tagCloser);\n    input = input.split(doubleQuote).join(Constants.xmlCharacters.doubleQuote);\n    input = input.split(ampersand).join(Constants.xmlCharacters.ampersand);\n    input = input.split(quote).join(Constants.xmlCharacters.quote);\n\n    // We are replacing $ by & when its part of an entity for retrocompatibility.\n    // Now, the standard is replace § by &.\n    let returnValue = '';\n    let currentEntity = null;\n\n    for (let i = 0; i < input.length; i += 1) {\n      const character = input.charAt(i);\n      if (currentEntity == null) {\n        if (character === '$') {\n          currentEntity = '';\n        } else {\n          returnValue += character;\n        }\n      } else if (character === ';') {\n        returnValue += `&${currentEntity}`;\n        currentEntity = null;\n      } else if (character.match(/([a-zA-Z0-9#._-] | '-')/)) { // Character is part of an entity.\n        currentEntity += character;\n      } else {\n        returnValue += `$${currentEntity}`; // Is not an entity.\n        currentEntity = null;\n        i -= 1; // Parse again the current character.\n      }\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Encodes a MathML with standard XML tags to a MMathML encoded with safe XML tags.\n   * We use these entities because IE doesn't support html entities on its attributes sometimes.\n   * @param {string} input - input string to be encoded\n   * @returns {string} encoded string.\n   */\n  static safeXmlEncode(input) {\n    const { tagOpener } = Constants.xmlCharacters;\n    const { tagCloser } = Constants.xmlCharacters;\n    const { doubleQuote } = Constants.xmlCharacters;\n    const { ampersand } = Constants.xmlCharacters;\n    const { quote } = Constants.xmlCharacters;\n\n    input = input.split(tagOpener).join(Constants.safeXmlCharacters.tagOpener);\n    input = input.split(tagCloser).join(Constants.safeXmlCharacters.tagCloser);\n    input = input.split(doubleQuote).join(Constants.safeXmlCharacters.doubleQuote);\n    input = input.split(ampersand).join(Constants.safeXmlCharacters.ampersand);\n    input = input.split(quote).join(Constants.safeXmlCharacters.quote);\n\n    return input;\n  }\n\n  /**\n   * Converts special symbols (> 128) to entities and replaces all textual\n   * entities by its number entities.\n   * @param {string} mathml - MathML string containing - or not - special symbols\n   * @returns {string} MathML with all textual entities replaced.\n   */\n  static mathMLEntities(mathml) {\n    let toReturn = '';\n\n    for (let i = 0; i < mathml.length; i += 1) {\n      const character = mathml.charAt(i);\n\n      // Parsing > 128 characters.\n      if (mathml.codePointAt(i) > 128) {\n        toReturn += `&#${mathml.codePointAt(i)};`;\n        // For UTF-32 characters we need to move the index one position.\n        if (mathml.codePointAt(i) > 0xffff) {\n          i += 1;\n        }\n      } else if (character === '&') {\n        const end = mathml.indexOf(';', i + 1);\n        if (end >= 0) {\n          const container = document.createElement('span');\n          container.innerHTML = mathml.substring(i, end + 1);\n          toReturn += `&#${Util.fixedCharCodeAt((container.textContent || container.innerText), 0)};`;\n          i = end;\n        } else {\n          toReturn += character;\n        }\n      } else {\n        toReturn += character;\n      }\n    }\n\n    return toReturn;\n  }\n\n  /**\n   * Add a custom editor name with the prefix wrs_ to a MathML class attribute.\n   * @param {string} mathml - a MathML string created with a custom editor, like chemistry.\n   * @param {string} customEditor - custom editor name.\n   * @returns {string} MathML string with his class containing the editor toolbar string.\n   */\n  static addCustomEditorClassAttribute(mathml, customEditor) {\n    let toReturn = '';\n\n    const start = mathml.indexOf('<math');\n    if (start === 0) {\n      const end = mathml.indexOf('>');\n      if (mathml.indexOf('class') === -1) {\n        // Adding custom editor type.\n        toReturn = `${mathml.substr(start, end)} class=\"wrs_${customEditor}\">`;\n        toReturn += mathml.substr(end + 1, mathml.length);\n        return toReturn;\n      }\n    }\n    return mathml;\n  }\n\n  /**\n   * Remove a custom editor name from the MathML class attribute.\n   * @param {string} mathml - a MathML string.\n   * @param {string} customEditor - custom editor name.\n   * @returns {string} The input MathML without customEditor name in his class.\n   */\n  static removeCustomEditorClassAttribute(mathml, customEditor) {\n    // Discard MathML without the specified class.\n    if (mathml.indexOf('class') === -1 || mathml.indexOf(`wrs_${customEditor}`) === -1) {\n      return mathml;\n    }\n\n    // Trivial case: class attribute value equal to editor name. Then\n    // class attribute is removed.\n    if (mathml.indexOf(`class=\"wrs_${customEditor}\"`) !== -1) {\n      return mathml.replace(`class=\"wrs_${customEditor}\"`, '');\n    }\n\n    // Non Trivial case: class attribute contains editor name.\n    return mathml.replace(`wrs_${customEditor}`, '');\n  }\n\n  /**\n   * Adds annotation tag in MathML element.\n   * @param {String} mathml - valid MathML.\n   * @param {String} content - value to put inside annotation tag.\n   * @param {String} annotationEncoding - annotation encoding.\n   * @returns {String} - 'mathml' with an annotation that contains\n   * 'content' and encoding 'encoding'.\n   */\n  static addAnnotation(mathml, content, annotationEncoding) {\n    // If contains annotation, also contains semantics tag.\n    const containsAnnotation = mathml.indexOf('<annotation');\n\n    let mathmlWithAnnotation = '';\n    if (containsAnnotation !== -1) {\n      const closeSemanticsIndex = mathml.indexOf('</semantics>');\n      mathmlWithAnnotation = `${mathml.substring(0, closeSemanticsIndex)}<annotation encoding=\"${annotationEncoding}\">${content}</annotation>${mathml.substring(closeSemanticsIndex)}`;\n    } else if (MathML.isEmpty(mathml)) {\n      const endIndexInline = mathml.indexOf('/>');\n      const endIndexNonInline = mathml.indexOf('>');\n      const endIndex = endIndexNonInline === endIndexInline ? endIndexInline : endIndexNonInline;\n      mathmlWithAnnotation = `${mathml.substring(0, endIndex)}><semantics><annotation encoding=\"${annotationEncoding}\">${content}</annotation></semantics></math>`;\n    } else {\n      const beginMathMLContent = mathml.indexOf('>') + 1;\n      const endMathmlContent = mathml.lastIndexOf('</math>');\n      const mathmlContent = mathml.substring(beginMathMLContent, endMathmlContent);\n      mathmlWithAnnotation = `${mathml.substring(0, beginMathMLContent)}<semantics>${mathmlContent}<annotation encoding=\"${annotationEncoding}\">${content}</annotation></semantics></math>`;\n    }\n\n    return mathmlWithAnnotation;\n  }\n\n  /**\n   * Removes specific annotation tag in MathML element.\n   * In case of remove the unique annotation, also is removed semantics tag.\n   * @param {String} mathml - valid MathML.\n   * @param {String} annotationEncoding - annotation encoding to remove.\n   * @returns {String} - 'mathml' without the annotation encoding specified.\n   */\n  static removeAnnotation(mathml, annotationEncoding) {\n    let mathmlWithoutAnnotation = mathml;\n    const openAnnotationTag = `<annotation encoding=\"${annotationEncoding}\">`;\n    const closeAnnotationTag = '</annotation>';\n    const startAnnotationIndex = mathml.indexOf(openAnnotationTag);\n    if (startAnnotationIndex !== -1) {\n      let differentAnnotationFound = false;\n      let differentAnnotationIndex = mathml.indexOf('<annotation');\n      while (differentAnnotationIndex !== -1) {\n        if (differentAnnotationIndex !== startAnnotationIndex) {\n          differentAnnotationFound = true;\n        }\n        differentAnnotationIndex = mathml.indexOf('<annotation', differentAnnotationIndex + 1);\n      }\n\n      if (differentAnnotationFound) {\n        const closeIndex = mathml.indexOf(closeAnnotationTag, startAnnotationIndex);\n        const endAnnotationIndex = closeIndex + closeAnnotationTag.length;\n        const startIndex = mathml.substring(0, startAnnotationIndex);\n        mathmlWithoutAnnotation = startIndex + mathml.substring(endAnnotationIndex);\n      } else {\n        mathmlWithoutAnnotation = MathML.removeSemantics(mathml);\n      }\n    }\n\n    return mathmlWithoutAnnotation;\n  }\n\n  /**\n   * Removes semantics tag to mathml.\n   * @param {string} mathml - MathML string.\n   * @returns {string} - 'mathml' without semantics tag.\n   */\n  static removeSemantics(mathml) {\n    const mathTagEnd = '</math>';\n    const openSemantics = '<semantics>';\n    const openAnnotation = '<annotation';\n\n    let mathmlWithoutSemantics = mathml;\n    const startSemantics = mathml.indexOf(openSemantics);\n    if (startSemantics !== -1) {\n      const startAnnotation = mathml.indexOf(openAnnotation, startSemantics + openSemantics.length);\n      if (startAnnotation !== -1) {\n        mathmlWithoutSemantics = mathml.substring(0, startSemantics)\n        + mathml.substring(startSemantics + openSemantics.length, startAnnotation) + mathTagEnd;\n      }\n    }\n\n    return mathmlWithoutSemantics;\n  }\n\n  /**\n   * Transforms all xml mathml ocurrences that contain semantics to the same\n   * xml mathml ocurrences without semantics.\n   * @param {string} text - string that can contain xml mathml ocurrences.\n   * @param {Constants} [characters] - Constant object containing xmlCharacters\n   * or safeXmlCharacters relation.\n   * xmlCharacters by default.\n   * @returns {string} - 'text' with all xml mathml ocurrences without annotation tag.\n   */\n  static removeSemanticsOcurrences(text, characters = Constants.xmlCharacters) {\n    const mathTagStart = `${characters.tagOpener}math`;\n    const mathTagEnd = `${characters.tagOpener}/math${characters.tagCloser}`;\n    const mathTagEndline = `/${characters.tagCloser}`;\n    const { tagCloser } = characters;\n    const semanticsTagStart = `${characters.tagOpener}semantics${characters.tagCloser}`;\n    const annotationTagStart = `${characters.tagOpener}annotation encoding=`;\n\n    let output = '';\n    let start = text.indexOf(mathTagStart);\n    let end = 0;\n    while (start !== -1) {\n      output += text.substring(end, start);\n\n      // MathML can be written as '<math></math>' or '<math />'.\n      const mathTagEndIndex = text.indexOf(mathTagEnd, start);\n      const mathTagEndlineIndex = text.indexOf(mathTagEndline, start);\n      const firstTagCloser = text.indexOf(tagCloser, start);\n      if (mathTagEndIndex !== -1) {\n        end = mathTagEndIndex;\n      } else if (mathTagEndlineIndex === firstTagCloser - 1) {\n        end = mathTagEndlineIndex;\n      }\n\n      const semanticsIndex = text.indexOf(semanticsTagStart, start);\n      if (semanticsIndex !== -1) {\n        const mmlTagStart = text.substring(start, semanticsIndex);\n        const annotationIndex = text.indexOf(annotationTagStart, start);\n        if (annotationIndex !== -1) {\n          const startIndex = semanticsIndex + semanticsTagStart.length;\n          const mmlContent = text.substring(startIndex, annotationIndex);\n          output += mmlTagStart + mmlContent + mathTagEnd;\n          start = text.indexOf(mathTagStart, start + mathTagStart.length);\n          end += mathTagEnd.length;\n        } else {\n          end = start;\n          start = text.indexOf(mathTagStart, start + mathTagStart.length);\n        }\n      } else {\n        end = start;\n        start = text.indexOf(mathTagStart, start + mathTagStart.length);\n      }\n    }\n\n    output += text.substring(end, text.length);\n    return output;\n  }\n\n  /**\n   * Returns true if a MathML contains a certain class.\n   * @param {string} mathML - input MathML.\n   * @param {string} className - className.\n   * @returns {boolean} true if the input MathML contains the input class.\n   * false otherwise.\n   * @static\n   */\n  static containClass(mathML, className) {\n    const classIndex = mathML.indexOf('class');\n    if (classIndex === -1) {\n      return false;\n    }\n    const classTagEndIndex = mathML.indexOf('>', classIndex);\n    const classTag = mathML.substring(classIndex, classTagEndIndex);\n    if (classTag.indexOf(className) !== -1) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if mathml is empty. Otherwise, false.\n   * @param {string} mathml - valid MathML with standard XML tags.\n   * @returns {boolean} - true if mathml is empty. Otherwise, false.\n   */\n  static isEmpty(mathml) {\n    // MathML can have the shape <math></math> or '<math />'.\n    const closeTag = '>';\n    const closeTagInline = '/>';\n    const firstCloseTagIndex = mathml.indexOf(closeTag);\n    const firstCloseTagInlineIndex = mathml.indexOf(closeTagInline);\n    let empty = false;\n    // MathML is always empty in the second shape.\n    if (firstCloseTagInlineIndex !== -1) {\n      if (firstCloseTagInlineIndex === firstCloseTagIndex - 1) {\n        empty = true;\n      }\n    }\n\n    // MathML is always empty in the first shape when there aren't elements\n    // between math tags.\n    if (!empty) {\n      const mathTagEndRegex = new RegExp('</(.+:)?math>');\n      const mathTagEndArray = mathTagEndRegex.exec(mathml);\n      if (mathTagEndArray) {\n        empty = firstCloseTagIndex + 1 === mathTagEndArray.index;\n      }\n    }\n\n    return empty;\n  }\n}\n","/**\n * This class represents the configuration class.\n * Usually used to retrieve configuration properties generated in the backend into the frontend.\n */\nexport default class Configuration {\n  /**\n   * Adds a properties object to {@link Configuration.properties}.\n   * @param {Object} properties - properties to append to current properties.\n   */\n  static addConfiguration(properties) {\n    Object.assign(Configuration.properties, properties);\n  }\n\n  /**\n  * Static property.\n  * The configuration properties object.\n  * @private\n  * @type {Object}\n  */\n  static get properties() {\n    return Configuration._properties;\n  }\n\n  /**\n   * Static property setter.\n   * Set configuration properties.\n   * @param {Object} value - The property value.\n   * @ignore\n   */\n  static set properties(value) {\n    Configuration._properties = value;\n  }\n\n  /**\n   * Returns the value of a property key.\n   * @param {String} key - Property key\n   * @returns {String} Property value\n   */\n  static get(key) {\n    if (!Object.prototype.hasOwnProperty.call(Configuration.properties, key)) {\n      // Backwards compatibility.\n      if (Object.prototype.hasOwnProperty.call(Configuration.properties, '_wrs_conf_')) {\n        return Configuration.properties[`_wrs_conf_${key}`];\n      }\n      return false;\n    }\n    return Configuration.properties[key];\n  }\n\n  /**\n   * Adds a new property to Configuration class.\n   * @param {String} key - Property key.\n   * @param {Object} value - Property value.\n   */\n  static set(key, value) {\n    Configuration.properties[key] = value;\n  }\n\n  /**\n   * Updates a property object value with new values.\n   * @param {String} key - The property key to be updated.\n   * @param {Object} propertyValue - Object containing the new values.\n   */\n  static update(key, propertyValue) {\n    if (!Configuration.get(key)) {\n      Configuration.set(key, propertyValue);\n    } else {\n      const updateProperty = Object.assign(Configuration.get(key), propertyValue);\n      Configuration.set(key, updateProperty);\n    }\n  }\n}\n\n/**\n * Static properties object. Stores all configuration properties.\n * Needed to attribute accessors.\n * @private\n * @type {Object}\n */\nConfiguration._properties = {};\n","export default class TextCache {\n  /**\n   * @classdesc\n   * This class represent a client-side text cache class. Contains pairs of\n   * strings (key/value) which can be retrieved in any moment. Usually used\n   * to store AJAX responses for text services like mathml2latex\n   * (c.f {@link Latex} class) or mathml2accessible (c.f {@link Accessibility} class).\n   * @constructs\n   */\n  constructor() {\n    /**\n     * Cache array property storing the cache entries.\n     * @type {Array.<String>}\n     */\n    this.cache = [];\n  }\n\n  /**\n   * This method populates a key/value pair into the {@link this.cache} property.\n   * @param {String} key - Cache key, usually the service string parameter.\n   * @param {String} value - Cache value, usually the service response.\n   */\n  populate(key, value) {\n    this.cache[key] = value;\n  }\n\n  /**\n   * Returns the cache value associated to certain cache key.\n   * @param {String} key - Cache key, usually the service string parameter.\n   * @return {String} value - Cache value, if exists. False otherwise.\n   */\n  get(key) {\n    if (Object.prototype.hasOwnProperty.call(this.cache, key)) {\n      return this.cache[key];\n    }\n    return false;\n  }\n}\n","/**\n * This object represents a custom listener.\n * @typedef {Object} Listener\n * @property {String} Listener.eventName - The listener name.\n * @property {Function} Listener.callback - The listener callback function.\n */\n\nexport default class Listeners {\n  /**\n   * @classdesc\n   * This class represents a custom listeners manager.\n   * @constructs\n   */\n  constructor() {\n    /**\n     * Array containing all custom listeners.\n     * @type {Object[]}\n     */\n    this.listeners = [];\n  }\n\n\n  /**\n   * Add a listener to Listener class.\n   * @param {Object} listener - A listener object.\n   */\n  add(listener) {\n    this.listeners.push(listener);\n  }\n\n  /**\n   * Fires MathType event listeners\n   * @param {String} eventName - event name\n   * @param {Event} event - event object.\n   * @return {boolean} false if event has been prevented. true otherwise.\n   */\n  fire(eventName, event) {\n    for (let i = 0; i < this.listeners.length && !event.cancelled; i += 1) {\n      if (this.listeners[i].eventName === eventName) {\n        // Calling listener.\n        this.listeners[i].callback(event);\n      }\n    }\n    return event.defaultPrevented;\n  }\n\n  /**\n   * Creates a new listener object.\n   * @param {string} eventName - Event name.\n   * @param {Object} callback - Callback function.\n   * @returns {object} the listener object.\n   */\n  static newListener(eventName, callback) {\n    const listener = {};\n    listener.eventName = eventName;\n    listener.callback = callback;\n    return listener;\n  }\n}\n","import Util from './util';\nimport Listeners from './listeners';\n\n/**\n * @typedef {Object} ServiceProviderProperties\n * @property {String} URI - Service URI.\n * @property {String} server - Service server language.\n */\n\n/**\n * @classdesc\n * Class representing a serviceProvider. A serviceProvider is a class containing\n * an arbitrary number of services with the correspondent path.\n */\nexport default class ServiceProvider {\n  /**\n   * Returns Service Provider listeners.\n   * @type {Listeners}\n   */\n  static get listeners() {\n    return ServiceProvider._listeners;\n  }\n\n  /**\n   * Adds a {@link Listener} instance to {@link ServiceProvider} class.\n   * @param {Listener} listener - Instance of {@link Listener}.\n   */\n  static addListener(listener) {\n    ServiceProvider.listeners.add(listener);\n  }\n\n  /**\n   * Fires events in Service Provider.\n   * @param {String} eventName - Event name.\n   * @param {Event} event - Event object.\n   */\n  static fireEvent(eventName, event) {\n    ServiceProvider.listeners.fire(eventName, event);\n  }\n\n  /**\n   * Service parameters.\n   * @type {ServiceProviderProperties}\n   *\n   */\n  static get parameters() {\n    return ServiceProvider._parameters;\n  }\n\n  /**\n   * Service parameters.\n   * @private\n   * @type {ServiceProviderProperties}\n   */\n  static set parameters(parameters) {\n    ServiceProvider._parameters = parameters;\n  }\n\n  /**\n   * Static property.\n   * Return service provider paths.\n   * @private\n   * @type {String}\n   */\n  static get servicePaths() {\n    return ServiceProvider._servicePaths;\n  }\n\n  /**\n   * Static property setter.\n   * Set service paths.\n   * @param {String} value - The property value.\n   * @ignore\n   */\n  static set servicePaths(value) {\n    ServiceProvider._servicePaths = value;\n  }\n\n  /**\n   * Adds a new service to the ServiceProvider.\n   * @param {String} service - Service name.\n   * @param {String} path - Service path.\n   * @static\n   */\n  static setServicePath(service, path) {\n    ServiceProvider.servicePaths[service] = path;\n  }\n\n  /**\n   * Returns the service path for a certain service.\n   * @param {String} serviceName - Service name.\n   * @returns {String} The service path.\n   * @static\n   */\n  static getServicePath(serviceName) {\n    return ServiceProvider.servicePaths[serviceName];\n  }\n\n  /**\n   * Static property.\n   * Service provider integration path.\n   * @type {String}\n   */\n  static get integrationPath() {\n    return ServiceProvider._integrationPath;\n  }\n\n  /**\n   * Static property setter.\n   * Set service provider integration path.\n   * @param {String} value - The property value.\n   * @ignore\n   */\n  static set integrationPath(value) {\n    ServiceProvider._integrationPath = value;\n  }\n\n  /**\n   * Returns the server URL in the form protocol://serverName:serverPort.\n   * @return {String} The client side server path.\n   */\n  static getServerURL() {\n    const url = window.location.href;\n    const arr = url.split('/');\n    const result = `${arr[0]}//${arr[2]}`;\n    return result;\n  }\n\n  /**\n   * Inits {@link this} class. Uses {@link this.integrationPath} as\n   * base path to generate all backend services paths.\n   * @param {Object} parameters - Function parameters.\n   * @param {String} parameters.integrationPath - Service path.\n   */\n  static init(parameters) {\n    ServiceProvider.parameters = parameters;\n    // Services path (tech dependant).\n    let configurationURI = ServiceProvider.createServiceURI('configurationjs');\n    let createImageURI = ServiceProvider.createServiceURI('createimage');\n    let showImageURI = ServiceProvider.createServiceURI('showimage');\n    let getMathMLURI = ServiceProvider.createServiceURI('getmathml');\n    let serviceURI = ServiceProvider.createServiceURI('service');\n\n    // Some backend integrations (like Java o Ruby) have an absolute backend path,\n    // for example: /app/service. For them we calculate the absolute URL path, i.e\n    // protocol://domain:port/app/service\n    if (ServiceProvider.parameters.URI.indexOf('/') === 0) {\n      const serverPath = ServiceProvider.getServerURL();\n      configurationURI = serverPath + configurationURI;\n      showImageURI = serverPath + showImageURI;\n      createImageURI = serverPath + createImageURI;\n      getMathMLURI = serverPath + getMathMLURI;\n      serviceURI = serverPath + serviceURI;\n    }\n\n    ServiceProvider.setServicePath('configurationjs', configurationURI);\n    ServiceProvider.setServicePath('showimage', showImageURI);\n    ServiceProvider.setServicePath('createimage', createImageURI);\n    ServiceProvider.setServicePath('service', serviceURI);\n    ServiceProvider.setServicePath('getmathml', getMathMLURI);\n    ServiceProvider.setServicePath('configurationjs', configurationURI);\n\n    ServiceProvider.listeners.fire('onInit', {});\n  }\n\n  /**\n   * Gets the content from an URL.\n   * @param {String} url - Target URL.\n   * @param {Object} [postVariables] - Object containing post variables.\n   * null if a GET query should be done.\n   * @returns {String} Content of the target URL.\n   * @private\n   * @static\n   */\n  static getUrl(url, postVariables) {\n    const currentPath = window.location.toString().substr(0, window.location.toString().lastIndexOf('/') + 1);\n    const httpRequest = Util.createHttpRequest();\n\n    if (httpRequest) {\n      if (typeof postVariables === 'undefined' || typeof postVariables === 'undefined') {\n        httpRequest.open('GET', url, false);\n      } else if (url.substr(0, 1) === '/' || url.substr(0, 7) === 'http://' || url.substr(0, 8) === 'https://') {\n        httpRequest.open('POST', url, false);\n      } else {\n        httpRequest.open('POST', currentPath + url, false);\n      }\n\n      if (typeof postVariables !== 'undefined' && postVariables) {\n        httpRequest.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=UTF-8');\n        httpRequest.send(Util.httpBuildQuery(postVariables));\n      } else {\n        httpRequest.send(null);\n      }\n\n      return httpRequest.responseText;\n    }\n    return '';\n  }\n\n  /**\n   * Returns the response text of a certain service.\n   * @param {String} service - Service name.\n   * @param {String} postVariables - Post variables.\n   * @param {Boolean} get - True if the request is GET instead of POST. false otherwise.\n   * @returns {String} Service response text.\n   */\n  static getService(service, postVariables, get) {\n    let response;\n    if (get === true) {\n      const serviceUrl = `${ServiceProvider.getServicePath(service)}?${postVariables}`;\n      response = ServiceProvider.getUrl(serviceUrl);\n    } else {\n      const serviceUrl = ServiceProvider.getServicePath(service);\n      response = ServiceProvider.getUrl(serviceUrl, postVariables);\n    }\n    return response;\n  }\n\n\n  /**\n   * Returns the server language of a certain service. The possible values\n   * are: php, aspx, java and ruby.\n   * This method has backward compatibility purposes.\n   * @param {String} service - The configuration service.\n   * @returns {String} - The server technology associated with the configuration service.\n   */\n  static getServerLanguageFromService(service) {\n    if (service.indexOf('.php') !== -1) {\n      return 'php';\n    }\n    if (service.indexOf('.aspx') !== -1) {\n      return 'aspx';\n    }\n    if (service.indexOf('wirispluginengine') !== -1) {\n      return 'ruby';\n    }\n    return 'java';\n  }\n\n  /**\n   * Returns the URI associated with a certain service.\n   * @param {String} service - The service name.\n   * @return {String} The service path.\n   */\n  static createServiceURI(service) {\n    const extension = ServiceProvider.serverExtension();\n    return Util.concatenateUrl(ServiceProvider.parameters.URI, service) + extension;\n  }\n\n  static serverExtension() {\n    if (ServiceProvider.parameters.server.indexOf('php') !== -1) {\n      return '.php';\n    }\n    if (ServiceProvider.parameters.server.indexOf('aspx') !== -1) {\n      return '.aspx';\n    }\n    return '';\n  }\n}\n\n/**\n * @property {String} service - The service name.\n * @property {String} path - The service path.\n * @static\n */\nServiceProvider._servicePaths = {};\n\n/**\n * The integration path. Contains the path of the configuration service.\n * Used to define the path for all services.\n * @type {String}\n * @private\n */\nServiceProvider._integrationPath = '';\n\n/**\n * ServiceProvider static listeners.\n * @type {Listeners}\n * @private\n */\nServiceProvider._listeners = new Listeners();\n\n\n/**\n * Service provider parameters.\n * @type {ServiceProviderParameters}\n */\nServiceProvider._parameters = {};\n","import TextCache from './textcache';\nimport MathML from './mathml';\nimport ServiceProvider from './serviceprovider';\nimport Constants from './constants';\nimport Util from './util';\n\n/**\n * @classdesc\n * This class represents a LaTeX parser. Manages the services which allows to convert\n * LaTeX into MathML and MathML into LaTeX.\n */\nexport default class Latex {\n  /**\n   * Static property.\n   * Return latex cache.\n   * @private\n   * @type {Cache}\n   */\n  static get cache() {\n    return Latex._cache;\n  }\n\n  /**\n   * Static property setter.\n   * Set latex cache.\n   * @param {Cache} value - The property value.\n   * @ignore\n  */\n  static set cache(value) {\n    Latex._cache = value;\n  }\n\n  /**\n   * Converts MathML to LaTeX by calling mathml2latex service. For text services\n   * we call a text service with the param mathml2latex.\n   * @param {String} mathml - MathML String.\n   * @return {String} LaTeX string generated by the MathML argument.\n   */\n  static getLatexFromMathML(mathml) {\n    const mathmlWithoutSemantics = MathML.removeSemantics(mathml);\n    /**\n     * @type {TextCache}\n     */\n    const { cache } = Latex;\n\n    const data = {\n      service: 'mathml2latex',\n      mml: mathmlWithoutSemantics,\n    };\n\n    const jsonResponse = JSON.parse(ServiceProvider.getService('service', data));\n\n    // TODO: Error handling.\n    let latex = '';\n\n    if (jsonResponse.status === 'ok') {\n      latex = jsonResponse.result.text;\n      const latexHtmlEntitiesEncoded = Util.htmlEntities(latex);\n      // Inserting LaTeX semantics.\n      const mathmlWithSemantics = MathML.addAnnotation(mathml, latexHtmlEntitiesEncoded, 'LaTeX');\n      cache.populate(latex, mathmlWithSemantics);\n    }\n\n    return latex;\n  }\n\n  /**\n   * Converts LaTeX to MathML by calling latex2mathml service. For text services\n   * we call a text service with the param latex2mathml.\n   * @param {String} latex - String containing a LaTeX formula.\n   * @param {Boolean} includeLatexOnSemantics\n   * - If true LaTeX would me included into MathML semantics.\n   * @return {String} MathML string generated by the LaTeX argument.\n   */\n  static getMathMLFromLatex(latex, includeLatexOnSemantics) {\n    /**\n     * @type {TextCache}\n     */\n    const latexCache = Latex.cache;\n\n    if (Latex.cache.get(latex)) {\n      return Latex.cache.get(latex);\n    }\n    const data = {\n      service: 'latex2mathml',\n      latex,\n    };\n\n    if (includeLatexOnSemantics) {\n      data.saveLatex = '';\n    }\n\n    const jsonResponse = JSON.parse(ServiceProvider.getService('service', data));\n\n    let output;\n    if (jsonResponse.status === 'ok') {\n      let mathml = jsonResponse.result.text;\n      mathml = mathml.split('\\r').join('').split('\\n').join(' ');\n\n      // Populate LatexCache.\n      if (mathml.indexOf('semantics') === -1 && mathml.indexOf('annotation') === -1) {\n        mathml = MathML.addAnnotation(mathml, latex, 'LaTeX');\n        output = mathml;\n      } else {\n        output = mathml;\n      }\n      if (!latexCache.get(latex)) {\n        latexCache.populate(latex, mathml);\n      }\n    } else {\n      output = `$$${latex}$$`;\n    }\n    return output;\n  }\n\n  /**\n   * Converts all occurrences of MathML code to LaTeX.\n   * The MathML code should containing <annotation encoding=\"LaTeX\"/> to be converted.\n   * @param {String} content - A string containing MathML valid code.\n   * @param {Object} characters - An object containing special characters.\n   * @return {String} A string containing all MathML annotated occurrences\n   * replaced by the corresponding LaTeX code.\n   */\n  static parseMathmlToLatex(content, characters) {\n    let output = '';\n    const mathTagBegin = `${characters.tagOpener}math`;\n    const mathTagEnd = `${characters.tagOpener}/math${characters.tagCloser}`;\n    const openTarget = `${characters.tagOpener}annotation encoding=${characters.doubleQuote}LaTeX${characters.doubleQuote}${characters.tagCloser}`;\n    const closeTarget = `${characters.tagOpener}/annotation${characters.tagCloser}`;\n    let start = content.indexOf(mathTagBegin);\n    let end = 0;\n    let mathml;\n    let startAnnotation;\n    let closeAnnotation;\n\n    while (start !== -1) {\n      output += content.substring(end, start);\n      end = content.indexOf(mathTagEnd, start);\n\n      if (end === -1) {\n        end = content.length - 1;\n      } else {\n        end += mathTagEnd.length;\n      }\n\n      mathml = content.substring(start, end);\n\n      startAnnotation = mathml.indexOf(openTarget);\n      if (startAnnotation !== -1) {\n        startAnnotation += openTarget.length;\n        closeAnnotation = mathml.indexOf(closeTarget);\n        let latex = mathml.substring(startAnnotation, closeAnnotation);\n        if (characters === Constants.safeXmlCharacters) {\n          latex = MathML.safeXmlDecode(latex);\n        }\n        output += `$$${latex}$$`;\n        // Populate latex into cache.\n\n        Latex.cache.populate(latex, mathml);\n      } else {\n        output += mathml;\n      }\n      start = content.indexOf(mathTagBegin, end);\n    }\n\n    output += content.substring(end, content.length);\n    return output;\n  }\n\n  /**\n   * Extracts the latex of a determined position in a text.\n   * @param {Node} textNode - textNode to extract the LaTeX\n   * @param {Number} caretPosition - Starting position to find LaTeX.\n   * @param {Object} latexTags - Optional parameter representing tags between latex is inserted.\n   * It has the 'open' attribute for the open tag and the 'close' attribute for the close tag.\n   * \"$$\" by default.\n   * @return {Object} An object with 3 keys: 'latex', 'start' and 'end'. Null if latex is not found.\n   * @static\n   */\n  static getLatexFromTextNode(textNode, caretPosition, latexTags) {\n    // TODO: Set LaTeX Tags as Core variable. Fix the call to this function (third argument).\n    // Tags used for LaTeX formulas.\n    const defaultLatexTags = {\n      open: '$$',\n      close: '$$',\n    };\n    // latexTags is an optional parameter. If is not set, use default latexTags.\n    if (typeof latexTags === 'undefined' || latexTags == null) {\n      latexTags = defaultLatexTags;\n    }\n    // Looking for the first textNode.\n    let startNode = textNode;\n\n    while (startNode.previousSibling && startNode.previousSibling.nodeType === 3) { // TEXT_NODE.\n      startNode = startNode.previousSibling;\n    }\n\n    /**\n     * Returns the next latex position and node from a specific node and position.\n     * @param {Node} currentNode - Node where searching latex.\n     * @param {Number} currentPosition - Current position inside the currentNode.\n     * @param {Object} latexTagsToUse - Tags used at latex beginning and latex final.\n     * \"$$\" by default.\n     * @param {Boolean} tag - Tag containing the current search.\n     * @returns {Object} Object containing the current node and the position.\n     */\n    function getNextLatexPosition(currentNode, currentPosition, tag) {\n      let position = currentNode.nodeValue.indexOf(tag, currentPosition);\n\n      while (position === -1) {\n        currentNode = currentNode.nextSibling;\n\n        if (!currentNode) { // TEXT_NODE.\n          return null; // Not found.\n        }\n\n        position = currentNode.nodeValue ? currentNode.nodeValue.indexOf(latexTags.close) : -1;\n      }\n\n      return {\n        node: currentNode,\n        position,\n      };\n    }\n\n    /**\n     * Determines if a node is previous, or not, to a second one.\n     * @param {Node} node - Start node.\n     * @param {Number} position - Start node position.\n     * @param {Node} endNode - End node.\n     * @param {Number} endPosition - End node position.\n     * @returns {Boolean} True if the starting node is previous thant the en node. false otherwise.\n     */\n    function isPrevious(node, position, endNode, endPosition) {\n      if (node === endNode) {\n        return (position <= endPosition);\n      }\n      while (node && node !== endNode) {\n        node = node.nextSibling;\n      }\n\n      return (node === endNode);\n    }\n\n    let start;\n    let end = {\n      node: startNode,\n      position: 0,\n    };\n    // Is supposed that open and close tags has the same length.\n    const tagLength = latexTags.open.length;\n    do {\n      start = getNextLatexPosition(end.node, end.position, latexTags.open);\n\n      if (start == null || isPrevious(textNode, caretPosition, start.node, start.position)) {\n        return null;\n      }\n\n      end = getNextLatexPosition(start.node, start.position + tagLength, latexTags.close);\n\n      if (end == null) {\n        return null;\n      }\n\n      end.position += tagLength;\n    } while (isPrevious(end.node, end.position, textNode, caretPosition));\n\n    // Isolating latex.\n    let latex;\n\n    if (start.node === end.node) {\n      latex = start.node.nodeValue.substring(start.position + tagLength, end.position - tagLength);\n    } else {\n      const index = start.position + tagLength;\n      latex = start.node.nodeValue.substring(index, start.node.nodeValue.length);\n      let currentNode = start.node;\n\n      do {\n        currentNode = currentNode.nextSibling;\n        if (currentNode === end.node) {\n          latex += end.node.nodeValue.substring(0, end.position - tagLength);\n        } else {\n          latex += currentNode.nodeValue ? currentNode.nodeValue : '';\n        }\n      } while (currentNode !== end.node);\n    }\n\n    return {\n      latex,\n      startNode: start.node,\n      startPosition: start.position,\n      endNode: end.node,\n      endPosition: end.position,\n    };\n  }\n}\n\n/**\n * Text cache. Stores all processed LaTeX strings and it's correspondent MathML string.\n * @type {Cache}\n * @static\n */\nLatex._cache = new TextCache();\n","import translations from '../lang/strings.json';\n/**\n * This class represents a string manager. It's used to load localized strings.\n */\nexport default class StringManager {\n  constructor() {\n    throw new Error('Static class StringManager can not be instantiated.');\n  }\n\n  /**\n   * Returns the associated value of certain string key. If the associated value\n   * doesn't exits returns the original key.\n   * @param {string} key - string key\n   * @returns {string} correspondent value. If doesn't exists original key.\n   */\n  static get(key) {\n    let { language } = this;\n\n    if (!(language in this.strings)) {\n      console.warn(`Unknown language ${language} set in StringManager.`);\n      language = 'en';\n    }\n\n    if (!(key in this.strings[language])) {\n      console.warn(`Unknown key ${key} in StringManager.`);\n      return key;\n    }\n\n    return this.strings[language][key];\n  }\n}\n\n/**\n * Dictionary of dictionaries:\n * Key: language code\n * Value: Key: id of the string\n *        Value: translation of the string\n */\nStringManager.strings = translations;\n\n/**\n * Language of the translations; English by default\n */\nStringManager.language = 'en';\n","/* eslint-disable no-bitwise */\nimport MathML from './mathml';\nimport Configuration from './configuration';\nimport Latex from './latex';\nimport StringManager from './stringmanager';\n\n/**\n * This class represents an utility class.\n */\nexport default class Util {\n  /**\n   * Fires an event in a target.\n   * @param {EventTarget} eventTarget - target where event should be fired.\n   * @param {string} eventName event to fire.\n   * @static\n   */\n  static fireEvent(eventTarget, eventName) {\n    if (document.createEvent) {\n      const eventObject = document.createEvent('HTMLEvents');\n      eventObject.initEvent(eventName, true, true);\n      return !eventTarget.dispatchEvent(eventObject);\n    }\n\n    const eventObject = document.createEventObject();\n    return eventTarget.fireEvent(`on${eventName}`, eventObject);\n  }\n\n  /**\n   * Cross-browser addEventListener/attachEvent function.\n   * @param {EventTarget} eventTarget - target to add the event.\n   * @param {string} eventName - specifies the type of event.\n   * @param {Function} callBackFunction - callback function.\n   * @static\n   */\n  static addEvent(eventTarget, eventName, callBackFunction) {\n    if (eventTarget.addEventListener) {\n      eventTarget.addEventListener(eventName, callBackFunction, true);\n    } else if (eventTarget.attachEvent) {\n      // Backwards compatibility.\n      eventTarget.attachEvent(`on${eventName}`, callBackFunction);\n    }\n  }\n\n  /**\n   * Cross-browser removeEventListener/detachEvent function.\n   * @param {EventTarget} eventTarget - target to add the event.\n   * @param {string} eventName - specifies the type of event.\n   * @param {Function} callBackFunction - function to remove from the event target.\n   * @static\n   */\n  static removeEvent(eventTarget, eventName, callBackFunction) {\n    if (eventTarget.removeEventListener) {\n      eventTarget.removeEventListener(eventName, callBackFunction, true);\n    } else if (eventTarget.detachEvent) {\n      eventTarget.detachEvent(`on${eventName}`, callBackFunction);\n    }\n  }\n\n  /**\n   * Adds the a callback function, for a certain event target, to the following event types:\n   * - dblclick\n   * - mousedown\n   * - mouseup\n   * @param {EventTarget} eventTarget - event target.\n   * @param {Function} doubleClickHandler - function to run when on dblclick event.\n   * @param {Function} mousedownHandler - function to run when on mousedown event.\n   * @param {Function} mouseupHandler - function to run when on mouseup event.\n   * @static\n   */\n  static addElementEvents(eventTarget, doubleClickHandler, mousedownHandler, mouseupHandler) {\n    if (doubleClickHandler) {\n      Util.addEvent(eventTarget, 'dblclick', (event) => {\n        const realEvent = (event) || window.event;\n        const element = realEvent.srcElement ? realEvent.srcElement : realEvent.target;\n        doubleClickHandler(element, realEvent);\n      });\n    }\n\n    if (mousedownHandler) {\n      Util.addEvent(eventTarget, 'mousedown', (event) => {\n        const realEvent = (event) || window.event;\n        const element = realEvent.srcElement ? realEvent.srcElement : realEvent.target;\n        mousedownHandler(element, realEvent);\n      });\n    }\n\n    if (mouseupHandler) {\n      Util.addEvent(eventTarget, 'mouseup', (event) => {\n        const realEvent = (event) || window.event;\n        const element = realEvent.srcElement ? realEvent.srcElement : realEvent.target;\n        mouseupHandler(element, realEvent);\n      });\n    }\n  }\n\n  /**\n   * Adds a class name to a HTMLElement.\n   * @param {HTMLElement} element - the HTML element.\n   * @param {string} className - the class name.\n   * @static\n   */\n  static addClass(element, className) {\n    if (!Util.containsClass(element, className)) {\n      element.className += ` ${className}`;\n    }\n  }\n\n  /**\n   * Checks if a HTMLElement contains a certain class.\n   * @param {HTMLElement} element - the HTML element.\n   * @param {string} className - the className.\n   * @returns {boolean} true if the HTMLElement contains the class name. false otherwise.\n   * @static\n   */\n  static containsClass(element, className) {\n    if (element == null || !('className' in element)) {\n      return false;\n    }\n\n    const currentClasses = element.className.split(' ');\n\n    for (let i = currentClasses.length - 1; i >= 0; i -= 1) {\n      if (currentClasses[i] === className) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Remove a certain class for a HTMLElement.\n   * @param {HTMLElement} element - the HTML element.\n   * @param {string} className - the class name.\n   * @static\n   */\n  static removeClass(element, className) {\n    let newClassName = '';\n    const classes = element.className.split(' ');\n\n    for (let i = 0; i < classes.length; i += 1) {\n      if (classes[i] !== className) {\n        newClassName += `${classes[i]} `;\n      }\n    }\n    element.className = newClassName.trim();\n  }\n\n  /**\n   * Converts old xml initial text attribute (with «») to the correct one(with §lt;§gt;). It's\n   * used to parse old applets.\n   * @param {string} text - string containing safeXml characters\n   * @returns {string} a string with safeXml characters parsed.\n   * @static\n   */\n  static convertOldXmlinitialtextAttribute(text) {\n    // Used to fix a bug with Cas imported from Moodle 1.9 to Moodle 2.x.\n    // This could be removed in future.\n    const val = 'value=';\n\n    const xitpos = text.indexOf('xmlinitialtext');\n    const valpos = text.indexOf(val, xitpos);\n    const quote = text.charAt(valpos + val.length);\n    const startquote = valpos + val.length + 1;\n    const endquote = text.indexOf(quote, startquote);\n\n    const value = text.substring(startquote, endquote);\n\n    let newvalue = value.split('«').join('§lt;');\n    newvalue = newvalue.split('»').join('§gt;');\n    newvalue = newvalue.split('&').join('§');\n    newvalue = newvalue.split('¨').join('§quot;');\n\n    text = text.split(value).join(newvalue);\n    return text;\n  }\n\n  /**\n   * Cross-browser solution for creating new elements.\n   * @param {string} tagName - tag name of the wished element.\n   * @param {Object} attributes - an object where each key is a wished\n   * attribute name and each value is its value.\n   * @param {Object} [creator] - if supplied, this function will use\n   * the \"createElement\" method from this param. Otherwise\n   * document will be used as creator.\n   * @returns {Element} The DOM element with the specified attributes assigned.\n   * @static\n   */\n  static createElement(tagName, attributes, creator) {\n    if (attributes === undefined) {\n      attributes = {};\n    }\n\n    if (creator === undefined) {\n      creator = document;\n    }\n\n    let element;\n\n    /*\n    * Internet Explorer fix:\n    * If you create a new object dynamically, you can't set a non-standard attribute.\n    * For example, you can't set the \"src\" attribute on an \"applet\" object.\n    * Other browsers will throw an exception and will run the standard code.\n    */\n    try {\n      let html = `<${tagName}`;\n\n      Object.keys(attributes).forEach((attributeName) => {\n        html += ` ${attributeName}=\"${Util.htmlEntities(attributes[attributeName])}\"`;\n      });\n      html += '>';\n      element = creator.createElement(html);\n    } catch (e) {\n      element = creator.createElement(tagName);\n      Object.keys(attributes).forEach((attributeName) => {\n        element.setAttribute(attributeName, attributes[attributeName]);\n      });\n    }\n    return element;\n  }\n\n  /**\n   * Creates new HTML from it's HTML code as string.\n   * @param {string} objectCode - html code\n   * @returns {Element} the HTML element.\n   * @static\n   */\n  static createObject(objectCode, creator) {\n    if (creator === undefined) {\n      creator = document;\n    }\n\n    // Internet Explorer can't include \"param\" tag when is setting an innerHTML property.\n    objectCode = objectCode.split('<applet ').join('<span wirisObject=\"WirisApplet\" ').split('<APPLET ').join('<span wirisObject=\"WirisApplet\" '); // It is a 'span' because 'span' objects can contain 'br' nodes.\n    objectCode = objectCode.split('</applet>').join('</span>').split('</APPLET>').join('</span>');\n\n    objectCode = objectCode.split('<param ').join('<br wirisObject=\"WirisParam\" ').split('<PARAM ').join('<br wirisObject=\"WirisParam\" '); // It is a 'br' because 'br' can't contain nodes.\n    objectCode = objectCode.split('</param>').join('</br>').split('</PARAM>').join('</br>');\n\n    const container = Util.createElement('div', {}, creator);\n    container.innerHTML = objectCode;\n\n    function recursiveParamsFix(object) {\n      if (object.getAttribute && object.getAttribute('wirisObject') === 'WirisParam') {\n        const attributesParsed = {};\n\n        for (let i = 0; i < object.attributes.length; i += 1) {\n          if (object.attributes[i].nodeValue !== null) {\n            attributesParsed[object.attributes[i].nodeName] = object.attributes[i].nodeValue;\n          }\n        }\n\n        const param = Util.createElement('param', attributesParsed, creator);\n\n        // IE fix.\n        if (param.NAME) {\n          param.name = param.NAME;\n          param.value = param.VALUE;\n        }\n\n        param.removeAttribute('wirisObject');\n        object.parentNode.replaceChild(param, object);\n      } else if (object.getAttribute && object.getAttribute('wirisObject') === 'WirisApplet') {\n        const attributesParsed = {};\n\n        for (let i = 0; i < object.attributes.length; i += 1) {\n          if (object.attributes[i].nodeValue !== null) {\n            attributesParsed[object.attributes[i].nodeName] = object.attributes[i].nodeValue;\n          }\n        }\n\n        const applet = Util.createElement('applet', attributesParsed, creator);\n        applet.removeAttribute('wirisObject');\n\n        for (let i = 0; i < object.childNodes.length; i += 1) {\n          recursiveParamsFix(object.childNodes[i]);\n\n          if (object.childNodes[i].nodeName.toLowerCase() === 'param') {\n            applet.appendChild(object.childNodes[i]);\n            i -= 1; // When we insert the object child into the applet, object loses one child.\n          }\n        }\n\n        object.parentNode.replaceChild(applet, object);\n      } else {\n        for (let i = 0; i < object.childNodes.length; i += 1) {\n          recursiveParamsFix(object.childNodes[i]);\n        }\n      }\n    }\n\n    recursiveParamsFix(container);\n    return container.firstChild;\n  }\n\n  /**\n   * Converts an Element to its HTML code.\n   * @param {Element} element - entry element.\n   * @return {string} the HTML code of the input element.\n   * @static\n   */\n  static createObjectCode(element) {\n    // In case that the image was not created, the object can be null or undefined.\n    if (typeof element === 'undefined' || element === null) {\n      return null;\n    }\n\n    if (element.nodeType === 1) { // ELEMENT_NODE.\n      let output = `<${element.tagName}`;\n\n      for (let i = 0; i < element.attributes.length; i += 1) {\n        if (element.attributes[i].specified) {\n          output += ` ${element.attributes[i].name}=\"${Util.htmlEntities(element.attributes[i].value)}\"`;\n        }\n      }\n\n      if (element.childNodes.length > 0) {\n        output += '>';\n\n        for (let i = 0; i < element.childNodes.length; i += 1) {\n          output += Util.createObject(element.childNodes[i]);\n        }\n\n        output += `</${element.tagName}>`;\n      } else if (element.nodeName === 'DIV' || element.nodeName === 'SCRIPT') {\n        output += `></${element.tagName}>`;\n      } else {\n        output += '/>';\n      }\n\n      return output;\n    }\n\n    if (element.nodeType === 3) { // TEXT_NODE.\n      return Util.htmlEntities(element.nodeValue);\n    }\n\n    return '';\n  }\n\n  /**\n   * Concatenates two URL paths.\n   * @param {string} path1 - first URL path\n   * @param {string} path2 - second URL path\n   * @returns {string} new URL.\n   */\n  static concatenateUrl(path1, path2) {\n    let separator = '';\n    if ((path1.indexOf('/') !== path1.length) && (path2.indexOf('/') !== 0)) {\n      separator = '/';\n    }\n    return (path1 + separator + path2).replace(/([^:]\\/)\\/+/g, '$1');\n  }\n\n  /**\n   * Parses a text and replaces all HTML special characters by their correspondent entities.\n   * @param {string} input - text to be parsed.\n   * @returns {string} the input text with all their special characters replaced by their entities.\n   * @static\n   */\n  static htmlEntities(input) {\n    return input.split('&').join('&amp;').split('<').join('&lt;')\n      .split('>')\n      .join('&gt;')\n      .split('\"')\n      .join('&quot;');\n  }\n\n  /**\n   * Parses a text and replaces all the HTML entities by their characters.\n   * @param {string} input - text to be parsed\n   * @returns {string} the input text with all their entities replaced by characters.\n   * @static\n   */\n  static htmlEntitiesDecode(input) {\n    // Textarea element decodes when inner html is set.\n    const textarea = document.createElement('textarea');\n    textarea.innerHTML = input;\n    return textarea.value;\n  }\n\n  /**\n   * Returns a cross-browser http request.\n   * @return {object} httpRequest request object.\n   * @returns {XMLHttpRequest|ActiveXObject} the proper request object.\n   */\n  static createHttpRequest() {\n    const currentPath = window.location.toString().substr(0, window.location.toString().lastIndexOf('/') + 1);\n    if (currentPath.substr(0, 7) === 'file://') {\n      throw StringManager.get('exception_cross_site');\n    }\n\n    if (typeof XMLHttpRequest !== 'undefined') {\n      return new XMLHttpRequest();\n    }\n\n    try {\n      return new ActiveXObject('Msxml2.XMLHTTP');\n    } catch (e) {\n      try {\n        return new ActiveXObject('Microsoft.XMLHTTP');\n      } catch (oc) {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Converts a hash to a HTTP query.\n   * @param {Object[]} properties - a key/value object.\n   * @returns {string} a HTTP query containing all the key value pairs with\n   * all the special characters replaced by their entities.\n   * @static\n   */\n  static httpBuildQuery(properties) {\n    let result = '';\n\n    Object.keys(properties).forEach((i) => {\n      if (properties[i] != null) {\n        result += `${Util.urlEncode(i)}=${Util.urlEncode(properties[i])}&`;\n      }\n    });\n\n    // Deleting last '&' empty character.\n    if (result.substring(result.length - 1) === '&') {\n      result = result.substring(0, result.length - 1);\n    }\n\n    return result;\n  }\n\n  /**\n   * Convert a hash to string sorting keys to get a deterministic output\n   * @param {Object[]} hash - a key/value object.\n   * @returns {string} a string with the form key1=value1...keyn=valuen\n   * @static\n   */\n  static propertiesToString(hash) {\n    // 1. Sort keys. We sort the keys because we want a deterministic output.\n    const keys = [];\n    Object.keys(hash).forEach((key) => {\n      if (Object.prototype.hasOwnProperty.call(hash, key)) {\n        keys.push(key);\n      }\n    });\n\n    const n = keys.length;\n    for (let i = 0; i < n; i += 1) {\n      for (let j = i + 1; j < n; j += 1) {\n        const s1 = keys[i];\n        const s2 = keys[j];\n        if (Util.compareStrings(s1, s2) > 0) {\n          // Swap.\n          keys[i] = s2;\n          keys[j] = s1;\n        }\n      }\n    }\n\n    // 2. Generate output.\n    let output = '';\n    for (let i = 0; i < n; i += 1) {\n      const key = keys[i];\n      output += key;\n      output += '=';\n      let value = hash[key];\n      value = value.replace('\\\\', '\\\\\\\\');\n      value = value.replace('\\n', '\\\\n');\n      value = value.replace('\\r', '\\\\r');\n      value = value.replace('\\t', '\\\\t');\n\n      output += value;\n      output += '\\n';\n    }\n    return output;\n  }\n\n  /**\n   * Compare two strings using charCodeAt method\n   * @param {string} a - first string to compare.\n   * @param {string} b - second string to compare.\n   * @returns {number} the difference between a and b\n   * @static\n   */\n  static compareStrings(a, b) {\n    let i;\n    const an = a.length;\n    const bn = b.length;\n    const n = (an > bn) ? bn : an;\n    for (i = 0; i < n; i += 1) {\n      const c = Util.fixedCharCodeAt(a, i) - Util.fixedCharCodeAt(b, i);\n      if (c !== 0) {\n        return c;\n      }\n    }\n    return a.length - b.length;\n  }\n\n  /**\n   * Fix charCodeAt() JavaScript function to handle non-Basic-Multilingual-Plane characters.\n   * @param {string} string - input string\n   * @param {number} idx - an integer greater than or equal to 0\n   * and less than the length of the string\n   * @returns {number} an integer representing the UTF-16 code of the string at the given index.\n   * @static\n   */\n  static fixedCharCodeAt(string, idx) {\n    idx = idx || 0;\n    const code = string.charCodeAt(idx);\n    let hi;\n    let low;\n\n    /* High surrogate (could change last hex to 0xDB7F to treat high\n    private surrogates as single characters) */\n\n    if (code >= 0xD800 && code <= 0xDBFF) {\n      hi = code;\n      low = string.charCodeAt(idx + 1);\n      if (Number.isNaN(low)) {\n        throw StringManager.get('exception_high_surrogate');\n      }\n      return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n    }\n\n    if (code >= 0xDC00 && code <= 0xDFFF) { // Low surrogate.\n      /* We return false to allow loops to skip this iteration since should have\n      already handled high surrogate above in the previous iteration. */\n      return false;\n    }\n    return code;\n  }\n\n  /**\n   * Returns an URL with it's query params converted into array.\n   * @param {string} url - input URL.\n   * @returns {Object[]} an array containing all URL query params.\n   * @static\n   */\n  static urlToAssArray(url) {\n    let i;\n    i = url.indexOf('?');\n    if (i > 0) {\n      const query = url.substring(i + 1);\n      const ss = query.split('&');\n      const h = {};\n      for (i = 0; i < ss.length; i += 1) {\n        const s = ss[i];\n        const kv = s.split('=');\n        if (kv.length > 1) {\n          h[kv[0]] = decodeURIComponent(kv[1].replace(/\\+/g, ' '));\n        }\n      }\n      return h;\n    }\n    return {};\n  }\n\n  /**\n   * Returns an encoded URL by replacing each instance of certain characters by\n   * one, two, three or four escape sequences using encodeURIComponent method.\n   * !'()* . will not be encoded.\n   *\n   * @param {string} clearString - URL string to be encoded\n   * @returns {string} URL with it's special characters replaced.\n   * @static\n   */\n  static urlEncode(clearString) {\n    let output = '';\n    // Method encodeURIComponent doesn't encode !'()*~ .\n    output = encodeURIComponent(clearString);\n    return output;\n  }\n\n  // TODO: To parser?\n  /**\n   * Converts the HTML of a image into the output code that WIRIS must return.\n   * By default returns the MathML stored on data-mahml attribute (if imgCode is a formula)\n   * or the Wiriscas attribute of a WIRIS applet.\n   * @param {string} imgCode - the html code from a formula or a CAS image.\n   * @param {boolean} convertToXml - true if the image should be converted to XML.\n   * @param {boolean} convertToSafeXml - true if the image should be converted to safeXML.\n   * @returns {string} the XML or safeXML of a WIRIS image.\n   * @static\n   */\n  static getWIRISImageOutput(imgCode, convertToXml, convertToSafeXml) {\n    const imgObject = Util.createObject(imgCode);\n    if (imgObject) {\n      if (imgObject.className === Configuration.get('imageClassName') || imgObject.getAttribute(Configuration.get('imageMathmlAttribute'))) {\n        if (!convertToXml) {\n          return imgCode;\n        }\n\n        const dataMathML = imgObject.getAttribute(Configuration.get('imageMathmlAttribute'));\n        // To handle annotations, first we need the MathML in XML.\n        let mathML = MathML.safeXmlDecode(dataMathML);\n\n        if (!Configuration.get('saveHandTraces')) {\n          mathML = MathML.removeAnnotation(mathML, 'application/json');\n        }\n\n        if (mathML == null) {\n          mathML = imgObject.getAttribute('alt');\n        }\n\n        if (convertToSafeXml) {\n          const safeMathML = MathML.safeXmlEncode(mathML);\n          return safeMathML;\n        }\n\n        return mathML;\n      }\n    }\n    return imgCode;\n  }\n\n  /**\n   * Gets the node length in characters.\n   * @param {Node} node - HTML node.\n   * @returns {number} node length.\n   * @static\n   */\n  static getNodeLength(node) {\n    const staticNodeLengths = {\n      IMG: 1,\n      BR: 1,\n    };\n\n    if (node.nodeType === 3) { // TEXT_NODE.\n      return node.nodeValue.length;\n    }\n\n    if (node.nodeType === 1) { // ELEMENT_NODE.\n      let length = staticNodeLengths[node.nodeName.toUpperCase()];\n\n      if (length === undefined) {\n        length = 0;\n      }\n\n      for (let i = 0; i < node.childNodes.length; i += 1) {\n        length += Util.getNodeLength(node.childNodes[i]);\n      }\n      return length;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets a selected node or text from an editable HTMLElement.\n   * If the caret is on a text node, concatenates it with all the previous and next text nodes.\n   * @param {HTMLElement} target - the editable HTMLElement.\n   * @param {boolean} isIframe  - specifies if the target is an iframe or not\n   * @param {boolean} forceGetSelection - if true, ignores IE system to get\n   * the current selection and uses window.getSelection()\n   * @returns {object} an object with the 'node' key set if the item is an\n   * element or the keys 'node' and 'caretPosition' if the element is text.\n   * @static\n   */\n  static getSelectedItem(target, isIframe, forceGetSelection) {\n    let windowTarget;\n\n    if (isIframe) {\n      windowTarget = target.contentWindow;\n      windowTarget.focus();\n    } else {\n      windowTarget = window;\n      target.focus();\n    }\n\n    if (document.selection && !forceGetSelection) {\n      const range = windowTarget.document.selection.createRange();\n\n      if (range.parentElement) {\n        if (range.htmlText.length > 0) {\n          if (range.text.length === 0) {\n            return Util.getSelectedItem(target, isIframe, true);\n          }\n\n          return null;\n        }\n\n        windowTarget.document.execCommand('InsertImage', false, '#');\n        let temporalObject = range.parentElement();\n\n        if (temporalObject.nodeName.toUpperCase() !== 'IMG') {\n          // IE9 fix: parentElement() does not return the IMG node,\n          // returns the parent DIV node. In IE < 9, pasteHTML does not work well.\n          range.pasteHTML('<span id=\"wrs_openEditorWindow_temporalObject\"></span>');\n          temporalObject = windowTarget.document.getElementById('wrs_openEditorWindow_temporalObject');\n        }\n\n        let node;\n        let caretPosition;\n\n        if (temporalObject.nextSibling && temporalObject.nextSibling.nodeType === 3) { // TEXT_NODE.\n          node = temporalObject.nextSibling;\n          caretPosition = 0;\n        } else if (temporalObject.previousSibling\n          && temporalObject.previousSibling.nodeType === 3) {\n          node = temporalObject.previousSibling;\n          caretPosition = node.nodeValue.length;\n        } else {\n          node = windowTarget.document.createTextNode('');\n          temporalObject.parentNode.insertBefore(node, temporalObject);\n          caretPosition = 0;\n        }\n\n        temporalObject.parentNode.removeChild(temporalObject);\n\n        return {\n          node,\n          caretPosition,\n        };\n      }\n\n      if (range.length > 1) {\n        return null;\n      }\n\n      return {\n        node: range.item(0),\n      };\n    }\n\n    if (windowTarget.getSelection) {\n      let range;\n      const selection = windowTarget.getSelection();\n\n      try {\n        range = selection.getRangeAt(0);\n      } catch (e) {\n        range = windowTarget.document.createRange();\n      }\n\n      const node = range.startContainer;\n\n      if (node.nodeType === 3) { // TEXT_NODE.\n        return {\n          node,\n          caretPosition: range.startOffset,\n        };\n      }\n\n      if (node !== range.endContainer) {\n        return null;\n      }\n\n      if (node.nodeType === 1) { // ELEMENT_NODE.\n        const position = range.startOffset;\n\n        if (node.childNodes[position]) {\n          return {\n            node: node.childNodes[position],\n          };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns null if there isn't any item or if it is malformed.\n   * Otherwise returns an object containing the node with the MathML image\n   * and the cursor position inside the textarea.\n   * @param {HTMLTextAreaElement} textarea - textarea element.\n   * @returns {Object} An object containing the node, the index of the\n   * beginning  of the selected text, caret position and the start and end position of the\n   * text node.\n   * @static\n   */\n  static getSelectedItemOnTextarea(textarea) {\n    const textNode = document.createTextNode(textarea.value);\n    const textNodeValues = Latex.getLatexFromTextNode(textNode, textarea.selectionStart);\n    if (textNodeValues === null) {\n      return null;\n    }\n\n    return {\n      node: textNode,\n      caretPosition: textarea.selectionStart,\n      startPosition: textNodeValues.startPosition,\n      endPosition: textNodeValues.endPosition,\n    };\n  }\n\n  /**\n   * Looks for elements that match the given name in a HTML code string.\n   * Important: this function is very concrete for WIRIS code.\n   * It takes as preconditions lots of behaviors that are not the general case.\n   * @param {string} code -  HTML code.\n   * @param {string} name - element name.\n   * @param {boolean} autoClosed - true if the elements are autoClosed.\n   * @return {Object[]} an object containing all HTML elements of code matching the name argument.\n   * @static\n   */\n  static getElementsByNameFromString(code, name, autoClosed) {\n    const elements = [];\n    code = code.toLowerCase();\n    name = name.toLowerCase();\n    let start = code.indexOf(`<${name} `);\n\n    while (start !== -1) { // Look for nodes.\n      let endString;\n\n      if (autoClosed) {\n        endString = '>';\n      } else {\n        endString = `</${name}>`;\n      }\n\n      let end = code.indexOf(endString, start);\n\n      if (end !== -1) {\n        end += endString.length;\n        elements.push({\n          start,\n          end,\n        });\n      } else {\n        end = start + 1;\n      }\n\n      start = code.indexOf(`<${name} `, end);\n    }\n\n    return elements;\n  }\n\n  /**\n   * Returns the numeric value of a base64 character.\n   * @param  {string} character - base64 character.\n   * @returns {number} base64 character numeric value.\n   * @static\n   */\n  static decode64(character) {\n    const PLUS = '+'.charCodeAt(0);\n    const SLASH = '/'.charCodeAt(0);\n    const NUMBER = '0'.charCodeAt(0);\n    const LOWER = 'a'.charCodeAt(0);\n    const UPPER = 'A'.charCodeAt(0);\n    const PLUS_URL_SAFE = '-'.charCodeAt(0);\n    const SLASH_URL_SAFE = '_'.charCodeAt(0);\n    const code = character.charCodeAt(0);\n\n    if (code === PLUS || code === PLUS_URL_SAFE) {\n      return 62; // Char '+'.\n    }\n    if (code === SLASH || code === SLASH_URL_SAFE) {\n      return 63; // Char '/'.\n    }\n    if (code < NUMBER) {\n      return -1; // No match.\n    }\n    if (code < NUMBER + 10) {\n      return code - NUMBER + 26 + 26;\n    }\n    if (code < UPPER + 26) {\n      return code - UPPER;\n    }\n    if (code < LOWER + 26) {\n      return code - LOWER + 26;\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts a base64 string to a array of bytes.\n   * @param {string} b64String - base64 string.\n   * @param {number} length - dimension of byte array (by default whole string).\n   * @return {Object[]} the resultant byte array.\n   * @static\n   */\n  static b64ToByteArray(b64String, length) {\n    let tmp;\n\n    if (b64String.length % 4 > 0) {\n      throw new Error('Invalid string. Length must be a multiple of 4'); // Tipped base64. Length is fixed.\n    }\n\n    const arr = [];\n\n    let l;\n    let placeHolders;\n    if (!length) { // All b64String string.\n      if (b64String.charAt(b64String.length - 2) === '=') {\n        placeHolders = 2;\n      } else if (b64String.charAt(b64String.length - 1) === '=') {\n        placeHolders = 1;\n      } else {\n        placeHolders = 0;\n      }\n      l = placeHolders > 0 ? b64String.length - 4 : b64String.length;\n    } else {\n      l = length;\n    }\n\n    let i;\n    for (i = 0; i < l; i += 4) {\n      // Ignoring code checker standards (bitewise operators).\n      // See https://tracker.moodle.org/browse/CONTRIB-5862 for further information.\n      // @codingStandardsIgnoreStart\n      // eslint-disable-next-line max-len\n      tmp = (Util.decode64(b64String.charAt(i)) << 18) | (Util.decode64(b64String.charAt(i + 1)) << 12) | (Util.decode64(b64String.charAt(i + 2)) << 6) | Util.decode64(b64String.charAt(i + 3));\n\n      arr.push((tmp >> 16) & 0xFF);\n      arr.push((tmp >> 8) & 0xFF);\n      arr.push(tmp & 0xFF);\n      // @codingStandardsIgnoreEnd\n    }\n\n    if (placeHolders) {\n      if (placeHolders === 2) {\n        // Ignoring code checker standards (bitewise operators).\n        // @codingStandardsIgnoreStart\n        // eslint-disable-next-line max-len\n        tmp = (Util.decode64(b64String.charAt(i)) << 2) | (Util.decode64(b64String.charAt(i + 1)) >> 4);\n        arr.push(tmp & 0xFF);\n      } else if (placeHolders === 1) {\n        // eslint-disable-next-line max-len\n        tmp = (Util.decode64(b64String.charAt(i)) << 10) | (Util.decode64(b64String.charAt(i + 1)) << 4) | (Util.decode64(b64String.charAt(i + 2)) >> 2);\n        arr.push((tmp >> 8) & 0xFF);\n        arr.push(tmp & 0xFF);\n        // @codingStandardsIgnoreEnd\n      }\n    }\n    return arr;\n  }\n\n  /**\n   * Returns the first 32-bit signed integer from a byte array.\n   * @param {Object[]} bytes - array of bytes.\n   * @returns {number} the 32-bit signed integer.\n   * @static\n   */\n  static readInt32(bytes) {\n    if (bytes.length < 4) {\n      return false;\n    }\n    const int32 = bytes.splice(0, 4);\n    // @codingStandardsIgnoreStart\n    // eslint-disable-next-line no-mixed-operators\n    return (int32[0] << 24 | int32[1] << 16 | int32[2] << 8 | int32[3] << 0);\n    // @codingStandardsIgnoreEnd\n  }\n\n  /**\n   * Read the first byte from a byte array.\n   * @param {Object} bytes - input byte array.\n   * @returns {number} first byte of the byte array.\n   * @static\n   */\n  static readByte(bytes) {\n    // @codingStandardsIgnoreStart\n    return bytes.shift() << 0;\n    // @codingStandardsIgnoreEnd\n  }\n\n  /**\n   * Read an arbitrary number of bytes, from a fixed position on a byte array.\n   * @param  {Object[]} bytes - byte array.\n   * @param  {number} pos - start position.\n   * @param  {number} len - number of bytes to read.\n   * @returns {Object[]} the byte array.\n   * @static\n   */\n  static readBytes(bytes, pos, len) {\n    return bytes.splice(pos, len);\n  }\n\n  /**\n   * Inserts or modifies formulas or CAS on a textarea.\n   * @param {HTMLTextAreaElement} textarea - textarea target.\n   * @param {string} text - text to add in the textarea. For example, to add the link to the image,\n   * call this function as (textarea, Parser.createImageSrc(mathml));\n   * @static\n   */\n  static updateTextArea(textarea, text) {\n    if (textarea && text) {\n      textarea.focus();\n\n      if (textarea.selectionStart != null) {\n        const { selectionEnd } = textarea;\n        const selectionStart = textarea.value.substring(0, textarea.selectionStart);\n        const selectionEndSub = textarea.value.substring(selectionEnd, textarea.value.length);\n        textarea.value = selectionStart + text + selectionEndSub;\n        textarea.selectionEnd = selectionEnd + text.length;\n      } else {\n        const selection = document.selection.createRange();\n        selection.text = text;\n      }\n    }\n  }\n\n  /**\n   * Modifies existing formula on a textarea.\n   * @param {HTMLTextAreaElement} textarea - text area target.\n   * @param {string} text - text to add in the textarea. For example, if you want to add the link\n   * to the image,you can call this function as\n   * Util.updateTextarea(textarea, Parser.createImageSrc(mathml));\n   * @param {number} start - beginning index from textarea where it needs to be replaced by text.\n   * @param {number} end - ending index from textarea where it needs to be replaced by text\n   * @static\n   */\n  static updateExistingTextOnTextarea(textarea, text, start, end) {\n    textarea.focus();\n    const textareaStart = textarea.value.substring(0, start);\n    textarea.value = textareaStart + text + textarea.value.substring(end, textarea.value.length);\n    textarea.selectionEnd = start + text.length;\n  }\n\n  /**\n   * Add a parameter with it's correspondent value to an URL (GET).\n   * @param {string} path - URL path\n   * @param {string} parameter - parameter\n   * @param {string} value - value\n   * @static\n   */\n  static addArgument(path, parameter, value) {\n    let sep;\n    if (path.indexOf('?') > 0) {\n      sep = '&';\n    } else {\n      sep = '?';\n    }\n    return `${path + sep + parameter}=${value}`;\n  }\n}\n","import Configuration from './configuration';\nimport Util from './util';\n\n/**\n * @classdesc\n * This class represents MathType Image class. Contains all the logic related\n * to MathType images manipulation.\n * All MathType images are generated using the appropriate MathType\n * integration service: showimage or createimage.\n *\n * There are two available image formats:\n * - svg (default)\n * - png\n *\n * There are two formats for the image src attribute:\n * - A data-uri scheme containing the URL-encoded SVG or a PNG's base64.\n * - A link to the showimage service.\n */\nexport default class Image {\n  /**\n   * Removes data attributes from an image.\n   * @param {HTMLImageElement} img - Image where remove data attributes.\n   */\n  static removeImgDataAttributes(img) {\n    const attributesToRemove = [];\n    const { attributes } = img;\n\n    Object.keys(attributes).forEach((key) => {\n      const attribute = attributes[key];\n      if (attribute.name.indexOf('data-') === 0) {\n        // Is preferred keep an array and remove after the search\n        // because when attribute is removed the array of attributes\n        // is modified.\n        attributesToRemove.push(attribute.name);\n      }\n    });\n\n    attributesToRemove.forEach((attribute) => {\n      img.removeAttribute(attribute);\n    });\n  }\n\n  /**\n   * @static\n   * Clones all MathType image attributes from a HTMLImageElement to another.\n   * @param {HTMLImageElement} originImg - The original image.\n   * @param {HTMLImageElement} destImg - The destination image.\n   */\n  static clone(originImg, destImg) {\n    const customEditorAttributeName = Configuration.get('imageCustomEditorName');\n    if (!originImg.hasAttribute(customEditorAttributeName)) {\n      destImg.removeAttribute(customEditorAttributeName);\n    }\n\n    const mathmlAttributeName = Configuration.get('imageMathmlAttribute');\n    const imgAttributes = [\n      mathmlAttributeName,\n      customEditorAttributeName,\n      'alt',\n      'height',\n      'width',\n      'style',\n      'src',\n      'role',\n    ];\n\n    imgAttributes.forEach((iterator) => {\n      const originAttribute = originImg.getAttribute(iterator);\n      if (originAttribute) {\n        destImg.setAttribute(iterator, originAttribute);\n      }\n    });\n  }\n\n  /**\n  * Calculates the metrics of a MathType image given the the service response and the image format.\n  * @param {HTMLImageElement} img - The HTMLImageElement.\n  * @param {String} uri - The URI generated by the image service: can be a data URI scheme or a URL.\n  * @param {Boolean} jsonResponse - True the response of the image service is a\n  * JSON object. False otherwise.\n  */\n  static setImgSize(img, uri, jsonResponse) {\n    let ar;\n    let base64String;\n    let bytes;\n    let svgString;\n    if (jsonResponse) {\n      // Cleaning data:image/png;base64.\n      if (Configuration.get('imageFormat') === 'svg') {\n        // SVG format.\n        // If SVG is encoded in base64 we need to convert the base64 bytes into a SVG string.\n        if (Configuration.get('saveMode') !== 'base64') {\n          ar = Image.getMetricsFromSvgString(uri);\n        } else {\n          base64String = img.src.substr(img.src.indexOf('base64,') + 7, img.src.length);\n          svgString = '';\n          bytes = Util.b64ToByteArray(base64String, base64String.length);\n          for (let i = 0; i < bytes.length; i += 1) {\n            svgString += String.fromCharCode(bytes[i]);\n          }\n          ar = Image.getMetricsFromSvgString(svgString);\n        }\n        // PNG format: we store all metrics information in the first 88 bytes.\n      } else {\n        base64String = img.src.substr(img.src.indexOf('base64,') + 7, img.src.length);\n        bytes = Util.b64ToByteArray(base64String, 88);\n        ar = Image.getMetricsFromBytes(bytes);\n      }\n      // Backwards compatibility: we store the metrics into createimage response.\n    } else {\n      ar = Util.urlToAssArray(uri);\n    }\n    let width = ar.cw;\n    if (!width) {\n      return;\n    }\n    let height = ar.ch;\n    let baseline = ar.cb;\n    const { dpi } = ar;\n    if (dpi) {\n      width = width * 96 / dpi;\n      height = height * 96 / dpi;\n      baseline = baseline * 96 / dpi;\n    }\n    img.width = width;\n    img.height = height;\n    img.style.verticalAlign = `-${height - baseline}px`;\n  }\n\n  /**\n   * Calculates the metrics of an image which has been resized. Is used to restore the original\n   * metrics of a resized image.\n   * @param {HTMLImageElement } img - The resized HTMLImageElement.\n   */\n  static fixAfterResize(img) {\n    img.removeAttribute('style');\n    img.removeAttribute('width');\n    img.removeAttribute('height');\n    // In order to avoid resize with max-width css property.\n    img.style.maxWidth = 'none';\n    if (img.src.indexOf('data:image') !== -1) {\n      if (Configuration.get('imageFormat') === 'svg') {\n        // ...data:image/svg+xml;charset=utf8, = 32.\n        const svg = decodeURIComponent(img.src.substring(32, img.src.length));\n        Image.setImgSize(img, svg, true);\n      } else {\n        // ...data:image/png;base64, == 22.\n        const base64 = img.src.substring(22, img.src.length);\n        Image.setImgSize(img, base64, true);\n      }\n    } else {\n      Image.setImgSize(img, img.src);\n    }\n  }\n\n  /**\n   * Returns the metrics (height, width and baseline) contained in a SVG image generated\n   * by the MathType image service. This image contains as an extra custom attribute:\n   * the baseline (wrs:baseline).\n   * @param {String} svgString - The SVG image.\n   * @return {Array} - The image metrics.\n   */\n  static getMetricsFromSvgString(svgString) {\n    let first = svgString.indexOf('height=\"');\n    let last = svgString.indexOf('\"', first + 8, svgString.length);\n    const height = svgString.substring(first + 8, last);\n\n    first = svgString.indexOf('width=\"');\n    last = svgString.indexOf('\"', first + 7, svgString.length);\n    const width = svgString.substring(first + 7, last);\n\n    first = svgString.indexOf('wrs:baseline=\"');\n    last = svgString.indexOf('\"', first + 14, svgString.length);\n    const baseline = svgString.substring(first + 14, last);\n\n    if (typeof width !== 'undefined') {\n      const arr = [];\n      arr.cw = width;\n      arr.ch = height;\n      if (typeof baseline !== 'undefined') {\n        arr.cb = baseline;\n      }\n      return arr;\n    }\n    return [];\n  }\n\n  /**\n   * Returns the metrics (width, height, baseline and dpi) contained in a PNG byte array.\n   * @param  {Array.<Bytes>} bytes - png byte array.\n   * @return {Array} The png metrics.\n   */\n  static getMetricsFromBytes(bytes) {\n    Util.readBytes(bytes, 0, 8);\n    let width;\n    let height;\n    let typ;\n    let baseline;\n    let dpi;\n    while (bytes.length >= 4) {\n      typ = Util.readInt32(bytes);\n      if (typ === 0x49484452) {\n        width = Util.readInt32(bytes);\n        height = Util.readInt32(bytes);\n        // Read 5 bytes.\n        Util.readInt32(bytes);\n        Util.readByte(bytes);\n      } else if (typ === 0x62615345) { // Baseline: 'baSE'.\n        baseline = Util.readInt32(bytes);\n      } else if (typ === 0x70485973) { // Dpis: 'pHYs'.\n        dpi = Util.readInt32(bytes);\n        dpi = (Math.round(dpi / 39.37));\n        Util.readInt32(bytes);\n        Util.readByte(bytes);\n      }\n      Util.readInt32(bytes);\n    }\n\n    if (typeof width !== 'undefined') {\n      const arr = [];\n      arr.cw = width;\n      arr.ch = height;\n      arr.dpi = dpi;\n      if (baseline) {\n        arr.cb = baseline;\n      }\n\n      return arr;\n    }\n    return [];\n  }\n}\n","import TextCache from './textcache';\nimport ServiceProvider from './serviceprovider';\nimport MathML from './mathml';\nimport StringManager from './stringmanager';\n\n/**\n * @classdesc\n * This class represents MathType accessible class. Converts MathML to accessible text and manages\n * the associated client-side cache.\n */\nexport default class Accessibility {\n  /**\n  * Static property.\n  * Accessibility cache, each entry contains a MathML and its correspondent accessibility text.\n  * @type {TextCache}\n  */\n  static get cache() {\n    return Accessibility._cache;\n  }\n\n  /**\n   * Static property setter.\n   * Set accessibility cache.\n   * @param {TextCahe} value - The property value.\n   * @ignore\n   */\n  static set cache(value) {\n    Accessibility._cache = value;\n  }\n\n  /**\n   * Converts MathML strings to its accessible text representation.\n   * @param {String} mathML - MathML to be converted to accessible text.\n   * @param {String} [language] - Language of the accessible text. 'en' by default.\n   * @param {Array.<String>} [data] - Parameters to send to mathml2accessible service.\n   * @return {String} Accessibility text.\n   */\n  static mathMLToAccessible(mathML, language, data) {\n    if (typeof (language) === 'undefined') {\n      language = 'en';\n    }\n    // Check MathML class. If the class is chemistry,\n    // we add chemistry to data to force accessibility service\n    // to load chemistry grammar.\n    if (MathML.containClass(mathML, 'wrs_chemistry')) {\n      data.mode = 'chemistry';\n    }\n    let accessibleText = '';\n\n    if (Accessibility.cache.get(mathML)) {\n      accessibleText = Accessibility.cache.get(mathML);\n    } else {\n      data.service = 'mathml2accessible';\n      data.lang = language;\n      const accessibleJsonResponse = JSON.parse(ServiceProvider.getService('service', data));\n      if (accessibleJsonResponse.status !== 'error') {\n        accessibleText = accessibleJsonResponse.result.text;\n        Accessibility.cache.populate(mathML, accessibleText);\n      } else {\n        accessibleText = StringManager.get('error_convert_accessibility');\n      }\n    }\n\n    return accessibleText;\n  }\n}\n\n/**\n * Contains an instance of TextCache class to manage the JavaScript accessible cache.\n * Each entry of the cache object contains the MathML and it's correspondent accessibility text.\n * @private\n * @type {TextCache}\n */\nAccessibility._cache = new TextCache();\n","import Util from './util';\nimport Latex from './latex';\nimport MathML from './mathml';\nimport Image from './image';\nimport Accessibility from './accessibility';\nimport ServiceProvider from './serviceprovider';\nimport Configuration from './configuration';\nimport Constants from './constants';\n// eslint-disable-next-line no-unused-vars\nimport md5 from './md5';\n\n/**\n * @classdesc\n * This class represent a MahML parser. Converts MathML into formulas depending on the\n * image format (SVG, PNG, base64) and the save mode (XML, safeXML, Image) configured\n * in the backend.\n */\nexport default class Parser {\n  /**\n   * Converts a MathML string to an img element.\n   * @param {Document} creator - Document object to call createElement method.\n   * @param {string} mathml - MathML code\n   * @param {Object[]} wirisProperties - object containing WIRIS custom properties\n   * @param {language} language - custom language for accessibility.\n   * @returns {HTMLImageElement} the formula image corresponding to initial MathML string.\n   * @static\n   */\n  static mathmlToImgObject(creator, mathml, wirisProperties, language) {\n    const imgObject = creator.createElement('img');\n    imgObject.align = 'middle';\n    imgObject.style.maxWidth = 'none';\n    const data = wirisProperties || {};\n\n    data.mml = mathml;\n    data.lang = language;\n    // Request metrics of the generated image.\n    data.metrics = 'true';\n    data.centerbaseline = 'false';\n\n\n    // Full base64 method (edit & save).\n    if (Configuration.get('saveMode') === 'base64' && Configuration.get('base64savemode') === 'default') {\n      data.base64 = true;\n    }\n\n    // Render js params: _wrs_int_wirisProperties contains some js render params.\n    // Since MathML can support render params, js params should be send only to editor.\n\n    imgObject.className = Configuration.get('imageClassName');\n\n    if (mathml.indexOf('class=\"') !== -1) {\n      // We check here if the MathML has been created from a customEditor (such chemistry)\n      // to add custom editor name attribute to img object (if necessary).\n      let mathmlSubstring = mathml.substring(mathml.indexOf('class=\"') + 'class=\"'.length, mathml.length);\n      mathmlSubstring = mathmlSubstring.substring(0, mathmlSubstring.indexOf('\"'));\n      mathmlSubstring = mathmlSubstring.substring(4, mathmlSubstring.length);\n      imgObject.setAttribute(Configuration.get('imageCustomEditorName'), mathmlSubstring);\n    }\n\n    // Performance enabled.\n    if (Configuration.get('wirisPluginPerformance') && (Configuration.get('saveMode') === 'xml' || Configuration.get('saveMode') === 'safeXml')) {\n      let result = JSON.parse(Parser.createShowImageSrc(data, language));\n      if (result.status === 'warning') {\n        // POST call.\n        // if the mathml is malformed, this function will throw an exception.\n        try {\n          result = JSON.parse(ServiceProvider.getService('showimage', data));\n        } catch (e) {\n          return null;\n        }\n      }\n      ({ result } = result);\n      if (result.format === 'png') {\n        imgObject.src = `data:image/png;base64,${result.content}`;\n      } else {\n        imgObject.src = `data:image/svg+xml;charset=utf8,${Util.urlEncode(result.content)}`;\n      }\n      imgObject.setAttribute(Configuration.get('imageMathmlAttribute'), MathML.safeXmlEncode(mathml));\n      Image.setImgSize(imgObject, result.content, true);\n\n      if (Configuration.get('enableAccessibility')) {\n        if (typeof result.alt === 'undefined') {\n          imgObject.alt = Accessibility.mathMLToAccessible(mathml, language, data);\n        } else {\n          imgObject.alt = result.alt;\n        }\n      }\n    } else {\n      const result = Parser.createImageSrc(mathml, data);\n      imgObject.setAttribute(Configuration.get('imageMathmlAttribute'), MathML.safeXmlEncode(mathml));\n      imgObject.src = result;\n      Image.setImgSize(imgObject, result, Configuration.get('saveMode') === 'base64' && Configuration.get('base64savemode') === 'default');\n      if (Configuration.get('enableAccessibility')) {\n        imgObject.alt = Accessibility.mathMLToAccessible(mathml, language, data);\n      }\n    }\n\n    if (typeof Parser.observer !== 'undefined') {\n      Parser.observer.observe(imgObject);\n    }\n\n    // Role math https://www.w3.org/TR/wai-aria/roles#math.\n    imgObject.setAttribute('role', 'math');\n    return imgObject;\n  }\n\n  /**\n   * Returns the source to showimage service by calling createimage service. The\n   * output of the createimage service is a URL path pointing to showimage service.\n   * This method is called when performance is disabled.\n   * @param {string} mathml - MathML code.\n   * @param {Object[]} data - data object containing service parameters.\n   * @returns {string} the showimage path.\n   */\n  static createImageSrc(mathml, data) {\n    // Full base64 method (edit & save).\n    if (Configuration.get('saveMode') === 'base64' && Configuration.get('base64savemode') === 'default') {\n      data.base64 = true;\n    }\n\n    let result = ServiceProvider.getService('createimage', data);\n\n    if (result.indexOf('@BASE@') !== -1) {\n      // Replacing '@BASE@' with the base URL of createimage.\n      const baseParts = ServiceProvider.getServicePath('createimage').split('/');\n      baseParts.pop();\n      result = result.split('@BASE@').join(baseParts.join('/'));\n    }\n\n    return result;\n  }\n\n  /**\n   * Parses initial HTML code. If the HTML contains data generated by WIRIS,\n   * this data would be converted as following:\n   * <pre>\n   * MathML code: Image containing the corresponding MathML formulas.\n   * MathML code with LaTeX annotation : LaTeX string.\n   * </pre>\n   * @param {string} code - HTML code containing MathML data.\n   * @param {string} language - language to create image alt text.\n   * @returns {string} HTML code with the original MathML converted into LaTeX and images.\n   */\n  static initParse(code, language) {\n    /* Note: The code inside this function has been inverted.\n    If you invert again the code then you cannot use correctly LaTeX\n    in Moodle.\n    */\n    code = Parser.initParseSaveMode(code, language);\n    return Parser.initParseEditMode(code);\n  }\n\n  /**\n   * Parses initial HTML code depending on the save mode. Transforms all MathML\n   * occurrences for it's correspondent image or LaTeX.\n   * @param {string} code - HTML code to be parsed\n   * @param {string} language - language to create image alt text.\n   * @returns {string} HTML code parsed.\n   */\n  static initParseSaveMode(code, language) {\n    if (Configuration.get('saveMode')) {\n      // Converting XML to tags.\n      code = Latex.parseMathmlToLatex(code, Constants.safeXmlCharacters);\n      code = Latex.parseMathmlToLatex(code, Constants.xmlCharacters);\n      code = Parser.parseMathmlToImg(code, Constants.safeXmlCharacters, language);\n      code = Parser.parseMathmlToImg(code, Constants.xmlCharacters, language);\n      if (Configuration.get('saveMode') === 'base64' && Configuration.get('base64savemode') === 'image') {\n        code = Parser.codeImgTransform(code, 'base642showimage');\n      }\n    }\n    return code;\n  }\n\n  /**\n   * Parses initial HTML code depending on the edit mode.\n   * If 'latex' parseMode is enabled all MathML containing an annotation with encoding='LaTeX' will\n   * be converted into a LaTeX string instead of an image.\n   * @param {string} code - HTML code containing MathML.\n   * @returns {string} parsed HTML code.\n   */\n  static initParseEditMode(code) {\n    if (Configuration.get('parseModes').indexOf('latex') !== -1) {\n      const imgList = Util.getElementsByNameFromString(code, 'img', true);\n      const token = 'encoding=\"LaTeX\">';\n      // While replacing images with latex, the indexes of the found images changes\n      // respecting the original code, so this carry is needed.\n      let carry = 0;\n\n      for (let i = 0; i < imgList.length; i += 1) {\n        const imgCode = code.substring(imgList[i].start + carry, imgList[i].end + carry);\n\n        if (imgCode.indexOf(` class=\"${Configuration.get('imageClassName')}\"`) !== -1) {\n          let mathmlStartToken = ` ${Configuration.get('imageMathmlAttribute')}=\"`;\n          let mathmlStart = imgCode.indexOf(mathmlStartToken);\n\n          if (mathmlStart === -1) {\n            mathmlStartToken = ' alt=\"';\n            mathmlStart = imgCode.indexOf(mathmlStartToken);\n          }\n\n          if (mathmlStart !== -1) {\n            mathmlStart += mathmlStartToken.length;\n            const mathmlEnd = imgCode.indexOf('\"', mathmlStart);\n            const mathml = MathML.safeXmlDecode(imgCode.substring(mathmlStart, mathmlEnd));\n            let latexStartPosition = mathml.indexOf(token);\n\n            if (latexStartPosition !== -1) {\n              latexStartPosition += token.length;\n              const latexEndPosition = mathml.indexOf('</annotation>', latexStartPosition);\n              const latex = mathml.substring(latexStartPosition, latexEndPosition);\n\n              const replaceText = `$$${Util.htmlEntitiesDecode(latex)}$$`;\n              const start = code.substring(0, imgList[i].start + carry);\n              const end = code.substring(imgList[i].end + carry);\n              code = start + replaceText + end;\n              carry += replaceText.length - (imgList[i].end - imgList[i].start);\n            }\n          }\n        }\n      }\n    }\n\n    return code;\n  }\n\n  /**\n   * Parses end HTML code. The end HTML code is HTML code with embedded images\n   * or LaTeX formulas created with MathType. <br>\n   * By default this method converts the formula images and LaTeX strings in MathML. <br>\n   * If image mode is enabled the images will not be converted into MathML. For further information see {@link http://www.wiris.com/plugins/docs/full-mathml-mode}.\n   * @param {string} code - HTML to be parsed\n   * @returns {string} the HTML code parsed.\n   */\n  static endParse(code) {\n    // Transform LaTeX ocurrences to MathML elements.\n    const codeEndParsedEditMode = Parser.endParseEditMode(code);\n    // Transform img elements to MathML elements.\n    const codeEndParseSaveMode = Parser.endParseSaveMode(codeEndParsedEditMode);\n    return codeEndParseSaveMode;\n  }\n\n  /**\n   * Parses end HTML code depending on the edit mode.\n   * - LaTeX is an enabled parse mode, all LaTeX occurrences will be converted into MathML.\n   * @param {string} code - HTML code to be parsed.\n   * @returns {string} HTML code parsed.\n   */\n  static endParseEditMode(code) {\n    // Converting LaTeX to images.\n    if (Configuration.get('parseModes').indexOf('latex') !== -1) {\n      let output = '';\n      let endPosition = 0;\n      let startPosition = code.indexOf('$$');\n      while (startPosition !== -1) {\n        output += code.substring(endPosition, startPosition);\n        endPosition = code.indexOf('$$', startPosition + 2);\n\n        if (endPosition !== -1) {\n          // Before, it was a condition here to execute the next codelines\n          // 'latex.indexOf('<') == -1'.\n          // We don't know why it was used, but seems to have a conflict with\n          // latex formulas that contains '<'.\n          const latex = code.substring(startPosition + 2, endPosition);\n          const decodedLatex = Util.htmlEntitiesDecode(latex);\n          let mathml = Latex.getMathMLFromLatex(decodedLatex, true);\n          if (!Configuration.get('saveHandTraces')) {\n            // Remove hand traces.\n            mathml = MathML.removeAnnotation(mathml, 'application/json');\n          }\n          output += mathml;\n          endPosition += 2;\n        } else {\n          output += '$$';\n          endPosition = startPosition + 2;\n        }\n\n        startPosition = code.indexOf('$$', endPosition);\n      }\n\n      output += code.substring(endPosition, code.length);\n      code = output;\n    }\n\n    return code;\n  }\n\n  /**\n   * Parses end HTML code depending on the save mode. Converts all\n   * images into the element determined by the save mode:\n   * - xml: Parses images formulas into MathML.\n   * - safeXml: Parses images formulas into safeMAthML\n   * - base64: Parses images into base64 images.\n   * - image: Parse images into images (no parsing)\n   * @param {string} code - HTML code to be parsed\n   * @returns {string} HTML code parsed.\n   */\n  static endParseSaveMode(code) {\n    if (Configuration.get('saveMode')) {\n      if (Configuration.get('saveMode') === 'safeXml') {\n        code = Parser.codeImgTransform(code, 'img2mathml');\n      } else if (Configuration.get('saveMode') === 'xml') {\n        code = Parser.codeImgTransform(code, 'img2mathml');\n      } else if (Configuration.get('saveMode') === 'base64' && Configuration.get('base64savemode') === 'image') {\n        code = Parser.codeImgTransform(code, 'img264');\n      }\n    }\n\n    return code;\n  }\n\n  /**\n   * Returns the result to call showimage service with the formula md5 as parameter.\n   *  The result could be:\n   * - {'status' : warning'} : The image associated to the MathML md5 is not in cache.\n   * - {'status' : 'ok' ...} : The image associated to the MathML md5 is in cache.\n   * @param {Object[]} data - object containing showimage service parameters.\n   * @param {string} language - string containing the language of the formula.\n   * @returns {Object} JSON object containing showimage response.\n   */\n  static createShowImageSrc(data, language) {\n    const dataMd5 = [];\n    const renderParams = ['mml', 'color', 'centerbaseline', 'zoom', 'dpi', 'fontSize', 'fontFamily', 'defaultStretchy', 'backgroundColor', 'format'];\n    renderParams.forEach((key) => {\n      const param = renderParams[key];\n      if (typeof data[param] !== 'undefined') {\n        dataMd5[param] = data[param];\n      }\n    });\n    // Data variables to get.\n    const dataObject = {};\n    Object.keys(data).forEach((key) => {\n      // We don't need mathml in this request we try to get cached.\n      // Only need the formula md5 calculated before.\n      if (key !== 'mml') {\n        dataObject[key] = data[key];\n      }\n    });\n\n    dataObject.formula = com.wiris.js.JsPluginTools.md5encode(Util.propertiesToString(dataMd5));\n    dataObject.lang = (typeof language === 'undefined') ? 'en' : language;\n    dataObject.version = Configuration.get('version');\n\n    const result = ServiceProvider.getService('showimage', Util.httpBuildQuery(dataObject), true);\n    return result;\n  }\n\n  /**\n   * Transform html img tags inside a html code to mathml, base64 img tags (i.e with base64 on src)\n   * or showimage img tags (i.e with showimage.php on src)\n   * @param  {string} code - HTML code\n   * @param  {string} mode - base642showimage or img2mathml or img264 transform.\n   * @returns {string} html - code transformed.\n   */\n  static codeImgTransform(code, mode) {\n    let output = '';\n    let endPosition = 0;\n    const pattern = /<img/gi;\n    const patternLength = pattern.source.length;\n\n    while (pattern.test(code)) {\n      const startPosition = pattern.lastIndex - patternLength;\n      output += code.substring(endPosition, startPosition);\n\n      let i = startPosition + 1;\n\n      while (i < code.length && endPosition <= startPosition) {\n        const character = code.charAt(i);\n\n        if (character === '\"' || character === '\\'') {\n          const characterNextPosition = code.indexOf(character, i + 1);\n\n          if (characterNextPosition === -1) {\n            i = code.length; // End while.\n          } else {\n            i = characterNextPosition;\n          }\n        } else if (character === '>') {\n          endPosition = i + 1;\n        }\n\n        i += 1;\n      }\n\n      if (endPosition < startPosition) { // The img tag is stripped.\n        output += code.substring(startPosition, code.length);\n        return output;\n      }\n      let imgCode = code.substring(startPosition, endPosition);\n      const imgObject = Util.createObject(imgCode);\n      let xmlCode = imgObject.getAttribute(Configuration.get('imageMathmlAttribute'));\n      let convertToXml;\n      let convertToSafeXml;\n\n      if (mode === 'base642showimage') {\n        if (xmlCode == null) {\n          xmlCode = imgObject.getAttribute('alt');\n        }\n        xmlCode = MathML.safeXmlDecode(xmlCode);\n        imgCode = Parser.mathmlToImgObject(document, xmlCode, null, null);\n        output += Util.createObjectCode(imgCode);\n      } else if (mode === 'img2mathml') {\n        if (Configuration.get('saveMode')) {\n          if (Configuration.get('saveMode') === 'safeXml') {\n            convertToXml = true;\n            convertToSafeXml = true;\n          } else if (Configuration.get('saveMode') === 'xml') {\n            convertToXml = true;\n            convertToSafeXml = false;\n          }\n        }\n        output += Util.getWIRISImageOutput(imgCode, convertToXml, convertToSafeXml);\n      } else if (mode === 'img264') {\n        if (xmlCode === null) {\n          xmlCode = imgObject.getAttribute('alt');\n        }\n        xmlCode = MathML.safeXmlDecode(xmlCode);\n\n        const properties = {};\n        properties.base64 = 'true';\n        imgCode = Parser.mathmlToImgObject(document, xmlCode, properties, null);\n        // Metrics.\n        Image.setImgSize(imgCode, imgCode.src, true);\n        output += Util.createObjectCode(imgCode);\n      }\n    }\n    output += code.substring(endPosition, code.length);\n    return output;\n  }\n\n  /**\n   * Converts all occurrences of MathML to the corresponding image.\n   * @param {string} content - string with valid MathML code.\n   * The MathML code doesn't contain semantics.\n   * @param {Constants} characters - Constant object containing xmlCharacters\n   * or safeXmlCharacters relation.\n   * @param {string} language - a valid language code\n   * in order to generate formula accessibility.\n   * @returns {string} The input string with all the MathML\n   * occurrences replaced by the corresponding image.\n   */\n  static parseMathmlToImg(content, characters, language) {\n    let output = '';\n    const mathTagBegin = `${characters.tagOpener}math`;\n    const mathTagEnd = `${characters.tagOpener}/math${characters.tagCloser}`;\n    let start = content.indexOf(mathTagBegin);\n    let end = 0;\n\n    while (start !== -1) {\n      output += content.substring(end, start);\n      // Avoid WIRIS images to be parsed.\n      const imageMathmlAtrribute = content.indexOf(Configuration.get('imageMathmlAttribute'));\n      end = content.indexOf(mathTagEnd, start);\n\n      if (end === -1) {\n        end = content.length - 1;\n      } else if (imageMathmlAtrribute !== -1) {\n        // First close tag of img attribute\n        // If a mathmlAttribute exists should be inside a img tag.\n        end += content.indexOf('/>', start);\n      } else {\n        end += mathTagEnd.length;\n      }\n\n      if (!MathML.isMathmlInAttribute(content, start) && imageMathmlAtrribute === -1) {\n        let mathml = content.substring(start, end);\n        mathml = (characters.id === Constants.safeXmlCharacters.id)\n          ? MathML.safeXmlDecode(mathml)\n          : MathML.mathMLEntities(mathml);\n        output += Util.createObjectCode(Parser.mathmlToImgObject(document, mathml, null, language));\n      } else {\n        output += content.substring(start, end);\n      }\n\n      start = content.indexOf(mathTagBegin, end);\n    }\n\n    output += content.substring(end, content.length);\n    return output;\n  }\n}\n\n// Mutation observers to avoid wiris image formulas class be removed.\nif (typeof MutationObserver !== 'undefined') {\n  const mutationObserver = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n      if (mutation.oldValue === Configuration.get('imageClassName')\n        && mutation.attributeName === 'class'\n        && mutation.target.className.indexOf(Configuration.get('imageClassName')) === -1) {\n        mutation.target.className = Configuration.get('imageClassName');\n      }\n    });\n  });\n\n  Parser.observer = Object.create(mutationObserver);\n  Parser.observer.Config = { attributes: true, attributeOldValue: true };\n  // We use own default config.\n  Parser.observer.observe = function name(target) {\n    Object.getPrototypeOf(this).observe(target, this.Config);\n  };\n}\n","/* eslint-disable class-methods-use-this */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-extra-semi */\n\n// The rules above are disabled because we are implementing\n// an external interface.\n\n\nexport default class EditorListener {\n  /**\n   * @classdesc\n   * Determines if the content of the\n   * MathType Editor has changes.\n   * @implements {EditorListeners}\n   * @constructs\n   */\n  constructor() {\n    /**\n     * Indicates if the content of the editor has changed.\n     * @type {Boolean}\n     */\n    this.isContentChanged = false;\n\n    /**\n     * Indicates if the listener should be waiting for changes in the editor.\n     * @type {Boolean}\n     */\n    this.waitingForChanges = false;\n  }\n\n  /**\n   * Sets {@link EditorListener.isContentChanged} property.\n   * @param {Boolean} value - The new vlue.\n   */\n  setIsContentChanged(value) {\n    this.isContentChanged = value;\n  }\n\n  /**\n   * Returns true if the content of the editor has been changed, false otherwise.\n   * @return {Boolean}\n   */\n  getIsContentChanged() {\n    return this.isContentChanged;\n  };\n\n  /**\n   * Determines if the EditorListener should wait for any changes.\n   * @param {Boolean} value - True if the editor should wait for changes, false otherwise.\n   */\n  setWaitingForChanges(value) {\n    this.waitingForChanges = value;\n  }\n\n  /**\n   * EditorListener method to overwrite.\n   * @type {JsEditor}\n   * @ignore\n   */\n  caretPositionChanged(_editor) { };\n\n  /**\n   * EditorListener method to overwrite\n   * @type {JsEditor}\n   * @ignore\n   */\n  clipboardChanged(_editor) { };\n\n  /**\n   * Determines if the content of an editor has been changed.\n   * @param {JsEditor} editor - editor object.\n   */\n  contentChanged(_editor) {\n    if (this.waitingForChanges === true && this.isContentChanged === false) {\n      this.isContentChanged = true;\n    }\n  }\n\n  /**\n   * EditorListener method to overwrite\n   * @param {JsEditor} editor - The editor instance.\n   */\n  styleChanged(_editor) {\n  }\n\n  /**\n   * EditorListener method to overwrite\n   * @param {JsEditor} - The editor instance.\n   */\n  transformationReceived(_editor) {\n  }\n}\n","import Configuration from './configuration';\nimport EditorListener from './editorlistener';\nimport Listeners from './listeners';\nimport MathML from './mathml';\nimport Util from './util';\n\nexport default class ContentManager {\n  /**\n   * @classdesc\n   * This class represents a modal dialog, managing the following:\n   * - The insertion of content into the current instance of the {@link ModalDialog} class.\n   * - The actions to be done once the modal object has been submitted\n   *   (submitAction} method).\n   * - The update of the content when the {@link ModalDialog} class is also updated,\n   *   for example when ModalDialog is re-opened.\n   * - The communication between the {@link ModalDialog} class and itself, if the content\n   *   has been changed (hasChanges} method).\n   * @constructs\n   * @param {Object} contentManagerAttributes - Object containing all attributes needed to\n   * create a new instance.\n   */\n  constructor(contentManagerAttributes) {\n    /**\n     * An object containing MathType editor parameters. See\n     * http://docs.wiris.com/en/mathtype/mathtype_web/sdk-api/parameters for further information.\n     * @type {Object}\n     */\n    this.editorAttributes = {};\n    if ('editorAttributes' in contentManagerAttributes) {\n      this.editorAttributes = contentManagerAttributes.editorAttributes;\n    } else {\n      throw new Error('ContentManager constructor error: editorAttributes property missed.');\n    }\n\n    /**\n     * CustomEditors instance. Contains the custom editors.\n     * @type {CustomEditors}\n     */\n    this.customEditors = null;\n    if ('customEditors' in contentManagerAttributes) {\n      this.customEditors = contentManagerAttributes.customEditors;\n    }\n\n    /**\n* Environment properties. This object contains data about the integration platform.\n* @type {Object}\n* @property {String} editor - Editor name. Usually the HTML editor.\n* @property {String} mode - Save mode. Xml by default.\n* @property {String} version - Plugin version.\n  */\n    this.environment = {};\n    if ('environment' in contentManagerAttributes) {\n      this.environment = contentManagerAttributes.environment;\n    } else {\n      throw new Error('ContentManager constructor error: environment property missed');\n    }\n\n    /**\n      * ContentManager language.\n      * @type {String}\n      */\n    this.language = '';\n    if ('language' in contentManagerAttributes) {\n      this.language = contentManagerAttributes.language;\n    } else {\n      throw new Error('ContentManager constructor error: language property missed');\n    }\n\n    /**\n    * {@link EditorListener} instance. Manages the changes inside the editor.\n    * @type {EditorListener}\n    */\n    this.editorListener = new EditorListener();\n\n    /**\n     * MathType editor instance.\n     * @type {JsEditor}\n     */\n    this.editor = null;\n\n    /**\n     * Navigator user agent.\n     * @type {String}\n     */\n    this.ua = navigator.userAgent.toLowerCase();\n\n    /**\n     * Mobile device properties object\n     * @type {DeviceProperties}\n     */\n    this.deviceProperties = {};\n    this.deviceProperties.isAndroid = this.ua.indexOf('android') > -1;\n    this.deviceProperties.isIOS = ((this.ua.indexOf('ipad') > -1) || (this.ua.indexOf('iphone') > -1));\n\n    /**\n     * Custom editor toolbar.\n     * @type {String}\n     */\n    this.toolbar = null;\n\n    /**\n     * Instance of the {@link ModalDialog} class associated with the current\n     * {@link ContentManager} instance.\n     * @type {ModalDialog}\n     */\n    this.modalDialogInstance = null;\n\n    /**\n     * ContentManager listeners.\n     * @type {Listeners}\n     */\n    this.listeners = new Listeners();\n\n    /**\n     * MathML associated to the ContentManager instance.\n     * @type {String}\n     */\n    this.mathML = null;\n\n    /**\n     * Indicates if the edited element is a new one or not.\n     * @type {Boolean}\n     */\n    this.isNewElement = true;\n\n    /**\n     * {@link IntegrationModel} instance. Needed to call wrapper methods.\n     * @type {IntegrationModel}\n     */\n    this.integrationModel = null;\n\n    /**\n     * Indicates if the editor is loaded.\n     * @type {Boolean}\n     */\n    this.isEditorLoaded = false;\n  }\n\n  /**\n   * Adds a new listener to the current {@link ContentManager} instance.\n   * @param {Object} listener - The listener to be added.\n   */\n  addListener(listener) {\n    this.listeners.add(listener);\n  }\n\n  /**\n   * Sets an instance of {@link IntegrationModel} class to the current {@link ContentManager}\n   * instance.\n   * @param {IntegrationModel} integrationModel - The {@link IntegrationModel} instance.\n   */\n  setIntegrationModel(integrationModel) {\n    this.integrationModel = integrationModel;\n  }\n\n  /**\n   * Sets the {@link ModalDialog} instance into the current {@link ContentManager} instance.\n   * @param {ModalDialog} modalDialogInstance - The {@link ModalDialog} instance\n   */\n  setModalDialogInstance(modalDialogInstance) {\n    this.modalDialogInstance = modalDialogInstance;\n  }\n\n  /**\n   * Inserts the content into the current {@link ModalDialog} instance updating\n   * the title and inserting the JavaScript editor.\n   */\n  insert() {\n    // Before insert the editor we update the modal object title to avoid weird render display.\n    this.updateTitle(this.modalDialogInstance);\n    this.insertEditor(this.modalDialogInstance);\n  }\n\n  /**\n   * Inserts MathType editor into the {@link ModalDialog.contentContainer}. It waits until\n   * editor's JavaScript is loaded.\n   */\n  insertEditor() {\n    // To know if editor JavaScript is loaded we need to wait until\n    // window.com.wiris.jsEditor.JsEditor.newInstance is ready.\n    if (window.com && window.com.wiris && window.com.wiris.jsEditor\n        && window.com.wiris.jsEditor.JsEditor && window.com.wiris.jsEditor.JsEditor.newInstance) {\n      this.editor = window.com.wiris.jsEditor.JsEditor.newInstance(this.editorAttributes);\n      this.editor.insertInto(this.modalDialogInstance.contentContainer);\n      this.editor.focus();\n      if (this.modalDialogInstance.rtl) {\n        this.editor.action('rtl');\n      }\n      // Setting div in rtl in case of it's activated.\n      if (this.editor.getEditorModel().isRTL()) {\n        this.editor.element.style.direction = 'rtl';\n      }\n\n      // Editor listener: this object manages the changes logic of editor.\n      this.editor.getEditorModel().addEditorListener(this.editorListener);\n\n      // iOS events.\n      if (this.modalDialogInstance.deviceProperties.isIOS) {\n        setTimeout(function hide() { this.modalDialogInstance.hideKeyboard(); }, 400);\n        const formulaDisplayDiv = document.getElementsByClassName('wrs_formulaDisplay')[0];\n        Util.addEvent(formulaDisplayDiv, 'focus', this.modalDialogInstance.handleOpenedIosSoftkeyboard);\n        Util.addEvent(formulaDisplayDiv, 'blur', this.modalDialogInstance.handleClosedIosSoftkeyboard);\n      }\n      // Fire onLoad event. Necessary to set the MathML into the editor\n      // after is loaded.\n      this.listeners.fire('onLoad', {});\n      this.isEditorLoaded = true;\n    } else {\n      setTimeout(ContentManager.prototype.insertEditor.bind(this), 100);\n    }\n  }\n\n  /**\n   * Initializes the current class by loading MathType script.\n   */\n  init() {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    let editorUrl = Configuration.get('editorUrl');\n    // We create an object url for parse url string and work more efficiently.\n    const urlObject = document.createElement('a');\n    urlObject.href = editorUrl;\n\n    // Change to https if necessary.\n    if (window.location.href.indexOf('https://') === 0) {\n      // It check if browser is https and configuration is http.\n      // If this is so, we will replace protocol.\n      if (urlObject.protocol === 'http:') {\n        urlObject.protocol = 'https:';\n      }\n    }\n\n    // Check protocol and remove port if it's standard.\n    if (urlObject.port === '80' || urlObject.port === '443') {\n      editorUrl = `${urlObject.protocol}//${urlObject.hostname}/${urlObject.pathname}`;\n    } else {\n      editorUrl = `${urlObject.protocol}//${urlObject.hostname}:${urlObject.port}/${urlObject.pathname}`;\n    }\n\n    // Editor stats. Use environment property to set it.\n    const stats = {};\n    if ('editor' in this.environment) {\n      stats.editor = this.environment.editor;\n    } else {\n      stats.editor = 'unknown';\n    }\n\n    if ('mode' in this.environment) {\n      stats.mode = this.environment.mode;\n    } else {\n      stats.mode = Configuration.get('saveMode');\n    }\n\n    if ('version' in this.environment) {\n      stats.version = this.environment.version;\n    } else {\n      stats.version = Configuration.get('version');\n    }\n\n    // Load editor URL. We add stats as GET params.\n    script.src = `${editorUrl}?lang=${this.language}&stats-editor=${stats.editor}&stats-mode=${stats.mode}&stats-version=${stats.version}`;\n\n    document.getElementsByTagName('head')[0].appendChild(script);\n  }\n\n  /**\n  * Sets the {@link ContentManager.editor} initial content.\n  */\n  setInitialContent() {\n    if (!this.isNewElement) {\n      this.setMathML(this.mathML);\n    }\n  }\n\n  /**\n   * Sets a MathML into {@link ContentManager.editor} instance.\n   * @param {String} mathml - MathML string.\n   * @param {Boolean} focusDisabled - If true editor don't get focus after the MathML is set.\n   * False by default.\n   */\n  setMathML(mathml, focusDisabled) {\n    // By default focus is enabled.\n    if (typeof focusDisabled === 'undefined') {\n      focusDisabled = false;\n    }\n    // Using setMathML method is not a change produced by the user but for the API\n    // so we set to false the contentChange property of editorListener.\n    this.editor.setMathMLWithCallback(mathml, () => {\n      this.editorListener.setWaitingForChanges(true);\n    });\n\n    // We need to wait a little until the callback finish.\n    setTimeout(() => {\n      this.editorListener.setIsContentChanged(false);\n    }, 500);\n\n    // In some scenarios - like closing modal object - editor mustn't be focused.\n    if (!focusDisabled) {\n      this.onFocus();\n    }\n  }\n\n  /**\n   * Sets the focus to the current instance of {@link ContentManager.editor}. Triggered by\n   * {@link ModalDialog.focus}.\n   */\n  onFocus() {\n    if (typeof this.editor !== 'undefined' && this.editor != null) {\n      this.editor.focus();\n    }\n  }\n\n  /**\n   * Updates the edition area by calling {@link IntegrationModel.updateFormula}.\n   * Triggered by {@link ModalDialog.submitAction}.\n   */\n  submitAction() {\n    if (!this.editor.isFormulaEmpty()) {\n      let mathML = this.editor.getMathMLWithSemantics();\n      // Add class for custom editors.\n      if (this.customEditors.getActiveEditor() !== null) {\n        const { toolbar } = this.customEditors.getActiveEditor();\n        mathML = MathML.addCustomEditorClassAttribute(mathML, toolbar);\n      } else {\n        // We need - if exists - the editor name from MathML\n        // class attribute.\n        Object.keys(this.customEditors.editors).forEach((key) => {\n          mathML = MathML.removeCustomEditorClassAttribute(mathML, key);\n        });\n      }\n      const mathmlEntitiesEncoded = MathML.mathMLEntities(mathML);\n      this.integrationModel.updateFormula(mathmlEntitiesEncoded);\n    } else {\n      this.integrationModel.updateFormula(null);\n    }\n\n    this.customEditors.disable();\n    this.integrationModel.notifyWindowClosed();\n\n    // Set disabled focus to prevent lost focus.\n    this.setEmptyMathML();\n    this.customEditors.disable();\n  }\n\n  /**\n   * Sets an empty MathML as {@link ContentManager.editor} content.\n   */\n  setEmptyMathML() {\n    // As second argument we pass.\n    if (this.deviceProperties.isAndroid || this.deviceProperties.isIOS) {\n      // We need to set a empty annotation in order to maintain editor in Hand mode.\n      // Adding dir rtl in case of it's activated.\n      if (this.editor.getEditorModel().isRTL()) {\n        this.setMathML('<math dir=\"rtl\"><semantics><annotation encoding=\"application/json\">[]</annotation></semantics></math>', true);\n      } else {\n        this.setMathML('<math><semantics><annotation encoding=\"application/json\">[]</annotation></semantics></math>', true);\n      }\n    } else if (this.editor.getEditorModel().isRTL()) {\n      this.setMathML('<math dir=\"rtl\"/>', true);\n    } else {\n      this.setMathML('<math/>', true);\n    }\n  }\n\n  /**\n   * Open event. Triggered by {@link ModalDialog.open}. Does the following:\n   * - Updates the {@link ContentManager.editor} content\n   *   (with an empty MathML or an existing formula),\n   * - Updates the {@link ContentManager.editor} toolbar.\n   * - Recovers the the focus.\n   */\n  onOpen() {\n    if (this.isNewElement) {\n      this.setEmptyMathML();\n    } else {\n      this.setMathML(this.mathML);\n    }\n    this.updateToolbar();\n    this.onFocus();\n  }\n\n  /**\n   * Sets the correct toolbar depending if exist other custom toolbars\n   * at the same time (e.g: Chemistry).\n   */\n  updateToolbar() {\n    this.updateTitle(this.modalDialogInstance);\n    const customEditor = this.customEditors.getActiveEditor();\n    if (customEditor) {\n      const toolbar = customEditor.toolbar\n        ? customEditor.toolbar\n        : _wrs_int_wirisProperties.toolbar;\n\n      if (this.toolbar == null || this.toolbar !== toolbar) {\n        this.setToolbar(toolbar);\n      }\n    } else {\n      const toolbar = this.getToolbar();\n      if (this.toolbar == null || this.toolbar !== toolbar) {\n        this.setToolbar(toolbar);\n        this.customEditors.disable();\n      }\n    }\n  }\n\n  /**\n   * Updates the current {@link ModalDialog.title}. If a {@link CustomEditors} is enabled\n   * sets the custom editor title. Otherwise sets the default title.\n   */\n  updateTitle() {\n    const customEditor = this.customEditors.getActiveEditor();\n    if (customEditor) {\n      this.modalDialogInstance.setTitle(customEditor.title);\n    } else {\n      this.modalDialogInstance.setTitle('MathType');\n    }\n  }\n\n  /**\n   * Returns the editor toolbar, depending on the configuration local or server side.\n   * @returns {String} - Toolbar identifier.\n   */\n  getToolbar() {\n    let toolbar = 'general';\n    if ('toolbar' in this.editorAttributes) {\n      ({ toolbar } = this.editorAttributes);\n    }\n    // TODO: Change global integration variable for integration custom toolbar.\n    if (toolbar === 'general') {\n      // eslint-disable-next-line camelcase\n      toolbar = (typeof _wrs_int_wirisProperties === 'undefined' || typeof _wrs_int_wirisProperties.toolbar === 'undefined') ? 'general' : _wrs_int_wirisProperties.toolbar;\n    }\n\n    return toolbar;\n  }\n\n  /**\n   * Sets the current {@link ContentManager.editor} instance toolbar.\n   * @param {String} toolbar - The toolbar name.\n   */\n  setToolbar(toolbar) {\n    this.toolbar = toolbar;\n    this.editor.setParams({ toolbar: this.toolbar });\n  }\n\n  /**\n   * Returns true if the content of the editor has been changed. The logic of the changes\n   * is delegated to {@link EditorListener} class.\n   * @returns {Boolean} True if the editor content has been changed. False otherwise.\n   */\n  hasChanges() {\n    return (!this.editor.isFormulaEmpty() && this.editorListener.getIsContentChanged());\n  }\n\n  /**\n   * Handle keyboard events detected in modal when elements of this class intervene.\n   * @param {KeyboardEvent} keyboardEvent - The keyboard event.\n   */\n  onKeyDown(keyboardEvent) {\n    if (keyboardEvent.key !== undefined && keyboardEvent.repeat === false) {\n      if (keyboardEvent.key === 'Escape' || keyboardEvent.key === 'Esc') { // Code to detect Esc event.\n        // There should be only one element with class name 'wrs_pressed' at the same time.\n        let list = document.getElementsByClassName('wrs_expandButton wrs_expandButtonFor3RowsLayout wrs_pressed');\n        if (list.length === 0) {\n          list = document.getElementsByClassName('wrs_expandButton wrs_expandButtonFor2RowsLayout wrs_pressed');\n          if (list.length === 0) {\n            list = document.getElementsByClassName('wrs_select wrs_pressed');\n            if (list.length === 0) {\n              this.modalDialogInstance.cancelAction();\n              keyboardEvent.stopPropagation();\n              keyboardEvent.preventDefault();\n            }\n          }\n        }\n      } else if (keyboardEvent.shiftKey && keyboardEvent.key === 'Tab') { // Code to detect shift Tab event.\n        if (document.activeElement === this.modalDialogInstance.submitButton) {\n          // Focus is on OK button.\n          this.editor.focus();\n          keyboardEvent.stopPropagation();\n          keyboardEvent.preventDefault();\n        } else {\n          const element = document.querySelector('[title=\"Manual\"]');\n          if (document.activeElement === element) {\n            // Focus is on editor help.\n            this.modalDialogInstance.cancelButton.focus();\n            keyboardEvent.stopPropagation();\n            keyboardEvent.preventDefault();\n          }\n        }\n      } else if (keyboardEvent.key === 'Tab') { // Code to detect Tab event.\n        if (document.activeElement === this.modalDialogInstance.cancelButton) {\n          // Focus is on cancel button.\n          const element = document.querySelector('[title=\"Manual\"]');\n          element.focus();\n          keyboardEvent.stopPropagation();\n          keyboardEvent.preventDefault();\n        } else {\n          // There should be only one element with class name 'wrs_formulaDisplay'.\n          const element = document.getElementsByClassName('wrs_formulaDisplay')[0];\n          if (element.getAttribute('class') === 'wrs_formulaDisplay wrs_focused') {\n            // Focus is on formuladisplay.\n            this.modalDialogInstance.submitButton.focus();\n            keyboardEvent.stopPropagation();\n            keyboardEvent.preventDefault();\n          }\n        }\n      }\n    }\n  }\n}\n","/**\n * A custom editor is MathType editor with a different\n * @typedef {Object} CustomEditor\n * @property {String} CustomEditor.name - Custom editor name.\n * @property {String} CustomEditor.toolbar - Custom editor toolbar.\n * @property {String} CustomEditor.icon - Custom editor icon.\n * @property {String} CustomEditor.confVariable - Configuration property to manage\n * the availability of the custom editor.\n * @property {String} CustomEditor.title - Custom editor modal dialog title.\n * @property {String} CustomEditor.tooltip - Custom editor icon tooltip.\n */\n\nexport default class CustomEditors {\n  /**\n   * @classdesc\n   * This class represents the MathType custom editors manager.\n   * A custom editor is MathType editor with a custom  toolbar.\n   * This class associates a {@link CustomEditor} to:\n   * - It's own formulas\n   * - A custom toolbar\n   * - An icon to open it from a HTML editor.\n   * - A tooltip for the icon.\n   * - A global variable to enable or disable it globally.\n   * @constructs\n   */\n  constructor() {\n    /**\n     * The custom editors.\n     * @type {Array.<CustomEditor>}\n     */\n\n    this.editors = [];\n    /**\n     * The active editor name.\n     * @type {String}\n     */\n    this.activeEditor = 'default';\n  }\n\n  /**\n   * Adds a {@link CustomEditor} to editors array.\n   * @param {String} editorName - The editor name.\n   * @param {CustomEditor} editorParams - The custom editor parameters.\n   */\n  addEditor(editorName, editorParams) {\n    const customEditor = {};\n    customEditor.name = editorParams.name;\n    customEditor.toolbar = editorParams.toolbar;\n    customEditor.icon = editorParams.icon;\n    customEditor.confVariable = editorParams.confVariable;\n    customEditor.title = editorParams.title;\n    customEditor.tooltip = editorParams.tooltip;\n    this.editors[editorName] = customEditor;\n  }\n\n  /**\n   * Enables a {@link CustomEditor}.\n   * @param {String} customEditorName - The custom editor name.\n   */\n  enable(customEditorName) {\n    this.activeEditor = customEditorName;\n  }\n\n  /**\n   * Disables a {@link CustomEditor}.\n   */\n  disable() {\n    this.activeEditor = 'default';\n  }\n\n  /**\n   * Returns the active editor.\n   * @return {CustomEditor} - A {@link CustomEditor} if a custom editor is enabled. Null otherwise.\n   */\n  getActiveEditor() {\n    if (this.activeEditor !== 'default') {\n      return this.editors[this.activeEditor];\n    }\n    return null;\n  }\n}\n","/**\n * Represents the configuration properties generated from the frontend (JavaScript variables).\n * @type {Object}\n * @property {string} imageClassName - Default MathType formula image class.\n * @property {string} imageClassName - Default MathType CAS image class.\n * @ignore\n */\nconst jsProperties = {\n  imageCustomEditorName: 'data-custom-editor',\n  imageClassName: 'Wirisformula',\n  CASClassName: 'Wiriscas',\n};\nexport default jsProperties;\n","export default class Event {\n  /**\n   * @classdesc\n   * This class represents a custom event. Events should be fired by the {@link Listener} class.\n   *\n   * ```js\n   *  let customEvent = new Event();\n   *  customEvent.properties = {};\n   *\n   *  let listeners = new Listeners();\n   *  listeners.newListener(eventName, callback);\n   *\n   *  listeners.fire(eventName, customEvent) *\n   * ```\n   * @constructs\n   */\n  constructor() {\n    /**\n     * Indicates if the event should be cancelled.\n     * @type {Boolean}\n     */\n\n    this.cancelled = false;\n    /**\n     * Indicates if the event should be prevented.\n     * @type {Boolean}\n     */\n    this.defaultPrevented = false;\n  }\n\n  /**\n   * Cancels the event.\n   */\n  cancel() {\n    this.cancelled = true;\n  }\n\n  /**\n   * Prevents the default action.\n   */\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n}\n","/**\n\n */\nexport default class PopUpMessage {\n  /**\n   * @classdesc\n   * This class represents a dialog message overlaying a DOM element in order to\n   * accept / cancel discard changes. The dialog can be closed i.e the overlay disappears\n   * o canceled. In this last case a callback function should be called.\n   * @constructs\n   * @param {Object} popupMessageAttributes - Object containing popup properties.\n   * @param {HTMLElement} popupMessageAttributes.overlayElement - Element to overlay.\n   * @param {Object} popupMessageAttributes.callbacks - Contains callback\n   * methods for close and cancel actions.\n   * @param {Object} popupMessageAttributes.strings - Contains all the strings needed.\n   */\n  constructor(popupMessageAttributes) {\n    /**\n     * Element to be overlaid when the popup appears.\n     */\n    this.overlayElement = popupMessageAttributes.overlayElement;\n\n    this.callbacks = popupMessageAttributes.callbacks;\n\n    /**\n     * HTMLElement element to wrap all HTML elements inside the popupMessage.\n     */\n    this.overlayWrapper = this.overlayElement.appendChild(document.createElement('div'));\n    this.overlayWrapper.setAttribute('class', 'wrs_popupmessage_overlay_envolture');\n\n    /**\n     * HTMLElement to display the popup message, close button and cancel button.\n     */\n    this.message = this.overlayWrapper.appendChild(document.createElement('div'));\n    this.message.id = 'wrs_popupmessage';\n    this.message.setAttribute('class', 'wrs_popupmessage_panel');\n    this.message.setAttribute('role', 'dialog');\n    this.message.setAttribute('aria-describedby', 'description_txt');\n    const paragraph = document.createElement('p');\n    const text = document.createTextNode(popupMessageAttributes.strings.message);\n    paragraph.appendChild(text);\n    paragraph.id = 'description_txt';\n    this.message.appendChild(paragraph);\n\n    /**\n     * HTML element overlaying the overlayElement.\n     */\n    const overlay = this.overlayWrapper.appendChild(document.createElement('div'));\n    overlay.setAttribute('class', 'wrs_popupmessage_overlay');\n    // We create a overlay that close popup message on click in there\n    overlay.addEventListener('click', this.cancelAction.bind(this));\n\n    /**\n     * HTML element containing cancel and close buttons.\n     */\n    this.buttonArea = this.message.appendChild(document.createElement('div'));\n    this.buttonArea.setAttribute('class', 'wrs_popupmessage_button_area');\n    this.buttonArea.id = 'wrs_popup_button_area';\n\n    // Close button arguments.\n    const buttonSubmitArguments = {\n      class: 'wrs_button_accept',\n      innerHTML: popupMessageAttributes.strings.submitString,\n      id: 'wrs_popup_accept_button',\n    };\n\n    /**\n     * Close button arguments.\n     */\n    this.closeButton = this.createButton(buttonSubmitArguments, this.closeAction.bind(this));\n    this.buttonArea.appendChild(this.closeButton);\n\n    // Cancel button arguments.\n    const buttonCancelArguments = {\n      class: 'wrs_button_cancel',\n      innerHTML: popupMessageAttributes.strings.cancelString,\n      id: 'wrs_popup_cancel_button',\n    };\n\n    /**\n     * Cancel button.\n     */\n    this.cancelButton = this.createButton(buttonCancelArguments, this.cancelAction.bind(this));\n    this.buttonArea.appendChild(this.cancelButton);\n  }\n\n  /**\n   * This method create a button with arguments and return button dom object\n   * @param {Object} parameters - An object containing id, class and innerHTML button text.\n   * @param {String} parameters.id - Button id.\n   * @param {String} parameters.class - Button class name.\n   * @param {String} parameters.innerHTML - Button innerHTML text.\n   * @param {Object} callback- Callback method to call on click event.\n   * @returns {HTMLElement} HTML button.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  createButton(parameters, callback) {\n    let element = {};\n    element = document.createElement('button');\n    element.setAttribute('id', parameters.id);\n    element.setAttribute('class', parameters.class);\n    element.innerHTML = parameters.innerHTML;\n    element.addEventListener('click', callback);\n\n    return element;\n  }\n\n  /**\n   * Shows the popupmessage containing a message, and two buttons\n   * to cancel the action or close the modal dialog.\n   */\n  show() {\n    if (this.overlayWrapper.style.display !== 'block') {\n      // Clear focus with blur for prevent press any key.\n      document.activeElement.blur();\n      this.overlayWrapper.style.display = 'block';\n      this.closeButton.focus();\n    } else {\n      this.overlayWrapper.style.display = 'none';\n      _wrs_modalWindow.focus();\n    }\n  }\n\n  /**\n   * This method cancels the popupMessage: the dialog disappears revealing the overlaid element.\n   * A callback method is called (if defined). For example a method to focus the overlaid element.\n   */\n  cancelAction() {\n    this.overlayWrapper.style.display = 'none';\n    if (typeof this.callbacks.cancelCallback !== 'undefined') {\n      this.callbacks.cancelCallback();\n    }\n  }\n\n  /**\n   * This method closes the popupMessage: the dialog disappears and the close callback is called.\n   * For example to close the overlaid element.\n   */\n  closeAction() {\n    this.cancelAction();\n    if (typeof this.callbacks.closeCallback !== 'undefined') {\n      this.callbacks.closeCallback();\n    }\n  }\n\n  /**\n   * Handle keyboard events detected in modal when elements of this class intervene.\n   * @param {KeyboardEvent} keyboardEvent - The keyboard event.\n   */\n  onKeyDown(keyboardEvent) {\n    if (keyboardEvent.key !== undefined) {\n      // Code to detect Esc event.\n      if (keyboardEvent.key === 'Escape' || keyboardEvent.key === 'Esc') {\n        this.cancelAction();\n        keyboardEvent.stopPropagation();\n        keyboardEvent.preventDefault();\n      } else if (keyboardEvent.key === 'Tab') { // Code to detect Tab event.\n        if (document.activeElement === this.closeButton) {\n          this.cancelButton.focus();\n        } else {\n          this.closeButton.focus();\n        }\n        keyboardEvent.stopPropagation();\n        keyboardEvent.preventDefault();\n      }\n    }\n  }\n}\n","import PopUpMessage from './popupmessage';\nimport Util from './util';\nimport Configuration from './configuration';\nimport Listeners from './listeners';\nimport StringManager from './stringmanager';\n\n/**\n * @typedef {Object} DeviceProperties\n * @property {String} DeviceProperties.orientation - Indicates of the orientation of the device.\n * @property {Boolean} DeviceProperties.isAndroid - True if the device is Android. False otherwise.\n * @property {Boolean} DeviceProperties.isIOS - True if the device is iOS. False otherwise.\n * @property {Boolean} DeviceProperties.isMobile - True if the device is a mobile one.\n * False otherwise.\n * @property {Boolean} DeviceProperties.isDesktop - True if the device is a desktop one.\n * False otherwise.\n */\n\nexport default class ModalDialog {\n  /**\n   * @classdesc\n   * This class represents a modal dialog. The modal dialog admits\n   * a {@link ContentManager} instance to manage the content of the dialog.\n   * @constructs\n   * @param {Object} modalDialogAttributes  - An object containing all modal dialog attributes.\n   */\n  constructor(modalDialogAttributes) {\n    this.attributes = modalDialogAttributes;\n\n    // Metrics.\n    const ua = navigator.userAgent.toLowerCase();\n    const isAndroid = ua.indexOf('android') > -1;\n    const isIOS = ((ua.indexOf('ipad') > -1) || (ua.indexOf('iphone') > -1));\n    this.iosSoftkeyboardOpened = false;\n    this.iosMeasureUnit = ua.indexOf('crios') === -1 ? '%' : 'vh';\n    this.iosDivHeight = `100%${this.iosMeasureUnit}`;\n\n    const deviceWidth = window.outerWidth;\n    const deviceHeight = window.outerHeight;\n\n    const landscape = deviceWidth > deviceHeight;\n    const portrait = deviceWidth < deviceHeight;\n\n    // TODO: Detect isMobile without using editor metrics.\n    const isLandscape = (landscape && this.attributes.height > deviceHeight);\n    const isPortrait = portrait && this.attributes.width > deviceWidth;\n    const isMobile = isLandscape || isPortrait;\n\n    // Obtain number of current instance.\n    this.instanceId = document.getElementsByClassName('wrs_modal_dialogContainer').length;\n\n    // Device object properties.\n\n    /**\n     * @type {DeviceProperties}\n     */\n    this.deviceProperties = {\n      orientation: landscape ? 'landscape' : 'portait',\n      isAndroid,\n      isIOS,\n      isMobile,\n      isDesktop: !isMobile && !isIOS && !isAndroid,\n    };\n\n    this.properties = {\n      created: false,\n      state: '',\n      previousState: '',\n      position: { bottom: 0, right: 10 },\n      size: { height: 338, width: 580 },\n    };\n\n    /**\n     * Object to keep website's style before change it on lock scroll for mobile devices.\n     * @type {Object}\n     * @property {String} bodyStylePosition - Previous body style postion.\n     * @property {String} bodyStyleOverflow - Previous body style overflow.\n     * @property {String} htmlStyleOverflow - Previous body style overflow.\n     * @property {String} windowScrollX - Previous window's scroll Y.\n     * @property {String} windowScrollY - Previous window's scroll X.\n     */\n    this.websiteBeforeLockParameters = null;\n\n    let attributes = {};\n    attributes.class = 'wrs_modal_overlay';\n    attributes.id = this.getElementId(attributes.class);\n    this.overlay = Util.createElement('div', attributes);\n\n    attributes = {};\n    attributes.class = 'wrs_modal_title_bar';\n    attributes.id = this.getElementId(attributes.class);\n    this.titleBar = Util.createElement('div', attributes);\n\n    attributes = {};\n    attributes.class = 'wrs_modal_title';\n    attributes.id = this.getElementId(attributes.class);\n    this.title = Util.createElement('div', attributes);\n    this.title.innerHTML = '';\n\n    attributes = {};\n    attributes.class = 'wrs_modal_close_button';\n    attributes.id = this.getElementId(attributes.class);\n    attributes.title = StringManager.get('close');\n    this.closeDiv = Util.createElement('a', attributes);\n    this.closeDiv.setAttribute('role', 'button');\n\n    attributes = {};\n    attributes.class = 'wrs_modal_stack_button';\n    attributes.id = this.getElementId(attributes.class);\n    attributes.title = StringManager.get('exit_fullscreen');\n    this.stackDiv = Util.createElement('a', attributes);\n    this.stackDiv.setAttribute('role', 'button');\n\n    attributes = {};\n    attributes.class = 'wrs_modal_maximize_button';\n    attributes.id = this.getElementId(attributes.class);\n    attributes.title = StringManager.get('fullscreen');\n    this.maximizeDiv = Util.createElement('a', attributes);\n    this.maximizeDiv.setAttribute('role', 'button');\n\n    attributes = {};\n    attributes.class = 'wrs_modal_minimize_button';\n    attributes.id = this.getElementId(attributes.class);\n    attributes.title = StringManager.get('minimize');\n    this.minimizeDiv = Util.createElement('a', attributes);\n    this.minimizeDiv.setAttribute('role', 'button');\n\n    attributes = {};\n    attributes.class = 'wrs_modal_dialogContainer';\n    attributes.id = this.getElementId(attributes.class);\n    attributes.role = 'dialog';\n    this.container = Util.createElement('div', attributes);\n    this.container.setAttribute('aria-labeledby', 'wrs_modal_title[0]');\n\n    attributes = {};\n    attributes.class = 'wrs_modal_wrapper';\n    attributes.id = this.getElementId(attributes.class);\n    this.wrapper = Util.createElement('div', attributes);\n\n    attributes = {};\n    attributes.class = 'wrs_content_container';\n    attributes.id = this.getElementId(attributes.class);\n    this.contentContainer = Util.createElement('div', attributes);\n\n    attributes = {};\n    attributes.class = 'wrs_modal_controls';\n    attributes.id = this.getElementId(attributes.class);\n    this.controls = Util.createElement('div', attributes);\n\n    attributes = {};\n    attributes.class = 'wrs_modal_buttons_container';\n    attributes.id = this.getElementId(attributes.class);\n    this.buttonContainer = Util.createElement('div', attributes);\n\n    // Buttons: all button must be created using createSubmitButton method.\n    this.submitButton = this.createSubmitButton(\n      {\n        id: this.getElementId('wrs_modal_button_accept'),\n        class: 'wrs_modal_button_accept',\n        innerHTML: StringManager.get('accept'),\n      },\n      this.submitAction.bind(this),\n    );\n\n    this.cancelButton = this.createSubmitButton(\n      {\n        id: this.getElementId('wrs_modal_button_cancel'),\n        class: 'wrs_modal_button_cancel',\n        innerHTML: StringManager.get('cancel'),\n      },\n      this.cancelAction.bind(this),\n    );\n\n    this.contentManager = null;\n\n    // Overlay popup.\n    const popupStrings = {\n      cancelString: StringManager.get('cancel'),\n      submitString: StringManager.get('close'),\n      message: StringManager.get('close_modal_warning'),\n    };\n\n    const callbacks = {\n      closeCallback: () => { this.close(); },\n      cancelCallback: () => { this.focus(); },\n    };\n\n    const popupupProperties = {\n      overlayElement: this.container,\n      callbacks,\n      strings: popupStrings,\n    };\n\n    this.popup = new PopUpMessage(popupupProperties);\n\n    /**\n    * Indicates if directionality of the modal dialog is RTL. false by default.\n    * @type {Boolean}\n    */\n    this.rtl = false;\n    if ('rtl' in this.attributes) {\n      this.rtl = this.attributes.rtl;\n    }\n\n    // Event handlers need modal instance context.\n    this.handleOpenedIosSoftkeyboard = this.handleOpenedIosSoftkeyboard.bind(this);\n    this.handleClosedIosSoftkeyboard = this.handleClosedIosSoftkeyboard.bind(this);\n  }\n\n  /**\n   * This method sets an ContentManager instance to ModalDialog. ContentManager\n   * manages the logic of ModalDialog content: submit, update, close and changes.\n   * @param {ContentManager} contentManager - ContentManager instance.\n   */\n  setContentManager(contentManager) {\n    this.contentManager = contentManager;\n  }\n\n  /**\n   * Returns the modal contentElement object.\n   * @returns {ContentManager} the instance of the ContentManager class.\n  */\n  getContentManager() {\n    return this.contentManager;\n  }\n\n  /**\n   * This method is called when the modal object has been submitted. Calls\n   * contentElement submitAction method - if exists - and closes the modal\n   * object. No logic about the content should be placed here,\n   * contentElement.submitAction is the responsible of the content logic.\n   */\n  submitAction() {\n    if (typeof this.contentManager.submitAction !== 'undefined') {\n      this.contentManager.submitAction();\n    }\n    this.close();\n  }\n\n  /**\n   * This method is called when the modal object has been cancelled. If\n   * contentElement has implemented hasChanges method, a confirm popup\n   * will be shown if hasChanges returns true.\n   */\n  cancelAction() {\n    if (typeof this.contentManager.hasChanges === 'undefined') {\n      this.close();\n    } else if (!this.contentManager.hasChanges()) {\n      this.close();\n    } else {\n      this.showPopUpMessage();\n    }\n  }\n\n  /**\n   * Returns a button element.\n   * @param {Object} properties - Input button properties.\n   * @param {String} properties.class - Input button class.\n   * @param {String} properties.innerHTML - Input button innerHTML.\n   * @param {Object} callback - Callback function associated to click event.\n   * @returns {HTMLButtonElement} The button element.\n   *\n   */\n  // eslint-disable-next-line class-methods-use-this\n  createSubmitButton(properties, callback) {\n    class SubmitButton {\n      constructor() {\n        this.element = document.createElement('button');\n        this.element.id = properties.id;\n        this.element.className = properties.class;\n        this.element.innerHTML = properties.innerHTML;\n        Util.addEvent(this.element, 'click', callback);\n      }\n\n      getElement() {\n        return this.element;\n      }\n    }\n    return new SubmitButton(properties, callback).getElement();\n  }\n\n  /**\n   * Creates the modal window object inserting a contentElement object.\n   */\n  create() {\n    /* Modal Window Structure\n    _____________________________________________________________________________________\n    |wrs_modal_dialog_Container                                                         |\n    | _________________________________________________________________________________ |\n    | |title_bar                          minimize_button  stack_button  close_button | |\n    | |_______________________________________________________________________________| |\n    | |wrapper                                                                        | |\n    | | _____________________________________________________________________________ | |\n    | | |content                                                                    | | |\n    | | |                                                                           | | |\n    | | |                                                                           | | |\n    | | |___________________________________________________________________________| | |\n    | | _____________________________________________________________________________ | |\n    | | |controls                                                                   | | |\n    | | | ___________________________________                                       | | |\n    | | | |buttonContainer                  |                                       | | |\n    | | | | _______________________________ |                                       | | |\n    | | | | |button_accept | button_cancel| |                                       | | |\n    | | | |_|_____________ |______________|_|                                       | | |\n    | | |___________________________________________________________________________| | |\n    | |_______________________________________________________________________________| |\n    |___________________________________________________________________________________| */\n\n    this.titleBar.appendChild(this.closeDiv);\n    this.titleBar.appendChild(this.stackDiv);\n    this.titleBar.appendChild(this.maximizeDiv);\n    this.titleBar.appendChild(this.minimizeDiv);\n    this.titleBar.appendChild(this.title);\n\n    if (this.deviceProperties.isDesktop) {\n      this.container.appendChild(this.titleBar);\n    }\n\n    this.wrapper.appendChild(this.contentContainer);\n    this.wrapper.appendChild(this.controls);\n\n    this.controls.appendChild(this.buttonContainer);\n\n    this.buttonContainer.appendChild(this.submitButton);\n    this.buttonContainer.appendChild(this.cancelButton);\n\n    this.container.appendChild(this.wrapper);\n\n    // Check if browser has scrollBar before modal has modified.\n    this.recalculateScrollBar();\n\n    document.body.appendChild(this.container);\n    document.body.appendChild(this.overlay);\n\n    if (this.deviceProperties.isDesktop) { // Desktop.\n      this.createModalWindowDesktop();\n      this.createResizeButtons();\n\n      this.addListeners();\n      // Maximize window only when the configuration is set and the device is not iOS or Android.\n      if (Configuration.get('modalWindowFullScreen')) {\n        this.maximize();\n      }\n    } else if (this.deviceProperties.isAndroid) {\n      this.createModalWindowAndroid();\n    } else if (this.deviceProperties.isIOS && !this.deviceProperties.isMobile) {\n      this.createModalWindowIos();\n    }\n\n    if (this.contentManager != null) {\n      this.contentManager.insert(this);\n    }\n\n    this.properties.open = true;\n    this.properties.created = true;\n\n    // Checks language directionality.\n    if (this.isRTL()) {\n      this.container.style.right = `${window.innerWidth - this.scrollbarWidth - this.container.offsetWidth}px`;\n      this.container.className += ' wrs_modal_rtl';\n    }\n  }\n\n  /**\n   * Creates a button in the modal object to resize it.\n   */\n  createResizeButtons() {\n    // This is a definition of Resize Button Bottom-Right.\n    this.resizerBR = document.createElement('div');\n    this.resizerBR.className = 'wrs_bottom_right_resizer';\n    this.resizerBR.innerHTML = '◢';\n    // This is a definition of Resize Button Top-Left.\n    this.resizerTL = document.createElement('div');\n    this.resizerTL.className = 'wrs_bottom_left_resizer';\n    // Append resize buttons to modal.\n    this.container.appendChild(this.resizerBR);\n    this.titleBar.appendChild(this.resizerTL);\n    // Add events to resize on click and drag.\n    Util.addEvent(this.resizerBR, 'mousedown', this.activateResizeStateBR.bind(this));\n    Util.addEvent(this.resizerTL, 'mousedown', this.activateResizeStateTL.bind(this));\n  }\n\n  /**\n   * Initialize variables for Bottom-Right resize button\n   * @param {MouseEvent} mouseEvent - Mouse event.\n   */\n  activateResizeStateBR(mouseEvent) {\n    this.initializeResizeProperties(mouseEvent, false);\n  }\n\n  /**\n   * Initialize variables for Top-Left resize button\n   * @param {MouseEvent} mouseEvent - Mouse event.\n   */\n  activateResizeStateTL(mouseEvent) {\n    this.initializeResizeProperties(mouseEvent, true);\n  }\n\n  /**\n   * Common method to initialize variables at resize.\n   * @param {MouseEvent} mouseEvent - Mouse event.\n   */\n  initializeResizeProperties(mouseEvent, leftOption) {\n    // Apply class for disable involuntary select text when drag.\n    Util.addClass(document.body, 'wrs_noselect');\n    Util.addClass(this.overlay, 'wrs_overlay_active');\n    this.resizeDataObject = {\n      x: this.eventClient(mouseEvent).X,\n      y: this.eventClient(mouseEvent).Y,\n    };\n    // Save Initial state of modal to compare on drag and obtain the difference.\n    this.initialWidth = parseInt(this.container.style.width, 10);\n    this.initialHeight = parseInt(this.container.style.height, 10);\n    if (!leftOption) {\n      this.initialRight = parseInt(this.container.style.right, 10);\n      this.initialBottom = parseInt(this.container.style.bottom, 10);\n    } else {\n      this.leftScale = true;\n    }\n    if (!this.initialRight) {\n      this.initialRight = 0;\n    }\n    if (!this.initialBottom) {\n      this.initialBottom = 0;\n    }\n    // Disable mouse events on editor when we start to drag modal.\n    document.body.style['user-select'] = 'none';\n  }\n\n  /**\n   * This method opens the modal window, restoring the previous state, position and metrics,\n   * if exists. By default the modal object opens in stack mode.\n   */\n  open() {\n    // Removing close class.\n    this.removeClass('wrs_closed');\n    // Hiding keyboard for mobile devices.\n    const { isIOS } = this.deviceProperties;\n    const { isAndroid } = this.deviceProperties;\n    const { isMobile } = this.deviceProperties;\n    if (isIOS || isAndroid || isMobile) {\n      // Restore scale to 1.\n      this.restoreWebsiteScale();\n      this.lockWebsiteScroll();\n      // Due to editor wait we need to wait until editor focus.\n      setTimeout(() => { this.hideKeyboard(); }, 400);\n    }\n\n    // New modal window. He need to create the whole object.\n    if (!this.properties.created) {\n      this.create();\n    } else {\n      // Previous state closed. Open method can be called even the previous state is open,\n      // for example updating the content of the modal object.\n      if (!this.properties.open) {\n        this.properties.open = true;\n\n        // Restoring the previous open state: if the modal object has been closed\n        // re-open it should preserve the state and the metrics.\n        if (!this.deviceProperties.isAndroid && !this.deviceProperties.isIOS) {\n          this.restoreState();\n        }\n      }\n\n      // Maximize window only when the configuration is set and the device is not iOs or Android.\n      if (this.deviceProperties.isDesktop && Configuration.get('modalWindowFullScreen')) {\n        this.maximize();\n      }\n\n      // In iOS we need to recalculate the size of the modal object because\n      // iOS keyboard is a float div which can overlay the modal object.\n      if (this.deviceProperties.isIOS) {\n        this.iosSoftkeyboardOpened = false;\n        this.setContainerHeight(`${100 + this.iosMeasureUnit}`);\n      }\n    }\n\n    if (this.contentManager.isEditorLoaded === false) {\n      const listener = Listeners.newListener('onLoad', () => {\n        this.contentManager.onOpen(this);\n      });\n      this.contentManager.addListener(listener);\n    } else {\n      this.contentManager.onOpen(this);\n    }\n  }\n\n  /**\n   * Closes modal window and restores viewport header.\n   */\n  close() {\n    this.removeClass('wrs_maximized');\n    this.removeClass('wrs_minimized');\n    this.removeClass('wrs_stack');\n    this.addClass('wrs_closed');\n    this.saveModalProperties();\n    this.unlockWebsiteScroll();\n    this.properties.open = false;\n  }\n\n  /**\n   * Sets the website scale to one.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  restoreWebsiteScale() {\n    let viewportmeta = document.querySelector('meta[name=viewport]');\n    // Let the equal symbols in order to search and make meta's final content.\n    const contentAttrsToUpdate = ['initial-scale=', 'minimum-scale=', 'maximum-scale='];\n    const contentAttrsValuesToUpdate = ['1.0', '1.0', '1.0'];\n    const setMetaAttrFunc = (viewportelement, contentAttrs) => {\n      const contentAttr = viewportelement.getAttribute('content');\n      // If it exists, we need to maintain old values and put our values.\n      if (contentAttr) {\n        const attrArray = contentAttr.split(',');\n        let finalContentMeta = '';\n        const oldAttrs = [];\n        for (let i = 0; i < attrArray.length; i += 1) {\n          let isAttrToUpdate = false;\n          let j = 0;\n          while (!isAttrToUpdate && j < contentAttrs.length) {\n            if (attrArray[i].indexOf(contentAttrs[j])) {\n              isAttrToUpdate = true;\n            }\n            j += 1;\n          }\n\n          if (!isAttrToUpdate) {\n            oldAttrs.push(attrArray[i]);\n          }\n        }\n\n        for (let i = 0; i < contentAttrs.length; i += 1) {\n          const attr = contentAttrs[i] + contentAttrsValuesToUpdate[i];\n          finalContentMeta += i === 0 ? attr : `,${attr}`;\n        }\n\n        for (let i = 0; i < oldAttrs.length; i += 1) {\n          finalContentMeta += `,${oldAttrs[i]}`;\n        }\n        viewportelement.setAttribute('content', finalContentMeta);\n        // It needs to set to empty because setAttribute refresh only when attribute is different.\n        viewportelement.setAttribute('content', '');\n        viewportelement.setAttribute('content', contentAttr);\n      } else {\n        viewportelement.setAttribute('content', 'initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0');\n        viewportelement.removeAttribute('content');\n      }\n    };\n\n    if (!viewportmeta) {\n      viewportmeta = document.createElement('meta');\n      document.getElementsByTagName('head')[0].appendChild(viewportmeta);\n      setMetaAttrFunc(viewportmeta, contentAttrsToUpdate, contentAttrsValuesToUpdate);\n      viewportmeta.remove();\n    } else {\n      setMetaAttrFunc(viewportmeta, contentAttrsToUpdate, contentAttrsValuesToUpdate);\n    }\n  }\n\n  /**\n   * Locks website scroll for mobile devices.\n   */\n  lockWebsiteScroll() {\n    this.websiteBeforeLockParameters = {\n      bodyStylePosition: document.body.style.position ? document.body.style.position : '',\n      bodyStyleOverflow: document.body.style.overflow ? document.body.style.overflow : '',\n      htmlStyleOverflow: document.documentElement.style.overflow ? document.documentElement.style.overflow : '',\n      windowScrollX: window.scrollX,\n      windowScrollY: window.scrollY,\n    };\n  }\n\n  /**\n   * Unlocks website scroll for mobile devices.\n   */\n  unlockWebsiteScroll() {\n    if (this.websiteBeforeLockParameters) {\n      document.body.style.position = this.websiteBeforeLockParameters.bodyStylePosition;\n      document.body.style.overflow = this.websiteBeforeLockParameters.bodyStyleOverflow;\n      document.documentElement.style.overflow = this.websiteBeforeLockParameters.htmlStyleOverflow;\n      const { windowScrollX } = this.websiteBeforeLockParameters;\n      const { windowScrollY } = this.websiteBeforeLockParameters;\n      window.scrollTo(windowScrollX, windowScrollY);\n      this.websiteBeforeLockParameters = null;\n    }\n  }\n\n  /**\n   * Util function to known if browser is IE11.\n   * @returns {Boolean} true if the browser is IE11. false otherwise.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  isIE11() {\n    if (navigator.userAgent.search('Msie/') >= 0 || navigator.userAgent.search('Trident/') >= 0 || navigator.userAgent.search('Edge/') >= 0) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Returns if the current language type is RTL.\n   * @return {Boolean} true if current language is RTL. false otherwise.\n   */\n  isRTL() {\n    if (this.attributes.language === 'ar' || this.attributes.language === 'he') {\n      return true;\n    }\n    return this.rtl;\n  }\n\n  /**\n   * Adds a class to all modal ModalDialog DOM elements.\n   * @param {String} className - Class name.\n   */\n  addClass(className) {\n    Util.addClass(this.overlay, className);\n    Util.addClass(this.titleBar, className);\n    Util.addClass(this.overlay, className);\n    Util.addClass(this.container, className);\n    Util.addClass(this.contentContainer, className);\n    Util.addClass(this.stackDiv, className);\n    Util.addClass(this.minimizeDiv, className);\n    Util.addClass(this.maximizeDiv, className);\n    Util.addClass(this.wrapper, className);\n  }\n\n  /**\n   * Remove a class from all modal DOM elements.\n   * @param {String} className - Class name.\n   */\n  removeClass(className) {\n    Util.removeClass(this.overlay, className);\n    Util.removeClass(this.titleBar, className);\n    Util.removeClass(this.overlay, className);\n    Util.removeClass(this.container, className);\n    Util.removeClass(this.contentContainer, className);\n    Util.removeClass(this.stackDiv, className);\n    Util.removeClass(this.minimizeDiv, className);\n    Util.removeClass(this.maximizeDiv, className);\n    Util.removeClass(this.wrapper, className);\n  }\n\n  /**\n   * Create modal dialog for desktop.\n   */\n  createModalWindowDesktop() {\n    this.addClass('wrs_modal_desktop');\n    this.stack();\n  }\n\n  /**\n   * Create modal dialog for non android devices.\n   */\n  createModalWindowAndroid() {\n    this.addClass('wrs_modal_android');\n    window.addEventListener('resize', this.orientationChangeAndroidSoftkeyboard.bind(this));\n  }\n\n  /**\n   * Create modal dialog for iOS devices.\n   */\n  createModalWindowIos() {\n    this.addClass('wrs_modal_ios');\n    // Refresh the size when the orientation is changed.\n    window.addEventListener('resize', this.orientationChangeIosSoftkeyboard.bind(this));\n  }\n\n  /**\n   * Restore previous state, position and size of previous stacked modal dialog.\n   */\n  restoreState() {\n    if (this.properties.state === 'maximized') {\n      // Reset states for prevent return to stack state.\n      this.maximize();\n    } else if (this.properties.state === 'minimized') {\n      // Reset states for prevent return to stack state.\n      this.properties.state = this.properties.previousState;\n      this.properties.previousState = '';\n      this.minimize();\n    } else {\n      this.stack();\n    }\n  }\n\n  /**\n   * Stacks the modal object.\n   */\n  stack() {\n    this.properties.previousState = this.properties.state;\n    this.properties.state = 'stack';\n    this.removeClass('wrs_maximized');\n    this.minimizeDiv.title = StringManager.get('minimize');\n    this.removeClass('wrs_minimized');\n    this.addClass('wrs_stack');\n\n    this.restoreModalProperties();\n\n    if (typeof this.resizerBR !== 'undefined' && typeof this.resizerTL !== 'undefined') {\n      this.setResizeButtonsVisibility();\n    }\n\n    // Need recalculate position of actual modal because window can was changed in fullscreenmode.\n    this.recalculateScrollBar();\n    this.recalculatePosition();\n    this.recalculateScale();\n    this.focus();\n  }\n\n  /**\n   * Minimizes the modal object.\n   */\n  minimize() {\n    // Saving width, height, top and bottom parameters to restore when opening.\n    this.saveModalProperties();\n    if (this.properties.state === 'minimized' && this.properties.previousState === 'stack') {\n      this.stack();\n    } else if (this.properties.state === 'minimized' && this.properties.previousState === 'maximized') {\n      this.maximize();\n    } else {\n      // Setting css to prevent important tag into css style.\n      this.container.style.height = '30px';\n      this.container.style.width = '250px';\n      this.container.style.bottom = '0px';\n      this.container.style.right = '10px';\n\n      this.removeListeners();\n      this.properties.previousState = this.properties.state;\n      this.properties.state = 'minimized';\n      this.setResizeButtonsVisibility();\n      this.minimizeDiv.title = StringManager.get('maximize');\n\n      if (Util.containsClass(this.overlay, 'wrs_stack')) {\n        this.removeClass('wrs_stack');\n      } else {\n        this.removeClass('wrs_maximized');\n      }\n      this.addClass('wrs_minimized');\n    }\n  }\n\n  /**\n   * Maximizes the modal object.\n   */\n  maximize() {\n    // Saving width, height, top and bottom parameters to restore when openning.\n    this.saveModalProperties();\n    if (this.properties.state !== 'maximized') {\n      this.properties.previousState = this.properties.state;\n      this.properties.state = 'maximized';\n    }\n    // Don't permit resize on maximize mode.\n    this.setResizeButtonsVisibility();\n\n    if (Util.containsClass(this.overlay, 'wrs_minimized')) {\n      this.minimizeDiv.title = StringManager.get('minimize');\n      this.removeClass('wrs_minimized');\n    } else if (Util.containsClass(this.overlay, 'wrs_stack')) {\n      this.container.style.left = null;\n      this.container.style.top = null;\n      this.removeClass('wrs_stack');\n    }\n\n    this.addClass('wrs_maximized');\n\n    // Set size to 80% screen with a max size.\n    this.setSize(parseInt(window.innerHeight * 0.8, 10), parseInt(window.innerWidth * 0.8, 10));\n    if (this.container.clientHeight > 700) {\n      this.container.style.height = '700px';\n    }\n    if (this.container.clientWidth > 1200) {\n      this.container.style.width = '1200px';\n    }\n\n    // Setting modal position in center on screen.\n    const { innerHeight } = window;\n    const { innerWidth } = window;\n    const { offsetHeight } = this.container;\n    const { offsetWidth } = this.container;\n    const bottom = innerHeight / 2 - offsetHeight / 2;\n    const right = innerWidth / 2 - offsetWidth / 2;\n\n    this.setPosition(bottom, right);\n    this.recalculateScale();\n    this.recalculatePosition();\n    this.recalculateSize();\n    this.focus();\n  }\n\n  /**\n   * Sets modal size.\n   * @param {Number} height - Height of the ModalDialog\n   * @param {Number} width - Width of the ModalDialog.\n   */\n  setSize(height, width) {\n    this.container.style.height = `${height}px`;\n    this.container.style.width = `${width}px`;\n    this.recalculateSize();\n  }\n\n  /**\n   * Sets modal position using bottom and right style attributes.\n   * @param  {number} bottom - bottom attribute.\n   * @param  {number} right - right attribute.\n   */\n  setPosition(bottom, right) {\n    this.container.style.bottom = `${bottom}px`;\n    this.container.style.right = `${right}px`;\n  }\n\n  /**\n   * Saves position and size parameters of and open ModalDialog. This attributes\n   * are needed to restore it on re-open.\n   */\n  saveModalProperties() {\n    // Saving values of modal only when modal is in stack state.\n    if (this.properties.state === 'stack') {\n      this.properties.position.bottom = parseInt(this.container.style.bottom, 10);\n      this.properties.position.right = parseInt(this.container.style.right, 10);\n      this.properties.size.width = parseInt(this.container.style.width, 10);\n      this.properties.size.height = parseInt(this.container.style.height, 10);\n    }\n  }\n\n  /**\n   * Restore ModalDialog position and size parameters.\n   */\n  restoreModalProperties() {\n    if (this.properties.state === 'stack') {\n      // Restoring Bottom and Right values from last modal.\n      this.setPosition(this.properties.position.bottom, this.properties.position.right);\n      // Restoring Height and Left values from last modal.\n      this.setSize(this.properties.size.height, this.properties.size.width);\n    }\n  }\n\n  /**\n   * Sets the modal dialog initial size.\n   */\n  recalculateSize() {\n    this.wrapper.style.width = `${this.container.clientWidth - 12}px`;\n    this.wrapper.style.height = `${this.container.clientHeight - 38}px`;\n    this.contentContainer.style.height = `${parseInt(this.wrapper.offsetHeight - 50, 10)}px`;\n  }\n\n  /**\n   * Enable or disable visibility of resize buttons in modal window depend on state.\n   */\n  setResizeButtonsVisibility() {\n    if (this.properties.state === 'stack') {\n      this.resizerTL.style.visibility = 'visible';\n      this.resizerBR.style.visibility = 'visible';\n    } else {\n      this.resizerTL.style.visibility = 'hidden';\n      this.resizerBR.style.visibility = 'hidden';\n    }\n  }\n\n  /**\n   * Makes an object draggable adding mouse and touch events.\n   */\n  addListeners() {\n    // Button events (maximize, minimize, stack and close).\n    this.maximizeDiv.addEventListener('click', this.maximize.bind(this), true);\n    this.stackDiv.addEventListener('click', this.stack.bind(this), true);\n    this.minimizeDiv.addEventListener('click', this.minimize.bind(this), true);\n    this.closeDiv.addEventListener('click', this.cancelAction.bind(this));\n\n    // Overlay events (close).\n    this.overlay.addEventListener('click', this.cancelAction.bind(this));\n\n    // Mouse events.\n    Util.addEvent(window, 'mousedown', this.startDrag.bind(this));\n    Util.addEvent(window, 'mouseup', this.stopDrag.bind(this));\n    Util.addEvent(window, 'mousemove', this.drag.bind(this));\n    Util.addEvent(window, 'resize', this.onWindowResize.bind(this));\n    // Key events.\n    Util.addEvent(window, 'keydown', this.onKeyDown.bind(this));\n  }\n\n  /**\n   * Removes draggable events from an object.\n   */\n  removeListeners() {\n    // Mouse events.\n    Util.removeEvent(window, 'mousedown', this.startDrag);\n    Util.removeEvent(window, 'mouseup', this.stopDrag);\n    Util.removeEvent(window, 'mousemove', this.drag);\n    Util.removeEvent(window, 'resize', this.onWindowResize);\n    // Key events.\n    Util.removeEvent(window, 'keydown', this.onKeyDown);\n  }\n\n\n  /**\n   * Returns mouse or touch coordinates (on touch events ev.ClientX doesn't exists)\n   * @param {MouseEvent} mouseEvent - Mouse event.\n   * @return {Object} With the X and Y coordinates.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  eventClient(mouseEvent) {\n    if (typeof (mouseEvent.clientX) === 'undefined' && mouseEvent.changedTouches) {\n      const client = {\n        X: mouseEvent.changedTouches[0].clientX,\n        Y: mouseEvent.changedTouches[0].clientY,\n      };\n      return client;\n    }\n    const client = {\n      X: mouseEvent.clientX,\n      Y: mouseEvent.clientY,\n    };\n    return client;\n  }\n\n  /**\n   * Start drag function: set the object dragDataObject with the draggable\n   * object offsets coordinates.\n   * when drag starts (on touchstart or mousedown events).\n   * @param {MouseEvent} mouseEvent - Touchstart or mousedown event.\n   */\n  startDrag(mouseEvent) {\n    if (this.properties.state === 'minimized') {\n      return;\n    }\n    if (mouseEvent.target === this.title) {\n      if (typeof this.dragDataObject === 'undefined' || this.dragDataObject === null) {\n        // Save first click mouse point on screen.\n        this.dragDataObject = {\n          x: this.eventClient(mouseEvent).X,\n          y: this.eventClient(mouseEvent).Y,\n        };\n        // Reset last drag position when start drag.\n        this.lastDrag = {\n          x: '0px',\n          y: '0px',\n        };\n        // Init right and bottom values for window modal if it isn't exist.\n        if (this.container.style.right === '') {\n          this.container.style.right = '0px';\n        }\n        if (this.container.style.bottom === '') {\n          this.container.style.bottom = '0px';\n        }\n\n        // Needed for IE11 for apply disabled mouse events on editor because\n        // iexplorer need a dinamic object to apply this property.\n        if (this.isIE11()) {\n          // this.iframe.style['position'] = 'relative';\n        }\n        // Apply class for disable involuntary select text when drag.\n        Util.addClass(document.body, 'wrs_noselect');\n        Util.addClass(this.overlay, 'wrs_overlay_active');\n        // Obtain screen limits for prevent overflow.\n        this.limitWindow = this.getLimitWindow();\n      }\n    }\n  }\n\n  /**\n   * Updates dragDataObject with the draggable object coordinates when\n   * the draggable object is being moved.\n   * @param {MouseEvent} mouseEvent - The mouse event.\n   */\n  drag(mouseEvent) {\n    if (this.dragDataObject) {\n      mouseEvent.preventDefault();\n      // Calculate max and min between actual mouse position and limit of screeen.\n      // It restric the movement of modal into window.\n      let limitY = Math.min(this.eventClient(mouseEvent).Y, this.limitWindow.minPointer.y);\n      limitY = Math.max(this.limitWindow.maxPointer.y, limitY);\n      let limitX = Math.min(this.eventClient(mouseEvent).X, this.limitWindow.minPointer.x);\n      limitX = Math.max(this.limitWindow.maxPointer.x, limitX);\n      // Substract limit with first position to obtain relative pixels increment\n      // to the anchor point.\n      const dragX = `${limitX - this.dragDataObject.x}px`;\n      const dragY = `${limitY - this.dragDataObject.y}px`;\n      // Save last valid position of modal before window overflow.\n      this.lastDrag = {\n        x: dragX,\n        y: dragY,\n      };\n      // This move modal with hadware acceleration.\n      this.container.style.transform = `translate3d(${dragX},${dragY},0)`;\n    }\n    if (this.resizeDataObject) {\n      const { innerWidth } = window;\n      const { innerHeight } = window;\n      let limitX = Math.min(this.eventClient(mouseEvent).X, innerWidth - this.scrollbarWidth - 7);\n      let limitY = Math.min(this.eventClient(mouseEvent).Y, innerHeight - 7);\n      if (limitX < 0) {\n        limitX = 0;\n      }\n\n      if (limitY < 0) {\n        limitY = 0;\n      }\n\n      let scaleMultiplier;\n      if (this.leftScale) {\n        scaleMultiplier = -1;\n      } else {\n        scaleMultiplier = 1;\n      }\n\n      this.container.style.width = `${this.initialWidth + scaleMultiplier * (limitX - this.resizeDataObject.x)}px`;\n      this.container.style.height = `${this.initialHeight + scaleMultiplier * (limitY - this.resizeDataObject.y)}px`;\n      if (!this.leftScale) {\n        if (this.resizeDataObject.x - limitX - this.initialWidth < -580) {\n          this.container.style.right = `${this.initialRight - (limitX - this.resizeDataObject.x)}px`;\n        } else {\n          this.container.style.right = `${this.initialRight + this.initialWidth - 580}px`;\n          this.container.style.width = '580px';\n        }\n        if (this.resizeDataObject.y - limitY < this.initialHeight - 338) {\n          this.container.style.bottom = `${this.initialBottom - (limitY - this.resizeDataObject.y)}px`;\n        } else {\n          this.container.style.bottom = `${this.initialBottom + this.initialHeight - 338}px`;\n          this.container.style.height = '338px';\n        }\n      }\n      this.recalculateScale();\n      this.recalculatePosition();\n    }\n  }\n\n  /**\n   * Returns the boundaries of actual window to limit modal movement.\n   * @return {Object} Object containing mouseX and mouseY coordinates of actual mouse on screen.\n   */\n  getLimitWindow() {\n    // Obtain dimensions of window page.\n    const maxWidth = window.innerWidth;\n    const maxHeight = window.innerHeight;\n\n    // Calculate relative position of mouse point into window.\n    const { offsetHeight } = this.container;\n    const contStyleBottom = parseInt(this.container.style.bottom, 10);\n    const contStyleRight = parseInt(this.container.style.right, 10);\n\n    const { pageXOffset } = window;\n    const dragY = this.dragDataObject.y;\n    const dragX = this.dragDataObject.x;\n\n    const offSetToolbarY = (offsetHeight + contStyleBottom - (maxHeight - (dragY - pageXOffset)));\n    const offSetToolbarX = maxWidth - this.scrollbarWidth - (dragX - pageXOffset) - contStyleRight;\n\n    // Calculate limits with sizes of window, modal and mouse position.\n    const minPointerY = maxHeight - this.container.offsetHeight + offSetToolbarY;\n    const maxPointerY = this.title.offsetHeight - (this.title.offsetHeight - offSetToolbarY);\n    const minPointerX = maxWidth - offSetToolbarX - this.scrollbarWidth;\n    const maxPointerX = (this.container.offsetWidth - offSetToolbarX);\n    const minPointer = { x: minPointerX, y: minPointerY };\n    const maxPointer = { x: maxPointerX, y: maxPointerY };\n    return { minPointer, maxPointer };\n  }\n\n  /**\n   * Returns the scrollbar width size of browser\n   * @returns {Number} The scrollbar width.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getScrollBarWidth() {\n    // Create a paragraph with full width of page.\n    const inner = document.createElement('p');\n    inner.style.width = '100%';\n    inner.style.height = '200px';\n\n    // Create a hidden div to compare sizes.\n    const outer = document.createElement('div');\n    outer.style.position = 'absolute';\n    outer.style.top = '0px';\n    outer.style.left = '0px';\n    outer.style.visibility = 'hidden';\n    outer.style.width = '200px';\n    outer.style.height = '150px';\n    outer.style.overflow = 'hidden';\n    outer.appendChild(inner);\n\n    document.body.appendChild(outer);\n    const widthOuter = inner.offsetWidth;\n\n    // Change type overflow of paragraph for measure scrollbar.\n    outer.style.overflow = 'scroll';\n    let widthInner = inner.offsetWidth;\n\n    // If measure is the same, we compare with internal div.\n    if (widthOuter === widthInner) {\n      widthInner = outer.clientWidth;\n    }\n    document.body.removeChild(outer);\n\n    return (widthOuter - widthInner);\n  }\n\n  /**\n   * Set the dragDataObject to null.\n   */\n  stopDrag() {\n    // Due to we have multiple events that call this function, we need only to execute\n    // the next modifiers one time,\n    // when the user stops to drag and dragDataObject is not null (the object to drag is attached).\n    if (this.dragDataObject || this.resizeDataObject) {\n      // If modal doesn't change, it's not necessary to set position with interpolation.\n      this.container.style.transform = '';\n      if (this.dragDataObject) {\n        this.container.style.right = `${parseInt(this.container.style.right, 10) - parseInt(this.lastDrag.x, 10)}px`;\n        this.container.style.bottom = `${parseInt(this.container.style.bottom, 10) - parseInt(this.lastDrag.y, 10)}px`;\n      }\n      // We make focus on editor after drag modal windows to prevent lose focus.\n      this.focus();\n      // Restore mouse events on iframe.\n      // this.iframe.style['pointer-events'] = 'auto';\n      document.body.style['user-select'] = '';\n      // Restore static state of iframe if we use Internet Explorer.\n      if (this.isIE11()) {\n        // this.iframe.style['position'] = null;\n      }\n      // Active text select event.\n      Util.removeClass(document.body, 'wrs_noselect');\n      Util.removeClass(this.overlay, 'wrs_overlay_active');\n    }\n    this.dragDataObject = null;\n    this.resizeDataObject = null;\n    this.initialWidth = null;\n    this.leftScale = null;\n  }\n\n  /**\n   * Recalculates scale for modal when resize browser window.\n   */\n  onWindowResize() {\n    this.recalculateScrollBar();\n    this.recalculatePosition();\n    this.recalculateScale();\n  }\n\n  /**\n   * Triggers keyboard events:\n   * - Tab key tab to go to submit button.\n   * - Esc key to close the modal dialog.\n   * @param {KeyboardEvent} keyboardEvent - The keyboard event.\n   */\n  onKeyDown(keyboardEvent) {\n    if (keyboardEvent.key !== undefined) {\n      // Popupmessage is not oppened.\n      if (this.popup.overlayWrapper.style.display !== 'block') {\n        // Code to detect Esc event\n        if (keyboardEvent.key === 'Escape' || keyboardEvent.key === 'Esc') {\n          if (this.properties.open) {\n            this.contentManager.onKeyDown(keyboardEvent);\n          }\n        } else if (keyboardEvent.shiftKey && keyboardEvent.key === 'Tab') { // Code to detect shift Tab event.\n          if (document.activeElement === this.cancelButton) {\n            this.submitButton.focus();\n            keyboardEvent.stopPropagation();\n            keyboardEvent.preventDefault();\n          } else {\n            this.contentManager.onKeyDown(keyboardEvent);\n          }\n        } else if (keyboardEvent.key === 'Tab') { // Code to detect Tab event.\n          if (document.activeElement === this.submitButton) {\n            this.cancelButton.focus();\n            keyboardEvent.stopPropagation();\n            keyboardEvent.preventDefault();\n          } else {\n            this.contentManager.onKeyDown(keyboardEvent);\n          }\n        }\n      } else { // Popupmessage oppened.\n        this.popup.onKeyDown(keyboardEvent);\n      }\n    }\n  }\n\n  /**\n   * Recalculating position for modal dialog when the browser is resized.\n   */\n  recalculatePosition() {\n    this.container.style.right = `${Math.min(parseInt(this.container.style.right, 10), window.innerWidth - this.scrollbarWidth - this.container.offsetWidth)}px`;\n    if (parseInt(this.container.style.right, 10) < 0) {\n      this.container.style.right = '0px';\n    }\n    this.container.style.bottom = `${Math.min(parseInt(this.container.style.bottom, 10), window.innerHeight - this.container.offsetHeight)}px`;\n    if (parseInt(this.container.style.bottom, 10) < 0) {\n      this.container.style.bottom = '0px';\n    }\n  }\n\n  /**\n   * Recalculating scale for modal when the browser is resized.\n   */\n  recalculateScale() {\n    let sizeModificated = false;\n    if (parseInt(this.container.style.width, 10) > 580) {\n      this.container.style.width = `${Math.min(parseInt(this.container.style.width, 10), window.innerWidth - this.scrollbarWidth)}px`;\n      sizeModificated = true;\n    } else {\n      this.container.style.width = '580px';\n      sizeModificated = true;\n    }\n    if (parseInt(this.container.style.height, 10) > 338) {\n      this.container.style.height = `${Math.min(parseInt(this.container.style.height, 10), window.innerHeight)}px`;\n      sizeModificated = true;\n    } else {\n      this.container.style.height = '338px';\n      sizeModificated = true;\n    }\n    if (sizeModificated) {\n      this.recalculateSize();\n    }\n  }\n\n  /**\n   * Recalculating width of browser scroll bar.\n   */\n  recalculateScrollBar() {\n    this.hasScrollBar = window.innerWidth > document.documentElement.clientWidth;\n    if (this.hasScrollBar) {\n      this.scrollbarWidth = this.getScrollBarWidth();\n    } else {\n      this.scrollbarWidth = 0;\n    }\n  }\n\n  /**\n   * Hide soft keyboards on iOS devices.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  hideKeyboard() {\n    // iOS keyboard can't be detected or hide directly from JavaScript.\n    // So, this method simulates that user focus a text input and blur\n    // the selection.\n    const inputField = document.createElement('input');\n    this.container.appendChild(inputField);\n    inputField.focus();\n    inputField.blur();\n    // Is removed to not see it.\n    inputField.remove();\n  }\n\n  /**\n   * Focus to contentManager object.\n   */\n  focus() {\n    if (this.contentManager != null && typeof this.contentManager.onFocus !== 'undefined') {\n      this.contentManager.onFocus();\n    }\n  }\n\n  /**\n   * Returns true when the device is on portrait mode.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  portraitMode() {\n    return window.innerHeight > window.innerWidth;\n  }\n\n  /**\n   * Event handler that change container size when IOS softkeyboard is opened.\n   */\n  handleOpenedIosSoftkeyboard() {\n    if (!this.iosSoftkeyboardOpened && this.iosDivHeight != null && this.iosDivHeight === `100${this.iosMeasureUnit}`) {\n      if (this.portraitMode()) {\n        this.setContainerHeight(`63${this.iosMeasureUnit}`);\n      } else {\n        this.setContainerHeight(`40${this.iosMeasureUnit}`);\n      }\n    }\n    this.iosSoftkeyboardOpened = true;\n  }\n\n  /**\n   * Event handler that change container size when IOS softkeyboard is closed.\n   */\n  handleClosedIosSoftkeyboard() {\n    this.iosSoftkeyboardOpened = false;\n    this.setContainerHeight(`100${this.iosMeasureUnit}`);\n  }\n\n  /**\n   * Change container sizes when orientation is changed on iOS.\n   */\n  orientationChangeIosSoftkeyboard() {\n    if (this.iosSoftkeyboardOpened) {\n      if (this.portraitMode()) {\n        this.setContainerHeight(`63${this.iosMeasureUnit}`);\n      } else {\n        this.setContainerHeight(`40${this.iosMeasureUnit}`);\n      }\n    } else {\n      this.setContainerHeight(`100${this.iosMeasureUnit}`);\n    }\n  }\n\n  /**\n   * Change container sizes when orientation is changed on Android.\n   */\n  orientationChangeAndroidSoftkeyboard() {\n    this.setContainerHeight('100%');\n  }\n\n  /**\n   * Set iframe container height.\n   * @param {Number} height - New height.\n   */\n  setContainerHeight(height) {\n    this.iosDivHeight = height;\n    this.wrapper.style.height = height;\n  }\n\n  /**\n   * Check content of editor before close action.\n   */\n  showPopUpMessage() {\n    if (this.properties.state === 'minimized') {\n      this.stack();\n    }\n    this.popup.show();\n  }\n\n  /**\n   * Sets the tithle of the modal dialog.\n   * @param {String} title - Modal dialog title.\n   */\n  setTitle(title) {\n    this.title.innerHTML = title;\n  }\n\n  /**\n   * Returns the id of an element, adding the instance number to\n   * the element class name:\n   * className --> className[idNumber]\n   * @param {String} className - The element class name.\n   * @returns {String} A string appending the instance id to the className.\n   */\n  getElementId(className) {\n    return `${className}[${this.instanceId}]`;\n  }\n}\n","/* eslint-disable */\nvar polyfills;\nexport default polyfills;\n\n// Polyfills.\n/*! http://mths.be/codepointat v0.1.0 by @mathias */\nif (!String.prototype.codePointAt) {\n  (function () {\n    'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n    var codePointAt = function (position) {\n      if (this == null) {\n        throw TypeError();\n      }\n      var string = String(this);\n      var size = string.length;\n      // `ToInteger`\n      var index = position ? Number(position) : 0;\n      if (index != index) { // better `isNaN`\n        index = 0;\n      }\n      // Account for out-of-bounds indices:\n      if (index < 0 || index >= size) {\n        return undefined;\n      }\n      // Get the first code unit\n      var first = string.charCodeAt(index);\n      var second;\n      if ( // check if it’s the start of a surrogate pair\n        first >= 0xD800 && first <= 0xDBFF && // high surrogate\n        size > index + 1 // there is a next code unit\n      ) {\n        second = string.charCodeAt(index + 1);\n        if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n          return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        }\n      }\n      return first;\n    };\n    if (Object.defineProperty) {\n      Object.defineProperty(String.prototype, 'codePointAt', {\n        'value': codePointAt,\n        'configurable': true,\n        'writable': true\n      });\n    } else {\n      String.prototype.codePointAt = codePointAt;\n    }\n  }());\n}\n\n// Object.assign polyfill.\nif (typeof Object.assign != 'function') {\n  // Must be writable: true, enumerable: false, configurable: true\n  Object.defineProperty(Object, \"assign\", {\n    value: function assign(target, varArgs) { // .length of function is 2\n      'use strict';\n      if (target == null) { // TypeError if undefined or null\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) { // Skip over if undefined or null\n          for (var nextKey in nextSource) {\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n}\n","import Parser from './parser';\nimport Util from './util';\nimport StringManager from './stringmanager';\nimport ContentManager from './contentmanager';\nimport Latex from './latex';\nimport MathML from './mathml';\nimport CustomEditors from './customeditors';\nimport Configuration from './configuration';\nimport jsProperties from './jsvariables';\nimport Event from './event';\nimport Listeners from './listeners';\nimport Image from './image';\nimport ServiceProvider from './serviceprovider';\nimport ModalDialog from './modal';\nimport './polyfills';\nimport '../styles/styles.css';\n\n/**\n * @typedef {Object} CoreProperties\n * @property {ServiceProviderProperties} serviceProviderProperties\n * - The ServiceProvider class properties. *\n */\nexport default class Core {\n  /**\n   * @classdesc\n   * This class represents MathType integration Core, managing the following:\n   * - Integration initialization.\n   * - Event managing.\n   * - Insertion of formulas into the edit area.\n   * ```js\n   *       let core = new Core();\n   *       core.addListener(listener);\n   *       core.language = 'en';\n   *\n   *       // Initializing Core class.\n   *       core.init(configurationService);\n   * ```\n   * @constructs\n   * Core constructor.\n   * @param {CoreProperties}\n   */\n  constructor(coreProperties) {\n    /**\n     * Language. Needed for accessibility and locales. 'en' by default.\n     * @type {String}\n     */\n    this.language = 'en';\n\n    /**\n     * Edit mode, 'images' by default. Admits the following values:\n     * - images\n     * - latex\n     * @type {String}\n     */\n    this.editMode = 'images';\n\n    /**\n     * Modal dialog instance.\n     * @type {ModalDialog}\n     */\n    this.modalDialog = null;\n\n    /**\n     * The instance of {@link CustomEditors}. By default\n     * the only custom editor is the Chemistry editor.\n     * @type {CustomEditors}\n     */\n    this.customEditors = new CustomEditors();\n\n    /**\n     * Chemistry editor.\n     * @type {CustomEditor}\n     */\n    const chemEditorParams = {\n      name: 'Chemistry',\n      toolbar: 'chemistry',\n      icon: 'chem.png',\n      confVariable: 'chemEnabled',\n      title: 'ChemType',\n      tooltip: 'Insert a chemistry formula - ChemType', // TODO: Localize tooltip.\n    };\n\n    this.customEditors.addEditor('chemistry', chemEditorParams);\n\n    /**\n     * Environment properties. This object contains data about the integration platform.\n     * @typedef IntegrationEnvironment\n     * @property {String} IntegrationEnvironment.editor - Editor name. For example the HTML editor.\n     * @property {String} IntegrationEnvironment.mode - Integration save mode.\n     * @property {String} IntegrationEnvironment.version - Integration version.\n     *\n     */\n\n    /**\n     * The environment properties object.\n     * @type {IntegrationEnvironment}\n     */\n    this.environment = {};\n\n    /**\n     * @typedef EditionProperties\n     * @property {Boolean} editionProperties.isNewElement - True if the formula is a new one.\n     * False otherwise.\n     * @property {HTMLImageElement} editionProperties.temporalImage- The image element.\n     * Null if the formula is new.\n     * @property {Range} editionProperties.latexRange - Tha range that contains the LaTeX formula.\n     * @property {Range} editionProperties.range - The range that contains the image element.\n     * @property {String} editionProperties.editMode - The edition mode. 'images' by default.\n     */\n\n    /**\n     * The properties of the current edition process.\n     * @type {EditionProperties}\n     */\n    this.editionProperties = {};\n\n    this.editionProperties.isNewElement = true;\n    this.editionProperties.temporalImage = null;\n    this.editionProperties.latexRange = null;\n    this.editionProperties.range = null;\n\n    /**\n     * The {@link IntegrationModel} instance.\n     * @type {IntegrationModel}\n     */\n    this.integrationModel = null;\n\n    /**\n     * The {@link ContentManager} instance.\n     * @type {ContentManager}\n     */\n    this.contentManager = null;\n\n    /**\n     * The current browser.\n     * @type {String}\n     */\n    this.browser = (() => {\n      const ua = navigator.userAgent;\n      let browser = 'none';\n      if (ua.search('Edge/') >= 0) {\n        browser = 'EDGE';\n      } else if (ua.search('Chrome/') >= 0) {\n        browser = 'CHROME';\n      } else if (ua.search('Trident/') >= 0) {\n        browser = 'IE';\n      } else if (ua.search('Firefox/') >= 0) {\n        browser = 'FIREFOX';\n      } else if (ua.search('Safari/') >= 0) {\n        browser = 'SAFARI';\n      }\n      return browser;\n    }\n    )();\n\n    /**\n     * Plugin listeners.\n     * @type {Array.<Object>}\n     */\n    this.listeners = new Listeners();\n\n    /**\n     * Service provider properties.\n     * @type {ServiceProviderProperties}\n     */\n    this.serviceProviderProperties = {};\n    if ('serviceProviderProperties' in coreProperties) {\n      this.serviceProviderProperties = coreProperties.serviceProviderProperties;\n    } else {\n      throw new Error('serviceProviderProperties property missing.');\n    }\n  }\n\n  /**\n   * Static property.\n   * Core listeners.\n   * @private\n   * @type {Listeners}\n   */\n  static get globalListeners() {\n    return Core._globalListeners;\n  }\n\n  /**\n   * Static property setter.\n   * Set core listeners.\n   * @param {Listeners} value - The property value.\n   * @ignore\n   */\n  static set globalListeners(value) {\n    Core._globalListeners = value;\n  }\n\n  /**\n   * Core state. Says if it was loaded previously.\n   * True when Core.init was called. Otherwise, false.\n   * @private\n   * @type {Boolean}\n   */\n  static get initialized() {\n    return Core._initialized;\n  }\n\n  /**\n   * Core state. Says if it was loaded previously.\n   * @param {Boolean} value - True to say that Core.init was called. Otherwise, false.\n   * @ignore\n   */\n  static set initialized(value) {\n    Core._initialized = value;\n  }\n\n  /**\n   * Sets the {@link Core.integrationModel} property.\n   * @param {IntegrationModel} integrationModel - The {@link IntegrationModel} property.\n   */\n  setIntegrationModel(integrationModel) {\n    this.integrationModel = integrationModel;\n  }\n\n  /**\n   * Sets the {@link Core.environment} property.\n   * @param {IntegrationEnvironment} integrationEnvironment -\n   * The {@link IntegrationEnvironment} object.\n   */\n  setEnvironment(integrationEnvironment) {\n    if ('editor' in integrationEnvironment) {\n      this.environment.editor = integrationEnvironment.editor;\n    }\n    if ('mode' in integrationEnvironment) {\n      this.environment.mode = integrationEnvironment.mode;\n    }\n    if ('version' in integrationEnvironment) {\n      this.environment.version = integrationEnvironment.version;\n    }\n  }\n\n  /**\n   * Returns the current {@link ModalDialog} instance.\n   * @returns {ModalDialog} The current {@link ModalDialog} instance.\n   */\n  getModalDialog() {\n    return this.modalDialog;\n  }\n\n  /**\n   * Inits the {@link Core} class, doing the following:\n   * - Calls asynchronously configuration service, retrieving the backend configuration in a JSON.\n   * - Updates {@link Configuration} class with the previous configuration properties.\n   * - Updates the {@link ServiceProvider} class using the configuration service path as reference.\n   * - Loads language strings.\n   * - Fires onLoad event.\n   * @param {Object} serviceParameters - Service parameters.\n   */\n  init() {\n    if (!Core.initialized) {\n      const serviceProviderListener = Listeners.newListener('onInit', () => {\n        const jsConfiguration = ServiceProvider.getService('configurationjs', '', 'get');\n        const jsonConfiguration = JSON.parse(jsConfiguration);\n        Configuration.addConfiguration(jsonConfiguration);\n        // Adding JavaScript (not backend) configuration variables.\n        Configuration.addConfiguration(jsProperties);\n        // Fire 'onLoad' event:\n        // All integration must listen this event in order to know if the plugin\n        // has been properly loaded.\n        StringManager.language = this.language;\n        this.listeners.fire('onLoad', {});\n      });\n\n      ServiceProvider.addListener(serviceProviderListener);\n      ServiceProvider.init(this.serviceProviderProperties);\n\n      Core.initialized = true;\n    } else {\n      // Case when there are more than two editor instances.\n      // After the first editor all the other editors don't need to load any file or service.\n      this.listeners.fire('onLoad', {});\n    }\n  }\n\n  /**\n   * Adds a {@link Listener} to the current instance of the {@link Core} class.\n   * @param {Listener} listener - The listener object.\n   */\n  addListener(listener) {\n    this.listeners.add(listener);\n  }\n\n  /**\n   * Adds the global {@link Listener} instance to {@link Core} class.\n   * @param {Listener} listener - The event listener to be added.\n   * @static\n   */\n  static addGlobalListener(listener) {\n    Core.globalListeners.add(listener);\n  }\n\n  beforeUpdateFormula(mathml, wirisProperties) {\n    /**\n     * This event is fired before updating the formula.\n     * @type {Object}\n     * @property {String} mathml - MathML to be transformed.\n     * @property {String} editMode - Edit mode.\n     * @property {Object} wirisProperties - Extra attributes for the formula.\n     * @property {String} language - Formula language.\n     */\n    const beforeUpdateEvent = new Event();\n\n    beforeUpdateEvent.mathml = mathml;\n\n    // Cloning wirisProperties object\n    // We don't want wirisProperties object modified.\n    beforeUpdateEvent.wirisProperties = {};\n\n    if (wirisProperties != null) {\n      Object.keys(wirisProperties).forEach((attr) => {\n        beforeUpdateEvent.wirisProperties[attr] = wirisProperties[attr];\n      });\n    }\n\n\n    // Read only.\n    beforeUpdateEvent.language = this.language;\n    beforeUpdateEvent.editMode = this.editMode;\n\n    if (this.listeners.fire('onBeforeFormulaInsertion', beforeUpdateEvent)) {\n      return {};\n    }\n\n    if (Core.globalListeners.fire('onBeforeFormulaInsertion', beforeUpdateEvent)) {\n      return {};\n    }\n\n    return {\n      mathml: beforeUpdateEvent.mathml,\n      wirisProperties: beforeUpdateEvent.wirisProperties,\n    };\n  }\n\n  /**\n   * Converts a MathML into it's correspondent image and inserts the image is\n   * inserted in a HTMLElement target by creating\n   * a new image or updating an existing one.\n   * @param {HTMLElement} focusElement - The HTMLElement to be focused after the insertion.\n   * @param {Window} windowTarget - The window element where the editable content is.\n   * @param {String} mathml - The MathML.\n   * @param {Array.<Object>} wirisProperties - The extra attributes for the formula.\n   * @returns {ReturnObject} - Object with the information of the node or latex to insert.\n   */\n  insertFormula(focusElement, windowTarget, mathml, wirisProperties) {\n    /**\n     * It is the object with the information of the node or latex to insert.\n     * @typedef ReturnObject\n     * @property {Node} [node] - The DOM node to insert.\n     * @property {String} [latex] - The latex to insert.\n     */\n    const returnObject = {};\n\n    if (!mathml) {\n      this.insertElementOnSelection(null, focusElement, windowTarget);\n    } else if (this.editMode === 'latex') {\n      returnObject.latex = Latex.getLatexFromMathML(mathml);\n      // this.integrationModel.getNonLatexNode is an integration wrapper\n      // to have special behaviours for nonLatex.\n      // Not all the integrations have special behaviours for nonLatex.\n      if (!!this.integrationModel.fillNonLatexNode && !returnObject.latex) {\n        const afterUpdateEvent = new Event();\n        afterUpdateEvent.editMode = this.editMode;\n        afterUpdateEvent.windowTarget = windowTarget;\n        afterUpdateEvent.focusElement = focusElement;\n        afterUpdateEvent.latex = returnObject.latex;\n        this.integrationModel.fillNonLatexNode(afterUpdateEvent, windowTarget, mathml);\n      } else {\n        returnObject.node = windowTarget.document.createTextNode(`$$${returnObject.latex}$$`);\n      }\n      this.insertElementOnSelection(returnObject.node, focusElement, windowTarget);\n    } else {\n      returnObject.node = Parser.mathmlToImgObject(windowTarget.document,\n        mathml,\n        wirisProperties, this.language);\n\n      this.insertElementOnSelection(returnObject.node, focusElement, windowTarget);\n    }\n\n    return returnObject;\n  }\n\n  afterUpdateFormula(focusElement, windowTarget, node, latex) {\n    /**\n     * This event is fired after update the formula.\n     * @type {Event}\n     * @param {String} editMode - edit mode.\n     * @param {Object} windowTarget - target window.\n     * @param {Object} focusElement - target element to be focused after update.\n     * @param {String} latex - LaTeX generated by the formula (editMode=latex).\n     * @param {Object} node - node generated after update the formula (text if LaTeX img otherwise).\n     */\n    const afterUpdateEvent = new Event();\n    afterUpdateEvent.editMode = this.editMode;\n    afterUpdateEvent.windowTarget = windowTarget;\n    afterUpdateEvent.focusElement = focusElement;\n    afterUpdateEvent.node = node;\n    afterUpdateEvent.latex = latex;\n\n    if (this.listeners.fire('onAfterFormulaInsertion', afterUpdateEvent)) {\n      return {};\n    }\n\n    if (Core.globalListeners.fire('onAfterFormulaInsertion', afterUpdateEvent)) {\n      return {};\n    }\n\n    return {};\n  }\n\n  /**\n   * Sets the caret after a given Node and set the focus to the owner document.\n   * @param {Node} node - The Node element.\n   */\n  placeCaretAfterNode(node) {\n    this.integrationModel.getSelection();\n    const nodeDocument = node.ownerDocument;\n    if (typeof nodeDocument.getSelection !== 'undefined' && !!node.parentElement) {\n      const range = nodeDocument.createRange();\n      range.setStartAfter(node);\n      range.collapse(true);\n      const selection = nodeDocument.getSelection();\n      selection.removeAllRanges();\n      selection.addRange(range);\n      nodeDocument.body.focus();\n    }\n  }\n\n  /**\n   * Replaces a Selection object with an HTMLElement.\n   * @param {HTMLElement} element - The HTMLElement to replace the selection.\n   * @param {HTMLElement} focusElement - The HTMLElement to be focused after the replace.\n   * @param {Window} windowTarget - The window target.\n   */\n  insertElementOnSelection(element, focusElement, windowTarget) {\n    if (this.editionProperties.isNewElement) {\n      if (element) {\n        if (focusElement.type === 'textarea') {\n          Util.updateTextArea(focusElement, element.textContent);\n        } else if (document.selection && document.getSelection === 0) {\n          let range = windowTarget.document.selection.createRange();\n          windowTarget.document.execCommand('InsertImage', false, element.src);\n\n          if (!('parentElement' in range)) {\n            windowTarget.document.execCommand('delete', false);\n            range = windowTarget.document.selection.createRange();\n            windowTarget.document.execCommand('InsertImage', false, element.src);\n          }\n\n          if ('parentElement' in range) {\n            const temporalObject = range.parentElement();\n\n            if (temporalObject.nodeName.toUpperCase() === 'IMG') {\n              temporalObject.parentNode.replaceChild(element, temporalObject);\n            } else {\n              // IE9 fix: parentNode() does not return the IMG node,\n              // returns the parent DIV node. In IE < 9, pasteHTML does not work well.\n              range.pasteHTML(Util.createObjectCode(element));\n            }\n          }\n        } else {\n          const editorSelection = this.integrationModel.getSelection();\n          let range = null;\n          // In IE is needed keep the range due to after focus the modal window\n          // it can't be retrieved the last selection.\n          if (this.editionProperties.range) {\n            ({ range } = this.editionProperties);\n            this.editionProperties.range = null;\n          } else {\n            range = editorSelection.getRangeAt(0);\n          }\n\n          // Delete if something was surrounded.\n          range.deleteContents();\n\n          let node = range.startContainer;\n          const position = range.startOffset;\n\n          if (node.nodeType === 3) { // TEXT_NODE.\n            node = node.splitText(position);\n            node.parentNode.insertBefore(element, node);\n          } else if (node.nodeType === 1) { // ELEMENT_NODE.\n            node.insertBefore(element, node.childNodes[position]);\n          }\n\n          this.placeCaretAfterNode(element);\n        }\n      } else if (focusElement.type === 'textarea') {\n        focusElement.focus();\n      } else {\n        const editorSelection = this.integrationModel.getSelection();\n        editorSelection.removeAllRanges();\n\n        if (this.editionProperties.range) {\n          const { range } = this.editionProperties;\n          this.editionProperties.range = null;\n          editorSelection.addRange(range);\n        }\n      }\n    } else if (this.editionProperties.latexRange) {\n      if (document.selection && document.getSelection === 0) {\n        this.editionProperties.isNewElement = true;\n        this.editionProperties.latexRange.select();\n        this.insertElementOnSelection(element, focusElement, windowTarget);\n      } else {\n        this.editionProperties.latexRange.deleteContents();\n        this.editionProperties.latexRange.insertNode(element);\n        this.placeCaretAfterNode(element);\n      }\n    } else if (focusElement.type === 'textarea') {\n      let item;\n      // Wrapper for some integrations that can have special behaviours to show latex.\n      if (typeof this.integrationModel.getSelectedItem !== 'undefined') {\n        item = this.integrationModel.getSelectedItem(focusElement, false);\n      } else {\n        item = Util.getSelectedItemOnTextarea(focusElement);\n      }\n      Util.updateExistingTextOnTextarea(focusElement,\n        element.textContent,\n        item.startPosition,\n        item.endPosition);\n    } else {\n      if (element && element.nodeName.toLowerCase() === 'img') { // Editor empty, formula has been erased on edit.\n        // There are editors (e.g: CKEditor) that put attributes in images.\n        // We don't allow that behaviour in our images.\n        Image.removeImgDataAttributes(this.editionProperties.temporalImage);\n        // Clone is needed to maintain event references to temporalImage.\n        Image.clone(element, this.editionProperties.temporalImage);\n      } else {\n        this.editionProperties.temporalImage.remove();\n      }\n      this.placeCaretAfterNode(this.editionProperties.temporalImage);\n    }\n  }\n\n\n  /**\n   * Opens a modal dialog containing MathType editor..\n   * @param {HTMLElement} target - The target HTMLElement where formulas should be inserted.\n   * @param {Boolean} isIframe - True if the target HTMLElement is an iframe. False otherwise.\n   */\n  openModalDialog(target, isIframe) {\n    // Textarea elements don't have normal document ranges. It only accepts latex edit.\n    this.editMode = 'images';\n\n    // In IE is needed keep the range due to after focus the modal window\n    // it can't be retrieved the last selection.\n    try {\n      if (isIframe) {\n        // Is needed focus the target first.\n        target.contentWindow.focus();\n        const selection = target.contentWindow.getSelection();\n        this.editionProperties.range = selection.getRangeAt(0);\n      } else {\n        // Is needed focus the target first.\n        target.focus();\n        const selection = getSelection();\n        this.editionProperties.range = selection.getRangeAt(0);\n      }\n    } catch (e) {\n      this.editionProperties.range = null;\n    }\n\n    if (isIframe === undefined) {\n      isIframe = true;\n    }\n\n    this.editionProperties.latexRange = null;\n\n    if (target) {\n      let selectedItem;\n      if (typeof this.integrationModel.getSelectedItem !== 'undefined') {\n        selectedItem = this.integrationModel.getSelectedItem(target, isIframe);\n      } else {\n        selectedItem = Util.getSelectedItem(target, isIframe);\n      }\n\n      // Check LaTeX if and only if the node is a text node (nodeType==3).\n      if (selectedItem) {\n        // Case when image was selected and button pressed.\n        if (!selectedItem.caretPosition && Util.containsClass(selectedItem.node, Configuration.get('imageClassName'))) {\n          this.editionProperties.temporalImage = selectedItem.node;\n          this.editionProperties.isNewElement = false;\n        } else if (selectedItem.node.nodeType === 3) {\n          // If it's a text node means that editor is working with LaTeX.\n          if (this.integrationModel.getMathmlFromTextNode) {\n            // If integration has this function it isn't set range due to we don't\n            // know if it will be put into a textarea as a text or image.\n            const mathml = this.integrationModel.getMathmlFromTextNode(\n              selectedItem.node,\n              selectedItem.caretPosition,\n            );\n            if (mathml) {\n              this.editMode = 'latex';\n              this.editionProperties.isNewElement = false;\n              this.editionProperties.temporalImage = document.createElement('img');\n              this.editionProperties.temporalImage.setAttribute(\n                Configuration.get('imageMathmlAttribute'),\n                MathML.safeXmlEncode(mathml),\n              );\n            }\n          } else {\n            const latexResult = Latex.getLatexFromTextNode(\n              selectedItem.node,\n              selectedItem.caretPosition,\n            );\n            if (latexResult) {\n              const mathml = Latex.getMathMLFromLatex(latexResult.latex);\n              this.editMode = 'latex';\n              this.editionProperties.isNewElement = false;\n              this.editionProperties.temporalImage = document.createElement('img');\n              this.editionProperties.temporalImage.setAttribute(\n                Configuration.get('imageMathmlAttribute'),\n                MathML.safeXmlEncode(mathml),\n              );\n              const windowTarget = isIframe ? target.contentWindow : window;\n\n              if (target.tagName.toLowerCase() !== 'textarea') {\n                if (document.selection) {\n                  let leftOffset = 0;\n                  let previousNode = latexResult.startNode.previousSibling;\n\n                  while (previousNode) {\n                    leftOffset += Util.getNodeLength(previousNode);\n                    previousNode = previousNode.previousSibling;\n                  }\n\n                  this.editionProperties.latexRange = windowTarget.document.selection.createRange();\n                  this.editionProperties.latexRange.moveToElementText(\n                    latexResult.startNode.parentNode,\n                  );\n                  this.editionProperties.latexRange.move(\n                    'character',\n                    leftOffset + latexResult.startPosition,\n                  );\n                  this.editionProperties.latexRange.moveEnd(\n                    'character',\n                    latexResult.latex.length + 4,\n                  ); // Plus 4 for the '$$' characters.\n                } else {\n                  this.editionProperties.latexRange = windowTarget.document.createRange();\n                  this.editionProperties.latexRange.setStart(\n                    latexResult.startNode,\n                    latexResult.startPosition,\n                  );\n                  this.editionProperties.latexRange.setEnd(\n                    latexResult.endNode,\n                    latexResult.endPosition,\n                  );\n                }\n              }\n            }\n          }\n        }\n      } else if (target.tagName.toLowerCase() === 'textarea') {\n        // By default editMode is 'images', but when target is a textarea it needs to be 'latex'.\n        this.editMode = 'latex';\n      }\n    }\n\n    // Setting an object with the editor parameters.\n    // Editor parameters can be customized in several ways:\n    // 1 - editorAttributes: Contains the default editor attributes,\n    //  usually the metrics in a comma separated string. Always exists.\n    // 2 - editorParameters: Object containing custom editor parameters.\n    // These parameters are defined in the backend. So they affects all integration instances.\n\n    // The backend send the default editor attributes in a coma separated\n    // with the following structure: key1=value1,key2=value2...\n    const defaultEditorAttributesArray = Configuration.get('editorAttributes').split(', ');\n    const defaultEditorAttributes = {};\n    for (let i = 0, len = defaultEditorAttributesArray.length; i < len; i += 1) {\n      const tempAttribute = defaultEditorAttributesArray[i].split('=');\n      const key = tempAttribute[0];\n      const value = tempAttribute[1];\n      defaultEditorAttributes[key] = value;\n    }\n    // Custom editor parameters.\n    const editorAttributes = {};\n    // Editor parameters in backend, usually configuration.ini.\n    const serverEditorParameters = Configuration.get('editorParameters');\n    // Editor parameters through JavaScript configuration.\n    const cliendEditorParameters = this.integrationModel.editorParameters;\n    Object.assign(editorAttributes, defaultEditorAttributes, serverEditorParameters);\n    Object.assign(editorAttributes, defaultEditorAttributes, cliendEditorParameters);\n\n    editorAttributes.language = this.language;\n    editorAttributes.rtl = this.integrationModel.rtl;\n\n    const contentManagerAttributes = {};\n    contentManagerAttributes.editorAttributes = editorAttributes;\n    contentManagerAttributes.language = this.language;\n    contentManagerAttributes.customEditors = this.customEditors;\n    contentManagerAttributes.environment = this.environment;\n\n    if (this.modalDialog == null) {\n      this.modalDialog = new ModalDialog(editorAttributes);\n      this.contentManager = new ContentManager(contentManagerAttributes);\n      // When an instance of ContentManager is created we need to wait until\n      // the ContentManager is ready by listening 'onLoad' event.\n      const listener = Listeners.newListener('onLoad', () => {\n        this.contentManager.isNewElement = this.editionProperties.isNewElement;\n        if (this.editionProperties.temporalImage != null) {\n          const mathML = MathML.safeXmlDecode(this.editionProperties.temporalImage.getAttribute(Configuration.get('imageMathmlAttribute')));\n          this.contentManager.mathML = mathML;\n        }\n      });\n      this.contentManager.addListener(listener);\n      this.contentManager.init();\n      this.modalDialog.setContentManager(this.contentManager);\n      this.contentManager.setModalDialogInstance(this.modalDialog);\n    } else {\n      this.contentManager.isNewElement = this.editionProperties.isNewElement;\n      if (this.editionProperties.temporalImage != null) {\n        const mathML = MathML.safeXmlDecode(this.editionProperties.temporalImage.getAttribute(Configuration.get('imageMathmlAttribute')));\n        this.contentManager.mathML = mathML;\n      }\n    }\n    this.contentManager.setIntegrationModel(this.integrationModel);\n    this.modalDialog.open();\n  }\n\n  /**\n   * Returns the {@link CustomEditors} instance.\n   * @return {CustomEditors} The current {@link CustomEditors} instance.\n   */\n  getCustomEditors() {\n    return this.customEditors;\n  }\n}\n\n/**\n * Core static listeners.\n * @type {Listeners}\n * @private\n */\nCore._globalListeners = new Listeners();\n\n/**\n * Resources state. Says if they were loaded or not.\n * @type {Boolean}\n * @private\n */\nCore._initialized = false;\n","// eslint-disable-next-line no-unused-vars, import/named\nimport Core, { ReturnObject } from './core.src';\nimport Image from './image';\nimport Listeners from './listeners';\nimport Util from './util';\nimport Configuration from './configuration';\nimport ServiceProvider from './serviceprovider';\n\n/**\n * @typedef {Object} IntegrationModelProperties\n * @property {string} configurationService - Configuration service path.\n * This parameter is needed to determine all services paths.\n * @property {HTMLElement} integrationModelProperties.target - HTML target.\n * @property {string} integrationModelProperties.scriptName - Integration script name.\n * Usually the name of the integration script.\n * @property {Object} integrationModelProperties.environment - integration environment properties.\n * @property {Object} [integrationModelProperties.callbackMethodArguments] - object containing\n * callback method arguments.\n * @property {string} [integrationModelProperties.version] - integration version number.\n * @property {Object} [integrationModelProperties.editorObject] - object containing\n * the integration editor instance.\n * @property {boolean} [integrationModelProperties.rtl] - true if the editor is in RTL mode.\n * false otherwise.\n * @property {ServiceProviderProperties} [integrationModelProperties.serviceProviderProperties]\n * - The service parameters.\n * @property {Object} [integrationModelProperties.integrationParameters]\n * - Overwritten integration parameters.\n */\n\nexport default class IntegrationModel {\n  /**\n   * @classdesc\n   * This class represents an integration model, allowing the integration script to\n   * communicate with Core class. Each integration must extend this class.\n   * @constructs\n   * @param {IntegrationModelProperties} integrationModelProperties\n   */\n  constructor(integrationModelProperties) {\n    /**\n     * Language. Needed for accessibility and locales. English by default.\n     */\n    this.language = 'en';\n\n    /**\n     * Service parameters\n     * @type {ServiceProviderProperties}\n     */\n    this.serviceProviderProperties = {};\n    if ('serviceProviderProperties' in integrationModelProperties) {\n      this.serviceProviderProperties = integrationModelProperties.serviceProviderProperties;\n    }\n\n    /**\n     * Configuration service path. The integration service is needed by Core class to\n     * load all the backend configuration into the frontend and also to create the paths\n     * of all services (all services lives in the same route). Mandatory property.\n     */\n    this.configurationService = '';\n    if ('configurationService' in integrationModelProperties) {\n      this.serviceProviderProperties.URI = integrationModelProperties.configurationService;\n      console.warn('Deprecated property configurationService. Use serviceParameters on instead.',\n        [integrationModelProperties.configurationService]);\n    }\n\n    /**\n     * Plugin version. Needed to stats and caching.\n     * @type {string}\n     */\n    this.version = ('version' in integrationModelProperties ? integrationModelProperties.version : '');\n\n    /**\n     * DOM target in which the plugin works. Needed to associate events, insert formulas, etc.\n     * Mandatory property.\n     */\n    this.target = null;\n    if ('target' in integrationModelProperties) {\n      this.target = integrationModelProperties.target;\n    } else {\n      throw new Error('IntegrationModel constructor error: target property missed.');\n    }\n\n    /**\n     * Integration script name. Needed to know the plugin path.\n     */\n    if ('scriptName' in integrationModelProperties) {\n      this.scriptName = integrationModelProperties.scriptName;\n    }\n\n    /**\n     * Object containing the arguments needed by the callback function.\n     */\n    this.callbackMethodArguments = {};\n    if ('callbackMethodArguments' in integrationModelProperties) {\n      this.callbackMethodArguments = integrationModelProperties.callbackMethodArguments;\n    }\n\n    /**\n     * Contains information about the integration environment:\n     * like the name of the editor, the version, etc.\n     */\n    this.environment = {};\n    if ('environment' in integrationModelProperties) {\n      this.environment = integrationModelProperties.environment;\n    }\n\n    /**\n     * Indicates if the DOM target is - or not - and iframe.\n     */\n    this.isIframe = false;\n    if (this.target != null) {\n      this.isIframe = (this.target.tagName.toUpperCase() === 'IFRAME');\n    }\n\n    /**\n     * Instance of the integration editor object. Usually the entry point to access the API\n     * of a HTML editor.\n     */\n    this.editorObject = null;\n    if ('editorObject' in integrationModelProperties) {\n      this.editorObject = integrationModelProperties.editorObject;\n    }\n\n    /**\n     * Specifies if the direction of the text is RTL. false by default.\n     */\n    this.rtl = false;\n    if ('rtl' in integrationModelProperties) {\n      this.rtl = integrationModelProperties.rtl;\n    }\n\n    /**\n     * Specifies if the integration model exposes the locale strings. false by default.\n     */\n    this.managesLanguage = false;\n    if ('managesLanguage' in integrationModelProperties) {\n      this.managesLanguage = integrationModelProperties.managesLanguage;\n    }\n\n    /**\n     * Indicates if an image is selected. Needed to resize the image to the original size in case\n     * the image is resized.\n     * @type {boolean}\n     */\n    this.temporalImageResizing = false;\n\n    /**\n     * The Core class instance associated to the integration model.\n     * @type {Core}\n     */\n    this.core = null;\n\n    /**\n     * Integration model listeners.\n     * @type {Listeners}\n     */\n    this.listeners = new Listeners();\n\n    // Parameters overwrite.\n    if ('integrationParameters' in integrationModelProperties) {\n      IntegrationModel.integrationParameters.forEach((parameter) => {\n        if (parameter in integrationModelProperties.integrationParameters) {\n          // Don't add empty parameters.\n          const value = integrationModelProperties.integrationParameters[parameter];\n          if (Object.keys(value).length !== 0) {\n            this[parameter] = value;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Init function. Usually called from the integration side once the core.js file is loaded.\n   */\n  init() {\n    this.language = this.getLanguage();\n    // We need to wait until Core class is loaded ('onLoad' event) before\n    // call the callback method.\n    const listener = Listeners.newListener('onLoad', () => {\n      this.callbackFunction(this.callbackMethodArguments);\n    });\n\n    // Backwards compatibility.\n    if (this.serviceProviderProperties.URI.indexOf('configuration') !== -1) {\n      const uri = this.serviceProviderProperties.URI;\n      const server = ServiceProvider.getServerLanguageFromService(uri);\n      this.serviceProviderProperties.server = server;\n      const configurationIndex = this.serviceProviderProperties.URI.indexOf('configuration');\n      const subsTring = this.serviceProviderProperties.URI.substring(0, configurationIndex);\n      this.serviceProviderProperties.URI = subsTring;\n    }\n\n    let serviceParametersURI = this.serviceProviderProperties.URI;\n    serviceParametersURI = serviceParametersURI.indexOf('/') === 0 || serviceParametersURI.indexOf('http') === 0\n      ? serviceParametersURI\n      : Util.concatenateUrl(this.getPath(), serviceParametersURI);\n\n    this.serviceProviderProperties.URI = serviceParametersURI;\n\n    const coreProperties = {};\n    coreProperties.serviceProviderProperties = this.serviceProviderProperties;\n    this.setCore(new Core(coreProperties));\n    this.core.addListener(listener);\n    this.core.language = this.language;\n\n    // Initializing Core class.\n    this.core.init();\n    // TODO: Move to Core constructor.\n    this.core.setEnvironment(this.environment);\n  }\n\n  /**\n   * Returns the absolute path of the integration script.\n   * @return {string} - Absolute path for the integration script.\n   */\n  getPath() {\n    if (typeof this.scriptName === 'undefined') {\n      throw new Error('scriptName property needed for getPath.');\n    }\n    const col = document.getElementsByTagName('script');\n    let path = '';\n    for (let i = 0; i < col.length; i += 1) {\n      const j = col[i].src.lastIndexOf(this.scriptName);\n      if (j >= 0) {\n        path = col[i].src.substr(0, j - 1);\n      }\n    }\n    return path;\n  }\n\n  /**\n   * Sets the language property.\n   * @param {string} language - language code.\n   */\n  setLanguage(language) {\n    this.language = language;\n  }\n\n  /**\n   * Sets a Core instance.\n   * @param {Core} core - instance of Core class.\n   */\n  setCore(core) {\n    this.core = core;\n    core.setIntegrationModel(this);\n  }\n\n  /**\n   * Returns the Core instance.\n   * @returns {Core} instance of Core class.\n   */\n  getCore() {\n    return this.core;\n  }\n\n  /**\n   * Sets the object target and updates the iframe property.\n   * @param {HTMLElement} target - target object.\n   */\n  setTarget(target) {\n    this.target = target;\n    this.isIframe = (this.target.tagName.toUpperCase() === 'IFRAME');\n  }\n\n  /**\n   * Sets the editor object.\n   * @param {Object} editorObject - The editor object.\n   */\n  setEditorObject(editorObject) {\n    this.editorObject = editorObject;\n  }\n\n  /**\n   * Opens formula editor to editing a new formula. Can be overwritten in order to make some\n   * actions from integration part before the formula is edited.\n   */\n  openNewFormulaEditor() {\n    this.core.editionProperties.isNewElement = true;\n    this.core.openModalDialog(this.target, this.isIframe);\n  }\n\n  /**\n   * Opens formula editor to editing an existing formula. Can be overwritten in order to make some\n   * actions from integration part before the formula is edited.\n   */\n  openExistingFormulaEditor() {\n    this.core.editionProperties.isNewElement = false;\n    this.core.openModalDialog(this.target, this.isIframe);\n  }\n\n  /**\n   * Wrapper to Core.updateFormula method.\n   * Transform a MathML into a image formula.\n   * Then the image formula is inserted in the specified target, creating a new image (new formula)\n   * or updating an existing one.\n   * @param {string} mathml - MathML to generate the formula.\n   * @param {string} editMode - Edit Mode (LaTeX or images).\n   */\n  updateFormula(mathml) {\n    if (this.editorParameters) {\n      mathml = com.wiris.editor.util.EditorUtils.addAnnotation(mathml, 'application/vnd.wiris.mtweb-params+json', JSON.stringify(this.editorParameters));\n    }\n    let focusElement;\n    let windowTarget;\n    const wirisProperties = null;\n\n    if (this.isIframe) {\n      focusElement = this.target.contentWindow;\n      windowTarget = this.target.contentWindow;\n    } else {\n      focusElement = this.target;\n      windowTarget = window;\n    }\n\n    let obj = this.core.beforeUpdateFormula(mathml, wirisProperties);\n\n    if (!obj) {\n      return '';\n    }\n\n    obj = this.insertFormula(focusElement, windowTarget, obj.mathml, obj.wirisProperties);\n\n    if (!obj) {\n      return '';\n    }\n\n    return this.core.afterUpdateFormula(obj.focusElement, obj.windowTarget, obj.node, obj.latex);\n  }\n\n  /**\n   * Wrapper to Core.insertFormula method.\n   * Inserts the formula in the specified target, creating\n   * a new image (new formula) or updating an existing one.\n   * @param {string} mathml - MathML to generate the formula.\n   * @param {string} editMode - Edit Mode (LaTeX or images).\n   * @returns {ReturnObject} - Object with the information of the node or latex to insert.\n   */\n  insertFormula(focusElement, windowTarget, mathml, wirisProperties) {\n    return this.core.insertFormula(focusElement, windowTarget, mathml, wirisProperties);\n  }\n\n  /**\n   * Returns the target selection.\n   * @returns {Selection} target selection.\n   */\n  getSelection() {\n    if (this.isIframe) {\n      this.target.contentWindow.focus();\n      return this.target.contentWindow.getSelection();\n    }\n    this.target.focus();\n    return window.getSelection();\n  }\n\n  /**\n   * Add events to formulas in the DOM target. The events added are the following:\n   * - doubleClickHandler: handles double click event on formulas by opening an editor\n   * to edit them.\n   * - mouseDownHandler: handles mouse down event on formulas by saving the size of the formula\n   * in case the the formula is resized.\n   * - mouseUpHandler: handles mouse up event on formulas by restoring the saved formula size\n   * in case the formula is resized.\n   */\n  addEvents() {\n    const eventTarget = this.isIframe ? this.target.contentWindow.document : this.target;\n    Util.addElementEvents(\n      eventTarget,\n      (element, event) => {\n        this.doubleClickHandler(element, event);\n      },\n      (element, event) => {\n        this.mousedownHandler(element, event);\n      },\n      (element, event) => {\n        this.mouseupHandler(element, event);\n      },\n    );\n  }\n\n  /**\n   * Handles a double click on the target element. Opens an editor\n   * to re-edit the double-clicked formula.\n   * @param {HTMLElement} element - DOM object target.\n   */\n  doubleClickHandler(element) {\n    if (element.nodeName.toLowerCase() === 'img') {\n      this.core.getCustomEditors().disable();\n      const customEditorAttributeName = Configuration.get('imageCustomEditorName');\n      if (element.hasAttribute(customEditorAttributeName)) {\n        const customEditor = element.getAttribute(customEditorAttributeName);\n        this.core.getCustomEditors().enable(customEditor);\n      }\n      if (Util.containsClass(element, Configuration.get('imageClassName'))) {\n        this.core.editionProperties.temporalImage = element;\n        this.core.editionProperties.isNewElement = true;\n        this.openExistingFormulaEditor();\n      }\n    }\n  }\n\n  /**\n   * Handles a mouse up event on the target element. Restores the image size to avoid\n   * resizing formulas.\n   */\n  mouseupHandler() {\n    if (this.temporalImageResizing) {\n      setTimeout(() => {\n        Image.fixAfterResize(this.temporalImageResizing);\n      }, 10);\n    }\n  }\n\n  /**\n   * Handles a mouse down event on the target element. Saves the formula size to avoid\n   * resizing formulas.\n   * @param {HTMLElement} element - target element.\n   */\n  mousedownHandler(element) {\n    if (element.nodeName.toLowerCase() === 'img') {\n      if (Util.containsClass(element, Configuration.get('imageClassName'))) {\n        this.temporalImageResizing = element;\n      }\n    }\n  }\n\n  /**\n   * Returns the integration language. By default the browser agent. This method\n   * should be overwritten to obtain the integration language, for example using the\n   * plugin API of an HTML editor.\n   * @returns {string} integration language.\n   */\n  getLanguage() {\n    return this.getBrowserLanguage();\n  }\n\n  /**\n   * Returns the browser language.\n   * @returns {string} the browser language.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getBrowserLanguage() {\n    let language = 'en';\n    if (navigator.userLanguage) {\n      language = navigator.userLanguage.substring(0, 2);\n    } else if (navigator.language) {\n      language = navigator.language.substring(0, 2);\n    } else {\n      language = 'en';\n    }\n    return language;\n  }\n\n  /**\n   * This function is called once the {@link Core} is loaded. IntegrationModel class\n   * will fire this method when {@link Core} 'onLoad' event is fired.\n   * This method should content all the logic to init\n   * the integration.\n   */\n  callbackFunction() {\n    // It's needed to wait until the integration target is ready. The event is fired\n    // from the integration side.\n    const listener = Listeners.newListener('onTargetReady', () => {\n      this.addEvents(this.target);\n    });\n    this.listeners.add(listener);\n  }\n\n  /**\n   * Function called when the content submits an action.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  notifyWindowClosed() {\n    // Nothing.\n  }\n\n  /**\n   * Wrapper.\n   * Extracts mathml of a determined text node. This function is used as a wrapper inside core.js\n   * in order to get mathml from a text node that can contain normal LaTeX or other chosen text.\n   * @param {string} textNode - text node to extract the MathML.\n   * @param {int} caretPosition - caret position inside the text node.\n   * @returns {string} MathML inside the text node.\n   */\n\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  getMathmlFromTextNode(textNode, caretPosition) {}\n\n  /**\n   * Wrapper\n   * It fills wrs event object of nonLatex with the desired data.\n   * @param {Object} event - event object.\n   * @param {Object} window dom window object.\n   * @param {string} mathml valid mathml.\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  fillNonLatexNode(event, window, mathml) {}\n\n  /**\n    Wrapper.\n   * Returns selected item from the target.\n   * @param {HTMLElement} target - target element\n   * @param {boolean} iframe\n   */\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  getSelectedItem(target, isIframe) {}\n}\n\n// To know if the integration that extends this class implements\n// wrapper methods, they are set as undefined.\nIntegrationModel.prototype.getMathmlFromTextNode = undefined;\nIntegrationModel.prototype.fillNonLatexNode = undefined;\nIntegrationModel.prototype.getSelectedItem = undefined;\n\n/**\n * An object containing a list with the overwritable class constructor properties.\n * @type {Object}\n */\nIntegrationModel.integrationParameters = ['serviceProviderProperties', 'editorParameters'];\n","\n// Elements\n\nlet viewElements = ['abs', 'and', 'annotation', 'annotation-xml', 'apply', 'approx', 'arccos', 'arccosh', 'arccot', 'arccoth', 'arccsc', 'arccsch', 'arcsec', 'arcsech', 'arcsin', 'arcsinh', 'arctan', 'arctanh', 'arg', 'bind', 'bvar', 'card', 'cartesianproduct', 'cbytes', 'ceiling', 'cerror', 'ci', 'cn', 'codomain', 'complexes', 'compose', 'condition', 'conjugate', 'cos', 'cosh', 'cot', 'coth', 'cs', 'csc', 'csch', 'csymbol', 'curl', 'declare', 'degree', 'determinant', 'diff', 'divergence', 'divide', 'domain', 'domainofapplication', 'emptyset', 'eq', 'equivalent', 'eulergamma', 'exists', 'exp', 'exponentiale', 'factorial', 'factorof', 'false', 'floor', 'fn', 'forall', 'gcd', 'geq', 'grad', 'gt', 'ident', 'image', 'imaginary', 'imaginaryi', 'implies', 'in', 'infinity', 'int', 'integers', 'intersect', 'interval', 'inverse', 'lambda', 'laplacian', 'lcm', 'leq', 'limit', 'list', 'ln', 'log', 'logbase', 'lowlimit', 'lt', 'maction', 'maligngroup', 'malignmark', 'matrix', 'matrixrow', 'max', 'mean', 'median', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'min', 'minus', 'mlabeledtr', 'mlongdiv', 'mmultiscripts', 'mn', 'mo', 'mode', 'moment', 'momentabout', 'mover', 'mpadded', 'mphantom', 'mprescripts', 'mroot', 'mrow', 'ms', 'mscarries', 'mscarry', 'msgroup', 'msline', 'mspace', 'msqrt', 'msrow', 'mstack', 'mstyle', 'msub', 'msubsup', 'msup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'naturalnumbers', 'neq', 'none', 'not', 'notanumber', 'notin', 'notprsubset', 'notsubset', 'or', 'otherwise', 'outerproduct', 'partialdiff', 'pi', 'piece', 'piecewise', 'plus', 'power', 'primes', 'product', 'prsubset', 'quotient', 'rationals', 'real', 'reals', 'reln', 'rem', 'root', 'scalarproduct', 'sdev', 'sec', 'sech', 'selector', 'semantics', 'sep', 'set', 'setdiff', 'share', 'sin', 'sinh', 'subset', 'sum', 'tan', 'tanh', 'tendsto', 'times', 'transpose', 'true', 'union', 'uplimit', 'variance', 'vector', 'vectorproduct', 'xor'];\n\n// MathML's \"image\" element collides with CKeditor model's \"image\", so\n// we add a \"math-\" prefix to all MathML elements to avoid any\n// collisions altogether.\nlet viewMath = 'math';\nlet modelElements = new Map( [ ...viewElements, viewMath ].map( element => [ element, 'math-' + element ] ) );\nlet modelMath = modelElements.get( viewMath );\n\n// Attributes\n\nlet attributes = ['columnalign', 'accentunder', /*'src',*/ 'subscriptshift', 'infixlinebreakstyle', 'mslinethickness', 'close', 'rightoverhang', 'longdivstyle', 'linebreak', 'bevelled', 'overflow', 'xml:lang', 'leftoverhang', 'columnwidth', 'equalcolumns', 'id', 'fontfamily', 'separators', 'minlabelspacing', 'scriptlevel', 'height', 'occurrence', 'stackalign', 'color', 'cdgroup', 'veryverythickmathspace', 'rowspacing', 'name', 'other', 'order', 'macros', 'veryverythinmathspace', 'notation', 'columnspan', 'fence', 'valign', 'maxsize', 'indentshiftfirst', 'lspace', 'lquote', 'position', 'crossout', 'equalrows', 'altimg-height', 'voffset', 'dir', 'frame', 'denomalign', '%XLINK.prefix;:href', 'actiontype', 'mode', 'display', 'linethickness', 'maxwidth', 'length', 'columnlines', 'movablelimits', 'lineleading', 'scriptsizemultiplier', 'linebreakstyle', 'charalign', 'charspacing', /*'alt',*/ /*'href',*/ 'rquote', 'altimg', 'verythinmathspace', 'rowlines', 'accent', 'groupalign', 'separator', 'mathbackground', 'nargs', 'indenttarget', 'verythickmathspace', 'mathsize', 'symmetric', 'edge', 'open', 'side', 'thinmathspace', 'fontstyle', 'encoding', 'selection', 'columnspacing', 'decimalpoint', /*'style',*/ 'stretchy', 'cd', 'scriptminsize', 'width', 'indentalignfirst', 'shift', 'index', 'linebreakmultchar', 'xml:space', 'scope', 'largeop', 'alttext', 'altimg-valign', 'base', 'closure', 'minsize', 'indentalign', 'framespacing', 'definitionURL', 'rspace', 'numalign', 'fontweight', 'class', 'rowalign', 'form', 'alignmentscope', 'align', '%XLINK.prefix;:type', 'depth', 'fontsize', 'type', 'background', 'displaystyle', 'superscriptshift', 'mediummathspace', 'rowspan', 'indentshiftlast', 'location', 'xref', 'altimg-width', 'thickmathspace', 'indentalignlast', 'mathcolor', 'indentshift', 'mathvariant', 'xmlns'];\n\n// Schema\n\nlet schema = [\n\n    // <math>\n    {\n        realName: viewMath,\n        modelName: modelMath,\n        definition: {\n            allowWhere: [ '$block', '$inline', '$text' ],\n            allowAttributes: attributes,\n            isBlock: false,\n            isLimit: true,\n            isObject: true,\n        },\n        needsCasting: true,\n        allowsText: true,\n    },\n\n    // The other elements\n    ...viewElements.map( element => ( {\n        realName: element,\n        modelName: modelElements.get( element ),\n        definition: {\n            allowIn: [ ...modelElements.values(), modelElements.get( viewMath ) ],\n            allowAttributes: attributes,\n        },\n        needsCasting: true,\n        allowsText: true, // TODO change this so not all elements allow text inside\n    } ) ),\n\n];\n\nexport {\n    schema, // Array of elements' data; one entry per element\n    attributes, // Array of ALL attributes of all MathML elements\n};\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/xmldataprocessor\n */\n\n/* globals DOMParser, document */\n\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\nimport { NBSP_FILLER } from '../view/filler';\n\n/**\n * The XML data processor class.\n * This data processor implementation uses XML as input and output data.\n * This class is needed because unlike HTML, XML allows to use any tag with any value.\n * For example, `<link>Text</link>` is a valid XML but invalid HTML.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class XmlDataProcessor {\n\t/**\n\t * Creates a new instance of the XML data processor class.\n\t *\n\t * @param {Object} options Configuration options.\n\t * @param {Array<String>} [options.namespaces=[]] A list of namespaces allowed to use in the XML input.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * A list of namespaces allowed to use in the XML input.\n\t\t *\n\t\t * For example, registering namespaces [ 'attribute', 'container' ] allows to use `<attirbute:tagName></attribute:tagName>`\n\t\t * and `<container:tagName></container:tagName>` input. It is mainly for debugging.\n\t\t *\n\t\t * @public\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis.namespaces = options.namespaces || [];\n\n\t\t/**\n\t\t * DOM parser instance used to parse an XML string to an XML document.\n\t\t *\n\t\t * @private\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis._domParser = new DOMParser();\n\n\t\t/**\n\t\t * DOM converter used to convert DOM elements to view elements.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis._domConverter = new DomConverter( { blockFiller: NBSP_FILLER } );\n\n\t\t/**\n\t\t * A basic HTML writer instance used to convert DOM elements to an XML string.\n\t\t * There is no need to use a dedicated XML writer because the basic HTML writer works well in this case.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\n\t\t */\n\t\tthis._htmlWriter = new BasicHtmlWriter();\n\t}\n\n\t/**\n\t * Converts the provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n\t * to data format &mdash; in this case an XML string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} An XML string.\n\t */\n\ttoData( viewFragment ) {\n\t\t// Convert view DocumentFragment to DOM DocumentFragment.\n\t\tconst domFragment = this._domConverter.viewToDom( viewFragment, document );\n\n\t\t// Convert DOM DocumentFragment to XML output.\n\t\t// There is no need to use dedicated for XML serializing method because BasicHtmlWriter works well in this case.\n\t\treturn this._htmlWriter.getHtml( domFragment );\n\t}\n\n\t/**\n\t * Converts the provided XML string to a view tree.\n\t *\n\t * @param {String} data An XML string.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n\t */\n\ttoView( data ) {\n\t\t// Convert input XML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\treturn this._domConverter.domToView( domFragment, { keepOriginalCase: true } );\n\t}\n\n\t/**\n\t * Converts an XML string to its DOM representation. Returns a document fragment containing nodes parsed from\n\t * the provided data.\n\t *\n\t * @private\n\t * @param {String} data\n\t * @returns {DocumentFragment}\n\t */\n\t_toDom( data ) {\n\t\t// Stringify namespaces.\n\t\tconst namespaces = this.namespaces.map( nsp => `xmlns:${ nsp }=\"nsp\"` ).join( ' ' );\n\n\t\t// Wrap data into root element with optional namespace definitions.\n\t\tdata = `<xml ${ namespaces }>${ data }</xml>`;\n\n\t\tconst parsedDocument = this._domParser.parseFromString( data, 'text/xml' );\n\n\t\t// Parse validation.\n\t\tconst parserError = parsedDocument.querySelector( 'parsererror' );\n\n\t\tif ( parserError ) {\n\t\t\tthrow new Error( 'Parse error - ' + parserError.textContent );\n\t\t}\n\n\t\tconst fragment = parsedDocument.createDocumentFragment();\n\t\tconst nodes = parsedDocument.documentElement.childNodes;\n\n\t\twhile ( nodes.length > 0 ) {\n\t\t\tfragment.appendChild( nodes[ 0 ] );\n\t\t}\n\n\t\treturn fragment;\n\t}\n}\n","import XmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/xmldataprocessor';\nimport { BR_FILLER } from '@ckeditor/ckeditor5-engine/src/view/filler';\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\n\nexport default class MathmlDataProcessor extends XmlDataProcessor {\n\n    /**\n     * Creates a new instance of the MathML data processor class.\n     *\n     * @param {Object} options Configuration options.\n     * @param {Array<String>} [options.namespaces=[]] A list of namespaces allowed to use in the XML input.\n     */\n    constructor( options = {} ) {\n\n        // Call XmlDataProcessor's constructor\n        super( options );\n\n        // Use BR_FILLER instead of NSBP_FILLER to identify <br/> and remove them when retrieving data\n        this._domConverter = new DomConverter( { blockFiller: BR_FILLER } );\n\n    }\n\n\ttoData( viewFragment ) {\n        // Convert view DocumentFragment to DOM DocumentFragment.\n        const domFragment = this._domConverter.viewToDom( viewFragment, document );\n\n        let frontier = [ ...domFragment.children ];\n        let current;\n        while ( current = frontier.pop() ) {\n\n            // Removes any block fillers CKEditor might've added\n            if ( current.nodeName.toLowerCase() == 'br' && current.hasAttribute( 'data-cke-filler' ) && current.closest( 'math' ) ) {\n                current.parentNode.removeChild( current );\n            }\n\n            // Replaces < with &lt;, > with &gt;, & with &amp; in attributes\n            for ( let attr of current.attributes ) {\n                current.setAttribute( attr.name, attr.value\n                    .replace( /&/g, '&amp;' )\n                    .replace( /</g, '&lt;' )\n                    .replace( />/g, '&gt;' )\n                );\n            }\n\n            frontier.push( ...current.children );\n\n        }\n\n        // Convert DOM DocumentFragment to XML output.\n        // There is no need to use dedicated for XML serializing method because BasicHtmlWriter works well in this case.\n        //return this._htmlWriter.getHtml( domFragment );\n        const doc = document.implementation.createHTMLDocument( '' );\n        const container = doc.createElement( 'div' );\n        container.appendChild( domFragment );\n\n        // Cleaned HTML containing MathML\n        // 'abc<math>123</math>def<math>456</math>ghi'\n        return container.innerHTML.replace( /&amp;/g, '&' );\n\n    }\n\n    toView( data ) {\n\n        // Convert HTML entities (e.g. &nbsp;) to character entities (e.g. &#160;)\n        let domParser = new DOMParser();\n        data = data.replace( /&.*?;/g, i => {\n            let out = domParser.parseFromString( i, 'text/html' ).body.childNodes[0].data;\n            return out == '<' || out == '>' ? i : out;\n        } );\n\n        // Convert UTF-8 characters to entities\n        data = data.replace( /[\\u00A0-\\u9999]/gm, i => '&#' + i.charCodeAt( 0 ) + ';' );\n\n        // We need to find and close the dangling open tags like <img> that HTML5 allows but XML does not.\n        data = data.replace( /<(?:area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)[\\s\\S]*?>/g, match => match.replace( /([^\\/])>/, '$1/>' ) );\n\n        // Convert input XML data to DOM DocumentFragment.\n        const domFragment = this._toDom( data );\n\n        // Convert DOM DocumentFragment to view DocumentFragment.\n        return this._domConverter.domToView( domFragment, { keepOriginalCase: true } );\n\n    }\n\n}","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport { schema as mathmlSchema, attributes as mathmlAttributes } from './mathmlschema';\nimport MathmlDataProcessor from './conversion/mathmldataprocessor';\n\nexport default class MathML extends Plugin {\n\n    static get requires() {\n        return [];\n    }\n\n    static get pluginName() {\n        return 'MathML';\n    }\n\n    init() {\n\n        const editor = this.editor;\n        const schema = editor.model.schema;\n\n        /*** Extend model ***/\n\n        // For every element of MathML...\n        for ( const { realName, modelName, definition, needsCasting } of mathmlSchema ) {\n\n            // Register the element with its definition\n            schema.register( modelName, definition );\n\n            // Add casting?\n            if ( needsCasting ) {\n\n                editor.conversion.elementToElement( {\n                    model: modelName,\n                    view: realName\n                } );\n\n                /* Add hardcoded converters for href attribute only, as a\n                preventive measure so as to avoid a similar behavior to PLUGINS-1228*/\n                editor.conversion.attributeToAttribute( {\n                    model: {\n                        name: modelName,\n                        key: 'href',\n                    },\n                    view: {\n                        name: realName,\n                        key: 'href',\n                    }\n                } );\n\n            }\n\n        }\n\n        // Apparently it is needed to register every attribute to be converted.\n        // FIXME this adds global converters for attributes on *any* element.\n        // Ideally, these should work on a per-element basis, but adding all\n        // MathML attributes to all MathML elements is too costly.\n        for ( const attribute of mathmlAttributes ) {\n            editor.conversion.attributeToAttribute( {\n                model: attribute,\n                view: attribute,\n            } );\n        }\n\n        // Allow text in some elements\n        schema.extend( '$text', {\n            allowIn: mathmlSchema\n                        .filter( element => element.allowsText )\n                        .map( element => element.modelName )\n        } );\n\n        // Disallow text attributes (bold, italics, etc.) on text nodes\n        schema.addAttributeCheck( context => {\n            const contextArray = Array.from( context.getNames() );\n            if ( contextArray[ contextArray.length - 1 ] == '$text' && contextArray.some( name => name.startsWith( 'math-' ) ) ) {\n                return false;\n            }\n        } );\n\n        // Data processor to output proper MathML\n        editor.data.processor = new MathmlDataProcessor();\n\n    }\n\n}\n","import MathmlDataProcessor from '@wiris/ckeditor5-mathml/src/conversion/mathmldataprocessor';\n\nimport MathML from '../integration-js/src/mathml.js';\nimport Parser from '../integration-js/src/parser.js';\n\nexport default class CustomMathmlDataProcessor extends MathmlDataProcessor {\n\n    toData( viewFragment ) {\n\n        // Get the processed html from MathmlDataProcessor to remove hand traces\n        let html = super.toData( viewFragment );\n\n        const mathPattern = /<math.*?<\\/math.*?>/g;\n\n        // HTML broken down into pieces like so:\n        let htmlPieces = html.split( mathPattern ); // 'abc', 'def', 'ghi'\n        let mathmlPieces = html.match( mathPattern ) || []; // '<math>123</math>', '<math>456</math>'\n\n        // Variables used in the loop\n        let open, inner, close; // '<math>', '123', '</math>'\n        let innerStartIndex, closeStartIndex; // Index of inner and close\n\n        // Iterate only through the <math>...</math> blocks\n        for ( let i = 0; i < mathmlPieces.length; i++ ) {\n\n            innerStartIndex = mathmlPieces[ i ].indexOf( '>' ) + 1;\n            closeStartIndex = mathmlPieces[ i ].indexOf( '</math', innerStartIndex );\n\n            open = mathmlPieces[ i ].substring( 0, innerStartIndex );\n            inner = mathmlPieces[ i ].substring( innerStartIndex, closeStartIndex );\n            close = mathmlPieces[ i ].substring( closeStartIndex );\n\n            // Remove the annotation tags introduced by \"Hand\"\n            inner = MathML.removeAnnotation( inner, 'application/json' );\n\n            mathmlPieces[ i ] = open + inner + close;\n\n        }\n\n        // Return joined pieces\n        let data = htmlPieces // [ 'abc', 'def', 'ghi' ]\n            .map( ( piece, index ) => [ piece, mathmlPieces[ index ] ] ) // [ [ 'abc', '<math>123</math>' ], [ 'def', '<math>456</math>' ], [ 'ghi', undefined ] ]\n            // Use reduce + concat instead of flat because Edge doesn't support flat\n            .reduce( ( acc, cur ) => acc.concat( cur ), [] ) // [ 'abc', '<math>123</math>', 'def', '<math>456</math>', 'ghi', undefined ]\n            .filter( piece => typeof piece !== 'undefined' ) // [ 'abc', '<math>123</math>', 'def', '<math>456</math>', 'ghi' ]\n            .reduce( ( acc, cur ) => acc + cur ); // 'abc<math>123</math>def<math>456</math>ghi'\n\n        // Convert LaTeX instances to MathML elements\n        data = Parser.endParseEditMode( data );\n\n        return data;\n\n    }\n\n}","import Position from '@ckeditor/ckeditor5-engine/src/model/position';\n\nimport CustomMathmlDataProcessor from './conversion/custommathmldataprocessor'\n\nimport IntegrationModel, { integrationModelProperties } from './integration-js/src/integrationmodel';\nimport Util from './integration-js/src/util';\nimport Configuration from './integration-js/src/configuration';\nimport Latex from './integration-js/src/latex';\n\n/**\n * This class represents the MathType integration for CKEditor5.\n * @extends {IntegrationModel}\n */\nexport default class CKEditor5Integration extends IntegrationModel {\n\n    constructor( ckeditorIntegrationModelProperties ) {\n        const editor = ckeditorIntegrationModelProperties.editorObject;\n\n        if ( typeof editor.config != 'undefined' && typeof editor.config.get('mathTypeParameters') != 'undefined') {\n            ckeditorIntegrationModelProperties.integrationParameters = editor.config.get('mathTypeParameters');\n        }\n        /**\n         * CKEditor5 Integration.\n         *\n         * @param {integrationModelProperties} integrationModelAttributes\n         */\n        super( ckeditorIntegrationModelProperties );\n\n        /**\n         * Folder name used for the integration inside CKEditor plugins folder.\n         */\n        this.integrationFolderName = 'ckeditor_wiris';\n    }\n\n\n    /**\n     * @inheritdoc\n     * @returns {string} - The CKEditor instance language.\n     * @override\n     */\n    getLanguage() {\n        // Returns the CKEDitor instance language.\n        return this.editorObject.config.get( 'language' );\n    }\n\n    /**\n     * Adds callbacks to the following CKEditor listeners:\n     * - 'focus' - updates the current instance.\n     * - 'contentDom' - adds 'doubleclick' callback.\n     * - 'doubleclick' - sets to null data.dialog property to avoid modifications for MathType formulas.\n     * - 'setData' - parses the data converting MathML into images.\n     * - 'afterSetData' - adds an observer to MathType formulas to avoid modifications.\n     * - 'getData' - parses the data converting images into selected save mode (MathML by default).\n     * - 'mode' - recalculates the active element.\n     */\n    addEditorListeners() {\n        const editor = this.editorObject;\n\n        if ( typeof editor.config.wirislistenersdisabled == 'undefined' ||\n            !editor.config.wirislistenersdisabled ) {\n\n            this.checkElement();\n\n        }\n    }\n\n    /**\n     * Checks the current container and assign events in case that it doesn't have them.\n     * CKEditor replaces several times the element element during its execution,\n     * so we must assign the events again to editor element.\n     */\n    checkElement() {\n\n        const editor = this.editorObject;\n        const newElement = editor.sourceElement;\n\n        // If the element wasn't treated, add the events.\n        if ( !newElement.wirisActive ) {\n            this.setTarget(newElement);\n            this.addEvents();\n            // Set the element as treated\n            newElement.wirisActive = true;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     * @param {HTMLElement} element - HTMLElement target.\n     * @param {MouseEvent} event - event which trigger the handler.\n     */\n    doubleClickHandler(element, event) {\n        if (element.nodeName.toLowerCase() == 'img') {\n            if (Util.containsClass(element, Configuration.get('imageClassName'))) {\n                // Some plugins (image2, image) open a dialog on double click. On formulas\n                // doubleclick event ends here.\n                if (typeof event.stopPropagation != 'undefined') { // old I.E compatibility.\n                    event.stopPropagation();\n                } else {\n                    event.returnValue = false;\n                }\n                this.core.getCustomEditors().disable();\n                const customEditorAttr = element.getAttribute(Configuration.get('imageCustomEditorName'));\n                if (customEditorAttr) {\n                    this.core.getCustomEditors().enable(customEditorAttr);\n                }\n                this.core.editionProperties.temporalImage = element;\n                this.openExistingFormulaEditor();\n            }\n        }\n    }\n\n\n    /** @inheritdoc */\n    getCorePath() {\n        return null; // TODO\n    }\n\n    /** @inheritdoc */\n    callbackFunction() {\n        super.callbackFunction();\n        this.addEditorListeners();\n    }\n\n    openNewFormulaEditor() {\n\n        // Store the editor selection as it will be lost upon opening the modal\n        this.core.editionProperties.selection = this.editorObject.editing.view.document.selection;\n\n        return super.openNewFormulaEditor();\n\n    }\n\n    /**\n     * Replaces old formula with new MathML or inserts it in caret position if new\n     * @param {String} mathml MathML to update old one or insert\n     * @returns {module:engine/model/element~Element} The model element corresponding to the inserted image\n     */\n    insertMathml( mathml ) {\n        // This returns the value returned by the callback function (writer => {...})\n        return this.editorObject.model.change( writer => {\n\n            const core = this.getCore();\n\n            const mathmlDP = new CustomMathmlDataProcessor();\n\n            // \"<math>\" -> <math>\n            let modelElementNew;\n            if ( mathml ) {\n                const viewFragment = mathmlDP.toView( mathml );\n                // <math> -> <math-math>\n                modelElementNew = this.editorObject.data.toModel( viewFragment ).getChild( 0 );\n            }\n\n            // The DOM <img> object corresponding to the formula\n            if ( core.editionProperties.isNewElement ) {\n\n                let viewSelection = this.core.editionProperties.selection || this.editorObject.editing.view.document.selection;\n                let modelPosition = this.editorObject.editing.mapper.toModelPosition( viewSelection.getLastPosition() );\n\n                if ( modelElementNew ) {\n                    writer.insert( modelElementNew, modelPosition );\n                }\n\n                // Remove selection\n                if ( !viewSelection.isCollapsed ) {\n\n                    for ( const range of viewSelection.getRanges() ) {\n                        writer.remove( this.editorObject.editing.mapper.toModelRange( range ) );\n                    }\n\n                }\n\n            } else {\n\n                const img = core.editionProperties.temporalImage;\n                const viewElement = this.editorObject.editing.view.domConverter.domToView( img );\n                const modelElementOld = this.editorObject.editing.mapper.toModelElement( viewElement );\n\n                // Insert the new <math-math> and remove the old one\n                const position = Position._createBefore( modelElementOld );\n                if ( modelElementNew ) {\n                    writer.insert( modelElementNew, position );\n                }\n                writer.remove( modelElementOld );\n\n            }\n\n            return modelElementNew;\n\n        } );\n    }\n\n    /**\n     * Finds the text node corresponding to given DOM text element.\n     * @param {element} viewElement Element to find corresponding text node of.\n     * @returns {module:engine/model/text~Text|undefined} Text node corresponding to the given element or undefined if it doesn't exist.\n     */\n    findText( viewElement ) {\n\n        // mapper always converts text nodes to *new* model elements so we need to convert the text's parents and then come back down\n        let pivot = viewElement;\n        let element;\n        while ( !element ) {\n            element =\n                this.editorObject.editing.mapper.toModelElement(\n                    this.editorObject.editing.view.domConverter.domToView(\n                        pivot\n                    )\n                );\n            pivot = pivot.parentElement;\n        }\n\n        // Navigate through all the subtree under `pivot` in order to find the correct text node\n        const range = this.editorObject.model.createRangeIn( element );\n        const descendants = Array.from( range.getItems() );\n        for ( const node of descendants ) {\n            if ( node.is( 'textProxy' ) && node.data == viewElement.data ) {\n                return node.textNode;\n            }\n        }\n\n    }\n\n    /** @inheritdoc */\n    insertFormula( focusElement, windowTarget, mathml, wirisProperties ) {\n\n        let returnObject = {};\n\n        if ( !mathml ) {\n            this.insertMathml( '' );\n        } else if ( this.core.editMode == 'latex' ) {\n\n            returnObject.latex = Latex.getLatexFromMathML( mathml );\n            returnObject.node = windowTarget.document.createTextNode( '$$' + returnObject.latex + '$$' );\n\n            this.editorObject.model.change( writer => {\n\n                const latexRange = this.core.editionProperties.latexRange;\n\n                const startNode = this.findText( latexRange.startContainer );\n                const endNode = this.findText( latexRange.endContainer );\n\n                const startPosition = writer.createPositionAt( startNode.parent, startNode.startOffset + latexRange.startOffset );\n                const endPosition = writer.createPositionAt( endNode.parent, endNode.startOffset + latexRange.endOffset );\n\n                const range = writer.createRange(\n                    startPosition,\n                    endPosition,\n                );\n\n                writer.remove( range );\n                writer.insertText( '$$' + returnObject.latex + '$$', startNode.getAttributes(), startPosition );\n\n            } );\n\n        } else {\n            returnObject.node = this.editorObject.editing.view.domConverter.viewToDom(\n                this.editorObject.editing.mapper.toViewElement(\n                    this.insertMathml( mathml )\n                )\n            );\n        }\n\n        return returnObject;\n\n    }\n\n    /**\n     * Function called when the content submits an action.\n     */\n    notifyWindowClosed() {\n        this.editorObject.editing.view.focus();\n    }\n\n}","import Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport CKEditor5Integration from '../integration';\n\nexport default class MathType extends Command {\n\n    constructor( editor ) {\n        super( editor );\n    }\n\n    execute( options = {} ) {\n\n        if ( !options.hasOwnProperty( 'integration' ) || !( options.integration instanceof CKEditor5Integration ) ) {\n            throw 'Must pass a valid CKEditor5Integration instance as attribute \"integration\" of options';\n        }\n\n        const integration = options.integration;\n        // Can be that previously custom editor was used. So is needed disable\n        // all the editors to avoid wrong behaviours.\n        integration.core.getCustomEditors().disable();\n        integration.openNewFormulaEditor();\n\n    }\n\n}","import Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport CKEditor5Integration from '../integration';\n\nexport default class ChemType extends Command {\n\n    constructor( editor ) {\n        super( editor );\n    }\n\n    execute( options = {} ) {\n\n        if ( !options.hasOwnProperty( 'integration' ) || !( options.integration instanceof CKEditor5Integration ) ) {\n            throw 'Must pass a valid CKEditor5Integration instance as attribute \"integration\" of options';\n        }\n\n        const integration = options.integration;\n        // Can be that previously custom editor was used. So is needed disable\n        // all the editors to avoid wrong behaviours.\n        integration.core.getCustomEditors().enable( 'chemistry' );\n        integration.openNewFormulaEditor();\n\n    }\n\n}","export default \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<!-- Generator: Adobe Illustrator 22.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n\\t viewBox=\\\"0 0 300 261.7\\\" style=\\\"enable-background:new 0 0 300 261.7;\\\" xml:space=\\\"preserve\\\">\\n<style type=\\\"text/css\\\">\\n\\t.st0{fill:#FFFFFF;}\\n\\t.st1{fill:#EF4A5F;}\\n\\t.st2{fill:#C8202F;}\\n</style>\\n<path class=\\\"st0\\\" d=\\\"M300,32.8c0-16.4-13.4-29.7-29.9-29.7c-2.9,0-7.2,0.8-7.2,0.8c-37.9,9.1-71.3,14-112,14c-0.3,0-0.6,0-1,0\\n\\tc-16.5,0-29.9,13.3-29.9,29.7c0,16.4,13.4,29.7,29.9,29.7l0,0c45.3,0,83.1-5.3,125.3-15.3h0C289.3,59.5,300,47.4,300,32.8\\\"/>\\n<path class=\\\"st0\\\" d=\\\"M90.2,257.7c-11.4,0-21.9-6.4-27-16.7l-60-119.9c-7.5-14.9-1.4-33.1,13.5-40.5c14.9-7.5,33.1-1.4,40.5,13.5\\n\\tl27.3,54.7L121.1,39c5.3-15.8,22.4-24.4,38.2-19.1c15.8,5.3,24.4,22.4,19.1,38.2l-59.6,179c-3.9,11.6-14.3,19.7-26.5,20.6\\n\\tC91.6,257.7,90.9,257.7,90.2,257.7\\\"/>\\n<g>\\n\\t<g>\\n\\t\\t<path class=\\\"st1\\\" d=\\\"M90.2,257.7c-11.4,0-21.9-6.4-27-16.7l-60-119.9c-7.5-14.9-1.4-33.1,13.5-40.5c14.9-7.5,33.1-1.4,40.5,13.5\\n\\t\\t\\tl27.3,54.7L121.1,39c5.3-15.8,22.4-24.4,38.2-19.1c15.8,5.3,24.4,22.4,19.1,38.2l-59.6,179c-3.9,11.6-14.3,19.7-26.5,20.6\\n\\t\\t\\tC91.6,257.7,90.9,257.7,90.2,257.7\\\"/>\\n\\t</g>\\n</g>\\n<g>\\n\\t<g>\\n\\t\\t<path class=\\\"st2\\\" d=\\\"M300,32.8c0-16.4-13.4-29.7-29.9-29.7c-2.9,0-7.2,0.8-7.2,0.8c-37.9,9.1-71.3,14-112,14c-0.3,0-0.6,0-1,0\\n\\t\\t\\tc-16.5,0-29.9,13.3-29.9,29.7c0,16.4,13.4,29.7,29.9,29.7l0,0c45.3,0,83.1-5.3,125.3-15.3h0C289.3,59.5,300,47.4,300,32.8\\\"/>\\n\\t</g>\\n</g>\\n</svg>\\n\"","export default \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<!-- Generator: Adobe Illustrator 22.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n\\t viewBox=\\\"0 0 40.3 49.5\\\" style=\\\"enable-background:new 0 0 40.3 49.5;\\\" xml:space=\\\"preserve\\\">\\n<style type=\\\"text/css\\\">\\n\\t.st0{fill:#A4CF61;}\\n</style>\\n<path class=\\\"st0\\\" d=\\\"M39.2,12.1c0-1.9-1.1-3.6-2.7-4.4L24.5,0.9l0,0c-0.7-0.4-1.5-0.6-2.4-0.6c-0.9,0-1.7,0.2-2.4,0.6l0,0L2.3,10.8\\n\\tl0,0C0.9,11.7,0,13.2,0,14.9h0v19.6h0c0,1.7,0.9,3.3,2.3,4.1l0,0l17.4,9.9l0,0c0.7,0.4,1.5,0.6,2.4,0.6c0.9,0,1.7-0.2,2.4-0.6l0,0\\n\\tl12.2-6.9h0c1.5-0.8,2.6-2.5,2.6-4.3c0-2.7-2.2-4.9-4.9-4.9c-0.9,0-1.8,0.3-2.5,0.7l0,0l-9.7,5.6l-12.3-7V17.8l12.3-7l9.9,5.7l0,0\\n\\tc0.7,0.4,1.5,0.6,2.4,0.6C37,17,39.2,14.8,39.2,12.1\\\"/>\\n</svg>\\n\"","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport ClickObserver from '@ckeditor/ckeditor5-engine/src/view/observer/clickobserver';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\nimport { integrationModelProperties } from './integration-js/src/integrationmodel';\nimport Core from './integration-js/src/core.src.js';\nimport Parser from './integration-js/src/parser.js';\nimport Util from './integration-js/src/util.js';\nimport Image from './integration-js/src/image.js';\nimport Configuration from './integration-js/src/configuration.js';\nimport Listeners from './integration-js/src/listeners';\nimport IntegrationModel from './integration-js/src/integrationmodel.js';\nimport CoreMathML from './integration-js/src/mathml.js';\nimport Latex from './integration-js/src/latex';\n\nimport MathML from '@wiris/ckeditor5-mathml/src/mathml';\n\nimport { downcast } from './conversion/downcast';\nimport MathType from './commands/mathtype';\nimport ChemType from './commands/chemtype';\nimport CKEditor5Integration from './integration';\n\nimport mathIcon from '../theme/icons/formula.svg';\nimport chemIcon from '../theme/icons/chem.svg';\n\nimport CustomMathmlDataProcessor from './conversion/custommathmldataprocessor';\n\n// Expose WirisPlugin variable to the window.\nwindow.WirisPlugin = {\n    Core: Core,\n    Parser: Parser,\n    Image: Image,\n    MathML: CoreMathML,\n    Util: Util,\n    Configuration: Configuration,\n    Listeners: Listeners,\n    IntegrationModel: IntegrationModel,\n    Latex: Latex\n}\nexport default class MathTypePlugin extends Plugin {\n\n    static get requires() {\n        return [ MathML ];\n    }\n\n    static get pluginName() {\n        return 'MathType';\n    }\n\n    init() {\n\n        const editor = this.editor;\n\n        // Downcaster that converts MathML to Wirisformula <img>\n        editor.conversion.for( 'editingDowncast' ).add( downcast( editor ) );\n\n        // Add integration properties\n        /**\n         * Integration model constructor attributes.\n         * @type {integrationModelProperties}\n         */\n        const integrationProperties = {};\n        integrationProperties.environment = {};\n        integrationProperties.environment.editor = 'CKEditor5';\n        integrationProperties.editorObject = editor;\n        integrationProperties.serviceProviderProperties = {};\n        integrationProperties.serviceProviderProperties.URI = 'https://www.wiris.net/demo/plugins/app';\n        integrationProperties.serviceProviderProperties.server = 'java';\n        integrationProperties.target = editor.sourceElement;\n        integrationProperties.scriptName = 'bundle.js';\n        integrationProperties.managesLanguage = true;\n        // etc\n\n        // There are platforms like Drupal that initialize CKEditor but they hide or remove the container element.\n        // To avoid a wrong behaviour, this integration only starts if the workspace container exists.\n        let integration;\n        if ( integrationProperties.target ) {\n            // Instance of the integration associated to this editor instance\n            integration = new CKEditor5Integration( integrationProperties );\n            integration.init();\n            integration.listeners.fire( 'onTargetReady', {} );\n\n            integration.checkElement();\n\n            this.listenTo( editor.editing.view.document, 'click', ( evt, data ) => {\n                // Is double click\n                if ( data.domEvent.detail == 2 ) {\n                    integration.doubleClickHandler( data.domTarget, data.domEvent );\n                    evt.stop();\n                }\n            }, { priority: 'highest' } );\n\n        }\n\n        // Add command to open the formula editor\n        editor.commands.add( 'MathType', new MathType( editor ) );\n\n        // Add command to open the chemistry formula editor\n        editor.commands.add( 'ChemType', new ChemType( editor ) );\n\n        // Add button for the formula editor\n        editor.ui.componentFactory.add( 'MathType', locale => {\n            const view = new ButtonView( locale );\n\n            view.set( {\n                label: 'Insert a math equation - MathType',\n                icon: mathIcon, // TODO CKEditor5 requires SVG icons\n                tooltip: true\n            } );\n\n            // Callback executed once the image is clicked.\n            view.on( 'execute', () => {\n                editor.execute( 'MathType', {\n                    'integration': integration, // Pass integration as parameter\n                } );\n            } );\n\n            return view;\n        } );\n\n        // Add button for the chemistry formula editor\n        editor.ui.componentFactory.add( 'ChemType', locale => {\n            const view = new ButtonView( locale );\n\n            view.set( {\n                label: 'Insert a chemistry formula - ChemType',\n                icon: chemIcon, // TODO CKEditor5 requires SVG icons\n                tooltip: true\n            } );\n\n            // Callback executed once the image is clicked.\n            view.on( 'execute', () => {\n                editor.execute( 'ChemType', {\n                    'integration': integration, // Pass integration as parameter\n                } );\n            } );\n\n            return view;\n        } );\n\n        editor.editing.view.addObserver( ClickObserver );\n\n        editor.editing.view.document.on( 'keydown', jumpOverMath );\n\n        // Move cursor from the end of the inline filler to the beginning of it when, so the filler does not break navigation.\n        function jumpOverMath( evt, data ) {\n            if ( data.keyCode == keyCodes.arrowleft ) {\n                const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n                if ( domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed ) {\n                    const domParent = domSelection.getRangeAt( 0 ).startContainer;\n\n                    if ( domParent.nodeName == 'img' && domParent.classList.contains( 'Wirisformula' ) ) {\n                        domSelection.collapse( domParent.parentNode, Array.from( domParent.parentNode.children ).indexOf( domParent ) );\n                    }\n\n                }\n\n            } else if ( data.keyCode == keyCodes.arrowright ) {\n                const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n                if ( domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed ) {\n                    const domParent = domSelection.getRangeAt( 0 ).startContainer;\n\n                    if ( domParent.nodeName == 'img' && domParent.classList.contains( 'Wirisformula' ) ) {\n                        domSelection.collapse( domParent.parentNode, Array.from( domParent.parentNode.children ).indexOf( domParent ) + 1 );\n                    }\n\n                }\n\n            }\n        }\n\n        // Override MathML plugin's data processor to custom data processor\n        editor.data.processor = new CustomMathmlDataProcessor();\n\n    }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals document, console */\n\nimport ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\nimport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\nimport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\nimport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\nimport Heading from '@ckeditor/ckeditor5-heading/src/heading';\nimport MathType from '@wiris/mathtype-ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#mathtype-editor' ), {\n\t\tplugins: [\n\t\t\tEssentials,\n\t\t\tBold,\n\t\t\tItalic,\n\t\t\tHeading,\n\t\t\tMathType\n\t\t],\n\t\ttoolbar: [ 'heading', '|', 'bold', 'italic', '|', 'undo', 'redo', '|', 'MathType', 'ChemType' ]\n\t} )\n\t.catch( err => {\n\t\tconsole.error( err.stack );\n\t} );\n","import HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\n\nimport Parser from '../integration-js/src/parser.js';\n\nimport CustomMathmlDataProcessor from './custommathmldataprocessor'\n\nexport function downcast( editor ) {\n    return ( dispatcher ) => {\n        dispatcher.on( 'insert:math-math', ( evt, data, conversionApi ) => {\n\n            const math = data.item;\n\n            // Check whether the change has not been consumed yet and consume it.\n            if ( !conversionApi.consumable.consume( math, 'insert' ) ) {\n                return;\n            }\n\n            // Consume all the children now so they won't get converted later.\n            for ( const child of editor.model.createRangeIn( math ).getItems() ) {\n                conversionApi.consumable.consume( child, 'insert' );\n                for ( const attributeKey of child.getAttributeKeys() ) {\n                    conversionApi.consumable.consume( child, 'attribute:' + attributeKey );\n                }\n            }\n\n            const htmlDataProcessor = new HtmlDataProcessor();\n            const mathmlDP = new CustomMathmlDataProcessor();\n            const mathString = mathmlDP\n                                .toData( math )\n                                .replace( /<math-/g , '<' )\n                                .replace( /<\\/math-/g , '</' );\n\n            let viewElement;\n\n            // If <math> element, parse it and embed it into the model\n            if ( mathString.match( /<math[\\s|>]/g ) ) {\n\n                // Create <img> element that will be inserted in view at `viewPosition`.\n                let imgHtml = Parser.initParse( mathString, editor.config.get( 'language' ) );\n                let imgElement = htmlDataProcessor.toView( imgHtml ).getChild( 0 );\n\n                // If the MathML was correct and the service worked, getAttributes\n                // should be defined, otherwise use empty <math> element\n                if ( !imgElement.getAttributes ) {\n                    console.log( 'No attrs!' );\n                    imgHtml = Parser.initParse( '<math></math>' );\n                    imgElement = htmlDataProcessor.toView( imgHtml ).getChild( 0 );\n                }\n\n                let imgAttributes = {};\n\n                for ( const [ key, value ] of imgElement.getAttributes() ) {\n                    imgAttributes[ key ] = value;\n                }\n\n                viewElement = conversionApi.writer.createEmptyElement( 'img', imgAttributes );\n\n                // Remove filler offset\n                viewElement.getFillerOffset = () => null;\n\n                // Bind the newly created view element to model element so positions will map accordingly in future.\n                conversionApi.mapper.bindElements( data.item, viewElement );\n\n                // Translate position in model to position in view.\n                const viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n                // Add the newly created view element to the view.\n                conversionApi.writer.insert( viewPosition, viewElement );\n\n                // Stop the event propagation.\n                evt.stop();\n\n            }\n\n        }, { priority: 'high' } );\n    };\n}"],"sourceRoot":""}
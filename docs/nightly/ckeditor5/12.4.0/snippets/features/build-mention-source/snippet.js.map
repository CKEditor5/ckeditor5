{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./packages/ckeditor5-utils/src/ckeditorerror.js","webpack:///./packages/ckeditor5-core/src/plugin.js","webpack:///./packages/ckeditor5-engine/src/model/range.js","webpack:///./node_modules/lodash-es/last.js","webpack:///./packages/ckeditor5-engine/src/model/position.js","webpack:///./packages/ckeditor5-utils/src/mix.js","webpack:///./packages/ckeditor5-engine/src/view/position.js","webpack:///./packages/ckeditor5-ui/src/view.js","webpack:///./packages/ckeditor5-core/src/command.js","webpack:///./packages/ckeditor5-utils/src/emittermixin.js","webpack:///./packages/ckeditor5-utils/src/keyboard.js","webpack:///./packages/ckeditor5-engine/src/view/range.js","webpack:///./packages/ckeditor5-table/src/commands/utils.js","webpack:///./packages/ckeditor5-ui/src/button/buttonview.js","webpack:///./packages/ckeditor5-utils/src/observablemixin.js","webpack:///./packages/ckeditor5-engine/src/model/element.js","webpack:///./packages/ckeditor5-engine/src/model/text.js","webpack:///./packages/ckeditor5-engine/src/view/filler.js","webpack:///./packages/ckeditor5-engine/src/view/text.js","webpack:///./packages/ckeditor5-engine/src/model/operation/moveoperation.js","webpack:///./packages/ckeditor5-widget/src/highlightstack.js","webpack:///./packages/ckeditor5-widget/theme/icons/drag-handle.svg","webpack:///./packages/ckeditor5-widget/src/utils.js","webpack:///./packages/ckeditor5-utils/src/dom/global.js","webpack:///./packages/ckeditor5-engine/src/model/operation/splitoperation.js","webpack:///./node_modules/lodash-es/_root.js","webpack:///./packages/ckeditor5-utils/src/comparearrays.js","webpack:///./packages/ckeditor5-utils/src/dom/istext.js","webpack:///./packages/ckeditor5-utils/src/env.js","webpack:///./packages/ckeditor5-engine/src/model/operation/mergeoperation.js","webpack:///./packages/ckeditor5-engine/src/model/operation/operation.js","webpack:///./packages/ckeditor5-utils/src/collection.js","webpack:///./packages/ckeditor5-utils/src/dom/rect.js","webpack:///./packages/ckeditor5-engine/src/view/element.js","webpack:///./node_modules/lodash-es/isObject.js","webpack:///./node_modules/lodash-es/isObjectLike.js","webpack:///./packages/ckeditor5-image/src/image/utils.js","webpack:///./packages/ckeditor5-utils/src/focustracker.js","webpack:///./packages/ckeditor5-engine/src/model/liveposition.js","webpack:///./packages/ckeditor5-utils/src/isiterable.js","webpack:///./node_modules/lodash-es/isEqual.js","webpack:///./packages/ckeditor5-engine/src/model/operation/attributeoperation.js","webpack:///./packages/ckeditor5-utils/src/uid.js","webpack:///./packages/ckeditor5-list/src/utils.js","webpack:///./packages/ckeditor5-engine/src/model/textproxy.js","webpack:///./packages/ckeditor5-engine/src/model/operation/utils.js","webpack:///./packages/ckeditor5-utils/src/keystrokehandler.js","webpack:///./packages/ckeditor5-utils/src/first.js","webpack:///./packages/ckeditor5-engine/src/model/operation/insertoperation.js","webpack:///./packages/ckeditor5-engine/src/view/selection.js","webpack:///./node_modules/lodash-es/_Symbol.js","webpack:///./node_modules/lodash-es/_coreJsData.js","webpack:///./node_modules/lodash-es/_isMasked.js","webpack:///./node_modules/lodash-es/_baseIsNative.js","webpack:///./node_modules/lodash-es/_getValue.js","webpack:///./node_modules/lodash-es/_getNative.js","webpack:///./packages/ckeditor5-engine/src/view/observer/observer.js","webpack:///./packages/ckeditor5-engine/src/model/treewalker.js","webpack:///./packages/ckeditor5-engine/src/view/observer/domeventobserver.js","webpack:///./node_modules/lodash-es/_getRawTag.js","webpack:///./node_modules/lodash-es/_objectToString.js","webpack:///./node_modules/lodash-es/_baseGetTag.js","webpack:///./packages/ckeditor5-ui/src/dropdown/dropdownpanelview.js","webpack:///./packages/ckeditor5-ui/src/dropdown/dropdownview.js","webpack:///./packages/ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js","webpack:///./packages/ckeditor5-ui/src/list/listseparatorview.js","webpack:///./packages/ckeditor5-ui/src/dropdown/utils.js","webpack:///./packages/ckeditor5-upload/src/filereader.js","webpack:///./packages/ckeditor5-upload/src/filerepository.js","webpack:///./packages/ckeditor5-engine/src/view/textproxy.js","webpack:///./packages/ckeditor5-ui/src/focuscycler.js","webpack:///./packages/ckeditor5-engine/src/view/matcher.js","webpack:///./packages/ckeditor5-ui/src/viewcollection.js","webpack:///./packages/ckeditor5-utils/src/tomap.js","webpack:///./node_modules/lodash-es/isArray.js","webpack:///./packages/ckeditor5-ui/src/template.js","webpack:///./packages/ckeditor5-utils/src/dom/emittermixin.js","webpack:///./node_modules/lodash-es/_copyObject.js","webpack:///./packages/ckeditor5-engine/src/view/node.js","webpack:///./packages/ckeditor5-engine/src/model/node.js","webpack:///./packages/ckeditor5-engine/src/model/nodelist.js","webpack:///./packages/ckeditor5-engine/src/view/treewalker.js","webpack:///./packages/ckeditor5-engine/src/model/operation/markeroperation.js","webpack:///./packages/ckeditor5-engine/src/model/operation/renameoperation.js","webpack:///./node_modules/lodash-es/_DataView.js","webpack:///./node_modules/lodash-es/_Promise.js","webpack:///./node_modules/lodash-es/_Set.js","webpack:///./node_modules/lodash-es/_WeakMap.js","webpack:///./node_modules/lodash-es/_getTag.js","webpack:///./node_modules/lodash-es/_nodeUtil.js","webpack:///./packages/ckeditor5-utils/src/diff.js","webpack:///./packages/ckeditor5-utils/src/dom/isnode.js","webpack:///./node_modules/lodash-es/_toSource.js","webpack:///./packages/ckeditor5-engine/src/model/documentfragment.js","webpack:///./packages/ckeditor5-engine/src/view/documentfragment.js","webpack:///./packages/ckeditor5-clipboard/src/datatransfer.js","webpack:///./packages/ckeditor5-clipboard/src/clipboardobserver.js","webpack:///./packages/ckeditor5-clipboard/src/utils/viewtoplaintext.js","webpack:///./packages/ckeditor5-clipboard/src/clipboard.js","webpack:///./packages/ckeditor5-clipboard/src/utils/normalizeclipboarddata.js","webpack:///./packages/ckeditor5-clipboard/src/utils/plaintexttohtml.js","webpack:///./node_modules/lodash-es/_baseSlice.js","webpack:///./node_modules/lodash-es/_castSlice.js","webpack:///./node_modules/lodash-es/_hasUnicode.js","webpack:///./node_modules/lodash-es/_asciiToArray.js","webpack:///./node_modules/lodash-es/_unicodeToArray.js","webpack:///./node_modules/lodash-es/_stringToArray.js","webpack:///./node_modules/lodash-es/_createCaseFirst.js","webpack:///./node_modules/lodash-es/upperFirst.js","webpack:///./packages/ckeditor5-link/src/utils.js","webpack:///./packages/ckeditor5-engine/src/model/liverange.js","webpack:///./node_modules/lodash-es/eq.js","webpack:///./node_modules/lodash-es/_listCacheClear.js","webpack:///./node_modules/lodash-es/_assocIndexOf.js","webpack:///./node_modules/lodash-es/_listCacheDelete.js","webpack:///./node_modules/lodash-es/_listCacheGet.js","webpack:///./node_modules/lodash-es/_listCacheHas.js","webpack:///./node_modules/lodash-es/_listCacheSet.js","webpack:///./node_modules/lodash-es/_ListCache.js","webpack:///./node_modules/lodash-es/_Map.js","webpack:///./packages/ckeditor5-engine/src/view/attributeelement.js","webpack:///./packages/ckeditor5-engine/src/view/containerelement.js","webpack:///./packages/ckeditor5-utils/src/dom/indexof.js","webpack:///./packages/ckeditor5-utils/src/dom/getancestors.js","webpack:///./packages/ckeditor5-engine/src/view/domconverter.js","webpack:///./packages/ckeditor5-utils/src/dom/getcommonancestor.js","webpack:///./packages/ckeditor5-ui/src/icon/iconview.js","webpack:///./node_modules/lodash-es/isBuffer.js","webpack:///./packages/ckeditor5-utils/src/dom/isrange.js","webpack:///./packages/ckeditor5-ui/theme/icons/previous-arrow.svg","webpack:///./packages/ckeditor5-ui/theme/icons/next-arrow.svg","webpack:///./packages/ckeditor5-ui/src/panel/balloon/contextualballoon.js","webpack:///./packages/ckeditor5-engine/src/view/upcastwriter.js","webpack:///./node_modules/lodash-es/_getPrototype.js","webpack:///./node_modules/lodash-es/_isPrototype.js","webpack:///./node_modules/lodash-es/isArrayLike.js","webpack:///./node_modules/lodash-es/_baseUnary.js","webpack:///./packages/ckeditor5-engine/src/view/editableelement.js","webpack:///./packages/ckeditor5-engine/src/view/observer/domeventdata.js","webpack:///./node_modules/lodash-es/_arrayEach.js","webpack:///./node_modules/lodash-es/_baseAssign.js","webpack:///./node_modules/lodash-es/_baseAssignIn.js","webpack:///./node_modules/lodash-es/_copyArray.js","webpack:///./node_modules/lodash-es/_copySymbols.js","webpack:///./node_modules/lodash-es/_getSymbolsIn.js","webpack:///./node_modules/lodash-es/_copySymbolsIn.js","webpack:///./node_modules/lodash-es/_getAllKeysIn.js","webpack:///./node_modules/lodash-es/_initCloneArray.js","webpack:///./node_modules/lodash-es/_cloneArrayBuffer.js","webpack:///./node_modules/lodash-es/_cloneDataView.js","webpack:///./node_modules/lodash-es/_cloneRegExp.js","webpack:///./node_modules/lodash-es/_cloneSymbol.js","webpack:///./node_modules/lodash-es/_cloneTypedArray.js","webpack:///./node_modules/lodash-es/_initCloneByTag.js","webpack:///./node_modules/lodash-es/_baseCreate.js","webpack:///./node_modules/lodash-es/_initCloneObject.js","webpack:///./node_modules/lodash-es/_baseIsMap.js","webpack:///./node_modules/lodash-es/isMap.js","webpack:///./node_modules/lodash-es/_baseIsSet.js","webpack:///./node_modules/lodash-es/isSet.js","webpack:///./node_modules/lodash-es/_baseClone.js","webpack:///./node_modules/lodash-es/_nativeKeysIn.js","webpack:///./node_modules/lodash-es/_baseKeysIn.js","webpack:///./node_modules/lodash-es/keysIn.js","webpack:///./node_modules/lodash-es/_nativeKeys.js","webpack:///./node_modules/lodash-es/_baseKeys.js","webpack:///./node_modules/lodash-es/keys.js","webpack:///./node_modules/lodash-es/_arrayFilter.js","webpack:///./node_modules/lodash-es/_getSymbols.js","webpack:///./node_modules/lodash-es/_defineProperty.js","webpack:///./node_modules/lodash-es/_Uint8Array.js","webpack:///./packages/ckeditor5-utils/src/dom/iswindow.js","webpack:///./node_modules/lodash-es/_stackClear.js","webpack:///./node_modules/lodash-es/_stackDelete.js","webpack:///./node_modules/lodash-es/_stackGet.js","webpack:///./node_modules/lodash-es/_stackHas.js","webpack:///./node_modules/lodash-es/_stackSet.js","webpack:///./node_modules/lodash-es/_Stack.js","webpack:///./packages/ckeditor5-utils/src/spy.js","webpack:///./packages/ckeditor5-utils/src/eventinfo.js","webpack:///./node_modules/lodash-es/isFunction.js","webpack:///./node_modules/lodash-es/isPlainObject.js","webpack:///./packages/ckeditor5-utils/src/dom/getresizeobserver.js","webpack:///./packages/ckeditor5-core/theme/icons/three-vertical-dots.svg","webpack:///./packages/ckeditor5-ui/src/toolbar/toolbarview.js","webpack:///./packages/ckeditor5-ui/src/bindings/preventdefault.js","webpack:///./packages/ckeditor5-paragraph/src/paragraphcommand.js","webpack:///./packages/ckeditor5-paragraph/src/paragraph.js","webpack:///./packages/ckeditor5-ui/src/panel/balloon/balloonpanelview.js","webpack:///./packages/ckeditor5-ui/src/bindings/clickoutsidehandler.js","webpack:///./packages/ckeditor5-utils/src/priorities.js","webpack:///./packages/ckeditor5-utils/src/dom/tounit.js","webpack:///./packages/ckeditor5-engine/src/view/observer/mouseobserver.js","webpack:///./packages/ckeditor5-widget/src/widget.js","webpack:///./packages/ckeditor5-basic-styles/src/attributecommand.js","webpack:///./packages/ckeditor5-ui/src/labeledinput/labeledinputview.js","webpack:///./packages/ckeditor5-ui/src/inputtext/inputtextview.js","webpack:///./packages/ckeditor5-ui/src/bindings/submithandler.js","webpack:///./packages/ckeditor5-core/theme/icons/check.svg","webpack:///./packages/ckeditor5-core/theme/icons/cancel.svg","webpack:///./packages/ckeditor5-widget/src/widgettoolbarrepository.js","webpack:///./packages/ckeditor5-utils/src/version.js","webpack:///./node_modules/lodash-es/_getAllKeys.js","webpack:///./packages/ckeditor5-utils/src/count.js","webpack:///./packages/ckeditor5-engine/src/view/uielement.js","webpack:///./packages/ckeditor5-engine/src/model/operation/rootattributeoperation.js","webpack:///./node_modules/lodash-es/identity.js","webpack:///./node_modules/lodash-es/_apply.js","webpack:///./node_modules/lodash-es/_overRest.js","webpack:///./node_modules/lodash-es/constant.js","webpack:///./node_modules/lodash-es/_baseSetToString.js","webpack:///./node_modules/lodash-es/_shortOut.js","webpack:///./node_modules/lodash-es/_setToString.js","webpack:///./node_modules/lodash-es/_baseRest.js","webpack:///./node_modules/lodash-es/_isIterateeCall.js","webpack:///./node_modules/lodash-es/_createAssigner.js","webpack:///./node_modules/lodash-es/assignIn.js","webpack:///./packages/ckeditor5-ui/src/button/switchbuttonview.js","webpack:///./packages/ckeditor5-table/src/utils.js","webpack:///./packages/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js","webpack:///./packages/ckeditor5-ui/src/model.js","webpack:///./packages/ckeditor5-ui/src/notification/notification.js","webpack:///./packages/ckeditor5-engine/src/view/document.js","webpack:///./packages/ckeditor5-engine/src/view/emptyelement.js","webpack:///./packages/ckeditor5-engine/src/view/downcastwriter.js","webpack:///./node_modules/lodash-es/_freeGlobal.js","webpack:///./node_modules/lodash-es/_overArg.js","webpack:///./node_modules/lodash-es/_baseAssignValue.js","webpack:///./node_modules/lodash-es/_assignValue.js","webpack:///./node_modules/lodash-es/stubArray.js","webpack:///./node_modules/lodash-es/_arrayPush.js","webpack:///./node_modules/lodash-es/isLength.js","webpack:///./node_modules/lodash-es/_isIndex.js","webpack:///./node_modules/lodash-es/_baseGetAllKeys.js","webpack:///./packages/ckeditor5-utils/src/objecttomap.js","webpack:///./packages/ckeditor5-engine/src/view/documentselection.js","webpack:///./packages/ckeditor5-utils/src/fastdiff.js","webpack:///./packages/ckeditor5-utils/src/dom/getborderwidths.js","webpack:///./node_modules/lodash-es/_nativeCreate.js","webpack:///./node_modules/lodash-es/_hashClear.js","webpack:///./node_modules/lodash-es/_hashDelete.js","webpack:///./node_modules/lodash-es/_hashGet.js","webpack:///./node_modules/lodash-es/_hashHas.js","webpack:///./node_modules/lodash-es/_hashSet.js","webpack:///./node_modules/lodash-es/_Hash.js","webpack:///./node_modules/lodash-es/_mapCacheClear.js","webpack:///./node_modules/lodash-es/_isKeyable.js","webpack:///./node_modules/lodash-es/_getMapData.js","webpack:///./node_modules/lodash-es/_mapCacheDelete.js","webpack:///./node_modules/lodash-es/_mapCacheGet.js","webpack:///./node_modules/lodash-es/_mapCacheHas.js","webpack:///./node_modules/lodash-es/_mapCacheSet.js","webpack:///./node_modules/lodash-es/_MapCache.js","webpack:///./node_modules/lodash-es/_setCacheAdd.js","webpack:///./node_modules/lodash-es/_setCacheHas.js","webpack:///./node_modules/lodash-es/_SetCache.js","webpack:///./node_modules/lodash-es/_arraySome.js","webpack:///./node_modules/lodash-es/_cacheHas.js","webpack:///./node_modules/lodash-es/_equalArrays.js","webpack:///./node_modules/lodash-es/_mapToArray.js","webpack:///./node_modules/lodash-es/_setToArray.js","webpack:///./node_modules/lodash-es/_equalByTag.js","webpack:///./node_modules/lodash-es/_equalObjects.js","webpack:///./node_modules/lodash-es/_baseIsEqualDeep.js","webpack:///./node_modules/lodash-es/_baseIsEqual.js","webpack:///./node_modules/lodash-es/_baseTimes.js","webpack:///./node_modules/lodash-es/_baseIsArguments.js","webpack:///./node_modules/lodash-es/isArguments.js","webpack:///./node_modules/lodash-es/_arrayLikeKeys.js","webpack:///./node_modules/lodash-es/_baseIsTypedArray.js","webpack:///./node_modules/lodash-es/isTypedArray.js","webpack:///./packages/ckeditor5-enter/src/utils.js","webpack:///./packages/ckeditor5-enter/src/enterobserver.js","webpack:///./packages/ckeditor5-utils/src/dom/position.js","webpack:///./packages/ckeditor5-utils/src/dom/getpositionedancestor.js","webpack:///./packages/ckeditor5-engine/src/view/placeholder.js","webpack:///./node_modules/lodash-es/isSymbol.js","webpack:///./packages/ckeditor5-ui/src/label/labelview.js","webpack:///./packages/ckeditor5-ui/src/tooltip/tooltipview.js","webpack:///./packages/ckeditor5-undo/theme/icons/undo.svg","webpack:///./packages/ckeditor5-undo/theme/icons/redo.svg","webpack:///./packages/ckeditor5-undo/src/undoui.js","webpack:///./packages/ckeditor5-undo/src/undo.js","webpack:///./packages/ckeditor5-image/src/imagetextalternative/imagetextalternativecommand.js","webpack:///./packages/ckeditor5-image/src/imagetextalternative/imagetextalternativeediting.js","webpack:///./packages/ckeditor5-image/src/imagetextalternative/ui/textalternativeformview.js","webpack:///./packages/ckeditor5-core/theme/icons/low-vision.svg","webpack:///./packages/ckeditor5-image/src/image/ui/utils.js","webpack:///./packages/ckeditor5-image/src/imagetextalternative/imagetextalternativeui.js","webpack:///./packages/ckeditor5-image/src/imagetextalternative.js","webpack:///./packages/ckeditor5-image/src/image.js","webpack:///./packages/ckeditor5-upload/src/ui/filedialogbuttonview.js","webpack:///./packages/ckeditor5-core/theme/icons/image.svg","webpack:///./packages/ckeditor5-image/src/imageupload/utils.js","webpack:///./packages/ckeditor5-image/src/imageupload/imageuploadui.js","webpack:///./packages/ckeditor5-image/theme/icons/image_placeholder.svg","webpack:///./packages/ckeditor5-image/src/imageupload/imageuploadprogress.js","webpack:///./packages/ckeditor5-image/src/imageupload/imageuploadcommand.js","webpack:///./packages/ckeditor5-image/src/imageupload/imageuploadediting.js","webpack:///./packages/ckeditor5-image/src/imageupload.js","webpack:///./packages/ckeditor5-image/src/image/imageloadobserver.js","webpack:///./packages/ckeditor5-image/src/image/converters.js","webpack:///./packages/ckeditor5-image/src/image/imageinsertcommand.js","webpack:///./packages/ckeditor5-image/src/image/imageediting.js","webpack:///./packages/ckeditor5-link/src/findlinkrange.js","webpack:///./packages/ckeditor5-link/src/linkcommand.js","webpack:///./packages/ckeditor5-link/src/unlinkcommand.js","webpack:///./packages/ckeditor5-link/src/utils/automaticdecorators.js","webpack:///./packages/ckeditor5-link/src/utils/manualdecorator.js","webpack:///./packages/ckeditor5-engine/src/utils/bindtwostepcarettoattribute.js","webpack:///./packages/ckeditor5-link/src/linkediting.js","webpack:///./packages/ckeditor5-ui/src/toolbar/toolbarseparatorview.js","webpack:///(webpack)/buildin/harmony-module.js","webpack:///./packages/ckeditor5-adapter-ckfinder/src/utils.js","webpack:///./packages/ckeditor5-adapter-ckfinder/src/uploadadapter.js","webpack:///./node_modules/lodash-es/isElement.js","webpack:///./packages/ckeditor5-core/src/pendingactions.js","webpack:///./packages/ckeditor5-list/src/listcommand.js","webpack:///./packages/ckeditor5-utils/src/dom/setdatainelement.js","webpack:///./packages/ckeditor5-ui/theme/icons/dropdown-arrow.svg","webpack:///./packages/ckeditor5-basic-styles/theme/icons/bold.svg","webpack:///./packages/ckeditor5-basic-styles/src/bold/boldui.js","webpack:///./packages/ckeditor5-basic-styles/src/bold.js","webpack:///./packages/ckeditor5-basic-styles/theme/icons/italic.svg","webpack:///./packages/ckeditor5-basic-styles/src/italic/italicui.js","webpack:///./packages/ckeditor5-basic-styles/src/italic.js","webpack:///./packages/ckeditor5-core/src/editor/utils/dataapimixin.js","webpack:///./packages/ckeditor5-engine/src/dataprocessor/basichtmlwriter.js","webpack:///./packages/ckeditor5-ui/src/editorui/editoruiview.js","webpack:///./packages/ckeditor5-utils/src/dom/getdatafromelement.js","webpack:///./packages/ckeditor5-utils/src/config.js","webpack:///./packages/ckeditor5-engine/src/view/rooteditableelement.js","webpack:///./packages/ckeditor5-utils/src/dom/insertat.js","webpack:///./packages/ckeditor5-utils/src/dom/remove.js","webpack:///./packages/ckeditor5-engine/src/view/renderer.js","webpack:///./node_modules/lodash-es/isEqualWith.js","webpack:///./packages/ckeditor5-engine/src/view/observer/mutationobserver.js","webpack:///./packages/ckeditor5-engine/src/view/observer/keyobserver.js","webpack:///./packages/ckeditor5-engine/src/view/observer/fakeselectionobserver.js","webpack:///./packages/ckeditor5-engine/src/view/observer/selectionobserver.js","webpack:///./packages/ckeditor5-engine/src/view/observer/focusobserver.js","webpack:///./packages/ckeditor5-engine/src/view/observer/compositionobserver.js","webpack:///./packages/ckeditor5-engine/src/view/observer/inputobserver.js","webpack:///./packages/ckeditor5-utils/src/dom/scroll.js","webpack:///./packages/ckeditor5-engine/src/view/view.js","webpack:///./packages/ckeditor5-engine/src/conversion/mapper.js","webpack:///./packages/ckeditor5-engine/src/conversion/modelconsumable.js","webpack:///./packages/ckeditor5-engine/src/conversion/downcastdispatcher.js","webpack:///./packages/ckeditor5-engine/src/model/selection.js","webpack:///./packages/ckeditor5-engine/src/model/documentselection.js","webpack:///./packages/ckeditor5-engine/src/conversion/conversionhelpers.js","webpack:///./node_modules/lodash-es/cloneDeep.js","webpack:///./packages/ckeditor5-engine/src/conversion/downcasthelpers.js","webpack:///./packages/ckeditor5-engine/src/conversion/upcasthelpers.js","webpack:///./packages/ckeditor5-engine/src/controller/editingcontroller.js","webpack:///./packages/ckeditor5-core/src/plugincollection.js","webpack:///./packages/ckeditor5-core/src/commandcollection.js","webpack:///./packages/ckeditor5-utils/src/translation-service.js","webpack:///./packages/ckeditor5-utils/src/locale.js","webpack:///./packages/ckeditor5-engine/src/conversion/viewconsumable.js","webpack:///./packages/ckeditor5-engine/src/model/schema.js","webpack:///./packages/ckeditor5-engine/src/conversion/upcastdispatcher.js","webpack:///./packages/ckeditor5-engine/src/controller/datacontroller.js","webpack:///./packages/ckeditor5-engine/src/conversion/conversion.js","webpack:///./packages/ckeditor5-engine/src/model/batch.js","webpack:///./packages/ckeditor5-engine/src/model/operation/detachoperation.js","webpack:///./packages/ckeditor5-engine/src/model/rootelement.js","webpack:///./packages/ckeditor5-engine/src/model/writer.js","webpack:///./packages/ckeditor5-engine/src/model/differ.js","webpack:///./packages/ckeditor5-engine/src/model/history.js","webpack:///./packages/ckeditor5-utils/src/unicode.js","webpack:///./packages/ckeditor5-engine/src/model/document.js","webpack:///./packages/ckeditor5-engine/src/model/markercollection.js","webpack:///./packages/ckeditor5-engine/src/model/utils/insertcontent.js","webpack:///./packages/ckeditor5-engine/src/model/utils/deletecontent.js","webpack:///./packages/ckeditor5-engine/src/model/utils/modifyselection.js","webpack:///./packages/ckeditor5-engine/src/model/utils/getselectedcontent.js","webpack:///./packages/ckeditor5-engine/src/model/utils/selection-post-fixer.js","webpack:///./packages/ckeditor5-engine/src/model/model.js","webpack:///./packages/ckeditor5-core/src/editingkeystrokehandler.js","webpack:///./packages/ckeditor5-core/src/editor/editor.js","webpack:///./packages/ckeditor5-ui/src/editableui/editableuiview.js","webpack:///./packages/ckeditor5-ui/src/editableui/inline/inlineeditableuiview.js","webpack:///./packages/ckeditor5-ui/src/componentfactory.js","webpack:///./packages/ckeditor5-core/src/editor/editorui.js","webpack:///(webpack)/buildin/global.js","webpack:///./packages/ckeditor5-ui/src/list/listview.js","webpack:///./packages/ckeditor5-ui/src/list/listitemview.js","webpack:///./node_modules/lodash-es/stubFalse.js","webpack:///./node_modules/lodash-es/_cloneBuffer.js","webpack:///./packages/ckeditor5-basic-styles/src/bold/boldediting.js","webpack:///./packages/ckeditor5-basic-styles/src/italic/italicediting.js","webpack:///./packages/ckeditor5-typing/src/utils/changebuffer.js","webpack:///./packages/ckeditor5-typing/src/inputcommand.js","webpack:///./packages/ckeditor5-typing/src/utils/injectunsafekeystrokeshandling.js","webpack:///./packages/ckeditor5-typing/src/utils/utils.js","webpack:///./packages/ckeditor5-utils/src/difftochanges.js","webpack:///./packages/ckeditor5-typing/src/utils/injecttypingmutationshandling.js","webpack:///./packages/ckeditor5-typing/src/input.js","webpack:///./packages/ckeditor5-typing/src/deletecommand.js","webpack:///./packages/ckeditor5-typing/src/deleteobserver.js","webpack:///./packages/ckeditor5-typing/src/delete.js","webpack:///./packages/ckeditor5-typing/src/typing.js","webpack:///./packages/ckeditor5-engine/src/model/operation/nooperation.js","webpack:///./packages/ckeditor5-engine/src/model/operation/transform.js","webpack:///./packages/ckeditor5-undo/src/basecommand.js","webpack:///./packages/ckeditor5-undo/src/undocommand.js","webpack:///./packages/ckeditor5-undo/src/redocommand.js","webpack:///./packages/ckeditor5-undo/src/undoediting.js","webpack:///./packages/ckeditor5-enter/src/entercommand.js","webpack:///./packages/ckeditor5-enter/src/enter.js","webpack:///./packages/ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus.js","webpack:///./packages/ckeditor5-ui/src/toolbar/normalizetoolbarconfig.js","webpack:///./packages/ckeditor5-enter/src/shiftentercommand.js","webpack:///./packages/ckeditor5-enter/src/shiftenter.js","webpack:///./packages/ckeditor5-essentials/src/essentials.js","webpack:///./packages/ckeditor5-heading/src/headingcommand.js","webpack:///./packages/ckeditor5-heading/src/headingediting.js","webpack:///./packages/ckeditor5-core/src/editor/utils/elementapimixin.js","webpack:///./packages/ckeditor5-core/src/editor/utils/attachtoform.js","webpack:///./packages/ckeditor5-heading/src/utils.js","webpack:///./packages/ckeditor5-heading/src/headingui.js","webpack:///./packages/ckeditor5-heading/src/heading.js","webpack:///./node_modules/@ckeditor/ckeditor-cloud-services-core/src/uploadgateway/fileuploader.js","webpack:///./node_modules/@ckeditor/ckeditor-cloud-services-core/src/token/token.js","webpack:///./packages/ckeditor5-cloud-services/src/cloudservices.js","webpack:///./packages/ckeditor5-easy-image/src/cloudservicesuploadadapter.js","webpack:///./node_modules/@ckeditor/ckeditor-cloud-services-core/src/uploadgateway/uploadgateway.js","webpack:///./packages/ckeditor5-easy-image/src/easyimage.js","webpack:///./packages/ckeditor5-list/theme/icons/numberedlist.svg","webpack:///./packages/ckeditor5-list/theme/icons/bulletedlist.svg","webpack:///./packages/ckeditor5-list/src/listui.js","webpack:///./packages/ckeditor5-list/src/list.js","webpack:///./packages/ckeditor5-list/src/indentcommand.js","webpack:///./packages/ckeditor5-list/src/converters.js","webpack:///./packages/ckeditor5-list/src/listediting.js","webpack:///./packages/ckeditor5-table/src/tabletoolbar.js","webpack:///./packages/ckeditor5-table/src/converters/upcasttable.js","webpack:///./packages/ckeditor5-table/src/tablewalker.js","webpack:///./packages/ckeditor5-table/src/converters/downcast.js","webpack:///./packages/ckeditor5-table/src/commands/inserttablecommand.js","webpack:///./packages/ckeditor5-table/src/commands/insertrowcommand.js","webpack:///./packages/ckeditor5-table/src/commands/insertcolumncommand.js","webpack:///./packages/ckeditor5-table/src/commands/splitcellcommand.js","webpack:///./packages/ckeditor5-table/src/commands/mergecellcommand.js","webpack:///./packages/ckeditor5-table/src/commands/removerowcommand.js","webpack:///./packages/ckeditor5-table/src/commands/removecolumncommand.js","webpack:///./packages/ckeditor5-table/src/commands/setheaderrowcommand.js","webpack:///./packages/ckeditor5-table/src/commands/setheadercolumncommand.js","webpack:///./packages/ckeditor5-table/src/tableutils.js","webpack:///./packages/ckeditor5-table/src/converters/table-layout-post-fixer.js","webpack:///./packages/ckeditor5-table/src/converters/table-cell-paragraph-post-fixer.js","webpack:///./packages/ckeditor5-table/src/converters/table-cell-refresh-post-fixer.js","webpack:///./packages/ckeditor5-table/src/tableediting.js","webpack:///./packages/ckeditor5-table/src/ui/inserttableview.js","webpack:///./packages/ckeditor5-table/theme/icons/table.svg","webpack:///./packages/ckeditor5-table/theme/icons/table-column.svg","webpack:///./packages/ckeditor5-table/theme/icons/table-row.svg","webpack:///./packages/ckeditor5-table/theme/icons/table-merge-cell.svg","webpack:///./packages/ckeditor5-table/src/tableui.js","webpack:///./packages/ckeditor5-table/src/table.js","webpack:///./packages/ckeditor5-engine/src/view/observer/clickobserver.js","webpack:///./packages/ckeditor5-link/src/ui/linkformview.js","webpack:///./packages/ckeditor5-link/theme/icons/unlink.svg","webpack:///./packages/ckeditor5-core/theme/icons/pencil.svg","webpack:///./packages/ckeditor5-link/src/ui/linkactionsview.js","webpack:///./packages/ckeditor5-link/theme/icons/link.svg","webpack:///./packages/ckeditor5-link/src/linkui.js","webpack:///./packages/ckeditor5-link/src/link.js","webpack:///./node_modules/lodash-es/_arrayMap.js","webpack:///./node_modules/lodash-es/_baseToString.js","webpack:///./node_modules/lodash-es/toString.js","webpack:///./packages/ckeditor5-media-embed/src/converters.js","webpack:///./packages/ckeditor5-media-embed/src/utils.js","webpack:///./packages/ckeditor5-media-embed/src/mediaembedcommand.js","webpack:///./packages/ckeditor5-media-embed/theme/icons/media-placeholder.svg","webpack:///./packages/ckeditor5-media-embed/src/mediaregistry.js","webpack:///./packages/ckeditor5-media-embed/src/mediaembedediting.js","webpack:///./packages/ckeditor5-media-embed/src/automediaembed.js","webpack:///./packages/ckeditor5-media-embed/src/ui/mediaformview.js","webpack:///./packages/ckeditor5-media-embed/theme/icons/media.svg","webpack:///./packages/ckeditor5-media-embed/src/mediaembedui.js","webpack:///./packages/ckeditor5-media-embed/src/mediaembed.js","webpack:///./packages/ckeditor5-typing/src/utils/getlasttextline.js","webpack:///./packages/ckeditor5-core/src/multicommand.js","webpack:///./packages/ckeditor5-indent/src/indentediting.js","webpack:///./packages/ckeditor5-indent/theme/icons/indent.svg","webpack:///./packages/ckeditor5-indent/theme/icons/outdent.svg","webpack:///./packages/ckeditor5-indent/src/indentui.js","webpack:///./packages/ckeditor5-indent/src/indent.js","webpack:///./packages/ckeditor5-image/src/imagetoolbar.js","webpack:///./packages/ckeditor5-image/src/imagestyle/imagestylecommand.js","webpack:///./packages/ckeditor5-image/src/imagestyle/converters.js","webpack:///./packages/ckeditor5-core/theme/icons/object-full-width.svg","webpack:///./packages/ckeditor5-core/theme/icons/object-left.svg","webpack:///./packages/ckeditor5-core/theme/icons/object-center.svg","webpack:///./packages/ckeditor5-core/theme/icons/object-right.svg","webpack:///./packages/ckeditor5-image/src/imagestyle/utils.js","webpack:///./packages/ckeditor5-image/src/imagestyle/imagestyleediting.js","webpack:///./packages/ckeditor5-image/src/imagestyle/imagestyleui.js","webpack:///./packages/ckeditor5-image/src/imagestyle.js","webpack:///./packages/ckeditor5-block-quote/src/blockquotecommand.js","webpack:///./packages/ckeditor5-block-quote/src/blockquoteediting.js","webpack:///./packages/ckeditor5-core/theme/icons/quote.svg","webpack:///./packages/ckeditor5-block-quote/src/blockquoteui.js","webpack:///./packages/ckeditor5-block-quote/src/blockquote.js","webpack:///./packages/ckeditor5-image/src/imagecaption/utils.js","webpack:///./packages/ckeditor5-image/src/imagecaption/imagecaptionediting.js","webpack:///./packages/ckeditor5-image/src/imagecaption.js","webpack:///./packages/ckeditor5-build-classic/src/ckeditor.js","webpack:///./packages/ckeditor5-autoformat/src/blockautoformatediting.js","webpack:///./packages/ckeditor5-autoformat/src/inlineautoformatediting.js","webpack:///./packages/ckeditor5-autoformat/src/autoformat.js","webpack:///./packages/ckeditor5-utils/src/elementreplacer.js","webpack:///./packages/ckeditor5-paste-from-office/src/filters/list.js","webpack:///./packages/ckeditor5-paste-from-office/src/normalizers/googledocsnormalizer.js","webpack:///./packages/ckeditor5-paste-from-office/src/filters/removeboldwrapper.js","webpack:///./packages/ckeditor5-paste-from-office/src/filters/space.js","webpack:///./packages/ckeditor5-paste-from-office/src/filters/parse.js","webpack:///./packages/ckeditor5-paste-from-office/src/filters/image.js","webpack:///./packages/ckeditor5-paste-from-office/src/normalizers/mswordnormalizer.js","webpack:///./packages/ckeditor5-paste-from-office/src/pastefromoffice.js","webpack:///./packages/ckeditor5-ckfinder/theme/icons/browse-files.svg","webpack:///./packages/ckeditor5-ckfinder/src/ckfinderui.js","webpack:///./packages/ckeditor5-ckfinder/src/ckfindercommand.js","webpack:///./packages/ckeditor5-ckfinder/src/ckfinderediting.js","webpack:///./packages/ckeditor5-ckfinder/src/ckfinder.js","webpack:///./packages/ckeditor5-editor-classic/src/classiceditorui.js","webpack:///./packages/ckeditor5-ui/src/editorui/boxed/boxededitoruiview.js","webpack:///./packages/ckeditor5-ui/src/panel/sticky/stickypanelview.js","webpack:///./packages/ckeditor5-editor-classic/src/classiceditoruiview.js","webpack:///./packages/ckeditor5-editor-classic/src/classiceditor.js","webpack:///./node_modules/lodash-es/cloneDeepWith.js","webpack:///./node_modules/lodash-es/clone.js","webpack:///./node_modules/lodash-es/now.js","webpack:///./node_modules/lodash-es/toNumber.js","webpack:///./node_modules/lodash-es/debounce.js","webpack:///./packages/ckeditor5-typing/src/textwatcher.js","webpack:///./packages/ckeditor5-mention/src/mentioncommand.js","webpack:///./packages/ckeditor5-mention/src/mentionediting.js","webpack:///./packages/ckeditor5-mention/src/ui/mentionsview.js","webpack:///./packages/ckeditor5-mention/src/ui/domwrapperview.js","webpack:///./packages/ckeditor5-mention/src/ui/mentionlistitemview.js","webpack:///./packages/ckeditor5-mention/src/mentionui.js","webpack:///./packages/ckeditor5-mention/src/mention.js","webpack:///./node_modules/umberto/source/ckeditor5/12.4.0/_snippets/features/build-mention-source.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","CKEditorError","attachLinkToDocumentation","DOCUMENTATION_URL","Error","[object Object]","message","context","data","JSON","stringify","super","this","type","err","is","originalError","stack","matchedErrorName","match","Plugin","_ckeditor_ckeditor5_utils_src_observablemixin__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_mix__WEBPACK_IMPORTED_MODULE_1__","editor","stopListening","Range","_position__WEBPACK_IMPORTED_MODULE_0__","_treewalker__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_comparearrays__WEBPACK_IMPORTED_MODULE_3__","start","end","_createAt","stickiness","isCollapsed","iterator","boundaries","ignoreElementEnd","isEqual","isFlat","startParentPath","getParentPath","endParentPath","root","position","isAfter","isBefore","otherRange","loose","containsStart","containsPosition","containsEnd","item","pos","_createBefore","ranges","isIntersecting","push","commonRangeStart","commonRangeEnd","diffAt","getCommonPath","length","posParent","parent","path","howMany","maxOffset","offset","getShiftedBy","slice","options","treeWalker","nextPosition","operation","_getTransformedByInsertOperation","_getTransformedByMoveOperation","_getTransformedBySplitOperation","_getTransformedByMergeOperation","operations","result","getTransformedByOperation","splice","range","j","next","containsRange","getCommonAncestor","toJSON","constructor","spread","_getTransformedByInsertion","sourcePosition","targetPosition","_getTransformedByMove","insertionPosition","deletionPosition","insertPosition","newPos","moveRange","_createFromPositionAndShift","_getTransformedByDeletion","differenceSet","getDifference","difference","common","getIntersection","transformedCommon","_getCombined","deletePosition","newStart","newEnd","shift","element","offsetSize","clone","ref","sort","a","b","refIndex","indexOf","json","doc","fromJSON","lodash_es_last","array","undefined","position_Position","ckeditorerror","Array","getPath","concat","newOffset","getChild","offsetToIndex","index","textNode","node","model_text","startOffset","nodeAfter","nodeBefore","isAtStart","isAtEnd","otherPosition","comparearrays","skip","startPosition","treewalker","getAncestors","includeSelf","cmp","Math","min","ancestorsA","ancestorsB","shifted","compareWith","left","right","leftParent","thisParentPath","posParentPath","movedRange","splitPosition","moveTargetPosition","graveyardPosition","transformed","source","target","combined","from","itemOrPosition","_createAfter","endOffset","graveyard","getRoot","rootName","mix","baseClass","mixins","forEach","mixin","getOwnPropertyNames","getOwnPropertySymbols","sourceDescriptor","getOwnPropertyDescriptor","Position","_treewalker__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_comparearrays__WEBPACK_IMPORTED_MODULE_1__","_editableelement__WEBPACK_IMPORTED_MODULE_3__","childCount","editableElement","editable","thisPath","otherPath","offsetInText","View","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_0__","_viewcollection__WEBPACK_IMPORTED_MODULE_1__","_template__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_dom_emittermixin__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_observablemixin__WEBPACK_IMPORTED_MODULE_4__","_ckeditor_ckeditor5_utils_src_collection__WEBPACK_IMPORTED_MODULE_5__","_ckeditor_ckeditor5_utils_src_mix__WEBPACK_IMPORTED_MODULE_6__","_ckeditor_ckeditor5_utils_src_isiterable__WEBPACK_IMPORTED_MODULE_7__","locale","isRendered","_viewCollections","_unboundChildren","createCollection","on","evt","collection","decorate","bindTemplate","_bindTemplate","add","children","child","remove","definition","template","extend","render","registerChild","getViews","map","destroy","_revertData","revert","Command","set","_disableStack","Set","listenTo","model","document","refresh","isEnabled","stop","priority","forceDisabled","clearForceDisabled","id","size","forceDisable","delete","off","return","_getEmitterListenedTo","_setEmitterId","_eventinfo__WEBPACK_IMPORTED_MODULE_0__","_uid__WEBPACK_IMPORTED_MODULE_1__","_priorities__WEBPACK_IMPORTED_MODULE_2__","_ckeditorerror__WEBPACK_IMPORTED_MODULE_4__","_listeningTo","_emitterId","EmitterMixin","event","callback","wasFired","args","emitter","emitterInfo","eventCallbacks","emitters","_getEmitterId","emitterId","callbacks","eventName","events","getEvents","childEventName","newEventNodes","childEvents","substr","lastIndexOf","createEventNamespace","lists","getCallbacksListsForNamespace","callbackDefinition","added","removeCallback","pop","eventOrInfo","eventInfo","getCallbacksForEvent","_events","callbackArgs","apply","called","_delegations","destinations","passAllDestinations","fireDelegatedEvents","rethrowUnexpectedError","to","nameOrFunction","Map","clear","listeningEmitter","listenedToEmitterId","eventNode","callbacksLists","childCallbacksLists","fireArgs","delegatedInfo","fire","keyCodes","getCode","parseKeystroke","getEnvKeystrokeText","_ckeditorerror__WEBPACK_IMPORTED_MODULE_0__","_env__WEBPACK_IMPORTED_MODULE_1__","macGlyphsToModifiers","⌘","⇧","⌥","modifiersToMacGlyphs","ctrl","alt","arrowleft","arrowup","arrowright","arrowdown","backspace","enter","space","esc","tab","cmd","code","letter","String","fromCharCode","toLowerCase","generateKnownKeyCodes","keyCode","altKey","ctrlKey","shiftKey","keystroke","splitKeystrokeText","reduce","sum","isMac","split","getLastMatchingPosition","enlargeTrimSkip","direction","nodeAfterStart","nodeBeforeEnd","startElement","endElement","_createFromParentsAndOffsets","findAncestor","parentName","updateNumericAttribute","writer","defaultValue","setAttribute","removeAttribute","createEmptyTableCell","attributes","tableCell","createElement","insertElement","insert","ButtonView","_view__WEBPACK_IMPORTED_MODULE_0__","_icon_iconview__WEBPACK_IMPORTED_MODULE_1__","_tooltip_tooltipview__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_uid__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_keyboard__WEBPACK_IMPORTED_MODULE_4__","ariaLabelUid","tooltipView","_createTooltipView","labelView","_createLabelView","iconView","extendTemplate","class","_getTooltipString","setTemplate","tag","if","tabindex","aria-labelledby","aria-disabled","aria-pressed","isToggleable","mousedown","preventDefault","click","icon","focus","style","text","tooltip","label","Function","_emittermixin__WEBPACK_IMPORTED_MODULE_0__","_ckeditorerror__WEBPACK_IMPORTED_MODULE_1__","lodash_es__WEBPACK_IMPORTED_MODULE_2__","lodash_es__WEBPACK_IMPORTED_MODULE_3__","observablePropertiesSymbol","boundObservablesSymbol","boundPropertiesSymbol","ObservableMixin","keys","initObservable","properties","has","configurable","oldValue","newValue","bindProperties","isStringArray","boundProperties","propertyName","bindings","binding","bindTo","toMany","bindToMany","_observable","_bindProperties","_to","_bindings","unbindProperties","boundObservables","toObservable","toProperty","toProperties","toPropertyBindings","boundObservable","methodName","originalMethod","observable","parsedArgs","parsed","lastObservable","parseBindToArgs","bindingsKeys","numberOfBindings","toBindings","updateBoundObservableProperty","attachBindToListeners","chain","toPropertyName","bindingsToObservable","updateBoundObservables","updateBindToBound","observables","attribute","observableAndAttributePairs","getBindingTargets","arr","every","propertyValue","Element","_node__WEBPACK_IMPORTED_MODULE_0__","_nodelist__WEBPACK_IMPORTED_MODULE_1__","_text__WEBPACK_IMPORTED_MODULE_2__","_textproxy__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_isiterable__WEBPACK_IMPORTED_MODULE_4__","attrs","_children","_insertChild","isEmpty","cutType","replace","getNode","getNodeIndex","getNodeStartOffset","relativePath","deep","_clone","getAttributes","nodes","items","normalize","_remove","_insertNodes","_removeNodes","Text","_data","NBSP_FILLER","BR_FILLER","INLINE_FILLER_LENGTH","INLINE_FILLER","startsWithFiller","isInlineFiller","getDataWithoutFiller","injectQuirksHandling","_ckeditor_ckeditor5_utils_src_keyboard__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_dom_istext__WEBPACK_IMPORTED_MODULE_1__","domDocument","createTextNode","fillerBr","dataset","ckeFiller","inlineFiller","domNode","domText","view","jumpOverInlineFiller","domSelection","domTarget","ownerDocument","defaultView","getSelection","rangeCount","getRangeAt","collapsed","domParent","startContainer","domOffset","collapse","_textData","_fireChange","otherNode","MoveOperation","_operation__WEBPACK_IMPORTED_MODULE_0__","_position__WEBPACK_IMPORTED_MODULE_1__","_range__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_comparearrays__WEBPACK_IMPORTED_MODULE_4__","_utils__WEBPACK_IMPORTED_MODULE_5__","baseVersion","newTargetPosition","getMovedRangeStart","sourceElement","targetElement","sourceOffset","targetOffset","className","HighlightStack","_stack","descriptor","oldTop","_insertDescriptor","newTop","compareDescriptors","oldDescriptor","newDescriptor","_removeDescriptor","findIndex","shouldABeBeforeB","classesToString","classes","isArray","join","emittermixin","drag_handle","WIDGET_SELECTED_CLASS_NAME","isWidget","toWidget","getLabel","toWidgetEditable","findOptimalInsertionPosition","viewToModelPositionOutsideModelElement","WIDGET_CLASS_NAME","getCustomProperty","env","isEdge","addClass","setCustomProperty","getFillerOffset","labelOrCreator","setLabel","hasSelectionHandle","widgetElement","selectionHandle","createUIElement","domElement","toDomElement","iconview","appendChild","createPositionAt","addSelectionHandle","setHighlightHandling","normalizeToArray","removeClass","labelCreator","isReadOnly","selection","selectedElement","getSelectedElement","schema","isBlock","createPositionAfter","firstBlock","getSelectedBlocks","positionAfter","isTouching","createPositionBefore","viewElementMatcher","mapper","viewPosition","viewParent","findMappedViewAncestor","modelParent","toModelElement","modelPosition","window","SplitOperation","_mergeoperation__WEBPACK_IMPORTED_MODULE_1__","_position__WEBPACK_IMPORTED_MODULE_2__","_range__WEBPACK_IMPORTED_MODULE_3__","_utils__WEBPACK_IMPORTED_MODULE_4__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_5__","getInsertionPosition","Number","POSITIVE_INFINITY","splitElement","newElement","sourceRange","_freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__","freeSelf","self","compareArrays","minLen","isText","obj","toString","userAgent","navigator","isGecko","isSafari","isAndroid","features","isRegExpUnicodePropertySupported","isSupported","search","RegExp","error","MergeOperation","_splitoperation__WEBPACK_IMPORTED_MODULE_1__","mergedElement","_createIn","_createOn","Operation","isDocumentOperation","batch","assign","__className","Collection","_uid__WEBPACK_IMPORTED_MODULE_2__","_mix__WEBPACK_IMPORTED_MODULE_3__","_items","_itemMap","_idProperty","idProperty","_bindToExternalToInternalMap","WeakMap","_bindToInternalToExternalMap","_skippedIndexesFromExternal","first","last","itemId","idOrIndex","itemOrId","subject","itemDoesNotExist","externalItem","ctx","find","filter","_bindToCollection","externalCollection","as","Class","_setUpBindToBinding","using","callbackOrProperty","factory","addItem","isExternalBoundToThis","externalItemBound","finalIndex","skipped","getIndex","Rect","_isrange__WEBPACK_IMPORTED_MODULE_0__","_iswindow__WEBPACK_IMPORTED_MODULE_1__","_getborderwidths__WEBPACK_IMPORTED_MODULE_2__","_istext__WEBPACK_IMPORTED_MODULE_3__","lodash_es__WEBPACK_IMPORTED_MODULE_4__","rectProperties","isSourceRange","_source","writable","copyRectProperties","getDomRangeRects","getBoundingClientRect","innerWidth","innerHeight","top","bottom","width","height","x","y","anotherRect","rect","max","getArea","visibleRect","isBody","parentNode","commonAncestorContainer","parentRect","intersectionRect","prop","intersectRect","scrollBarWidth","scrollBarHeight","documentElement","clientWidth","clientHeight","getComputedStyle","borderWidths","offsetWidth","offsetHeight","rects","clientRects","getClientRects","elementOrRange","body","_text__WEBPACK_IMPORTED_MODULE_1__","_textproxy__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_objecttomap__WEBPACK_IMPORTED_MODULE_3__","_matcher__WEBPACK_IMPORTED_MODULE_5__","lodash_es__WEBPACK_IMPORTED_MODULE_6__","_attrs","parseAttributes","_classes","classString","parseClasses","_styles","parseInlineStyles","_customProperties","entries","getAttribute","styleString","otherElement","patterns","matcher","styles","childrenClone","getChildren","cloned","count","stylesMap","stylesString","quoteType","propertyNameStart","propertyValueStart","charAt","char","trim","classesSet","classesString","classArray","toImageWidget","getSelectedImageWidget","isImage","insertImage","isImageAllowed","_ckeditor_ckeditor5_widget_src_utils__WEBPACK_IMPORTED_MODULE_0__","viewElement","altText","isImageWidget","modelElement","imageElement","insertAtSelection","insertContent","setSelection","getInsertImageParent","checkChild","isImageAllowedInParent","isObject","checkSelectionOnObject","ancestor","isInOtherImage","FocusTracker","_dom_emittermixin__WEBPACK_IMPORTED_MODULE_0__","_observablemixin__WEBPACK_IMPORTED_MODULE_1__","_ckeditorerror__WEBPACK_IMPORTED_MODULE_2__","_elements","_nextEventLoopTimeout","_focus","useCapture","_blur","focusedElement","clearTimeout","isFocused","setTimeout","LivePosition","_ckeditor_ckeditor5_utils_src_emittermixin__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_utils_src_mix__WEBPACK_IMPORTED_MODULE_2__","oldPosition","toPosition","isIterable","lodash_es_isEqual","other","_baseIsEqual","attributeoperation_AttributeOperation","getItems","shallow","hasAttribute","utils","uid","uuid","floor","random","substring","generateLiInUl","injectViewList","mergeViewLists","positionAfterUiElements","getSiblingListItem","createUIComponent","_ckeditor_ckeditor5_engine_src_view_containerelement__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_ui_src_button_buttonview__WEBPACK_IMPORTED_MODULE_1__","modelItem","conversionApi","viewWriter","listType","viewItem","createContainerElement","getListItemFillerOffset","createViewListItemElement","viewList","bindElements","injectedItem","injectedList","toViewPosition","refItem","previousSibling","sameIndent","smallerIndent","listIndent","prevItem","toViewElement","breakContainer","prevView","walker","createRange","getWalker","breakPosition","move","createRangeOn","nextViewList","nextSibling","lastSubChild","modelChild","firstList","secondList","mergeContainers","indent","itemIndent","commandName","ui","componentFactory","command","commands","buttonView","execute","hasOnlyLists","TextProxy","isPartial","parentFirst","ancestors","getAttributeKeys","_insert","_move","_setAttribute","_normalizeNodes","_documentfragment__WEBPACK_IMPORTED_MODULE_4__","_nodelist__WEBPACK_IMPORTED_MODULE_5__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_6__","_splitNodeAtPosition","_mergeNodesAtIndex","removed","_removeChildren","_removeAttribute","normalized","prev","_haveSameAttributes","mergedNode","offsetDiff","firstPart","secondPart","nodeA","nodeB","iteratorA","iteratorB","attr","done","KeystrokeHandler","_keyboard__WEBPACK_IMPORTED_MODULE_1__","_listener","keyEvtData","stopPropagation","iterable","iteratorItem","InsertOperation","_nodelist__WEBPACK_IMPORTED_MODULE_2__","_moveoperation__WEBPACK_IMPORTED_MODULE_3__","_text__WEBPACK_IMPORTED_MODULE_5__","_element__WEBPACK_IMPORTED_MODULE_6__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_7__","shouldReceiveAttributes","gyPosition","originalNodes","Selection","_range__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_utils_src_mix__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_emittermixin__WEBPACK_IMPORTED_MODULE_4__","_node__WEBPACK_IMPORTED_MODULE_5__","_ckeditor_ckeditor5_utils_src_count__WEBPACK_IMPORTED_MODULE_7__","_ckeditor_ckeditor5_utils_src_isiterable__WEBPACK_IMPORTED_MODULE_8__","_documentselection__WEBPACK_IMPORTED_MODULE_9__","selectable","placeOrOffset","_ranges","_lastRangeBackward","_isFake","_fakeSelectionLabel","setTo","isFake","fakeSelectionLabel","anchor","isBackward","firstRange","getFirstRange","lastRange","getLastRange","otherSelection","thisRange","found","numOfRangesA","getRanges","rangeA","getTrimmed","rangeB","_setRanges","_setFakeOptions","fake","backward","newFocus","_addRange","newRanges","isLastBackward","_pushRange","storedRange","addedRange","intersectingRange","_coreJsData","maskSrcKey","exec","IE_PROTO","_isMasked","func","reIsHostCtor","funcProto","objectProto","funcToString","_baseIsNative_hasOwnProperty","reIsNative","_baseIsNative","isFunction","test","_toSource","_getValue","Observer","_ckeditor_ckeditor5_utils_src_dom_emittermixin__WEBPACK_IMPORTED_MODULE_0__","disable","TreeWalker","_text__WEBPACK_IMPORTED_MODULE_0__","_textproxy__WEBPACK_IMPORTED_MODULE_1__","_element__WEBPACK_IMPORTED_MODULE_2__","_position__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_4__","singleCharacters","_boundaryStartParent","_boundaryEndParent","_visitedParent","prevPosition","prevVisitedParent","_next","_previous","previousPosition","formatReturnValue","charactersCount","offsetInTextNode","DomEventObserver","_observer__WEBPACK_IMPORTED_MODULE_0__","_domeventdata__WEBPACK_IMPORTED_MODULE_1__","domEventType","domEvent","onDomEvent","eventType","additionalData","_getRawTag_hasOwnProperty","nativeObjectToString","symToStringTag","_Symbol","_getRawTag","isOwn","unmasked","e","_objectToString_nativeObjectToString","_objectToString","nullTag","undefinedTag","_baseGetTag_symToStringTag","dropdownpanelview_DropdownPanelView","selectstart","lastChild","focusLast","dropdownview_DropdownView","panelView","focusTracker","focustracker","keystrokes","keystrokehandler","isOpen","panelPosition","_getOptimalPosition","fitInViewport","positions","_panelPositions","closeDropdown","cancel","southEast","southWest","northEast","northWest","defaultPanelPositions","uiLanguageDirection","buttonRect","panelRect","dropdownbuttonview_DropdownButtonView","buttonview","arrowView","_createArrowView","aria-haspopup","delegate","content","dropdown_arrow","listseparatorview_ListSeparatorView","createDropdown","ButtonClass","dropdownView","clickoutsidehandler","activator","contextElements","closeDropdownOnBlur","switchbuttonview","closeDropdownOnExecute","focusDropdownContentsOnArrows","addDefaultBehavior","addToolbarToDropdown","buttons","toolbarView","toolbarview","addListToDropdown","listView","listview","listItemView","listitemview","FileReader","reader","_reader","onprogress","loaded","file","total","Promise","resolve","reject","onload","onerror","onabort","readAsDataURL","abort","observablemixin","filerepository_FileRepository","src_plugin","pluginName","requires","pendingactions","loaders","_updatePendingAction","_loadersMap","_pendingAction","uploaded","fileOrPromise","createUploadAdapter","console","warn","loader","filerepository_FileLoader","then","catch","aggregatedUploaded","aggregatedTotal","uploadTotal","fileOrPromiseOrLoader","getLoader","_destroy","pendingActions","plugins","getMessage","parseInt","uploadedPercent","filePromise","uploadAdapterCreator","_filePromiseWrapper","_createFilePromiseWrapper","_adapter","promise","status","read","upload","uploadResponse","isFulfilled","rejecter","wrapper","FocusCycler","_ckeditor_ckeditor5_utils_src_dom_global__WEBPACK_IMPORTED_MODULE_0__","actions","keystrokeHandler","focusables","isFocusable","_getFocusableItem","previous","current","viewIndex","focused","step","collectionLength","display","Matcher","pattern","_patterns","singleElement","isElementMatching","results","matchName","matchAttributes","getClassNames","hasClass","matchClasses","hasStyle","getStyle","matchStyles","ViewCollection","_ckeditor_ckeditor5_utils_src_collection__WEBPACK_IMPORTED_MODULE_1__","_parentElement","insertBefore","elementOrDocFragment","dest","evtName","stopDelegating","toMap","_objecttomap__WEBPACK_IMPORTED_MODULE_0__","lodash_es__WEBPACK_IMPORTED_MODULE_1__","Template","_ckeditor_ckeditor5_utils_src_emittermixin__WEBPACK_IMPORTED_MODULE_2__","_view__WEBPACK_IMPORTED_MODULE_3__","_viewcollection__WEBPACK_IMPORTED_MODULE_4__","_ckeditor_ckeditor5_utils_src_dom_isnode__WEBPACK_IMPORTED_MODULE_5__","lodash_es__WEBPACK_IMPORTED_MODULE_7__","xhtmlNs","def","_isRendered","_renderNode","intoFragment","isApplying","revertData","_revertTemplateFromNode","isView","isTemplate","eventNameOrFunctionOrAttribute","TemplateToBinding","eventNameOrFunction","valueIfTrue","TemplateIfBinding","extendObjectValueArray","eventListeners","childIndex","childDef","isInvalid","_renderText","_renderElement","createElementNS","_renderAttributes","_renderElementChildren","_setUpListeners","textContent","hasTemplateBinding","_bindToObservable","updater","getTextUpdater","attrName","attrValue","domAttrValue","attrNs","valueToBind","shouldExtend","unshift","getAttributeUpdater","_renderStyleAttribute","isFalsy","val","arrayValueReducer","setAttributeNS","styleName","styleValue","getStyleUpdater","container","createDocumentFragment","isViewCollection","setParent","childRevertData","childNodes","revertBindings","schemaItem","domEvtName","domSelector","activateDomEventListener","syncValueSchemaValue","templateBinding","activateAttributeListener","revertBinding","TemplateBinding","domEvt","matches","getValue","some","getValueSchemaValue","el","removeAttributeNS","normalizePlainTextDefinition","normalizeTextDefinition","listeners","arrayify","normalizeListeners","normalizeAttributes","cur","ext","_isnode__WEBPACK_IMPORTED_MODULE_2__","_iswindow__WEBPACK_IMPORTED_MODULE_3__","DomEmitterMixin","rest","proxy","_getProxyEmitter","ProxyEmitter","attach","detach","getNodeUID","_domNode","_domListeners","domListener","_createDomListener","addEventListener","removeListener","removeEventListener","_assignValue_js__WEBPACK_IMPORTED_MODULE_0__","_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__","props","customizer","isNew","Node","getChildIndex","nodePath","_ckeditor_ckeditor5_utils_src_tomap__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_ckeditorerror__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_utils_src_comparearrays__WEBPACK_IMPORTED_MODULE_2__","getChildStartOffset","NodeList","_nodes","totalOffset","nodeList","indexStart","_element__WEBPACK_IMPORTED_MODULE_0__","_formatReturnValue","textLength","textProxy","MarkerOperation","oldRange","newRange","markers","affectsData","_markers","RenameOperation","_element__WEBPACK_IMPORTED_MODULE_1__","oldName","newName","_DataView","_getNative","_root","_Promise","_Set","_WeakMap","dataViewCtorString","mapCtorString","_Map","promiseCtorString","setCtorString","weakMapCtorString","getTag","_baseGetTag","ArrayBuffer","Ctor","ctorString","freeExports","nodeType","freeModule","freeProcess","process","nodeUtil","types","require","diff","_src_fastdiff__WEBPACK_IMPORTED_MODULE_0__","aLength","bLength","fastDiff","_delete","tmp","delta","es","fp","snake","k","y1","y2","dir","isNode","Document","DocumentFragment","_nodelist__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_isiterable__WEBPACK_IMPORTED_MODULE_3__","DataTransfer","nativeDataTransfer","files","kind","getAsFile","getFiles","_native","getData","setData","clipboardobserver_ClipboardObserver","domeventobserver","viewDocument","handleInput","targetRanges","dropRange","eventinfo","dataTransfer","evtData","clipboardData","domDoc","clientX","clientY","domRange","caretRangeFromPoint","rangeParent","setStart","rangeOffset","domConverter","domRangeToView","getDropViewRange","smallPaddingElements","clipboard_Clipboard","modelDocument","editing","onCopyCut","toView","getSelectedContent","method","_htmlDataProcessor","htmldataprocessor","addObserver","fullMatch","spaces","normalizeClipboardData","plainTextToHtml","scrollToTheSelection","dataController","modelFragment","toModel","toData","viewToPlainText","childText","includes","deleteContent","_baseSlice","_castSlice","reHasUnicode","_hasUnicode","string","_asciiToArray","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsSeq","rsSymbol","reUnicode","_unicodeToArray","_stringToArray","lodash_es_upperFirst","lodash_es_toString","strSymbols","chr","trailing","_createCaseFirst","isLinkElement","createLinkElement","ensureSafeUrl","getLocalizedDecorators","normalizeDecorators","ATTRIBUTE_WHITESPACES","SAFE_URL","href","linkElement","createAttributeElement","url","isSafeUrl","decorators","localizedDecoratorsLabels","Open in a new tab","Downloadable","decorator","retArray","LiveRange","_range__WEBPACK_IMPORTED_MODULE_0__","_createFromRanges","boundariesChanged","contentChanged","doesOperationChangeRangeContent","toRange","_listCacheClear","__data__","_assocIndexOf","eq","_listCacheDelete","_listCacheGet","_listCacheHas","_listCacheSet","ListCache","entry","_getNative_js__WEBPACK_IMPORTED_MODULE_0__","_root_js__WEBPACK_IMPORTED_MODULE_1__","AttributeElement","DEFAULT_PRIORITY","_priority","_id","_clonesGroup","isSimilar","nonUiChildrenCount","ContainerElement","DOCUMENT_NODE","domconverter_DomConverter","BR_FILLER_REF","filler","blockFillerMode","preElements","blockElements","_blockFiller","_domToViewMapping","_viewToDomMapping","_fakeSelectionMapping","viewDocumentSelection","unbindDomElement","domFragment","viewFragment","viewNode","textData","_processDataFromViewText","mapViewToDom","bindDocumentFragments","withChildren","viewChildrenToDom","fillerPositionOffset","childView","viewToDom","viewRange","domStart","viewPositionToDom","domEnd","setEnd","findCorrespondingDomText","domBefore","domAfter","istext","isBlockFiller","uiElement","getParentUIElement","_processDataFromDomText","view_text","isComment","mapDomToView","isDocumentFragment","documentfragment","viewName","keepOriginalCase","tagName","view_element","domChildrenToView","_appendChild","domChild","viewChild","domToView","viewSelection","fakeSelectionToView","isDomSelectionBackward","viewRanges","viewStart","domPositionToView","viewEnd","endContainer","findCorrespondingViewText","viewBefore","domElementOrDocumentFragment","isElement","firstChild","documentFragmentOrElement","viewText","viewEditable","domEditable","activeElement","scrollX","scrollY","global","scrollPositions","forEachDomNodeAncestor","scrollLeft","scrollTop","scrollTo","ELEMENT_NODE","DOCUMENT_FRAGMENT_NODE","COMMENT_NODE","isEqualNode","hasBlockParent","isNbspBlockFiller","anchorNode","anchorOffset","focusNode","focusOffset","_isDomSelectionPositionCorrect","prevNode","_getTouchingViewTextNode","_nodeEndsWithSpace","nextNode","_hasDomParentOfType","_getTouchingInlineDomNode","shouldLeftTrim","_checkShouldLeftTrimDomText","shouldRightTrim","_checkShouldRightTrimDomText","getNext","topmostParent","createTreeWalker","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","acceptNode","FILTER_ACCEPT","FILTER_SKIP","currentNode","touchingNode","lca","boundaryParent","parents","IconView","viewBox","_updateXMLContent","_colorFillPaths","svg","DOMParser","parseFromString","querySelector","innerHTML","fillColor","querySelectorAll","fill","_root_js__WEBPACK_IMPORTED_MODULE_0__","_stubFalse_js__WEBPACK_IMPORTED_MODULE_1__","Buffer","isBuffer","isRange","previous_arrow","next_arrow","contextualballoon_ContextualBalloon","toPx","tounit","positionLimiter","balloonpanelview","_viewToStack","_idToStack","_rotatorView","_createRotatorView","_fakePanelsView","_createFakePanelsView","hasView","stackId","_numberOfStacks","_visibleStack","singleViewMode","showStack","_showView","_singleViewMode","visibleView","_showNextStack","hide","hideView","values","_getStackId","pin","_getBalloonPosition","updatePosition","visibleStack","stacks","nextIndex","contextualballoon_RotatorView","isSingleViewMode","numberOfStacks","buttonNextView","buttonPrevView","_showPrevStack","contextualballoon_FakePanelsView","number","balloonClassName","withArrow","showView","limiter","src_view","_createButtonView","z-index","balloonPanelView","_balloonPanelView","_addPanels","_removePanels","deregisterChild","numberOfPanels","UpcastWriter","_documentfragment__WEBPACK_IMPORTED_MODULE_0__","_position__WEBPACK_IMPORTED_MODULE_4__","_range__WEBPACK_IMPORTED_MODULE_5__","_selection__WEBPACK_IMPORTED_MODULE_6__","removeChildren","oldElement","insertChild","_addClass","_removeClass","_setStyle","_removeStyle","_setCustomProperty","_removeCustomProperty","_overArg_js__WEBPACK_IMPORTED_MODULE_0__","getPrototype","getPrototypeOf","_isFunction_js__WEBPACK_IMPORTED_MODULE_0__","_isLength_js__WEBPACK_IMPORTED_MODULE_1__","EditableElement","_containerelement__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_observablemixin__WEBPACK_IMPORTED_MODULE_3__","documentSymbol","_document","DomEventData","lodash_es__WEBPACK_IMPORTED_MODULE_0__","_arrayEach","iteratee","_baseAssign","_copyObject","_baseAssignIn","lodash_es_keysIn","_copyArray","_copySymbols","_getSymbols","_getSymbolsIn","_arrayPush","_getPrototype","stubArray","_copySymbolsIn","_getAllKeysIn","_baseGetAllKeys","_initCloneArray_hasOwnProperty","_initCloneArray","input","_cloneArrayBuffer","arrayBuffer","byteLength","_Uint8Array","_cloneDataView","dataView","isDeep","buffer","byteOffset","reFlags","_cloneRegExp","regexp","lastIndex","symbolProto","symbolValueOf","valueOf","_cloneSymbol","symbol","_cloneTypedArray","typedArray","boolTag","dateTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","_initCloneByTag","objectCreate","_baseCreate","proto","_initCloneObject","_isPrototype","_baseIsMap_mapTag","_baseIsMap","isObjectLike","_getTag","nodeIsMap","_nodeUtil","isMap","lodash_es_isMap","_baseUnary","_baseIsSet_setTag","_baseIsSet","nodeIsSet","isSet","lodash_es_isSet","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","argsTag","funcTag","genTag","objectTag","cloneableTags","baseClone","bitmask","isFull","isArr","isFunc","_cloneBuffer","_Stack","stacked","subValue","keysFunc","_getAllKeys","keysIn","_assignValue","_nativeKeysIn","_baseKeysIn_hasOwnProperty","_baseKeysIn","isProto","isArrayLike","_arrayLikeKeys","_nativeKeys","_overArg","_baseKeys_hasOwnProperty","_baseKeys","_arrayFilter","predicate","resIndex","propertyIsEnumerable","nativeGetSymbols","getSymbols","Uint8Array","isWindow","stringifiedObject","_stackClear","_ListCache","_stackDelete","_stackGet","_stackHas","LARGE_ARRAY_SIZE","_stackSet","pairs","_MapCache","Stack","src_spy","spy","eventinfo_EventInfo","_baseGetTag_js__WEBPACK_IMPORTED_MODULE_0__","_isObject_js__WEBPACK_IMPORTED_MODULE_1__","asyncTag","proxyTag","_getPrototype_js__WEBPACK_IMPORTED_MODULE_1__","_isObjectLike_js__WEBPACK_IMPORTED_MODULE_2__","objectCtorString","RESIZE_CHECK_INTERVAL","getresizeobserver_ResizeObserverPolyfill","_callback","_previousRects","_periodicCheckTimeout","_startPeriodicCheck","_stopPeriodicCheck","unobserve","periodicCheck","_checkElementRectsAndExecuteCallback","_hasRectChanged","contentRect","contains","currentRect","previousRect","hasChanged","three_vertical_dots","toolbarview_ToolbarView","itemsView","toolbarview_ItemsView","_focusCycler","focuscycler","focusPrevious","focusNext","role","aria-label","_behavior","shouldGroupWhenFull","toolbarview_DynamicGrouping","StaticLayout","focusFirst","config","toolbarseparatorview","viewChildren","viewFocusables","viewItemsView","viewFocusTracker","viewLocale","ungroupedItems","groupedItems","groupedItemsDropdown","_createGroupedItemsDropdown","resizeObserver","cachedPadding","_updateFocusCycleableItems","_updateGrouping","_enableGroupingOnResize","disconnect","wereItemsGrouped","_areItemsOverflowing","_groupLastItem","_ungroupFirstItem","lastChildRect","toolbarRect","computedStyle","paddingProperty","previousWidth","ResizeObserver","getResizeObserver","observe","dropdown","paragraphcommand_ParagraphCommand","block","checkCanBecomeParagraph","change","blocks","rename","paragraph_Paragraph","register","inheritAllFrom","conversion","elementToElement","for","modelWriter","paragraphLikeElements","converterPriority","upcastDispatcher","consumable","isParagraphable","modelCursor","wrapInParagraph","modelRange","registerPostFixer","_autoparagraphEmptyRoots","enqueueChange","getRootNames","paragraph","convertItem","createContext","BalloonPanelView","_ckeditor_ckeditor5_utils_src_dom_position__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_utils_src_dom_isrange__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_dom_tounit__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_utils_src_dom_global__WEBPACK_IMPORTED_MODULE_4__","lodash_es__WEBPACK_IMPORTED_MODULE_5__","defaultLimiterElement","isVisible","show","defaultPositions","positionOptions","southArrowNorth","southArrowNorthWest","southArrowNorthEast","northArrowSouth","northArrowSouthWest","northArrowSouthEast","optimalPosition","unpin","_pinWhenIsVisibleCallback","_startPinning","_stopPinning","attachTo","getDomElement","limiterElement","scrollTarget","isWithinScrollTarget","isLimiterWithinScrollTarget","getNorthTop","targetRect","balloonRect","arrowVerticalOffset","getSouthTop","arrowHorizontalOffset","northWestArrowSouth","northWestArrowSouthWest","northWestArrowSouthEast","northEastArrowSouth","northEastArrowSouthEast","northEastArrowSouthWest","southWestArrowNorth","southWestArrowNorthWest","southWestArrowNorthEast","southEastArrowNorth","southEastArrowNorthEast","southEastArrowNorthWest","clickOutsideHandler","contextElement","priorities","normal","highest","high","low","lowest","toUnit","unit","mouseobserver_MouseObserver","widget_Widget","selectAllKeystrokeCode","keyboard","_previouslySelected","downcastDispatcher","_clearPreviouslySelectedWidgets","lastMarked","isChild","_onMousedown","_onKeydown","_handleDelete","domEventData","isInsideNestedEditable","detail","_setSelectionOverElement","isLtrContent","contentLanguageDirection","isForward","wasHandled","isArrowKeyCode","isSelectAllKeyCode","_handleEnterKey","_selectAllNestedEditableContent","_selectAllContent","_handleArrowKeys","modelSelection","objectElement","_getObjectElementNextToSelection","previousNode","nodeToRemove","getLastPosition","getFirstPosition","getNearestSelectionRange","objectElement2","isBackwards","isInline","shouldInsertParagraph","paragraphLimit","findAllowedParent","documentSelection","limitElement","getLimitElement","createRangeIn","widgetParent","forward","probe","createSelection","modifySelection","widget","AttributeCommand","_ckeditor_ckeditor5_core_src_command__WEBPACK_IMPORTED_MODULE_0__","attributeKey","_getValueFromFirstAllowedNode","checkAttributeInSelection","forceValue","setSelectionAttribute","removeSelectionAttribute","getValidRanges","checkAttribute","LabeledInputView","_ckeditor_ckeditor5_utils_src_uid__WEBPACK_IMPORTED_MODULE_1__","_label_labelview__WEBPACK_IMPORTED_MODULE_2__","InputView","inputUid","statusUid","inputView","_createInputView","statusView","_createStatusView","errorText","infoText","ariaDescribedById","select","InputTextView","placeholder","readonly","aria-invalid","aria-describedby","setValue","submitHandler","WidgetToolbarRepository","_ckeditor_ckeditor5_core_src_plugin__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_ui_src_panel_balloon_contextualballoon__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_ui_src_toolbar_toolbarview__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_ui_src_panel_balloon_balloonpanelview__WEBPACK_IMPORTED_MODULE_3__","balloonToolbar","isWidgetSelected","_toolbarDefinitions","_balloon","_updateToolbarsVisibility","toolbarConfig","toolbarId","ariaLabel","getRelatedElement","fillFromConfig","maxRelatedElementDepth","deepestRelatedElement","deepestToolbarDefinition","relatedElement","relatedElementDepth","_isToolbarInBalloon","_hideToolbar","_isToolbarVisible","_showToolbar","toolbarDefinition","repositionContextualBalloon","getBalloonPositionData","toolbar","balloon","editingView","ckeditor5_package_json__WEBPACK_IMPORTED_MODULE_0__","windowOrGlobal","CKEDITOR_VERSION","_baseGetAllKeys_js__WEBPACK_IMPORTED_MODULE_0__","_getSymbols_js__WEBPACK_IMPORTED_MODULE_1__","_keys_js__WEBPACK_IMPORTED_MODULE_2__","_","UIElement","injectUiElementHandling","_node__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_keyboard__WEBPACK_IMPORTED_MODULE_3__","domSelectionCollapsed","jumpedOverAnyUiElement","nextViewPosition","newDomPosition","jumpOverUiElement","RootAttributeOperation","lodash_es_identity","_apply","thisArg","nativeMax","_overRest","transform","arguments","otherArgs","lodash_es_constant","_baseSetToString","_defineProperty","HOT_COUNT","HOT_SPAN","nativeNow","Date","now","_setToString","lastCalled","stamp","remaining","_shortOut","_baseRest","_isIterateeCall","_isIndex","_createAssigner","assigner","sources","guard","assignIn","SwitchButtonView","_buttonview__WEBPACK_IMPORTED_MODULE_1__","toggleSwitchView","_createToggleView","toTableWidget","getSelectedTableWidget","getTableWidgetAncestor","_commands_utils__WEBPACK_IMPORTED_MODULE_1__","isTableWidget","parentTable","HtmlDataProcessor","_basichtmlwriter__WEBPACK_IMPORTED_MODULE_0__","_view_domconverter__WEBPACK_IMPORTED_MODULE_1__","_domParser","_domConverter","_htmlWriter","getHtml","_toDom","fragment","Model","_ckeditor_ckeditor5_utils_src_mix__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_observablemixin__WEBPACK_IMPORTED_MODULE_1__","Notification","alert","_showNotification","namespace","title","_documentselection__WEBPACK_IMPORTED_MODULE_0__","roots","_postFixers","postFixer","wasFixed","emptyelement_EmptyElement","view_node","downcastwriter_DowncastWriter","_cloneGroups","_setTo","_setFocus","attributeElement","attributeelement","containerelement","editableelement","renderFunction","uielement","isPlainObject","positionOrRange","view_position","_breakAttributes","_breakAttributesRange","view_range","positionOffset","positionParent","_removeFromClonedElementsGroup","mergeAttributes","mergeTextNodes","newPosition","validateNodesToInsert","errorContext","validNodesToInsert","validNode","isiterable","getParentContainer","_addToClonedElementsGroup","endPosition","rangeOrItem","validateRangeContainer","breakStart","breakEnd","parentContainer","mergePosition","rangeToRemove","parentElement","countBefore","_hasNonUiChildren","_wrapPosition","_wrapRange","_unwrapChildren","groupName","wrapElement","wrapPositions","isAttribute","isUI","_wrapAttributeElement","shouldABeOutsideB","newAttribute","_wrapChildren","offsetChange","unwrapElement","unwrapPositions","unwrapped","_unwrapAttributeElement","movePositionToTextNode","breakTextNode","fakePosition","wrapRange","wrap","toWrap","canBeJoined","getStyleNames","setStyle","toUnwrap","removeStyle","forceSplitText","rangeStart","rangeEnd","isContainerOrFragment","offsetAfter","clonedNode","nodesToMove","group","getIdentity","textToMove","t1","t2","nodeBeforeLength","freeGlobal","arg","_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__","_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_0__","_eq_js__WEBPACK_IMPORTED_MODULE_1__","objValue","MAX_SAFE_INTEGER","reIsUint","_arrayPush_js__WEBPACK_IMPORTED_MODULE_0__","_isArray_js__WEBPACK_IMPORTED_MODULE_1__","symbolsFunc","objectToMap","DocumentSelection","_selection__WEBPACK_IMPORTED_MODULE_0__","_selection","setFocus","atomicChanges","changeIndexes","arr1","arr2","firstIndex","findFirstDifferenceIndex","lastIndexOld","lastIndexNew","oldArrayReversed","cutAndReverse","newArrayReversed","findChangeBoundaryIndexes","newLength","changeIndexesToAtomicChanges","newArray","changeIndexesToChanges","reverse","getBorderWidths","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","_nativeCreate","_hashClear","_hashDelete","HASH_UNDEFINED","_hashGet_hasOwnProperty","_hashGet","_hashHas_hasOwnProperty","_hashHas","_hashSet_HASH_UNDEFINED","_hashSet","Hash","_Hash","_mapCacheClear","hash","_isKeyable","_getMapData","_mapCacheDelete","_mapCacheGet","_mapCacheHas","_mapCacheSet","MapCache","_setCacheAdd","_setCacheHas","SetCache","_SetCache","_arraySome","_cacheHas","cache","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","_equalArrays","equalFunc","arrLength","othLength","seen","arrValue","othValue","compared","othIndex","_mapToArray","_setToArray","_equalByTag_COMPARE_PARTIAL_FLAG","_equalByTag_COMPARE_UNORDERED_FLAG","errorTag","_equalByTag","convert","_equalObjects_COMPARE_PARTIAL_FLAG","_equalObjects_hasOwnProperty","_equalObjects","objProps","objLength","skipCtor","objCtor","othCtor","_baseIsEqualDeep_COMPARE_PARTIAL_FLAG","arrayTag","_baseIsEqualDeep_hasOwnProperty","_baseIsEqualDeep","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","isTypedArray","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","baseIsEqual","_baseTimes","_baseIsArguments","isArguments_hasOwnProperty","lodash_es_isArguments","_arrayLikeKeys_hasOwnProperty","inherited","isArg","isBuff","isType","skipIndexes","typedArrayTags","_baseIsTypedArray","isLength","nodeIsTypedArray","getCopyOnEnterAttributes","allAttributes","getAttributeProperties","copyOnEnter","EnterObserver","_ckeditor_ckeditor5_engine_src_view_observer_observer__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_engine_src_view_observer_domeventdata__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_utils_src_keyboard__WEBPACK_IMPORTED_MODULE_2__","once","isSoft","getOptimalPosition","positionedElementAncestor","getPositionedAncestor","elementRect","bestPosition","limiterRect","getVisible","viewportRect","bestPositionRect","bestPositionName","maxLimiterIntersectArea","maxViewportIntersectArea","elementRectArea","positionName","positionRect","getPosition","limiterIntersectArea","viewportIntersectArea","limiterViewportIntersectRect","getIntersectionArea","setBestPosition","getBestPosition","getAbsoluteRectCoordinates","ancestorPosition","ancestorBorderWidths","getborderwidths","moveTo","enablePlaceholder","showPlaceholder","hidePlaceholder","needsPlaceholder","documentPlaceholders","isDirectHost","updateDocumentPlaceholders","isEmptyish","selectionAnchor","placeholders","wasViewModified","updatePlaceholder","hostElement","getChildPlaceholderHostSubstitute","_isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__","LabelView","TooltipView","undo","redo","undoui_UndoUI","localizedUndoIcon","localizedRedoIcon","_addButton","Icon","undo_Undo","undoediting","imagetextalternativecommand_ImageTextAlternativeCommand","src_command","imagetextalternativeediting_ImageTextAlternativeEditing","textalternativeformview_TextAlternativeFormView","labeledInput","_createLabeledInputView","saveButtonView","_createButton","check","cancelButtonView","_focusables","viewcollection","submithandler","v","button","labeledinputview","inputtextview","low_vision","imagetextalternativeui_ImageTextAlternativeUI","contextualballoon","_createForm","_form","_showForm","_hideForm","_isVisible","_isInBalloon","focusEditable","imagetextalternative_ImageTextAlternative","image_Image","imageediting","filedialogbuttonview_FileDialogButtonView","_fileInputView","filedialogbuttonview_FileInputView","open","accept","multiple","icons_image","createImageTypeRegExp","regExpSafeNames","fetchLocalImage","image","imageSrc","fetch","resource","blob","mimeType","src","getImageMimeType","filename","File","createFileFromBlob","imageuploadui_ImageUploadUI","imageTypes","imageTypesRegExp","acceptedType","allowMultipleFiles","imagesToUpload","image_placeholder","imageuploadprogress_ImageUploadProgress","encodeURIComponent","uploadStatusChange","modelImage","uploadId","consume","fileRepository","filerepository","attributeNewValue","viewFigure","_startAppearEffect","_showPlaceholder","_hidePlaceholder","progressBar","_createProgressBar","_showProgressBar","viewImg","_displayLocalImage","completeIcon","_showCompleteIcon","_removeUIElement","_hideProgressBar","_stopAppearEffect","_getUIElement","_createPlaceholder","imageFigure","uniqueProperty","imageuploadcommand_ImageUploadCommand","filesToUpload","uploadImage","createLoader","imageuploadediting_ImageUploadEditing","notification_notification","clipboard","define","allowAttributes","attributeToAttribute","isHtmlIncluded","images","toModelRange","fetchableImages","isLocalImage","upcastwriter","fetchableImage","changes","differ","getChanges","includeChangesInGraveyard","isInGraveyard","getImagesFromChangeItem","_readAndUpload","notification","domFigure","originalDisplay","_ckHack","setAttributes","uploadStatus","default","_parseAndSetSrcsetAttributeOnImage","clean","showWarning","destroyLoader","maxWidth","srcsetAttribute","isNaN","imageupload_ImageUpload","imageloadobserver_ImageLoadObserver","observer","_observedElements","domRoot","_updateObservedElements","_fireEvents","modelToViewAttributeConverter","dispatcher","converter","img","imageinsertcommand_ImageInsertCommand","imageediting_ImageEditing","allowWhere","createImageViewElement","srcset","attributeOldValue","srcsetAttributeConverter","viewImage","conversionResult","convertChildren","viewFigureToModel","emptyElement","createEmptyElement","figure","findLinkRange","_findBound","lookBack","lastNode","linkcommand_LinkCommand","manualDecorators","manualDecorator","_getDecoratorStateFromModel","manualDecoratorIds","truthyManualDecorators","falsyManualDecorators","linkRange","tomap","createText","decoratorName","unlinkcommand_UnlinkCommand","linkCommand","rangesToUnlink","AutomaticDecorators","_definitions","toViewRange","unwrap","ManualDecorator","TwoStepCaretHandler","_modelSelection","_overrideUid","_isNextGravityRestorationSkipped","_isGravityOverridden","directChange","isAtBoundary","_restoreGravity","_hasSelectionAttribute","isBetweenDifferentValues","_preventCaretMovement","_removeSelectionAttribute","isAtStartBoundary","_overrideGravity","isAtEndBoundary","_setSelectionAttributeFromTheNodeBefore","isStepAfterTheAttributeBoundary","_skipNextAutomaticGravityRestoration","overrideSelectionGravity","restoreSelectionGravity","isAttrBefore","isAttrAfter","linkediting_LinkEditing","HIGHLIGHT_CLASS","DECORATOR_AUTOMATIC","DECORATOR_MANUAL","EXTERNAL_LINKS_REGEXP","addTargetToExternalLinks","attributeToElement","elementToAttribute","linkDecorators","_enableAutomaticDecorators","_enableManualDecorators","twoStepCaretHandler","arrowRightPressed","arrowLeftPressed","contentDirection","isMovementHandled","handleForwardMovement","handleBackwardMovement","bindTwoStepCaretToAttribute","_setupLinkHighlight","automaticDecoratorDefinitions","automaticDecorators","rel","getDispatcher","manualDecoratorDefinitions","manualDecoratorName","highlightedLinks","changed","removeHighlight","ToolbarSeparatorView","originalModule","webpackPolyfill","TOKEN_COOKIE_NAME","TOKEN_LENGTH","tokenCharset","getCsrfToken","token","parts","cookie","part","pair","decodeURIComponent","getCookie","randValues","crypto","getRandomValues","character","toUpperCase","generateToken","setCookie","uploadadapter_CKFinderUploadAdapter","uploadadapter_UploadAdapter","_initRequest","_initListeners","_sendRequest","xhr","XMLHttpRequest","responseType","genericError","response","lengthComputable","FormData","append","send","_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__","_isPlainObject_js__WEBPACK_IMPORTED_MODULE_1__","PendingActions","_plugin__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_utils_src_collection__WEBPACK_IMPORTED_MODULE_2__","_actions","action","hasAny","ListCommand","_ckeditor_ckeditor5_utils_src_first__WEBPACK_IMPORTED_MODULE_1__","_checkEnabled","checkCanBecomeListItem","turnOff","currentIndent","newIndent","lowestIndent","_fixType","listItem","startingItem","setDataInElement","HTMLTextAreaElement","bold","BOLD","boldui_BoldUI","bold_Bold","boldediting","italic","ITALIC","italicui_ItalicUI","italic_Italic","italicediting","DataApiMixin","BasicHtmlWriter","implementation","createHTMLDocument","EditorUIView","_template__WEBPACK_IMPORTED_MODULE_1__","_renderBodyCollection","_bodyCollectionContainer","bodyElement","getDataFromElement","config_Config","configurations","defaultConfigurations","_config","_setObjectToTarget","_setToTarget","_getFromSource","isDefine","cloneDeepWith","leaveDOMReferences","cloneConfig","configuration","rootNameSymbol","rooteditableelement_RootEditableElement","_name","insertAt","nodeToInsert","removeChild","renderer_Renderer","domDocuments","markedAttributes","markedChildren","markedTexts","_inlineFiller","_fakeSelectionContainer","inlineFillerPosition","_updateChildrenMappings","_isSelectionInInlineFiller","_removeInlineFiller","_getInlineFillerPosition","_needsInlineFillerAtSelection","_updateAttrs","_updateChildren","_updateText","fillerDomPosition","view_filler","addInlineFiller","_updateSelection","_updateFocus","actualDomChildren","expectedDomChildren","_diffNodeLists","_findReplaceActions","counter","equal","insertIndex","deleteIndex","_updateElementMappings","firstPos","selectionPosition","domFillerNode","selectionParent","selectionOffset","isEditable","newDomText","actualText","expectedText","fastdiff","insertData","deleteData","domAttrKeys","viewAttrKeys","nodesToUnbind","_markDescendantTextToSync","domChildList","fakeSelectionContainer","childList","filterOutFakeSelectionContainer","src_diff","actualDomChild","expectedDomChild","actualDom","expectedDom","newActions","actualSlice","expectedSlice","areSimilar","_removeDomSelection","_removeFakeSelection","_updateFakeSelection","_updateDomSelection","createFakeSelectionContainer","bindFakeSelection","_fakeSelectionNeedsUpdate","removeAllRanges","selectNodeContents","addRange","_domSelectionNeedsUpdate","childAtOffset","fixGeckoSelectionAfterBr","isDomSelectionCorrect","oldViewSelection","domSelectionToView","activeDomElement","domParentOrArray","nodeAfterFiller","fillerNode","node1","node2","isnode","lodash_es_isEqualWith","mutationobserver_MutationObserver","characterData","characterDataOldValue","subtree","renderer","_renderer","_domElements","_mutationObserver","MutationObserver","_onMutations","takeRecords","enable","domMutations","mutatedTexts","mutatedElements","mutation","_isBogusBrMutation","oldText","newText","viewMutations","mutatedText","markToSync","newViewChildren","sameNodes","oldChildren","newChildren","viewSelectionAnchor","viewSelectionFocus","view_selection","child1","child2","forceRender","addedNode","removedNodes","addedNodes","keyobserver_KeyObserver","metaKey","fakeselectionobserver_FakeSelectionObserver","_fireSelectionChangeDoneDebounced","debounce","_isArrowKeyCode","_handleSelectionMove","newSelection","oldSelection","selectionobserver_SelectionObserver","mutationObserver","getObserver","_documents","WeakSet","_clearInfiniteLoopInterval","setInterval","_clearInfiniteLoop","_loopbackCounter","_handleSelectionChange","clearInterval","flush","newViewSelection","focusobserver_FocusObserver","_renderTimeoutId","selectedEditable","compositionobserver_CompositionObserver","isComposing","inputobserver_InputObserver","scrollViewportToShowTarget","viewportOffset","targetWindow","getWindow","currentWindow","currentFrame","firstAncestorToScroll","scrollAncestorsToShowRect","getParentElement","getRectRelativeToWindow","scrollWindowToShowRect","frameElement","targetShiftedDownRect","moveBy","targetShiftedUpRect","dom_rect","excludeScrollbarsAndBorders","isAbove","isBelow","isLeftOf","isRightOf","getRect","parentWindow","firstRect","secondRect","isrange","relativeWindow","frame","frameRect","scrollAncestorsToShowTarget","view_View","view_document","domconverter","domRoots","_initialDomRootAttributes","_observers","_ongoingChange","_postFixersInProgress","_renderingDisabled","_hasChangedSinceTheLastRendering","_writer","downcastwriter","_render","viewRoot","initialDomRootAttributes","updateContenteditableAttribute","viewRangeToDom","isRenderingInProgress","callbackResult","_callPostFixers","flag","disableObservers","enableObservers","mapper_Mapper","_modelToViewMapping","_viewToModelMapping","_viewToModelLengthCallbacks","_markerNameToElements","_elementToMarkerNames","_unboundMarkerNames","viewContainer","_findPositionIn","viewBlock","modelOffset","_toModelOffset","model_position","markerName","elements","names","nameToElements","elementToNames","markerNames","model_range","toModelPosition","isPhantom","boundElements","getElementsWithSameId","viewElementName","lengthCallback","viewOffset","getModelLength","len","expectedOffset","lastLength","_moveViewPositionToTextNode","modelconsumable_ModelConsumable","_consumable","_textProxyRegistry","_normalizeConsumableType","textproxy","_getSymbolForTextProxy","itemConsumables","startMap","endMap","_addSymbolForTextProxy","downcastdispatcher_DowncastDispatcher","getMarkersToRemove","convertMarkerRemove","convertInsert","convertRemove","convertAttribute","flushUnboundMarkerNames","markerRange","getRange","convertMarkerAdd","getMarkersToAdd","_createInsertConsumable","_testAndFire","_clearConversionApi","_createConsumableForRange","markersAtSelection","getMarkersAtPosition","_createSelectionConsumable","marker","shouldMarkerChangeBeConverted","containsItem","selection_Selection","model_node","anyNewRange","_removeAllRanges","_popRange","attributeKeys","model_element","visited","startBlock","getParentBlock","isTopBlockInRange","isUnvisitedTopBlock","endBlock","limitStartPosition","limitEndPosition","_checkRange","isUnvisitedBlock","hasParentLimit","isLimit","parentBlock","findAncestorBlock","storePrefix","documentselection_LiveSelection","hasOwnRange","isGravityOverridden","containsEntireContent","_updateMarkers","_updateAttributes","_getStoredAttributes","overrideGravity","restoreGravity","startsWith","_model","_attributePriority","_fixGraveyardRangesData","_hasChangedRange","_overriddenGravityRegister","liveRange","_fixGraveyardSelection","_validateSelectionRange","changeParent","isNoLongerEmpty","storedAttributes","clearAttributesStoredInElement","_getDefaultRange","optionsOrPlaceOrOffset","overrideUid","src_uid","_prepareRange","liverange","fromRange","selectionRange","clearAll","newAttributes","_getSurroundingAttributes","oldAttributes","_setAttributesTo","newKey","oldKey","getAttrsIfCharacter","removedRangeStart","positionCandidate","ConversionHelpers","dispatchers","_dispatchers","conversionHelper","lodash_es_cloneDeep","_baseClone","downcasthelpers_DowncastHelpers","normalizeToElementConfig","elementCreator","downcastElementToElement","modelValue","getFromAttributeCreator","oldViewElement","newViewElement","downcastAttributeToElement","normalizeToAttributeConfig","attributeCreator","oldAttribute","changeAttribute","downcastAttributeToAttribute","isOpening","viewStartElement","viewEndElement","bindElementToMarker","insertUIElement","markerNameToElements","unbindElementFromMarkerName","clearClonedElementsGroup","downcastMarkerToElement","highlightDescriptor","prepareDescriptor","createViewElementFromHighlightDescriptor","rangeAfterWrap","highlightText","highlightElement","viewHighlightElement","downcastMarkerToHighlight","viewElementType","modelData","viewElementDefinition","createViewElementFromDefinition","modelAttributeValue","upcasthelpers_UpcastHelpers","upcastElementToElement","normalizeModelAttributeConfig","prepareToAttributeConverter","elementName","getViewElementNameFromConfig","upcastElementToAttribute","viewKey","keyName","normalizeViewAttributeKeyValueConfig","upcastAttributeToAttribute","oldModel","data-name","normalizeToMarkerConfig","upcastElementToMarker","view_matcher","matcherResult","getModelElement","splitResult","splitToAllowedParent","getSplitParts","cursorParent","prepareToElementConverter","viewConfig","viewAttributeKeyToCopy","defaultModelValue","modelKey","configToTest","onlyViewNameIsDefined","modelAttribute","setAttributeOn","editingcontroller_EditingController","_disableRendering","convertChanges","convertSelection","convertSelectionChange","modelEnd","unbindViewElement","brokenPosition","breakAttributes","plugincollection_PluginCollection","availablePlugins","_editor","_availablePlugins","_plugins","PluginConstructor","plugin","errorMsg","removePlugins","that","loading","pluginConstructors","mapToAvailableConstructors","removePluginConstructors","missingPlugins","pluginNameOrConstructor","getPluginConstructor","getMissingPluginNames","all","loadPlugin","initPlugins","RequiredPluginConstructorOrName","RequiredPluginConstructor","requiredBy","_add","instantiatePlugin","loadedPlugins","PluginConstructorOrName","promises","pluginInstance","plugin1","plugin2","commandcollection_CommandCollection","_commands","translate","language","translationKey","numberOfLanguages","CKEDITOR_TRANSLATIONS","hasTranslation","RTL_LANGUAGE_CODES","locale_Locale","uiLanguage","contentLanguage","getLanguageDirection","_t","str","translatedString","languageCode","ViewConsumable","_consumables","consumables","elementConsumables","viewconsumable_ViewElementConsumables","instance","consumablesFromElement","createFrom","_canConsumeName","_test","_consume","_revert","consumableName","schema_Schema","_sourceDefinitions","_attributeProperties","SchemaContext","getDefinition","itemName","_clearCache","_compiledDefinitions","_compile","getDefinitions","_checkContextMatch","attributeName","positionOrBaseElement","elementToMerge","checkMerge","retValue","selectionOrRangeOrPosition","rangeCommonAncestor","getMinimalFlatRanges","convertToMinimalFlatRanges","_getValidRangesForRange","backwardWalker","forwardWalker","combineWalkers","removeDisallowedAttributeFromNode","positionsInRange","getPositions","compiledDefinitions","sourceRules","itemNames","compileBaseItemRule","compileAllowContentOf","compileAllowWhere","compileAllowAttributesOf","compileInheritPropertiesFrom","cleanUpAllowIn","cleanUpAllowAttributes","contextItemIndex","contextItem","getItem","allowIn","parentRule","mapContextItem","query","getNames","endsWith","sourceItemRules","itemRule","allowContentOf","allowAttributesOf","inheritTypesFrom","sourceItemRule","typeNames","copyTypes","copyProperty","inheritFrom","makeInheritAllWork","allowContentOfItemName","getAllowedChildren","allowedItem","allowWhereItemName","allowedIn","allowAttributeOfItem","inheritAttributes","inheritPropertiesOfItem","existingItems","itemToCheck","getValues","ctxItem","upcastdispatcher_UpcastDispatcher","_splitParts","_modelCursor","_convertItem","_convertChildren","_splitToAllowedParent","_getSplitParts","contextDefinition","createContextTree","store","documentFragment","_removeEmptyElements","markerElements","markerElement","currentPosition","extractMarkersFromModelFragment","nextModelCursor","allowedParent","treeWalkerValue","originalPart","splitPart","_registerSplitPair","list","anyRemoved","datacontroller_DataController","dataProcessor","processor","_checkIfRootsExists","hasContent","ignoreWhitespaces","modelElementOrFragment","viewDocumentFragment","clearBindings","elementRange","intersection","_getMarkersRelativeToElement","version","initialData","main","modelRoot","parse","newData","viewElementOrFragment","rootNames","conversion_Conversion","downcastDispatchers","upcastDispatchers","_helpers","_downcast","_createConversionHelpers","isDowncast","_upcast","alias","_getAllUpcastDefinitions","helpers","_getUpcastDefinition","upcastAlso","upcastAlsoItem","Batch","op","detachoperation_DetachOperation","operation_operation","operation_utils","rootelement_RootElement","_doc","writer_Writer","model_documentfragment","_assertWriterUsedCorrectly","isSameTree","insertoperation","addOperation","applyOperation","rangeRootPosition","usingOperation","updateMarker","addMarker","itemOrRange","setAttributeOnRange","setAttributeOnItem","removeAttributesFromItem","_addOperationForAffectedMarkers","moveoperation","flat","applyRemoveOperation","_merge","_mergeDetached","createPositionFromPath","merge","mergeoperation","renameOperation","renameoperation","firstSplitElement","firstCopyElement","splitoperation","elementOrString","shiftedRange","applyMarkerOperation","_set","markerOrName","currentMarker","_refresh","hasUsingOperationDefined","affectsDataDefined","currentRange","updatedRange","managedUsingOperations","keyOrObjectOrIterable","_setSelectionAttribute","keyOrIterableOfKeys","storeKey","_getStoreAttributeKey","_currentWriter","isAffected","elementBefore","elementAfter","affectedInLeftElement","affectedInRightElement","affectedAfterLeftElement","affectedBeforeRightElement","valueBefore","valueAfter","lastSplitPosition","attributeoperation","previousValue","rootattributeoperation","markeroperation","rootA","rootB","differ_Differ","markerCollection","_markerCollection","_changesInElement","_elementSnapshots","_changedMarkers","_changeCount","_cachedChanges","_cachedChangesWithGraveyard","_isInInsertedElement","_markRemove","_markInsert","getMarkersIntersectingRange","bufferMarkerChange","_markAttribute","sourceParentInserted","targetParentInserted","graveyardParent","mergedIntoElement","buffered","diffSet","snapshotChildren","elementChildren","_getChildrenSnapshot","_generateActionsFromChanges","_getInsertDiff","_getRemoveDiff","elementAttributes","snapshotAttributes","_getAttributesDiff","changeCount","prevDiff","thisDiff","isConsecutiveTextRemove","isConsecutiveTextAdd","isConsecutiveAttributeChange","_changesInGraveyardFilter","changeItem","_markChange","_removeAllNestedChanges","_makeSnapshot","_getChangesForElement","_handleChange","inc","nodesToHandle","old","incEnd","oldEnd","intersectionLength","howManyAfter","attributePart","diffs","snapshot","oldChildrenLength","oldChildrenHandled","repeat","posInGy","rangeInGy","History","_operations","_undoPairs","_undoneOperations","undoneOperation","undoingOperation","isInsideSurrogatePair","isHighSurrogateHalf","isLowSurrogateHalf","isInsideCombinedSymbol","isCombiningMark","graveyardName","document_Document","history","_hasSelectionChangedFromTheLastChangeBlock","createRoot","bufferOperation","_hasDocumentChangedFromTheLastChangeBlock","hasDataChanges","reset","defaultRoot","_getDefaultRoot","validateTextNodePosition","rangeBoundary","markercollection_MarkerCollection","markercollection_Marker","oldMarker","_attachLiveRange","_managedUsingOperations","_affectsData","_destroyMarker","prefix","_detachLiveRange","_liveRange","insertcontent_Insertion","canMergeWith","_filterAttributesOf","_affectedStart","_affectedEnd","parentContext","_handleNode","isFirst","isLast","removeDisallowedAttributes","nodeToSelect","_handleObject","_checkAndSplitToAllowedPosition","_mergeSiblingsOf","_handleDisallowedNode","_tryAutoparagraphing","handleNodes","livePos","liveposition","fromPosition","_setAffectedBoundaries","mergeLeft","_canMergeLeft","mergeRight","_canMergeRight","mergePosLeft","mergePosRight","livePosition","_getAllowedIn","tempPos","selRange","doNotResetEntireContent","shouldEntireContentBeReplacedWithParagraph","insertParagraph","replaceEntireContentWithParagraph","startPos","endPos","leaveUnmerged","mergeBranches","startParent","endParent","leftPos","rightPos","rangeToCheck","checkCanBeMerged","parentToRemove","collapseSelectionAt","isTextAllowed","isParagraphAllowed","shouldAutoparagraph","validSelectionRange","doNotAutoparagraph","wordBoundaryCharacters","searchEnd","getSearchRange","tryExtendingTo","setSelectionFocus","isAtWordBoundary","isAtNodeBoundary","boundaryChar","getCorrectWordBreakPosition","getCorrectPosition","offsetToCheck","removeRangeContent","parentsToCheck","itemRange","parentToCheck","removeRange","injectSelectionPostFixer","correctedRange","tryFixingRange","fixedRanges","selectionStart","selectionEnd","selectionPostFixer","originalPosition","nearestSelectionRange","fixedPosition","tryFixingCollapsedRange","isTextAllowedOnStart","isTextAllowedOnEnd","startLimitElement","endLimitElement","startIsOnBlock","endIsOnBlock","checkSelectionOnNonLimitElements","isStartObject","fixedStart","isEndObject","fixedEnd","isStartInLimit","isEndInLimit","bothInSameParent","expandStart","isInObject","expandEnd","findOutermostLimitAncestor","tryFixingNonCollapsedRage","startingNode","isLimitNode","model_Model","_pendingChanges","_validate","addChildCheck","childDefinition","_runPendingChanges","batchOrType","_execute","insertion","nodesToInsert","getSelectionRange","affectedRange","getAffectedRange","frag","commonPath","commonParent","getNodeByPath","flatSubtreeRange","appendText","leftExcessRange","rangeOrElement","intersectingMarker","ret","currentBatch","callbackReturnValue","_handleChangeBlock","editingkeystrokehandler_EditingKeystrokeHandler","editor_Editor","builtinPlugins","defaultConfig","languageConfig","state","addAlias","extraPlugins","init","readyPromise","editableuiview_EditableUIView","lang","_editableElement","_hasExternalElement","_editingView","_updateIsFocusedClasses","update","updateAfterRender","inlineeditableuiview_InlineEditableUIView","componentfactory_ComponentFactory","_components","originalName","getNormalized","editorui_EditorUI","_editableElementsMap","ckeditorInstance","_editableElements","editorUI","g","ListView","_ckeditor_ckeditor5_utils_src_focustracker__WEBPACK_IMPORTED_MODULE_1__","_focuscycler__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_utils_src_keystrokehandler__WEBPACK_IMPORTED_MODULE_3__","ListItemView","allocUnsafe","copy","BoldEditing","_attributecommand__WEBPACK_IMPORTED_MODULE_1__","setAttributeProperties","isFormatting","fontWeight","ItalicEditing","font-style","ChangeBuffer","limit","isLocked","_changeCallback","_batch","_reset","_selectionChangeCallback","createBatch","ignoreLock","inputcommand_InputCommand","undoStepSize","_buffer","_batches","textInsertions","resultRange","isCollapsedRange","lock","unlock","injectUnsafeKeystrokesHandling","latestCompositionSelection","inputCommand","handleUnsafeKeystroke","isSelectionUnchanged","keyData","safeKeycodes","isSafeKeystroke","deleteSelectionContent","isFlatSelection","getSingleTextNodeChange","output","lastOperation","pushLast","isContinuationOf","expected","diffToChanges","compareChildNodes","oldChild","newChild","injecttypingmutationshandling_MutationHandler","mutations","containerChildrenMutated","_handleContainerChildrenMutations","_handleTextMutation","_handleTextNodeInsertion","mutationsCommonAncestor","commonAncestor","getMutationsContainer","domMutationCommonAncestor","freshDomConverter","modelFromCurrentDom","currentModel","modelFromDomChildren","currentModelChildren","lastDomChild","lastCurrentChild","isSafeForTextMutation","diffResult","firstChangeAt","insertions","deletions","calculateChanges","modelSelectionRange","insertText","viewPos","modelPos","insertedText","lastChangeAt","input_Input","handle","injectTypingMutationsHandling","deletecommand_DeleteCommand","_shouldEntireContentBeReplacedWithParagraph","sequence","_replaceEntireContentWithParagraph","limitElementFirstChild","deleteobserver_DeleteObserver","fireViewDeleteEvent","originalEvent","domeventdata","hasWordModifier","inputType","selectionToRemove","delete_Delete","deleteCommandParams","domSelectionAfterDeletion","typing_Typing","nooperation_NoOperation","transformations","setTransformation","OperationA","OperationB","transformationFunction","aGroup","noUpdateTransformation","getTransformation","transformSets","operationsA","operationsB","contextFactory","transform_ContextFactory","useRelations","forceWeakRemove","setOriginalOperations","originalOperations","nextTransformIndex","nextBaseVersionA","nextBaseVersionB","originalOperationsACount","originalOperationsBCount","opA","indexB","opB","newOpsA","getContext","newOpsB","updateRelation","newOpA","padWithNoOps","brokenOperationsACount","brokenOperationsBCount","updateBaseVersions","_history","_useRelations","_forceWeakRemove","_relations","takeFrom","originalOperation","_setRelation","affectedLeft","affectedRight","side","wasInLeftElement","wasStartBeforeMergedElement","wasEndBeforeMergedElement","wasInRightElement","aIsStrong","aWasUndone","_wasUndone","bWasUndone","abRelation","_getRelation","baRelation","originalOp","wasUndone","isUndoneOperation","origB","undoneB","getUndoneOperation","origA","relationsA","relation","_getComplementaryAttributeOperations","insertOperation","insertValue","_moveTargetIntoMovedRange","_makeMoveOperationsFromRanges","hasSameParentAs","moveOp","_breakRangeByMoveOperation","aNewRange","aToGraveyard","bToGraveyard","removedRange","mergeInside","mergeSplittingElement","getReversed","aCompB","shouldSpread","rightRange","movesGraveyardElement","gyMoveSource","splitNodesMoveSource","gyMoveTarget","gyMove","splitNodesMoveTargetPath","splitNodesMoveTarget","splitNodesMove","renamePath","splitPath","additionalSplit","rangeToMove","gyElementMoved","newParentPosition","newTargetPath","howManyRemoved","aInGraveyard","bInGraveyard","newPositionPath","basecommand_BaseCommand","_createdBatches","docSelection","selectionRanges","transformSelectionRange","batchToUndo","undoingBatch","operationsToUndo","operationToUndo","nextBaseVersion","historyOperations","getOperations","reversedOperations","setOperationAsUndone","getTransformedByOperations","undocommand_UndoCommand","batchIndex","_undo","_restoreSelection","redocommand_RedoCommand","redoingBatch","undoediting_UndoEditing","_batchRegistry","_undoCommand","_redoCommand","isRedoBatch","isUndoBatch","addBatch","clearStack","undoneBatch","entercommand_EnterCommand","isSelectionEmpty","attributesToCopy","splitBlock","isContainedWithinOneElement","enterBlock","splitPos","enter_Enter","enterobserver","enableToolbarKeyboardFocus","origin","originKeystrokeHandler","originFocusTracker","beforeFocus","afterBlur","normalizeToolbarConfig","shiftentercommand_ShiftEnterCommand","insertBreak","softBreakAction","anchorPos","isInsideLimitElement","breakLineElement","shiftenter_ShiftEnter","essentials_Essentials","typing","headingcommand_HeadingCommand","modelElements","heading","checkCanBecomeHeading","headingediting_HeadingEditing","defaultModelElement","option","_addDefaultH1Conversion","enterCommand","_ckeditor_ckeditor5_utils_src_dom_setdatainelement__WEBPACK_IMPORTED_MODULE_1__","ElementApiMixin","attachToForm","updateSourceElement","form","originalSubmit","onSubmit","submit","getLocalizedOptions","localizedTitles","Paragraph","Heading 1","Heading 2","Heading 3","Heading 4","Heading 5","Heading 6","headingui_HeadingUI","src_utils","defaultTitle","dropdownTooltip","titles","itemDefinitions","headingCommand","paragraphCommand","withText","commandValue","isOn","areEnabled","para","whichModel","heading_Heading","headingediting","BASE64_HEADER_REG_EXP","fileuploader_FileUploader","fileOrData","apiAddress","_isBase64","base64","sliceSize","contentType","base64Data","atob","byteArrays","byteNumbers","charCodeAt","Blob","_base64ToBlob","_token","_apiAddress","_prepareRequest","_attachXHRListeners","setRequestHeader","onError","statusCode","xhrResponse","formData","DEFAULT_OPTIONS","refreshInterval","autoRefresh","token_Token","tokenUrlOrRefreshToken","initValue","tokenUrl","defaultRefreshToken","_options","_startRefreshing","_refreshToken","_stopRefreshing","_refreshInterval","token_token","cloudservices_CloudServices","optionName","Token","cloudservicesuploadadapter_CloudServicesUploadAdapter","cloudServices","uploadUrl","_uploadGateway","_UploadGateway","Adapter","uploadGateway","fileUploader","easyimage_EasyImage","src_image","imageupload","numberedlist","bulletedlist","listui_ListUI","list_List","listediting","indentcommand_IndentCommand","indentDirection","_indentBy","itemsToChange","lastItem","modelViewInsertion","modelViewChangeType","listName","modelViewMergeAfterChangeType","modelViewSplitOnInsert","removeStart","removeEnd","previousList","mergePos","modelViewMergeAfter","viewItemPrev","viewItemNext","viewModelConverter","getIndent","listItemModel","convertedChild","wasSplit","findNextListItem","viewToModelListItemChildrenConverter","cleanList","isList","cleanListItem","foundList","firstNode","modelToViewPosition","topmostViewList","modelIndentPasteFixer","indentChange","hoistNestedLists","nextIndent","modelRemoveStartPosition","viewRemoveStartPosition","viewRemovedItem","prevModelItem","foo","prevIndent","prevViewList","listediting_ListEditing","itemToListHead","applied","_addListToFix","innerItem","listHead","_fixListIndents","_fixListTypes","maxIndent","fixBy","typesStack","modelChangePostFixer","registerViewToModelLength","getViewListItemLength","modelNode","modelLength","viewToModelPosition","viewListPrev","modelViewChangeIndent","modelViewRemove","listcommand","firstPosition","getCommandExecuter","outdent","registerChildCommand","TableToolbar","_utils__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_widget_src_widgettoolbarrepository__WEBPACK_IMPORTED_MODULE_2__","widgetToolbarRepository","tableContentToolbarItems","tableToolbarItems","upcastTable","viewTable","rows","headingRows","headingColumns","tableMeta","headRows","bodyRows","firstTheadElement","tableChild","trs","tr","headingCols","scanRowForHeadingColumns","scanTable","table","row","upcastTableCell","viewTableCell","th","TableWalker","startRow","endRow","includeSpanned","column","_skipRows","_row","_column","_cellIndex","_spannedCells","_nextCellAtColumn","_isOverEndRow","cell","skipCurrentValue","outValue","_isSpanned","_getSpanned","_shouldSkipRow","_shouldSkipColumn","_formatOutValue","colspan","rowspan","_recordSpans","isSpanned","cellIndex","rowIsBelowStartRow","rowIsMarkedAsSkipped","columnToUpdate","_markSpannedCell","rowToUpdate","downcastInsertTable","asWidget","figureElement","tableElement","tableWidget","ckeditor5_table_src_utils","tableWalker","tableAttributes","viewRows","tableWalkerValue","tableSection","getOrCreateTableSection","getSectionName","tableRow","trElement","createTr","createViewTableCellElement","downcastInsertRow","getViewTable","downcastInsertCell","rowIndex","downcastTableHeadingRowsChange","oldRows","newRows","rowsToMove","isBetween","moveViewRowsToTableSection","renameViewTableCell","removeTableSectionIfEmpty","renameViewTableCellIfRequired","lower","upper","downcastTableHeadingColumnsChange","oldColumns","newColumns","lastColumnToCheck","desiredCellElementName","viewCell","renamedCell","createEditableElement","getCellElementName","cellElementName","cellElement","isSingleParagraph","hasAnyAttribute","innerParagraph","paragraphInsertPosition","fakeParagraph","sectionName","viewTableSection","getExistingTableSectionElement","tableChildElement","createTableSection","viewTableRow","inserttablecommand_InsertTableCommand","validParent","getInsertTableParent","tableUtils","columns","createTable","insertrowcommand_InsertRowCommand","order","tableParent","insertRows","at","insertcolumncommand_InsertColumnCommand","getCellLocation","insertColumns","splitcellcommand_SplitCellCommand","isHorizontally","splitCellHorizontally","splitCellVertically","mergecellcommand_MergeCellCommand","isHorizontal","cellToMerge","_getMergeableCell","isMergeNext","cellToExpand","cellToRemove","removedTableCellRow","mergeTableCells","spanAttribute","cellSpan","cellToMergeSpan","removedRowIndex","overlapsRemovedRow","removeEmptyRow","horizontalCell","cellOnLeft","cellOnRight","leftCellColumn","rightCellColumn","leftCellSpan","getHorizontalCell","currentCellRowSpan","rowOfCellToMerge","tableMap","mergeColumn","cellToMergeData","getVerticalCell","span","removerowcommand_RemoveRowCommand","currentRow","cellsToMove","rowspanToSet","targetRow","previousCell","cellToMove","removecolumncommand_RemoveColumnCommand","getColumns","removedColumn","setheaderrowcommand_SetHeaderRowCommand","isInTable","_isInHeading","currentHeadingRows","selectionRow","headingRowsToSet","cellsToSplit","getOverlappingCells","splitHorizontally","newRowspan","spanToSet","columnIndex","tableCellPosition","setheadercolumncommand_SetHeaderColumnCommand","selectionColumn","headingColumnsToSet","tableutils_TableUtils","createEmptyRows","rowsToInsert","tableIterator","cellsToInsert","columnsToInsert","tableColumns","createCells","skipRow","numberOfCells","newCellsSpan","updatedSpan","breakSpanEvenly","newCellsAttributes","splitCellColumn","cellsToUpdate","splitCellRow","cellColumn","tableCellToInsert","cells","injectTableLayoutPostFixer","analyzedTables","isTableAttributeEntry","fixTableCellsRowspan","fixTableRowsSizes","tableLayoutPostFixer","cellsToTrim","maxRows","isInHeader","rowLimit","findCellsToTrim","rowsLengths","lengths","getRowsLengths","tableSize","maxColumns","isAttributeType","injectTableCellParagraphPostFixer","fixTable","fixTableRow","fixTableCellContent","checkTableCellChange","tableCellContentsPostFixer","textNodes","injectTableCellRefreshPostFixer","cellsToRefresh","checkRefresh","refreshItem","tableCellRefreshPostFixer","attributesCount","tableediting_TableEditing","_handleTabOnSelectedTable","_getTabHandler","currentRowIndex","currentCellIndex","isFirstCellInRow","isLastCellInRow","isLastRow","cellToFocus","nextRow","previousRow","inserttableview_InsertTableView","boxView","inserttableview_TableSizeGridBoxView","_highlightGridBoxes","mouseover","icons_table","table_column","table_row","table_merge_cell","tableui_TableUI","isContentLtr","dropdown_utils","insertTableView","bindIsOn","_prepareDropdown","addListOption","src_model","table_Table","ClickObserver","_domeventobserver__WEBPACK_IMPORTED_MODULE_0__","linkformview_LinkFormView","urlInputView","_createUrlInput","_manualDecoratorSwitches","_createManualDecoratorSwitches","_createFormChildren","classList","accumulator","switchButton","switches","additionalButtonsView","unlink","pencil","linkactionsview_LinkActionsView","previewButtonView","_createPreviewButton","unlinkButtonView","editButtonView","icons_link","linkKeystroke","linkui_LinkUI","clickobserver","actionsView","_createActionsView","formView","_createFormView","_createToolbarLinkButton","_enableUserBalloonInteractions","unlinkCommand","_addFormView","_hideUI","getDecoratorSwitchesState","_closeFormView","_showUI","_getSelectedLinkElement","_areActionsVisible","_isUIVisible","_isUIInPanel","_areActionsInPanel","_getBalloonPositionData","_isFormInPanel","restoreManualDecoratorStates","_removeFormView","forceVisible","_addActionsView","_startUpdatingUI","prevSelectedLink","prevSelectionParent","getSelectionParent","selectedLink","targetLink","findLinkElementAncestor","startLink","endLink","link_Link","linkediting","_arrayMap","INFINITY","symbolToString","_baseToString","baseToString","isSymbol","modelToViewUrlAttributeConverter","registry","mediaViewElement","getMediaViewElement","createMediaFigureElement","getSelectedMediaModelWidget","insertMedia","mediaElement","mediaembedcommand_MediaEmbedCommand","selectedMedia","media_placeholder","mediaPlaceholderIconViewBox","mediaregistry_MediaRegistry","providers","extraProviders","removedProviders","removeProviders","providerDefinitions","provider","_getMedia","getViewElement","mediaregistry_Media","previewRenderer","html","subPattern","_getUrlMatches","rawUrl","_getValidUrl","_match","_previewRenderer","renderForEditingView","renderMediaPreview","mediaHtml","_getPreviewHtml","_getPlaceholderHtml","tooltipview","outerHTML","mediaembedediting_MediaEmbedEditing","toMediaWidget","viewMedia","hasMedia","data-oembed-url","URL_REGEXP","automediaembed_AutoMediaEmbed","_timeoutId","_positionToInsert","leftLivePosition","rightLivePosition","_embedMediaBetweenPositions","leftPosition","rightPosition","mediaRegistry","urlRange","mediaformview_MediaFormView","validators","_validators","resetFormStatus","validator","_urlInputViewInfoDefault","_urlInputViewInfoTip","media","mediaembedui_MediaEmbedUI","getFormValidators","_setUpDropdown","_setUpForm","closeUI","isValid","mediaembed_MediaEmbed","getLastTextLine","rangeText","multicommand_MultiCommand","_childCommands","_getFirstEnabledCommand","indentediting_IndentEditing","indentui_IndentUI","localizedIndentIcon","localizedOutdentIcon","_defineButton","indent_Indent","ImageToolbar","_image_utils__WEBPACK_IMPORTED_MODULE_1__","imagestylecommand_ImageStyleCommand","defaultStyle","isDefault","attributeValue","getStyleByName","object_full_width","object_left","object_center","object_right","defaultStyles","full","alignLeft","alignCenter","alignRight","defaultIcons","center","normalizeImageStyles","configuredStyles","_normalizeStyle","extendedStyle","imagestyleediting_ImageStyleEditing","modelToViewConverter","newStyle","oldStyle","modelToViewStyleAttribute","filteredStyles","viewFigureElement","modelImageElement","viewToModelStyleAttribute","imagestyleui_ImageStyleUI","localizedDefaultStylesTitles","Full size image","Side image","Left aligned image","Centered image","Right aligned image","translatedStyles","translateStyles","componentName","imagestyle_ImageStyle","blockquotecommand_BlockQuoteCommand","blocksToQuote","findQuote","checkCanBeQuoted","_applyQuote","_removeQuote","getRangesOfBlockGroups","groupRange","positionBefore","quotesToMerge","quote","currentQuote","nextQuote","elementOrPosition","nextBlock","isBQAllowed","isBlockAllowedInBQ","blockquoteediting_BlockQuoteEditing","blockquoteui_BlockQuoteUI","blockquote_BlockQuote","getCaptionFromImage","imageModelElement","matchImageCaption","imagecaptionediting_ImageCaptionEditing","_insertMissingModelCaptionElement","captionModelToView","createCaptionForEditing","placeholderText","captionElementCreator","_fixCaptionVisibility","_updateCaptionVisibility","lastCaption","_lastSelectedCaption","viewCaption","modelCaption","getParentCaption","showCaption","hideCaptionIfEmpty","viewModified","nodeFinder","imagesWithoutCaption","nestedItem","appendElement","captionElement","insertViewCaptionAndBind","caption","imagecaption_ImageCaption","ClassicEditor","_ckeditor_ckeditor5_editor_classic_src_classiceditor__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_essentials_src_essentials__WEBPACK_IMPORTED_MODULE_1__","_ckeditor_ckeditor5_adapter_ckfinder_src_uploadadapter__WEBPACK_IMPORTED_MODULE_2__","_ckeditor_ckeditor5_autoformat_src_autoformat__WEBPACK_IMPORTED_MODULE_3__","_ckeditor_ckeditor5_basic_styles_src_bold__WEBPACK_IMPORTED_MODULE_4__","_ckeditor_ckeditor5_basic_styles_src_italic__WEBPACK_IMPORTED_MODULE_5__","_ckeditor_ckeditor5_block_quote_src_blockquote__WEBPACK_IMPORTED_MODULE_6__","_ckeditor_ckeditor5_ckfinder_src_ckfinder__WEBPACK_IMPORTED_MODULE_7__","_ckeditor_ckeditor5_easy_image_src_easyimage__WEBPACK_IMPORTED_MODULE_8__","_ckeditor_ckeditor5_heading_src_heading__WEBPACK_IMPORTED_MODULE_9__","_ckeditor_ckeditor5_image_src_image__WEBPACK_IMPORTED_MODULE_10__","_ckeditor_ckeditor5_image_src_imagecaption__WEBPACK_IMPORTED_MODULE_11__","_ckeditor_ckeditor5_image_src_imagestyle__WEBPACK_IMPORTED_MODULE_12__","_ckeditor_ckeditor5_image_src_imagetoolbar__WEBPACK_IMPORTED_MODULE_13__","_ckeditor_ckeditor5_image_src_imageupload__WEBPACK_IMPORTED_MODULE_14__","_ckeditor_ckeditor5_indent_src_indent__WEBPACK_IMPORTED_MODULE_15__","_ckeditor_ckeditor5_link_src_link__WEBPACK_IMPORTED_MODULE_16__","_ckeditor_ckeditor5_list_src_list__WEBPACK_IMPORTED_MODULE_17__","_ckeditor_ckeditor5_media_embed_src_mediaembed__WEBPACK_IMPORTED_MODULE_18__","_ckeditor_ckeditor5_paragraph_src_paragraph__WEBPACK_IMPORTED_MODULE_19__","_ckeditor_ckeditor5_paste_from_office_src_pastefromoffice__WEBPACK_IMPORTED_MODULE_20__","_ckeditor_ckeditor5_table_src_table__WEBPACK_IMPORTED_MODULE_21__","_ckeditor_ckeditor5_table_src_tabletoolbar__WEBPACK_IMPORTED_MODULE_22__","contentToolbar","blockautoformatediting_BlockAutoformatEditing","callbackOrCommand","inlineautoformatediting_InlineAutoformatEditing","testRegexpOrCallback","attributeOrCallback","regExp","testCallback","formatCallback","format","1","leftDel","2","3","rightDel","delStart","delEnd","rangesToFormat","validRanges","getlasttextline","testOutput","testOutputToRanges","rangesToRemove","arrays","autoformat_Autoformat","_addListAutoformats","_addBasicStylesAutoformats","_addHeadingAutoformats","_addBlockQuoteAutoformats","boldCallback","getCallbackFunctionForInlineAutoformat","italicCallback","codeCallback","level","ElementReplacer","_replacedElements","transformListItemLikeElementsIntoLists","itemLikeElements","itemLikeElementsMatcher","mso-list","itemData","getListItemData","findAllItemLikeElements","currentList","itemLikeElement","previousItem","currentItem","isNewListNeeded","listStyle","listLikeItem","listStyleTypeRegex","listStyleMatch","listStyleType","listStyleTypeMatch","detectListStyle","insertNewEmptyList","bulletMatcher","removeBulletElement","transformElementIntoListItem","googleDocsMatch","googledocsnormalizer_GoogleDocsNormalizer","htmlString","removeBoldWrapper","unwrapParagraphInListItem","normalizeSafariSpaceSpans","parseHtml","domParser","normalizedHtml","normalizeSpacing","cleanContentAfterBody","htmlDocument","innerTextLength","normalizeSpacerunSpans","bodyString","bodyView","documentToView","stylesObject","styleTags","getElementsByTagName","sheet","cssRules","extractStyles","replaceImagesSourceWithBase64","rtfData","upcastWriter","shapesIds","imageElementsMatcher","imgs","shapes","shape","removeAllImgElementsRepresentingShapes","shapeElementsMatcher","prevSiblingName","findAllShapesIds","removeAllShapeElements","findAllImageElementsWithLocalSource","imageElements","imagesHexSources","newSrc","_convertHexToBase64","hex","replaceImagesFileSourceWithInlineRepresentation","regexPictureHeader","regexPicture","imageType","extractImageDataFromRtf","hexString","btoa","msWordMatch1","msWordMatch2","mswordnormalizer_MSWordNormalizer","pastefromoffice_PasteFromOffice","normalizers","isTransformedWithPasteFromOffice","activeNormalizer","normalizer","isActive","browse_files","ckfinderui_CKFinderUI","ckfindercommand_CKFinderCommand","imageCommand","openerMethod","chooseFiles","originalOnInit","onInit","finder","toArray","links","linkFile","getUrl","imagesUrls","request","insertImages","resizedUrl","CKFinder","urls","ckfinderediting_CKFinderEditing","ckfinder_CKFinder","uploadadapter","classiceditorui_ClassicEditorUI","editorui","_toolbarConfig","normalizetoolbarconfig","_elementReplacer","elementreplacer","replacementElement","editingRoot","setEditableElement","attachDomRoot","_initPlaceholder","_initToolbar","restore","detachDomRoot","stickyPanel","viewportTopOffset","enabletoolbarkeyboardfocus","boxededitoruiview_BoxedEditorUIView","editoruiview","_voiceLabelView","_createVoiceLabel","voiceLabel","labelview","stickypanelview_StickyPanelView","_contentPanelPlaceholder","isSticky","_panelRect","_contentPanel","_hasViewportTopOffset","_isStickyToTheLimiter","limiterBottomOffset","marginLeft","_checkIfShouldBeSticky","_limiterRect","_marginLeft","classiceditoruiview_ClassicEditorUIView","inlineeditableuiview","classiceditor_ClassicEditor","editor_editor","sourceElementOrData","attachtoform","getdatafromelement","getInitialData","dataapimixin","elementapimixin","_baseClone_js__WEBPACK_IMPORTED_MODULE_0__","lodash_es_now","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","lodash_es_toNumber","isBinary","FUNC_ERROR_TEXT","nativeMin","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","TypeError","invokeFunc","time","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","TextWatcher","_utils_getlasttextline__WEBPACK_IMPORTED_MODULE_2__","hasMatch","_startListening","_evaluateTextBeforeSelection","suffix","rangeBeforeSelection","textHasMatch","eventData","mentioncommand_MentionCommand","mentionData","mention","mentionID","mentionText","_addMentionAttributes","_text","currentAttributes","attributesWithMention","mentionediting_MentionEditing","_toMentionAttribute","createViewMentionElement","preventPartialMentionDowncast","wasChanged","nodeAfterInsertedTextNode","checkAndFix","insertedNode","nodeAfterInserted","removePartialMentionPostFixer","isBrokenMentionNode","extendAttributeOnMentionPostFixer","shouldNotTypeWithMentionAt","selectionMentionAttributePostFixer","baseMentionData","_uid","viewElementOrMention","dataMention","data-mention","mentionsview_MentionsView","selected","indexToGet","highlight","_isItemVisibleInScrolledArea","offsetTop","domwrapperview_DomWrapperView","mentionlistitemview_MentionListItemView","VERTICAL_SPACING","mentionui_MentionUI","_mentionsView","_createMentionView","_mentionsConfigurations","feeds","isHandledKey","selectNext","selectPrevious","executeSelected","_hideUIAndRemoveMarker","mentionDescription","feed","minimumCharacters","feedCallback","createFeedCallback","watcher","_setupTextWatcherForFeed","itemRenderer","mentionsView","_renderItem","mentionMarker","getStart","feedText","textwatcher","createRegExp","createTestCallback","hasMention","getFeedText","matchedTextLength","_getFeed","feedItem","markerMarker","_getBalloonPanelPositionData","selectFirst","removeMarker","_getItemRenderer","renderResult","preferredPosition","caret_se","caret_ne","caret_sw","caret_nw","getBalloonPanelPositions","numberOfCharacters","feedItems","filteredItems","mention_Mention","_ckeditor_ckeditor5_build_classic_src_ckeditor__WEBPACK_IMPORTED_MODULE_0__","_ckeditor_ckeditor5_mention_src_mention__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"features/build-mention-source/snippet.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 356);\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/ckeditorerror\n */\n\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL =\n\t'https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html';\n\n/**\n * The CKEditor error class.\n *\n * You should throw `CKEditorError` when:\n *\n * * An unexpected situation occurred and the editor (most probably) will not work properly. Such exception will be handled\n * by the {@link module:watchdog/watchdog~Watchdog watchdog} (if it is integrated),\n * * If the editor is incorrectly integrated or the editor API is used in the wrong way. This way you will give\n * feedback to the developer as soon as possible. Keep in mind that for common integration issues which should not\n * stop editor initialization (like missing upload adapter, wrong name of a toolbar component) we use `console.warn()` with\n * {@link module:utils/ckeditorerror~attachLinkToDocumentation `attachLinkToDocumentation()`}\n * to improve developers experience and let them see the working editor as soon as possible.\n *\n *\t\t/**\n *\t\t * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\n *\t\t *\n *\t\t * @error plugin-load\n *\t\t * @param pluginName The name of the plugin that could not be loaded.\n *\t\t * @param moduleName The name of the module which tried to load this plugin.\n *\t\t * /\n *\t\tthrow new CKEditorError( 'plugin-load: It was not possible to load the \"{$pluginName}\" plugin in module \"{$moduleName}', {\n *\t\t\tpluginName: 'foo',\n *\t\t\tmoduleName: 'bar'\n *\t\t} );\n *\n * @extends Error\n */\nexport default class CKEditorError extends Error {\n\t/**\n\t * Creates an instance of the CKEditorError class.\n\t *\n\t * @param {String} message The error message in an `error-name: Error message.` format.\n\t * During the minification process the \"Error message\" part will be removed to limit the code size\n\t * and a link to this error documentation will be added to the `message`.\n\t * @param {Object|null} context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}\n\t * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also\n\t * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).\n\t * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility\n\t * to check if the object works as the context.\n\t * @param {Object} [data] Additional data describing the error. A stringified version of this object\n\t * will be appended to the error message, so the data are quickly visible in the console. The original\n\t * data object will also be later available under the {@link #data} property.\n\t */\n\tconstructor( message, context, data ) {\n\t\tmessage = attachLinkToDocumentation( message );\n\n\t\tif ( data ) {\n\t\t\tmessage += ' ' + JSON.stringify( data );\n\t\t}\n\n\t\tsuper( message );\n\n\t\t/**\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = 'CKEditorError';\n\n\t\t/**\n\t\t * A context of the error by which the Watchdog is able to determine which editor crashed.\n\t\t *\n\t\t * @type {Object|null}\n\t\t */\n\t\tthis.context = context;\n\n\t\t/**\n\t\t * The additional error data passed to the constructor. Undefined if none was passed.\n\t\t *\n\t\t * @type {Object|undefined}\n\t\t */\n\t\tthis.data = data;\n\t}\n\n\t/**\n\t * Checks if the error is of the `CKEditorError` type.\n\t */\n\tis( type ) {\n\t\treturn type === 'CKEditorError';\n\t}\n\n\t/**\n\t * A utility that ensures the the thrown error is a {@link module:utils/ckeditorerror~CKEditorError} one.\n\t * It is uesful when combined with the {@link module:watchdog/watchdog~Watchdog} feature, which can restart the editor in case\n\t * of a {@link module:utils/ckeditorerror~CKEditorError} error.\n\t *\n\t * @param {Error} err An error.\n\t * @param {Object} context An object conected through properties with the editor instance. This context will be used\n\t * by the watchdog to verify which editor should be restarted.\n\t */\n\tstatic rethrowUnexpectedError( err, context ) {\n\t\tif ( err.is && err.is( 'CKEditorError' ) ) {\n\t\t\tthrow err;\n\t\t}\n\n\t\t/**\n\t\t * An unexpected error occurred inside the CKEditor 5 codebase. The `error.data.originalError` property\n\t\t * shows the original error properties.\n\t\t *\n\t\t * This error is only useful when the editor is initialized using the {@link module:watchdog/watchdog~Watchdog} feature.\n\t\t * In case of such error (or any {@link module:utils/ckeditorerror~CKEditorError} error) the wathcdog should restart the editor.\n\t\t *\n\t\t * @error unexpected-error\n\t\t */\n\t\tthrow new CKEditorError( 'unexpected-error', context, {\n\t\t\toriginalError: {\n\t\t\t\tmessage: err.message,\n\t\t\t\tstack: err.stack,\n\t\t\t\tname: err.name\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Attaches the link to the documentation at the end of the error message. Use whenever you log a warning or error on the\n * console. It is also used by {@link module:utils/ckeditorerror~CKEditorError}.\n *\n *\t\t /**\n *\t\t  * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t  * name does not exist so it was omitted when rendering the toolbar.\n *\t\t  *\n *\t\t  * @error toolbarview-item-unavailable\n *\t\t  * @param {String} name The name of the component.\n *\t\t  * /\n *\t\t console.warn( attachLinkToDocumentation(\n *\t\t \t'toolbarview-item-unavailable: The requested toolbar item is unavailable.' ), { name } );\n *\n * @param {String} message Message to be logged.\n * @returns {String}\n */\nexport function attachLinkToDocumentation( message ) {\n\tconst matchedErrorName = message.match( /^([^:]+):/ );\n\n\tif ( !matchedErrorName ) {\n\t\treturn message;\n\t}\n\n\treturn message + ` Read more: ${ DOCUMENTATION_URL }#error-${ matchedErrorName[ 1 ] }\\n`;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/plugin\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor plugin classes.\n *\n * @implements module:core/plugin~PluginInterface\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * Note that most editors implement the {@link module:core/editor/editorwithui~EditorWithUI} interface in addition\n\t\t * to the base {@link module:core/editor/editor~Editor} interface. However, editors with an external UI\n\t\t * (i.e. Bootstrap-based) or a headless editor may not implement the {@link module:core/editor/editorwithui~EditorWithUI}\n\t\t * interface.\n\t\t *\n\t\t * Because of above, to make plugins more universal, it is recommended to split features into:\n\t\t *  - The \"editing\" part that only uses the {@link module:core/editor/editor~Editor} interface.\n\t\t *  - The \"UI\" part that uses both the {@link module:core/editor/editor~Editor} interface and\n\t\t *  the {@link module:core/editor/editorwithui~EditorWithUI} interface.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n}\n\nmix( Plugin, ObservableMixin );\n\n/**\n * The base interface for CKEditor plugins.\n *\n * In its minimal form a plugin can be a simple function that accepts {@link module:core/editor/editor~Editor the editor}\n * as a parameter:\n *\n *\t\t// A simple plugin that enables a data processor.\n *\t\tfunction MyPlugin( editor ) {\n *\t\t\teditor.data.processor = new MyDataProcessor();\n *\t\t}\n *\n * In most cases however, you will want to inherit from the {@link module:core/plugin~Plugin} class which implements the\n * {@link module:utils/observablemixin~ObservableMixin} and is, therefore, more convenient:\n *\n *\t\tclass MyPlugin extends Plugin {\n *\t\t\tinit() {\n *\t\t\t\t// `listenTo()` and `editor` are available thanks to `Plugin`.\n *\t\t\t\t// By using `listenTo()` you will ensure that the listener is removed when\n *\t\t\t\t// the plugin is destroyed.\n *\t\t\t\tthis.listenTo( this.editor.data, 'ready', () => {\n *\t\t\t\t\t// Do something when the data is ready.\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n * The plugin can also implement methods (e.g. {@link module:core/plugin~PluginInterface#init `init()`} or\n * {@link module:core/plugin~PluginInterface#destroy `destroy()`}) which, when present, will be used to properly\n * initialize and destroy the plugin.\n *\n * **Note:** When defined as a plain function, the plugin acts as a constructor and will be\n * called in parallel with other plugins' {@link module:core/plugin~PluginInterface#constructor constructors}.\n * This means the code of that plugin will be executed **before** {@link module:core/plugin~PluginInterface#init `init()`} and\n * {@link module:core/plugin~PluginInterface#afterInit `afterInit()`} methods of other plugins and, for instance,\n * you cannot use it to extend other plugins' {@glink framework/guides/architecture/editing-engine#schema schema}\n * rules as they are defined later on during the `init()` stage.\n *\n * @interface PluginInterface\n */\n\n/**\n * Creates a new plugin instance. This is the first step of the plugin initialization.\n * See also {@link #init} and {@link #afterInit}.\n *\n * A plugin is always instantiated after its {@link module:core/plugin~PluginInterface.requires dependencies} and the\n * {@link #init} and {@link #afterInit} methods are called in the same order.\n *\n * Usually, you will want to put your plugin's initialization code in the {@link #init} method.\n * The constructor can be understood as \"before init\" and used in special cases, just like\n * {@link #afterInit} serves the special \"after init\" scenarios (e.g.the code which depends on other\n * plugins, but which does not {@link module:core/plugin~PluginInterface.requires explicitly require} them).\n *\n * @method #constructor\n * @param {module:core/editor/editor~Editor} editor\n */\n\n/**\n * An array of plugins required by this plugin.\n *\n * To keep the plugin class definition tight it is recommended to define this property as a static getter:\n *\n *\t\timport Image from './image.js';\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ Image ];\n *\t\t\t}\n *\t\t}\n *\n * @static\n * @readonly\n * @member {Array.<Function>|undefined} module:core/plugin~PluginInterface.requires\n */\n\n/**\n * An optional name of the plugin. If set, the plugin will be available in\n * {@link module:core/plugincollection~PluginCollection#get} by its\n * name and its constructor. If not, then only by its constructor.\n *\n * The name should reflect the constructor name.\n *\n * To keep the plugin class definition tight it is recommended to define this property as a static getter:\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get pluginName() {\n *\t\t\t\treturn 'ImageCaption';\n *\t\t\t}\n *\t\t}\n *\n * Note: The native `Function.name` property could not be used to keep the plugin name because\n * it will be mangled during code minification.\n *\n * Naming a plugin is necessary to enable removing it through the\n * {@link module:core/editor/editorconfig~EditorConfig#removePlugins `config.removePlugins`} option.\n *\n * @static\n * @readonly\n * @member {String|undefined} module:core/plugin~PluginInterface.pluginName\n */\n\n/**\n * The second stage (after plugin {@link #constructor}) of plugin initialization.\n * Unlike the plugin constructor this method can be asynchronous.\n *\n * A plugin's `init()` method is called after its {@link module:core/plugin~PluginInterface.requires dependencies} are initialized,\n * so in the same order as constructors of these plugins.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #init\n * @returns {null|Promise}\n */\n\n/**\n * The third (and last) stage of plugin initialization. See also {@link #constructor} and {@link #init}.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #afterInit\n * @returns {null|Promise}\n */\n\n/**\n * Destroys the plugin.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #destroy\n * @returns {null|Promise}\n */\n\n/**\n * Array of loaded plugins.\n *\n * @typedef {Array.<module:core/plugin~PluginInterface>} module:core/plugin~LoadedPlugins\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/range\n */\n\nimport Position from './position';\nimport TreeWalker from './treewalker';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\n/**\n * Represents a range in the model tree.\n *\n * A range is defined by its {@link module:engine/model/range~Range#start} and {@link module:engine/model/range~Range#end}\n * positions.\n *\n * You can create range instances via its constructor or the `createRange*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n */\nexport default class Range {\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t */\n\tconstructor( start, end = null ) {\n\t\t/**\n\t\t * Start position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position}\n\t\t */\n\t\tthis.start = Position._createAt( start );\n\n\t\t/**\n\t\t * End position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position}\n\t\t */\n\t\tthis.end = end ? Position._createAt( end ) : Position._createAt( start );\n\n\t\t// If the range is collapsed, treat in a similar way as a position and set its boundaries stickiness to 'toNone'.\n\t\t// In other case, make the boundaries stick to the \"inside\" of the range.\n\t\tthis.start.stickiness = this.isCollapsed ? 'toNone' : 'toNext';\n\t\tthis.end.stickiness = this.isCollapsed ? 'toNone' : 'toPrevious';\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n\t * them together with additional information like length or {@link module:engine/model/position~Position positions},\n\t * grouped as {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t * It iterates over all {@link module:engine/model/textproxy~TextProxy text contents} that are inside the range\n\t * and all the {@link module:engine/model/element~Element}s that are entered into when iterating over this range.\n\t *\n\t * This iterator uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range\n\t * and `ignoreElementEnd` option set to `true`.\n\t *\n\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\n\t}\n\n\t/**\n\t * Returns whether the range is collapsed, that is if {@link #start} and\n\t * {@link #end} positions are equal.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.start.isEqual( this.end );\n\t}\n\n\t/**\n\t * Returns whether this range is flat, that is if {@link #start} position and\n\t * {@link #end} position are in the same {@link module:engine/model/position~Position#parent}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isFlat() {\n\t\tconst startParentPath = this.start.getParentPath();\n\t\tconst endParentPath = this.end.getParentPath();\n\n\t\treturn compareArrays( startParentPath, endParentPath ) == 'same';\n\t}\n\n\t/**\n\t * Range root element.\n\t *\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.start.root;\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position Position to check.\n\t * @returns {Boolean} `true` if given {@link module:engine/model/position~Position position} is contained\n\t * in this range,`false` otherwise.\n\t */\n\tcontainsPosition( position ) {\n\t\treturn position.isAfter( this.start ) && position.isBefore( this.end );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link ~Range range}.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to check.\n\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n\t * @returns {Boolean} `true` if given {@link ~Range range} boundaries are contained by this range, `false` otherwise.\n\t */\n\tcontainsRange( otherRange, loose = false ) {\n\t\tif ( otherRange.isCollapsed ) {\n\t\t\tloose = false;\n\t\t}\n\n\t\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\n\t\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\n\n\t\treturn containsStart && containsEnd;\n\t}\n\n\t/**\n\t * Checks whether given {@link module:engine/model/item~Item} is inside this range.\n\t *\n\t * @param {module:engine/model/item~Item} item Model item to check.\n\t */\n\tcontainsItem( item ) {\n\t\tconst pos = Position._createBefore( item );\n\n\t\treturn this.containsPosition( pos ) || this.start.isEqual( pos );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\trange.is( 'range' ); // -> true\n\t *\t\trange.is( 'model:range' ); // -> true\n\t *\n\t *\t\trange.is( 'view:range' ); // -> false\n\t *\t\trange.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'range' || type == 'model:range';\n\t}\n\n\t/**\n\t * Two ranges are equal if their {@link #start} and {@link #end} positions are equal.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise.\n\t */\n\tisEqual( otherRange ) {\n\t\treturn this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end );\n\t}\n\n\t/**\n\t * Checks and returns whether this range intersects with given range.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges intersect, `false` otherwise.\n\t */\n\tisIntersecting( otherRange ) {\n\t\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\n\t}\n\n\t/**\n\t * Computes which part(s) of this {@link ~Range range} is not a part of given {@link ~Range range}.\n\t * Returned array contains zero, one or two {@link ~Range ranges}.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n\t *\t\tlet transformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has no ranges because `otherRange` contains `range`\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 3 ] ) );\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has one range: from [ 3 ] to [ 4, 0, 1 ]\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 4 ] ) );\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3 ] and from [ 4 ] to [ 4, 0, 1 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to differentiate against.\n\t * @returns {Array.<module:engine/model/range~Range>} The difference between ranges.\n\t */\n\tgetDifference( otherRange ) {\n\t\tconst ranges = [];\n\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect.\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the start to the middle of this range.\n\t\t\t\tranges.push( new Range( this.start, otherRange.start ) );\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the middle of this range to the end.\n\t\t\t\tranges.push( new Range( otherRange.end, this.end ) );\n\t\t\t}\n\t\t} else {\n\t\t\t// Ranges do not intersect, return the original range.\n\t\t\tranges.push( new Range( this.start, this.end ) );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an intersection of this {@link ~Range range} and given {@link ~Range range}.\n\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 2 ] ) );\n\t *\t\tlet transformed = range.getIntersection( otherRange ); // null - ranges have no common part\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n\t *\t\ttransformed = range.getIntersection( otherRange ); // range from [ 3 ] to [ 4, 0, 1 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to check for intersection.\n\t * @returns {module:engine/model/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n\t */\n\tgetIntersection( otherRange ) {\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect, so a common range will be returned.\n\t\t\t// At most, it will be same as this range.\n\t\t\tlet commonRangeStart = this.start;\n\t\t\tlet commonRangeEnd = this.end;\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means thaNt we have to\n\t\t\t\t// shrink common range to the given range start.\n\t\t\t\tcommonRangeStart = otherRange.start;\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// shrink common range to the given range end.\n\t\t\t\tcommonRangeEnd = otherRange.end;\n\t\t\t}\n\n\t\t\treturn new Range( commonRangeStart, commonRangeEnd );\n\t\t}\n\n\t\t// Ranges do not intersect, so they do not have common part.\n\t\treturn null;\n\t}\n\n\t/**\n\t * Computes and returns the smallest set of {@link #isFlat flat} ranges, that covers this range in whole.\n\t *\n\t * See an example of a model structure (`[` and `]` are range boundaries):\n\t *\n\t *\t\troot                                                            root\n\t *\t\t |- element DIV                         DIV             P2              P3             DIV\n\t *\t\t |   |- element H                   H        P1        f o o           b a r       H         P4\n\t *\t\t |   |   |- \"fir[st\"             fir[st     lorem                               se]cond     ipsum\n\t *\t\t |   |- element P1\n\t *\t\t |   |   |- \"lorem\"                                              ||\n\t *\t\t |- element P2                                                   ||\n\t *\t\t |   |- \"foo\"                                                    VV\n\t *\t\t |- element P3\n\t *\t\t |   |- \"bar\"                                                   root\n\t *\t\t |- element DIV                         DIV             [P2             P3]             DIV\n\t *\t\t |   |- element H                   H       [P1]       f o o           b a r        H         P4\n\t *\t\t |   |   |- \"se]cond\"            fir[st]    lorem                               [se]cond     ipsum\n\t *\t\t |   |- element P4\n\t *\t\t |   |   |- \"ipsum\"\n\t *\n\t * As it can be seen, letters contained in the range are: `stloremfoobarse`, spread across different parents.\n\t * We are looking for minimal set of flat ranges that contains the same nodes.\n\t *\n\t * Minimal flat ranges for above range `( [ 0, 0, 3 ], [ 3, 0, 2 ] )` will be:\n\t *\n\t *\t\t( [ 0, 0, 3 ], [ 0, 0, 5 ] ) = \"st\"\n\t *\t\t( [ 0, 1 ], [ 0, 2 ] ) = element P1 (\"lorem\")\n\t *\t\t( [ 1 ], [ 3 ] ) = element P2, element P3 (\"foobar\")\n\t *\t\t( [ 3, 0, 0 ], [ 3, 0, 2 ] ) = \"se\"\n\t *\n\t * **Note:** if an {@link module:engine/model/element~Element element} is not wholly contained in this range, it won't be returned\n\t * in any of the returned flat ranges. See in the example how `H` elements at the beginning and at the end of the range\n\t * were omitted. Only their parts that were wholly in the range were returned.\n\t *\n\t * **Note:** this method is not returning flat ranges that contain no nodes.\n\t *\n\t * @returns {Array.<module:engine/model/range~Range>} Array of flat ranges covering this range.\n\t */\n\tgetMinimalFlatRanges() {\n\t\tconst ranges = [];\n\t\tconst diffAt = this.start.getCommonPath( this.end ).length;\n\n\t\tconst pos = Position._createAt( this.start );\n\t\tlet posParent = pos.parent;\n\n\t\t// Go up.\n\t\twhile ( pos.path.length > diffAt + 1 ) {\n\t\t\tconst howMany = posParent.maxOffset - pos.offset;\n\n\t\t\tif ( howMany !== 0 ) {\n\t\t\t\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\n\t\t\t}\n\n\t\t\tpos.path = pos.path.slice( 0, -1 );\n\t\t\tpos.offset++;\n\t\t\tposParent = posParent.parent;\n\t\t}\n\n\t\t// Go down.\n\t\twhile ( pos.path.length <= this.end.path.length ) {\n\t\t\tconst offset = this.end.path[ pos.path.length - 1 ];\n\t\t\tconst howMany = offset - pos.offset;\n\n\t\t\tif ( howMany !== 0 ) {\n\t\t\t\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\n\t\t\t}\n\n\t\t\tpos.offset = offset;\n\t\t\tpos.path.push( 0 );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n\t *\n\t * For example, to iterate over all items in the entire document root:\n\t *\n\t *\t\t// Create a range spanning over the entire root content:\n\t *\t\tconst range = editor.model.createRangeIn( editor.model.document.getRoot() );\n\t *\n\t *\t\t// Iterate over all items in this range:\n\t *\t\tfor ( const value of range.getWalker() ) {\n\t *\t\t\tconsole.log( value.item );\n\t *\t\t}\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @param {module:engine/model/position~Position} [options.startPosition]\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n\t * them.\n\t *\n\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n\t * set to `true`. However it returns only {@link module:engine/model/item~Item model items},\n\t * not {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @method getItems\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/model/item~Item>}\n\t */\n\t* getItems( options = {} ) {\n\t\toptions.boundaries = this;\n\t\toptions.ignoreElementEnd = true;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.item;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/model/position~Position positions} that are boundaries or\n\t * contained in this range.\n\t *\n\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n\t * {@link module:engine/model/position~Position positions}, not {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/model/position~Position>}\n\t */\n\t* getPositions( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tyield treeWalker.position;\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.nextPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by given `operation`.\n\t *\n\t * **Note:** transformation may break one range into multiple ranges (for example, when a part of the range is\n\t * moved to a different part of document tree). For this reason, an array is returned by this method and it\n\t * may contain one or more `Range` instances.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to transform range by.\n\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n\t */\n\tgetTransformedByOperation( operation ) {\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert':\n\t\t\t\treturn this._getTransformedByInsertOperation( operation );\n\t\t\tcase 'move':\n\t\t\tcase 'remove':\n\t\t\tcase 'reinsert':\n\t\t\t\treturn this._getTransformedByMoveOperation( operation );\n\t\t\tcase 'split':\n\t\t\t\treturn [ this._getTransformedBySplitOperation( operation ) ];\n\t\t\tcase 'merge':\n\t\t\t\treturn [ this._getTransformedByMergeOperation( operation ) ];\n\t\t}\n\n\t\treturn [ new Range( this.start, this.end ) ];\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by multiple `operations`.\n\t *\n\t * @see ~Range#getTransformedByOperation\n\t * @param {Iterable.<module:engine/model/operation/operation~Operation>} operations Operations to transform the range by.\n\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n\t */\n\tgetTransformedByOperations( operations ) {\n\t\tconst ranges = [ new Range( this.start, this.end ) ];\n\n\t\tfor ( const operation of operations ) {\n\t\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\t\tconst result = ranges[ i ].getTransformedByOperation( operation );\n\n\t\t\t\tranges.splice( i, 1, ...result );\n\t\t\t\ti += result.length - 1;\n\t\t\t}\n\t\t}\n\n\t\t// It may happen that a range is split into two, and then the part of second \"piece\" is moved into first\n\t\t// \"piece\". In this case we will have incorrect third range, which should not be included in the result --\n\t\t// because it is already included in the first \"piece\". In this loop we are looking for all such ranges that\n\t\t// are inside other ranges and we simply remove them.\n\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\tconst range = ranges[ i ];\n\n\t\t\tfor ( let j = i + 1; j < ranges.length; j++ ) {\n\t\t\t\tconst next = ranges[ j ];\n\n\t\t\t\tif ( range.containsRange( next ) || next.containsRange( range ) || range.isEqual( next ) ) {\n\t\t\t\t\tranges.splice( j, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of the range's both ends (in which the entire range is contained).\n\t *\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor() {\n\t\treturn this.start.getCommonAncestor( this.end );\n\t}\n\n\t/**\n\t * Converts `Range` to plain object and returns it.\n\t *\n\t * @returns {Object} `Node` converted to plain object.\n\t */\n\ttoJSON() {\n\t\treturn {\n\t\t\tstart: this.start.toJSON(),\n\t\t\tend: this.end.toJSON()\n\t\t};\n\t}\n\n\t/**\n\t * Returns a new range that is equal to current range.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.start, this.end );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by insert operation.\n\t *\n\t * One or more ranges may be returned as a result of this transformation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n\t * @returns {Array.<module:engine/model/range~Range>}\n\t */\n\t_getTransformedByInsertOperation( operation, spread = false ) {\n\t\treturn this._getTransformedByInsertion( operation.position, operation.howMany, spread );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by move operation.\n\t *\n\t * One or more ranges may be returned as a result of this transformation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n\t * @returns {Array.<module:engine/model/range~Range>}\n\t */\n\t_getTransformedByMoveOperation( operation, spread = false ) {\n\t\tconst sourcePosition = operation.sourcePosition;\n\t\tconst howMany = operation.howMany;\n\t\tconst targetPosition = operation.targetPosition;\n\n\t\treturn this._getTransformedByMove( sourcePosition, targetPosition, howMany, spread );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by split operation.\n\t *\n\t * Always one range is returned. The transformation is done in a way to not break the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getTransformedBySplitOperation( operation ) {\n\t\tconst start = this.start._getTransformedBySplitOperation( operation );\n\t\tlet end = this.end._getTransformedBySplitOperation( operation );\n\n\t\tif ( this.end.isEqual( operation.insertionPosition ) ) {\n\t\t\tend = this.end.getShiftedBy( 1 );\n\t\t}\n\n\t\t// Below may happen when range contains graveyard element used by split operation.\n\t\tif ( start.root != end.root ) {\n\t\t\t// End position was next to the moved graveyard element and was moved with it.\n\t\t\t// Fix it by using old `end` which has proper `root`.\n\t\t\tend = this.end.getShiftedBy( -1 );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by merge operation.\n\t *\n\t * Always one range is returned. The transformation is done in a way to not break the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getTransformedByMergeOperation( operation ) {\n\t\t// Special case when the marker is set on \"the closing tag\" of an element. Marker can be set like that during\n\t\t// transformations, especially when a content of a few block elements were removed. For example:\n\t\t//\n\t\t// {} is the transformed range, [] is the removed range.\n\t\t// <p>F[o{o</p><p>B}ar</p><p>Xy]z</p>\n\t\t//\n\t\t// <p>Fo{o</p><p>B}ar</p><p>z</p>\n\t\t// <p>F{</p><p>B}ar</p><p>z</p>\n\t\t// <p>F{</p>}<p>z</p>\n\t\t// <p>F{}z</p>\n\t\t//\n\t\tif ( this.start.isEqual( operation.targetPosition ) && this.end.isEqual( operation.deletionPosition ) ) {\n\t\t\treturn new Range( this.start );\n\t\t}\n\n\t\tlet start = this.start._getTransformedByMergeOperation( operation );\n\t\tlet end = this.end._getTransformedByMergeOperation( operation );\n\n\t\tif ( start.root != end.root ) {\n\t\t\t// This happens when the end position was next to the merged (deleted) element.\n\t\t\t// Then, the end position was moved to the graveyard root. In this case we need to fix\n\t\t\t// the range cause its boundaries would be in different roots.\n\t\t\tend = this.end.getShiftedBy( -1 );\n\t\t}\n\n\t\tif ( start.isAfter( end ) ) {\n\t\t\t// This happens in three following cases:\n\t\t\t//\n\t\t\t// Case 1: Merge operation source position is before the target position (due to some transformations, OT, etc.)\n\t\t\t//         This means that start can be moved before the end of the range.\n\t\t\t//\n\t\t\t// Before: <p>a{a</p><p>b}b</p><p>cc</p>\n\t\t\t// Merge:  <p>b}b</p><p>cca{a</p>\n\t\t\t// Fix:    <p>{b}b</p><p>ccaa</p>\n\t\t\t//\n\t\t\t// Case 2: Range start is before merged node but not directly.\n\t\t\t//         Result should include all nodes that were in the original range.\n\t\t\t//\n\t\t\t// Before: <p>aa</p>{<p>cc</p><p>b}b</p>\n\t\t\t// Merge:  <p>aab}b</p>{<p>cc</p>\n\t\t\t// Fix:    <p>aa{bb</p><p>cc</p>}\n\t\t\t//\n\t\t\t//         The range is expanded by an additional `b` letter but it is better than dropping the whole `cc` paragraph.\n\t\t\t//\n\t\t\t// Case 3: Range start is directly before merged node.\n\t\t\t//         Resulting range should include only nodes from the merged element:\n\t\t\t//\n\t\t\t// Before: <p>aa</p>{<p>b}b</p><p>cc</p>\n\t\t\t// Merge:  <p>aab}b</p>{<p>cc</p>\n\t\t\t// Fix:    <p>aa{b}b</p><p>cc</p>\n\t\t\t//\n\n\t\t\tif ( operation.sourcePosition.isBefore( operation.targetPosition ) ) {\n\t\t\t\t// Case 1.\n\t\t\t\tstart = Position._createAt( end );\n\t\t\t\tstart.offset = 0;\n\t\t\t} else {\n\t\t\t\tif ( !operation.deletionPosition.isEqual( start ) ) {\n\t\t\t\t\t// Case 2.\n\t\t\t\t\tend = operation.deletionPosition;\n\t\t\t\t}\n\n\t\t\t\t// In both case 2 and 3 start is at the end of the merge-to element.\n\t\t\t\tstart = operation.targetPosition;\n\t\t\t}\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Returns an array containing one or two {@link ~Range ranges} that are a result of transforming this\n\t * {@link ~Range range} by inserting `howMany` nodes at `insertPosition`. Two {@link ~Range ranges} are\n\t * returned if the insertion was inside this {@link ~Range range} and `spread` is set to `true`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 1 ] ), 2 );\n\t *\t\t// transformed array has one range from [ 4, 7 ] to [ 6, 0, 1 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 4, 0, 0 ] ), 4 );\n\t *\t\t// transformed array has one range from [ 2, 7 ] to [ 4, 0, 5 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4 );\n\t *\t\t// transformed array has one range, which is equal to original range\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4, true );\n\t *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3, 2 ] and from [ 3, 6 ] to [ 4, 0, 1 ]\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @param {Boolean} [spread] Flag indicating whether this {~Range range} should be spread if insertion\n\t * was inside the range. Defaults to `false`.\n\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany, spread = false ) {\n\t\tif ( spread && this.containsPosition( insertPosition ) ) {\n\t\t\t// Range has to be spread. The first part is from original start to the spread point.\n\t\t\t// The other part is from spread point to the original end, but transformed by\n\t\t\t// insertion to reflect insertion changes.\n\n\t\t\treturn [\n\t\t\t\tnew Range( this.start, insertPosition ),\n\t\t\t\tnew Range(\n\t\t\t\t\tinsertPosition.getShiftedBy( howMany ),\n\t\t\t\t\tthis.end._getTransformedByInsertion( insertPosition, howMany )\n\t\t\t\t)\n\t\t\t];\n\t\t} else {\n\t\t\tconst range = new Range( this.start, this.end );\n\n\t\t\trange.start = range.start._getTransformedByInsertion( insertPosition, howMany );\n\t\t\trange.end = range.end._getTransformedByInsertion( insertPosition, howMany );\n\n\t\t\treturn [ range ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array containing {@link ~Range ranges} that are a result of transforming this\n\t * {@link ~Range range} by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position from which nodes are moved.\n\t * @param {module:engine/model/position~Position} targetPosition Position to where nodes are moved.\n\t * @param {Number} howMany How many nodes are moved.\n\t * @param {Boolean} [spread=false] Whether the range should be spread if the move points inside the range.\n\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany, spread = false ) {\n\t\t// Special case for transforming a collapsed range. Just transform it like a position.\n\t\tif ( this.isCollapsed ) {\n\t\t\tconst newPos = this.start._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\n\t\t\treturn [ new Range( newPos ) ];\n\t\t}\n\n\t\t// Special case for transformation when a part of the range is moved towards the range.\n\t\t//\n\t\t// Examples:\n\t\t//\n\t\t// <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p></div><p>c[d</p><p>e]f</p>\n\t\t// <p>e[f</p><div><p>a]b</p><p>cd</p></div> --> <p>e[f</p><p>a]b</p><div><p>cd</p></div>\n\t\t//\n\t\t// Without this special condition, the default algorithm leaves an \"artifact\" range from one of `differenceSet` parts:\n\t\t//\n\t\t// <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p>{</div>}<p>c[d</p><p>e]f</p>\n\t\t//\n\t\t// This special case is applied only if the range is to be kept together (not spread).\n\t\tconst moveRange = Range._createFromPositionAndShift( sourcePosition, howMany );\n\t\tconst insertPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( this.containsPosition( targetPosition ) && !spread ) {\n\t\t\tif ( moveRange.containsPosition( this.start ) || moveRange.containsPosition( this.end ) ) {\n\t\t\t\tconst start = this.start._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\t\t\t\tconst end = this.end._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\n\t\t\t\treturn [ new Range( start, end ) ];\n\t\t\t}\n\t\t}\n\n\t\t// Default algorithm.\n\t\tlet result;\n\n\t\tconst differenceSet = this.getDifference( moveRange );\n\t\tlet difference = null;\n\n\t\tconst common = this.getIntersection( moveRange );\n\n\t\tif ( differenceSet.length == 1 ) {\n\t\t\t// `moveRange` and this range may intersect but may be separate.\n\t\t\tdifference = new Range(\n\t\t\t\tdifferenceSet[ 0 ].start._getTransformedByDeletion( sourcePosition, howMany ),\n\t\t\t\tdifferenceSet[ 0 ].end._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t);\n\t\t} else if ( differenceSet.length == 2 ) {\n\t\t\t// `moveRange` is inside this range.\n\t\t\tdifference = new Range(\n\t\t\t\tthis.start,\n\t\t\t\tthis.end._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t);\n\t\t} // else, `moveRange` contains this range.\n\n\t\tif ( difference ) {\n\t\t\tresult = difference._getTransformedByInsertion( insertPosition, howMany, common !== null || spread );\n\t\t} else {\n\t\t\tresult = [];\n\t\t}\n\n\t\tif ( common ) {\n\t\t\tconst transformedCommon = new Range(\n\t\t\t\tcommon.start._getCombined( moveRange.start, insertPosition ),\n\t\t\t\tcommon.end._getCombined( moveRange.start, insertPosition )\n\t\t\t);\n\n\t\t\tif ( result.length == 2 ) {\n\t\t\t\tresult.splice( 1, 0, transformedCommon );\n\t\t\t} else {\n\t\t\t\tresult.push( transformedCommon );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns a copy of this range that is transformed by deletion of `howMany` nodes from `deletePosition`.\n\t *\n\t * If the deleted range is intersecting with the transformed range, the transformed range will be shrank.\n\t *\n\t * If the deleted range contains transformed range, `null` will be returned.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} deletionPosition Position from which nodes are removed.\n\t * @param {Number} howMany How many nodes are removed.\n\t * @returns {module:engine/model/range~Range|null} Result of the transformation.\n\t */\n\t_getTransformedByDeletion( deletePosition, howMany ) {\n\t\tlet newStart = this.start._getTransformedByDeletion( deletePosition, howMany );\n\t\tlet newEnd = this.end._getTransformedByDeletion( deletePosition, howMany );\n\n\t\tif ( newStart == null && newEnd == null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( newStart == null ) {\n\t\t\tnewStart = deletePosition;\n\t\t}\n\n\t\tif ( newEnd == null ) {\n\t\t\tnewEnd = deletePosition;\n\t\t}\n\n\t\treturn new Range( newStart, newEnd );\n\t}\n\n\t/**\n\t * Creates a new range, spreading from specified {@link module:engine/model/position~Position position} to a position moved by\n\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} position Beginning of the range.\n\t * @param {Number} shift How long the range should be.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createFromPositionAndShift( position, shift ) {\n\t\tconst start = position;\n\t\tconst end = position.getShiftedBy( shift );\n\n\t\treturn shift > 0 ? new this( start, end ) : new this( end, start );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @protected\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createIn( element ) {\n\t\treturn new this( Position._createAt( element, 0 ), Position._createAt( element, element.maxOffset ) );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/model/item~Item model item} and ends after it.\n\t *\n\t * @protected\n\t * @param {module:engine/model/item~Item} item\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createOn( item ) {\n\t\treturn this._createFromPositionAndShift( Position._createBefore( item ), item.offsetSize );\n\t}\n\n\t/**\n\t * Combines all ranges from the passed array into a one range. At least one range has to be passed.\n\t * Passed ranges must not have common parts.\n\t *\n\t * The first range from the array is a reference range. If other ranges start or end on the exactly same position where\n\t * the reference range, they get combined into one range.\n\t *\n\t *\t\t[  ][]  [    ][ ][             ][ ][]  [  ]  // Passed ranges, shown sorted\n\t *\t\t[    ]                                       // The result of the function if the first range was a reference range.\n\t *\t            [                           ]        // The result of the function if the third-to-seventh range was a reference range.\n\t *\t                                           [  ]  // The result of the function if the last range was a reference range.\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to combine.\n\t * @returns {module:engine/model/range~Range} Combined range.\n\t */\n\tstatic _createFromRanges( ranges ) {\n\t\tif ( ranges.length === 0 ) {\n\t\t\t/**\n\t\t\t * At least one range has to be passed to\n\t\t\t * {@link module:engine/model/range~Range._createFromRanges `Range._createFromRanges()`}.\n\t\t\t *\n\t\t\t * @error range-create-from-ranges-empty-array\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'range-create-from-ranges-empty-array: At least one range has to be passed.',\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if ( ranges.length == 1 ) {\n\t\t\treturn ranges[ 0 ].clone();\n\t\t}\n\n\t\t// 1. Set the first range in `ranges` array as a reference range.\n\t\t// If we are going to return just a one range, one of the ranges need to be the reference one.\n\t\t// Other ranges will be stuck to that range, if possible.\n\t\tconst ref = ranges[ 0 ];\n\n\t\t// 2. Sort all the ranges so it's easier to process them.\n\t\tranges.sort( ( a, b ) => {\n\t\t\treturn a.start.isAfter( b.start ) ? 1 : -1;\n\t\t} );\n\n\t\t// 3. Check at which index the reference range is now.\n\t\tconst refIndex = ranges.indexOf( ref );\n\n\t\t// 4. At this moment we don't need the original range.\n\t\t// We are going to modify the result and we need to return a new instance of Range.\n\t\t// We have to create a copy of the reference range.\n\t\tconst result = new this( ref.start, ref.end );\n\n\t\t// 5. Ranges should be checked and glued starting from the range that is closest to the reference range.\n\t\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\n\t\tif ( refIndex > 0 ) {\n\t\t\tfor ( let i = refIndex - 1; true; i++ ) {\n\t\t\t\tif ( ranges[ i ].end.isEqual( result.start ) ) {\n\t\t\t\t\tresult.start = Position._createAt( ranges[ i ].start );\n\t\t\t\t} else {\n\t\t\t\t\t// If ranges are not starting/ending at the same position there is no point in looking further.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 6. Ranges should be checked and glued starting from the range that is closest to the reference range.\n\t\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\n\t\tfor ( let i = refIndex + 1; i < ranges.length; i++ ) {\n\t\t\tif ( ranges[ i ].start.isEqual( result.end ) ) {\n\t\t\t\tresult.end = Position._createAt( ranges[ i ].end );\n\t\t\t} else {\n\t\t\t\t// If ranges are not starting/ending at the same position there is no point in looking further.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates a `Range` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Range`.\n\t * @param {module:engine/model/document~Document} doc Document object that will be range owner.\n\t * @returns {module:engine/model/element~Element} `Range` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\treturn new this( Position.fromJSON( json.start, doc ), Position.fromJSON( json.end, doc ) );\n\t}\n}\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/position\n */\n\nimport TreeWalker from './treewalker';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Text from './text';\nimport { last } from 'lodash-es';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Represents a position in the model tree.\n *\n * A position is represented by its {@link module:engine/model/position~Position#root} and\n * a {@link module:engine/model/position~Position#path} in that root.\n *\n * You can create position instances via its constructor or the `createPosition*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n *\n * **Note:** Position is based on offsets, not indexes. This means that a position between two text nodes\n * `foo` and `bar` has offset `3`, not `1`. See {@link module:engine/model/position~Position#path} for more information.\n *\n * Since a position in the model is represented by a {@link module:engine/model/position~Position#root position root} and\n * {@link module:engine/model/position~Position#path position path} it is possible to create positions placed in non-existing places.\n * This requirement is important for operational transformation algorithms.\n *\n * Also, {@link module:engine/model/operation/operation~Operation operations}\n * kept in the {@link module:engine/model/document~Document#history document history}\n * are storing positions (and ranges) which were correct when those operations were applied, but may not be correct\n * after the document has changed.\n *\n * When changes are applied to the model, it may also happen that {@link module:engine/model/position~Position#parent position parent}\n * will change even if position path has not changed. Keep in mind, that if a position leads to non-existing element,\n * {@link module:engine/model/position~Position#parent} and some other properties and methods will throw errors.\n *\n * In most cases, position with wrong path is caused by an error in code, but it is sometimes needed, as described above.\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t */\n\tconstructor( root, path, stickiness = 'toNone' ) {\n\t\tif ( !root.is( 'element' ) && !root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * Position root is invalid.\n\t\t\t *\n\t\t\t * Positions can only be anchored in elements or document fragments.\n\t\t\t *\n\t\t\t * @error model-position-root-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-root-invalid: Position root invalid.',\n\t\t\t\troot\n\t\t\t);\n\t\t}\n\n\t\tif ( !( path instanceof Array ) || path.length === 0 ) {\n\t\t\t/**\n\t\t\t * Position path must be an array with at least one item.\n\t\t\t *\n\t\t\t * @error model-position-path-incorrect-format\n\t\t\t * @param path\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-path-incorrect-format: Position path must be an array with at least one item.',\n\t\t\t\troot,\n\t\t\t\t{ path }\n\t\t\t);\n\t\t}\n\n\t\t// Normalize the root and path (if element was passed).\n\t\tpath = root.getPath().concat( path );\n\t\troot = root.root;\n\n\t\t/**\n\t\t * Root of the position path.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t\t * module:engine/model/position~Position#root\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Position of the node in the tree. **Path contains offsets, not indexes.**\n\t\t *\n\t\t * Position can be placed before, after or in a {@link module:engine/model/node~Node node} if that node has\n\t\t * {@link module:engine/model/node~Node#offsetSize} greater than `1`. Items in position path are\n\t\t * {@link module:engine/model/node~Node#startOffset starting offsets} of position ancestors, starting from direct root children,\n\t\t * down to the position offset in it's parent.\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P            before: [ 0 ]         after: [ 1 ]\n\t\t *\t\t  |- UL           before: [ 1 ]         after: [ 2 ]\n\t\t *\t\t     |- LI        before: [ 1, 0 ]      after: [ 1, 1 ]\n\t\t *\t\t     |  |- foo    before: [ 1, 0, 0 ]   after: [ 1, 0, 3 ]\n\t\t *\t\t     |- LI        before: [ 1, 1 ]      after: [ 1, 2 ]\n\t\t *\t\t        |- bar    before: [ 1, 1, 0 ]   after: [ 1, 1, 3 ]\n\t\t *\n\t\t * `foo` and `bar` are representing {@link module:engine/model/text~Text text nodes}. Since text nodes has offset size\n\t\t * greater than `1` you can place position offset between their start and end:\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P\n\t\t *\t\t  |- UL\n\t\t *\t\t     |- LI\n\t\t *\t\t     |  |- f^o|o  ^ has path: [ 1, 0, 1 ]   | has path: [ 1, 0, 2 ]\n\t\t *\t\t     |- LI\n\t\t *\t\t        |- b^a|r  ^ has path: [ 1, 1, 1 ]   | has path: [ 1, 1, 2 ]\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<Number>} module:engine/model/position~Position#path\n\t\t */\n\t\tthis.path = path;\n\n\t\t/**\n\t\t * Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n\t\t *\n\t\t * @member {module:engine/model/position~PositionStickiness} module:engine/model/position~Position#stickiness\n\t\t */\n\t\tthis.stickiness = stickiness;\n\t}\n\n\t/**\n\t * Offset at which this position is located in its {@link module:engine/model/position~Position#parent parent}. It is equal\n\t * to the last item in position {@link module:engine/model/position~Position#path path}.\n\t *\n\t * @type {Number}\n\t */\n\tget offset() {\n\t\treturn last( this.path );\n\t}\n\n\t/**\n\t * @param {Number} newOffset\n\t */\n\tset offset( newOffset ) {\n\t\tthis.path[ this.path.length - 1 ] = newOffset;\n\t}\n\n\t/**\n\t * Parent element of this position.\n\t *\n\t * Keep in mind that `parent` value is calculated when the property is accessed.\n\t * If {@link module:engine/model/position~Position#path position path}\n\t * leads to a non-existing element, `parent` property will throw error.\n\t *\n\t * Also it is a good idea to cache `parent` property if it is used frequently in an algorithm (i.e. in a long loop).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget parent() {\n\t\tlet parent = this.root;\n\n\t\tfor ( let i = 0; i < this.path.length - 1; i++ ) {\n\t\t\tparent = parent.getChild( parent.offsetToIndex( this.path[ i ] ) );\n\n\t\t\tif ( !parent ) {\n\t\t\t\tthrow new CKEditorError( 'model-position-path-incorrect: The position\\'s path is incorrect.', this, { position: this } );\n\t\t\t}\n\t\t}\n\n\t\tif ( parent.is( 'text' ) ) {\n\t\t\t/**\n\t\t\t * The position's path is incorrect. This means that a position does not point to\n\t\t\t * a correct place in the tree and hence, some of its methods and getters cannot work correctly.\n\t\t\t *\n\t\t\t * **Note**: Unlike DOM and view positions, in the model, the\n\t\t\t * {@link module:engine/model/position~Position#parent position's parent} is always an element or a document fragment.\n\t\t\t * The last offset in the {@link module:engine/model/position~Position#path position's path} is the point in this element where\n\t\t\t * this position points.\n\t\t\t *\n\t\t\t * Read more about model positions and offsets in\n\t\t\t * the {@glink framework/guides/architecture/editing-engine#indexes-and-offsets Editing engine architecture guide}.\n\t\t\t *\n\t\t\t * @error position-incorrect-path\n\t\t\t * @param {module:engine/model/position~Position} position The incorrect position.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-path-incorrect: The position\\'s path is incorrect.', this, { position: this } );\n\t\t}\n\n\t\treturn parent;\n\t}\n\n\t/**\n\t * Position {@link module:engine/model/position~Position#offset offset} converted to an index in position's parent node. It is\n\t * equal to the {@link module:engine/model/node~Node#index index} of a node after this position. If position is placed\n\t * in text node, position index is equal to the index of that text node.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget index() {\n\t\treturn this.parent.offsetToIndex( this.offset );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/model/text~Text text node} instance in which this position is placed or `null` if this\n\t * position is not in a text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/text~Text|null}\n\t */\n\tget textNode() {\n\t\tconst node = this.parent.getChild( this.index );\n\n\t\treturn ( node instanceof Text && node.startOffset < this.offset ) ? node : null;\n\t}\n\n\t/**\n\t * Node directly after this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\treturn this.textNode === null ? this.parent.getChild( this.index ) : null;\n\t}\n\n\t/**\n\t * Node directly before this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {Node}\n\t */\n\tget nodeBefore() {\n\t\treturn this.textNode === null ? this.parent.getChild( this.index - 1 ) : null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\treturn this.offset == this.parent.maxOffset;\n\t}\n\n\t/**\n\t * Checks whether this position is before or after given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/model/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root != otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tconst result = compareArrays( this.path, otherPosition.path );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'same':\n\t\t\t\treturn 'same';\n\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\treturn this.path[ result ] < otherPosition.path[ result ] ? 'before' : 'after';\n\t\t}\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/model/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' );\n\t * \t\t// <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } );\n\t * \t\t// <paragraph>foo[]</paragraph> -> <paragraph>[]foo</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => false );\n\t * \t\t// Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/model/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns a path to this position's parent. Parent path is equal to position {@link module:engine/model/position~Position#path path}\n\t * but without the last item.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @returns {Array.<Number>} Path to the parent.\n\t */\n\tgetParentPath() {\n\t\treturn this.path.slice( 0, -1 );\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and its ancestors.\n\t *\n\t * @returns {Array.<module:engine/model/item~Item>} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the slice of two position {@link #path paths} which is identical. The {@link #root roots}\n\t * of these two paths must be identical.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {Array.<Number>} The common path.\n\t */\n\tgetCommonPath( position ) {\n\t\tif ( this.root != position.root ) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// We find on which tree-level start and end have the lowest common ancestor\n\t\tconst cmp = compareArrays( this.path, position.path );\n\t\t// If comparison returned string it means that arrays are same.\n\t\tconst diffAt = ( typeof cmp == 'string' ) ? Math.min( this.path.length, position.path.length ) : cmp;\n\n\t\treturn this.path.slice( 0, diffAt );\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions. The {@link #root roots} of these two positions must be identical.\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns a new instance of `Position`, that has same {@link #parent parent} but it's offset\n\t * is shifted by `shift` value (can be a negative value).\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {Number} shift Offset shift. Can be a negative value.\n\t * @returns {module:engine/model/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = this.clone();\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Checks whether this position is after given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @see module:engine/model/position~Position#isBefore\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before given position.\n\t *\n\t * **Note:** watch out when using negation of the value returned by this method, because the negation will also\n\t * be `true` if positions are in different roots and you might not expect this. You should probably use\n\t * `a.isAfter( b ) || a.isEqual( b )` or `!a.isBefore( p ) && a.root == b.root` in most scenarios. If your\n\t * condition uses multiple `isAfter` and `isBefore` checks, build them so they do not use negated values, i.e.:\n\t *\n\t *\t\tif ( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do A.\n\t *\t\t} else {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * or, if you have only one if-branch:\n\t *\n\t *\t\tif ( !( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * rather than:\n\t *\n\t *\t\tif ( !a.isBefore( b ) || && !c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t} else {\n\t *\t\t\t// do A.\n\t *\t\t}\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is equal to given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'same';\n\t}\n\n\t/**\n\t * Checks whether this position is touching given position. Positions touch when there are no text nodes\n\t * or empty nodes in a range between them. Technically, those positions are not equal but in many cases\n\t * they are very similar or even indistinguishable.\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions touch.\n\t */\n\tisTouching( otherPosition ) {\n\t\tlet left = null;\n\t\tlet right = null;\n\t\tconst compare = this.compareWith( otherPosition );\n\n\t\tswitch ( compare ) {\n\t\t\tcase 'same':\n\t\t\t\treturn true;\n\n\t\t\tcase 'before':\n\t\t\t\tleft = Position._createAt( this );\n\t\t\t\tright = Position._createAt( otherPosition );\n\t\t\t\tbreak;\n\n\t\t\tcase 'after':\n\t\t\t\tleft = Position._createAt( otherPosition );\n\t\t\t\tright = Position._createAt( this );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\t\t// Cached for optimization purposes.\n\t\tlet leftParent = left.parent;\n\n\t\twhile ( left.path.length + right.path.length ) {\n\t\t\tif ( left.isEqual( right ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( left.path.length > right.path.length ) {\n\t\t\t\tif ( left.offset !== leftParent.maxOffset ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tleft.path = left.path.slice( 0, -1 );\n\t\t\t\tleftParent = leftParent.parent;\n\t\t\t\tleft.offset++;\n\t\t\t} else {\n\t\t\t\tif ( right.offset !== 0 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tright.path = right.path.slice( 0, -1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tposition.is( 'position' ); // -> true\n\t *\t\tposition.is( 'model:position' ); // -> true\n\t *\n\t *\t\tposition.is( 'view:position' ); // -> false\n\t *\t\tposition.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'position' || type == 'model:position';\n\t}\n\n\t/**\n\t * Checks if two positions are in the same parent.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} position Position to compare with.\n\t * @returns {Boolean} `true` if positions have the same parent, `false` otherwise.\n\t */\n\thasSameParentAs( position ) {\n\t\tif ( this.root !== position.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisParentPath = this.getParentPath();\n\t\tconst posParentPath = position.getParentPath();\n\n\t\treturn compareArrays( thisParentPath, posParentPath ) == 'same';\n\t}\n\n\t/**\n\t * Returns a copy of this position that is transformed by given `operation`.\n\t *\n\t * The new position's parameters are updated accordingly to the effect of the `operation`.\n\t *\n\t * For example, if `n` nodes are inserted before the position, the returned position {@link ~Position#offset} will be\n\t * increased by `n`. If the position was in a merged element, it will be accordingly moved to the new element, etc.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to transform by.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\tgetTransformedByOperation( operation ) {\n\t\tlet result;\n\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert':\n\t\t\t\tresult = this._getTransformedByInsertOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'move':\n\t\t\tcase 'remove':\n\t\t\tcase 'reinsert':\n\t\t\t\tresult = this._getTransformedByMoveOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'split':\n\t\t\t\tresult = this._getTransformedBySplitOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'merge':\n\t\t\t\tresult = this._getTransformedByMergeOperation( operation );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult = Position._createAt( this );\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by an insert operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByInsertOperation( operation ) {\n\t\treturn this._getTransformedByInsertion( operation.position, operation.howMany );\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by a move operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByMoveOperation( operation ) {\n\t\treturn this._getTransformedByMove( operation.sourcePosition, operation.targetPosition, operation.howMany );\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by a split operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedBySplitOperation( operation ) {\n\t\tconst movedRange = operation.movedRange;\n\n\t\tconst isContained = movedRange.containsPosition( this ) ||\n\t\t\t( movedRange.start.isEqual( this ) && this.stickiness == 'toNext' );\n\n\t\tif ( isContained ) {\n\t\t\treturn this._getCombined( operation.splitPosition, operation.moveTargetPosition );\n\t\t} else {\n\t\t\tif ( operation.graveyardPosition ) {\n\t\t\t\treturn this._getTransformedByMove( operation.graveyardPosition, operation.insertionPosition, 1 );\n\t\t\t} else {\n\t\t\t\treturn this._getTransformedByInsertion( operation.insertionPosition, 1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by merge operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByMergeOperation( operation ) {\n\t\tconst movedRange = operation.movedRange;\n\t\tconst isContained = movedRange.containsPosition( this ) || movedRange.start.isEqual( this );\n\n\t\tlet pos;\n\n\t\tif ( isContained ) {\n\t\t\tpos = this._getCombined( operation.sourcePosition, operation.targetPosition );\n\n\t\t\tif ( operation.sourcePosition.isBefore( operation.targetPosition ) ) {\n\t\t\t\t// Above happens during OT when the merged element is moved before the merged-to element.\n\t\t\t\tpos = pos._getTransformedByDeletion( operation.deletionPosition, 1 );\n\t\t\t}\n\t\t} else if ( this.isEqual( operation.deletionPosition ) ) {\n\t\t\tpos = Position._createAt( operation.deletionPosition );\n\t\t} else {\n\t\t\tpos = this._getTransformedByMove( operation.deletionPosition, operation.graveyardPosition, 1 );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by removing `howMany` nodes starting from `deletePosition`.\n\t * It may happen that this position is in a removed node. If that is the case, `null` is returned instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} deletePosition Position before the first removed node.\n\t * @param {Number} howMany How many nodes are removed.\n\t * @returns {module:engine/model/position~Position|null} Transformed position or `null`.\n\t */\n\t_getTransformedByDeletion( deletePosition, howMany ) {\n\t\tconst transformed = Position._createAt( this );\n\n\t\t// This position can't be affected if deletion was in a different root.\n\t\tif ( this.root != deletePosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are removed from the node that is pointed by this position...\n\t\t\tif ( deletePosition.offset < this.offset ) {\n\t\t\t\t// And are removed from before an offset of that position...\n\t\t\t\tif ( deletePosition.offset + howMany > this.offset ) {\n\t\t\t\t\t// Position is in removed range, it's no longer in the tree.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Decrement the offset accordingly.\n\t\t\t\t\ttransformed.offset -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are removed from a node that is on a path to this position...\n\t\t\tconst i = deletePosition.path.length - 1;\n\n\t\t\tif ( deletePosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are removed from before next node of that path...\n\t\t\t\tif ( deletePosition.offset + howMany > this.path[ i ] ) {\n\t\t\t\t\t// If the next node of that path is removed return null\n\t\t\t\t\t// because the node containing this position got removed.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, decrement index on that path.\n\t\t\t\t\ttransformed.path[ i ] -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by inserting `howMany` nodes at `insertPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany ) {\n\t\tconst transformed = Position._createAt( this );\n\n\t\t// This position can't be affected if insertion was in a different root.\n\t\tif ( this.root != insertPosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are inserted in the node that is pointed by this position...\n\t\t\tif ( insertPosition.offset < this.offset || ( insertPosition.offset == this.offset && this.stickiness != 'toPrevious' ) ) {\n\t\t\t\t// And are inserted before an offset of that position...\n\t\t\t\t// \"Push\" this positions offset.\n\t\t\t\ttransformed.offset += howMany;\n\t\t\t}\n\t\t} else if ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are inserted in a node that is on a path to this position...\n\t\t\tconst i = insertPosition.path.length - 1;\n\n\t\t\tif ( insertPosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are inserted before next node of that path...\n\t\t\t\t// \"Push\" the index on that path.\n\t\t\t\ttransformed.path[ i ] += howMany;\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position before the first element to move.\n\t * @param {module:engine/model/position~Position} targetPosition Position where moved elements will be inserted.\n\t * @param {Number} howMany How many consecutive nodes to move, starting from `sourcePosition`.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany ) {\n\t\t// Update target position, as it could be affected by nodes removal.\n\t\ttargetPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( sourcePosition.isEqual( targetPosition ) ) {\n\t\t\t// If `targetPosition` is equal to `sourcePosition` this isn't really any move. Just return position as it is.\n\t\t\treturn Position._createAt( this );\n\t\t}\n\n\t\t// Moving a range removes nodes from their original position. We acknowledge this by proper transformation.\n\t\tconst transformed = this._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tconst isMoved = transformed === null ||\n\t\t\t( sourcePosition.isEqual( this ) && this.stickiness == 'toNext' ) ||\n\t\t\t( sourcePosition.getShiftedBy( howMany ).isEqual( this ) && this.stickiness == 'toPrevious' );\n\n\t\tif ( isMoved ) {\n\t\t\t// This position is inside moved range (or sticks to it).\n\t\t\t// In this case, we calculate a combination of this position, move source position and target position.\n\t\t\treturn this._getCombined( sourcePosition, targetPosition );\n\t\t} else {\n\t\t\t// This position is not inside a removed range.\n\t\t\t//\n\t\t\t// In next step, we simply reflect inserting `howMany` nodes, which might further affect the position.\n\t\t\treturn transformed._getTransformedByInsertion( targetPosition, howMany );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a new position that is a combination of this position and given positions.\n\t *\n\t * The combined position is a copy of this position transformed by moving a range starting at `source` position\n\t * to the `target` position. It is expected that this position is inside the moved range.\n\t *\n\t * Example:\n\t *\n\t *\t\tlet original = model.createPositionFromPath( root, [ 2, 3, 1 ] );\n\t *\t\tlet source = model.createPositionFromPath( root, [ 2, 2 ] );\n\t *\t\tlet target = model.createPositionFromPath( otherRoot, [ 1, 1, 3 ] );\n\t *\t\toriginal._getCombined( source, target ); // path is [ 1, 1, 4, 1 ], root is `otherRoot`\n\t *\n\t * Explanation:\n\t *\n\t * We have a position `[ 2, 3, 1 ]` and move some nodes from `[ 2, 2 ]` to `[ 1, 1, 3 ]`. The original position\n\t * was inside moved nodes and now should point to the new place. The moved nodes will be after\n\t * positions `[ 1, 1, 3 ]`, `[ 1, 1, 4 ]`, `[ 1, 1, 5 ]`. Since our position was in the second moved node,\n\t * the transformed position will be in a sub-tree of a node at `[ 1, 1, 4 ]`. Looking at original path, we\n\t * took care of `[ 2, 3 ]` part of it. Now we have to add the rest of the original path to the transformed path.\n\t * Finally, the transformed position will point to `[ 1, 1, 4, 1 ]`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} source Beginning of the moved range.\n\t * @param {module:engine/model/position~Position} target Position where the range is moved.\n\t * @returns {module:engine/model/position~Position} Combined position.\n\t */\n\t_getCombined( source, target ) {\n\t\tconst i = source.path.length - 1;\n\n\t\t// The first part of a path to combined position is a path to the place where nodes were moved.\n\t\tconst combined = Position._createAt( target );\n\t\tcombined.stickiness = this.stickiness;\n\n\t\t// Then we have to update the rest of the path.\n\n\t\t// Fix the offset because this position might be after `from` position and we have to reflect that.\n\t\tcombined.offset = combined.offset + this.path[ i ] - source.offset;\n\n\t\t// Then, add the rest of the path.\n\t\t// If this position is at the same level as `from` position nothing will get added.\n\t\tcombined.path = combined.path.concat( this.path.slice( i + 1 ) );\n\n\t\treturn combined;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\treturn {\n\t\t\troot: this.root.toJSON(),\n\t\t\tpath: Array.from( this.path ),\n\t\t\tstickiness: this.stickiness\n\t\t};\n\t}\n\n\t/**\n\t * Returns a new position that is equal to current position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.root, this.path, this.stickiness );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/model/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/model/item~Item model item} and `'before'` or `'after'` (sets position before or after given model item).\n\t *\n\t * This method is a shortcut to other factory methods such as:\n\t *\n\t * * {@link module:engine/model/position~Position._createBefore},\n\t * * {@link module:engine/model/position~Position._createAfter}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when the\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness. Used only when the\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @protected\n\t */\n\tstatic _createAt( itemOrPosition, offset, stickiness = 'toNone' ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn new Position( itemOrPosition.root, itemOrPosition.path, itemOrPosition.stickiness );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.maxOffset;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this._createBefore( node, stickiness );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this._createAfter( node, stickiness );\n\t\t\t} else if ( offset !== 0 && !offset ) {\n\t\t\t\t/**\n\t\t\t\t * {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}\n\t\t\t\t * requires the offset to be specified when the first parameter is a model item.\n\t\t\t\t *\n\t\t\t\t * @error model-createPositionAt-offset-required\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-createPositionAt-offset-required: ' +\n\t\t\t\t\t'Model#createPositionAt() requires the offset when the first parameter is a model item.',\n\t\t\t\t\t[ this, itemOrPosition ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( !node.is( 'element' ) && !node.is( 'documentFragment' ) ) {\n\t\t\t\t/**\n\t\t\t\t * Position parent have to be a model element or model document fragment.\n\t\t\t\t *\n\t\t\t\t * @error model-position-parent-incorrect\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-position-parent-incorrect: Position parent have to be a element or document fragment.',\n\t\t\t\t\t[ this, itemOrPosition ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst path = node.getPath();\n\n\t\t\tpath.push( offset );\n\n\t\t\treturn new this( node.root, path, stickiness );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position, after given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * @returns {module:engine/model/position~Position}\n\t * @protected\n\t */\n\tstatic _createAfter( item, stickiness ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root element.\n\t\t\t *\n\t\t\t * @error model-position-after-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-after-root: You cannot make a position after root.',\n\t\t\t\t[ this, item ],\n\t\t\t\t{ root: item }\n\t\t\t);\n\t\t}\n\n\t\treturn this._createAt( item.parent, item.endOffset, stickiness );\n\t}\n\n\t/**\n\t * Creates a new position, before the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * @returns {module:engine/model/position~Position}\n\t * @protected\n\t */\n\tstatic _createBefore( item, stickiness ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position before a root element.\n\t\t\t *\n\t\t\t * @error model-position-before-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-before-root: You cannot make a position before root.',\n\t\t\t\titem,\n\t\t\t\t{ root: item }\n\t\t\t);\n\t\t}\n\n\t\treturn this._createAt( item.parent, item.startOffset, stickiness );\n\t}\n\n\t/**\n\t * Creates a `Position` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Position`.\n\t * @param {module:engine/model/document~Document} doc Document object that will be position owner.\n\t * @returns {module:engine/model/position~Position} `Position` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\tif ( json.root === '$graveyard' ) {\n\t\t\tconst pos = new Position( doc.graveyard, json.path );\n\t\t\tpos.stickiness = json.stickiness;\n\n\t\t\treturn pos;\n\t\t}\n\n\t\tif ( !doc.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create position for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error model-position-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-fromjson-no-root: Cannot create position for document. Root with specified name does not exist.',\n\t\t\t\tdoc,\n\t\t\t\t{ rootName: json.root }\n\t\t\t);\n\t\t}\n\n\t\treturn new Position( doc.getRoot( json.root ), json.path, json.stickiness );\n\t}\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/model/position~PositionRelation\n */\n\n/**\n * Represents how position is \"sticking\" with neighbour nodes. Used to define how position should be transformed (moved)\n * in edge cases. Possible values: `'toNone'`, `'toNext'`, `'toPrevious'`.\n *\n * Examples:\n *\n *\t\tInsert. Position is at | and nodes are inserted at the same position, marked as ^:\n *\n *\t\t- sticks to none:           <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to next node:      <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to previous node:  <p>f|^oo</p>  ->  <p>f|baroo</p>\n *\n *\n *\t\tMove. Position is at | and range [oo] is moved to position ^:\n *\n *\t\t- sticks to none:           <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to none:           <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to next node:      <p>f|[oo]</p><p>b^ar</p>  ->  <p>f</p><p>b|ooar</p>\n *\t\t- sticks to next node:      <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to previous node:  <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to previous node:  <p>f[oo]|</p><p>b^ar</p>  ->  <p>f</p><p>boo|ar</p>\n *\n * @typedef {String} module:engine/model/position~PositionStickiness\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/mix\n */\n\n/**\n * Copies enumerable properties and symbols from the objects given as 2nd+ parameters to the\n * prototype of first object (a constructor).\n *\n *\t\tclass Editor {\n *\t\t\t...\n *\t\t}\n *\n *\t\tconst SomeMixin = {\n *\t\t\ta() {\n *\t\t\t\treturn 'a';\n *\t\t\t}\n *\t\t};\n *\n *\t\tmix( Editor, SomeMixin, ... );\n *\n *\t\tnew Editor().a(); // -> 'a'\n *\n * Note: Properties which already exist in the base class will not be overriden.\n *\n * @param {Function} [baseClass] Class which prototype will be extended.\n * @param {Object} [...mixins] Objects from which to get properties.\n */\nexport default function mix( baseClass, ...mixins ) {\n\tmixins.forEach( mixin => {\n\t\tObject.getOwnPropertyNames( mixin ).concat( Object.getOwnPropertySymbols( mixin ) )\n\t\t\t.forEach( key => {\n\t\t\t\tif ( key in baseClass.prototype ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceDescriptor = Object.getOwnPropertyDescriptor( mixin, key );\n\t\t\t\tsourceDescriptor.enumerable = false;\n\n\t\t\t\tObject.defineProperty( baseClass.prototype, key, sourceDescriptor );\n\t\t\t} );\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/position\n */\n\nimport TreeWalker from './treewalker';\n\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EditableElement from './editableelement';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Position in the view tree. Position is represented by its parent node and an offset in this parent.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} parent Position parent.\n\t * @param {Number} offset Position offset.\n\t */\n\tconstructor( parent, offset ) {\n\t\t/**\n\t\t * Position parent.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t\t * module:engine/view/position~Position#parent\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * Position offset.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} module:engine/view/position~Position#offset\n\t\t */\n\t\tthis.offset = offset;\n\t}\n\n\t/**\n\t * Node directly after the position. Equals `null` when there is no node after position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\tif ( this.parent.is( 'text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset ) || null;\n\t}\n\n\t/**\n\t * Node directly before the position. Equals `null` when there is no node before position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeBefore() {\n\t\tif ( this.parent.is( 'text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset - 1 ) || null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\tconst endOffset = this.parent.is( 'text' ) ? this.parent.data.length : this.parent.childCount;\n\n\t\treturn this.offset === endOffset;\n\t}\n\n\t/**\n\t * Position's root, that is the root of the position's parent element.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.parent.root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this position, or `null` if\n\t * position is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tlet editable = this.parent;\n\n\t\twhile ( !( editable instanceof EditableElement ) ) {\n\t\t\tif ( editable.parent ) {\n\t\t\t\teditable = editable.parent;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn editable;\n\t}\n\n\t/**\n\t * Returns a new instance of Position with offset incremented by `shift` value.\n\t *\n\t * @param {Number} shift How position offset should get changed. Accepts negative values.\n\t * @returns {module:engine/view/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = Position._createAt( this );\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/view/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } ); // <p>foo[]</p> -> <p>{}foo</p>\n\t * \t\tgetLastMatchingPosition( value => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/view/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and it's ancestors.\n\t *\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions.\n\t *\n\t * @param {module:engine/view/position~Position} position\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tposition.is( 'position' ); // -> true\n\t *\t\tposition.is( 'view:position' ); // -> true\n\t *\n\t *\t\tposition.is( 'model:position' ); // -> false\n\t *\t\tposition.is( 'element' ); // -> false\n\t *\t\tposition.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'position' || type == 'view:position';\n\t}\n\n\t/**\n\t * Checks whether this position equals given position.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn ( this.parent == otherPosition.parent && this.offset == otherPosition.offset );\n\t}\n\n\t/**\n\t * Checks whether this position is located before given position. When method returns `false` it does not mean that\n\t * this position is after give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isAfter\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is located after given position. When method returns `false` it does not mean that\n\t * this position is before give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isBefore\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before, after or in same position that other position. Two positions may be also\n\t * different when they are located in separate roots.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/view/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root !== otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tif ( this.isEqual( otherPosition ) ) {\n\t\t\treturn 'same';\n\t\t}\n\n\t\t// Get path from root to position's parent element.\n\t\tconst thisPath = this.parent.is( 'node' ) ? this.parent.getPath() : [];\n\t\tconst otherPath = otherPosition.parent.is( 'node' ) ? otherPosition.parent.getPath() : [];\n\n\t\t// Add the positions' offsets to the parents offsets.\n\t\tthisPath.push( this.offset );\n\t\totherPath.push( otherPosition.offset );\n\n\t\t// Compare both path arrays to find common ancestor.\n\t\tconst result = compareArrays( thisPath, otherPath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < otherPath[ result ] ? 'before' : 'after';\n\t\t}\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this positions as a start position.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}\n\t * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\tclone() {\n\t\treturn new Position( this.parent, this.offset );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link module:engine/view/position~Position._createBefore},\n\t * * {@link module:engine/view/position~Position._createAfter}.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tstatic _createAt( itemOrPosition, offset ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn new this( itemOrPosition.parent, itemOrPosition.offset );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.is( 'text' ) ? node.data.length : node.childCount;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this._createBefore( node );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this._createAfter( node );\n\t\t\t} else if ( offset !== 0 && !offset ) {\n\t\t\t\t/**\n\t\t\t\t * {@link module:engine/view/view~View#createPositionAt `View#createPositionAt()`}\n\t\t\t\t * requires the offset to be specified when the first parameter is a view item.\n\t\t\t\t *\n\t\t\t\t * @error view-createPositionAt-offset-required\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-createPositionAt-offset-required: ' +\n\t\t\t\t\t'View#createPositionAt() requires the offset when the first parameter is a view item.',\n\t\t\t\t\tnode\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn new Position( node, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic _createAfter( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText + item.data.length );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root.\n\t\t\t *\n\t\t\t * @error view-position-after-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-after-root: You can not make position after root.', item, { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index + 1 );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic _createBefore( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You cannot make a position before a root.\n\t\t\t *\n\t\t\t * @error view-position-before-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-before-root: You can not make position before root.', item, { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index );\n\t}\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/view/position~PositionRelation\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/view\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ViewCollection from './viewcollection';\nimport Template from './template';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\nimport '../theme/globals/globals.css';\n\n/**\n * The basic view class, which represents an HTML element created out of a\n * {@link module:ui/view~View#template}. Views are building blocks of the user interface and handle\n * interaction\n *\n * Views {@link module:ui/view~View#registerChild aggregate} children in\n * {@link module:ui/view~View#createCollection collections} and manage the life cycle of DOM\n * listeners e.g. by handling rendering and destruction.\n *\n * See the {@link module:ui/template~TemplateDefinition} syntax to learn more about shaping view\n * elements, attributes and listeners.\n *\n *\t\tclass SampleView extends View {\n *\t\t\tconstructor( locale ) {\n *\t\t\t\tsuper( locale );\n *\n *\t\t\t\tconst bind = this.bindTemplate;\n *\n *\t\t\t\t// Views define their interface (state) using observable attributes.\n *\t\t\t\tthis.set( 'elementClass', 'bar' );\n *\n *\t\t\t\tthis.setTemplate( {\n *\t\t\t\t\ttag: 'p',\n *\n *\t\t\t\t\t// The element of the view can be defined with its children.\n *\t\t\t\t\tchildren: [\n *\t\t\t\t\t\t'Hello',\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\ttag: 'b',\n *\t\t\t\t\t\t\tchildren: [ 'world!' ]\n *\t\t\t\t\t\t}\n *\t\t\t\t\t],\n *\t\t\t\t\tattributes: {\n *\t\t\t\t\t\tclass: [\n *\t\t\t\t\t\t\t'foo',\n *\n *\t\t\t\t\t\t\t// Observable attributes control the state of the view in DOM.\n *\t\t\t\t\t\t\tbind.to( 'elementClass' )\n *\t\t\t\t\t\t]\n *\t\t\t\t\t},\n *\t\t\t\t\ton: {\n *\t\t\t\t\t\t// Views listen to DOM events and propagate them.\n *\t\t\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t\t\t}\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst view = new SampleView( locale );\n *\n *\t\tview.render();\n *\n *\t\t// Append <p class=\"foo bar\">Hello<b>world</b></p> to the <body>\n *\t\tdocument.body.appendChild( view.element );\n *\n *\t\t// Change the class attribute to <p class=\"foo baz\">Hello<b>world</b></p>\n *\t\tview.elementClass = 'baz';\n *\n *\t\t// Respond to the \"click\" event in DOM by executing a custom action.\n *\t\tview.on( 'clicked', () => {\n *\t\t\tconsole.log( 'The view has been clicked!' );\n *\t\t} );\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\t/**\n\t * Creates an instance of the {@link module:ui/view~View} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t */\n\tconstructor( locale ) {\n\t\t/**\n\t\t * An HTML element of the view. `null` until {@link #render rendered}\n\t\t * from the {@link #template}.\n\t\t *\n\t\t *\t\tclass SampleView extends View {\n\t\t *\t\t\tconstructor() {\n\t\t *\t\t\t\tsuper();\n\t\t *\n\t\t *\t\t\t\t// A template instance the #element will be created from.\n\t\t *\t\t\t\tthis.setTemplate( {\n\t\t *\t\t\t\t\ttag: 'p'\n\t\t *\n\t\t *\t\t\t\t\t// ...\n\t\t *\t\t\t\t} );\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t *\t\tconst view = new SampleView();\n\t\t *\n\t\t *\t\t// Renders the #template.\n\t\t *\t\tview.render();\n\t\t *\n\t\t *\t\t// Append the HTML element of the view to <body>.\n\t\t *\t\tdocument.body.appendChild( view.element );\n\t\t *\n\t\t * **Note**: The element of the view can also be assigned directly:\n\t\t *\n\t\t *\t\tview.element = document.querySelector( '#my-container' );\n\t\t *\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis.element = null;\n\n\t\t/**\n\t\t * Set `true` when the view has already been {@link module:ui/view~View#render rendered}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isRendered\n\t\t */\n\t\tthis.isRendered = false;\n\n\t\t/**\n\t\t * A set of tools to localize the user interface.\n\t\t *\n\t\t * Also see {@link module:core/editor/editor~Editor#locale}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * Note: If {@link #locale} instance hasn't been passed to the view this method may not\n\t\t * be available.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method\n\t\t */\n\t\tthis.t = locale && locale.t;\n\n\t\t/**\n\t\t * Collections registered with {@link #createCollection}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set.<module:ui/viewcollection~ViewCollection>}\n\t\t */\n\t\tthis._viewCollections = new Collection();\n\n\t\t/**\n\t\t * A collection of view instances, which have been added directly\n\t\t * into the {@link module:ui/template~Template#children}.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._unboundChildren = this.createCollection();\n\n\t\t// Pass parent locale to its children.\n\t\tthis._viewCollections.on( 'add', ( evt, collection ) => {\n\t\t\tcollection.locale = locale;\n\t\t} );\n\n\t\t/**\n\t\t * Template of this view. It provides the {@link #element} representing\n\t\t * the view in DOM, which is {@link #render rendered}.\n\t\t *\n\t\t * @member {module:ui/template~Template} #template\n\t\t */\n\n\t\t/**\n\t\t * Cached {@link module:ui/template~BindChain bind chain} object created by the\n\t\t * {@link #template}. See {@link #bindTemplate}.\n\t\t *\n\t\t * @private\n\t\t * @member {Object} #_bindTemplate\n\t\t */\n\n\t\tthis.decorate( 'render' );\n\t}\n\n\t/**\n\t * Shorthand for {@link module:ui/template~Template.bind}, a binding\n\t * {@link module:ui/template~BindChain interface} pre–configured for the view instance.\n\t *\n\t * It provides {@link module:ui/template~BindChain#to `to()`} and\n\t * {@link module:ui/template~BindChain#if `if()`} methods that initialize bindings with\n\t * observable attributes and attach DOM listeners.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tconst bind = this.bindTemplate;\n\t *\n\t *\t\t\t\t// These {@link module:utils/observablemixin~Observable observable} attributes will control\n\t *\t\t\t\t// the state of the view in DOM.\n\t *\t\t\t\tthis.set( {\n\t *\t\t\t\t\telementClass: 'foo',\n\t *\t\t\t\t \tisEnabled: true\n\t *\t\t\t\t } );\n\t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\t// The class HTML attribute will follow elementClass\n\t *\t\t\t\t\t\t// and isEnabled view attributes.\n\t *\t\t\t\t\t\tclass: [\n\t *\t\t\t\t\t\t\tbind.to( 'elementClass' )\n\t *\t\t\t\t\t\t\tbind.if( 'isEnabled', 'present-when-enabled' )\n\t *\t\t\t\t\t\t]\n\t *\t\t\t\t\t},\n\t *\n\t *\t\t\t\t\ton: {\n\t *\t\t\t\t\t\t// The view will fire the \"clicked\" event upon clicking <p> in DOM.\n\t *\t\t\t\t\t\tclick: bind.to( 'clicked' )\n\t *\t\t\t\t\t}\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * @method #bindTemplate\n\t */\n\tget bindTemplate() {\n\t\tif ( this._bindTemplate ) {\n\t\t\treturn this._bindTemplate;\n\t\t}\n\n\t\treturn ( this._bindTemplate = Template.bind( this, this ) );\n\t}\n\n\t/**\n\t * Creates a new collection of views, which can be used as\n\t * {@link module:ui/template~Template#children} of this view.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.items = this.createCollection();\n \t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n\t *\t\t\t\t\t// `items` collection will render here.\n\t *\t\t\t\t\tchildren: this.items\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView( locale );\n\t *\t\tconst child = new ChildView( locale );\n\t *\n\t *\t\tview.render();\n\t *\n\t *\t\t// It will append <p></p> to the <body>.\n\t *\t\tdocument.body.appendChild( view.element );\n\t *\n\t *\t\t// From now on the child is nested under its parent, which is also reflected in DOM.\n\t *\t\t// <p><child#element></p>\n\t *\t\tview.items.add( child );\n\t *\n\t * @returns {module:ui/viewcollection~ViewCollection} A new collection of view instances.\n\t */\n\tcreateCollection() {\n\t\tconst collection = new ViewCollection();\n\n\t\tthis._viewCollections.add( collection );\n\n\t\treturn collection;\n\t}\n\n\t/**\n\t * Registers a new child view under the view instance. Once registered, a child\n\t * view is managed by its parent, including {@link #render rendering}\n\t * and {@link #destroy destruction}.\n\t *\n\t * To revert this, use {@link #deregisterChild}.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.childA = new SomeChildView( locale );\n\t *\t\t\t\tthis.childB = new SomeChildView( locale );\n\t *\n\t *\t\t\t\tthis.setTemplate( { tag: 'p' } );\n\t *\n\t *\t\t\t\t// Register the children.\n\t *\t\t\t\tthis.registerChild( [ this.childA, this.childB ] );\n\t *\t\t\t}\n\t *\n\t *\t\t\trender() {\n\t *\t\t\t\tsuper.render();\n\t *\n\t *\t\t\t\tthis.element.appendChild( this.childA.element );\n\t *\t\t\t\tthis.element.appendChild( this.childB.element );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView( locale );\n\t *\n\t *\t\tview.render();\n\t *\n\t *\t\t// Will append <p><childA#element><b></b><childB#element></p>.\n\t *\t\tdocument.body.appendChild( view.element );\n\t *\n\t * **Note**: There's no need to add child views if they're already referenced in the\n\t * {@link #template}:\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.childA = new SomeChildView( locale );\n\t *\t\t\t\tthis.childB = new SomeChildView( locale );\n\t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n \t *\t\t\t\t\t// These children will be added automatically. There's no\n \t *\t\t\t\t\t// need to call {@link #registerChild} for any of them.\n\t *\t\t\t\t\tchildren: [ this.childA, this.childB ]\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\n\t *\t\t\t// ...\n\t *\t\t}\n\t *\n\t * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Children views to be registered.\n\t */\n\tregisterChild( children ) {\n\t\tif ( !isIterable( children ) ) {\n\t\t\tchildren = [ children ];\n\t\t}\n\n\t\tfor ( const child of children ) {\n\t\t\tthis._unboundChildren.add( child );\n\t\t}\n\t}\n\n\t/**\n\t * The opposite of {@link #registerChild}. Removes a child view from this view instance.\n\t * Once removed, the child is no longer managed by its parent, e.g. it can safely\n\t * become a child of another parent view.\n\t *\n\t * @see #registerChild\n\t * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Child views to be removed.\n\t */\n\tderegisterChild( children ) {\n\t\tif ( !isIterable( children ) ) {\n\t\t\tchildren = [ children ];\n\t\t}\n\n\t\tfor ( const child of children ) {\n\t\t\tthis._unboundChildren.remove( child );\n\t\t}\n\t}\n\n\t/**\n\t * Sets the {@link #template} of the view with with given definition.\n\t *\n\t * A shorthand for:\n\t *\n\t *\t\tview.setTemplate( definition );\n\t *\n\t * @param {module:ui/template~TemplateDefinition} definition Definition of view's template.\n\t */\n\tsetTemplate( definition ) {\n\t\tthis.template = new Template( definition );\n\t}\n\n\t/**\n\t * {@link module:ui/template~Template.extend Extends} the {@link #template} of the view with\n\t * with given definition.\n\t *\n\t * A shorthand for:\n\t *\n\t *\t\tTemplate.extend( view.template, definition );\n\t *\n\t * **Note**: Is requires the {@link #template} to be already set. See {@link #setTemplate}.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} definition Definition which\n\t * extends the {@link #template}.\n\t */\n\textendTemplate( definition ) {\n\t\tTemplate.extend( this.template, definition );\n\t}\n\n\t/**\n\t * Recursively renders the view.\n\t *\n\t * Once the view is rendered:\n\t * * the {@link #element} becomes an HTML element out of {@link #template},\n\t * * the {@link #isRendered} flag is set `true`.\n\t *\n\t * **Note**: The children of the view:\n\t * * defined directly in the {@link #template}\n\t * * residing in collections created by the {@link #createCollection} method,\n\t * * and added by {@link #registerChild}\n\t * are also rendered in the process.\n\t *\n\t * In general, `render()` method is the right place to keep the code which refers to the\n\t * {@link #element} and should be executed at the very beginning of the view's life cycle.\n\t *\n\t * It is possible to {@link module:ui/template~Template.extend} the {@link #template} before\n\t * the view is rendered. To allow an early customization of the view (e.g. by its parent),\n\t * such references should be done in `render()`.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor() {\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\t// ...\n\t *\t\t\t\t} );\n\t *\t\t\t},\n\t *\n\t *\t\t\trender() {\n\t *\t\t\t\t// View#element becomes available.\n\t *\t\t\t\tsuper.render();\n\t *\n\t *\t\t\t\t// The \"scroll\" listener depends on #element.\n\t *\t\t\t\tthis.listenTo( window, 'scroll', () => {\n\t *\t\t\t\t\t// A reference to #element would render the #template and make it non-extendable.\n\t *\t\t\t\t\tif ( window.scrollY > 0 ) {\n\t *\t\t\t\t\t\tthis.element.scrollLeft = 100;\n\t *\t\t\t\t\t} else {\n\t *\t\t\t\t\t\tthis.element.scrollLeft = 0;\n\t *\t\t\t\t\t}\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView();\n\t *\n\t *\t\t// Let's customize the view before it gets rendered.\n\t *\t\tview.extendTemplate( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: [\n\t *\t\t\t\t\t'additional-class'\n\t *\t\t\t\t]\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Late rendering allows customization of the view.\n\t *\t\tview.render();\n\t */\n\trender() {\n\t\tif ( this.isRendered ) {\n\t\t\t/**\n\t\t\t * This View has already been rendered.\n\t\t\t *\n\t\t\t * @error ui-view-render-rendered\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-view-render-already-rendered: This View has already been rendered.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\t// Render #element of the view.\n\t\tif ( this.template ) {\n\t\t\tthis.element = this.template.render();\n\n\t\t\t// Auto–register view children from #template.\n\t\t\tthis.registerChild( this.template.getViews() );\n\t\t}\n\n\t\tthis.isRendered = true;\n\t}\n\n\t/**\n\t * Recursively destroys the view instance and child views added by {@link #registerChild} and\n\t * residing in collections created by the {@link #createCollection}.\n\t *\n\t * Destruction disables all event listeners:\n\t * * created on the view, e.g. `view.on( 'event', () => {} )`,\n\t * * defined in the {@link #template} for DOM events.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\n\t\tthis._viewCollections.map( c => c.destroy() );\n\n\t\t// Template isn't obligatory for views.\n\t\tif ( this.template && this.template._revertData ) {\n\t\t\tthis.template.revert( this.element );\n\t\t}\n\t}\n\n\t/**\n\t * Event fired by the {@link #render} method. Actual rendering is executed as a listener to\n\t * this event with the default priority.\n\t *\n\t * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n\t *\n\t * @event render\n\t */\n}\n\nmix( View, DomEmitterMixin );\nmix( View, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/command\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor commands.\n *\n * Commands are the main way to manipulate editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n *\n * By default commands are disabled when the editor is in {@link module:core/editor/editor~Editor#isReadOnly read-only} mode.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Command {\n\t/**\n\t * Creates a new `Command` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor on which this command will be used.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor on which this command will be used.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The value of the command. A concrete command class should define what it represents for it.\n\t\t *\n\t\t * For example, the `'bold'` command's value indicates whether the selection starts in a bolded text.\n\t\t * And the value of the `'link'` command may be an object with links details.\n\t\t *\n\t\t * It is possible for a command to have no value (e.g. for stateless actions such as `'imageUpload'`).\n\t\t *\n\t\t * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member #value\n\t\t */\n\t\tthis.set( 'value', undefined );\n\n\t\t/**\n\t\t * Flag indicating whether a command is enabled or disabled.\n\t\t * A disabled command will do nothing when executed.\n\t\t *\n\t\t * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n\t\t *\n\t\t * It is possible to disable a command from \"outside\". For instance, in your integration you may want to disable\n\t\t * a certain set of commands for the time being. To do that, you can use the fact that `isEnabled` is observable\n\t\t * and it fires the `set:isEnabled` event every time anyone tries to modify its value:\n\t\t *\n\t\t *\t\tfunction disableCommand( cmd ) {\n\t\t *\t\t\tcmd.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t *\n\t\t *\t\t\tcmd.isEnabled = false;\n\t\t *\n\t\t *\t\t\t// Make it possible to enable the command again.\n\t\t *\t\t\treturn () => {\n\t\t *\t\t\t\tcmd.off( 'set:isEnabled', forceDisable );\n\t\t *\t\t\t\tcmd.refresh();\n\t\t *\t\t\t};\n\t\t *\n\t\t *\t\t\tfunction forceDisable( evt ) {\n\t\t *\t\t\t\tevt.return = false;\n\t\t *\t\t\t\tevt.stop();\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t *\t\t// Usage:\n\t\t *\n\t\t *\t\t// Disabling the command.\n\t\t *\t\tconst enableBold = disableCommand( editor.commands.get( 'bold' ) );\n\t\t *\n\t\t *\t\t// Enabling the command again.\n\t\t *\t\tenableBold();\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', false );\n\n\t\t/**\n\t\t * Holds identifiers for {@link #forceDisabled} mechanism.\n\t\t *\n\t\t * @type {Set.<String>}\n\t\t * @private\n\t\t */\n\t\tthis._disableStack = new Set();\n\n\t\tthis.decorate( 'execute' );\n\n\t\t// By default every command is refreshed when changes are applied to the model.\n\t\tthis.listenTo( this.editor.model.document, 'change', () => {\n\t\t\tthis.refresh();\n\t\t} );\n\n\t\tthis.on( 'execute', evt => {\n\t\t\tif ( !this.isEnabled ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// By default commands are disabled when the editor is in read-only mode.\n\t\tthis.listenTo( editor, 'change:isReadOnly', ( evt, name, value ) => {\n\t\t\tif ( value ) {\n\t\t\t\tthis.forceDisabled( 'readOnlyMode' );\n\t\t\t} else {\n\t\t\t\tthis.clearForceDisabled( 'readOnlyMode' );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties\n\t * in this method.\n\t *\n\t * This method is automatically called when\n\t * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n\t */\n\trefresh() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Disables the command.\n\t *\n\t * Command may be disabled by multiple features or algorithms (at once). When disabling a command, unique id should be passed\n\t * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the command.\n\t * The command becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n\t *\n\t * Disabling and enabling a command:\n\t *\n\t *\t\tcommand.isEnabled; // -> true\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> false\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * Command disabled by multiple features:\n\t *\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.forceDisabled( 'OtherFeature' );\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> false\n\t *\t\tcommand.clearForceDisabled( 'OtherFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * Multiple disabling with the same identifier is redundant:\n\t *\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * **Note:** some commands or algorithms may have more complex logic when it comes to enabling or disabling certain commands,\n\t * so the command might be still disabled after {@link #clearForceDisabled} was used.\n\t *\n\t * @param {String} id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the command.\n\t */\n\tforceDisabled( id ) {\n\t\tthis._disableStack.add( id );\n\n\t\tif ( this._disableStack.size == 1 ) {\n\t\t\tthis.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t\tthis.isEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * Clears forced disable previously set through {@link #clearForceDisabled}. See {@link #clearForceDisabled}.\n\t *\n\t * @param {String} id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n\t */\n\tclearForceDisabled( id ) {\n\t\tthis._disableStack.delete( id );\n\n\t\tif ( this._disableStack.size == 0 ) {\n\t\t\tthis.off( 'set:isEnabled', forceDisable );\n\t\t\tthis.refresh();\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}\n\t * to the command.\n\t *\n\t * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n\t * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n\t *\n\t * In order to see how to disable a command from \"outside\" see the {@link #isEnabled} documentation.\n\t *\n\t * @fires execute\n\t */\n\texecute() {}\n\n\t/**\n\t * Destroys the command.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Event fired by the {@link #execute} method. The command action is a listener to this event so it's\n\t * possible to change/cancel the behavior of the command by listening to this event.\n\t *\n\t * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n\t *\n\t * **Note:** This event is fired even if command is disabled. However, it is automatically blocked\n\t * by a high priority listener in order to prevent command execution.\n\t *\n\t * @event execute\n\t */\n}\n\nmix( Command, ObservableMixin );\n\n// Helper function that forces command to be disabled.\nfunction forceDisable( evt ) {\n\tevt.return = false;\n\tevt.stop();\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/emittermixin\n */\n\nimport EventInfo from './eventinfo';\nimport uid from './uid';\nimport priorities from './priorities';\n\n// To check if component is loaded more than once.\nimport './version';\nimport CKEditorError from './ckeditorerror';\n\nconst _listeningTo = Symbol( 'listeningTo' );\nconst _emitterId = Symbol( 'emitterId' );\n\n/**\n * Mixin that injects the {@link ~Emitter events API} into its host.\n *\n * @mixin EmitterMixin\n * @implements module:utils/emittermixin~Emitter\n */\nconst EmitterMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\ton( event, callback, options = {} ) {\n\t\tthis.listenTo( this, event, callback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tonce( event, callback, options ) {\n\t\tlet wasFired = false;\n\n\t\tconst onceCallback = function( event, ...args ) {\n\t\t\t// Ensure the callback is called only once even if the callback itself leads to re-firing the event\n\t\t\t// (which would call the callback again).\n\t\t\tif ( !wasFired ) {\n\t\t\t\twasFired = true;\n\n\t\t\t\t// Go off() at the first call.\n\t\t\t\tevent.off();\n\n\t\t\t\t// Go with the original callback.\n\t\t\t\tcallback.call( this, event, ...args );\n\t\t\t}\n\t\t};\n\n\t\t// Make a similar on() call, simply replacing the callback.\n\t\tthis.listenTo( this, event, onceCallback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\toff( event, callback ) {\n\t\tthis.stopListening( this, event, callback );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tlistenTo( emitter, event, callback, options = {} ) {\n\t\tlet emitterInfo, eventCallbacks;\n\n\t\t// _listeningTo contains a list of emitters that this object is listening to.\n\t\t// This list has the following format:\n\t\t//\n\t\t// _listeningTo: {\n\t\t//     emitterId: {\n\t\t//         emitter: emitter,\n\t\t//         callbacks: {\n\t\t//             event1: [ callback1, callback2, ... ]\n\t\t//             ....\n\t\t//         }\n\t\t//     },\n\t\t//     ...\n\t\t// }\n\n\t\tif ( !this[ _listeningTo ] ) {\n\t\t\tthis[ _listeningTo ] = {};\n\t\t}\n\n\t\tconst emitters = this[ _listeningTo ];\n\n\t\tif ( !_getEmitterId( emitter ) ) {\n\t\t\t_setEmitterId( emitter );\n\t\t}\n\n\t\tconst emitterId = _getEmitterId( emitter );\n\n\t\tif ( !( emitterInfo = emitters[ emitterId ] ) ) {\n\t\t\temitterInfo = emitters[ emitterId ] = {\n\t\t\t\temitter,\n\t\t\t\tcallbacks: {}\n\t\t\t};\n\t\t}\n\n\t\tif ( !( eventCallbacks = emitterInfo.callbacks[ event ] ) ) {\n\t\t\teventCallbacks = emitterInfo.callbacks[ event ] = [];\n\t\t}\n\n\t\teventCallbacks.push( callback );\n\n\t\t// Finally register the callback to the event.\n\t\tcreateEventNamespace( emitter, event );\n\t\tconst lists = getCallbacksListsForNamespace( emitter, event );\n\t\tconst priority = priorities.get( options.priority );\n\n\t\tconst callbackDefinition = {\n\t\t\tcallback,\n\t\t\tpriority\n\t\t};\n\n\t\t// Add the callback to all callbacks list.\n\t\tfor ( const callbacks of lists ) {\n\t\t\t// Add the callback to the list in the right priority position.\n\t\t\tlet added = false;\n\n\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\tif ( callbacks[ i ].priority < priority ) {\n\t\t\t\t\tcallbacks.splice( i, 0, callbackDefinition );\n\t\t\t\t\tadded = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add at the end, if right place was not found.\n\t\t\tif ( !added ) {\n\t\t\t\tcallbacks.push( callbackDefinition );\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\tconst emitters = this[ _listeningTo ];\n\t\tlet emitterId = emitter && _getEmitterId( emitter );\n\t\tconst emitterInfo = emitters && emitterId && emitters[ emitterId ];\n\t\tconst eventCallbacks = emitterInfo && event && emitterInfo.callbacks[ event ];\n\n\t\t// Stop if nothing has been listened.\n\t\tif ( !emitters || ( emitter && !emitterInfo ) || ( event && !eventCallbacks ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// All params provided. off() that single callback.\n\t\tif ( callback ) {\n\t\t\tremoveCallback( emitter, event, callback );\n\t\t}\n\t\t// Only `emitter` and `event` provided. off() all callbacks for that event.\n\t\telse if ( eventCallbacks ) {\n\t\t\twhile ( ( callback = eventCallbacks.pop() ) ) {\n\t\t\t\tremoveCallback( emitter, event, callback );\n\t\t\t}\n\n\t\t\tdelete emitterInfo.callbacks[ event ];\n\t\t}\n\t\t// Only `emitter` provided. off() all events for that emitter.\n\t\telse if ( emitterInfo ) {\n\t\t\tfor ( event in emitterInfo.callbacks ) {\n\t\t\t\tthis.stopListening( emitter, event );\n\t\t\t}\n\t\t\tdelete emitters[ emitterId ];\n\t\t}\n\t\t// No params provided. off() all emitters.\n\t\telse {\n\t\t\tfor ( emitterId in emitters ) {\n\t\t\t\tthis.stopListening( emitters[ emitterId ].emitter );\n\t\t\t}\n\t\t\tdelete this[ _listeningTo ];\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfire( eventOrInfo, ...args ) {\n\t\ttry {\n\t\t\tconst eventInfo = eventOrInfo instanceof EventInfo ? eventOrInfo : new EventInfo( this, eventOrInfo );\n\t\t\tconst event = eventInfo.name;\n\t\t\tlet callbacks = getCallbacksForEvent( this, event );\n\n\t\t\t// Record that the event passed this emitter on its path.\n\t\t\teventInfo.path.push( this );\n\n\t\t\t// Handle event listener callbacks first.\n\t\t\tif ( callbacks ) {\n\t\t\t\t// Arguments passed to each callback.\n\t\t\t\tconst callbackArgs = [ eventInfo, ...args ];\n\n\t\t\t\t// Copying callbacks array is the easiest and most secure way of preventing infinite loops, when event callbacks\n\t\t\t\t// are added while processing other callbacks. Previous solution involved adding counters (unique ids) but\n\t\t\t\t// failed if callbacks were added to the queue before currently processed callback.\n\t\t\t\t// If this proves to be too inefficient, another method is to change `.on()` so callbacks are stored if same\n\t\t\t\t// event is currently processed. Then, `.fire()` at the end, would have to add all stored events.\n\t\t\t\tcallbacks = Array.from( callbacks );\n\n\t\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\t\tcallbacks[ i ].callback.apply( this, callbackArgs );\n\n\t\t\t\t\t// Remove the callback from future requests if off() has been called.\n\t\t\t\t\tif ( eventInfo.off.called ) {\n\t\t\t\t\t\t// Remove the called mark for the next calls.\n\t\t\t\t\t\tdelete eventInfo.off.called;\n\n\t\t\t\t\t\tremoveCallback( this, event, callbacks[ i ].callback );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Do not execute next callbacks if stop() was called.\n\t\t\t\t\tif ( eventInfo.stop.called ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delegate event to other emitters if needed.\n\t\t\tif ( this._delegations ) {\n\t\t\t\tconst destinations = this._delegations.get( event );\n\t\t\t\tconst passAllDestinations = this._delegations.get( '*' );\n\n\t\t\t\tif ( destinations ) {\n\t\t\t\t\tfireDelegatedEvents( destinations, eventInfo, args );\n\t\t\t\t}\n\n\t\t\t\tif ( passAllDestinations ) {\n\t\t\t\t\tfireDelegatedEvents( passAllDestinations, eventInfo, args );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn eventInfo.return;\n\t\t} catch ( err ) {\n\t\t\tCKEditorError.rethrowUnexpectedError( err, this );\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdelegate( ...events ) {\n\t\treturn {\n\t\t\tto: ( emitter, nameOrFunction ) => {\n\t\t\t\tif ( !this._delegations ) {\n\t\t\t\t\tthis._delegations = new Map();\n\t\t\t\t}\n\n\t\t\t\t// Originally there was a for..of loop which unfortunately caused an error in Babel that didn't allow\n\t\t\t\t// build an application. See: https://github.com/ckeditor/ckeditor5-react/issues/40.\n\t\t\t\tevents.forEach( eventName => {\n\t\t\t\t\tconst destinations = this._delegations.get( eventName );\n\n\t\t\t\t\tif ( !destinations ) {\n\t\t\t\t\t\tthis._delegations.set( eventName, new Map( [ [ emitter, nameOrFunction ] ] ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestinations.set( emitter, nameOrFunction );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstopDelegating( event, emitter ) {\n\t\tif ( !this._delegations ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !event ) {\n\t\t\tthis._delegations.clear();\n\t\t} else if ( !emitter ) {\n\t\t\tthis._delegations.delete( event );\n\t\t} else {\n\t\t\tconst destinations = this._delegations.get( event );\n\n\t\t\tif ( destinations ) {\n\t\t\t\tdestinations.delete( emitter );\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default EmitterMixin;\n\n/**\n * Emitter/listener interface.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/emittermixin~EmitterMixin} mixin.\n *\n * @interface Emitter\n */\n\n/**\n * Registers a callback function to be executed when an event is fired.\n *\n * Shorthand for {@link #listenTo `this.listenTo( this, event, callback, options )`} (it makes the emitter\n * listen on itself).\n *\n * @method #on\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Registers a callback function to be executed on the next time the event is fired only. This is similar to\n * calling {@link #on} followed by {@link #off} in the callback.\n *\n * @method #once\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops executing the callback on the given event.\n * Shorthand for {@link #stopListening `this.stopListening( this, event, callback )`}.\n *\n * @method #off\n * @param {String} event The name of the event.\n * @param {Function} callback The function to stop being called.\n */\n\n/**\n * Registers a callback function to be executed when an event is fired in a specific (emitter) object.\n *\n * Events can be grouped in namespaces using `:`.\n * When namespaced event is fired, it additionally fires all callbacks for that namespace.\n *\n *\t\t// myEmitter.on( ... ) is a shorthand for myEmitter.listenTo( myEmitter, ... ).\n *\t\tmyEmitter.on( 'myGroup', genericCallback );\n *\t\tmyEmitter.on( 'myGroup:myEvent', specificCallback );\n *\n *\t\t// genericCallback is fired.\n *\t\tmyEmitter.fire( 'myGroup' );\n *\t\t// both genericCallback and specificCallback are fired.\n *\t\tmyEmitter.fire( 'myGroup:myEvent' );\n *\t\t// genericCallback is fired even though there are no callbacks for \"foo\".\n *\t\tmyEmitter.fire( 'myGroup:foo' );\n *\n * An event callback can {@link module:utils/eventinfo~EventInfo#stop stop the event} and\n * set the {@link module:utils/eventinfo~EventInfo#return return value} of the {@link #fire} method.\n *\n * @method #listenTo\n * @param {module:utils/emittermixin~Emitter} emitter The object that fires the event.\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops listening for events. It can be used at different levels:\n *\n * * To stop listening to a specific callback.\n * * To stop listening to a specific event.\n * * To stop listening to all events fired by a specific object.\n * * To stop listening to all events fired by all objects.\n *\n * @method #stopListening\n * @param {module:utils/emittermixin~Emitter} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n * for all events from `emitter`.\n * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n * `event`.\n */\n\n/**\n * Fires an event, executing all callbacks registered for it.\n *\n * The first parameter passed to callbacks is an {@link module:utils/eventinfo~EventInfo} object,\n * followed by the optional `args` provided in the `fire()` method call.\n *\n * @method #fire\n * @param {String|module:utils/eventinfo~EventInfo} eventOrInfo The name of the event or `EventInfo` object if event is delegated.\n * @param {...*} [args] Additional arguments to be passed to the callbacks.\n * @returns {*} By default the method returns `undefined`. However, the return value can be changed by listeners\n * through modification of the {@link module:utils/eventinfo~EventInfo#return `evt.return`}'s property (the event info\n * is the first param of every callback).\n */\n\n/**\n * Delegates selected events to another {@link module:utils/emittermixin~Emitter}. For instance:\n *\n *\t\temitterA.delegate( 'eventX' ).to( emitterB );\n *\t\temitterA.delegate( 'eventX', 'eventY' ).to( emitterC );\n *\n * then `eventX` is delegated (fired by) `emitterB` and `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventX', data );\n *\n * and `eventY` is delegated (fired by) `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventY', data );\n *\n * @method #delegate\n * @param {...String} events Event names that will be delegated to another emitter.\n * @returns {module:utils/emittermixin~EmitterMixinDelegateChain}\n */\n\n/**\n * Stops delegating events. It can be used at different levels:\n *\n * * To stop delegating all events.\n * * To stop delegating a specific event to all emitters.\n * * To stop delegating a specific event to a specific emitter.\n *\n * @method #stopDelegating\n * @param {String} [event] The name of the event to stop delegating. If omitted, stops it all delegations.\n * @param {module:utils/emittermixin~Emitter} [emitter] (requires `event`) The object to stop delegating a particular event to.\n * If omitted, stops delegation of `event` to all emitters.\n */\n\n/**\n * Checks if `listeningEmitter` listens to an emitter with given `listenedToEmitterId` and if so, returns that emitter.\n * If not, returns `null`.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} listeningEmitter An emitter that listens.\n * @param {String} listenedToEmitterId Unique emitter id of emitter listened to.\n * @returns {module:utils/emittermixin~Emitter|null}\n */\nexport function _getEmitterListenedTo( listeningEmitter, listenedToEmitterId ) {\n\tif ( listeningEmitter[ _listeningTo ] && listeningEmitter[ _listeningTo ][ listenedToEmitterId ] ) {\n\t\treturn listeningEmitter[ _listeningTo ][ listenedToEmitterId ].emitter;\n\t}\n\n\treturn null;\n}\n\n/**\n * Sets emitter's unique id.\n *\n * **Note:** `_emitterId` can be set only once.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} emitter An emitter for which id will be set.\n * @param {String} [id] Unique id to set. If not passed, random unique id will be set.\n */\nexport function _setEmitterId( emitter, id ) {\n\tif ( !emitter[ _emitterId ] ) {\n\t\temitter[ _emitterId ] = id || uid();\n\t}\n}\n\n/**\n * Returns emitter's unique id.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} emitter An emitter which id will be returned.\n */\nexport function _getEmitterId( emitter ) {\n\treturn emitter[ _emitterId ];\n}\n\n// Gets the internal `_events` property of the given object.\n// `_events` property store all lists with callbacks for registered event names.\n// If there were no events registered on the object, empty `_events` object is created.\nfunction getEvents( source ) {\n\tif ( !source._events ) {\n\t\tObject.defineProperty( source, '_events', {\n\t\t\tvalue: {}\n\t\t} );\n\t}\n\n\treturn source._events;\n}\n\n// Creates event node for generic-specific events relation architecture.\nfunction makeEventNode() {\n\treturn {\n\t\tcallbacks: [],\n\t\tchildEvents: []\n\t};\n}\n\n// Creates an architecture for generic-specific events relation.\n// If needed, creates all events for given eventName, i.e. if the first registered event\n// is foo:bar:abc, it will create foo:bar:abc, foo:bar and foo event and tie them together.\n// It also copies callbacks from more generic events to more specific events when\n// specific events are created.\nfunction createEventNamespace( source, eventName ) {\n\tconst events = getEvents( source );\n\n\t// First, check if the event we want to add to the structure already exists.\n\tif ( events[ eventName ] ) {\n\t\t// If it exists, we don't have to do anything.\n\t\treturn;\n\t}\n\n\t// In other case, we have to create the structure for the event.\n\t// Note, that we might need to create intermediate events too.\n\t// I.e. if foo:bar:abc is being registered and we only have foo in the structure,\n\t// we need to also register foo:bar.\n\n\t// Currently processed event name.\n\tlet name = eventName;\n\t// Name of the event that is a child event for currently processed event.\n\tlet childEventName = null;\n\n\t// Array containing all newly created specific events.\n\tconst newEventNodes = [];\n\n\t// While loop can't check for ':' index because we have to handle generic events too.\n\t// In each loop, we truncate event name, going from the most specific name to the generic one.\n\t// I.e. foo:bar:abc -> foo:bar -> foo.\n\twhile ( name !== '' ) {\n\t\tif ( events[ name ] ) {\n\t\t\t// If the currently processed event name is already registered, we can be sure\n\t\t\t// that it already has all the structure created, so we can break the loop here\n\t\t\t// as no more events need to be registered.\n\t\t\tbreak;\n\t\t}\n\n\t\t// If this event is not yet registered, create a new object for it.\n\t\tevents[ name ] = makeEventNode();\n\t\t// Add it to the array with newly created events.\n\t\tnewEventNodes.push( events[ name ] );\n\n\t\t// Add previously processed event name as a child of this event.\n\t\tif ( childEventName ) {\n\t\t\tevents[ name ].childEvents.push( childEventName );\n\t\t}\n\n\t\tchildEventName = name;\n\t\t// If `.lastIndexOf()` returns -1, `.substr()` will return '' which will break the loop.\n\t\tname = name.substr( 0, name.lastIndexOf( ':' ) );\n\t}\n\n\tif ( name !== '' ) {\n\t\t// If name is not empty, we found an already registered event that was a parent of the\n\t\t// event we wanted to register.\n\n\t\t// Copy that event's callbacks to newly registered events.\n\t\tfor ( const node of newEventNodes ) {\n\t\t\tnode.callbacks = events[ name ].callbacks.slice();\n\t\t}\n\n\t\t// Add last newly created event to the already registered event.\n\t\tevents[ name ].childEvents.push( childEventName );\n\t}\n}\n\n// Gets an array containing callbacks list for a given event and it's more specific events.\n// I.e. if given event is foo:bar and there is also foo:bar:abc event registered, this will\n// return callback list of foo:bar and foo:bar:abc (but not foo).\nfunction getCallbacksListsForNamespace( source, eventName ) {\n\tconst eventNode = getEvents( source )[ eventName ];\n\n\tif ( !eventNode ) {\n\t\treturn [];\n\t}\n\n\tlet callbacksLists = [ eventNode.callbacks ];\n\n\tfor ( let i = 0; i < eventNode.childEvents.length; i++ ) {\n\t\tconst childCallbacksLists = getCallbacksListsForNamespace( source, eventNode.childEvents[ i ] );\n\n\t\tcallbacksLists = callbacksLists.concat( childCallbacksLists );\n\t}\n\n\treturn callbacksLists;\n}\n\n// Get the list of callbacks for a given event, but only if there any callbacks have been registered.\n// If there are no callbacks registered for given event, it checks if this is a specific event and looks\n// for callbacks for it's more generic version.\nfunction getCallbacksForEvent( source, eventName ) {\n\tlet event;\n\n\tif ( !source._events || !( event = source._events[ eventName ] ) || !event.callbacks.length ) {\n\t\t// There are no callbacks registered for specified eventName.\n\t\t// But this could be a specific-type event that is in a namespace.\n\t\tif ( eventName.indexOf( ':' ) > -1 ) {\n\t\t\t// If the eventName is specific, try to find callback lists for more generic event.\n\t\t\treturn getCallbacksForEvent( source, eventName.substr( 0, eventName.lastIndexOf( ':' ) ) );\n\t\t} else {\n\t\t\t// If this is a top-level generic event, return null;\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn event.callbacks;\n}\n\n// Fires delegated events for given map of destinations.\n//\n// @private\n// * @param {Map.<utils.Emitter>} destinations A map containing\n// `[ {@link module:utils/emittermixin~Emitter}, \"event name\" ]` pair destinations.\n// * @param {utils.EventInfo} eventInfo The original event info object.\n// * @param {Array.<*>} fireArgs Arguments the original event was fired with.\nfunction fireDelegatedEvents( destinations, eventInfo, fireArgs ) {\n\tfor ( let [ emitter, name ] of destinations ) {\n\t\tif ( !name ) {\n\t\t\tname = eventInfo.name;\n\t\t} else if ( typeof name == 'function' ) {\n\t\t\tname = name( eventInfo.name );\n\t\t}\n\n\t\tconst delegatedInfo = new EventInfo( eventInfo.source, name );\n\n\t\tdelegatedInfo.path = [ ...eventInfo.path ];\n\n\t\temitter.fire( delegatedInfo, ...fireArgs );\n\t}\n}\n\n// Removes callback from emitter for given event.\n//\n// @param {module:utils/emittermixin~Emitter} emitter\n// @param {String} event\n// @param {Function} callback\nfunction removeCallback( emitter, event, callback ) {\n\tconst lists = getCallbacksListsForNamespace( emitter, event );\n\n\tfor ( const callbacks of lists ) {\n\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\tif ( callbacks[ i ].callback == callback ) {\n\t\t\t\t// Remove the callback from the list (fixing the next index).\n\t\t\t\tcallbacks.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * The return value of {@link ~EmitterMixin#delegate}.\n *\n * @interface module:utils/emittermixin~EmitterMixinDelegateChain\n */\n\n/**\n * Selects destination for {@link module:utils/emittermixin~EmitterMixin#delegate} events.\n *\n * @method #to\n * @param {module:utils/emittermixin~Emitter} emitter An `EmitterMixin` instance which is the destination for delegated events.\n * @param {String|Function} [nameOrFunction] A custom event name or function which converts the original name string.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils related to keyboard support.\n *\n * @module utils/keyboard\n */\n\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\n\nconst macGlyphsToModifiers = {\n\t'⌘': 'ctrl',\n\t'⇧': 'shift',\n\t'⌥': 'alt'\n};\n\nconst modifiersToMacGlyphs = {\n\t'ctrl': '⌘',\n\t'shift': '⇧',\n\t'alt': '⌥'\n};\n\n/**\n * Object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\nexport const keyCodes = generateKnownKeyCodes();\n\n/**\n * Converts a key name or a {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} Key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\nexport function getCode( key ) {\n\tlet keyCode;\n\n\tif ( typeof key == 'string' ) {\n\t\tkeyCode = keyCodes[ key.toLowerCase() ];\n\n\t\tif ( !keyCode ) {\n\t\t\t/**\n\t\t\t * Unknown key name. Only key names contained by the {@link module:utils/keyboard~keyCodes} can be used.\n\t\t\t *\n\t\t\t * @errror keyboard-unknown-key\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'keyboard-unknown-key: Unknown key name.',\n\t\t\t\tnull, { key }\n\t\t\t);\n\t\t}\n\t} else {\n\t\tkeyCode = key.keyCode +\n\t\t\t( key.altKey ? keyCodes.alt : 0 ) +\n\t\t\t( key.ctrlKey ? keyCodes.ctrl : 0 ) +\n\t\t\t( key.shiftKey ? keyCodes.shift : 0 );\n\t}\n\n\treturn keyCode;\n}\n\n/**\n * Parses keystroke and returns a keystroke code that will match the code returned by\n * link {@link module:utils/keyboard.getCode} for a corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * @param {String|Array.<Number|String>} keystroke Keystroke definition.\n * @returns {Number} Keystroke code.\n */\nexport function parseKeystroke( keystroke ) {\n\tif ( typeof keystroke == 'string' ) {\n\t\tkeystroke = splitKeystrokeText( keystroke );\n\t}\n\n\treturn keystroke\n\t\t.map( key => ( typeof key == 'string' ) ? getCode( key ) : key )\n\t\t.reduce( ( key, sum ) => sum + key, 0 );\n}\n\n/**\n * It translates any keystroke string text like `\"CTRL+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on Mac OSX.\n *\n * @param {String} keystroke Keystroke text.\n * @returns {String} Keystroke text specific for the environment.\n */\nexport function getEnvKeystrokeText( keystroke ) {\n\tif ( !env.isMac ) {\n\t\treturn keystroke;\n\t}\n\n\treturn splitKeystrokeText( keystroke )\n\t\t// Replace modifiers (e.g. \"ctrl\") with Mac glyphs (e.g. \"⌘\") first.\n\t\t.map( key => modifiersToMacGlyphs[ key.toLowerCase() ] || key )\n\n\t\t// Decide whether to put \"+\" between keys in the keystroke or not.\n\t\t.reduce( ( value, key ) => {\n\t\t\tif ( value.slice( -1 ) in macGlyphsToModifiers ) {\n\t\t\t\treturn value + key;\n\t\t\t} else {\n\t\t\t\treturn value + '+' + key;\n\t\t\t}\n\t\t} );\n}\n\nfunction generateKnownKeyCodes() {\n\tconst keyCodes = {\n\t\tarrowleft: 37,\n\t\tarrowup: 38,\n\t\tarrowright: 39,\n\t\tarrowdown: 40,\n\t\tbackspace: 8,\n\t\tdelete: 46,\n\t\tenter: 13,\n\t\tspace: 32,\n\t\tesc: 27,\n\t\ttab: 9,\n\n\t\t// The idea about these numbers is that they do not collide with any real key codes, so we can use them\n\t\t// like bit masks.\n\t\tctrl: 0x110000,\n\t\t// Has the same code as ctrl, because their behaviour should be unified across the editor.\n\t\t// See http://ckeditor.github.io/editor-recommendations/general-policies#ctrl-vs-cmd\n\t\tcmd: 0x110000,\n\t\tshift: 0x220000,\n\t\talt: 0x440000\n\t};\n\n\t// a-z\n\tfor ( let code = 65; code <= 90; code++ ) {\n\t\tconst letter = String.fromCharCode( code );\n\n\t\tkeyCodes[ letter.toLowerCase() ] = code;\n\t}\n\n\t// 0-9\n\tfor ( let code = 48; code <= 57; code++ ) {\n\t\tkeyCodes[ code - 48 ] = code;\n\t}\n\n\t// F1-F12\n\tfor ( let code = 112; code <= 123; code++ ) {\n\t\tkeyCodes[ 'f' + ( code - 111 ) ] = code;\n\t}\n\n\treturn keyCodes;\n}\n\nfunction splitKeystrokeText( keystroke ) {\n\treturn keystroke.split( /\\s*\\+\\s*/ );\n}\n\n/**\n * Information about a keystroke.\n *\n * @interface module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode).\n *\n * @member {Number} module:utils/keyboard~KeystrokeInfo#keyCode\n */\n\n/**\n * Whether the <kbd>Alt</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#altKey\n */\n\n/**\n * Whether the <kbd>Ctrl</kbd> or <kbd>Cmd</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#ctrlKey\n */\n\n/**\n * Whether the <kbd>Shift</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#shiftKey\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/range\n */\n\nimport Position from './position';\nimport TreeWalker from './treewalker';\n\n/**\n * Range in the view tree. A range is represented by its start and end {@link module:engine/view/position~Position positions}.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Range {\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** Constructor creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at the `start` position.\n\t */\n\tconstructor( start, end = null ) {\n\t\t/**\n\t\t * Start position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position}\n\t\t */\n\t\tthis.start = start.clone();\n\n\t\t/**\n\t\t * End position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position}\n\t\t */\n\t\tthis.end = end ? end.clone() : start.clone();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n\t * them together with additional information like length or {@link module:engine/view/position~Position positions},\n\t * grouped as {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * This iterator uses {@link module:engine/view/treewalker~TreeWalker TreeWalker} with `boundaries` set to this range and\n\t * `ignoreElementEnd` option\n\t * set to `true`.\n\t *\n\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\n\t}\n\n\t/**\n\t * Returns whether the range is collapsed, that is it start and end positions are equal.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.start.isEqual( this.end );\n\t}\n\n\t/**\n\t * Returns whether this range is flat, that is if {@link module:engine/view/range~Range#start start} position and\n\t * {@link module:engine/view/range~Range#end end} position are in the same {@link module:engine/view/position~Position#parent parent}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isFlat() {\n\t\treturn this.start.parent === this.end.parent;\n\t}\n\n\t/**\n\t * Range root element.\n\t *\n\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.start.root;\n\t}\n\n\t/**\n\t * Creates a maximal range that has the same content as this range but is expanded in both ways (at the beginning\n\t * and at the end).\n\t *\n\t * For example:\n\t *\n\t *\t\t<p>Foo</p><p><b>{Bar}</b></p> -> <p>Foo</p>[<p><b>Bar</b>]</p>\n\t *\t\t<p><b>foo</b>{bar}<span></span></p> -> <p><b>foo[</b>bar<span></span>]</p>\n\t *\n\t * Note that in the sample above:\n\t *\n\t * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n\t * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n\t * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n\t *\n\t * @returns {module:engine/view/range~Range} Enlarged range.\n\t */\n\tgetEnlarged() {\n\t\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\n\t\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip );\n\n\t\t// Fix positions, in case if they are in Text node.\n\t\tif ( start.parent.is( 'text' ) && start.isAtStart ) {\n\t\t\tstart = Position._createBefore( start.parent );\n\t\t}\n\n\t\tif ( end.parent.is( 'text' ) && end.isAtEnd ) {\n\t\t\tend = Position._createAfter( end.parent );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a minimum range that has the same content as this range but is trimmed in both ways (at the beginning\n\t * and at the end).\n\t *\n\t * For example:\n\t *\n\t *\t\t<p>Foo</p>[<p><b>Bar</b>]</p> -> <p>Foo</p><p><b>{Bar}</b></p>\n\t *\t\t<p><b>foo[</b>bar<span></span>]</p> -> <p><b>foo</b>{bar}<span></span></p>\n\t *\n\t * Note that in the sample above:\n\t *\n\t * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n\t * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n\t * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n\t *\n\t * @returns {module:engine/view/range~Range} Shrink range.\n\t */\n\tgetTrimmed() {\n\t\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip );\n\n\t\tif ( start.isAfter( this.end ) || start.isEqual( this.end ) ) {\n\t\t\treturn new Range( start, start );\n\t\t}\n\n\t\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\n\t\tconst nodeAfterStart = start.nodeAfter;\n\t\tconst nodeBeforeEnd = end.nodeBefore;\n\n\t\t// Because TreeWalker prefers positions next to text node, we need to move them manually into these text nodes.\n\t\tif ( nodeAfterStart && nodeAfterStart.is( 'text' ) ) {\n\t\t\tstart = new Position( nodeAfterStart, 0 );\n\t\t}\n\n\t\tif ( nodeBeforeEnd && nodeBeforeEnd.is( 'text' ) ) {\n\t\t\tend = new Position( nodeBeforeEnd, nodeBeforeEnd.data.length );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Two ranges are equal if their start and end positions are equal.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise\n\t */\n\tisEqual( otherRange ) {\n\t\treturn this == otherRange || ( this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end ) );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/view/position~Position position}.\n\t *\n\t * @param {module:engine/view/position~Position} position Position to check.\n\t * @returns {Boolean} `true` if given {@link module:engine/view/position~Position position} is contained in this range,\n\t * `false` otherwise.\n\t */\n\tcontainsPosition( position ) {\n\t\treturn position.isAfter( this.start ) && position.isBefore( this.end );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/view/range~Range range}.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to check.\n\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n\t * @returns {Boolean} `true` if given {@link module:engine/view/range~Range range} boundaries are contained by this range, `false`\n\t * otherwise.\n\t */\n\tcontainsRange( otherRange, loose = false ) {\n\t\tif ( otherRange.isCollapsed ) {\n\t\t\tloose = false;\n\t\t}\n\n\t\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\n\t\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\n\n\t\treturn containsStart && containsEnd;\n\t}\n\n\t/**\n\t * Computes which part(s) of this {@link module:engine/view/range~Range range} is not a part of given\n\t * {@link module:engine/view/range~Range range}.\n\t * Returned array contains zero, one or two {@link module:engine/view/range~Range ranges}.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet foo = downcastWriter.createText( 'foo' );\n\t *\t\tlet img = downcastWriter.createContainerElement( 'img' );\n\t *\t\tlet bar = downcastWriter.createText( 'bar' );\n\t *\t\tlet p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n\t *\n\t *\t\tlet range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n\t *\t\tlet otherRange = view.createRange( // \"oo\", img, \"ba\" are in range.\n\t *\t\t\tview.createPositionAt( foo, 1 ),\n\t *\t\t\tview.createPositionAt( bar, 2 )\n\t *\t\t);\n\t *\t\tlet transformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has no ranges because `otherRange` contains `range`\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has one range: from ( p, 2 ) to ( bar, 1 )\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( p, 1 ), view.createPositionAt( p, 2 ) ); // img is in range.\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has two ranges: from ( foo, 1 ) to ( p, 1 ) and from ( p, 2 ) to ( bar, 1 )\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to differentiate against.\n\t * @returns {Array.<module:engine/view/range~Range>} The difference between ranges.\n\t */\n\tgetDifference( otherRange ) {\n\t\tconst ranges = [];\n\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect.\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the start to the middle of this range.\n\t\t\t\tranges.push( new Range( this.start, otherRange.start ) );\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the middle of this range to the end.\n\t\t\t\tranges.push( new Range( otherRange.end, this.end ) );\n\t\t\t}\n\t\t} else {\n\t\t\t// Ranges do not intersect, return the original range.\n\t\t\tranges.push( this.clone() );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an intersection of this {@link module:engine/view/range~Range range} and given {@link module:engine/view/range~Range range}.\n\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet foo = downcastWriter.createText( 'foo' );\n\t *\t\tlet img = downcastWriter.createContainerElement( 'img' );\n\t *\t\tlet bar = downcastWriter.createText( 'bar' );\n\t *\t\tlet p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n\t *\n\t *\t\tlet range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n\t *\t\tlet otherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n\t *\t\tlet transformed = range.getIntersection( otherRange ); // range from ( foo, 1 ) to ( p, 2 ).\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( bar, 1 ), view.createPositionAt( bar, 3 ); \"ar\" is in range.\n\t *\t\ttransformed = range.getIntersection( otherRange ); // null - no common part.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to check for intersection.\n\t * @returns {module:engine/view/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n\t */\n\tgetIntersection( otherRange ) {\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect, so a common range will be returned.\n\t\t\t// At most, it will be same as this range.\n\t\t\tlet commonRangeStart = this.start;\n\t\t\tlet commonRangeEnd = this.end;\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means thaNt we have to\n\t\t\t\t// shrink common range to the given range start.\n\t\t\t\tcommonRangeStart = otherRange.start;\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// shrink common range to the given range end.\n\t\t\t\tcommonRangeEnd = otherRange.end;\n\t\t\t}\n\n\t\t\treturn new Range( commonRangeStart, commonRangeEnd );\n\t\t}\n\n\t\t// Ranges do not intersect, so they do not have common part.\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @param {module:engine/view/position~Position} [options.startPosition]\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t * @returns {module:engine/view/treewalker~TreeWalker}\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of range's both ends (in which the entire range is contained).\n\t *\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor() {\n\t\treturn this.start.getCommonAncestor( this.end );\n\t}\n\n\t/**\n\t * Clones this range.\n\t *\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tclone() {\n\t\treturn new Range( this.start, this.end );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n\t * them.\n\t *\n\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n\t * set to `true`. However it returns only {@link module:engine/view/item~Item items},\n\t * not {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/view/item~Item>}\n\t */\n\t* getItems( options = {} ) {\n\t\toptions.boundaries = this;\n\t\toptions.ignoreElementEnd = true;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.item;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/view/position~Position positions} that are boundaries or\n\t * contained in this range.\n\t *\n\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n\t * {@link module:engine/view/position~Position positions}, not {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/view/position~Position>}\n\t */\n\t* getPositions( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tyield treeWalker.position;\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.nextPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\trange.is( 'range' ); // -> true\n\t *\t\trange.is( 'view:range' ); // -> true\n\t *\n\t *\t\trange.is( 'model:range' ); // -> false\n\t *\t\trange.is( 'element' ); // -> false\n\t *\t\trange.is( 'selection' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'range' || type == 'view:range';\n\t}\n\n\t/**\n\t * Checks and returns whether this range intersects with the given range.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} True if ranges intersect.\n\t */\n\tisIntersecting( otherRange ) {\n\t\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\n\t}\n\n\t/**\n\t * Creates a range from the given parents and offsets.\n\t *\n\t * @protected\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} startElement Start position\n\t * parent element.\n\t * @param {Number} startOffset Start position offset.\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} endElement End position\n\t * parent element.\n\t * @param {Number} endOffset End position offset.\n\t * @returns {module:engine/view/range~Range} Created range.\n\t */\n\tstatic _createFromParentsAndOffsets( startElement, startOffset, endElement, endOffset ) {\n\t\treturn new this(\n\t\t\tnew Position( startElement, startOffset ),\n\t\t\tnew Position( endElement, endOffset )\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new range, spreading from specified {@link module:engine/view/position~Position position} to a position moved by\n\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n\t *\n\t * @protected\n\t * @param {module:engine/view/position~Position} position Beginning of the range.\n\t * @param {Number} shift How long the range should be.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createFromPositionAndShift( position, shift ) {\n\t\tconst start = position;\n\t\tconst end = position.getShiftedBy( shift );\n\n\t\treturn shift > 0 ? new this( start, end ) : new this( end, start );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @protected\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createIn( element ) {\n\t\treturn this._createFromParentsAndOffsets( element, 0, element, element.childCount );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createOn( item ) {\n\t\tconst size = item.is( 'textProxy' ) ? item.offsetSize : 1;\n\n\t\treturn this._createFromPositionAndShift( Position._createBefore( item ), size );\n\t}\n}\n\n// Function used by getEnlarged and getTrimmed methods.\nfunction enlargeTrimSkip( value ) {\n\tif ( value.item.is( 'attributeElement' ) || value.item.is( 'uiElement' ) ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/utils\n */\n\n/**\n * Returns the parent element of given name. Returns undefined if position is not inside desired parent.\n *\n * @param {String} parentName Name of parent element to find.\n * @param {module:engine/model/position~Position|module:engine/model/position~Position} position Position to start searching.\n * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n */\nexport function findAncestor( parentName, position ) {\n\tlet parent = position.parent;\n\n\twhile ( parent ) {\n\t\tif ( parent.name === parentName ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n}\n\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @param {String} key Attribute key.\n * @param {*} value The new attribute value.\n * @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\n * @param {module:engine/model/writer~Writer} writer\n * @param {*} defaultValue Default attribute value. If a value is lower or equal, it will be unset.\n */\nexport function updateNumericAttribute( key, value, item, writer, defaultValue = 1 ) {\n\tif ( value > defaultValue ) {\n\t\twriter.setAttribute( key, value, item );\n\t} else {\n\t\twriter.removeAttribute( key, item );\n\t}\n}\n\n/**\n * Common method to create empty table cell - it will create proper model structure as table cell must have at least one block inside.\n *\n * @param {module:engine/model/writer~Writer} writer Model writer.\n * @param {module:engine/model/position~Position} insertPosition Position at which table cell should be inserted.\n * @param {Object} attributes Element's attributes.\n */\nexport function createEmptyTableCell( writer, insertPosition, attributes = {} ) {\n\tconst tableCell = writer.createElement( 'tableCell', attributes );\n\twriter.insertElement( 'paragraph', tableCell );\n\twriter.insert( tableCell, insertPosition );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/button/buttonview\n */\n\nimport View from '../view';\nimport IconView from '../icon/iconview';\nimport TooltipView from '../tooltip/tooltipview';\n\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport { getEnvKeystrokeText } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\nimport '../../theme/components/button/button.css';\n\n/**\n * The button view class.\n *\n *\t\tconst view = new ButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true,\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/view~View\n * @implements module:ui/button/button~Button\n */\nexport default class ButtonView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tconst ariaLabelUid = uid();\n\n\t\t// Implement the Button interface.\n\t\tthis.set( 'class' );\n\t\tthis.set( 'labelStyle' );\n\t\tthis.set( 'icon' );\n\t\tthis.set( 'isEnabled', true );\n\t\tthis.set( 'isOn', false );\n\t\tthis.set( 'isVisible', true );\n\t\tthis.set( 'isToggleable', false );\n\t\tthis.set( 'keystroke' );\n\t\tthis.set( 'label' );\n\t\tthis.set( 'tabindex', -1 );\n\t\tthis.set( 'tooltip' );\n\t\tthis.set( 'tooltipPosition', 's' );\n\t\tthis.set( 'type', 'button' );\n\t\tthis.set( 'withText', false );\n\n\t\t/**\n\t\t * Collection of the child views inside of the button {@link #element}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\t/**\n\t\t * Tooltip of the button view. It is configurable using the {@link #tooltip tooltip attribute}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/tooltip/tooltipview~TooltipView} #tooltipView\n\t\t */\n\t\tthis.tooltipView = this._createTooltipView();\n\n\t\t/**\n\t\t * Label of the button view. It is configurable using the {@link #label label attribute}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #labelView\n\t\t */\n\t\tthis.labelView = this._createLabelView( ariaLabelUid );\n\n\t\t/**\n\t\t * The icon view of the button. Will be added to {@link #children} when the\n\t\t * {@link #icon icon attribute} is defined.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/icon/iconview~IconView} #iconView\n\t\t */\n\t\tthis.iconView = new IconView();\n\n\t\tthis.iconView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-button__icon'\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Tooltip of the button bound to the template.\n\t\t *\n\t\t * @see #tooltip\n\t\t * @see #_getTooltipString\n\t\t * @private\n\t\t * @observable\n\t\t * @member {Boolean} #_tooltipString\n\t\t */\n\t\tthis.bind( '_tooltipString' ).to(\n\t\t\tthis, 'tooltip',\n\t\t\tthis, 'label',\n\t\t\tthis, 'keystroke',\n\t\t\tthis._getTooltipString.bind( this )\n\t\t);\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'button',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isEnabled', 'ck-disabled', value => !value ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-hidden', value => !value ),\n\t\t\t\t\tbind.to( 'isOn', value => value ? 'ck-on' : 'ck-off' ),\n\t\t\t\t\tbind.if( 'withText', 'ck-button_with-text' )\n\t\t\t\t],\n\t\t\t\ttype: bind.to( 'type', value => value ? value : 'button' ),\n\t\t\t\ttabindex: bind.to( 'tabindex' ),\n\t\t\t\t'aria-labelledby': `ck-editor__aria-label_${ ariaLabelUid }`,\n\t\t\t\t'aria-disabled': bind.if( 'isEnabled', true, value => !value ),\n\t\t\t\t'aria-pressed': bind.to( 'isOn', value => this.isToggleable ? String( value ) : false )\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\tmousedown: bind.to( evt => {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t} ),\n\n\t\t\t\tclick: bind.to( evt => {\n\t\t\t\t\t// We can't make the button disabled using the disabled attribute, because it won't be focusable.\n\t\t\t\t\t// Though, shouldn't this condition be moved to the button controller?\n\t\t\t\t\tif ( this.isEnabled ) {\n\t\t\t\t\t\tthis.fire( 'execute' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Prevent the default when button is disabled, to block e.g.\n\t\t\t\t\t\t// automatic form submitting. See ckeditor/ckeditor5-link#74.\n\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tif ( this.icon ) {\n\t\t\tthis.iconView.bind( 'content' ).to( this, 'icon' );\n\t\t\tthis.children.add( this.iconView );\n\t\t}\n\n\t\tthis.children.add( this.tooltipView );\n\t\tthis.children.add( this.labelView );\n\t}\n\n\t/**\n\t * Focuses the {@link #element} of the button.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/tooltip/tooltipview~TooltipView} instance and binds it with button\n\t * attributes.\n\t *\n\t * @private\n\t * @returns {module:ui/tooltip/tooltipview~TooltipView}\n\t */\n\t_createTooltipView() {\n\t\tconst tooltipView = new TooltipView();\n\n\t\ttooltipView.bind( 'text' ).to( this, '_tooltipString' );\n\t\ttooltipView.bind( 'position' ).to( this, 'tooltipPosition' );\n\n\t\treturn tooltipView;\n\t}\n\n\t/**\n\t * Creates a label view instance and binds it with button attributes.\n\t *\n\t * @private\n\t * @param {String} ariaLabelUid The aria label UID.\n\t * @returns {module:ui/view~View}\n\t */\n\t_createLabelView( ariaLabelUid ) {\n\t\tconst labelView = new View();\n\t\tconst bind = this.bindTemplate;\n\n\t\tlabelView.setTemplate( {\n\t\t\ttag: 'span',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button__label'\n\t\t\t\t],\n\t\t\t\tstyle: bind.to( 'labelStyle' ),\n\t\t\t\tid: `ck-editor__aria-label_${ ariaLabelUid }`,\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: this.bindTemplate.to( 'label' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn labelView;\n\t}\n\n\t/**\n\t * Gets the text for the {@link #tooltipView} from the combination of\n\t * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\n\t *\n\t * @private\n\t * @see #tooltip\n\t * @see #_tooltipString\n\t * @param {Boolean|String|Function} tooltip Button tooltip.\n\t * @param {String} label Button label.\n\t * @param {String} keystroke Button keystroke.\n\t * @returns {String}\n\t */\n\t_getTooltipString( tooltip, label, keystroke ) {\n\t\tif ( tooltip ) {\n\t\t\tif ( typeof tooltip == 'string' ) {\n\t\t\t\treturn tooltip;\n\t\t\t} else {\n\t\t\t\tif ( keystroke ) {\n\t\t\t\t\tkeystroke = getEnvKeystrokeText( keystroke );\n\t\t\t\t}\n\n\t\t\t\tif ( tooltip instanceof Function ) {\n\t\t\t\t\treturn tooltip( label, keystroke );\n\t\t\t\t} else {\n\t\t\t\t\treturn `${ label }${ keystroke ? ` (${ keystroke })` : '' }`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/observablemixin\n */\n\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport { extend, isObject } from 'lodash-es';\n\nconst observablePropertiesSymbol = Symbol( 'observableProperties' );\nconst boundObservablesSymbol = Symbol( 'boundObservables' );\nconst boundPropertiesSymbol = Symbol( 'boundProperties' );\n\n/**\n * Mixin that injects the \"observable properties\" and data binding functionality described in the\n * {@link ~Observable} interface.\n *\n * Read more about the concept of observables in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables \"Event system and observables\"}\n * section of the {@glink framework/guides/architecture/core-editor-architecture \"Core editor architecture\"} guide,\n * * {@glink framework/guides/deep-dive/observables \"Observables\" deep dive} guide.\n *\n * @mixin ObservableMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/observablemixin~Observable\n */\nconst ObservableMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tset( name, value ) {\n\t\t// If the first parameter is an Object, iterate over its properties.\n\t\tif ( isObject( name ) ) {\n\t\t\tObject.keys( name ).forEach( property => {\n\t\t\t\tthis.set( property, name[ property ] );\n\t\t\t}, this );\n\n\t\t\treturn;\n\t\t}\n\n\t\tinitObservable( this );\n\n\t\tconst properties = this[ observablePropertiesSymbol ];\n\n\t\tif ( ( name in this ) && !properties.has( name ) ) {\n\t\t\t/**\n\t\t\t * Cannot override an existing property.\n\t\t\t *\n\t\t\t * This error is thrown when trying to {@link ~Observable#set set} an property with\n\t\t\t * a name of an already existing property. For example:\n\t\t\t *\n\t\t\t *\t\tlet observable = new Model();\n\t\t\t *\t\tobservable.property = 1;\n\t\t\t *\t\tobservable.set( 'property', 2 );\t\t\t// throws\n\t\t\t *\n\t\t\t *\t\tobservable.set( 'property', 1 );\n\t\t\t *\t\tobservable.set( 'property', 2 );\t\t\t// ok, because this is an existing property.\n\t\t\t *\n\t\t\t * @error observable-set-cannot-override\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-set-cannot-override: Cannot override an existing property.', this );\n\t\t}\n\n\t\tObject.defineProperty( this, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget() {\n\t\t\t\treturn properties.get( name );\n\t\t\t},\n\n\t\t\tset( value ) {\n\t\t\t\tconst oldValue = properties.get( name );\n\n\t\t\t\t// Fire `set` event before the new value will be set to make it possible\n\t\t\t\t// to override observable property without affecting `change` event.\n\t\t\t\t// See https://github.com/ckeditor/ckeditor5-utils/issues/171.\n\t\t\t\tlet newValue = this.fire( 'set:' + name, name, value, oldValue );\n\n\t\t\t\tif ( newValue === undefined ) {\n\t\t\t\t\tnewValue = value;\n\t\t\t\t}\n\n\t\t\t\t// Allow undefined as an initial value like A.define( 'x', undefined ) (#132).\n\t\t\t\t// Note: When properties map has no such own property, then its value is undefined.\n\t\t\t\tif ( oldValue !== newValue || !properties.has( name ) ) {\n\t\t\t\t\tproperties.set( name, newValue );\n\t\t\t\t\tthis.fire( 'change:' + name, name, newValue, oldValue );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tthis[ name ] = value;\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbind( ...bindProperties ) {\n\t\tif ( !bindProperties.length || !isStringArray( bindProperties ) ) {\n\t\t\t/**\n\t\t\t * All properties must be strings.\n\t\t\t *\n\t\t\t * @error observable-bind-wrong-properties\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-wrong-properties: All properties must be strings.', this );\n\t\t}\n\n\t\tif ( ( new Set( bindProperties ) ).size !== bindProperties.length ) {\n\t\t\t/**\n\t\t\t * Properties must be unique.\n\t\t\t *\n\t\t\t * @error observable-bind-duplicate-properties\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-duplicate-properties: Properties must be unique.', this );\n\t\t}\n\n\t\tinitObservable( this );\n\n\t\tconst boundProperties = this[ boundPropertiesSymbol ];\n\n\t\tbindProperties.forEach( propertyName => {\n\t\t\tif ( boundProperties.has( propertyName ) ) {\n\t\t\t\t/**\n\t\t\t\t * Cannot bind the same property more that once.\n\t\t\t\t *\n\t\t\t\t * @error observable-bind-rebind\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'observable-bind-rebind: Cannot bind the same property more that once.', this );\n\t\t\t}\n\t\t} );\n\n\t\tconst bindings = new Map();\n\n\t\t// @typedef {Object} Binding\n\t\t// @property {Array} property Property which is bound.\n\t\t// @property {Array} to Array of observable–property components of the binding (`{ observable: ..., property: .. }`).\n\t\t// @property {Array} callback A function which processes `to` components.\n\t\tbindProperties.forEach( a => {\n\t\t\tconst binding = { property: a, to: [] };\n\n\t\t\tboundProperties.set( a, binding );\n\t\t\tbindings.set( a, binding );\n\t\t} );\n\n\t\t// @typedef {Object} BindChain\n\t\t// @property {Function} to See {@link ~ObservableMixin#_bindTo}.\n\t\t// @property {Function} toMany See {@link ~ObservableMixin#_bindToMany}.\n\t\t// @property {module:utils/observablemixin~Observable} _observable The observable which initializes the binding.\n\t\t// @property {Array} _bindProperties Array of `_observable` properties to be bound.\n\t\t// @property {Array} _to Array of `to()` observable–properties (`{ observable: toObservable, properties: ...toProperties }`).\n\t\t// @property {Map} _bindings Stores bindings to be kept in\n\t\t// {@link ~ObservableMixin#_boundProperties}/{@link ~ObservableMixin#_boundObservables}\n\t\t// initiated in this binding chain.\n\t\treturn {\n\t\t\tto: bindTo,\n\t\t\ttoMany: bindToMany,\n\n\t\t\t_observable: this,\n\t\t\t_bindProperties: bindProperties,\n\t\t\t_to: [],\n\t\t\t_bindings: bindings\n\t\t};\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tunbind( ...unbindProperties ) {\n\t\t// Nothing to do here if not inited yet.\n\t\tif ( !( observablePropertiesSymbol in this ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst boundProperties = this[ boundPropertiesSymbol ];\n\t\tconst boundObservables = this[ boundObservablesSymbol ];\n\n\t\tif ( unbindProperties.length ) {\n\t\t\tif ( !isStringArray( unbindProperties ) ) {\n\t\t\t\t/**\n\t\t\t\t * Properties must be strings.\n\t\t\t\t *\n\t\t\t\t * @error observable-unbind-wrong-properties\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'observable-unbind-wrong-properties: Properties must be strings.', this );\n\t\t\t}\n\n\t\t\tunbindProperties.forEach( propertyName => {\n\t\t\t\tconst binding = boundProperties.get( propertyName );\n\n\t\t\t\t// Nothing to do if the binding is not defined\n\t\t\t\tif ( !binding ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet toObservable, toProperty, toProperties, toPropertyBindings;\n\n\t\t\t\tbinding.to.forEach( to => {\n\t\t\t\t\t// TODO: ES6 destructuring.\n\t\t\t\t\ttoObservable = to[ 0 ];\n\t\t\t\t\ttoProperty = to[ 1 ];\n\t\t\t\t\ttoProperties = boundObservables.get( toObservable );\n\t\t\t\t\ttoPropertyBindings = toProperties[ toProperty ];\n\n\t\t\t\t\ttoPropertyBindings.delete( binding );\n\n\t\t\t\t\tif ( !toPropertyBindings.size ) {\n\t\t\t\t\t\tdelete toProperties[ toProperty ];\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !Object.keys( toProperties ).length ) {\n\t\t\t\t\t\tboundObservables.delete( toObservable );\n\t\t\t\t\t\tthis.stopListening( toObservable, 'change' );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tboundProperties.delete( propertyName );\n\t\t\t} );\n\t\t} else {\n\t\t\tboundObservables.forEach( ( bindings, boundObservable ) => {\n\t\t\t\tthis.stopListening( boundObservable, 'change' );\n\t\t\t} );\n\n\t\t\tboundObservables.clear();\n\t\t\tboundProperties.clear();\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdecorate( methodName ) {\n\t\tconst originalMethod = this[ methodName ];\n\n\t\tif ( !originalMethod ) {\n\t\t\t/**\n\t\t\t * Cannot decorate an undefined method.\n\t\t\t *\n\t\t\t * @error observablemixin-cannot-decorate-undefined\n\t\t\t * @param {Object} object The object which method should be decorated.\n\t\t\t * @param {String} methodName Name of the method which does not exist.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'observablemixin-cannot-decorate-undefined: Cannot decorate an undefined method.',\n\t\t\t\tthis,\n\t\t\t\t{ object: this, methodName }\n\t\t\t);\n\t\t}\n\n\t\tthis.on( methodName, ( evt, args ) => {\n\t\t\tevt.return = originalMethod.apply( this, args );\n\t\t} );\n\n\t\tthis[ methodName ] = function( ...args ) {\n\t\t\treturn this.fire( methodName, args );\n\t\t};\n\t}\n};\n\nextend( ObservableMixin, EmitterMixin );\n\nexport default ObservableMixin;\n\n// Init symbol properties needed to for the observable mechanism to work.\n//\n// @private\n// @param {module:utils/observablemixin~ObservableMixin} observable\nfunction initObservable( observable ) {\n\t// Do nothing if already inited.\n\tif ( observablePropertiesSymbol in observable ) {\n\t\treturn;\n\t}\n\n\t// The internal hash containing the observable's state.\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, observablePropertiesSymbol, {\n\t\tvalue: new Map()\n\t} );\n\n\t// Map containing bindings to external observables. It shares the binding objects\n\t// (`{ observable: A, property: 'a', to: ... }`) with {@link module:utils/observablemixin~ObservableMixin#_boundProperties} and\n\t// it is used to observe external observables to update own properties accordingly.\n\t// See {@link module:utils/observablemixin~ObservableMixin#bind}.\n\t//\n\t//\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n\t//\t\tconsole.log( A._boundObservables );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\tB: {\n\t//\t\t\t\t\tx: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\ty: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t}\n\t//\t\t\t} )\n\t//\n\t//\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n\t//\t\tconsole.log( A._boundObservables );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\tB: {\n\t//\t\t\t\t\tx: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\ty: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\tz: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t},\n\t//\t\t\t\tC: {\n\t//\t\t\t\t\tw: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t}\n\t//\t\t\t} )\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, boundObservablesSymbol, {\n\t\tvalue: new Map()\n\t} );\n\n\t// Object that stores which properties of this observable are bound and how. It shares\n\t// the binding objects (`{ observable: A, property: 'a', to: ... }`) with\n\t// {@link module:utils/observablemixin~ObservableMixin#_boundObservables}. This data structure is\n\t// a reverse of {@link module:utils/observablemixin~ObservableMixin#_boundObservables} and it is helpful for\n\t// {@link module:utils/observablemixin~ObservableMixin#unbind}.\n\t//\n\t// See {@link module:utils/observablemixin~ObservableMixin#bind}.\n\t//\n\t//\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n\t//\t\tconsole.log( A._boundProperties );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t} )\n\t//\n\t//\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n\t//\t\tconsole.log( A._boundProperties );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\td: { observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t} )\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, boundPropertiesSymbol, {\n\t\tvalue: new Map()\n\t} );\n}\n\n// A chaining for {@link module:utils/observablemixin~ObservableMixin#bind} providing `.to()` interface.\n//\n// @private\n// @param {...[Observable|String|Function]} args Arguments of the `.to( args )` binding.\nfunction bindTo( ...args ) {\n\tconst parsedArgs = parseBindToArgs( ...args );\n\tconst bindingsKeys = Array.from( this._bindings.keys() );\n\tconst numberOfBindings = bindingsKeys.length;\n\n\t// Eliminate A.bind( 'x' ).to( B, C )\n\tif ( !parsedArgs.callback && parsedArgs.to.length > 1 ) {\n\t\t/**\n\t\t * Binding multiple observables only possible with callback.\n\t\t *\n\t\t * @error observable-bind-no-callback\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'observable-bind-to-no-callback: Binding multiple observables only possible with callback.',\n\t\t\tthis\n\t\t);\n\t}\n\n\t// Eliminate A.bind( 'x', 'y' ).to( B, callback )\n\tif ( numberOfBindings > 1 && parsedArgs.callback ) {\n\t\t/**\n\t\t * Cannot bind multiple properties and use a callback in one binding.\n\t\t *\n\t\t * @error observable-bind-to-extra-callback\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'observable-bind-to-extra-callback: Cannot bind multiple properties and use a callback in one binding.',\n\t\t\tthis\n\t\t);\n\t}\n\n\tparsedArgs.to.forEach( to => {\n\t\t// Eliminate A.bind( 'x', 'y' ).to( B, 'a' )\n\t\tif ( to.properties.length && to.properties.length !== numberOfBindings ) {\n\t\t\t/**\n\t\t\t * The number of properties must match.\n\t\t\t *\n\t\t\t * @error observable-bind-to-properties-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-to-properties-length: The number of properties must match.', this );\n\t\t}\n\n\t\t// When no to.properties specified, observing source properties instead i.e.\n\t\t// A.bind( 'x', 'y' ).to( B ) -> Observe B.x and B.y\n\t\tif ( !to.properties.length ) {\n\t\t\tto.properties = this._bindProperties;\n\t\t}\n\t} );\n\n\tthis._to = parsedArgs.to;\n\n\t// Fill {@link BindChain#_bindings} with callback. When the callback is set there's only one binding.\n\tif ( parsedArgs.callback ) {\n\t\tthis._bindings.get( bindingsKeys[ 0 ] ).callback = parsedArgs.callback;\n\t}\n\n\tattachBindToListeners( this._observable, this._to );\n\n\t// Update observable._boundProperties and observable._boundObservables.\n\tupdateBindToBound( this );\n\n\t// Set initial values of bound properties.\n\tthis._bindProperties.forEach( propertyName => {\n\t\tupdateBoundObservableProperty( this._observable, propertyName );\n\t} );\n}\n\n// Binds to an attribute in a set of iterable observables.\n//\n// @private\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @param {Function} callback\nfunction bindToMany( observables, attribute, callback ) {\n\tif ( this._bindings.size > 1 ) {\n\t\t/**\n\t\t * Binding one attribute to many observables only possible with one attribute.\n\t\t *\n\t\t * @error observable-bind-to-many-not-one-binding\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-many-not-one-binding: Cannot bind multiple properties with toMany().', this );\n\t}\n\n\tthis.to(\n\t\t// Bind to #attribute of each observable...\n\t\t...getBindingTargets( observables, attribute ),\n\t\t// ...using given callback to parse attribute values.\n\t\tcallback\n\t);\n}\n\n// Returns an array of binding components for\n// {@link Observable#bind} from a set of iterable observables.\n//\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @returns {Array.<String|Observable>}\nfunction getBindingTargets( observables, attribute ) {\n\tconst observableAndAttributePairs = observables.map( observable => [ observable, attribute ] );\n\n\t// Merge pairs to one-dimension array of observables and attributes.\n\treturn Array.prototype.concat.apply( [], observableAndAttributePairs );\n}\n\n// Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\nfunction isStringArray( arr ) {\n\treturn arr.every( a => typeof a == 'string' );\n}\n\n// Parses and validates {@link Observable#bind}`.to( args )` arguments and returns\n// an object with a parsed structure. For example\n//\n//\t\tA.bind( 'x' ).to( B, 'a', C, 'b', call );\n//\n// becomes\n//\n//\t\t{\n//\t\t\tto: [\n//\t\t\t\t{ observable: B, properties: [ 'a' ] },\n//\t\t\t\t{ observable: C, properties: [ 'b' ] },\n//\t\t\t],\n//\t\t\tcallback: call\n// \t\t}\n//\n// @private\n// @param {...*} args Arguments of {@link Observable#bind}`.to( args )`.\n// @returns {Object}\nfunction parseBindToArgs( ...args ) {\n\t// Eliminate A.bind( 'x' ).to()\n\tif ( !args.length ) {\n\t\t/**\n\t\t * Invalid argument syntax in `to()`.\n\t\t *\n\t\t * @error observable-bind-to-parse-error\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-parse-error: Invalid argument syntax in `to()`.', null );\n\t}\n\n\tconst parsed = { to: [] };\n\tlet lastObservable;\n\n\tif ( typeof args[ args.length - 1 ] == 'function' ) {\n\t\tparsed.callback = args.pop();\n\t}\n\n\targs.forEach( a => {\n\t\tif ( typeof a == 'string' ) {\n\t\t\tlastObservable.properties.push( a );\n\t\t} else if ( typeof a == 'object' ) {\n\t\t\tlastObservable = { observable: a, properties: [] };\n\t\t\tparsed.to.push( lastObservable );\n\t\t} else {\n\t\t\tthrow new CKEditorError( 'observable-bind-to-parse-error: Invalid argument syntax in `to()`.', null );\n\t\t}\n\t} );\n\n\treturn parsed;\n}\n\n// Synchronizes {@link module:utils/observablemixin#_boundObservables} with {@link Binding}.\n//\n// @private\n// @param {Binding} binding A binding to store in {@link Observable#_boundObservables}.\n// @param {Observable} toObservable A observable, which is a new component of `binding`.\n// @param {String} toPropertyName A name of `toObservable`'s property, a new component of the `binding`.\nfunction updateBoundObservables( observable, binding, toObservable, toPropertyName ) {\n\tconst boundObservables = observable[ boundObservablesSymbol ];\n\tconst bindingsToObservable = boundObservables.get( toObservable );\n\tconst bindings = bindingsToObservable || {};\n\n\tif ( !bindings[ toPropertyName ] ) {\n\t\tbindings[ toPropertyName ] = new Set();\n\t}\n\n\t// Pass the binding to a corresponding Set in `observable._boundObservables`.\n\tbindings[ toPropertyName ].add( binding );\n\n\tif ( !bindingsToObservable ) {\n\t\tboundObservables.set( toObservable, bindings );\n\t}\n}\n\n// Synchronizes {@link Observable#_boundProperties} and {@link Observable#_boundObservables}\n// with {@link BindChain}.\n//\n// Assuming the following binding being created\n//\n// \t\tA.bind( 'a', 'b' ).to( B, 'x', 'y' );\n//\n// the following bindings were initialized by {@link Observable#bind} in {@link BindChain#_bindings}:\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [] },\n// \t\t\tb: { observable: A, property: 'b', to: [] },\n// \t\t}\n//\n// Iterate over all bindings in this chain and fill their `to` properties with\n// corresponding to( ... ) arguments (components of the binding), so\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [ B, 'x' ] },\n// \t\t\tb: { observable: A, property: 'b', to: [ B, 'y' ] },\n// \t\t}\n//\n// Then update the structure of {@link Observable#_boundObservables} with updated\n// binding, so it becomes:\n//\n// \t\tMap( {\n// \t\t\tB: {\n// \t\t\t\tx: Set( [\n// \t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] }\n// \t\t\t\t] ),\n// \t\t\t\ty: Set( [\n// \t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n// \t\t\t\t] )\n//\t\t\t}\n// \t\t} )\n//\n// @private\n// @param {BindChain} chain The binding initialized by {@link Observable#bind}.\nfunction updateBindToBound( chain ) {\n\tlet toProperty;\n\n\tchain._bindings.forEach( ( binding, propertyName ) => {\n\t\t// Note: For a binding without a callback, this will run only once\n\t\t// like in A.bind( 'x', 'y' ).to( B, 'a', 'b' )\n\t\t// TODO: ES6 destructuring.\n\t\tchain._to.forEach( to => {\n\t\t\ttoProperty = to.properties[ binding.callback ? 0 : chain._bindProperties.indexOf( propertyName ) ];\n\n\t\t\tbinding.to.push( [ to.observable, toProperty ] );\n\t\t\tupdateBoundObservables( chain._observable, binding, to.observable, toProperty );\n\t\t} );\n\t} );\n}\n\n// Updates an property of a {@link Observable} with a value\n// determined by an entry in {@link Observable#_boundProperties}.\n//\n// @private\n// @param {Observable} observable A observable which property is to be updated.\n// @param {String} propertyName An property to be updated.\nfunction updateBoundObservableProperty( observable, propertyName ) {\n\tconst boundProperties = observable[ boundPropertiesSymbol ];\n\tconst binding = boundProperties.get( propertyName );\n\tlet propertyValue;\n\n\t// When a binding with callback is created like\n\t//\n\t// \t\tA.bind( 'a' ).to( B, 'b', C, 'c', callback );\n\t//\n\t// collect B.b and C.c, then pass them to callback to set A.a.\n\tif ( binding.callback ) {\n\t\tpropertyValue = binding.callback.apply( observable, binding.to.map( to => to[ 0 ][ to[ 1 ] ] ) );\n\t} else {\n\t\tpropertyValue = binding.to[ 0 ];\n\t\tpropertyValue = propertyValue[ 0 ][ propertyValue[ 1 ] ];\n\t}\n\n\tif ( observable.hasOwnProperty( propertyName ) ) {\n\t\tobservable[ propertyName ] = propertyValue;\n\t} else {\n\t\tobservable.set( propertyName, propertyValue );\n\t}\n}\n\n// Starts listening to changes in {@link BindChain._to} observables to update\n// {@link BindChain._observable} {@link BindChain._bindProperties}. Also sets the\n// initial state of {@link BindChain._observable}.\n//\n// @private\n// @param {BindChain} chain The chain initialized by {@link Observable#bind}.\nfunction attachBindToListeners( observable, toBindings ) {\n\ttoBindings.forEach( to => {\n\t\tconst boundObservables = observable[ boundObservablesSymbol ];\n\t\tlet bindings;\n\n\t\t// If there's already a chain between the observables (`observable` listens to\n\t\t// `to.observable`), there's no need to create another `change` event listener.\n\t\tif ( !boundObservables.get( to.observable ) ) {\n\t\t\tobservable.listenTo( to.observable, 'change', ( evt, propertyName ) => {\n\t\t\t\tbindings = boundObservables.get( to.observable )[ propertyName ];\n\n\t\t\t\t// Note: to.observable will fire for any property change, react\n\t\t\t\t// to changes of properties which are bound only.\n\t\t\t\tif ( bindings ) {\n\t\t\t\t\tbindings.forEach( binding => {\n\t\t\t\t\t\tupdateBoundObservableProperty( observable, binding.property );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n}\n\n/**\n * Interface which adds \"observable properties\" and data binding functionality.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/observablemixin~ObservableMixin} mixin.\n *\n * Read more about the usage of this interface in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables \"Event system and observables\"}\n * section of the {@glink framework/guides/architecture/core-editor-architecture \"Core editor architecture\"} guide,\n * * {@glink framework/guides/deep-dive/observables \"Observables\" deep dive} guide.\n *\n * @interface Observable\n * @extends module:utils/emittermixin~Emitter\n */\n\n/**\n * Fired when a property changed value.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `${ propertyName } has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} );\n *\n *\t\tobservable.prop = 2; // -> 'prop has changed from 1 to 2'\n *\n * @event change:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Fired when a property value is going to be set but is not set yet (before the `change` event is fired).\n *\n * You can control the final value of the property by using\n * the {@link module:utils/eventinfo~EventInfo#return event's `return` property}.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'set:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `Value is going to be changed from ${ oldValue } to ${ newValue }` );\n *\t\t\tconsole.log( `Current property value is ${ observable[ propertyName ] }` );\n *\n *\t\t\t// Let's override the value.\n *\t\t\tevt.return = 3;\n *\t\t} );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `Value has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} );\n *\n *\t\tobservable.prop = 2; // -> 'Value is going to be changed from 1 to 2'\n *\t\t                     // -> 'Current property value is 1'\n *\t\t                     // -> 'Value has changed from 1 to 3'\n *\n * **Note:** Event is fired even when the new value is the same as the old value.\n *\n * @event set:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Creates and sets the value of an observable property of this object. Such an property becomes a part\n * of the state and is be observable.\n *\n * It accepts also a single object literal containing key/value pairs with properties to be set.\n *\n * This method throws the `observable-set-cannot-override` error if the observable instance already\n * have a property with the given property name. This prevents from mistakenly overriding existing\n * properties and methods, but means that `foo.set( 'bar', 1 )` may be slightly slower than `foo.bar = 1`.\n *\n * @method #set\n * @param {String|Object} name The property's name or object with `name=>value` pairs.\n * @param {*} [value] The property's value (if `name` was passed in the first parameter).\n */\n\n/**\n * Binds {@link #set observable properties} to other objects implementing the\n * {@link module:utils/observablemixin~Observable} interface.\n *\n * Read more in the {@glink framework/guides/deep-dive/observables#property-bindings dedicated guide}\n * covering the topic of property bindings with some additional examples.\n *\n * Consider two objects: a `button` and an associated `command` (both `Observable`).\n *\n * A simple property binding could be as follows:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isEnabled' );\n *\n * or even shorter:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command );\n *\n * which works in the following way:\n *\n * * `button.isEnabled` **instantly equals** `command.isEnabled`,\n * * whenever `command.isEnabled` changes, `button.isEnabled` will immediately reflect its value.\n *\n * **Note**: To release the binding, use {@link module:utils/observablemixin~Observable#unbind}.\n *\n * You can also \"rename\" the property in the binding by specifying the new name in the `to()` chain:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isWorking' );\n *\n * It is possible to bind more than one property at a time to shorten the code:\n *\n *\t\tbutton.bind( 'isEnabled', 'value' ).to( command );\n *\n * which corresponds to:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command );\n *\t\tbutton.bind( 'value' ).to( command );\n *\n * The binding can include more than one observable, combining multiple data sources in a custom callback:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isEnabled', ui, 'isVisible',\n *\t\t\t( isCommandEnabled, isUIVisible ) => isCommandEnabled && isUIVisible );\n *\n * It is also possible to bind to the same property in an array of observables.\n * To bind a `button` to multiple commands (also `Observables`) so that each and every one of them\n * must be enabled for the button to become enabled, use the following code:\n *\n *\t\tbutton.bind( 'isEnabled' ).toMany( [ commandA, commandB, commandC ], 'isEnabled',\n *\t\t\t( isAEnabled, isBEnabled, isCEnabled ) => isAEnabled && isBEnabled && isCEnabled );\n *\n * @method #bind\n * @param {...String} bindProperties Observable properties that will be bound to other observable(s).\n * @returns {Object} The bind chain with the `to()` and `toMany()` methods.\n */\n\n/**\n * Removes the binding created with {@link #bind}.\n *\n *\t\t// Removes the binding for the 'a' property.\n *\t\tA.unbind( 'a' );\n *\n *\t\t// Removes bindings for all properties.\n *\t\tA.unbind();\n *\n * @method #unbind\n * @param {...String} [unbindProperties] Observable properties to be unbound. All the bindings will\n * be released if no properties are provided.\n */\n\n/**\n * Turns the given methods of this object into event-based ones. This means that the new method will fire an event\n * (named after the method) and the original action will be plugged as a listener to that event.\n *\n * Read more in the {@glink framework/guides/deep-dive/observables#decorating-object-methods dedicated guide}\n * covering the topic of decorating methods with some additional examples.\n *\n * Decorating the method does not change its behavior (it only adds an event),\n * but it allows to modify it later on by listening to the method's event.\n *\n * For example, to cancel the method execution the event can be {@link module:utils/eventinfo~EventInfo#stop stopped}:\n *\n *\t\tclass Foo {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.decorate( 'method' );\n *\t\t\t}\n *\n *\t\t\tmethod() {\n *\t\t\t\tconsole.log( 'called!' );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst foo = new Foo();\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.stop();\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method(); // Nothing is logged.\n *\n *\n * **Note**: The high {@link module:utils/priorities~PriorityString priority} listener\n * has been used to execute this particular callback before the one which calls the original method\n * (which uses the \"normal\" priority).\n *\n * It is also possible to change the returned value:\n *\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.return = 'Foo!';\n *\t\t} );\n *\n *\t\tfoo.method(); // -> 'Foo'\n *\n * Finally, it is possible to access and modify the arguments the method is called with:\n *\n *\t\tmethod( a, b ) {\n *\t\t\tconsole.log( `${ a }, ${ b }`  );\n *\t\t}\n *\n *\t\t// ...\n *\n *\t\tfoo.on( 'method', ( evt, args ) => {\n *\t\t\targs[ 0 ] = 3;\n *\n *\t\t\tconsole.log( args[ 1 ] ); // -> 2\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method( 1, 2 ); // -> '3, 2'\n *\n * @method #decorate\n * @param {String} methodName Name of the method to decorate.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/element\n */\n\nimport Node from './node';\nimport NodeList from './nodelist';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Model element. Type of {@link module:engine/model/node~Node node} that has a {@link module:engine/model/element~Element#name name} and\n * {@link module:engine/model/element~Element#getChildren child nodes}.\n *\n * **Important**: see {@link module:engine/model/node~Node} to read about restrictions using `Element` and `Node` API.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a model element.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createElement} method instead.\n\t *\n\t * @protected\n\t * @param {String} name Element's name.\n\t * @param {Object} [attrs] Element's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n\t * One or more nodes to be inserted as children of created element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Element name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:engine/model/element~Element#name\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * List of children nodes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/element~Element#_children\n\t\t */\n\t\tthis._children = new NodeList();\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Number of this element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._children.maxOffset;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\telement.is( 'element' ); // -> true\n\t *\t\telement.is( 'node' ); // -> true\n\t *\t\telement.is( 'model:element' ); // -> true\n\t *\t\telement.is( 'model:node' ); // -> true\n\t *\n\t *\t\telement.is( 'view:element' ); // -> false\n\t *\t\telement.is( 'documentSelection' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/model/element~Element#name name}:\n\t *\n\t *\t\telement.is( 'image' ); // -> true if this is an <image> element\n\t *\t\telement.is( 'element', 'image' ); // -> same as above\n\t *\t\ttext.is( 'image' ); -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^model:/, '' );\n\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'element' || cutType == this.name || super.is( type );\n\t\t} else {\n\t\t\treturn cutType == 'element' && name == this.name;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/model/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children.getNode( index );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all of this element's children.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an index of the given child node. Returns `null` if given node is not a child of this element.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number} Child node's index in this element.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.getNodeIndex( node );\n\t}\n\n\t/**\n\t * Returns the starting offset of given child. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n\t * given node is not a child of this element.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number} Child node's starting offset.\n\t */\n\tgetChildStartOffset( node ) {\n\t\treturn this._children.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n\t * too high, returns {@link module:engine/model/element~Element#getChildIndex index after last child}.\n\t *\n\t *\t\tconst textNode = new Text( 'foo' );\n\t *\t\tconst pElement = new Element( 'p' );\n\t *\t\tconst divElement = new Element( [ textNode, pElement ] );\n\t *\t\tdivElement.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n\t *\t\tdivElement.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n\t *\t\tdivElement.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n\t *\t\tdivElement.offsetToIndex( 2 ); // Returns 0.\n\t *\t\tdivElement.offsetToIndex( 3 ); // Returns 1.\n\t *\t\tdivElement.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number}\n\t */\n\toffsetToIndex( offset ) {\n\t\treturn this._children.offsetToIndex( offset );\n\t}\n\n\t/**\n\t * Returns a descendant node by its path relative to this element.\n\t *\n\t *\t\t// <this>a<b>c</b></this>\n\t *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n\t *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n\t *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n\t *\n\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n\t * @returns {module:engine/model/node~Node}\n\t */\n\tgetNodeByPath( relativePath ) {\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\tfor ( const index of relativePath ) {\n\t\t\tnode = node.getChild( node.offsetToIndex( index ) );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Converts `Element` instance to plain object and returns it. Takes care of converting all of this element's children.\n\t *\n\t * @returns {Object} `Element` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.name = this.name;\n\n\t\tif ( this._children.length > 0 ) {\n\t\t\tjson.children = [];\n\n\t\t\tfor ( const node of this._children ) {\n\t\t\t\tjson.children.push( node.toJSON() );\n\t\t\t}\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this element and returns it. Created element has the same name and attributes as the original element.\n\t * If clone is deep, the original element's children are also cloned. If not, then empty element is removed.\n\t *\n\t * @protected\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any child.\n\t */\n\t_clone( deep = false ) {\n\t\tconst children = deep ? Array.from( this._children ).map( node => node._clone( true ) ) : null;\n\n\t\treturn new Element( this.name, this.getAttributes(), children );\n\t}\n\n\t/**\n\t * {@link module:engine/model/element~Element#_insertChild Inserts} one or more nodes at the end of this element.\n\t *\n\t * @see module:engine/model/writer~Writer#append\n\t * @protected\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} nodes Nodes to be inserted.\n\t */\n\t_appendChild( nodes ) {\n\t\tthis._insertChild( this.childCount, nodes );\n\t}\n\n\t/**\n\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n\t * to this element.\n\t *\n\t * @see module:engine/model/writer~Writer#insert\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_insertChild( index, items ) {\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t}\n\n\t\tthis._children._insertNodes( index, nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index and sets\n\t * {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n\t *\n\t * @see module:engine/model/writer~Writer#remove\n\t * @protected\n\t * @param {Number} index Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tconst nodes = this._children._removeNodes( index, howMany );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tnode.parent = null;\n\t\t}\n\n\t\treturn nodes;\n\t}\n\n\t/**\n\t * Creates an `Element` instance from given plain object (i.e. parsed JSON string).\n\t * Converts `Element` children to proper nodes.\n\t *\n\t * @param {Object} json Plain object to be converted to `Element`.\n\t * @returns {module:engine/model/element~Element} `Element` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\tlet children = null;\n\n\t\tif ( json.children ) {\n\t\t\tchildren = [];\n\n\t\t\tfor ( const child of json.children ) {\n\t\t\t\tif ( child.name ) {\n\t\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new Element( json.name, json.attributes, children );\n\t}\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<String|module:engine/model/item~Item>}\n// @returns {Iterable.<module:engine/model/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data, node.getAttributes() );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/text\n */\n\nimport Node from './node';\n\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a text node.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n\t *\n\t * @protected\n\t * @param {String} data Node's text.\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( data, attrs ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Text data contained in this text node.\n\t\t *\n\t\t * @protected\n\t\t * @type {String}\n\t\t */\n\t\tthis._data = data || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Returns a text data contained in the node.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\ttext.is( 'text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'model:text' ); // -> true\n\t *\t\ttext.is( 'model:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'view:text' ); // -> false\n\t *\t\ttext.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || type == 'model:text' || super.is( type );\n\t}\n\n\t/**\n\t * Converts `Text` instance to plain object and returns it.\n\t *\n\t * @returns {Object} `Text` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.data = this.data;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data, this.getAttributes() );\n\t}\n\n\t/**\n\t * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Text`.\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new Text( json.data, json.attributes );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\n\n/**\n * Set of utils related to block and inline fillers handling.\n *\n * Browsers do not allow to put caret in elements which does not have height. Because of it, we need to fill all\n * empty elements which should be selectable with elements or characters called \"fillers\". Unfortunately there is no one\n * universal filler, this is why two types are uses:\n *\n * * Block filler is an element which fill block elements, like `<p>`. CKEditor uses `<br>` as a block filler during the editing,\n * as browsers do natively. So instead of an empty `<p>` there will be `<p><br></p>`. The advantage of block filler is that\n * it is transparent for the selection, so when the caret is before the `<br>` and user presses right arrow he will be\n * moved to the next paragraph, not after the `<br>`. The disadvantage is that it breaks a block, so it can not be used\n * in the middle of a line of text. The {@link module:engine/view/filler~BR_FILLER `<br>` filler} can be replaced with any other\n * character in the data output, for instance {@link module:engine/view/filler~NBSP_FILLER non-breaking space}.\n *\n * * Inline filler is a filler which does not break a line of text, so it can be used inside the text, for instance in the empty\n * `<b>` surrendered by text: `foo<b></b>bar`, if we want to put the caret there. CKEditor uses a sequence of the zero-width\n * spaces as an {@link module:engine/view/filler~INLINE_FILLER inline filler} having the predetermined\n * {@link module:engine/view/filler~INLINE_FILLER_LENGTH length}. A sequence is used, instead of a single character to\n * avoid treating random zero-width spaces as the inline filler. Disadvantage of the inline filler is that it is not\n * transparent for the selection. The arrow key moves the caret between zero-width spaces characters, so the additional\n * code is needed to handle the caret.\n *\n * Both inline and block fillers are handled by the {@link module:engine/view/renderer~Renderer renderer} and are not present in the\n * view.\n *\n * @module engine/view/filler\n */\n\n/**\n * Non-breaking space filler creator. This is a function which creates `&nbsp;` text node.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~BR_FILLER\n * @function\n */\nexport const NBSP_FILLER = domDocument => domDocument.createTextNode( '\\u00A0' );\n\n/**\n * `<br>` filler creator. This is a function which creates `<br data-cke-filler=\"true\">` element.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~NBSP_FILLER\n * @function\n */\nexport const BR_FILLER = domDocument => {\n\tconst fillerBr = domDocument.createElement( 'br' );\n\tfillerBr.dataset.ckeFiller = true;\n\n\treturn fillerBr;\n};\n\n/**\n * Length of the {@link module:engine/view/filler~INLINE_FILLER INLINE_FILLER}.\n */\nexport const INLINE_FILLER_LENGTH = 7;\n\n/**\n * Inline filler which is a sequence of the zero width spaces.\n */\nexport const INLINE_FILLER = ( () => {\n\tlet inlineFiller = '';\n\n\tfor ( let i = 0; i < INLINE_FILLER_LENGTH; i++ ) {\n\t\tinlineFiller += '\\u200b';\n\t}\n\n\treturn inlineFiller;\n} )(); // Usu IIF so the INLINE_FILLER appears as a constant in the docs.\n\n/**\n * Checks if the node is a text node which starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n *\t\tstartsWithFiller( document.createTextNode( INLINE_FILLER ) ); // true\n *\t\tstartsWithFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // true\n *\t\tstartsWithFiller( document.createTextNode( 'foo' ) ); // false\n *\t\tstartsWithFiller( document.createElement( 'p' ) ); // false\n *\n * @param {Node} domNode DOM node.\n * @returns {Boolean} True if the text node starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function startsWithFiller( domNode ) {\n\treturn isText( domNode ) && ( domNode.data.substr( 0, INLINE_FILLER_LENGTH ) === INLINE_FILLER );\n}\n\n/**\n * Checks if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n *\t\tisInlineFiller( document.createTextNode( INLINE_FILLER ) ); // true\n *\t\tisInlineFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // false\n *\n * @param {Text} domText DOM text node.\n * @returns {Boolean} True if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function isInlineFiller( domText ) {\n\treturn domText.data.length == INLINE_FILLER_LENGTH && startsWithFiller( domText );\n}\n\n/**\n * Get string data from the text node, removing an {@link module:engine/view/filler~INLINE_FILLER inline filler} from it,\n * if text node contains it.\n *\n *\t\tgetDataWithoutFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ) == 'foo' // true\n *\t\tgetDataWithoutFiller( document.createTextNode( 'foo' ) ) == 'foo' // true\n *\n * @param {Text} domText DOM text node, possible with inline filler.\n * @returns {String} Data without filler.\n */\nexport function getDataWithoutFiller( domText ) {\n\tif ( startsWithFiller( domText ) ) {\n\t\treturn domText.data.slice( INLINE_FILLER_LENGTH );\n\t} else {\n\t\treturn domText.data;\n\t}\n}\n\n/**\n * Assign key observer which move cursor from the end of the inline filler to the beginning of it when\n * the left arrow is pressed, so the filler does not break navigation.\n *\n * @param {module:engine/view/view~View} view View controller instance we should inject quirks handling on.\n */\nexport function injectQuirksHandling( view ) {\n\tview.document.on( 'keydown', jumpOverInlineFiller );\n}\n\n// Move cursor from the end of the inline filler to the beginning of it when, so the filler does not break navigation.\nfunction jumpOverInlineFiller( evt, data ) {\n\tif ( data.keyCode == keyCodes.arrowleft ) {\n\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\tif ( domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed ) {\n\t\t\tconst domParent = domSelection.getRangeAt( 0 ).startContainer;\n\t\t\tconst domOffset = domSelection.getRangeAt( 0 ).startOffset;\n\n\t\t\tif ( startsWithFiller( domParent ) && domOffset <= INLINE_FILLER_LENGTH ) {\n\t\t\t\tdomSelection.collapse( domParent, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/text\n */\n\nimport Node from './node';\n\n/**\n * Tree view text node.\n *\n * The constructor of this class shouldn't be used directly. To create new Text instances\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a tree view text node.\n\t *\n\t * @protected\n\t * @param {String} data The text's data.\n\t */\n\tconstructor( data ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The text content.\n\t\t *\n\t\t * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} module:engine/view/text~Text#_textData\n\t\t */\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\ttext.is( 'text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'view:text' ); // -> true\n\t *\t\ttext.is( 'view:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'model:text' ); // -> false\n\t *\t\ttext.is( 'element' ); // -> false\n\t *\t\ttext.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || type == 'view:text' || super.is( type );\n\t}\n\n\t/**\n\t * The text content.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._textData;\n\t}\n\n\t/**\n\t * This getter is required when using the addition assignment operator on protected property:\n\t *\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst bar = downcastWriter.createText( 'bar' );\n\t *\n\t *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n\t *\t\tconsole.log( foo.data ); // prints: 'foobar'\n\t *\n\t * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n\t *\n\t * @protected\n\t * @type {String}\n\t */\n\tget _data() {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t *\n\t * @protected\n\t * @fires change:text\n\t * @param {String} data New data for the text node.\n\t */\n\tset _data( data ) {\n\t\tthis._fireChange( 'text', this );\n\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks if this text node is similar to other text node.\n\t * Both nodes should have the same data to be considered as similar.\n\t *\n\t * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherNode ) {\n\t\tif ( !( otherNode instanceof Text ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this === otherNode || this.data === otherNode.data;\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/moveoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { _move } from './utils';\n\n/**\n * Operation to move a range of {@link module:engine/model/item~Item model items}\n * to given {@link module:engine/model/position~Position target position}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MoveOperation extends Operation {\n\t/**\n\t * Creates a move operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition\n\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n\t * `sourcePosition` with offset shifted by `howMany`.\n\t * @param {module:engine/model/position~Position} targetPosition Position at which moved nodes will be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( sourcePosition, howMany, targetPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\t\t// `'toNext'` because `sourcePosition` is a bit like a start of the moved range.\n\t\tthis.sourcePosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Offset size of moved range.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/moveoperation~MoveOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position at which moved nodes will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#targetPosition\n\t\t */\n\t\tthis.targetPosition = targetPosition.clone();\n\t\tthis.targetPosition.stickiness = 'toNone';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.targetPosition.root.rootName == '$graveyard' ) {\n\t\t\treturn 'remove';\n\t\t} else if ( this.sourcePosition.root.rootName == '$graveyard' ) {\n\t\t\treturn 'reinsert';\n\t\t}\n\n\t\treturn 'move';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion );\n\t}\n\n\t/**\n\t * Returns the start position of the moved range after it got moved. This may be different than\n\t * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition} in some cases, i.e. when a range is moved\n\t * inside the same parent but {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition targetPosition}\n\t * is after {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition sourcePosition}.\n\t *\n\t *\t\t vv              vv\n\t *\t\tabcdefg ===> adefbcg\n\t *\t\t     ^          ^\n\t *\t\t     targetPos\tmovedRangeStart\n\t *\t\t     offset 6\toffset 4\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetMovedRangeStart() {\n\t\treturn this.targetPosition._getTransformedByDeletion( this.sourcePosition, this.howMany );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst newTargetPosition = this.sourcePosition._getTransformedByInsertion( this.targetPosition, this.howMany );\n\n\t\treturn new this.constructor( this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst sourceElement = this.sourcePosition.parent;\n\t\tconst targetElement = this.targetPosition.parent;\n\t\tconst sourceOffset = this.sourcePosition.offset;\n\t\tconst targetOffset = this.targetPosition.offset;\n\n\t\t// Validate whether move operation has correct parameters.\n\t\t// Validation is pretty complex but move operation is one of the core ways to manipulate the document state.\n\t\t// We expect that many errors might be connected with one of scenarios described below.\n\t\tif ( sourceOffset + this.howMany > sourceElement.maxOffset ) {\n\t\t\t/**\n\t\t\t * The nodes which should be moved do not exist.\n\t\t\t *\n\t\t\t * @error move-operation-nodes-do-not-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'move-operation-nodes-do-not-exist: The nodes which should be moved do not exist.', this\n\t\t\t);\n\t\t} else if ( sourceElement === targetElement && sourceOffset < targetOffset && targetOffset < sourceOffset + this.howMany ) {\n\t\t\t/**\n\t\t\t * Trying to move a range of nodes into the middle of that range.\n\t\t\t *\n\t\t\t * @error move-operation-range-into-itself\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'move-operation-range-into-itself: Trying to move a range of nodes to the inside of that range.', this\n\t\t\t);\n\t\t} else if ( this.sourcePosition.root == this.targetPosition.root ) {\n\t\t\tif ( compareArrays( this.sourcePosition.getParentPath(), this.targetPosition.getParentPath() ) == 'prefix' ) {\n\t\t\t\tconst i = this.sourcePosition.path.length - 1;\n\n\t\t\t\tif ( this.targetPosition.path[ i ] >= sourceOffset && this.targetPosition.path[ i ] < sourceOffset + this.howMany ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Trying to move a range of nodes into one of nodes from that range.\n\t\t\t\t\t *\n\t\t\t\t\t * @error move-operation-node-into-itself\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'move-operation-node-into-itself: Trying to move a range of nodes into one of nodes from that range.', this\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t_move( Range._createFromPositionAndShift( this.sourcePosition, this.howMany ), this.targetPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = this.sourcePosition.toJSON();\n\t\tjson.targetPosition = this.targetPosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MoveOperation';\n\t}\n\n\t/**\n\t * Creates `MoveOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst sourcePosition = Position.fromJSON( json.sourcePosition, document );\n\t\tconst targetPosition = Position.fromJSON( json.targetPosition, document );\n\n\t\treturn new this( sourcePosition, json.howMany, targetPosition, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/highlightstack\n */\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Class used to handle correct order of highlights on elements.\n *\n * When different highlights are applied to same element correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\nexport default class HighlightStack {\n\t/**\n\t * Creates class instance.\n\t */\n\tconstructor() {\n\t\tthis._stack = [];\n\t}\n\n\t/**\n\t * Adds highlight descriptor to the stack.\n\t *\n\t * @fires change:top\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\tadd( descriptor, writer ) {\n\t\tconst stack = this._stack;\n\n\t\t// Save top descriptor and insert new one. If top is changed - fire event.\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._insertDescriptor( descriptor );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Removes highlight descriptor from the stack.\n\t *\n\t * @fires change:top\n\t * @param {String} id Id of the descriptor to remove.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\tremove( id, writer ) {\n\t\tconst stack = this._stack;\n\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._removeDescriptor( id );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts given descriptor in correct place in the stack. It also takes care about updating information when\n\t * descriptor with same id is already present.\n\t *\n\t * @private\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n\t */\n\t_insertDescriptor( descriptor ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === descriptor.id );\n\n\t\t// Inserting exact same descriptor - do nothing.\n\t\tif ( compareDescriptors( descriptor, stack[ index ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If descriptor with same id but with different information is on the stack - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\n\t\t// Find correct place to insert descriptor in the stack.\n\t\t// It have different information (for example priority) so it must be re-inserted in correct place.\n\t\tlet i = 0;\n\n\t\twhile ( stack[ i ] && shouldABeBeforeB( stack[ i ], descriptor ) ) {\n\t\t\ti++;\n\t\t}\n\n\t\tstack.splice( i, 0, descriptor );\n\t}\n\n\t/**\n\t * Removes descriptor with given id from the stack.\n\t *\n\t * @private\n\t * @param {String} id Descriptor's id.\n\t */\n\t_removeDescriptor( id ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === id );\n\n\t\t// If descriptor with same id is on the list - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\t}\n}\n\nmix( HighlightStack, EmitterMixin );\n\n// Compares two descriptors by checking their priority and class list.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean} Returns true if both descriptors are defined and have same priority and classes.\nfunction compareDescriptors( a, b ) {\n\treturn a && b && a.priority == b.priority && classesToString( a.classes ) == classesToString( b.classes );\n}\n\n// Checks whenever first descriptor should be placed in the stack before second one.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean}\nfunction shouldABeBeforeB( a, b ) {\n\tif ( a.priority > b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority < b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use classes to compare.\n\treturn classesToString( a.classes ) > classesToString( b.classes );\n}\n\n// Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} to\n// sorted string.\n//\n// @param {String|Array<String>} descriptor\n// @returns {String}\nfunction classesToString( classes ) {\n\treturn Array.isArray( classes ) ? classes.sort().join( ',' ) : classes;\n}\n\n/**\n * Fired when top element on {@link module:widget/highlightstack~HighlightStack} has been changed\n *\n * @event change:top\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.newDescriptor] New highlight\n * descriptor. It will be `undefined` when last descriptor is removed from the stack.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.oldDescriptor] Old highlight\n * descriptor. It will be `undefined` when first descriptor is added to the stack.\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that can be used to modify element.\n */\n","export default \"<svg viewBox=\\\"0 0 16 16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M4 0v1H1v3H0V.5A.5.5 0 0 1 .5 0H4zm8 0h3.5a.5.5 0 0 1 .5.5V4h-1V1h-3V0zM4 16H.5a.5.5 0 0 1-.5-.5V12h1v3h3v1zm8 0v-1h3v-3h1v3.5a.5.5 0 0 1-.5.5H12z\\\"/><path fill-opacity=\\\".256\\\" d=\\\"M1 1h14v14H1z\\\"/><g class=\\\"ck-icon__selected-indicator\\\"><path d=\\\"M7 0h2v1H7V0zM0 7h1v2H0V7zm15 0h1v2h-1V7zm-8 8h2v1H7v-1z\\\"/><path fill-opacity=\\\".254\\\" d=\\\"M1 1h14v14H1z\\\"/></g></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/utils\n */\n\nimport HighlightStack from './highlightstack';\nimport IconView from '@ckeditor/ckeditor5-ui/src/icon/iconview';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\nimport dragHandleIcon from '../theme/icons/drag-handle.svg';\n\n/**\n * CSS class added to each widget element.\n *\n * @const {String}\n */\nexport const WIDGET_CLASS_NAME = 'ck-widget';\n\n/**\n * CSS class added to currently selected widget element.\n *\n * @const {String}\n */\nexport const WIDGET_SELECTED_CLASS_NAME = 'ck-widget_selected';\n\n/**\n * Returns `true` if given {@link module:engine/view/node~Node} is an {@link module:engine/view/element~Element} and a widget.\n *\n * @param {module:engine/view/node~Node} node\n * @returns {Boolean}\n */\nexport function isWidget( node ) {\n\tif ( !node.is( 'element' ) ) {\n\t\treturn false;\n\t}\n\n\treturn !!node.getCustomProperty( 'widget' );\n}\n\n/* eslint-disable max-len */\n/**\n * Converts the given {@link module:engine/view/element~Element} to a widget in the following way:\n *\n * * sets the `contenteditable` attribute to `\"true\"`,\n * * adds the `ck-widget` CSS class,\n * * adds a custom {@link module:engine/view/element~Element#getFillerOffset `getFillerOffset()`} method returning `null`,\n * * adds a custom property allowing to recognize widget elements by using {@link ~isWidget `isWidget()`},\n * * implements the {@link ~setHighlightHandling view highlight on widgets}.\n *\n * This function needs to be used in conjunction with\n * {@link module:engine/conversion/downcasthelpers~DowncastHelpers downcast conversion helpers}\n * like {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n * Moreover, typically you will want to use `toWidget()` only for `editingDowncast`, while keeping the `dataDowncast` clean.\n *\n * For example, in order to convert a `<widget>` model element to `<div class=\"widget\">` in the view, you can define\n * such converters:\n *\n *\t\teditor.conversion.for( 'editingDowncast' )\n *\t\t\t.elementToElement( {\n *\t\t\t\tmodel: 'widget',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\tconst div = writer.createContainerElement( 'div', { class: 'widget' } );\n *\n *\t\t\t\t\treturn toWidget( div, writer, { label: 'some widget' } );\n *\t\t\t\t}\n *\t\t\t} );\n *\n *\t\teditor.conversion.for( 'dataDowncast' )\n *\t\t\t.elementToElement( {\n *\t\t\t\tmodel: 'widget',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\treturn writer.createContainerElement( 'div', { class: 'widget' } );\n *\t\t\t\t}\n *\t\t\t} );\n *\n * See the full source code of the widget (with a nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param {module:engine/view/element~Element} element\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {Object} [options={}]\n * @param {String|Function} [options.label] Element's label provided to the {@link ~setLabel} function. It can be passed as\n * a plain string or a function returning a string. It represents the widget for assistive technologies (like screen readers).\n * @param {Boolean} [options.hasSelectionHandle=false] If `true`, the widget will have a selection handle added.\n * @returns {module:engine/view/element~Element} Returns the same element.\n */\n/* eslint-enable max-len */\nexport function toWidget( element, writer, options = {} ) {\n\t// The selection on Edge behaves better when the whole editor contents is in a single contenteditable element.\n\t// https://github.com/ckeditor/ckeditor5/issues/1079\n\tif ( !env.isEdge ) {\n\t\twriter.setAttribute( 'contenteditable', 'false', element );\n\t}\n\n\twriter.addClass( WIDGET_CLASS_NAME, element );\n\twriter.setCustomProperty( 'widget', true, element );\n\telement.getFillerOffset = getFillerOffset;\n\n\tif ( options.label ) {\n\t\tsetLabel( element, options.label, writer );\n\t}\n\n\tif ( options.hasSelectionHandle ) {\n\t\taddSelectionHandle( element, writer );\n\t}\n\n\tsetHighlightHandling(\n\t\telement,\n\t\twriter,\n\t\t( element, descriptor, writer ) => writer.addClass( normalizeToArray( descriptor.classes ), element ),\n\t\t( element, descriptor, writer ) => writer.removeClass( normalizeToArray( descriptor.classes ), element )\n\t);\n\n\treturn element;\n\n\t// Normalizes CSS class in descriptor that can be provided in form of an array or a string.\n\tfunction normalizeToArray( classes ) {\n\t\treturn Array.isArray( classes ) ? classes : [ classes ];\n\t}\n}\n\n/**\n * Sets highlight handling methods. Uses {@link module:widget/highlightstack~HighlightStack} to\n * properly determine which highlight descriptor should be used at given time.\n *\n * @param {module:engine/view/element~Element} element\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {Function} add\n * @param {Function} remove\n */\nexport function setHighlightHandling( element, writer, add, remove ) {\n\tconst stack = new HighlightStack();\n\n\tstack.on( 'change:top', ( evt, data ) => {\n\t\tif ( data.oldDescriptor ) {\n\t\t\tremove( element, data.oldDescriptor, data.writer );\n\t\t}\n\n\t\tif ( data.newDescriptor ) {\n\t\t\tadd( element, data.newDescriptor, data.writer );\n\t\t}\n\t} );\n\n\twriter.setCustomProperty( 'addHighlight', ( element, descriptor, writer ) => stack.add( descriptor, writer ), element );\n\twriter.setCustomProperty( 'removeHighlight', ( element, id, writer ) => stack.remove( id, writer ), element );\n}\n\n/**\n * Sets label for given element.\n * It can be passed as a plain string or a function returning a string. Function will be called each time label is retrieved by\n * {@link ~getLabel `getLabel()`}.\n *\n * @param {module:engine/view/element~Element} element\n * @param {String|Function} labelOrCreator\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n */\nexport function setLabel( element, labelOrCreator, writer ) {\n\twriter.setCustomProperty( 'widgetLabel', labelOrCreator, element );\n}\n\n/**\n * Returns the label of the provided element.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {String}\n */\nexport function getLabel( element ) {\n\tconst labelCreator = element.getCustomProperty( 'widgetLabel' );\n\n\tif ( !labelCreator ) {\n\t\treturn '';\n\t}\n\n\treturn typeof labelCreator == 'function' ? labelCreator() : labelCreator;\n}\n\n/**\n * Adds functionality to the provided {@link module:engine/view/editableelement~EditableElement} to act as a widget's editable:\n *\n * * sets the `contenteditable` attribute to `true` when {@link module:engine/view/editableelement~EditableElement#isReadOnly} is `false`,\n * otherwise sets it to `false`,\n * * adds the `ck-editor__editable` and `ck-editor__nested-editable` CSS classes,\n * * adds the `ck-editor__nested-editable_focused` CSS class when the editable is focused and removes it when it is blurred.\n *\n * Similarly to {@link ~toWidget `toWidget()`} this function should be used in `dataDowncast` only and it is usually\n * used together with {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n *\n * For example, in order to convert a `<nested>` model element to `<div class=\"nested\">` in the view, you can define\n * such converters:\n *\n *\t\teditor.conversion.for( 'editingDowncast' )\n *\t\t\t.elementToElement( {\n *\t\t\t\tmodel: 'nested',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\tconst div = writer.createEditableElement( 'div', { class: 'nested' } );\n *\n *\t\t\t\t\treturn toWidgetEditable( nested, writer );\n *\t\t\t\t}\n *\t\t\t} );\n *\n *\t\teditor.conversion.for( 'dataDowncast' )\n *\t\t\t.elementToElement( {\n *\t\t\t\tmodel: 'nested',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\treturn writer.createContainerElement( 'div', { class: 'nested' } );\n *\t\t\t\t}\n *\t\t\t} );\n *\n * See the full source code of the widget (with nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param {module:engine/view/editableelement~EditableElement} editable\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @returns {module:engine/view/editableelement~EditableElement} Returns the same element that was provided in the `editable` parameter\n */\nexport function toWidgetEditable( editable, writer ) {\n\twriter.addClass( [ 'ck-editor__editable', 'ck-editor__nested-editable' ], editable );\n\n\t// The selection on Edge behaves better when the whole editor contents is in a single contentedible element.\n\t// https://github.com/ckeditor/ckeditor5/issues/1079\n\tif ( !env.isEdge ) {\n\t\t// Set initial contenteditable value.\n\t\twriter.setAttribute( 'contenteditable', editable.isReadOnly ? 'false' : 'true', editable );\n\n\t\t// Bind the contenteditable property to element#isReadOnly.\n\t\teditable.on( 'change:isReadOnly', ( evt, property, is ) => {\n\t\t\twriter.setAttribute( 'contenteditable', is ? 'false' : 'true', editable );\n\t\t} );\n\t}\n\n\teditable.on( 'change:isFocused', ( evt, property, is ) => {\n\t\tif ( is ) {\n\t\t\twriter.addClass( 'ck-editor__nested-editable_focused', editable );\n\t\t} else {\n\t\t\twriter.removeClass( 'ck-editor__nested-editable_focused', editable );\n\t\t}\n\t} );\n\n\treturn editable;\n}\n\n/**\n * Returns a model position which is optimal (in terms of UX) for inserting a widget block.\n *\n * For instance, if a selection is in the middle of a paragraph, the position before this paragraph\n * will be returned so that it is not split. If the selection is at the end of a paragraph,\n * the position after this paragraph will be returned.\n *\n * Note: If the selection is placed in an empty block, that block will be returned. If that position\n * is then passed to {@link module:engine/model/model~Model#insertContent},\n * the block will be fully replaced by the image.\n *\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection based on which the insertion position should be calculated.\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {module:engine/model/position~Position} The optimal position.\n */\nexport function findOptimalInsertionPosition( selection, model ) {\n\tconst selectedElement = selection.getSelectedElement();\n\n\tif ( selectedElement && model.schema.isBlock( selectedElement ) ) {\n\t\treturn model.createPositionAfter( selectedElement );\n\t}\n\n\tconst firstBlock = selection.getSelectedBlocks().next().value;\n\n\tif ( firstBlock ) {\n\t\t// If inserting into an empty block – return position in that block. It will get\n\t\t// replaced with the image by insertContent(). #42.\n\t\tif ( firstBlock.isEmpty ) {\n\t\t\treturn model.createPositionAt( firstBlock, 0 );\n\t\t}\n\n\t\tconst positionAfter = model.createPositionAfter( firstBlock );\n\n\t\t// If selection is at the end of the block - return position after the block.\n\t\tif ( selection.focus.isTouching( positionAfter ) ) {\n\t\t\treturn positionAfter;\n\t\t}\n\n\t\t// Otherwise return position before the block.\n\t\treturn model.createPositionBefore( firstBlock );\n\t}\n\n\treturn selection.focus;\n}\n\n/**\n * A util to be used in order to map view positions to correct model positions when implementing a widget\n * which renders non-empty view element for an empty model element.\n *\n * For example:\n *\n *\t\t// Model:\n *\t\t<placeholder type=\"name\"></placeholder>\n *\n *\t\t// View:\n *\t\t<span class=\"placeholder\">name</span>\n *\n * In such case, view positions inside `<span>` cannot be correct mapped to the model (because the model element is empty).\n * To handle mapping positions inside `<span class=\"placeholder\">` to the model use this util as follows:\n *\n *\t\teditor.editing.mapper.on(\n *\t\t\t'viewToModelPosition',\n *\t\t\tviewToModelPositionOutsideModelElement( model, viewElement => viewElement.hasClass( 'placeholder' ) )\n *\t\t);\n *\n * The callback will try to map the view offset of selection to an expected model position.\n *\n * 1. When the position is at the end (or in the middle) of the inline widget:\n *\n *\t\t// View:\n *\t\t<p>foo <span class=\"placeholder\">name|</span> bar</p>\n *\n *\t\t// Model:\n *\t\t<paragraph>foo <placeholder type=\"name\"></placeholder>| bar</paragraph>\n *\n * 2. When the position is at the beginning of the inline widget:\n *\n *\t\t// View:\n *\t\t<p>foo <span class=\"placeholder\">|name</span> bar</p>\n *\n *\t\t// Model:\n *\t\t<paragraph>foo |<placeholder type=\"name\"></placeholder> bar</paragraph>\n *\n * @param {module:engine/model/model~Model} model Model instance on which the callback operates.\n * @param {Function} viewElementMatcher Function that is passed a view element and should return `true` if the custom mapping\n * should be applied to the given view element.\n * @return {Function}\n */\nexport function viewToModelPositionOutsideModelElement( model, viewElementMatcher ) {\n\treturn ( evt, data ) => {\n\t\tconst { mapper, viewPosition } = data;\n\n\t\tconst viewParent = mapper.findMappedViewAncestor( viewPosition );\n\n\t\tif ( !viewElementMatcher( viewParent ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelParent = mapper.toModelElement( viewParent );\n\n\t\tdata.modelPosition = model.createPositionAt( modelParent, viewPosition.isAtStart ? 'before' : 'after' );\n\t};\n}\n\n// Default filler offset function applied to all widget elements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n\n// Adds a drag handle to the widget.\n//\n// @param {module:engine/view/containerelement~ContainerElement}\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction addSelectionHandle( widgetElement, writer ) {\n\tconst selectionHandle = writer.createUIElement( 'div', { class: 'ck ck-widget__selection-handle' }, function( domDocument ) {\n\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t// Use the IconView from the ui library.\n\t\tconst icon = new IconView();\n\t\ticon.set( 'content', dragHandleIcon );\n\n\t\t// Render the icon view right away to append its #element to the selectionHandle DOM element.\n\t\ticon.render();\n\n\t\tdomElement.appendChild( icon.element );\n\n\t\treturn domElement;\n\t} );\n\n\t// Append the selection handle into the widget wrapper.\n\twriter.insert( writer.createPositionAt( widgetElement, 0 ), selectionHandle );\n\twriter.addClass( [ 'ck-widget_with-selection-handle' ], widgetElement );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window, document */\n\n/**\n * @module utils/dom/global\n */\n\n/**\n * A helper (module) giving an access to the global DOM objects such as `window` and\n * `document`. Accessing these objects using this helper allows easy and bulletproof\n * testing, i.e. stubbing native properties:\n *\n *\t\timport global from 'ckeditor5/utils/dom/global.js';\n *\n *\t\t// This stub will work for any code using global module.\n *\t\ttestUtils.sinon.stub( global, 'window', {\n *\t\t\tinnerWidth: 10000\n *\t\t} );\n *\n *\t\tconsole.log( global.window.innerWidth );\n */\nexport default { window, document };\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/splitoperation\n */\n\nimport Operation from './operation';\nimport MergeOperation from './mergeoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _insert, _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to split {@link module:engine/model/element~Element an element} at given\n * {@link module:engine/model/operation/splitoperation~SplitOperation#splitPosition split position} into two elements,\n * both containing a part of the element's original content.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class SplitOperation extends Operation {\n\t/**\n\t * Creates a split operation.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition Position at which an element should be split.\n\t * @param {Number} howMany Total offset size of elements that are in the split element after `position`.\n\t * @param {module:engine/model/position~Position|null} graveyardPosition Position in the graveyard root before the element which\n\t * should be used as a parent of the nodes after `position`. If it is not set, a copy of the the `position` parent will be used.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( splitPosition, howMany, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position at which an element should be split.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#splitPosition\n\t\t */\n\t\tthis.splitPosition = splitPosition.clone();\n\t\t// Keep position sticking to the next node. This way any new content added at the place where the element is split\n\t\t// will be left in the original element.\n\t\tthis.splitPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Total offset size of elements that are in the split element after `position`.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/splitoperation~SplitOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position at which the clone of split element (or element from graveyard) will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#insertionPosition\n\t\t */\n\t\tthis.insertionPosition = SplitOperation.getInsertionPosition( splitPosition );\n\t\tthis.insertionPosition.stickiness = 'toNone';\n\n\t\t/**\n\t\t * Position in the graveyard root before the element which should be used as a parent of the nodes after `position`.\n\t\t * If it is not set, a copy of the the `position` parent will be used.\n\t\t *\n\t\t * The default behavior is to clone the split element. Element from graveyard is used during undo.\n\t\t *\n\t\t * @member {module:engine/model/position~Position|null} #graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition ? graveyardPosition.clone() : null;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tthis.graveyardPosition.stickiness = 'toNext';\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'split';\n\t}\n\n\t/**\n\t * Position inside the new clone of a split element.\n\t *\n\t * This is a position where nodes that are after the split position will be moved to.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget moveTargetPosition() {\n\t\tconst path = this.insertionPosition.path.slice();\n\t\tpath.push( 0 );\n\n\t\treturn new Position( this.insertionPosition.root, path );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the split element that will be moved to the new element.\n\t * The range starts at {@link ~#splitPosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.splitPosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.splitPosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst split = new this.constructor( this.splitPosition, this.howMany, this.graveyardPosition, this.baseVersion );\n\t\tsplit.insertionPosition = this.insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.splitPosition.root.document.graveyard;\n\t\tconst graveyardPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MergeOperation( this.moveTargetPosition, this.howMany, this.splitPosition, graveyardPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.splitPosition.parent;\n\t\tconst offset = this.splitPosition.offset;\n\n\t\t// Validate whether split operation has correct parameters.\n\t\tif ( !element || element.maxOffset < offset ) {\n\t\t\t/**\n\t\t\t * Split position is invalid.\n\t\t\t *\n\t\t\t * @error split-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-position-invalid: Split position is invalid.', this );\n\t\t} else if ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Cannot split root element.\n\t\t\t *\n\t\t\t * @error split-operation-split-in-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-split-in-root: Cannot split root element.', this );\n\t\t} else if ( this.howMany != element.maxOffset - this.splitPosition.offset ) {\n\t\t\t/**\n\t\t\t * Split operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error split-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-how-many-invalid: Split operation specifies wrong number of nodes to move.', this );\n\t\t} else if ( this.graveyardPosition && !this.graveyardPosition.nodeAfter ) {\n\t\t\t/**\n\t\t\t * Graveyard position invalid.\n\t\t\t *\n\t\t\t * @error split-operation-graveyard-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-graveyard-position-invalid: Graveyard position invalid.', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst splitElement = this.splitPosition.parent;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\t_move( Range._createFromPositionAndShift( this.graveyardPosition, 1 ), this.insertionPosition );\n\t\t} else {\n\t\t\tconst newElement = splitElement._clone();\n\n\t\t\t_insert( this.insertionPosition, newElement );\n\t\t}\n\n\t\tconst sourceRange = new Range(\n\t\t\tPosition._createAt( splitElement, this.splitPosition.offset ),\n\t\t\tPosition._createAt( splitElement, splitElement.maxOffset )\n\t\t);\n\n\t\t_move( sourceRange, this.moveTargetPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.splitPosition = this.splitPosition.toJSON();\n\t\tjson.insertionPosition = this.insertionPosition.toJSON();\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tjson.graveyardPosition = this.graveyardPosition.toJSON();\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'SplitOperation';\n\t}\n\n\t/**\n\t * Helper function that returns a default insertion position basing on given `splitPosition`. The default insertion\n\t * position is after the split element.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic getInsertionPosition( splitPosition ) {\n\t\tconst path = splitPosition.path.slice( 0, -1 );\n\t\tpath[ path.length - 1 ]++;\n\n\t\treturn new Position( splitPosition.root, path );\n\t}\n\n\t/**\n\t * Creates `SplitOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst splitPosition = Position.fromJSON( json.splitPosition, document );\n\t\tconst insertionPosition = Position.fromJSON( json.insertionPosition, document );\n\t\tconst graveyardPosition = json.graveyardPosition ? Position.fromJSON( json.graveyardPosition, document ) : null;\n\n\t\tconst split = new this( splitPosition, json.howMany, graveyardPosition, json.baseVersion );\n\t\tsplit.insertionPosition = insertionPosition;\n\n\t\treturn split;\n\t}\n}\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/comparearrays\n */\n\n/**\n * Compares how given arrays relate to each other. One array can be: same as another array, prefix of another array\n * or completely different. If arrays are different, first index at which they differ is returned. Otherwise,\n * a flag specifying the relation is returned. Flags are negative numbers, so whenever a number >= 0 is returned\n * it means that arrays differ.\n *\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 2 ] );\t\t// 'same'\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 2, 1 ] );\t\t// 'prefix'\n *\t\tcompareArrays( [ 0, 2 ], [ 0 ] );\t\t\t// 'extension'\n *\t\tcompareArrays( [ 0, 2 ], [ 1, 2 ] );\t\t// 0\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 1 ] );\t\t// 1\n *\n * @param {Array} a Array that is compared.\n * @param {Array} b Array to compare with.\n * @returns {module:utils/comparearrays~ArrayRelation} How array `a` is related to `b`.\n */\nexport default function compareArrays( a, b ) {\n\tconst minLen = Math.min( a.length, b.length );\n\n\tfor ( let i = 0; i < minLen; i++ ) {\n\t\tif ( a[ i ] != b[ i ] ) {\n\t\t\t// The arrays are different.\n\t\t\treturn i;\n\t\t}\n\t}\n\n\t// Both arrays were same at all points.\n\tif ( a.length == b.length ) {\n\t\t// If their length is also same, they are the same.\n\t\treturn 'same';\n\t} else if ( a.length < b.length ) {\n\t\t// Compared array is shorter so it is a prefix of the other array.\n\t\treturn 'prefix';\n\t} else {\n\t\t// Compared array is longer so it is an extension of the other array.\n\t\treturn 'extension';\n\t}\n}\n\n/**\n * @typedef {'extension'|'same'|'prefix'} module:utils/comparearrays~ArrayRelation\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/istext\n */\n\n/**\n * Checks if the object is a native DOM Text node.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isText( obj ) {\n\treturn Object.prototype.toString.call( obj ) == '[object Text]';\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals navigator:false */\n\n/**\n * @module utils/env\n */\n\nconst userAgent = navigator.userAgent.toLowerCase();\n\n/**\n * A namespace containing environment and browser information.\n *\n * @namespace\n */\nconst env = {\n\t/**\n\t * Indicates that the application is running on Macintosh.\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisMac: isMac( userAgent ),\n\n\t/**\n\t * Indicates that the application is running in Microsoft Edge.\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisEdge: isEdge( userAgent ),\n\n\t/**\n\t * Indicates that the application is running in Firefox (Gecko).\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisGecko: isGecko( userAgent ),\n\n\t/**\n\t * Indicates that the application is running in Safari.\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisSafari: isSafari( userAgent ),\n\n\t/**\n\t * Indicates that the application is running on Android mobile device.\n\t *\n\t * @static\n\t * @type {Boolean}\n\t */\n\tisAndroid: isAndroid( userAgent ),\n\n\t/**\n\t * Environment features information.\n\t *\n\t * @memberOf module:utils/env~env\n\t * @namespace\n\t */\n\tfeatures: {\n\t\t/**\n\t\t * Indicates that the environment supports ES2018 Unicode property escapes — like `\\p{P}` or `\\p{L}`.\n\t\t * More information about unicode properties might be found\n\t\t * [in Unicode Standard Annex #44](https://www.unicode.org/reports/tr44/#GC_Values_Table).\n\t\t *\n\t\t * @type {Boolean}\n\t\t */\n\t\tisRegExpUnicodePropertySupported: isRegExpUnicodePropertySupported()\n\t}\n};\n\nexport default env;\n\n/**\n * Checks if User Agent represented by the string is running on Macintosh.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is running on Macintosh or not.\n */\nexport function isMac( userAgent ) {\n\treturn userAgent.indexOf( 'macintosh' ) > -1;\n}\n\n/**\n * Checks if User Agent represented by the string is Microsoft Edge.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Edge or not.\n */\nexport function isEdge( userAgent ) {\n\treturn !!userAgent.match( /edge\\/(\\d+.?\\d*)/ );\n}\n\n/**\n * Checks if User Agent represented by the string is Firefox (Gecko).\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Firefox or not.\n */\nexport function isGecko( userAgent ) {\n\treturn !!userAgent.match( /gecko\\/\\d+/ );\n}\n\n/**\n * Checks if User Agent represented by the string is Safari.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Safari or not.\n */\nexport function isSafari( userAgent ) {\n\treturn userAgent.indexOf( ' applewebkit/' ) > -1 && userAgent.indexOf( 'chrome' ) === -1;\n}\n\n/**\n * Checks if User Agent represented by the string is Android mobile device.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Safari or not.\n */\nexport function isAndroid( userAgent ) {\n\treturn userAgent.indexOf( 'android' ) > -1;\n}\n\n/**\n * Checks if the current environment supports ES2018 Unicode properties like `\\p{P}` or `\\p{L}`.\n * More information about unicode properties might be found\n * [in Unicode Standard Annex #44](https://www.unicode.org/reports/tr44/#GC_Values_Table).\n *\n * @returns {Boolean}\n */\nexport function isRegExpUnicodePropertySupported() {\n\tlet isSupported = false;\n\n\t// Feature detection for Unicode properties. Added in ES2018. Currently Firefox and Edge do not support it.\n\t// See https://github.com/ckeditor/ckeditor5-mention/issues/44#issuecomment-487002174.\n\n\ttry {\n\t\t// Usage of regular expression literal cause error during build (ckeditor/ckeditor5-dev#534).\n\t\tisSupported = 'ć'.search( new RegExp( '[\\\\p{L}]', 'u' ) ) === 0;\n\t} catch ( error ) {\n\t\t// Firefox throws a SyntaxError when the group is unsupported.\n\t}\n\n\treturn isSupported;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/mergeoperation\n */\n\nimport Operation from './operation';\nimport SplitOperation from './splitoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to merge two {@link module:engine/model/element~Element elements}.\n *\n * The merged element is the parent of {@link ~MergeOperation#sourcePosition} and it is merged into the parent of\n * {@link ~MergeOperation#targetPosition}. All nodes from the merged element are moved to {@link ~MergeOperation#targetPosition}.\n *\n * The merged element is moved to the graveyard at {@link ~MergeOperation#graveyardPosition}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MergeOperation extends Operation {\n\t/**\n\t * Creates a merge operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition Position inside the merged element. All nodes from that\n\t * element after that position will be moved to {@link ~#targetPosition}.\n\t * @param {Number} howMany Summary offset size of nodes which will be moved from the merged element to the new parent.\n\t * @param {module:engine/model/position~Position} targetPosition Position which the nodes from the merged elements will be moved to.\n\t * @param {module:engine/model/position~Position} graveyardPosition Position in graveyard to which the merged element will be moved.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( sourcePosition, howMany, targetPosition, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position inside the merged element. All nodes from that element after that position will be moved to {@link ~#targetPosition}.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\t\t// This is, and should always remain, the first position in its parent.\n\t\tthis.sourcePosition.stickiness = 'toPrevious';\n\n\t\t/**\n\t\t * Summary offset size of nodes which will be moved from the merged element to the new parent.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/mergeoperation~MergeOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position which the nodes from the merged elements will be moved to.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#targetPosition\n\t\t */\n\t\tthis.targetPosition = targetPosition.clone();\n\t\t// Except of a rare scenario in `MergeOperation` x `MergeOperation` transformation,\n\t\t// this is, and should always remain, the last position in its parent.\n\t\tthis.targetPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Position in graveyard to which the merged element will be moved.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition.clone();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'merge';\n\t}\n\n\t/**\n\t * Position before the merged element (which will be deleted).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget deletionPosition() {\n\t\treturn new Position( this.sourcePosition.root, this.sourcePosition.path.slice( 0, -1 ) );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the merged element that will be moved to {@link ~MergeOperation#sourcePosition}.\n\t * The range starts at {@link ~MergeOperation#sourcePosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.sourcePosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.sourcePosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.sourcePosition, this.howMany, this.targetPosition, this.graveyardPosition, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tgetReversed() {\n\t\t// Positions in this method are transformed by this merge operation because the split operation bases on\n\t\t// the context after this merge operation happened (because split operation reverses it).\n\t\t// So we need to acknowledge that the merge operation happened and those positions changed a little.\n\t\tconst targetPosition = this.targetPosition._getTransformedByMergeOperation( this );\n\n\t\tconst path = this.sourcePosition.path.slice( 0, -1 );\n\t\tconst insertionPosition = new Position( this.sourcePosition.root, path )._getTransformedByMergeOperation( this );\n\n\t\tconst split = new SplitOperation( targetPosition, this.howMany, this.graveyardPosition, this.baseVersion + 1 );\n\t\tsplit.insertionPosition = insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst sourceElement = this.sourcePosition.parent;\n\t\tconst targetElement = this.targetPosition.parent;\n\n\t\t// Validate whether merge operation has correct parameters.\n\t\tif ( !sourceElement.parent ) {\n\t\t\t/**\n\t\t\t * Merge source position is invalid. The element to be merged must have a parent node.\n\t\t\t *\n\t\t\t * @error merge-operation-source-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-source-position-invalid: Merge source position is invalid.', this );\n\t\t} else if ( !targetElement.parent ) {\n\t\t\t/**\n\t\t\t * Merge target position is invalid. The element to be merged must have a parent node.\n\t\t\t *\n\t\t\t * @error merge-operation-target-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-target-position-invalid: Merge target position is invalid.', this );\n\t\t} else if ( this.howMany != sourceElement.maxOffset ) {\n\t\t\t/**\n\t\t\t * Merge operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error merge-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-how-many-invalid: Merge operation specifies wrong number of nodes to move.', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst mergedElement = this.sourcePosition.parent;\n\t\tconst sourceRange = Range._createIn( mergedElement );\n\n\t\t_move( sourceRange, this.targetPosition );\n\t\t_move( Range._createOn( mergedElement ), this.graveyardPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = json.sourcePosition.toJSON();\n\t\tjson.targetPosition = json.targetPosition.toJSON();\n\t\tjson.graveyardPosition = json.graveyardPosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MergeOperation';\n\t}\n\n\t/**\n\t * Creates `MergeOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst sourcePosition = Position.fromJSON( json.sourcePosition, document );\n\t\tconst targetPosition = Position.fromJSON( json.targetPosition, document );\n\t\tconst graveyardPosition = Position.fromJSON( json.graveyardPosition, document );\n\n\t\treturn new this( sourcePosition, json.howMany, targetPosition, graveyardPosition, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/operation\n */\n\n/**\n * Abstract base operation class.\n *\n * @abstract\n */\nexport default class Operation {\n\t/**\n\t * Base operation constructor.\n\t *\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( baseVersion ) {\n\t\t/**\n\t\t * {@link module:engine/model/document~Document#version} on which operation can be applied. If you try to\n\t\t * {@link module:engine/model/model~Model#applyOperation apply} operation with different base version than the\n\t\t * {@link module:engine/model/document~Document#version document version} the\n\t\t * {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n\t\t *\n\t\t * @member {Number}\n\t\t */\n\t\tthis.baseVersion = baseVersion;\n\n\t\t/**\n\t\t * Defines whether operation is executed on attached or detached {@link module:engine/model/item~Item items}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isDocumentOperation\n\t\t */\n\t\tthis.isDocumentOperation = this.baseVersion !== null;\n\n\t\t/**\n\t\t * {@link module:engine/model/batch~Batch Batch} to which the operation is added or `null` if the operation is not\n\t\t * added to any batch yet.\n\t\t *\n\t\t * @member {module:engine/model/batch~Batch|null} #batch\n\t\t */\n\t\tthis.batch = null;\n\n\t\t/**\n\t\t * Operation type.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #type\n\t\t */\n\n\t\t/**\n\t\t * Creates and returns an operation that has the same parameters as this operation.\n\t\t *\n\t\t * @method #clone\n\t\t * @returns {module:engine/model/operation/operation~Operation} Clone of this operation.\n\t\t */\n\n\t\t/**\n\t\t * Creates and returns a reverse operation. Reverse operation when executed right after\n\t\t * the original operation will bring back tree model state to the point before the original\n\t\t * operation execution. In other words, it reverses changes done by the original operation.\n\t\t *\n\t\t * Keep in mind that tree model state may change since executing the original operation,\n\t\t * so reverse operation will be \"outdated\". In that case you will need to transform it by\n\t\t * all operations that were executed after the original operation.\n\t\t *\n\t\t * @method #getReversed\n\t\t * @returns {module:engine/model/operation/operation~Operation} Reversed operation.\n\t\t */\n\n\t\t/**\n\t\t * Executes the operation - modifications described by the operation properties will be applied to the model tree.\n\t\t *\n\t\t * @protected\n\t\t * @method #_execute\n\t\t */\n\t}\n\n\t/**\n\t * Checks whether the operation's parameters are correct and the operation can be correctly executed. Throws\n\t * an error if operation is not valid.\n\t *\n\t * @protected\n\t * @method #_validate\n\t */\n\t_validate() {\n\t}\n\n\t/**\n\t * Custom toJSON method to solve child-parent circular dependencies.\n\t *\n\t * @method #toJSON\n\t * @returns {Object} Clone of this object with the operation property replaced with string.\n\t */\n\ttoJSON() {\n\t\t// This method creates only a shallow copy, all nested objects should be defined separately.\n\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/1477.\n\t\tconst json = Object.assign( {}, this );\n\n\t\tjson.__className = this.constructor.className;\n\n\t\t// Remove reference to the parent `Batch` to avoid circular dependencies.\n\t\tdelete json.batch;\n\n\t\t// Only document operations are shared with other clients so it is not necessary to keep this information.\n\t\tdelete json.isDocumentOperation;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Name of the operation class used for serialization.\n\t *\n\t * @type {String}\n\t */\n\tstatic get className() {\n\t\treturn 'Operation';\n\t}\n\n\t/**\n\t * Creates Operation object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} doc Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/operation~Operation}\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new this( json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/collection\n */\n\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport uid from './uid';\nimport mix from './mix';\n\n/**\n * Collections are ordered sets of objects. Items in the collection can be retrieved by their indexes\n * in the collection (like in an array) or by their ids.\n *\n * If an object without an `id` property is being added to the collection, the `id` property will be generated\n * automatically. Note that the automatically generated id is unique only within this single collection instance.\n *\n * By default an item in the collection is identified by its `id` property. The name of the identifier can be\n * configured through the constructor of the collection.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Collection {\n\t/**\n\t * Creates a new Collection instance.\n\t *\n\t * @param {Object} [options={}] The options object.\n\t * @param {String} [options.idProperty='id'] The name of the property which is considered to identify an item.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * The internal list of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Object[]}\n\t\t */\n\t\tthis._items = [];\n\n\t\t/**\n\t\t * The internal map of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._itemMap = new Map();\n\n\t\t/**\n\t\t * The name of the property which is considered to identify an item.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._idProperty = options.idProperty || 'id';\n\n\t\t/**\n\t\t * A helper mapping external items of a bound collection ({@link #bindTo})\n\t\t * and actual items of this collection. It provides information\n\t\t * necessary to properly remove items bound to another collection.\n\t\t *\n\t\t * See {@link #_bindToInternalToExternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToExternalToInternalMap = new WeakMap();\n\n\t\t/**\n\t\t * A helper mapping items of this collection to external items of a bound collection\n\t\t * ({@link #bindTo}). It provides information necessary to manage the bindings, e.g.\n\t\t * to avoid loops in two–way bindings.\n\t\t *\n\t\t * See {@link #_bindToExternalToInternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToInternalToExternalMap = new WeakMap();\n\n\t\t/**\n\t\t * Stores indexes of skipped items from bound external collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Array}\n\t\t */\n\t\tthis._skippedIndexesFromExternal = [];\n\n\t\t/**\n\t\t * A collection instance this collection is bound to as a result\n\t\t * of calling {@link #bindTo} method.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/collection~Collection} #_bindToCollection\n\t\t */\n\t}\n\n\t/**\n\t * The number of items available in the collection.\n\t *\n\t * @member {Number} #length\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * Returns the first item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The first item or `null` if collection is empty.\n\t */\n\tget first() {\n\t\treturn this._items[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the last item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The last item or `null` if collection is empty.\n\t */\n\tget last() {\n\t\treturn this._items[ this.length - 1 ] || null;\n\t}\n\n\t/**\n\t * Adds an item into the collection.\n\t *\n\t * If the item does not have an id, then it will be automatically generated and set on the item.\n\t *\n\t * @chainable\n\t * @param {Object} item\n\t * @param {Number} [index] The position of the item in the collection. The item\n\t * is pushed to the collection when `index` not specified.\n\t * @fires add\n\t */\n\tadd( item, index ) {\n\t\tlet itemId;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( ( idProperty in item ) ) {\n\t\t\titemId = item[ idProperty ];\n\n\t\t\tif ( typeof itemId != 'string' ) {\n\t\t\t\t/**\n\t\t\t\t * This item's id should be a string.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-invalid-id\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-invalid-id', this );\n\t\t\t}\n\n\t\t\tif ( this.get( itemId ) ) {\n\t\t\t\t/**\n\t\t\t\t * This item already exists in the collection.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-item-already-exists\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-item-already-exists', this );\n\t\t\t}\n\t\t} else {\n\t\t\titem[ idProperty ] = itemId = uid();\n\t\t}\n\n\t\t// TODO: Use ES6 default function argument.\n\t\tif ( index === undefined ) {\n\t\t\tindex = this._items.length;\n\t\t} else if ( index > this._items.length || index < 0 ) {\n\t\t\t/**\n\t\t\t * The index number has invalid value.\n\t\t\t *\n\t\t\t * @error collection-add-item-bad-index\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-add-item-invalid-index', this );\n\t\t}\n\n\t\tthis._items.splice( index, 0, item );\n\n\t\tthis._itemMap.set( itemId, item );\n\n\t\tthis.fire( 'add', item, index );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets item by its id or index.\n\t *\n\t * @param {String|Number} idOrIndex The item id or index in the collection.\n\t * @returns {Object|null} The requested item or `null` if such item does not exist.\n\t */\n\tget( idOrIndex ) {\n\t\tlet item;\n\n\t\tif ( typeof idOrIndex == 'string' ) {\n\t\t\titem = this._itemMap.get( idOrIndex );\n\t\t} else if ( typeof idOrIndex == 'number' ) {\n\t\t\titem = this._items[ idOrIndex ];\n\t\t} else {\n\t\t\t/**\n\t\t\t * Index or id must be given.\n\t\t\t *\n\t\t\t * @error collection-get-invalid-arg\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-get-invalid-arg: Index or id must be given.', this );\n\t\t}\n\n\t\treturn item || null;\n\t}\n\n\t/**\n\t * Returns a boolean indicating whether the collection contains an item.\n\t *\n\t * @param {Object|String} itemOrId The item or its id in the collection.\n\t * @returns {Boolean} `true` if the collection contains the item, `false` otherwise.\n\t */\n\thas( itemOrId ) {\n\t\tif ( typeof itemOrId == 'string' ) {\n\t\t\treturn this._itemMap.has( itemOrId );\n\t\t} else { // Object\n\t\t\tconst idProperty = this._idProperty;\n\t\t\tconst id = itemOrId[ idProperty ];\n\n\t\t\treturn this._itemMap.has( id );\n\t\t}\n\t}\n\n\t/**\n\t * Gets index of item in the collection.\n\t * When item is not defined in the collection then index will be equal -1.\n\t *\n\t * @param {Object|String} itemOrId The item or its id in the collection.\n\t * @returns {Number} Index of given item.\n\t */\n\tgetIndex( itemOrId ) {\n\t\tlet item;\n\n\t\tif ( typeof itemOrId == 'string' ) {\n\t\t\titem = this._itemMap.get( itemOrId );\n\t\t} else {\n\t\t\titem = itemOrId;\n\t\t}\n\n\t\treturn this._items.indexOf( item );\n\t}\n\n\t/**\n\t * Removes an item from the collection.\n\t *\n\t * @param {Object|Number|String} subject The item to remove, its id or index in the collection.\n\t * @returns {Object} The removed item.\n\t * @fires remove\n\t */\n\tremove( subject ) {\n\t\tlet index, id, item;\n\t\tlet itemDoesNotExist = false;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( typeof subject == 'string' ) {\n\t\t\tid = subject;\n\t\t\titem = this._itemMap.get( id );\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tindex = this._items.indexOf( item );\n\t\t\t}\n\t\t} else if ( typeof subject == 'number' ) {\n\t\t\tindex = subject;\n\t\t\titem = this._items[ index ];\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tid = item[ idProperty ];\n\t\t\t}\n\t\t} else {\n\t\t\titem = subject;\n\t\t\tid = item[ idProperty ];\n\t\t\tindex = this._items.indexOf( item );\n\t\t\titemDoesNotExist = ( index == -1 || !this._itemMap.get( id ) );\n\t\t}\n\n\t\tif ( itemDoesNotExist ) {\n\t\t\t/**\n\t\t\t * Item not found.\n\t\t\t *\n\t\t\t * @error collection-remove-404\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-remove-404: Item not found.', this );\n\t\t}\n\n\t\tthis._items.splice( index, 1 );\n\t\tthis._itemMap.delete( id );\n\n\t\tconst externalItem = this._bindToInternalToExternalMap.get( item );\n\t\tthis._bindToInternalToExternalMap.delete( item );\n\t\tthis._bindToExternalToInternalMap.delete( externalItem );\n\n\t\tthis.fire( 'remove', item, index );\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Executes the callback for each item in the collection and composes an array or values returned by this callback.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Array} The result of mapping.\n\t */\n\tmap( callback, ctx ) {\n\t\treturn this._items.map( callback, ctx );\n\t}\n\n\t/**\n\t * Finds the first item in the collection for which the `callback` returns a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object} The item for which `callback` returned a true value.\n\t */\n\tfind( callback, ctx ) {\n\t\treturn this._items.find( callback, ctx );\n\t}\n\n\t/**\n\t * Returns an array with items for which the `callback` returned a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object[]} The array with matching items.\n\t */\n\tfilter( callback, ctx ) {\n\t\treturn this._items.filter( callback, ctx );\n\t}\n\n\t/**\n\t * Removes all items from the collection and destroys the binding created using\n\t * {@link #bindTo}.\n\t */\n\tclear() {\n\t\tif ( this._bindToCollection ) {\n\t\t\tthis.stopListening( this._bindToCollection );\n\t\t\tthis._bindToCollection = null;\n\t\t}\n\n\t\twhile ( this.length ) {\n\t\t\tthis.remove( 0 );\n\t\t}\n\t}\n\n\t/**\n\t * Binds and synchronizes the collection with another one.\n\t *\n\t * The binding can be a simple factory:\n\t *\n\t *\t\tclass FactoryClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).as( FactoryClass );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 1 ).label ); // 'bar'\n\t *\n\t *\t\tsource.remove( 0 );\n\t *\t\tconsole.log( target.length ); // 1\n\t *\t\tconsole.log( target.get( 0 ).label ); // 'bar'\n\t *\n\t * or the factory driven by a custom callback:\n\t *\n\t *\t\tclass FooClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tclass BarClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( ( item ) => {\n\t *\t\t\tif ( item.label == 'foo' ) {\n\t *\t\t\t\treturn new FooClass( item );\n\t *\t\t\t} else {\n\t *\t\t\t\treturn new BarClass( item );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ) instanceof FooClass ); // true\n\t *\t\tconsole.log( target.get( 1 ) instanceof BarClass ); // true\n\t *\n\t * or the factory out of property name:\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( 'label' );\n\t *\n\t *\t\tsource.add( { label: { value: 'foo' } } );\n\t *\t\tsource.add( { label: { value: 'bar' } } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ).value ); // 'foo'\n\t *\t\tconsole.log( target.get( 1 ).value ); // 'bar'\n\t *\n\t * It's possible to skip specified items by returning falsy value:\n\t *\n\t *\t\tconst source = new Collection();\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( item => {\n\t *\t\t\tif ( item.hidden ) {\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn item;\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { hidden: true } );\n\t *\t\tsource.add( { hidden: false } );\n\t *\n\t *\t\tconsole.log( source.length ); // 2\n\t *\t\tconsole.log( target.length ); // 1\n\t *\n\t * **Note**: {@link #clear} can be used to break the binding.\n\t *\n\t * @param {module:utils/collection~Collection} externalCollection A collection to be bound.\n\t * @returns {Object}\n\t * @returns {module:utils/collection~CollectionBindToChain} The binding chain object.\n\t */\n\tbindTo( externalCollection ) {\n\t\tif ( this._bindToCollection ) {\n\t\t\t/**\n\t\t\t * The collection cannot be bound more than once.\n\t\t\t *\n\t\t\t * @error collection-bind-to-rebind\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-bind-to-rebind: The collection cannot be bound more than once.', this );\n\t\t}\n\n\t\tthis._bindToCollection = externalCollection;\n\n\t\treturn {\n\t\t\tas: Class => {\n\t\t\t\tthis._setUpBindToBinding( item => new Class( item ) );\n\t\t\t},\n\n\t\t\tusing: callbackOrProperty => {\n\t\t\t\tif ( typeof callbackOrProperty == 'function' ) {\n\t\t\t\t\tthis._setUpBindToBinding( item => callbackOrProperty( item ) );\n\t\t\t\t} else {\n\t\t\t\t\tthis._setUpBindToBinding( item => item[ callbackOrProperty ] );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Finalizes and activates a binding initiated by {#bindTo}.\n\t *\n\t * @protected\n\t * @param {Function} factory A function which produces collection items.\n\t */\n\t_setUpBindToBinding( factory ) {\n\t\tconst externalCollection = this._bindToCollection;\n\n\t\t// Adds the item to the collection once a change has been done to the external collection.\n\t\t//\n\t\t// @private\n\t\tconst addItem = ( evt, externalItem, index ) => {\n\t\t\tconst isExternalBoundToThis = externalCollection._bindToCollection == this;\n\t\t\tconst externalItemBound = externalCollection._bindToInternalToExternalMap.get( externalItem );\n\n\t\t\t// If an external collection is bound to this collection, which makes it a 2–way binding,\n\t\t\t// and the particular external collection item is already bound, don't add it here.\n\t\t\t// The external item has been created **out of this collection's item** and (re)adding it will\n\t\t\t// cause a loop.\n\t\t\tif ( isExternalBoundToThis && externalItemBound ) {\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, externalItemBound );\n\t\t\t\tthis._bindToInternalToExternalMap.set( externalItemBound, externalItem );\n\t\t\t} else {\n\t\t\t\tconst item = factory( externalItem );\n\n\t\t\t\t// When there is no item we need to remember skipped index first and then we can skip this item.\n\t\t\t\tif ( !item ) {\n\t\t\t\t\tthis._skippedIndexesFromExternal.push( index );\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Lets try to put item at the same index as index in external collection\n\t\t\t\t// but when there are a skipped items in one or both collections we need to recalculate this index.\n\t\t\t\tlet finalIndex = index;\n\n\t\t\t\t// When we try to insert item after some skipped items from external collection we need\n\t\t\t\t// to include this skipped items and decrease index.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal' ]\n\t\t\t\t// internal -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We can't just add 'D' to internal at the same index as index in external because\n\t\t\t\t// this will produce empty indexes what is invalid:\n\t\t\t\t// internal -> [ 'A', empty, empty, 'D' ]\n\t\t\t\t//\n\t\t\t\t// So we need to include skipped items and decrease index\n\t\t\t\t// internal -> [ 'A', 'D' ]\n\t\t\t\tfor ( const skipped of this._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\t\tfinalIndex--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We need to take into consideration that external collection could skip some items from\n\t\t\t\t// internal collection.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external' ]\n\t\t\t\t// external -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We need to include skipped items and place new item after them:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external', 'D' ]\n\t\t\t\tfor ( const skipped of externalCollection._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( finalIndex >= skipped ) {\n\t\t\t\t\t\tfinalIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, item );\n\t\t\t\tthis._bindToInternalToExternalMap.set( item, externalItem );\n\t\t\t\tthis.add( item, finalIndex );\n\n\t\t\t\t// After adding new element to internal collection we need update indexes\n\t\t\t\t// of skipped items in external collection.\n\t\t\t\tfor ( let i = 0; i < externalCollection._skippedIndexesFromExternal.length; i++ ) {\n\t\t\t\t\tif ( finalIndex <= externalCollection._skippedIndexesFromExternal[ i ] ) {\n\t\t\t\t\t\texternalCollection._skippedIndexesFromExternal[ i ]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Load the initial content of the collection.\n\t\tfor ( const externalItem of externalCollection ) {\n\t\t\taddItem( null, externalItem, externalCollection.getIndex( externalItem ) );\n\t\t}\n\n\t\t// Synchronize the with collection as new items are added.\n\t\tthis.listenTo( externalCollection, 'add', addItem );\n\n\t\t// Synchronize the with collection as new items are removed.\n\t\tthis.listenTo( externalCollection, 'remove', ( evt, externalItem, index ) => {\n\t\t\tconst item = this._bindToExternalToInternalMap.get( externalItem );\n\n\t\t\tif ( item ) {\n\t\t\t\tthis.remove( item );\n\t\t\t}\n\n\t\t\t// After removing element from external collection we need update/remove indexes\n\t\t\t// of skipped items in internal collection.\n\t\t\tthis._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce( ( result, skipped ) => {\n\t\t\t\tif ( index < skipped ) {\n\t\t\t\t\tresult.push( skipped - 1 );\n\t\t\t\t}\n\n\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\tresult.push( skipped );\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [] );\n\t\t} );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Fired when an item is added to the collection.\n\t *\n\t * @event add\n\t * @param {Object} item The added item.\n\t */\n\n\t/**\n\t * Fired when an item is removed from the collection.\n\t *\n\t * @event remove\n\t * @param {Object} item The removed item.\n\t * @param {Number} index Index from which item was removed.\n\t */\n}\n\nmix( Collection, EmitterMixin );\n\n/**\n * An object returned by the {@link module:utils/collection~Collection#bindTo `bindTo()`} method\n * providing functions that specify the type of the binding.\n *\n * See the {@link module:utils/collection~Collection#bindTo `bindTo()`} documentation for examples.\n *\n * @interface module:utils/collection~CollectionBindToChain\n */\n\n/**\n * Creates a callback or a property binding.\n *\n * @method #using\n * @param {Function|String} callbackOrProperty  When the function is passed, it should return\n * the collection items. When the string is provided, the property value is used to create the bound collection items.\n */\n\n/**\n * Creates the class factory binding in which items of the source collection are passed to\n * the constructor of the specified class.\n *\n * @method #as\n * @param {Function} Class The class constructor used to create instances in the factory.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/rect\n */\n\nimport isRange from './isrange';\nimport isWindow from './iswindow';\nimport getBorderWidths from './getborderwidths';\nimport isText from './istext';\nimport { isElement } from 'lodash-es';\n\nconst rectProperties = [ 'top', 'right', 'bottom', 'left', 'width', 'height' ];\n\n/**\n * A helper class representing a `ClientRect` object, e.g. value returned by\n * the native `object.getBoundingClientRect()` method. Provides a set of methods\n * to manipulate the rect and compare it against other rect instances.\n */\nexport default class Rect {\n\t/**\n\t * Creates an instance of rect.\n\t *\n\t *\t\t// Rect of an HTMLElement.\n\t *\t\tconst rectA = new Rect( document.body );\n\t *\n\t *\t\t// Rect of a DOM Range.\n\t *\t\tconst rectB = new Rect( document.getSelection().getRangeAt( 0 ) );\n\t *\n\t *\t\t// Rect of a window (web browser viewport).\n\t *\t\tconst rectC = new Rect( window );\n\t *\n\t *\t\t// Rect out of an object.\n\t *\t\tconst rectD = new Rect( { top: 0, right: 10, bottom: 10, left: 0, width: 10, height: 10 } );\n\t *\n\t *\t\t// Rect out of another Rect instance.\n\t *\t\tconst rectE = new Rect( rectD );\n\t *\n\t *\t\t// Rect out of a ClientRect.\n\t *\t\tconst rectF = new Rect( document.body.getClientRects().item( 0 ) );\n\t *\n\t * **Note**: By default a rect of an HTML element includes its CSS borders and scrollbars (if any)\n\t * ant the rect of a `window` includes scrollbars too. Use {@link #excludeScrollbarsAndBorders}\n\t * to get the inner part of the rect.\n\t *\n\t * @param {HTMLElement|Range|Window|ClientRect|module:utils/dom/rect~Rect|Object} source A source object to create the rect.\n\t */\n\tconstructor( source ) {\n\t\tconst isSourceRange = isRange( source );\n\n\t\t/**\n\t\t * The object this rect is for.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {HTMLElement|Range|ClientRect|module:utils/dom/rect~Rect|Object} #_source\n\t\t */\n\t\tObject.defineProperty( this, '_source', {\n\t\t\t// If the source is a Rect instance, copy it's #_source.\n\t\t\tvalue: source._source || source,\n\t\t\twritable: true,\n\t\t\tenumerable: false\n\t\t} );\n\n\t\tif ( isElement( source ) || isSourceRange ) {\n\t\t\t// The `Rect` class depends on `getBoundingClientRect` and `getClientRects` DOM methods. If the source\n\t\t\t// of a rect in an HTML element or a DOM range but it does not belong to any rendered DOM tree, these methods\n\t\t\t// will fail to obtain the geometry and the rect instance makes little sense to the features using it.\n\t\t\t// To get rid of this warning make sure the source passed to the constructor is a descendant of `window.document.body`.\n\t\t\t// @if CK_DEBUG // const sourceNode = isSourceRange ? source.startContainer : source;\n\t\t\t// @if CK_DEBUG // if ( !sourceNode.ownerDocument || !sourceNode.ownerDocument.body.contains( sourceNode ) ) {\n\t\t\t// @if CK_DEBUG // \tconsole.warn(\n\t\t\t// @if CK_DEBUG // \t\t'rect-source-not-in-dom: The source of this rect does not belong to any rendered DOM tree.',\n\t\t\t// @if CK_DEBUG // \t\t{ source } );\n\t\t\t// @if CK_DEBUG // }\n\n\t\t\tif ( isSourceRange ) {\n\t\t\t\tcopyRectProperties( this, Rect.getDomRangeRects( source )[ 0 ] );\n\t\t\t} else {\n\t\t\t\tcopyRectProperties( this, source.getBoundingClientRect() );\n\t\t\t}\n\t\t} else if ( isWindow( source ) ) {\n\t\t\tconst { innerWidth, innerHeight } = source;\n\n\t\t\tcopyRectProperties( this, {\n\t\t\t\ttop: 0,\n\t\t\t\tright: innerWidth,\n\t\t\t\tbottom: innerHeight,\n\t\t\t\tleft: 0,\n\t\t\t\twidth: innerWidth,\n\t\t\t\theight: innerHeight\n\t\t\t} );\n\t\t} else {\n\t\t\tcopyRectProperties( this, source );\n\t\t}\n\n\t\t/**\n\t\t * The \"top\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #top\n\t\t */\n\n\t\t/**\n\t\t * The \"right\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #right\n\t\t */\n\n\t\t/**\n\t\t * The \"bottom\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #bottom\n\t\t */\n\n\t\t/**\n\t\t * The \"left\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #left\n\t\t */\n\n\t\t/**\n\t\t * The \"width\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #width\n\t\t */\n\n\t\t/**\n\t\t * The \"height\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #height\n\t\t */\n\t}\n\n\t/**\n\t * Returns a clone of the rect.\n\t *\n\t * @returns {module:utils/dom/rect~Rect} A cloned rect.\n\t */\n\tclone() {\n\t\treturn new Rect( this );\n\t}\n\n\t/**\n\t * Moves the rect so that its upper–left corner lands in desired `[ x, y ]` location.\n\t *\n\t * @param {Number} x Desired horizontal location.\n\t * @param {Number} y Desired vertical location.\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\n\t */\n\tmoveTo( x, y ) {\n\t\tthis.top = y;\n\t\tthis.right = x + this.width;\n\t\tthis.bottom = y + this.height;\n\t\tthis.left = x;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves the rect in–place by a dedicated offset.\n\t *\n\t * @param {Number} x A horizontal offset.\n\t * @param {Number} y A vertical offset\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\n\t */\n\tmoveBy( x, y ) {\n\t\tthis.top += y;\n\t\tthis.right += x;\n\t\tthis.left += x;\n\t\tthis.bottom += y;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a new rect a a result of intersection with another rect.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect\n\t * @returns {module:utils/dom/rect~Rect}\n\t */\n\tgetIntersection( anotherRect ) {\n\t\tconst rect = {\n\t\t\ttop: Math.max( this.top, anotherRect.top ),\n\t\t\tright: Math.min( this.right, anotherRect.right ),\n\t\t\tbottom: Math.min( this.bottom, anotherRect.bottom ),\n\t\t\tleft: Math.max( this.left, anotherRect.left )\n\t\t};\n\n\t\trect.width = rect.right - rect.left;\n\t\trect.height = rect.bottom - rect.top;\n\n\t\tif ( rect.width < 0 || rect.height < 0 ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn new Rect( rect );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the area of intersection with another rect.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect [description]\n\t * @returns {Number} Area of intersection.\n\t */\n\tgetIntersectionArea( anotherRect ) {\n\t\tconst rect = this.getIntersection( anotherRect );\n\n\t\tif ( rect ) {\n\t\t\treturn rect.getArea();\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the area of the rect.\n\t *\n\t * @returns {Number}\n\t */\n\tgetArea() {\n\t\treturn this.width * this.height;\n\t}\n\n\t/**\n\t * Returns a new rect, a part of the original rect, which is actually visible to the user,\n\t * e.g. an original rect cropped by parent element rects which have `overflow` set in CSS\n\t * other than `\"visible\"`.\n\t *\n\t * If there's no such visible rect, which is when the rect is limited by one or many of\n\t * the ancestors, `null` is returned.\n\t *\n\t * @returns {module:utils/dom/rect~Rect|null} A visible rect instance or `null`, if there's none.\n\t */\n\tgetVisible() {\n\t\tconst source = this._source;\n\t\tlet visibleRect = this.clone();\n\n\t\t// There's no ancestor to crop <body> with the overflow.\n\t\tif ( !isBody( source ) ) {\n\t\t\tlet parent = source.parentNode || source.commonAncestorContainer;\n\n\t\t\t// Check the ancestors all the way up to the <body>.\n\t\t\twhile ( parent && !isBody( parent ) ) {\n\t\t\t\tconst parentRect = new Rect( parent );\n\t\t\t\tconst intersectionRect = visibleRect.getIntersection( parentRect );\n\n\t\t\t\tif ( intersectionRect ) {\n\t\t\t\t\tif ( intersectionRect.getArea() < visibleRect.getArea() ) {\n\t\t\t\t\t\t// Reduce the visible rect to the intersection.\n\t\t\t\t\t\tvisibleRect = intersectionRect;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// There's no intersection, the rect is completely invisible.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tparent = parent.parentNode;\n\t\t\t}\n\t\t}\n\n\t\treturn visibleRect;\n\t}\n\n\t/**\n\t * Checks if all property values ({@link #top}, {@link #left}, {@link #right},\n\t * {@link #bottom}, {@link #width} and {@link #height}) are the equal in both rect\n\t * instances.\n\t *\n\t * @param {module:utils/dom/rect~Rect} rect A rect instance to compare with.\n\t * @returns {Boolean} `true` when Rects are equal. `false` otherwise.\n\t */\n\tisEqual( anotherRect ) {\n\t\tfor ( const prop of rectProperties ) {\n\t\t\tif ( this[ prop ] !== anotherRect[ prop ] ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether a rect fully contains another rect instance.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect\n\t * @returns {Boolean} `true` if contains, `false` otherwise.\n\t */\n\tcontains( anotherRect ) {\n\t\tconst intersectRect = this.getIntersection( anotherRect );\n\n\t\treturn !!( intersectRect && intersectRect.isEqual( anotherRect ) );\n\t}\n\n\t/**\n\t * Excludes scrollbars and CSS borders from the rect.\n\t *\n\t * * Borders are removed when {@link #_source} is an HTML element.\n\t * * Scrollbars are excluded from HTML elements and the `window`.\n\t *\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been updated.\n\t */\n\texcludeScrollbarsAndBorders() {\n\t\tconst source = this._source;\n\t\tlet scrollBarWidth, scrollBarHeight, direction;\n\n\t\tif ( isWindow( source ) ) {\n\t\t\tscrollBarWidth = source.innerWidth - source.document.documentElement.clientWidth;\n\t\t\tscrollBarHeight = source.innerHeight - source.document.documentElement.clientHeight;\n\t\t\tdirection = source.getComputedStyle( source.document.documentElement ).direction;\n\t\t} else {\n\t\t\tconst borderWidths = getBorderWidths( this._source );\n\n\t\t\tscrollBarWidth = source.offsetWidth - source.clientWidth - borderWidths.left - borderWidths.right;\n\t\t\tscrollBarHeight = source.offsetHeight - source.clientHeight - borderWidths.top - borderWidths.bottom;\n\t\t\tdirection = source.ownerDocument.defaultView.getComputedStyle( source ).direction;\n\n\t\t\tthis.left += borderWidths.left;\n\t\t\tthis.top += borderWidths.top;\n\t\t\tthis.right -= borderWidths.right;\n\t\t\tthis.bottom -= borderWidths.bottom;\n\t\t\tthis.width = this.right - this.left;\n\t\t\tthis.height = this.bottom - this.top;\n\t\t}\n\n\t\tthis.width -= scrollBarWidth;\n\n\t\tif ( direction === 'ltr' ) {\n\t\t\tthis.right -= scrollBarWidth;\n\t\t} else {\n\t\t\tthis.left += scrollBarWidth;\n\t\t}\n\n\t\tthis.height -= scrollBarHeight;\n\t\tthis.bottom -= scrollBarHeight;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns an array of rects of the given native DOM Range.\n\t *\n\t * @param {Range} range A native DOM range.\n\t * @returns {Array.<module:utils/dom/rect~Rect>} DOM Range rects.\n\t */\n\tstatic getDomRangeRects( range ) {\n\t\tconst rects = [];\n\t\t// Safari does not iterate over ClientRectList using for...of loop.\n\t\tconst clientRects = Array.from( range.getClientRects() );\n\n\t\tif ( clientRects.length ) {\n\t\t\tfor ( const rect of clientRects ) {\n\t\t\t\trects.push( new Rect( rect ) );\n\t\t\t}\n\t\t}\n\t\t// If there's no client rects for the Range, use parent container's bounding rect\n\t\t// instead and adjust rect's width to simulate the actual geometry of such range.\n\t\t// https://github.com/ckeditor/ckeditor5-utils/issues/153\n\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/317\n\t\telse {\n\t\t\tlet startContainer = range.startContainer;\n\n\t\t\tif ( isText( startContainer ) ) {\n\t\t\t\tstartContainer = startContainer.parentNode;\n\t\t\t}\n\n\t\t\tconst rect = new Rect( startContainer.getBoundingClientRect() );\n\t\t\trect.right = rect.left;\n\t\t\trect.width = 0;\n\n\t\t\trects.push( rect );\n\t\t}\n\n\t\treturn rects;\n\t}\n}\n\n// Acquires all the rect properties from the passed source.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} rect\n// @param {ClientRect|module:utils/dom/rect~Rect|Object} source\nfunction copyRectProperties( rect, source ) {\n\tfor ( const p of rectProperties ) {\n\t\trect[ p ] = source[ p ];\n\t}\n}\n\n// Checks if provided object is a <body> HTML element.\n//\n// @private\n// @param {HTMLElement|Range} elementOrRange\n// @returns {Boolean}\nfunction isBody( elementOrRange ) {\n\tif ( !isElement( elementOrRange ) ) {\n\t\treturn false;\n\t}\n\n\treturn elementOrRange === elementOrRange.ownerDocument.body;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/element\n */\n\nimport Node from './node';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport objectToMap from '@ckeditor/ckeditor5-utils/src/objecttomap';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Matcher from './matcher';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * View element.\n *\n * The editing engine does not define a fixed semantics of its elements (it is \"DTD-free\").\n * This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. When creating an element you should use one of the following methods:\n *\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `downcastWriter#createContainerElement()`}\n * in order to create a {@link module:engine/view/containerelement~ContainerElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `downcastWriter#createAttributeElement()`}\n * in order to create a {@link module:engine/view/attributeelement~AttributeElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`}\n * in order to create a {@link module:engine/view/emptyelement~EmptyElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}\n * in order to create a {@link module:engine/view/uielement~UIElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`}\n * in order to create a {@link module:engine/view/editableelement~EditableElement}.\n *\n * Note that for view elements which are not created from the model, like elements from mutations, paste or\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element.\n * In such cases the {@link module:engine/view/upcastwriter~UpcastWriter#createElement `UpcastWriter#createElement()`} method\n * should be used to create generic view elements.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a view element.\n\t *\n\t * Attributes can be passed in various formats:\n\t *\n\t *\t\tnew Element( 'div', { class: 'editor', contentEditable: 'true' } ); // object\n\t *\t\tnew Element( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n\t *\t\tnew Element( 'div', mapOfAttributes ); // map\n\t *\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Name of the element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Map of attributes, where attributes names are keys and attributes values are values.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} #_attrs\n\t\t */\n\t\tthis._attrs = parseAttributes( attrs );\n\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\n\t\t/**\n\t\t * Set of classes associated with element instance.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set}\n\t\t */\n\t\tthis._classes = new Set();\n\n\t\tif ( this._attrs.has( 'class' ) ) {\n\t\t\t// Remove class attribute and handle it by class set.\n\t\t\tconst classString = this._attrs.get( 'class' );\n\t\t\tparseClasses( this._classes, classString );\n\t\t\tthis._attrs.delete( 'class' );\n\t\t}\n\n\t\t/**\n\t\t * Map of styles.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} module:engine/view/element~Element#_styles\n\t\t */\n\t\tthis._styles = new Map();\n\n\t\tif ( this._attrs.has( 'style' ) ) {\n\t\t\t// Remove style attribute and handle it by styles map.\n\t\t\tparseInlineStyles( this._styles, this._attrs.get( 'style' ) );\n\t\t\tthis._attrs.delete( 'style' );\n\t\t}\n\n\t\t/**\n\t\t * Map of custom properties.\n\t\t * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map}\n\t\t */\n\t\tthis._customProperties = new Map();\n\t}\n\n\t/**\n\t * Number of element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._children.length === 0;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\telement.is( 'element' ); // -> true\n\t *\t\telement.is( 'node' ); // -> true\n\t *\t\telement.is( 'view:element' ); // -> true\n\t *\t\telement.is( 'view:node' ); // -> true\n\t *\n\t *\t\telement.is( 'model:element' ); // -> false\n\t *\t\telement.is( 'documentSelection' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/view/element~Element#name name}:\n\t *\n\t *\t\telement.is( 'img' ); // -> true if this is an <img> element\n\t *\t\telement.is( 'element', 'img' ); // -> same as above\n\t *\t\ttext.is( 'img' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'element' || cutType == this.name || super.is( type );\n\t\t} else {\n\t\t\treturn cutType == 'element' && name == this.name;\n\t\t}\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\n\t *\n\t * @returns {Iterable.<String>} Keys for attributes.\n\t */\n\t* getAttributeKeys() {\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield 'class';\n\t\t}\n\n\t\tif ( this._styles.size > 0 ) {\n\t\t\tyield 'style';\n\t\t}\n\n\t\tyield* this._attrs.keys();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this element's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getAttributes() {\n\t\tyield* this._attrs.entries();\n\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield [ 'class', this.getAttribute( 'class' ) ];\n\t\t}\n\n\t\tif ( this._styles.size > 0 ) {\n\t\t\tyield [ 'style', this.getAttribute( 'style' ) ];\n\t\t}\n\t}\n\n\t/**\n\t * Gets attribute by key. If attribute is not present - returns undefined.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {String|undefined} Attribute value.\n\t */\n\tgetAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\treturn [ ...this._classes ].join( ' ' );\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\tif ( this._styles.size > 0 ) {\n\t\t\t\tlet styleString = '';\n\n\t\t\t\tfor ( const [ property, value ] of this._styles ) {\n\t\t\t\t\tstyleString += `${ property }:${ value };`;\n\t\t\t\t}\n\n\t\t\t\treturn styleString;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns a boolean indicating whether an attribute with the specified key exists in the element.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} `true` if attribute with the specified key exists in the element, false otherwise.\n\t */\n\thasAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\treturn this._classes.size > 0;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\treturn this._styles.size > 0;\n\t\t}\n\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t * Both elements should have the same name and attributes to be considered as similar. Two similar elements\n\t * can contain different set of children nodes.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\tif ( !( otherElement instanceof Element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If exactly the same Element is provided - return true immediately.\n\t\tif ( this === otherElement ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check element name.\n\t\tif ( this.name != otherElement.name ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check number of attributes, classes and styles.\n\t\tif ( this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size ||\n\t\t\tthis._styles.size !== otherElement._styles.size ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes are the same.\n\t\tfor ( const [ key, value ] of this._attrs ) {\n\t\t\tif ( !otherElement._attrs.has( key ) || otherElement._attrs.get( key ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if classes are the same.\n\t\tfor ( const className of this._classes ) {\n\t\t\tif ( !otherElement._classes.has( className ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles are the same.\n\t\tfor ( const [ property, value ] of this._styles ) {\n\t\t\tif ( !otherElement._styles.has( property ) || otherElement._styles.get( property ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns true if class is present.\n\t * If more then one class is provided - returns true only when all classes are present.\n\t *\n\t *\t\telement.hasClass( 'foo' ); // Returns true if 'foo' class is present.\n\t *\t\telement.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\n\t *\n\t * @param {...String} className\n\t */\n\thasClass( ...className ) {\n\t\tfor ( const name of className ) {\n\t\t\tif ( !this._classes.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns iterator that contains all class names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetClassNames() {\n\t\treturn this._classes.keys();\n\t}\n\n\t/**\n\t * Returns style value for given property.\n\t * Undefined is returned if style does not exist.\n\t *\n\t * @param {String} property\n\t * @returns {String|undefined}\n\t */\n\tgetStyle( property ) {\n\t\treturn this._styles.get( property );\n\t}\n\n\t/**\n\t * Returns iterator that contains all style names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetStyleNames() {\n\t\treturn this._styles.keys();\n\t}\n\n\t/**\n\t * Returns true if style keys are present.\n\t * If more then one style property is provided - returns true only when all properties are present.\n\t *\n\t *\t\telement.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\n\t *\t\telement.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\n\t *\n\t * @param {...String} property\n\t */\n\thasStyle( ...property ) {\n\t\tfor ( const name of property ) {\n\t\t\tif ( !this._styles.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns ancestor element that match specified pattern.\n\t * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\n\t *\n\t * @see module:engine/view/matcher~Matcher\n\t * @param {Object|String|RegExp|Function} patterns Patterns used to match correct ancestor.\n\t * See {@link module:engine/view/matcher~Matcher}.\n\t * @returns {module:engine/view/element~Element|null} Found element or `null` if no matching ancestor was found.\n\t */\n\tfindAncestor( ...patterns ) {\n\t\tconst matcher = new Matcher( ...patterns );\n\t\tlet parent = this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( matcher.match( parent ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the custom property value for the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @returns {*}\n\t */\n\tgetCustomProperty( key ) {\n\t\treturn this._customProperties.get( key );\n\t}\n\n\t/**\n\t * Returns an iterator which iterates over this element's custom properties.\n\t * Iterator provides `[ key, value ]` pairs for each stored property.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getCustomProperties() {\n\t\tyield* this._customProperties.entries();\n\t}\n\n\t/**\n\t * Returns identity string based on element's name, styles, classes and other attributes.\n\t * Two elements that {@link #isSimilar are similar} will have same identity string.\n\t * It has the following format:\n\t *\n\t *\t\t'name class=\"class1,class2\" style=\"style1:value1;style2:value2\" attr1=\"val1\" attr2=\"val2\"'\n \t *\n\t * For example:\n\t *\n\t *\t\tconst element = writer.createContainerElement( 'foo', {\n\t *\t\t\tbanana: '10',\n\t *\t\t\tapple: '20',\n\t *\t\t\tstyle: 'color: red; border-color: white;',\n\t *\t\t\tclass: 'baz'\n\t *\t\t} );\n\t *\n\t *\t\t// returns 'foo class=\"baz\" style=\"border-color:white;color:red\" apple=\"20\" banana=\"10\"'\n\t *\t\telement.getIdentity();\n\t *\n\t * NOTE: Classes, styles and other attributes are sorted alphabetically.\n\t *\n\t * @returns {String}\n\t */\n\tgetIdentity() {\n\t\tconst classes = Array.from( this._classes ).sort().join( ',' );\n\t\tconst styles = Array.from( this._styles ).map( i => `${ i[ 0 ] }:${ i[ 1 ] }` ).sort().join( ';' );\n\t\tconst attributes = Array.from( this._attrs ).map( i => `${ i[ 0 ] }=\"${ i[ 1 ] }\"` ).sort().join( ' ' );\n\n\t\treturn this.name +\n\t\t\t( classes == '' ? '' : ` class=\"${ classes }\"` ) +\n\t\t\t( styles == '' ? '' : ` style=\"${ styles }\"` ) +\n\t\t\t( attributes == '' ? '' : ` ${ attributes }` );\n\t}\n\n\t/**\n\t * Clones provided element.\n\t *\n\t * @protected\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/element~Element} Clone of this element.\n\t */\n\t_clone( deep = false ) {\n\t\tconst childrenClone = [];\n\n\t\tif ( deep ) {\n\t\t\tfor ( const child of this.getChildren() ) {\n\t\t\t\tchildrenClone.push( child._clone( deep ) );\n\t\t\t}\n\t\t}\n\n\t\t// ContainerElement and AttributeElement should be also cloned properly.\n\t\tconst cloned = new this.constructor( this.name, this._attrs, childrenClone );\n\n\t\t// Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\n\t\t// parse once again in constructor.\n\t\tcloned._classes = new Set( this._classes );\n\t\tcloned._styles = new Map( this._styles );\n\n\t\t// Clone custom properties.\n\t\tcloned._customProperties = new Map( this._customProperties );\n\n\t\t// Clone filler offset method.\n\t\t// We can't define this method in a prototype because it's behavior which\n\t\t// is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\n\t\tcloned.getFillerOffset = this.getFillerOffset;\n\n\t\treturn cloned;\n\t}\n\n\t/**\n\t * {@link module:engine/view/element~Element#_insertChild Insert} a child node or a list of child nodes at the end of this node\n\t * and sets the parent of these nodes to this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of appended nodes.\n\t */\n\t_appendChild( items ) {\n\t\treturn this._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\t_insertChild( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#remove\n\t * @protected\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Adds or overwrite attribute with a specified key and value.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setAttribute( key, value ) {\n\t\tvalue = String( value );\n\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( key == 'class' ) {\n\t\t\tparseClasses( this._classes, value );\n\t\t} else if ( key == 'style' ) {\n\t\t\tparseInlineStyles( this._styles, value );\n\t\t} else {\n\t\t\tthis._attrs.set( key, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} Returns true if an attribute existed and has been removed.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\t// Remove class attribute.\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\tthis._classes.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove style attribute.\n\t\tif ( key == 'style' ) {\n\t\t\tif ( this._styles.size > 0 ) {\n\t\t\t\tthis._styles.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove other attributes.\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Adds specified class.\n\t *\n\t *\t\telement._addClass( 'foo' ); // Adds 'foo' class.\n\t *\t\telement._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#addClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_addClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.add( name ) );\n\t}\n\n\t/**\n\t * Removes specified class.\n\t *\n\t *\t\telement._removeClass( 'foo' );  // Removes 'foo' class.\n\t *\t\telement._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.delete( name ) );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\telement._setStyle( 'color', 'red' );\n\t *\t\telement._setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t} );\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setStyle\n\t * @protected\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setStyle( property, value ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( isPlainObject( property ) ) {\n\t\t\tconst keys = Object.keys( property );\n\n\t\t\tfor ( const key of keys ) {\n\t\t\t\tthis._styles.set( key, property[ key ] );\n\t\t\t}\n\t\t} else {\n\t\t\tthis._styles.set( property, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes specified style.\n\t *\n\t *\t\telement._removeStyle( 'color' );  // Removes 'color' style.\n\t *\t\telement._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeStyle\n\t * @protected\n\t * @param {Array.<String>|String} property\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeStyle( property ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tproperty = Array.isArray( property ) ? property : [ property ];\n\t\tproperty.forEach( name => this._styles.delete( name ) );\n\t}\n\n\t/**\n\t * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t */\n\t_setCustomProperty( key, value ) {\n\t\tthis._customProperties.set( key, value );\n\t}\n\n\t/**\n\t * Removes the custom property stored under the given key.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\t_removeCustomProperty( key ) {\n\t\treturn this._customProperties.delete( key );\n\t}\n\n\t/**\n\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t *\n\t * @abstract\n\t * @method module:engine/view/element~Element#getFillerOffset\n\t */\n}\n\n// Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\n// as an object (instead of `Map`), the object is transformed to the map. Attributes with `null` value are removed.\n// Attributes with non-`String` value are converted to `String`.\n//\n// @param {Object|Map} attrs Attributes to parse.\n// @returns {Map} Parsed attributes.\nfunction parseAttributes( attrs ) {\n\tif ( isPlainObject( attrs ) ) {\n\t\tattrs = objectToMap( attrs );\n\t} else {\n\t\tattrs = new Map( attrs );\n\t}\n\n\tfor ( const [ key, value ] of attrs ) {\n\t\tif ( value === null ) {\n\t\t\tattrs.delete( key );\n\t\t} else if ( typeof value != 'string' ) {\n\t\t\tattrs.set( key, String( value ) );\n\t\t}\n\t}\n\n\treturn attrs;\n}\n\n// Parses inline styles and puts property - value pairs into styles map.\n// Styles map is cleared before insertion.\n//\n// @param {Map.<String, String>} stylesMap Map to insert parsed properties and values.\n// @param {String} stylesString Styles to parse.\nfunction parseInlineStyles( stylesMap, stylesString ) {\n\t// `null` if no quote was found in input string or last found quote was a closing quote. See below.\n\tlet quoteType = null;\n\tlet propertyNameStart = 0;\n\tlet propertyValueStart = 0;\n\tlet propertyName = null;\n\n\tstylesMap.clear();\n\n\t// Do not set anything if input string is empty.\n\tif ( stylesString === '' ) {\n\t\treturn;\n\t}\n\n\t// Fix inline styles that do not end with `;` so they are compatible with algorithm below.\n\tif ( stylesString.charAt( stylesString.length - 1 ) != ';' ) {\n\t\tstylesString = stylesString + ';';\n\t}\n\n\t// Seek the whole string for \"special characters\".\n\tfor ( let i = 0; i < stylesString.length; i++ ) {\n\t\tconst char = stylesString.charAt( i );\n\n\t\tif ( quoteType === null ) {\n\t\t\t// No quote found yet or last found quote was a closing quote.\n\t\t\tswitch ( char ) {\n\t\t\t\tcase ':':\n\t\t\t\t\t// Most of time colon means that property name just ended.\n\t\t\t\t\t// Sometimes however `:` is found inside property value (for example in background image url).\n\t\t\t\t\tif ( !propertyName ) {\n\t\t\t\t\t\t// Treat this as end of property only if property name is not already saved.\n\t\t\t\t\t\t// Save property name.\n\t\t\t\t\t\tpropertyName = stylesString.substr( propertyNameStart, i - propertyNameStart );\n\t\t\t\t\t\t// Save this point as the start of property value.\n\t\t\t\t\t\tpropertyValueStart = i + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\t// Opening quote found (this is an opening quote, because `quoteType` is `null`).\n\t\t\t\t\tquoteType = char;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ';': {\n\t\t\t\t\t// Property value just ended.\n\t\t\t\t\t// Use previously stored property value start to obtain property value.\n\t\t\t\t\tconst propertyValue = stylesString.substr( propertyValueStart, i - propertyValueStart );\n\n\t\t\t\t\tif ( propertyName ) {\n\t\t\t\t\t\t// Save parsed part.\n\t\t\t\t\t\tstylesMap.set( propertyName.trim(), propertyValue.trim() );\n\t\t\t\t\t}\n\n\t\t\t\t\tpropertyName = null;\n\n\t\t\t\t\t// Save this point as property name start. Property name starts immediately after previous property value ends.\n\t\t\t\t\tpropertyNameStart = i + 1;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( char === quoteType ) {\n\t\t\t// If a quote char is found and it is a closing quote, mark this fact by `null`-ing `quoteType`.\n\t\t\tquoteType = null;\n\t\t}\n\t}\n}\n\n// Parses class attribute and puts all classes into classes set.\n// Classes set s cleared before insertion.\n//\n// @param {Set.<String>} classesSet Set to insert parsed classes.\n// @param {String} classesString String with classes to parse.\nfunction parseClasses( classesSet, classesString ) {\n\tconst classArray = classesString.split( /\\s+/ );\n\tclassesSet.clear();\n\tclassArray.forEach( name => classesSet.add( name ) );\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/utils\n */\n\nimport { findOptimalInsertionPosition, isWidget, toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\n\n/**\n * Converts a given {@link module:engine/view/element~Element} to an image widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the image widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label. It will be concatenated with the image `alt` attribute if one is present.\n * @returns {module:engine/view/element~Element}\n */\nexport function toImageWidget( viewElement, writer, label ) {\n\twriter.setCustomProperty( 'image', true, viewElement );\n\n\treturn toWidget( viewElement, writer, { label: labelCreator } );\n\n\tfunction labelCreator() {\n\t\tconst imgElement = viewElement.getChild( 0 );\n\t\tconst altText = imgElement.getAttribute( 'alt' );\n\n\t\treturn altText ? `${ altText } ${ label }` : label;\n\t}\n}\n\n/**\n * Checks if a given view element is an image widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\nexport function isImageWidget( viewElement ) {\n\treturn !!viewElement.getCustomProperty( 'image' ) && isWidget( viewElement );\n}\n\n/**\n * Returns an image widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\nexport function getSelectedImageWidget( selection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\tif ( viewElement && isImageWidget( viewElement ) ) {\n\t\treturn viewElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Checks if the provided model element is an `image`.\n *\n * @param {module:engine/model/element~Element} modelElement\n * @returns {Boolean}\n */\nexport function isImage( modelElement ) {\n\treturn !!modelElement && modelElement.is( 'image' );\n}\n\n/**\n * Handles inserting single file. This method unifies image insertion using {@link module:widget/utils~findOptimalInsertionPosition} method.\n *\n *\t\tmodel.change( writer => {\n *\t\t\tinsertImage( writer, model, { src: 'path/to/image.jpg' } );\n *\t\t} );\n *\n * @param {module:engine/model/writer~Writer} writer\n * @param {module:engine/model/model~Model} model\n * @param {Object} [attributes={}] Attributes of inserted image\n */\nexport function insertImage( writer, model, attributes = {} ) {\n\tconst imageElement = writer.createElement( 'image', attributes );\n\n\tconst insertAtSelection = findOptimalInsertionPosition( model.document.selection, model );\n\n\tmodel.insertContent( imageElement, insertAtSelection );\n\n\t// Inserting an image might've failed due to schema regulations.\n\tif ( imageElement.parent ) {\n\t\twriter.setSelection( imageElement, 'on' );\n\t}\n}\n\n/**\n * Checks if image can be inserted at current model selection.\n *\n * @param {module:engine/model/model~Model} model\n * @returns {Boolean}\n */\nexport function isImageAllowed( model ) {\n\tconst schema = model.schema;\n\tconst selection = model.document.selection;\n\n\treturn isImageAllowedInParent( selection, schema, model ) &&\n\t\t!checkSelectionOnObject( selection, schema ) &&\n\t\tisInOtherImage( selection );\n}\n\n// Checks if image is allowed by schema in optimal insertion parent.\n//\n// @returns {Boolean}\nfunction isImageAllowedInParent( selection, schema, model ) {\n\tconst parent = getInsertImageParent( selection, model );\n\n\treturn schema.checkChild( parent, 'image' );\n}\n\n// Check if selection is on object.\n//\n// @returns {Boolean}\nfunction checkSelectionOnObject( selection, schema ) {\n\tconst selectedElement = selection.getSelectedElement();\n\n\treturn selectedElement && schema.isObject( selectedElement );\n}\n\n// Checks if selection is placed in other image (ie. in caption).\nfunction isInOtherImage( selection ) {\n\treturn [ ...selection.focus.getAncestors() ].every( ancestor => !ancestor.is( 'image' ) );\n}\n\n// Returns a node that will be used to insert image with `model.insertContent` to check if image can be placed there.\nfunction getInsertImageParent( selection, model ) {\n\tconst insertAt = findOptimalInsertionPosition( selection, model );\n\n\tconst parent = insertAt.parent;\n\n\tif ( parent.isEmpty && !parent.is( '$root' ) ) {\n\t\treturn parent.parent;\n\t}\n\n\treturn parent;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global setTimeout, clearTimeout */\n\n/**\n * @module utils/focustracker\n */\n\nimport DomEmitterMixin from './dom/emittermixin';\nimport ObservableMixin from './observablemixin';\nimport CKEditorError from './ckeditorerror';\nimport mix from './mix';\n\n/**\n * Allows observing a group of `HTMLElement`s whether at least one of them is focused.\n *\n * Used by the {@link module:core/editor/editor~Editor} in order to track whether the focus is still within the application,\n * or were used outside of its UI.\n *\n * **Note** `focus` and `blur` listeners use event capturing, so it is only needed to register wrapper `HTMLElement`\n * which contain other `focusable` elements. But note that this wrapper element has to be focusable too\n * (have e.g. `tabindex=\"-1\"`).\n *\n * @mixes module:utils/dom/emittermixin~EmitterMixin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class FocusTracker {\n\tconstructor() {\n\t\t/**\n\t\t * True when one of the registered elements is focused.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The currently focused element.\n\t\t *\n\t\t * While {@link #isFocused `isFocused`} remains `true`, the focus can\n\t\t * move between different UI elements. This property tracks those\n\t\t * elements and tells which one is currently focused.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {HTMLElement|null}\n\t\t */\n\t\tthis.set( 'focusedElement', null );\n\n\t\t/**\n\t\t * List of registered elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<HTMLElement>}\n\t\t */\n\t\tthis._elements = new Set();\n\n\t\t/**\n\t\t * Event loop timeout.\n\t\t *\n\t\t * @private\n\t\t * @member {Number}\n\t\t */\n\t\tthis._nextEventLoopTimeout = null;\n\t}\n\n\t/**\n\t * Starts tracking the specified element.\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tadd( element ) {\n\t\tif ( this._elements.has( element ) ) {\n\t\t\tthrow new CKEditorError( 'focusTracker-add-element-already-exist', this );\n\t\t}\n\n\t\tthis.listenTo( element, 'focus', () => this._focus( element ), { useCapture: true } );\n\t\tthis.listenTo( element, 'blur', () => this._blur(), { useCapture: true } );\n\t\tthis._elements.add( element );\n\t}\n\n\t/**\n\t * Stops tracking the specified element and stops listening on this element.\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tremove( element ) {\n\t\tif ( element === this.focusedElement ) {\n\t\t\tthis._blur( element );\n\t\t}\n\n\t\tif ( this._elements.has( element ) ) {\n\t\t\tthis.stopListening( element );\n\t\t\tthis._elements.delete( element );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the focus tracker by:\n\t * - Disabling all event listeners attached to tracked elements.\n\t * - Removing all tracked elements that were previously added.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Stores currently focused element and set {#isFocused} as `true`.\n\t *\n\t * @private\n\t * @param {HTMLElement} element Element which has been focused.\n\t */\n\t_focus( element ) {\n\t\tclearTimeout( this._nextEventLoopTimeout );\n\n\t\tthis.focusedElement = element;\n\t\tthis.isFocused = true;\n\t}\n\n\t/**\n\t * Clears currently focused element and set {@link #isFocused} as `false`.\n\t * This method uses `setTimeout` to change order of fires `blur` and `focus` events.\n\t *\n\t * @private\n\t * @fires blur\n\t */\n\t_blur() {\n\t\tclearTimeout( this._nextEventLoopTimeout );\n\n\t\tthis._nextEventLoopTimeout = setTimeout( () => {\n\t\t\tthis.focusedElement = null;\n\t\t\tthis.isFocused = false;\n\t\t}, 0 );\n\t}\n\n\t/**\n\t * @event focus\n\t */\n\n\t/**\n\t * @event blur\n\t */\n}\n\nmix( FocusTracker, DomEmitterMixin );\nmix( FocusTracker, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/liveposition\n */\n\nimport Position from './position';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n *\n * @extends module:engine/model/position~Position\n */\nexport default class LivePosition extends Position {\n\t/**\n\t * Creates a live position.\n\t *\n\t * @see module:engine/model/position~Position\n\t * @param {module:engine/model/rootelement~RootElement} root\n\t * @param {Array.<Number>} path\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness]\n\t */\n\tconstructor( root, path, stickiness = 'toNone' ) {\n\t\tsuper( root, path, stickiness );\n\n\t\tif ( !this.root.is( 'rootElement' ) ) {\n\t\t\t/**\n\t\t\t * LivePosition's root has to be an instance of RootElement.\n\t\t\t *\n\t\t\t * @error liveposition-root-not-rootelement\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-liveposition-root-not-rootelement: LivePosition\\'s root has to be an instance of RootElement.',\n\t\t\t\troot\n\t\t\t);\n\t\t}\n\n\t\tbindWithDocument.call( this );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n\t * referring to it).\n\t */\n\tdetach() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tlivePosition.is( 'position' ); // -> true\n\t *\t\tlivePosition.is( 'model:position' ); // -> true\n\t *\t\tlivePosition.is( 'liveposition' ); // -> true\n\t *\t\tlivePosition.is( 'model:livePosition' ); // -> true\n\t *\n\t *\t\tlivePosition.is( 'view:position' ); // -> false\n\t *\t\tlivePosition.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'livePosition' || type == 'model:livePosition' || super.is( type );\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\ttoPosition() {\n\t\treturn new Position( this.root, this.path.slice(), this.stickiness );\n\t}\n\n\t/**\n\t * Creates a `LivePosition` instance that is equal to position.\n\t *\n\t * @param {module:engine/model/position~Position} position\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness]\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic fromPosition( position, stickiness ) {\n\t\treturn new this( position.root, position.path.slice(), stickiness ? stickiness : position.stickiness );\n\t}\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createAfter\n\t * @see module:engine/model/position~Position._createAfter\n\t * @param {module:engine/model/node~Node} node\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createBefore\n\t * @see module:engine/model/position~Position._createBefore\n\t * @param {module:engine/model/node~Node} node\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createAt\n\t * @see module:engine/model/position~Position._createAt\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset]\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * Fired when `LivePosition` instance is changed due to changes on {@link module:engine/model/document~Document}.\n\t *\n\t * @event module:engine/model/liveposition~LivePosition#change\n\t * @param {module:engine/model/position~Position} oldPosition Position equal to this live position before it got changed.\n\t */\n}\n\n// Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n// this position's {@link module:engine/model/position~Position#root root}.\n//\n// @private\nfunction bindWithDocument() {\n\tthis.listenTo(\n\t\tthis.root.document.model,\n\t\t'applyOperation',\n\t\t( event, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransform.call( this, operation );\n\t\t},\n\t\t{ priority: 'low' }\n\t);\n}\n\n// Updates this position accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform( operation ) {\n\tconst result = this.getTransformedByOperation( operation );\n\n\tif ( !this.isEqual( result ) ) {\n\t\tconst oldPosition = this.toPosition();\n\n\t\tthis.path = result.path;\n\t\tthis.root = result.root;\n\n\t\tthis.fire( 'change', oldPosition );\n\t}\n}\n\nmix( LivePosition, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/isiterable\n */\n\n/**\n * Checks if value implements iterator interface.\n *\n * @param {*} value The value to check.\n * @returns {Boolean} True if value implements iterator interface.\n */\nexport default function isIterable( value ) {\n\treturn !!( value && value[ Symbol.iterator ] );\n}\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/attributeoperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { _setAttribute } from './utils';\nimport { isEqual } from 'lodash-es';\n\n/**\n * Operation to change nodes' attribute.\n *\n * Using this class you can add, remove or change value of the attribute.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class AttributeOperation extends Operation {\n\t/**\n\t * Creates an operation that changes, removes or adds attributes.\n\t *\n\t * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\n\t * have an attribute with the same key as the added attribute.\n\t *\n\t * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\n\t * must have an attribute with that key added.\n\t *\n\t * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\n\t * operation's ranges must already have an attribute with given key and `oldValue` as value\n\t *\n\t * @param {module:engine/model/range~Range} range Range on which the operation should be applied. Must be a flat range.\n\t * @param {String} key Key of an attribute to change or remove.\n\t * @param {*} oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n\t * @param {*} newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( range, key, oldValue, newValue, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Range on which operation should be applied.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.range = range.clone();\n\n\t\t/**\n\t\t * Key of an attribute to change or remove.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/**\n\t\t * Old value of the attribute with given key or `null`, if attribute was not set before.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.oldValue = oldValue === undefined ? null : oldValue;\n\n\t\t/**\n\t\t * New value of the attribute with given key or `null`, if operation should remove attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.newValue = newValue === undefined ? null : newValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.oldValue === null ) {\n\t\t\treturn 'addAttribute';\n\t\t} else if ( this.newValue === null ) {\n\t\t\treturn 'removeAttribute';\n\t\t} else {\n\t\t\treturn 'changeAttribute';\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new AttributeOperation( this.range, this.key, this.oldValue, this.newValue, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tgetReversed() {\n\t\treturn new AttributeOperation( this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.range = this.range.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( !this.range.isFlat ) {\n\t\t\t/**\n\t\t\t * The range to change is not flat.\n\t\t\t *\n\t\t\t * @error attribute-operation-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'attribute-operation-range-not-flat: The range to change is not flat.', this );\n\t\t}\n\n\t\tfor ( const item of this.range.getItems( { shallow: true } ) ) {\n\t\t\tif ( this.oldValue !== null && !isEqual( item.getAttribute( this.key ), this.oldValue ) ) {\n\t\t\t\t/**\n\t\t\t\t * Changed node has different attribute value than operation's old attribute value.\n\t\t\t\t *\n\t\t\t\t * @error attribute-operation-wrong-old-value\n\t\t\t\t * @param {module:engine/model/item~Item} item\n\t\t\t\t * @param {String} key\n\t\t\t\t * @param {*} value\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'attribute-operation-wrong-old-value: Changed node has different attribute value than operation\\'s ' +\n\t\t\t\t\t'old attribute value.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ item, key: this.key, value: this.oldValue }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( this.oldValue === null && this.newValue !== null && item.hasAttribute( this.key ) ) {\n\t\t\t\t/**\n\t\t\t\t * The attribute with given key already exists for the given node.\n\t\t\t\t *\n\t\t\t\t * @error attribute-operation-attribute-exists\n\t\t\t\t * @param {module:engine/model/node~Node} node\n\t\t\t\t * @param {String} key\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'attribute-operation-attribute-exists: The attribute with given key already exists.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ node: item, key: this.key }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// If value to set is same as old value, don't do anything.\n\t\tif ( !isEqual( this.oldValue, this.newValue ) ) {\n\t\t\t// Execution.\n\t\t\t_setAttribute( this.range, this.key, this.newValue );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'AttributeOperation';\n\t}\n\n\t/**\n\t * Creates `AttributeOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new AttributeOperation( Range.fromJSON( json.range, document ), json.key, json.oldValue, json.newValue, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/uid\n */\n\n/**\n * Returns a unique id. This id consist of an 'e' character and a randomly generated string of 32 aphanumeric characters.\n * Each character in uid string represents a hexadecimal digit (base 16).\n *\n * @returns {String} A hexadecimal number representing the id.\n */\nexport default function uid() {\n\tlet uuid = 'e'; // Make sure that id does not start with number.\n\n\tfor ( let i = 0; i < 8; i++ ) {\n\t\tuuid += Math.floor( ( 1 + Math.random() ) * 0x10000 ).toString( 16 ).substring( 1 );\n\t}\n\n\treturn uuid;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/utils\n */\n\nimport { getFillerOffset } from '@ckeditor/ckeditor5-engine/src/view/containerelement';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\n\n/**\n * Creates a list item {@link module:engine/view/containerelement~ContainerElement}.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer The writer instance.\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\nexport function createViewListItemElement( writer ) {\n\tconst viewItem = writer.createContainerElement( 'li' );\n\n\tviewItem.getFillerOffset = getListItemFillerOffset;\n\n\treturn viewItem;\n}\n\n/**\n * Helper function that creates a `<ul><li></li></ul>` or (`<ol>`) structure out of the given `modelItem` model `listItem` element.\n * Then, it binds the created view list item (<li>) with the model `listItem` element.\n * The function then returns the created view list item (<li>).\n *\n * @param {module:engine/model/item~Item} modelItem Model list item.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface.\n * @returns {module:engine/view/containerelement~ContainerElement} View list element.\n */\nexport function generateLiInUl( modelItem, conversionApi ) {\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\tconst listType = modelItem.getAttribute( 'listType' ) == 'numbered' ? 'ol' : 'ul';\n\tconst viewItem = createViewListItemElement( viewWriter );\n\n\tconst viewList = viewWriter.createContainerElement( listType, null );\n\n\tviewWriter.insert( viewWriter.createPositionAt( viewList, 0 ), viewItem );\n\n\tmapper.bindElements( modelItem, viewItem );\n\n\treturn viewItem;\n}\n\n/**\n * Helper function that inserts a view list at a correct place and merges it with its siblings.\n * It takes a model list item element (`modelItem`) and a corresponding view list item element (`injectedItem`). The view list item\n * should be in a view list element (`<ul>` or `<ol>`) and should be its only child.\n * See comments below to better understand the algorithm.\n *\n * @param {module:engine/view/item~Item} modelItem Model list item.\n * @param {module:engine/view/containerelement~ContainerElement} injectedItem\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface.\n * @param {module:engine/model/model~Model} model The model instance.\n */\nexport function injectViewList( modelItem, injectedItem, conversionApi, model ) {\n\tconst injectedList = injectedItem.parent;\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// The position where the view list will be inserted.\n\tlet insertPosition = mapper.toViewPosition( model.createPositionBefore( modelItem ) );\n\n\t// 1. Find the previous list item that has the same or smaller indent. Basically we are looking for the first model item\n\t// that is a \"parent\" or \"sibling\" of the injected model item.\n\t// If there is no such list item, it means that the injected list item is the first item in \"its list\".\n\tconst refItem = getSiblingListItem( modelItem.previousSibling, {\n\t\tsameIndent: true,\n\t\tsmallerIndent: true,\n\t\tlistIndent: modelItem.getAttribute( 'listIndent' )\n\t} );\n\tconst prevItem = modelItem.previousSibling;\n\n\tif ( refItem && refItem.getAttribute( 'listIndent' ) == modelItem.getAttribute( 'listIndent' ) ) {\n\t\t// There is a list item with the same indent - we found the same-level sibling.\n\t\t// Break the list after it. The inserted view item will be added in the broken space.\n\t\tconst viewItem = mapper.toViewElement( refItem );\n\t\tinsertPosition = viewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\t} else {\n\t\t// There is no list item with the same indent. Check the previous model item.\n\t\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\t\t// If it is a list item, it has to have a lower indent.\n\t\t\t// It means that the inserted item should be added to it as its nested item.\n\t\t\tinsertPosition = mapper.toViewPosition( model.createPositionAt( prevItem, 'end' ) );\n\t\t} else {\n\t\t\t// The previous item is not a list item (or does not exist at all).\n\t\t\t// Just map the position and insert the view item at the mapped position.\n\t\t\tinsertPosition = mapper.toViewPosition( model.createPositionBefore( modelItem ) );\n\t\t}\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Insert the view item.\n\tviewWriter.insert( insertPosition, injectedList );\n\n\t// 2. Handle possible children of the injected model item.\n\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\tconst prevView = mapper.toViewElement( prevItem );\n\n\t\tconst walkerBoundaries = viewWriter.createRange( viewWriter.createPositionAt( prevView, 0 ), insertPosition );\n\t\tconst walker = walkerBoundaries.getWalker( { ignoreElementEnd: true } );\n\n\t\tfor ( const value of walker ) {\n\t\t\tif ( value.item.is( 'li' ) ) {\n\t\t\t\tconst breakPosition = viewWriter.breakContainer( viewWriter.createPositionBefore( value.item ) );\n\t\t\t\tconst viewList = value.item.parent;\n\n\t\t\t\tconst targetPosition = viewWriter.createPositionAt( injectedItem, 'end' );\n\t\t\t\tmergeViewLists( viewWriter, targetPosition.nodeBefore, targetPosition.nodeAfter );\n\t\t\t\tviewWriter.move( viewWriter.createRangeOn( viewList ), targetPosition );\n\n\t\t\t\twalker.position = breakPosition;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconst nextViewList = injectedList.nextSibling;\n\n\t\tif ( nextViewList && ( nextViewList.is( 'ul' ) || nextViewList.is( 'ol' ) ) ) {\n\t\t\tlet lastSubChild = null;\n\n\t\t\tfor ( const child of nextViewList.getChildren() ) {\n\t\t\t\tconst modelChild = mapper.toModelElement( child );\n\n\t\t\t\tif ( modelChild && modelChild.getAttribute( 'listIndent' ) > modelItem.getAttribute( 'listIndent' ) ) {\n\t\t\t\t\tlastSubChild = child;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( lastSubChild ) {\n\t\t\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( lastSubChild ) );\n\t\t\t\tviewWriter.move( viewWriter.createRangeOn( lastSubChild.parent ), viewWriter.createPositionAt( injectedItem, 'end' ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Merge the inserted view list with its possible neighbor lists.\n\tmergeViewLists( viewWriter, injectedList, injectedList.nextSibling );\n\tmergeViewLists( viewWriter, injectedList.previousSibling, injectedList );\n}\n\n/**\n * Helper function that takes two parameters that are expected to be view list elements, and merges them.\n * The merge happens only if both parameters are list elements of the same type (the same element name and the same class attributes).\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter The writer instance.\n * @param {module:engine/view/item~Item} firstList The first element to compare.\n * @param {module:engine/view/item~Item} secondList The second element to compare.\n * @returns {module:engine/view/position~Position|null} The position after merge or `null` when there was no merge.\n */\nexport function mergeViewLists( viewWriter, firstList, secondList ) {\n\t// Check if two lists are going to be merged.\n\tif ( !firstList || !secondList || ( firstList.name != 'ul' && firstList.name != 'ol' ) ) {\n\t\treturn null;\n\t}\n\n\t// Both parameters are list elements, so compare types now.\n\tif ( firstList.name != secondList.name || firstList.getAttribute( 'class' ) !== secondList.getAttribute( 'class' ) ) {\n\t\treturn null;\n\t}\n\n\treturn viewWriter.mergeContainers( viewWriter.createPositionAfter( firstList ) );\n}\n\n/**\n * Helper function that for a given `view.Position`, returns a `view.Position` that is after all `view.UIElement`s that\n * are after the given position.\n *\n * For example:\n * `<container:p>foo^<ui:span></ui:span><ui:span></ui:span>bar</container:p>`\n * For position ^, the position before \"bar\" will be returned.\n *\n * @param {module:engine/view/position~Position} viewPosition\n * @returns {module:engine/view/position~Position}\n */\nexport function positionAfterUiElements( viewPosition ) {\n\treturn viewPosition.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n}\n\n/**\n * Helper function that searches for a previous list item sibling of a given model item that meets the given criteria\n * passed by the options object.\n *\n * @param {module:engine/model/item~Item} modelItem\n * @param {Object} options Search criteria.\n * @param {Boolean} [options.sameIndent=false] Whether the sought sibling should have the same indentation.\n * @param {Boolean} [options.smallerIndent=false] Whether the sought sibling should have a smaller indentation.\n * @param {Number} [options.listIndent] The reference indentation.\n * @returns {module:engine/model/item~Item|null}\n */\nexport function getSiblingListItem( modelItem, options ) {\n\tconst sameIndent = !!options.sameIndent;\n\tconst smallerIndent = !!options.smallerIndent;\n\tconst indent = options.listIndent;\n\n\tlet item = modelItem;\n\n\twhile ( item && item.name == 'listItem' ) {\n\t\tconst itemIndent = item.getAttribute( 'listIndent' );\n\n\t\tif ( ( sameIndent && indent == itemIndent ) || ( smallerIndent && indent > itemIndent ) ) {\n\t\t\treturn item;\n\t\t}\n\n\t\titem = item.previousSibling;\n\t}\n\n\treturn null;\n}\n\n/**\n * Helper method for creating a UI button and linking it with an appropriate command.\n *\n * @private\n * @param {module:core/editor/editor~Editor} editor The editor instance to which the UI component will be added.\n * @param {String} commandName The name of the command.\n * @param {Object} label The button label.\n * @param {String} icon The source of the icon.\n */\nexport function createUIComponent( editor, commandName, label, icon ) {\n\teditor.ui.componentFactory.add( commandName, locale => {\n\t\tconst command = editor.commands.get( commandName );\n\t\tconst buttonView = new ButtonView( locale );\n\n\t\tbuttonView.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true,\n\t\t\tisToggleable: true\n\t\t} );\n\n\t\t// Bind button model to command.\n\t\tbuttonView.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\n\n\t\t// Execute command.\n\t\tbuttonView.on( 'execute', () => editor.execute( commandName ) );\n\n\t\treturn buttonView;\n\t} );\n}\n\n// Implementation of getFillerOffset for view list item element.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getListItemFillerOffset() {\n\tconst hasOnlyLists = !this.isEmpty && ( this.getChild( 0 ).name == 'ul' || this.getChild( 0 ).name == 'ol' );\n\n\tif ( this.isEmpty || hasOnlyLists ) {\n\t\treturn 0;\n\t}\n\n\treturn getFillerOffset.call( this );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/textproxy\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * `TextProxy` represents a part of {@link module:engine/model/text~Text text node}.\n *\n * Since {@link module:engine/model/position~Position positions} can be placed between characters of a text node,\n * {@link module:engine/model/range~Range ranges} may contain only parts of text nodes. When {@link module:engine/model/range~Range#getItems\n * getting items}\n * contained in such range, we need to represent a part of that text node, since returning the whole text node would be incorrect.\n * `TextProxy` solves this issue.\n *\n * `TextProxy` has an API similar to {@link module:engine/model/text~Text Text} and allows to do most of the common tasks performed\n * on model nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/model/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is not an instance of {@link module:engine/model/node~Node node}. Keep this in mind when using it as a\n * parameter of methods.\n *\n * **Note:** `TextProxy` is a readonly interface. If you want to perform changes on model data represented by a `TextProxy`\n * use {@link module:engine/model/writer~Writer model writer API}.\n *\n * **Note:** `TextProxy` instances are created on the fly, basing on the current state of model. Because of this, it is\n * highly unrecommended to store references to `TextProxy` instances. `TextProxy` instances are not refreshed when\n * model changes, so they might get invalidated. Instead, consider creating {@link module:engine/model/liveposition~LivePosition live\n * position}.\n *\n * `TextProxy` instances are created by {@link module:engine/model/treewalker~TreeWalker model tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy {\n\t/**\n\t * Creates a text proxy.\n\t *\n\t * @protected\n\t * @param {module:engine/model/text~Text} textNode Text node which part is represented by this text proxy.\n\t * @param {Number} offsetInText Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy\n\t * starts.\n\t * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n\t * @constructor\n\t */\n\tconstructor( textNode, offsetInText, length ) {\n\t\t/**\n\t\t * Text node which part is represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/text~Text}\n\t\t */\n\t\tthis.textNode = textNode;\n\n\t\tif ( offsetInText < 0 || offsetInText > textNode.offsetSize ) {\n\t\t\t/**\n\t\t\t * Given `offsetInText` value is incorrect.\n\t\t\t *\n\t\t\t * @error model-textproxy-wrong-offsetintext\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.', this );\n\t\t}\n\n\t\tif ( length < 0 || offsetInText + length > textNode.offsetSize ) {\n\t\t\t/**\n\t\t\t * Given `length` value is incorrect.\n\t\t\t *\n\t\t\t * @error model-textproxy-wrong-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-textproxy-wrong-length: Given length value is incorrect.', this );\n\t\t}\n\n\t\t/**\n\t\t * Text data represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.data = textNode.data.substring( offsetInText, offsetInText + length );\n\n\t\t/**\n\t\t * Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy starts.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.offsetInText = offsetInText;\n\t}\n\n\t/**\n\t * Offset at which this text proxy starts in it's parent.\n\t *\n\t * @see module:engine/model/node~Node#startOffset\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget startOffset() {\n\t\treturn this.textNode.startOffset !== null ? this.textNode.startOffset + this.offsetInText : null;\n\t}\n\n\t/**\n\t * Offset size of this text proxy. Equal to the number of characters represented by the text proxy.\n\t *\n\t * @see module:engine/model/node~Node#offsetSize\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Offset at which this text proxy ends in it's parent.\n\t *\n\t * @see module:engine/model/node~Node#endOffset\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget endOffset() {\n\t\treturn this.startOffset !== null ? this.startOffset + this.offsetSize : null;\n\t}\n\n\t/**\n\t * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/model/text~Text text node}\n\t * (`true`) or the whole text node (`false`).\n\t *\n\t * This is `false` when text proxy starts at the very beginning of {@link module:engine/model/textproxy~TextProxy#textNode textNode}\n\t * ({@link module:engine/model/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n\t * text node size.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isPartial() {\n\t\treturn this.offsetSize !== this.textNode.offsetSize;\n\t}\n\n\t/**\n\t * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tget parent() {\n\t\treturn this.textNode.parent;\n\t}\n\n\t/**\n\t * Root of this text proxy, which is same as root of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.textNode.root;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns text node represented by this text proxy or `null` if the text node\n\t * has no parent or is inside a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this.textNode.document;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\ttextProxy.is( 'textProxy' ); // -> true\n\t *\t\ttextProxy.is( 'model:textProxy' ); // -> true\n\t *\n\t *\t\ttextProxy.is( 'view:textProxy' ); // -> false\n\t *\t\ttextProxy.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'textProxy' || type == 'model:textProxy';\n\t}\n\n\t/**\n\t * Gets path to this text proxy.\n\t *\n\t * @see module:engine/model/node~Node#getPath\n\t * @returns {Array.<Number>}\n\t */\n\tgetPath() {\n\t\tconst path = this.textNode.getPath();\n\n\t\tif ( path.length > 0 ) {\n\t\t\tpath[ path.length - 1 ] += this.offsetInText;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this text proxy.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this text proxy will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Checks if this text proxy has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on text proxy, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this.textNode.hasAttribute( key );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on text proxy.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this.textNode.getAttribute( key );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attributes. Attributes are returned as arrays containing two\n\t * items. First one is attribute key and second is attribute value.\n\t *\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this.textNode.getAttributes();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this.textNode.getAttributeKeys();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/utils\n */\n\nimport Node from '../node';\nimport Text from '../text';\nimport TextProxy from '../textproxy';\nimport Range from '../range';\nimport DocumentFragment from '../documentfragment';\nimport NodeList from '../nodelist';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Contains functions used for composing model tree by {@link module:engine/model/operation/operation~Operation operations}.\n * Those functions are built on top of {@link module:engine/model/node~Node node}, and it's child classes', APIs.\n *\n * @protected\n * @namespace utils\n */\n\n/**\n * Inserts given nodes at given position.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.insert\n * @param {module:engine/model/position~Position} position Position at which nodes should be inserted.\n * @param {module:engine/model/node~NodeSet} nodes Nodes to insert.\n * @returns {module:engine/model/range~Range} Range spanning over inserted elements.\n */\nexport function _insert( position, nodes ) {\n\tnodes = _normalizeNodes( nodes );\n\n\t// We have to count offset before inserting nodes because they can get merged and we would get wrong offsets.\n\tconst offset = nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\tconst parent = position.parent;\n\n\t// Insertion might be in a text node, we should split it if that's the case.\n\t_splitNodeAtPosition( position );\n\tconst index = position.index;\n\n\t// Insert nodes at given index. After splitting we have a proper index and insertion is between nodes,\n\t// using basic `Element` API.\n\tparent._insertChild( index, nodes );\n\n\t// Merge text nodes, if possible. Merging is needed only at points where inserted nodes \"touch\" \"old\" nodes.\n\t_mergeNodesAtIndex( parent, index + nodes.length );\n\t_mergeNodesAtIndex( parent, index );\n\n\treturn new Range( position, position.getShiftedBy( offset ) );\n}\n\n/**\n * Removed nodes in given range. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils._remove\n * @param {module:engine/model/range~Range} range Range containing nodes to remove.\n * @returns {Array.<module:engine/model/node~Node>}\n */\nexport function _remove( range ) {\n\tif ( !range.isFlat ) {\n\t\t/**\n\t\t * Trying to remove a range which starts and ends in different element.\n\t\t *\n\t\t * @error operation-utils-remove-range-not-flat\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'operation-utils-remove-range-not-flat: ' +\n\t\t\t'Trying to remove a range which starts and ends in different element.',\n\t\t\tthis\n\t\t);\n\t}\n\n\tconst parent = range.start.parent;\n\n\t// Range may be inside text nodes, we have to split them if that's the case.\n\t_splitNodeAtPosition( range.start );\n\t_splitNodeAtPosition( range.end );\n\n\t// Remove the text nodes using basic `Element` API.\n\tconst removed = parent._removeChildren( range.start.index, range.end.index - range.start.index );\n\n\t// Merge text nodes, if possible. After some nodes were removed, node before and after removed range will be\n\t// touching at the position equal to the removed range beginning. We check merging possibility there.\n\t_mergeNodesAtIndex( parent, range.start.index );\n\n\treturn removed;\n}\n\n/**\n * Moves nodes in given range to given target position. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.move\n * @param {module:engine/model/range~Range} sourceRange Range containing nodes to move.\n * @param {module:engine/model/position~Position} targetPosition Position to which nodes should be moved.\n * @returns {module:engine/model/range~Range} Range containing moved nodes.\n */\nexport function _move( sourceRange, targetPosition ) {\n\tif ( !sourceRange.isFlat ) {\n\t\t/**\n\t\t * Trying to move a range which starts and ends in different element.\n\t\t *\n\t\t * @error operation-utils-move-range-not-flat\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'operation-utils-move-range-not-flat: ' +\n\t\t\t'Trying to move a range which starts and ends in different element.',\n\t\t\tthis\n\t\t);\n\t}\n\n\tconst nodes = _remove( sourceRange );\n\n\t// We have to fix `targetPosition` because model changed after nodes from `sourceRange` got removed and\n\t// that change might have an impact on `targetPosition`.\n\ttargetPosition = targetPosition._getTransformedByDeletion( sourceRange.start, sourceRange.end.offset - sourceRange.start.offset );\n\n\treturn _insert( targetPosition, nodes );\n}\n\n/**\n * Sets given attribute on nodes in given range. The attributes are only set on top-level nodes of the range, not on its children.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils._setAttribute\n * @param {module:engine/model/range~Range} range Range containing nodes that should have the attribute set. Must be a flat range.\n * @param {String} key Key of attribute to set.\n * @param {*} value Attribute value.\n */\nexport function _setAttribute( range, key, value ) {\n\t// Range might start or end in text nodes, so we have to split them.\n\t_splitNodeAtPosition( range.start );\n\t_splitNodeAtPosition( range.end );\n\n\t// Iterate over all items in the range.\n\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t// Iterator will return `TextProxy` instances but we know that those text proxies will\n\t\t// always represent full text nodes (this is guaranteed thanks to splitting we did before).\n\t\t// So, we can operate on those text proxies' text nodes.\n\t\tconst node = item.is( 'textProxy' ) ? item.textNode : item;\n\n\t\tif ( value !== null ) {\n\t\t\tnode._setAttribute( key, value );\n\t\t} else {\n\t\t\tnode._removeAttribute( key );\n\t\t}\n\n\t\t// After attributes changing it may happen that some text nodes can be merged. Try to merge with previous node.\n\t\t_mergeNodesAtIndex( node.parent, node.index );\n\t}\n\n\t// Try to merge last changed node with it's previous sibling (not covered by the loop above).\n\t_mergeNodesAtIndex( range.end.parent, range.end.index );\n}\n\n/**\n * Normalizes given object or an array of objects to an array of {@link module:engine/model/node~Node nodes}. See\n * {@link module:engine/model/node~NodeSet NodeSet} for details on how normalization is performed.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.normalizeNodes\n * @param {module:engine/model/node~NodeSet} nodes Objects to normalize.\n * @returns {Array.<module:engine/model/node~Node>} Normalized nodes.\n */\nexport function _normalizeNodes( nodes ) {\n\tconst normalized = [];\n\n\tif ( !( nodes instanceof Array ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Convert instances of classes other than Node.\n\tfor ( let i = 0; i < nodes.length; i++ ) {\n\t\tif ( typeof nodes[ i ] == 'string' ) {\n\t\t\tnormalized.push( new Text( nodes[ i ] ) );\n\t\t} else if ( nodes[ i ] instanceof TextProxy ) {\n\t\t\tnormalized.push( new Text( nodes[ i ].data, nodes[ i ].getAttributes() ) );\n\t\t} else if ( nodes[ i ] instanceof DocumentFragment || nodes[ i ] instanceof NodeList ) {\n\t\t\tfor ( const child of nodes[ i ] ) {\n\t\t\t\tnormalized.push( child );\n\t\t\t}\n\t\t} else if ( nodes[ i ] instanceof Node ) {\n\t\t\tnormalized.push( nodes[ i ] );\n\t\t}\n\t\t// Skip unrecognized type.\n\t}\n\n\t// Merge text nodes.\n\tfor ( let i = 1; i < normalized.length; i++ ) {\n\t\tconst node = normalized[ i ];\n\t\tconst prev = normalized[ i - 1 ];\n\n\t\tif ( node instanceof Text && prev instanceof Text && _haveSameAttributes( node, prev ) ) {\n\t\t\t// Doing this instead changing `prev.data` because `data` is readonly.\n\t\t\tnormalized.splice( i - 1, 2, new Text( prev.data + node.data, prev.getAttributes() ) );\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn normalized;\n}\n\n// Checks if nodes before and after given index in given element are {@link module:engine/model/text~Text text nodes} and\n// merges them into one node if they have same attributes.\n//\n// Merging is done by removing two text nodes and inserting a new text node containing data from both merged text nodes.\n//\n// @private\n// @param {module:engine/model/element~Element} element Parent element of nodes to merge.\n// @param {Number} index Index between nodes to merge.\nfunction _mergeNodesAtIndex( element, index ) {\n\tconst nodeBefore = element.getChild( index - 1 );\n\tconst nodeAfter = element.getChild( index );\n\n\t// Check if both of those nodes are text objects with same attributes.\n\tif ( nodeBefore && nodeAfter && nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) && _haveSameAttributes( nodeBefore, nodeAfter ) ) {\n\t\t// Append text of text node after index to the before one.\n\t\tconst mergedNode = new Text( nodeBefore.data + nodeAfter.data, nodeBefore.getAttributes() );\n\n\t\t// Remove separate text nodes.\n\t\telement._removeChildren( index - 1, 2 );\n\n\t\t// Insert merged text node.\n\t\telement._insertChild( index - 1, mergedNode );\n\t}\n}\n\n// Checks if given position is in a text node, and if so, splits the text node in two text nodes, each of them\n// containing a part of original text node.\n//\n// @private\n// @param {module:engine/model/position~Position} position Position at which node should be split.\nfunction _splitNodeAtPosition( position ) {\n\tconst textNode = position.textNode;\n\tconst element = position.parent;\n\n\tif ( textNode ) {\n\t\tconst offsetDiff = position.offset - textNode.startOffset;\n\t\tconst index = textNode.index;\n\n\t\telement._removeChildren( index, 1 );\n\n\t\tconst firstPart = new Text( textNode.data.substr( 0, offsetDiff ), textNode.getAttributes() );\n\t\tconst secondPart = new Text( textNode.data.substr( offsetDiff ), textNode.getAttributes() );\n\n\t\telement._insertChild( index, [ firstPart, secondPart ] );\n\t}\n}\n\n// Checks whether two given nodes have same attributes.\n//\n// @private\n// @param {module:engine/model/node~Node} nodeA Node to check.\n// @param {module:engine/model/node~Node} nodeB Node to check.\n// @returns {Boolean} `true` if nodes have same attributes, `false` otherwise.\nfunction _haveSameAttributes( nodeA, nodeB ) {\n\tconst iteratorA = nodeA.getAttributes();\n\tconst iteratorB = nodeB.getAttributes();\n\n\tfor ( const attr of iteratorA ) {\n\t\tif ( attr[ 1 ] !== nodeB.getAttribute( attr[ 0 ] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\titeratorB.next();\n\t}\n\n\treturn iteratorB.next().done;\n}\n\n/**\n * Value that can be normalized to an array of {@link module:engine/model/node~Node nodes}.\n *\n * Non-arrays are normalized as follows:\n * * {@link module:engine/model/node~Node Node} is left as is,\n * * {@link module:engine/model/textproxy~TextProxy TextProxy} and `String` are normalized to {@link module:engine/model/text~Text Text},\n * * {@link module:engine/model/nodelist~NodeList NodeList} is normalized to an array containing all nodes that are in that node list,\n * * {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment} is normalized to an array containing all of it's\n * * children.\n *\n * Arrays are processed item by item like non-array values and flattened to one array. Normalization always results in\n * a flat array of {@link module:engine/model/node~Node nodes}. Consecutive text nodes (or items normalized to text nodes) will be\n * merged if they have same attributes.\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/textproxy~TextProxy|String|\n * module:engine/model/nodelist~NodeList|module:engine/model/documentfragment~DocumentFragment|Iterable}\n * module:engine/model/node~NodeSet\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/keystrokehandler\n */\n\nimport DomEmitterMixin from './dom/emittermixin';\nimport { getCode, parseKeystroke } from './keyboard';\n\n/**\n * Keystroke handler allows registering callbacks for given keystrokes.\n *\n * The most frequent use of this class is through the {@link module:core/editor/editor~Editor#keystrokes `editor.keystrokes`}\n * property. It allows listening to keystrokes executed in the editing view:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+A', ( keyEvtData, cancel ) => {\n *\t\t\tconsole.log( 'Ctrl+A has been pressed' );\n *\t\t\tcancel();\n *\t\t} );\n *\n * However, this utility class can be used in various part of the UI. For instance, a certain {@link module:ui/view~View}\n * can use it like this:\n *\n *\t\tclass MyView extends View {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.keystrokes = new KeystrokeHandler();\n *\n * \t\t\t\tthis.keystrokes.set( 'tab', handleTabKey );\n *\t\t\t}\n *\n *\t\t\trender() {\n *\t\t\t\tsuper.render();\n *\n *\t\t\t\tthis.keystrokes.listenTo( this.element );\n *\t\t\t}\n *\t\t}\n *\n * That keystroke handler will listen to `keydown` events fired in this view's main element.\n *\n */\nexport default class KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Listener used to listen to events for easier keystroke handler destruction.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/dom/emittermixin~Emitter}\n\t\t */\n\t\tthis._listener = Object.create( DomEmitterMixin );\n\t}\n\n\t/**\n\t * Starts listening for `keydown` events from a given emitter.\n\t *\n\t * @param {module:utils/emittermixin~Emitter} emitter\n\t */\n\tlistenTo( emitter ) {\n\t\t// The #_listener works here as a kind of dispatcher. It groups the events coming from the same\n\t\t// keystroke so the listeners can be attached to them with different priorities.\n\t\t//\n\t\t// E.g. all the keystrokes with the `keyCode` of 42 coming from the `emitter` are propagated\n\t\t// as a `_keydown:42` event by the `_listener`. If there's a callback created by the `set`\n\t\t// method for this 42 keystroke, it listens to the `_listener#_keydown:42` event only and interacts\n\t\t// only with other listeners of this particular event, thus making it possible to prioritize\n\t\t// the listeners and safely cancel execution, when needed. Instead of duplicating the Emitter logic,\n\t\t// the KeystrokeHandler re–uses it to do its job.\n\t\tthis._listener.listenTo( emitter, 'keydown', ( evt, keyEvtData ) => {\n\t\t\tthis._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t\t} );\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function} callback A function called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a helper funcion to call both `preventDefault()` and `stopPropagation()` on the underlying event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tconst keyCode = parseKeystroke( keystroke );\n\t\tconst priority = options.priority;\n\n\t\t// Execute the passed callback on KeystrokeHandler#_keydown.\n\t\t// TODO: https://github.com/ckeditor/ckeditor5-utils/issues/144\n\t\tthis._listener.listenTo( this._listener, '_keydown:' + keyCode, ( evt, keyEvtData ) => {\n\t\t\tcallback( keyEvtData, () => {\n\t\t\t\t// Stop the event in the DOM: no listener in the web page\n\t\t\t\t// will be triggered by this event.\n\t\t\t\tkeyEvtData.preventDefault();\n\t\t\t\tkeyEvtData.stopPropagation();\n\n\t\t\t\t// Stop the event in the KeystrokeHandler: no more callbacks\n\t\t\t\t// will be executed for this keystroke.\n\t\t\t\tevt.stop();\n\t\t\t} );\n\n\t\t\t// Mark this keystroke as handled by the callback. See: #press.\n\t\t\tevt.return = true;\n\t\t}, { priority } );\n\t}\n\n\t/**\n\t * Triggers a keystroke handler for a specified key combination, if such a keystroke was {@link #set defined}.\n\t *\n\t * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEvtData Key event data.\n\t * @returns {Boolean} Whether the keystroke was handled.\n\t */\n\tpress( keyEvtData ) {\n\t\treturn !!this._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t}\n\n\t/**\n\t * Destroys the keystroke handler.\n\t */\n\tdestroy() {\n\t\tthis._listener.stopListening();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/first\n */\n\n/**\n * Returns first item of the given `iterable`.\n *\n * @param {Iterable.<*>} iterable\n * @returns {*}\n */\nexport default function first( iterable ) {\n\tconst iteratorItem = iterable.next();\n\n\tif ( iteratorItem.done ) {\n\t\treturn null;\n\t}\n\n\treturn iteratorItem.value;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/insertoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport NodeList from '../nodelist';\nimport MoveOperation from './moveoperation';\nimport { _insert, _normalizeNodes } from './utils';\nimport Text from '../text';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to insert one or more nodes at given position in the model.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class InsertOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of insertion.\n\t * @param {module:engine/model/node~NodeSet} nodes The list of nodes to be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, nodes, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position of insertion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/insertoperation~InsertOperation#position\n\t\t */\n\t\tthis.position = position.clone();\n\t\tthis.position.stickiness = 'toNone';\n\n\t\t/**\n\t\t * List of nodes to insert.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/operation/insertoperation~InsertOperation#nodeList\n\t\t */\n\t\tthis.nodes = new NodeList( _normalizeNodes( nodes ) );\n\n\t\t/**\n\t\t * Flag deciding how the operation should be transformed. If set to `true`, nodes might get additional attributes\n\t\t * during operational transformation. This happens when the operation insertion position is inside of a range\n\t\t * where attributes have changed.\n\t\t *\n\t\t * @member {Boolean} module:engine/model/operation/insertoperation~InsertOperation#shouldReceiveAttributes\n\t\t */\n\t\tthis.shouldReceiveAttributes = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'insert';\n\t}\n\n\t/**\n\t * Total offset size of inserted nodes.\n\t *\n\t * @returns {Number}\n\t */\n\tget howMany() {\n\t\treturn this.nodes.maxOffset;\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst nodes = new NodeList( [ ...this.nodes ].map( node => node._clone( true ) ) );\n\t\tconst insert = new InsertOperation( this.position, nodes, this.baseVersion );\n\n\t\tinsert.shouldReceiveAttributes = this.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.position.root.document.graveyard;\n\t\tconst gyPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MoveOperation( this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst targetElement = this.position.parent;\n\n\t\tif ( !targetElement || targetElement.maxOffset < this.position.offset ) {\n\t\t\t/**\n\t\t\t * Insertion position is invalid.\n\t\t\t *\n\t\t\t * @error insert-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insert-operation-position-invalid: Insertion position is invalid.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// What happens here is that we want original nodes be passed to writer because we want original nodes\n\t\t// to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n\t\t// to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n\t\t// get children. It is important that InsertOperation has the copy of original nodes in intact state.\n\t\tconst originalNodes = this.nodes;\n\t\tthis.nodes = new NodeList( [ ...originalNodes ].map( node => node._clone( true ) ) );\n\n\t\t_insert( this.position, originalNodes );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\t\tjson.nodes = this.nodes.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'InsertOperation';\n\t}\n\n\t/**\n\t * Creates `InsertOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json.nodes ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\tconst insert = new InsertOperation( Position.fromJSON( json.position, document ), children, json.baseVersion );\n\t\tinsert.shouldReceiveAttributes = json.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/selection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Range from './range';\nimport Position from './position';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport Node from './node';\nimport Element from './element';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport DocumentSelection from './documentselection';\n\n/**\n * Class representing an arbirtary selection in the view.\n * See also {@link module:engine/view/documentselection~DocumentSelection}.\n *\n * New selection instances can be created via the constructor or one these methods:\n *\n * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n *\n * A selection can consist of {@link module:engine/view/range~Range ranges} that can be set by using\n * the {@link module:engine/view/selection~Selection#setTo `Selection#setTo()`} method.\n */\nexport default class Selection {\n\t/**\n\t * Creates new selection instance.\n\t *\n\t * **Note**: The selection constructor is available as a factory method:\n\t *\n\t * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n\t * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tconstructor( selectable = null, placeOrOffset, options ) {\n\t\t/**\n\t\t * Stores all ranges that are selected.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Specifies whether selection instance is fake.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isFake = false;\n\n\t\t/**\n\t\t * Fake selection's label.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._fakeSelectionLabel = '';\n\n\t\tthis.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Returns true if selection instance is marked as `fake`.\n\t *\n\t * @see #setTo\n\t * @returns {Boolean}\n\t */\n\tget isFake() {\n\t\treturn this._isFake;\n\t}\n\n\t/**\n\t * Returns fake selection label.\n\t *\n\t * @see #setTo\n\t * @returns {String}\n\t */\n\tget fakeSelectionLabel() {\n\t\treturn this._fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n\t * {@link #focus focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n\t * It may be a bit unintuitive when there are multiple ranges in selection.\n\t *\n\t * @see #focus\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget anchor() {\n\t\tif ( !this._ranges.length ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\t\tconst anchor = this._lastRangeBackward ? range.end : range.start;\n\n\t\treturn anchor.clone();\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * @see #anchor\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget focus() {\n\t\tif ( !this._ranges.length ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\t\tconst focus = this._lastRangeBackward ? range.start : range.end;\n\n\t\treturn focus.clone();\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.rangeCount === 1 && this._ranges[ 0 ].isCollapsed;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus} precedes {@link #anchor}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n\t * if the selection is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tif ( this.anchor ) {\n\t\t\treturn this.anchor.editableElement;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns an iterable that contains copies of all ranges added to the selection.\n\t *\n\t * @returns {Iterable.<module:engine/view/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield range.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Returns copy of the first range in the selection. First range is the one which\n\t * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n\t * position of all other ranges (not to confuse with the first range added to the selection).\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? first.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n\t * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n\t * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? last.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the first position in the selection. First position is the position that\n\t * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst firstRange = this.getFirstRange();\n\n\t\treturn firstRange ? firstRange.start.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the last position in the selection. Last position is the position that\n\t * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? lastRange.end.clone() : null;\n\t}\n\n\t/**\n\t * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n\t * same number of ranges and all ranges from one selection equal to a range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.isFake != otherSelection.isFake ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isFake && this.fakeSelectionLabel != otherSelection.fakeSelectionLabel ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n\t * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n\t * equal to any trimmed range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n\t */\n\tisSimilar( otherSelection ) {\n\t\tif ( this.isBackward != otherSelection.isBackward ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst numOfRangesA = count( this.getRanges() );\n\t\tconst numOfRangesB = count( otherSelection.getRanges() );\n\n\t\t// If selections have different number of ranges, they cannot be similar.\n\t\tif ( numOfRangesA != numOfRangesB ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If both selections have no ranges, they are similar.\n\t\tif ( numOfRangesA == 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check if each range in one selection has a similar range in other selection.\n\t\tfor ( let rangeA of this.getRanges() ) {\n\t\t\trangeA = rangeA.getTrimmed();\n\n\t\t\tlet found = false;\n\n\t\t\tfor ( let rangeB of otherSelection.getRanges() ) {\n\t\t\t\trangeB = rangeB.getTrimmed();\n\n\t\t\t\tif ( rangeA.start.isEqual( rangeB.start ) && rangeA.end.isEqual( rangeB.end ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For `rangeA`, neither range in `otherSelection` was similar. So selections are not similar.\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// There were no ranges that weren't matched. Selections are similar.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/view/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = this.getFirstRange();\n\n\t\tlet nodeAfterStart = range.start.nodeAfter;\n\t\tlet nodeBeforeEnd = range.end.nodeBefore;\n\n\t\t// Handle the situation when selection position is at the beginning / at the end of a text node.\n\t\t// In such situation `.nodeAfter` and `.nodeBefore` are `null` but the selection still might be spanning\n\t\t// over one element.\n\t\t//\n\t\t// <p>Foo{<span class=\"widget\"></span>}bar</p> vs <p>Foo[<span class=\"widget\"></span>]bar</p>\n\t\t//\n\t\t// These are basically the same selections, only the difference is if the selection position is at\n\t\t// at the end/at the beginning of a text node or just before/just after the text node.\n\t\t//\n\t\tif ( range.start.parent.is( 'text' ) && range.start.isAtEnd && range.start.parent.nextSibling ) {\n\t\t\tnodeAfterStart = range.start.parent.nextSibling;\n\t\t}\n\n\t\tif ( range.end.parent.is( 'text' ) && range.end.isAtStart && range.end.parent.previousSibling ) {\n\t\t\tnodeBeforeEnd = range.end.parent.previousSibling;\n\t\t}\n\n\t\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t *\t \t// Sets selection to contents of DocumentSelection.\n\t *\t\tselection.setTo( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t *\t\tselection.setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tselection.setTo( paragraph, 'on' );\n\t *\n\t * \t\t// Clears selection. Removes all ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t * `Selection#setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\tselection.setTo( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tselection.setTo( range, { fake: true, label: 'foo' } );\n\t *\n\t * @fires change\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tsetTo( selectable, placeOrOffset, options ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Selection || selectable instanceof DocumentSelection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t\tthis._setFakeOptions( { fake: selectable.isFake, label: selectable.fakeSelectionLabel } );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], placeOrOffset && placeOrOffset.backward );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Node ) {\n\t\t\tconst backward = !!options && !!options.backward;\n\t\t\tlet range;\n\n\t\t\tif ( placeOrOffset === undefined ) {\n\t\t\t\t/**\n\t\t\t\t * selection.setTo requires the second parameter when the first parameter is a node.\n\t\t\t\t *\n\t\t\t\t * @error view-selection-setTo-required-second-parameter\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-selection-setTo-required-second-parameter: ' +\n\t\t\t\t\t'selection.setTo requires the second parameter when the first parameter is a node.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t} else if ( placeOrOffset == 'in' ) {\n\t\t\t\trange = Range._createIn( selectable );\n\t\t\t} else if ( placeOrOffset == 'on' ) {\n\t\t\t\trange = Range._createOn( selectable );\n\t\t\t} else {\n\t\t\t\trange = new Range( Position._createAt( selectable, placeOrOffset ) );\n\t\t\t}\n\n\t\t\tthis._setRanges( [ range ], backward );\n\t\t\tthis._setFakeOptions( options );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\t// Array.from() is used to prevent setting ranges to the old iterable\n\t\t\tthis._setRanges( selectable, placeOrOffset && placeOrOffset.backward );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set selection to given place.\n\t\t\t *\n\t\t\t * @error view-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-selection-setTo-not-selectable: Cannot set selection to given place.', this );\n\t\t}\n\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Moves {@link #focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @fires change\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error view-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tthis._ranges.pop();\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._addRange( new Range( newFocus, anchor ), true );\n\t\t} else {\n\t\t\tthis._addRange( new Range( anchor, newFocus ) );\n\t\t}\n\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'view:selection' ); // -> true\n\t *\n\t *\t\tselection.is( 'model:selection' ); // -> false\n\t *\t\tselection.is( 'element' ); // -> false\n\t *\t\tselection.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' || type == 'view:selection';\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link #anchor anchor} and {@link #focus focus}.\n\t * Accepts a flag describing in which way the selection is made.\n\t *\n\t * @private\n\t * @param {Iterable.<module:engine/view/range~Range>} newRanges Iterable object of ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end\n\t * (`false`) or backward - from end to start (`true`). Defaults to `false`.\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\t// New ranges should be copied to prevent removing them by setting them to `[]` first.\n\t\t// Only applies to situations when selection is set to the same selection or same selection's ranges.\n\t\tnewRanges = Array.from( newRanges );\n\n\t\tthis._ranges = [];\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._addRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\t}\n\n\t/**\n\t * Sets this selection instance to be marked as `fake`. A fake selection does not render as browser native selection\n\t * over selected elements and is hidden to the user. This way, no native selection UI artifacts are displayed to\n\t * the user and selection over elements can be represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM (and be\n\t * properly handled by screen readers).\n\t *\n\t * @private\n\t * @param {Object} [options] Options.\n\t * @param {Boolean} [options.fake] If set to true selection will be marked as `fake`.\n\t * @param {String} [options.label=''] Fake selection label.\n\t */\n\t_setFakeOptions( options = {} ) {\n\t\tthis._isFake = !!options.fake;\n\t\tthis._fakeSelectionLabel = options.fake ? options.label || '' : '';\n\t}\n\n\t/**\n\t * Adds a range to the selection. Added range is copied. This means that passed range is not saved in the\n\t * selection instance and you can safely operate on it.\n\t *\n\t * Accepts a flag describing in which way the selection is made - passed range might be selected from\n\t * {@link module:engine/view/range~Range#start start} to {@link module:engine/view/range~Range#end end}\n\t * or from {@link module:engine/view/range~Range#end end} to {@link module:engine/view/range~Range#start start}.\n\t * The flag is used to set {@link #anchor anchor} and {@link #focus focus} properties.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n\t * with ranges already stored in Selection instance.\n\t *\n\t * @private\n\t * @fires change\n\t * @param {module:engine/view/range~Range} range\n\t * @param {Boolean} [isBackward]\n\t */\n\t_addRange( range, isBackward = false ) {\n\t\tif ( !( range instanceof Range ) ) {\n\t\t\t/**\n\t\t\t * Selection range set to an object that is not an instance of {@link module:engine/view/range~Range}.\n\t\t\t *\n\t\t\t * @error view-selection-add-range-not-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-selection-add-range-not-range: ' +\n\t\t\t\t'Selection range set to an object that is not an instance of view.Range',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tthis._pushRange( range );\n\t\tthis._lastRangeBackward = !!isBackward;\n\t}\n\n\t/**\n\t * Adds range to selection - creates copy of given range so it can be safely used and modified.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n\t * with ranges already stored in selection instance.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t */\n\t_pushRange( range ) {\n\t\tfor ( const storedRange of this._ranges ) {\n\t\t\tif ( range.isIntersecting( storedRange ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range from selection.\n\t\t\t\t *\n\t\t\t\t * @error view-selection-range-intersects\n\t\t\t\t * @param {module:engine/view/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/view/range~Range} intersectingRange Range from selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-selection-range-intersects: Trying to add a range that intersects with another range from selection.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ addedRange: range, intersectingRange: storedRange }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._ranges.push( new Range( range.start, range.end ) );\n\t}\n\n\t/**\n\t * Fired whenever selection ranges are changed through {@link ~Selection Selection API}.\n\t *\n\t * @event change\n\t */\n}\n\nmix( Selection, EmitterMixin );\n\n/**\n * An entity that is used to set selection.\n *\n * See also {@link module:engine/view/selection~Selection#setTo}\n *\n * @typedef {\n *    module:engine/view/selection~Selection|\n *    module:engine/view/documentselection~DocumentSelection|\n *    module:engine/view/position~Position|\n *    Iterable.<module:engine/view/range~Range>|\n *    module:engine/view/range~Range|\n *    module:engine/view/item~Item|\n *    null\n * } module:engine/view/selection~Selectable\n */\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/observer\n */\n\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Abstract base observer class. Observers are classes which listen to DOM events, do the preliminary\n * processing and fire events on the {@link module:engine/view/document~Document} objects.\n * Observers can also add features to the view, for instance by updating its status or marking elements\n * which need refresh on DOM events.\n *\n * @abstract\n */\nexport default class Observer {\n\t/**\n\t * Creates an instance of the observer.\n\t *\n\t * @param {module:engine/view/view~View} view\n\t */\n\tconstructor( view ) {\n\t\t/**\n\t\t * Instance of the view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/document~Document} object.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = view.document;\n\n\t\t/**\n\t\t * State of the observer. If it is disabled events will not be fired.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.isEnabled = false;\n\t}\n\n\t/**\n\t * Enables the observer. This method is called when the observer is registered to the\n\t * {@link module:engine/view/view~View} and after {@link module:engine/view/view~View#forceRender rendering}\n\t * (all observers are {@link #disable disabled} before rendering).\n\t *\n\t * A typical use case for disabling observers is that mutation observers need to be disabled for the rendering.\n\t * However, a child class may not need to be disabled, so it can implement an empty method.\n\t *\n\t * @see module:engine/view/observer/observer~Observer#disable\n\t */\n\tenable() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Disables the observer. This method is called before\n\t * {@link module:engine/view/view~View#forceRender rendering} to prevent firing events during rendering.\n\t *\n\t * @see module:engine/view/observer/observer~Observer#enable\n\t */\n\tdisable() {\n\t\tthis.isEnabled = false;\n\t}\n\n\t/**\n\t * Disables and destroys the observer, among others removes event listeners created by the observer.\n\t */\n\tdestroy() {\n\t\tthis.disable();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Starts observing the given root element.\n\t *\n\t * @method #observe\n\t * @param {HTMLElement} domElement\n\t * @param {String} name The name of the root element.\n\t */\n}\n\nmix( Observer, DomEmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/treewalker\n */\n\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Element from './element';\nimport Position from './position';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n\t/**\n\t * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n\t *\n\t * @constructor\n\t * @param {Object} [options={}] Object with configuration.\n\t * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\n\t * @param {module:engine/model/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {module:engine/model/position~Position} [options.startPosition] Starting position.\n\t * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all consecutive characters with the same attributes\n\t * should be returned one by one as multiple {@link module:engine/model/textproxy~TextProxy} (`true`) objects or as one\n\t * {@link module:engine/model/textproxy~TextProxy} (`false`).\n\t * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\n\t * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\n\t * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\n\t * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\n\t * each {@link module:engine/model/element~Element} will be returned once, while if the option is `false` they might be returned\n\t * twice: for `'elementStart'` and `'elementEnd'`.\n\t */\n\tconstructor( options = {} ) {\n\t\tif ( !options.boundaries && !options.startPosition ) {\n\t\t\t/**\n\t\t\t * Neither boundaries nor starting position of a `TreeWalker` have been defined.\n\t\t\t *\n\t\t\t * @error model-tree-walker-no-start-position\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.',\n\t\t\t\tnull\n\t\t\t);\n\t\t}\n\n\t\tconst direction = options.direction || 'forward';\n\n\t\tif ( direction != 'forward' && direction != 'backward' ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.',\n\t\t\t\toptions,\n\t\t\t\t{ direction }\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Walking direction. Defaults `'forward'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'backward'|'forward'} module:engine/model/treewalker~TreeWalker#direction\n\t\t */\n\t\tthis.direction = direction;\n\n\t\t/**\n\t\t * Iterator boundaries.\n\t\t *\n\t\t * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\n\t\t * on the start of boundary, then `{ done: true }` is returned.\n\t\t *\n\t\t * If boundaries are not defined they are set before first and after last child of the root node.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range} module:engine/model/treewalker~TreeWalker#boundaries\n\t\t */\n\t\tthis.boundaries = options.boundaries || null;\n\n\t\t/**\n\t\t * Iterator position. This is always static position, even if the initial position was a\n\t\t * {@link module:engine/model/liveposition~LivePosition live position}. If start position is not defined then position depends\n\t\t * on {@link #direction}. If direction is `'forward'` position starts form the beginning, when direction\n\t\t * is `'backward'` position starts from the end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/treewalker~TreeWalker#position\n\t\t */\n\t\tif ( options.startPosition ) {\n\t\t\tthis.position = options.startPosition.clone();\n\t\t} else {\n\t\t\tthis.position = Position._createAt( this.boundaries[ this.direction == 'backward' ? 'end' : 'start' ] );\n\t\t}\n\n\t\t// Reset position stickiness in case it was set to other value, as the stickiness is kept after cloning.\n\t\tthis.position.stickiness = 'toNone';\n\n\t\t/**\n\t\t * Flag indicating whether all consecutive characters with the same attributes should be\n\t\t * returned as one {@link module:engine/model/textproxy~TextProxy} (`true`) or one by one (`false`).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#singleCharacters\n\t\t */\n\t\tthis.singleCharacters = !!options.singleCharacters;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\n\t\t * iterated node will not be returned along with `elementEnd` tag.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#shallow\n\t\t */\n\t\tthis.shallow = !!options.shallow;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should ignore `elementEnd` tags. If the option is true walker will not\n\t\t * return a parent node of the start position. If this option is `true` each {@link module:engine/model/element~Element} will\n\t\t * be returned once, while if the option is `false` they might be returned twice:\n\t\t * for `'elementStart'` and `'elementEnd'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#ignoreElementEnd\n\t\t */\n\t\tthis.ignoreElementEnd = !!options.ignoreElementEnd;\n\n\t\t/**\n\t\t * Start boundary cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryStartParent\n\t\t */\n\t\tthis._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n\n\t\t/**\n\t\t * End boundary cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryEndParent\n\t\t */\n\t\tthis._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n\n\t\t/**\n\t\t * Parent of the most recently visited node. Cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t\t * module:engine/model/treewalker~TreeWalker#_visitedParent\n\t\t */\n\t\tthis._visitedParent = this.position.parent;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n\t *\n\t * For example:\n\t *\n\t * \t\twalker.skip( value => value.type == 'text' ); // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n\t * \t\twalker.skip( () => true ); // Move the position to the end: <paragraph>[]foo</paragraph> -> <paragraph>foo</paragraph>[]\n\t * \t\twalker.skip( () => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t */\n\tskip( skip ) {\n\t\tlet done, value, prevPosition, prevVisitedParent;\n\n\t\tdo {\n\t\t\tprevPosition = this.position;\n\t\t\tprevVisitedParent = this._visitedParent;\n\n\t\t\t( { done, value } = this.next() );\n\t\t} while ( !done && skip( value ) );\n\n\t\tif ( !done ) {\n\t\t\tthis.position = prevPosition;\n\t\t\tthis._visitedParent = prevVisitedParent;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the next tree walker's value.\n\t *\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} Next tree walker's value.\n\t */\n\tnext() {\n\t\tif ( this.direction == 'forward' ) {\n\t\t\treturn this._next();\n\t\t} else {\n\t\t\treturn this._previous();\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step forward in model. Moves the {@link #position} to the next position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_next() {\n\t\tconst previousPosition = this.position;\n\t\tconst position = this.position.clone();\n\t\tconst parent = this._visitedParent;\n\n\t\t// We are at the end of the root.\n\t\tif ( parent.parent === null && position.offset === parent.maxOffset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\tconst node = position.textNode ? position.textNode : position.nodeAfter;\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\t// Manual operations on path internals for optimization purposes. Here and in the rest of the method.\n\t\t\t\tposition.path.push( 0 );\n\t\t\t\tthis._visitedParent = node;\n\t\t\t} else {\n\t\t\t\tposition.offset++;\n\t\t\t}\n\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t} else if ( node instanceof Text ) {\n\t\t\tlet charactersCount;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tcharactersCount = 1;\n\t\t\t} else {\n\t\t\t\tlet offset = node.endOffset;\n\n\t\t\t\tif ( this._boundaryEndParent == parent && this.boundaries.end.offset < offset ) {\n\t\t\t\t\toffset = this.boundaries.end.offset;\n\t\t\t\t}\n\n\t\t\t\tcharactersCount = offset - position.offset;\n\t\t\t}\n\n\t\t\tconst offsetInTextNode = position.offset - node.startOffset;\n\t\t\tconst item = new TextProxy( node, offsetInTextNode, charactersCount );\n\n\t\t\tposition.offset += charactersCount;\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the end of current `parent`.\n\t\t\tposition.path.pop();\n\t\t\tposition.offset++;\n\t\t\tthis.position = position;\n\t\t\tthis._visitedParent = parent.parent;\n\n\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\treturn formatReturnValue( 'elementEnd', parent, previousPosition, position );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step backward in model. Moves the {@link #position} to the previous position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_previous() {\n\t\tconst previousPosition = this.position;\n\t\tconst position = this.position.clone();\n\t\tconst parent = this._visitedParent;\n\n\t\t// We are at the beginning of the root.\n\t\tif ( parent.parent === null && position.offset === 0 ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just before current position\n\t\tconst node = position.textNode ? position.textNode : position.nodeBefore;\n\n\t\tif ( node instanceof Element ) {\n\t\t\tposition.offset--;\n\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition.path.push( node.maxOffset );\n\t\t\t\tthis.position = position;\n\t\t\t\tthis._visitedParent = node;\n\n\t\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\t\treturn this._previous();\n\t\t\t\t} else {\n\t\t\t\t\treturn formatReturnValue( 'elementEnd', node, previousPosition, position );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t\t}\n\t\t} else if ( node instanceof Text ) {\n\t\t\tlet charactersCount;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tcharactersCount = 1;\n\t\t\t} else {\n\t\t\t\tlet offset = node.startOffset;\n\n\t\t\t\tif ( this._boundaryStartParent == parent && this.boundaries.start.offset > offset ) {\n\t\t\t\t\toffset = this.boundaries.start.offset;\n\t\t\t\t}\n\n\t\t\t\tcharactersCount = position.offset - offset;\n\t\t\t}\n\n\t\t\tconst offsetInTextNode = position.offset - node.startOffset;\n\t\t\tconst item = new TextProxy( node, offsetInTextNode - charactersCount, charactersCount );\n\n\t\t\tposition.offset -= charactersCount;\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the beginning of current `parent`.\n\t\t\tposition.path.pop();\n\t\t\tthis.position = position;\n\t\t\tthis._visitedParent = parent.parent;\n\n\t\t\treturn formatReturnValue( 'elementStart', parent, previousPosition, position, 1 );\n\t\t}\n\t}\n}\n\nfunction formatReturnValue( type, item, previousPosition, nextPosition, length ) {\n\treturn {\n\t\tdone: false,\n\t\tvalue: {\n\t\t\ttype,\n\t\t\titem,\n\t\t\tpreviousPosition,\n\t\t\tnextPosition,\n\t\t\tlength\n\t\t}\n\t};\n}\n\n/**\n * Type of the step made by {@link module:engine/model/treewalker~TreeWalker}.\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end of node,\n * `'character'` if walker traversed over a character, or `'text'` if walker traversed over multiple characters (available in\n * character merging mode, see {@link module:engine/model/treewalker~TreeWalker#constructor}).\n *\n * @typedef {'elementStart'|'elementEnd'|'character'|'text'} module:engine/model/treewalker~TreeWalkerValueType\n */\n\n/**\n * Object returned by {@link module:engine/model/treewalker~TreeWalker} when traversing tree model.\n *\n * @typedef {Object} module:engine/model/treewalker~TreeWalkerValue\n * @property {module:engine/model/treewalker~TreeWalkerValueType} type\n * @property {module:engine/model/item~Item} item Item between old and new positions of {@link module:engine/model/treewalker~TreeWalker}.\n * @property {module:engine/model/position~Position} previousPosition Previous position of the iterator.\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\n * position before the item.\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after item.\n * @property {module:engine/model/position~Position} nextPosition Next position of the iterator.\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after the item.\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\n * before the item.\n * @property {Number} [length] Length of the item. For `'elementStart'` and `'character'` it is 1. For `'text'` it is\n * the length of the text. For `'elementEnd'` it is `undefined`.\n */\n\n/**\n * Tree walking directions.\n *\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/domeventobserver\n */\n\nimport Observer from './observer';\nimport DomEventData from './domeventdata';\n\n/**\n * Base class for DOM event observers. This class handles\n * {@link module:engine/view/observer/observer~Observer#observe adding} listeners to DOM elements,\n * {@link module:engine/view/observer/observer~Observer#disable disabling} and\n * {@link module:engine/view/observer/observer~Observer#enable re-enabling} events.\n * Child class needs to define\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#domEventType DOM event type} and\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#onDomEvent callback}.\n *\n * For instance:\n *\n *\t\tclass ClickObserver extends DomEventObserver {\n *\t\t\t// It can also be defined as a normal property in the constructor.\n *\t\t\tget domEventType() {\n *\t\t\t\treturn 'click';\n *\t\t\t}\n *\n *\t\t\tonDomEvent( domEvent ) {\n *\t\t\t\tthis.fire( 'click', domEvent );\n *\t\t\t}\n *\t\t}\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DomEventObserver extends Observer {\n\t/**\n\t * Type of the DOM event the observer should listen on. Array of types can be defined\n\t * if the obsever should listen to multiple DOM events.\n\t *\n\t * @readonly\n\t * @member {String|Array.<String>} #domEventType\n\t */\n\n\t/**\n\t * Callback which should be called when the DOM event occurred. Note that the callback will not be called if\n\t * observer {@link #isEnabled is not enabled}.\n\t *\n\t * @see #domEventType\n\t * @abstract\n\t * @method #onDomEvent\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * If set to `true` DOM events will be listened on the capturing phase.\n\t\t * Default value is `false`.\n\t\t *\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.useCapture = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tconst types = typeof this.domEventType == 'string' ? [ this.domEventType ] : this.domEventType;\n\n\t\ttypes.forEach( type => {\n\t\t\tthis.listenTo( domElement, type, ( eventInfo, domEvent ) => {\n\t\t\t\tif ( this.isEnabled ) {\n\t\t\t\t\tthis.onDomEvent( domEvent );\n\t\t\t\t}\n\t\t\t}, { useCapture: this.useCapture } );\n\t\t} );\n\t}\n\n\t/**\n\t * Calls `Document#fire()` if observer {@link #isEnabled is enabled}.\n\t *\n\t * @see module:utils/emittermixin~EmitterMixin#fire\n\t * @param {String} eventType The event type (name).\n\t * @param {Event} domEvent The DOM event.\n\t * @param {Object} [additionalData] The additional data which should extend the\n\t * {@link module:engine/view/observer/domeventdata~DomEventData event data} object.\n\t */\n\tfire( eventType, domEvent, additionalData ) {\n\t\tif ( this.isEnabled ) {\n\t\t\tthis.document.fire( eventType, new DomEventData( this.view, domEvent, additionalData ) );\n\t\t}\n\t}\n}\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/dropdownpanelview\n */\n\nimport View from '../view';\n\n/**\n * The dropdown panel view class.\n *\n * See {@link module:ui/dropdown/dropdownview~DropdownView} to learn about the common usage.\n *\n * @extends module:ui/view~View\n */\nexport default class DropdownPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Controls whether the panel is visible.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVisible\n\t\t */\n\t\tthis.set( 'isVisible', false );\n\n\t\t/**\n\t\t * The position of the panel, relative to the parent.\n\t\t *\n\t\t * This property is reflected in the CSS class set to {@link #element} that controls\n\t\t * the position of the panel.\n\t\t *\n\t\t * @observable\n\t\t * @default 'se'\n\t\t * @member {'se'|'sw'|'ne'|'nw'} #position\n\t\t */\n\t\tthis.set( 'position', 'se' );\n\n\t\t/**\n\t\t * Collection of the child views in this panel.\n\t\t *\n\t\t * A common child type is the {@link module:ui/list/listview~ListView} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n\t\t * See {@link module:ui/dropdown/utils~addListToDropdown} and\n\t\t * {@link module:ui/dropdown/utils~addToolbarToDropdown} to learn more about child views of dropdowns.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-reset',\n\t\t\t\t\t'ck-dropdown__panel',\n\t\t\t\t\tbind.to( 'position', value => `ck-dropdown__panel_${ value }` ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-dropdown__panel-visible' )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\t// Drag and drop in the panel should not break the selection in the editor.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/228\n\t\t\t\tselectstart: bind.to( evt => evt.preventDefault() )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the view element or first item in view collection on opening dropdown's panel.\n\t *\n\t * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n\t */\n\tfocus() {\n\t\tif ( this.children.length ) {\n\t\t\tthis.children.first.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Focuses the view element or last item in view collection on opening dropdown's panel.\n\t *\n\t * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n\t */\n\tfocusLast() {\n\t\tif ( this.children.length ) {\n\t\t\tconst lastChild = this.children.last;\n\n\t\t\tif ( typeof lastChild.focusLast === 'function' ) {\n\t\t\t\tlastChild.focusLast();\n\t\t\t} else {\n\t\t\t\tlastChild.focus();\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/dropdownview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\nimport '../../theme/components/dropdown/dropdown.css';\n\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\n\n/**\n * The dropdown view class. It manages the dropdown button and dropdown panel.\n *\n * In most cases, the easiest way to create a dropdown is by using the {@link module:ui/dropdown/utils~createDropdown}\n * util:\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * If you want to add a richer content to the dropdown panel, you can use the {@link module:ui/dropdown/utils~addListToDropdown}\n * and {@link module:ui/dropdown/utils~addToolbarToDropdown} helpers. See more examples in\n * {@link module:ui/dropdown/utils~createDropdown} documentation.\n *\n * If you want to create a completely custom dropdown, then you can compose it manually:\n *\n *\t\tconst button = new DropdownButtonView( locale );\n *\t\tconst panel = new DropdownPanelView( locale );\n *\t\tconst dropdown = new DropdownView( locale, button, panel );\n *\n *\t\tbutton.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tpanel.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * However, dropdown created this way will contain little behavior. You will need to implement handlers for actions\n * such as {@link module:ui/bindings/clickoutsidehandler~clickOutsideHandler clicking outside an open dropdown}\n * (which should close it) and support for arrow keys inside the panel. Therefore, unless you really know what\n * you do and you really need to do it, it is recommended to use the {@link module:ui/dropdown/utils~createDropdown} helper.\n *\n * @extends module:ui/view~View\n */\nexport default class DropdownView extends View {\n\t/**\n\t * Creates an instance of the dropdown.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t * @param {module:ui/dropdown/button/dropdownbutton~DropdownButton} buttonView\n\t * @param {module:ui/dropdown/dropdownpanelview~DropdownPanelView} panelView\n\t */\n\tconstructor( locale, buttonView, panelView ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Button of the dropdown view. Clicking the button opens the {@link #panelView}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/button/buttonview~ButtonView} #buttonView\n\t\t */\n\t\tthis.buttonView = buttonView;\n\n\t\t/**\n\t\t * Panel of the dropdown. It opens when the {@link #buttonView} is\n\t\t * {@link module:ui/button/buttonview~ButtonView#event:execute executed} (i.e. clicked).\n\t\t *\n\t\t * Child views can be added to the panel's `children` collection:\n\t\t *\n\t\t *\t\tdropdown.panelView.children.add( childView );\n\t\t *\n\t\t * See {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#children} and\n\t\t * {@link module:ui/viewcollection~ViewCollection#add}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownpanelview~DropdownPanelView} #panelView\n\t\t */\n\t\tthis.panelView = panelView;\n\n\t\t/**\n\t\t * Controls whether the dropdown view is open, i.e. shows or hides the {@link #panelView panel}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isOpen\n\t\t */\n\t\tthis.set( 'isOpen', false );\n\n\t\t/**\n\t\t * Controls whether the dropdown is enabled, i.e. it can be clicked and execute an action.\n\t\t *\n\t\t * See {@link module:ui/button/buttonview~ButtonView#isEnabled}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', true );\n\n\t\t/**\n\t\t * (Optional) The additional CSS class set on the dropdown {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * The position of the panel, relative to the dropdown.\n\t\t *\n\t\t * **Note**: When `'auto'`, the panel will use one of the remaining positions to stay\n\t\t * in the viewport, visible to the user. The positions correspond directly to\n\t\t * {@link module:ui/dropdown/dropdownview~DropdownView.defaultPanelPositions default panel positions}.\n\t\t *\n\t\t * **Note**: This value has an impact on the\n\t\t * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#position} property\n\t\t * each time the panel becomes {@link #isOpen open}.\n\t\t *\n\t\t * @observable\n\t\t * @default 'auto'\n\t\t * @member {'auto'|'se'|'sw'|'ne'|'nw'} #panelPosition\n\t\t */\n\t\tthis.set( 'panelPosition', 'auto' );\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the dropdown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}. It manages\n\t\t * keystrokes of the dropdown:\n\t\t *\n\t\t * * <kbd>▼</kbd> opens the dropdown,\n\t\t * * <kbd>◀</kbd> and <kbd>Esc</kbd> closes the dropdown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-dropdown',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isEnabled', 'ck-disabled', value => !value )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\tbuttonView,\n\t\t\t\tpanelView\n\t\t\t]\n\t\t} );\n\n\t\tbuttonView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-dropdown__button',\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * A child {@link module:ui/list/listview~ListView list view} of the dropdown located\n\t\t * in its {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/list/listview~ListView} #listView\n\t\t */\n\n\t\t/**\n\t\t * A child toolbar of the dropdown located in the\n\t\t * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarView} #toolbarView\n\t\t */\n\n\t\t/**\n\t\t * Fired when the toolbar button or list item is executed.\n\t\t *\n\t\t * For {@link #listView} It fires when a child of some {@link module:ui/list/listitemview~ListItemView}\n\t\t * fired `execute`.\n\t\t *\n\t\t * For {@link #toolbarView} It fires when one of the buttons has been\n\t\t * {@link module:ui/button/buttonview~ButtonView#event:execute executed}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}\n\t\t * or {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n\t\t *\n\t\t * @event execute\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Toggle the dropdown when its button has been clicked.\n\t\tthis.listenTo( this.buttonView, 'open', () => {\n\t\t\tthis.isOpen = !this.isOpen;\n\t\t} );\n\n\t\t// Toggle the visibility of the panel when the dropdown becomes open.\n\t\tthis.panelView.bind( 'isVisible' ).to( this, 'isOpen' );\n\n\t\t// Let the dropdown control the position of the panel. The position must\n\t\t// be updated every time the dropdown is open.\n\t\tthis.on( 'change:isOpen', () => {\n\t\t\tif ( !this.isOpen ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If \"auto\", find the best position of the panel to fit into the viewport.\n\t\t\t// Otherwise, simply assign the static position.\n\t\t\tif ( this.panelPosition === 'auto' ) {\n\t\t\t\tthis.panelView.position = DropdownView._getOptimalPosition( {\n\t\t\t\t\telement: this.panelView.element,\n\t\t\t\t\ttarget: this.buttonView.element,\n\t\t\t\t\tfitInViewport: true,\n\t\t\t\t\tpositions: this._panelPositions\n\t\t\t\t} ).name;\n\t\t\t} else {\n\t\t\t\tthis.panelView.position = this.panelPosition;\n\t\t\t}\n\t\t} );\n\n\t\t// Listen for keystrokes coming from within #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\t// Register #element in the focus tracker.\n\t\tthis.focusTracker.add( this.element );\n\n\t\tconst closeDropdown = ( data, cancel ) => {\n\t\t\tif ( this.isOpen ) {\n\t\t\t\tthis.buttonView.focus();\n\t\t\t\tthis.isOpen = false;\n\t\t\t\tcancel();\n\t\t\t}\n\t\t};\n\n\t\t// Open the dropdown panel using the arrow down key, just like with return or space.\n\t\tthis.keystrokes.set( 'arrowdown', ( data, cancel ) => {\n\t\t\t// Don't open if the dropdown is disabled or already open.\n\t\t\tif ( this.buttonView.isEnabled && !this.isOpen ) {\n\t\t\t\tthis.isOpen = true;\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Block the right arrow key (until nested dropdowns are implemented).\n\t\tthis.keystrokes.set( 'arrowright', ( data, cancel ) => {\n\t\t\tif ( this.isOpen ) {\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Close the dropdown using the arrow left/escape key.\n\t\tthis.keystrokes.set( 'arrowleft', closeDropdown );\n\t\tthis.keystrokes.set( 'esc', closeDropdown );\n\t}\n\n\t/**\n\t * Focuses the {@link #buttonView}.\n\t */\n\tfocus() {\n\t\tthis.buttonView.focus();\n\t}\n\n\t/**\n\t * Returns {@link #panelView panel} positions to be used by the\n\t * {@link module:utils/dom/position~getOptimalPosition `getOptimalPosition()`}\n\t * utility considering the direction of the language the UI of the editor is displayed in.\n\t *\n\t * @type {module:utils/dom/position~Options#positions}\n\t * @private\n\t */\n\tget _panelPositions() {\n\t\tconst { southEast, southWest, northEast, northWest } = DropdownView.defaultPanelPositions;\n\n\t\tif ( this.locale.uiLanguageDirection === 'ltr' ) {\n\t\t\treturn [ southEast, southWest, northEast, northWest ];\n\t\t} else {\n\t\t\treturn [ southWest, southEast, northWest, northEast ];\n\t\t}\n\t}\n}\n\n/**\n * A set of positioning functions used by the dropdown view to determine\n * the optimal position (i.e. fitting into the browser viewport) of its\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel} when\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition} is set to 'auto'`.\n *\n * The available positioning functions are as follow:\n *\n * **South**\n *\n * * `southEast`\n *\n *\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * * `southWest`\n *\n *\t\t         [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * **North**\n *\n * * `northEast`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t[ Button ]\n *\n * * `northWest`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t         [ Button ]\n *\n * Positioning functions are compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that position function returns will be reflected in dropdown panel's class that\n * controls its placement. See {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition}\n * to learn more.\n *\n * @member {Object} module:ui/dropdown/dropdownview~DropdownView.defaultPanelPositions\n */\nDropdownView.defaultPanelPositions = {\n\tsouthEast: buttonRect => {\n\t\treturn {\n\t\t\ttop: buttonRect.bottom,\n\t\t\tleft: buttonRect.left,\n\t\t\tname: 'se'\n\t\t};\n\t},\n\tsouthWest: ( buttonRect, panelRect ) => {\n\t\treturn {\n\t\t\ttop: buttonRect.bottom,\n\t\t\tleft: buttonRect.left - panelRect.width + buttonRect.width,\n\t\t\tname: 'sw'\n\t\t};\n\t},\n\tnorthEast: ( buttonRect, panelRect ) => {\n\t\treturn {\n\t\t\ttop: buttonRect.top - panelRect.height,\n\t\t\tleft: buttonRect.left,\n\t\t\tname: 'ne'\n\t\t};\n\t},\n\tnorthWest: ( buttonRect, panelRect ) => {\n\t\treturn {\n\t\t\ttop: buttonRect.bottom - panelRect.height,\n\t\t\tleft: buttonRect.left - panelRect.width + buttonRect.width,\n\t\t\tname: 'nw'\n\t\t};\n\t}\n};\n\n/**\n * A function used to calculate the optimal position for the dropdown panel.\n *\n * @protected\n * @member {Function} module:ui/dropdown/dropdownview~DropdownView._getOptimalPosition\n */\nDropdownView._getOptimalPosition = getOptimalPosition;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/button/dropdownbuttonview\n */\n\nimport ButtonView from '../../button/buttonview';\n\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport IconView from '../../icon/iconview';\n\n/**\n * The default dropdown button view class.\n *\n *\t\tconst view = new DropdownButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n *\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\n * @extends module:ui/button/buttonview~ButtonView\n */\nexport default class DropdownButtonView extends ButtonView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * An icon that displays arrow to indicate a dropdown button.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/icon/iconview~IconView}\n\t\t */\n\t\tthis.arrowView = this._createArrowView();\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\t'aria-haspopup': true\n\t\t\t}\n\t\t} );\n\n\t\t// The DropdownButton interface expects the open event upon which will open the dropdown.\n\t\tthis.delegate( 'execute' ).to( this, 'open' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.children.add( this.arrowView );\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.\n\t *\n\t * @private\n\t * @returns {module:ui/icon/iconview~IconView}\n\t */\n\t_createArrowView() {\n\t\tconst arrowView = new IconView();\n\n\t\tarrowView.content = dropdownArrowIcon;\n\n\t\tarrowView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-dropdown__arrow'\n\t\t\t}\n\t\t} );\n\n\t\treturn arrowView;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/list/listseparatorview\n */\n\nimport View from '../view';\n\n/**\n * The list separator view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ListSeparatorView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'li',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-list__separator'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/utils\n */\nimport DropdownPanelView from './dropdownpanelview';\nimport DropdownView from './dropdownview';\nimport DropdownButtonView from './button/dropdownbuttonview';\nimport ToolbarView from '../toolbar/toolbarview';\nimport ListView from '../list/listview';\nimport ListItemView from '../list/listitemview';\nimport ListSeparatorView from '../list/listseparatorview';\nimport ButtonView from '../button/buttonview';\nimport SwitchButtonView from '../button/switchbuttonview';\nimport clickOutsideHandler from '../bindings/clickoutsidehandler';\nimport '../../theme/components/dropdown/toolbardropdown.css';\nimport '../../theme/components/dropdown/listdropdown.css';\n/**\n * A helper for creating dropdowns. It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown},\n * with a {@link module:ui/dropdown/button/dropdownbutton~DropdownButton button},\n * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView panel} and all standard dropdown's behaviors.\n *\n * # Creating dropdowns\n *\n * By default, the default {@link module:ui/dropdown/button/dropdownbuttonview~DropdownButtonView} class is used as\n * definition of the button:\n *\n *\t\tconst dropdown = createDropdown( model );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * You can also provide other button views (they need to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface). For instance, you can use\n * {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} to create a dropdown with a split button.\n *\n *\t\tconst dropdown = createDropdown( model, SplitButtonView );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.buttonView.on( 'execute', () => {\n *\t\t\t// Add the behavior of the \"action part\" of the split button.\n *\t\t\t// Split button consists of the \"action part\" and \"arrow part\".\n *\t\t\t// The arrow opens the dropdown while the action part can have some other behavior.\n * \t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * # Adding content to the dropdown's panel\n *\n * The content of the panel can be inserted directly into the `dropdown.panelView.element`:\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n * However, most of the time you will want to add there either a {@link module:ui/list/listview~ListView list of options}\n * or a list of buttons (i.e. a {@link module:ui/toolbar/toolbarview~ToolbarView toolbar}).\n * To simplify the task, you can use, respectively, {@link module:ui/dropdown/utils~addListToDropdown} or\n * {@link module:ui/dropdown/utils~addToolbarToDropdown} utils.\n *\n * @param {module:utils/locale~Locale} locale The locale instance.\n * @param {Function} ButtonClass The dropdown button view class. Needs to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\nexport function createDropdown(locale, ButtonClass = DropdownButtonView) {\n    const buttonView = new ButtonClass(locale);\n    const panelView = new DropdownPanelView(locale);\n    const dropdownView = new DropdownView(locale, buttonView, panelView);\n    buttonView.bind('isEnabled').to(dropdownView);\n    if (buttonView instanceof DropdownButtonView) {\n        buttonView.bind('isOn').to(dropdownView, 'isOpen');\n    } else {\n        buttonView.arrowView.bind('isOn').to(dropdownView, 'isOpen');\n    }\n    addDefaultBehavior(dropdownView);\n    return dropdownView;\n}\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n *\n *\t\tconst buttons = [];\n *\n *\t\t// Either create a new ButtonView instance or create existing.\n *\t\tbuttons.push( new ButtonView() );\n *\t\tbuttons.push( editor.ui.componentFactory.get( 'someButton' ) );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddToolbarToDropdown( dropdown, buttons );\n *\n *\t\tdropdown.toolbarView.isVertical = true;\n *\n *\t\t// Will render a vertical button dropdown labeled \"A button dropdown\"\n *\t\t// with a button group in the panel containing two buttons.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ToolbarView` will be added.\n * @param {Iterable.<module:ui/button/buttonview~ButtonView>} buttons\n */\nexport function addToolbarToDropdown(dropdownView, buttons) {\n    const locale = dropdownView.locale;\n    const t = locale.t;\n    const toolbarView = dropdownView.toolbarView = new ToolbarView(locale);\n    toolbarView.set('ariaLabel', t('Dropdown toolbar'));\n    dropdownView.extendTemplate({ attributes: { class: ['ck-toolbar-dropdown'] } });\n    buttons.map(view => toolbarView.items.add(view));\n    dropdownView.panelView.children.add(toolbarView);\n    toolbarView.items.delegate('execute').to(dropdownView);\n}\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n *\n *\t\tconst items = new Collection();\n *\n *\t\titems.add( {\n *\t\t\ttype: 'button',\n *\t\t\tmodel: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'First item',\n *\t\t\t\tlabelStyle: 'color: red'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\titems.add( {\n *\t\t\t type: 'button',\n *\t\t\t model: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'Second item',\n *\t\t\t\tlabelStyle: 'color: green',\n *\t\t\t\tclass: 'foo'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddListToDropdown( dropdown, items );\n *\n *\t\t// Will render a dropdown with a list in the panel containing two items.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * The `items` collection passed to this methods controls the presence and attributes of respective\n * {@link module:ui/list/listitemview~ListItemView list items}.\n *\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:list/list~List}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ListVIew` will be added.\n * @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} items\n * A collection of the list item definitions to populate the list.\n */\nexport function addListToDropdown(dropdownView, items) {\n    const locale = dropdownView.locale;\n    const listView = dropdownView.listView = new ListView(locale);\n    listView.items.bindTo(items).using(({type, model}) => {\n        if (type === 'separator') {\n            return new ListSeparatorView(locale);\n        } else if (type === 'button' || type === 'switchbutton') {\n            const listItemView = new ListItemView(locale);\n            let buttonView;\n            if (type === 'button') {\n                buttonView = new ButtonView(locale);\n            } else {\n                buttonView = new SwitchButtonView(locale);\n            }\n            // Bind all model properties to the button view.\n            buttonView.bind(...Object.keys(model)).to(model);\n            buttonView.delegate('execute').to(listItemView);\n            listItemView.children.add(buttonView);\n            return listItemView;\n        }\n    });\n    dropdownView.panelView.children.add(listView);\n    listView.items.delegate('execute').to(dropdownView);\n}\n// Add a set of default behaviors to dropdown view.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction addDefaultBehavior(dropdownView) {\n    closeDropdownOnBlur(dropdownView);\n    closeDropdownOnExecute(dropdownView);\n    focusDropdownContentsOnArrows(dropdownView);\n}\n// Adds a behavior to a dropdownView that closes opened dropdown when user clicks outside the dropdown.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnBlur(dropdownView) {\n    dropdownView.on('render', () => {\n        clickOutsideHandler({\n            emitter: dropdownView,\n            activator: () => dropdownView.isOpen,\n            callback: () => {\n                dropdownView.isOpen = false;\n            },\n            contextElements: [dropdownView.element]\n        });\n    });\n}\n// Adds a behavior to a dropdownView that closes the dropdown view on \"execute\" event.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnExecute(dropdownView) {\n    // Close the dropdown when one of the list items has been executed.\n    dropdownView.on('execute', evt => {\n        // Toggling a switch button view should not close the dropdown.\n        if (evt.source instanceof SwitchButtonView) {\n            return;\n        }\n        dropdownView.isOpen = false;\n    });\n}\n// Adds a behavior to a dropdownView that focuses the dropdown's panel view contents on keystrokes.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction focusDropdownContentsOnArrows(dropdownView) {\n    // If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\n    dropdownView.keystrokes.set('arrowdown', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focus();\n            cancel();\n        }\n    });\n    // If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\n    dropdownView.keystrokes.set('arrowup', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focusLast();\n            cancel();\n        }\n    });\n}    /**\n * A definition of the list item used by the {@link module:ui/dropdown/utils~addListToDropdown}\n * utility.\n *\n * @typedef {Object} module:ui/dropdown/utils~ListDropdownItemDefinition\n *\n * @property {String} type Either `'separator'`, `'button'` or `'switchbutton'`.\n * @property {module:ui/model~Model} [model] Model of the item (when **not** `'separator'`).\n * Its properties fuel the newly created list item (or its children, depending on the `type`).\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/filereader\n */\n\n/* globals window */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Wrapper over the native `FileReader`.\n */\nexport default class FileReader {\n\t/**\n\t * Creates an instance of the FileReader.\n\t */\n\tconstructor() {\n\t\tconst reader = new window.FileReader();\n\n\t\t/**\n\t\t * Instance of native FileReader.\n\t\t *\n\t\t * @private\n\t\t * @member {FileReader} #_reader\n\t\t */\n\t\tthis._reader = reader;\n\n\t\tthis._data = undefined;\n\n\t\t/**\n\t\t * Number of bytes loaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #loaded\n\t\t */\n\t\tthis.set( 'loaded', 0 );\n\n\t\treader.onprogress = evt => {\n\t\t\tthis.loaded = evt.loaded;\n\t\t};\n\t}\n\n\t/**\n\t * Returns error that occurred during file reading.\n\t *\n\t * @returns {Error}\n\t */\n\tget error() {\n\t\treturn this._reader.error;\n\t}\n\n\t/**\n\t * Holds the data of an already loaded file. The file must be first loaded\n\t * by using {@link module:upload/filereader~FileReader#read `read()`}.\n\t *\n\t * @type {File|undefined}\n\t */\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * Reads the provided file.\n\t *\n\t * @param {File} file Native File object.\n\t * @returns {Promise.<String>} Returns a promise that will be resolved with file's content.\n\t * The promise will be rejected in case of an error or when the reading process is aborted.\n\t */\n\tread( file ) {\n\t\tconst reader = this._reader;\n\t\tthis.total = file.size;\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\treader.onload = () => {\n\t\t\t\tconst result = reader.result;\n\n\t\t\t\tthis._data = result;\n\n\t\t\t\tresolve( result );\n\t\t\t};\n\n\t\t\treader.onerror = () => {\n\t\t\t\treject( 'error' );\n\t\t\t};\n\n\t\t\treader.onabort = () => {\n\t\t\t\treject( 'aborted' );\n\t\t\t};\n\n\t\t\tthis._reader.readAsDataURL( file );\n\t\t} );\n\t}\n\n\t/**\n\t * Aborts file reader.\n\t */\n\tabort() {\n\t\tthis._reader.abort();\n\t}\n}\n\nmix( FileReader, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module upload/filerepository\n */\n/* globals console */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport PendingActions from '@ckeditor/ckeditor5-core/src/pendingactions';\nimport CKEditorError, { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport FileReader from './filereader.js';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid.js';\n/**\n * File repository plugin. A central point for managing file upload.\n *\n * To use it, first you need an upload adapter. Upload adapter's job is to handle communication with the server\n * (sending the file and handling server's response). You can use one of the existing plugins introducing upload adapters\n * (e.g. {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter} or\n * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}) or write your own one – see\n * the {@glink framework/guides/deep-dive/upload-adapter \"Custom image upload adapter\" deep dive guide}.\n *\n * Then, you can use {@link module:upload/filerepository~FileRepository#createLoader `createLoader()`} and the returned\n * {@link module:upload/filerepository~FileLoader} instance to load and upload files.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FileRepository extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'FileRepository';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [PendingActions];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        /**\n\t\t * Collection of loaders associated with this repository.\n\t\t *\n\t\t * @member {module:utils/collection~Collection} #loaders\n\t\t */\n        this.loaders = new Collection();\n        // Keeps upload in a sync with pending actions.\n        this.loaders.on('add', () => this._updatePendingAction());\n        this.loaders.on('remove', () => this._updatePendingAction());\n        /**\n\t\t * Loaders mappings used to retrieve loaders references.\n\t\t *\n\t\t * @private\n\t\t * @member {Map<File|Promise, FileLoader>} #_loadersMap\n\t\t */\n        this._loadersMap = new Map();\n        /**\n\t\t * Reference to a pending action registered in a {@link module:core/pendingactions~PendingActions} plugin\n\t\t * while upload is in progress. When there is no upload then value is `null`.\n\t\t *\n\t\t * @private\n\t\t * @member {Object} #_pendingAction\n\t\t */\n        this._pendingAction = null;\n        /**\n\t\t * A factory function which should be defined before using `FileRepository`.\n\t\t *\n\t\t * It should return a new instance of {@link module:upload/filerepository~UploadAdapter} that will be used to upload files.\n\t\t * {@link module:upload/filerepository~FileLoader} instance associated with the adapter\n\t\t * will be passed to that function.\n\t\t *\n\t\t * For more information and example see {@link module:upload/filerepository~UploadAdapter}.\n\t\t *\n\t\t * @member {Function} #createUploadAdapter\n\t\t */\n        /**\n\t\t * Number of bytes uploaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploaded\n\t\t */\n        this.set('uploaded', 0);\n        /**\n\t\t * Number of total bytes to upload.\n\t\t *\n\t\t * It might be different than the file size because of headers and additional data.\n\t\t * It contains `null` if value is not available yet, so it's better to use {@link #uploadedPercent} to monitor\n\t\t * the progress.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #uploadTotal\n\t\t */\n        this.set('uploadTotal', null);\n        /**\n\t\t * Upload progress in percents.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploadedPercent\n\t\t */\n        this.bind('uploadedPercent').to(this, 'uploaded', this, 'uploadTotal', (uploaded, total) => {\n            return total ? uploaded / total * 100 : 0;\n        });\n    }\n    /**\n\t * Returns the loader associated with specified file or promise.\n\t *\n\t * To get loader by id use `fileRepository.loaders.get( id )`.\n\t *\n\t * @param {File|Promise.<File>} fileOrPromise Native file or promise handle.\n\t * @returns {module:upload/filerepository~FileLoader|null}\n\t */\n    getLoader(fileOrPromise) {\n        return this._loadersMap.get(fileOrPromise) || null;\n    }\n    /**\n\t * Creates a loader instance for the given file.\n\t *\n\t * Requires {@link #createUploadAdapter} factory to be defined.\n\t *\n\t * @param {File|Promise.<File>} fileOrPromise Native File object or native Promise object which resolves to a File.\n\t * @returns {module:upload/filerepository~FileLoader|null}\n\t */\n    createLoader(fileOrPromise) {\n        if (!this.createUploadAdapter) {\n            /**\n\t\t\t * You need to enable an upload adapter in order to be able to upload files.\n\t\t\t *\n\t\t\t * This warning shows up when {@link module:upload/filerepository~FileRepository} is being used\n\t\t\t * without {@link #createUploadAdapter definining an upload adapter}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**\n\t\t\t * it means that you did not configure any of the upload adapters available by default in those builds.\n\t\t\t *\n\t\t\t * See the {@glink features/image-upload/image-upload comprehensive \"Image upload overview\"} to learn which upload\n\t\t\t * adapters are available in the builds and how to configure them.\n\t\t\t *\n\t\t\t * **If you see this warning when using a custom build** there is a chance that you enabled\n\t\t\t * a feature like {@link module:image/imageupload~ImageUpload},\n\t\t\t * or {@link module:image/imageupload/imageuploadui~ImageUploadUI} but you did not enable any upload adapter.\n\t\t\t * You can choose one of the existing upload adapters listed in the\n\t\t\t * {@glink features/image-upload/image-upload \"Image upload overview\"}.\n\t\t\t *\n\t\t\t * You can also implement your {@glink framework/guides/deep-dive/upload-adapter own image upload adapter}.\n\t\t\t *\n\t\t\t * @error filerepository-no-upload-adapter\n\t\t\t */\n            console.warn(attachLinkToDocumentation('filerepository-no-upload-adapter: Upload adapter is not defined.'));\n            return null;\n        }\n        const loader = new FileLoader(Promise.resolve(fileOrPromise), this.createUploadAdapter);\n        this.loaders.add(loader);\n        this._loadersMap.set(fileOrPromise, loader);\n        // Store also file => loader mapping so loader can be retrieved by file instance returned upon Promise resolution.\n        if (fileOrPromise instanceof Promise) {\n            loader.file.then(file => {\n                this._loadersMap.set(file, loader);\n            })    // Every then() must have a catch().\n                  // File loader state (and rejections) are handled in read() and upload().\n                  // Also, see the \"does not swallow the file promise rejection\" test.\n.catch(() => {\n            });\n        }\n        loader.on('change:uploaded', () => {\n            let aggregatedUploaded = 0;\n            for (const loader of this.loaders) {\n                aggregatedUploaded += loader.uploaded;\n            }\n            this.uploaded = aggregatedUploaded;\n        });\n        loader.on('change:uploadTotal', () => {\n            let aggregatedTotal = 0;\n            for (const loader of this.loaders) {\n                if (loader.uploadTotal) {\n                    aggregatedTotal += loader.uploadTotal;\n                }\n            }\n            this.uploadTotal = aggregatedTotal;\n        });\n        return loader;\n    }\n    /**\n\t * Destroys the given loader.\n\t *\n\t * @param {File|Promise|module:upload/filerepository~FileLoader} fileOrPromiseOrLoader File or Promise associated\n\t * with that loader or loader itself.\n\t */\n    destroyLoader(fileOrPromiseOrLoader) {\n        const loader = fileOrPromiseOrLoader instanceof FileLoader ? fileOrPromiseOrLoader : this.getLoader(fileOrPromiseOrLoader);\n        loader._destroy();\n        this.loaders.remove(loader);\n        this._loadersMap.forEach((value, key) => {\n            if (value === loader) {\n                this._loadersMap.delete(key);\n            }\n        });\n    }\n    /**\n\t * Registers or deregisters pending action bound with upload progress.\n\t *\n\t * @private\n\t */\n    _updatePendingAction() {\n        const pendingActions = this.editor.plugins.get(PendingActions);\n        if (this.loaders.length) {\n            if (!this._pendingAction) {\n                const t = this.editor.t;\n                const getMessage = value => `${ t('Upload in progress') } ${ parseInt(value) }%.`;\n                this._pendingAction = pendingActions.add(getMessage(this.uploadedPercent));\n                this._pendingAction.bind('message').to(this, 'uploadedPercent', getMessage);\n            }\n        } else {\n            pendingActions.remove(this._pendingAction);\n            this._pendingAction = null;\n        }\n    }\n}\nmix(FileRepository, ObservableMixin);\n/**\n * File loader class.\n *\n * It is used to control the process of reading the file and uploading it using the specified upload adapter.\n */\nclass FileLoader {\n    /**\n\t * Creates a new instance of `FileLoader`.\n\t *\n\t * @param {Promise.<File>} filePromise A promise which resolves to a file instance.\n\t * @param {Function} uploadAdapterCreator The function which returns {@link module:upload/filerepository~UploadAdapter} instance.\n\t */\n    constructor(filePromise, uploadAdapterCreator) {\n        /**\n\t\t * Unique id of FileLoader instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n        this.id = uid();\n        /**\n\t\t * Additional wrapper over the initial file promise passed to this loader.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:upload/filerepository~FilePromiseWrapper}\n\t\t */\n        this._filePromiseWrapper = this._createFilePromiseWrapper(filePromise);\n        /**\n\t\t * Adapter instance associated with this file loader.\n\t\t *\n\t\t * @private\n\t\t * @member {module:upload/filerepository~UploadAdapter}\n\t\t */\n        this._adapter = uploadAdapterCreator(this);\n        /**\n\t\t * FileReader used by FileLoader.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:upload/filereader~FileReader}\n\t\t */\n        this._reader = new FileReader();\n        /**\n\t\t * Current status of FileLoader. It can be one of the following:\n\t\t *\n\t\t * * 'idle',\n\t\t * * 'reading',\n\t\t * * 'uploading',\n\t\t * * 'aborted',\n\t\t * * 'error'.\n\t\t *\n\t\t * When reading status can change in a following way:\n\t\t *\n\t\t * `idle` -> `reading` -> `idle`\n\t\t * `idle` -> `reading -> `aborted`\n\t\t * `idle` -> `reading -> `error`\n\t\t *\n\t\t * When uploading status can change in a following way:\n\t\t *\n\t\t * `idle` -> `uploading` -> `idle`\n\t\t * `idle` -> `uploading` -> `aborted`\n\t\t * `idle` -> `uploading` -> `error`\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String} #status\n\t\t */\n        this.set('status', 'idle');\n        /**\n\t\t * Number of bytes uploaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploaded\n\t\t */\n        this.set('uploaded', 0);\n        /**\n\t\t * Number of total bytes to upload.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #uploadTotal\n\t\t */\n        this.set('uploadTotal', null);\n        /**\n\t\t * Upload progress in percents.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploadedPercent\n\t\t */\n        this.bind('uploadedPercent').to(this, 'uploaded', this, 'uploadTotal', (uploaded, total) => {\n            return total ? uploaded / total * 100 : 0;\n        });\n        /**\n\t\t * Response of the upload.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Object|null} #uploadResponse\n\t\t */\n        this.set('uploadResponse', null);\n    }\n    /**\n\t * A `Promise` which resolves to a `File` instance associated with this file loader.\n\t *\n\t * @type {Promise.<File|null>}\n\t */\n    get file() {\n        if (!this._filePromiseWrapper) {\n            // Loader was destroyed, return promise which resolves to null.\n            return Promise.resolve(null);\n        } else {\n            // The `this._filePromiseWrapper.promise` is chained and not simply returned to handle a case when:\n            //\n            //\t\t* The `loader.file.then( ... )` is called by external code (returned promise is pending).\n            //\t\t* Then `loader._destroy()` is called (call is synchronous) which destroys the `loader`.\n            //\t\t* Promise returned by the first `loader.file.then( ... )` call is resolved.\n            //\n            // Returning `this._filePromiseWrapper.promise` will still resolve to a `File` instance so there\n            // is an additional check needed in the chain to see if `loader` was destroyed in the meantime.\n            return this._filePromiseWrapper.promise.then(file => this._filePromiseWrapper ? file : null);\n        }\n    }\n    /**\n\t * Returns the file data. To read its data, you need for first load the file\n\t * by using the {@link module:upload/filerepository~FileLoader#read `read()`} method.\n\t *\n\t * @type {File|undefined}\n\t */\n    get data() {\n        return this._reader.data;\n    }\n    /**\n\t * Reads file using {@link module:upload/filereader~FileReader}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-read-wrong-status` when status\n\t * is different than `idle`.\n\t *\n\t * Example usage:\n\t *\n\t *\tfileLoader.read()\n\t *\t\t.then( data => { ... } )\n\t *\t\t.catch( err => {\n\t *\t\t\tif ( err === 'aborted' ) {\n\t *\t\t\t\tconsole.log( 'Reading aborted.' );\n\t *\t\t\t} else {\n\t *\t\t\t\tconsole.log( 'Reading error.', err );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @returns {Promise.<String>} Returns promise that will be resolved with read data. Promise will be rejected if error\n\t * occurs or if read process is aborted.\n\t */\n    read() {\n        if (this.status != 'idle') {\n            throw new CKEditorError('filerepository-read-wrong-status: You cannot call read if the status is different than idle.', this);\n        }\n        this.status = 'reading';\n        return this.file.then(file => this._reader.read(file)).then(data => {\n            // Edge case: reader was aborted after file was read - double check for proper status.\n            if (this.status !== 'reading') {\n                throw this.status;\n            }\n            this.status = 'idle';\n            return data;\n        }).catch(err => {\n            if (err === 'aborted') {\n                this.status = 'aborted';\n                throw 'aborted';\n            }\n            this.status = 'error';\n            throw this._reader.error ? this._reader.error : err;\n        });\n    }\n    /**\n\t * Reads file using the provided {@link module:upload/filerepository~UploadAdapter}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-upload-wrong-status` when status\n\t * is different than `idle`.\n\t * Example usage:\n\t *\n\t *\tfileLoader.upload()\n\t *\t\t.then( data => { ... } )\n\t *\t\t.catch( e => {\n\t *\t\t\tif ( e === 'aborted' ) {\n\t *\t\t\t\tconsole.log( 'Uploading aborted.' );\n\t *\t\t\t} else {\n\t *\t\t\t\tconsole.log( 'Uploading error.', e );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @returns {Promise.<Object>} Returns promise that will be resolved with response data. Promise will be rejected if error\n\t * occurs or if read process is aborted.\n\t */\n    upload() {\n        if (this.status != 'idle') {\n            throw new CKEditorError('filerepository-upload-wrong-status: You cannot call upload if the status is different than idle.', this);\n        }\n        this.status = 'uploading';\n        return this.file.then(() => this._adapter.upload()).then(data => {\n            this.uploadResponse = data;\n            this.status = 'idle';\n            return data;\n        }).catch(err => {\n            if (this.status === 'aborted') {\n                throw 'aborted';\n            }\n            this.status = 'error';\n            throw err;\n        });\n    }\n    /**\n\t * Aborts loading process.\n\t */\n    abort() {\n        const status = this.status;\n        this.status = 'aborted';\n        if (!this._filePromiseWrapper.isFulfilled) {\n            // Edge case: file loader is aborted before read() is called\n            // so it might happen that no one handled the rejection of this promise.\n            // See https://github.com/ckeditor/ckeditor5-upload/pull/100\n            this._filePromiseWrapper.promise.catch(() => {\n            });\n            this._filePromiseWrapper.rejecter('aborted');\n        } else if (status == 'reading') {\n            this._reader.abort();\n        } else if (status == 'uploading' && this._adapter.abort) {\n            this._adapter.abort();\n        }\n        this._destroy();\n    }\n    /**\n\t * Performs cleanup.\n\t *\n\t * @private\n\t */\n    _destroy() {\n        this._filePromiseWrapper = undefined;\n        this._reader = undefined;\n        this._adapter = undefined;\n        this.uploadResponse = undefined;\n    }\n    /**\n\t * Wraps a given file promise into another promise giving additional\n\t * control (resolving, rejecting, checking if fulfilled) over it.\n\t *\n\t * @private\n\t * @param filePromise The initial file promise to be wrapped.\n\t * @returns {module:upload/filerepository~FilePromiseWrapper}\n\t */\n    _createFilePromiseWrapper(filePromise) {\n        const wrapper = {};\n        wrapper.promise = new Promise((resolve, reject) => {\n            wrapper.rejecter = reject;\n            wrapper.isFulfilled = false;\n            filePromise.then(file => {\n                wrapper.isFulfilled = true;\n                resolve(file);\n            }).catch(err => {\n                wrapper.isFulfilled = true;\n                reject(err);\n            });\n        });\n        return wrapper;\n    }\n}\nmix(FileLoader, ObservableMixin);    /**\n * Upload adapter interface used by the {@link module:upload/filerepository~FileRepository file repository}\n * to handle file upload. An upload adapter is a bridge between the editor and server that handles file uploads.\n * It should contain a logic necessary to initiate an upload process and monitor its progress.\n *\n * Learn how to develop your own upload adapter for CKEditor 5 in the\n * {@glink framework/guides/deep-dive/upload-adapter \"Custom upload adapter\" guide}.\n *\n * @interface UploadAdapter\n */\n                                     /**\n * Executes the upload process.\n * This method should return a promise that will resolve when data will be uploaded to server. Promise should be\n * resolved with an object containing information about uploaded file:\n *\n *\t\t{\n *\t\t\tdefault: 'http://server/default-size.image.png'\n *\t\t}\n *\n * Additionally, other image sizes can be provided:\n *\n *\t\t{\n *\t\t\tdefault: 'http://server/default-size.image.png',\n *\t\t\t'160': 'http://server/size-160.image.png',\n *\t\t\t'500': 'http://server/size-500.image.png',\n *\t\t\t'1000': 'http://server/size-1000.image.png',\n *\t\t\t'1052': 'http://server/default-size.image.png'\n *\t\t}\n *\n * NOTE: When returning multiple images, the widest returned one should equal the default one. It is essential to\n * correctly set `width` attribute of the image. See this discussion:\n * https://github.com/ckeditor/ckeditor5-easy-image/issues/4 for more information.\n *\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\n *\n * @method module:upload/filerepository~UploadAdapter#upload\n * @returns {Promise.<Object>} Promise that should be resolved when data is uploaded.\n */\n                                     /**\n * Aborts the upload process.\n * After aborting it should reject promise returned from {@link #upload upload()}.\n *\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\n *\n * @method module:upload/filerepository~UploadAdapter#abort\n */\n                                     /**\n * Object returned by {@link module:upload/filerepository~FileLoader#_createFilePromiseWrapper} method\n * to add more control over the initial file promise passed to {@link module:upload/filerepository~FileLoader}.\n *\n * @protected\n * @typedef {Object} module:upload/filerepository~FilePromiseWrapper\n * @property {Promise.<File>} promise Wrapper promise which can be chained for further processing.\n * @property {Function} rejecter Rejects the promise when called.\n * @property {Boolean} isFulfilled Whether original promise is already fulfilled.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/textproxy\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * TextProxy is a wrapper for substring of {@link module:engine/view/text~Text}. Instance of this class is created by\n * {@link module:engine/view/treewalker~TreeWalker} when only a part of {@link module:engine/view/text~Text} needs to be returned.\n *\n * `TextProxy` has an API similar to {@link module:engine/view/text~Text Text} and allows to do most of the common tasks performed\n * on view nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/view/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is a readonly interface.\n *\n * **Note:** `TextProxy` instances are created on the fly basing on the current state of parent {@link module:engine/view/text~Text}.\n * Because of this it is highly unrecommended to store references to `TextProxy instances because they might get\n * invalidated due to operations on Document. Also TextProxy is not a {@link module:engine/view/node~Node} so it can not be\n * inserted as a child of {@link module:engine/view/element~Element}.\n *\n * `TextProxy` instances are created by {@link module:engine/view/treewalker~TreeWalker view tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy {\n\t/**\n\t * Creates a text proxy.\n\t *\n\t * @protected\n\t * @param {module:engine/view/text~Text} textNode Text node which part is represented by this text proxy.\n\t * @param {Number} offsetInText Offset in {@link module:engine/view/textproxy~TextProxy#textNode text node}\n\t * from which the text proxy starts.\n\t * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n\t * @constructor\n\t */\n\tconstructor( textNode, offsetInText, length ) {\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/text~Text} element which TextProxy is a substring.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/text~Text} module:engine/view/textproxy~TextProxy#textNode\n\t\t */\n\t\tthis.textNode = textNode;\n\n\t\tif ( offsetInText < 0 || offsetInText > textNode.data.length ) {\n\t\t\t/**\n\t\t\t * Given offsetInText value is incorrect.\n\t\t\t *\n\t\t\t * @error view-textproxy-wrong-offsetintext\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.', this );\n\t\t}\n\n\t\tif ( length < 0 || offsetInText + length > textNode.data.length ) {\n\t\t\t/**\n\t\t\t * Given length value is incorrect.\n\t\t\t *\n\t\t\t * @error view-textproxy-wrong-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-textproxy-wrong-length: Given length value is incorrect.', this );\n\t\t}\n\n\t\t/**\n\t\t * Text data represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:engine/view/textproxy~TextProxy#data\n\t\t */\n\t\tthis.data = textNode.data.substring( offsetInText, offsetInText + length );\n\n\t\t/**\n\t\t * Offset in the `textNode` where this `TextProxy` instance starts.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} module:engine/view/textproxy~TextProxy#offsetInText\n\t\t */\n\t\tthis.offsetInText = offsetInText;\n\t}\n\n\t/**\n\t * Offset size of this node.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/view/text~Text text node}\n\t * (`true`) or the whole text node (`false`).\n\t *\n\t * This is `false` when text proxy starts at the very beginning of {@link module:engine/view/textproxy~TextProxy#textNode textNode}\n\t * ({@link module:engine/view/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n\t * text node size.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isPartial() {\n\t\treturn this.data.length !== this.textNode.data.length;\n\t}\n\n\t/**\n\t * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tget parent() {\n\t\treturn this.textNode.parent;\n\t}\n\n\t/**\n\t * Root of this text proxy, which is same as root of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.textNode.root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/document~Document View document} that owns this text proxy, or `null` if the text proxy is inside\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this.textNode.document;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\ttextProxy.is( 'textProxy' ); // -> true\n\t *\t\ttextProxy.is( 'view:textProxy' ); // -> true\n\t *\n\t *\t\ttextProxy.is( 'model:textProxy' ); // -> false\n\t *\t\ttextProxy.is( 'element' ); // -> false\n\t *\t\ttextProxy.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'textProxy' || type == 'view:textProxy';\n\t}\n\n\t/**\n\t * Returns ancestors array of this text proxy.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` {#textNode} will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to\n\t * root element, otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this.textNode : this.parent;\n\n\t\twhile ( parent !== null ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/focuscycler\n */\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\n\n/**\n * A utility class that helps cycling over focusable {@link module:ui/view~View views} in a\n * {@link module:ui/viewcollection~ViewCollection} when the focus is tracked by the\n * {@link module:utils/focustracker~FocusTracker} instance. It helps implementing keyboard\n * navigation in HTML forms, toolbars, lists and the like.\n *\n * To work properly it requires:\n * * a collection of focusable (HTML `tabindex` attribute) views that implement the `focus()` method,\n * * an associated focus tracker to determine which view is focused.\n *\n * A simple cycler setup can look like this:\n *\n *\t\tconst focusables = new ViewCollection();\n *\t\tconst focusTracker = new FocusTracker();\n *\n *\t\t// Add focusable views to the focus tracker.\n *\t\tfocusTracker.add( ... );\n *\n * Then, the cycler can be used manually:\n *\n *\t\tconst cycler = new FocusCycler( { focusables, focusTracker } );\n *\n *\t\t// Will focus the first focusable view in #focusables.\n *\t\tcycler.focusFirst();\n *\n *\t\t// Will log the next focusable item in #focusables.\n *\t\tconsole.log( cycler.next );\n *\n * Alternatively, it can work side by side with the {@link module:utils/keystrokehandler~KeystrokeHandler}:\n *\n *\t\tconst keystrokeHandler = new KeystrokeHandler();\n *\n *\t\t// Activate the keystroke handler.\n *\t\tkeystrokeHandler.listenTo( sourceOfEvents );\n *\n *\t\tconst cycler = new FocusCycler( {\n *\t\t\tfocusables, focusTracker, keystrokeHandler,\n *\t\t\tactions: {\n *\t\t\t\t// When arrowup of arrowleft is detected by the #keystrokeHandler,\n *\t\t\t\t// focusPrevious() will be called on the cycler.\n *\t\t\t\tfocusPrevious: [ 'arrowup', 'arrowleft' ],\n *\t\t\t}\n *\t\t} );\n */\nexport default class FocusCycler {\n\t/**\n\t * Creates an instance of the focus cycler utility.\n\t *\n\t * @param {Object} options Configuration options.\n\t * @param {module:utils/collection~Collection|Object} options.focusables\n\t * @param {module:utils/focustracker~FocusTracker} options.focusTracker\n\t * @param {module:utils/keystrokehandler~KeystrokeHandler} [options.keystrokeHandler]\n\t * @param {Object} [options.actions]\n\t */\n\tconstructor( options ) {\n\t\tObject.assign( this, options );\n\n\t\t/**\n\t\t * A {@link module:ui/view~View view} collection that the cycler operates on.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection} #focusables\n\t\t */\n\n\t\t/**\n\t\t * A focus tracker instance that the cycler uses to determine the current focus\n\t\t * state in {@link #focusables}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * which can respond to certain keystrokes and cycle the focus.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler} #keystrokeHandler\n\t\t */\n\n\t\t/**\n\t\t * Actions that the cycler can take when a keystroke is pressed. Requires\n\t\t * `options.keystrokeHandler` to be passed and working. When an action is\n\t\t * performed, `preventDefault` and `stopPropagation` will be called on the event\n\t\t * the keystroke fired in the DOM.\n\t\t *\n\t\t *\t\tactions: {\n\t\t *\t\t\t// Will call #focusPrevious() when arrowleft or arrowup is pressed.\n\t\t *\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\t\t *\n\t\t *\t\t\t// Will call #focusNext() when arrowdown is pressed.\n\t\t *\t\t\tfocusNext: 'arrowdown'\n\t\t *\t\t}\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object} #actions\n\t\t */\n\n\t\tif ( options.actions && options.keystrokeHandler ) {\n\t\t\tfor ( const methodName in options.actions ) {\n\t\t\t\tlet actions = options.actions[ methodName ];\n\n\t\t\t\tif ( typeof actions == 'string' ) {\n\t\t\t\t\tactions = [ actions ];\n\t\t\t\t}\n\n\t\t\t\tfor ( const keystroke of actions ) {\n\t\t\t\t\toptions.keystrokeHandler.set( keystroke, ( data, cancel ) => {\n\t\t\t\t\t\tthis[ methodName ]();\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the first focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #first\n\t */\n\tget first() {\n\t\treturn this.focusables.find( isFocusable ) || null;\n\t}\n\n\t/**\n\t * Returns the last focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #last\n\t */\n\tget last() {\n\t\treturn this.focusables.filter( isFocusable ).slice( -1 )[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the next focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #next\n\t */\n\tget next() {\n\t\treturn this._getFocusableItem( 1 );\n\t}\n\n\t/**\n\t * Returns the previous focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #previous\n\t */\n\tget previous() {\n\t\treturn this._getFocusableItem( -1 );\n\t}\n\n\t/**\n\t * An index of the view in the {@link #focusables} which is focused according\n\t * to {@link #focusTracker}. Returns `null` when there is no such view.\n\t *\n\t * @readonly\n\t * @member {Number|null} #current\n\t */\n\tget current() {\n\t\tlet index = null;\n\n\t\t// There's no focused view in the focusables.\n\t\tif ( this.focusTracker.focusedElement === null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tthis.focusables.find( ( view, viewIndex ) => {\n\t\t\tconst focused = view.element === this.focusTracker.focusedElement;\n\n\t\t\tif ( focused ) {\n\t\t\t\tindex = viewIndex;\n\t\t\t}\n\n\t\t\treturn focused;\n\t\t} );\n\n\t\treturn index;\n\t}\n\n\t/**\n\t * Focuses the {@link #first} item in {@link #focusables}.\n\t */\n\tfocusFirst() {\n\t\tthis._focus( this.first );\n\t}\n\n\t/**\n\t * Focuses the {@link #last} item in {@link #focusables}.\n\t */\n\tfocusLast() {\n\t\tthis._focus( this.last );\n\t}\n\n\t/**\n\t * Focuses the {@link #next} item in {@link #focusables}.\n\t */\n\tfocusNext() {\n\t\tthis._focus( this.next );\n\t}\n\n\t/**\n\t * Focuses the {@link #previous} item in {@link #focusables}.\n\t */\n\tfocusPrevious() {\n\t\tthis._focus( this.previous );\n\t}\n\n\t/**\n\t * Focuses the given view if it exists.\n\t *\n\t * @protected\n\t * @param {module:ui/view~View} view\n\t */\n\t_focus( view ) {\n\t\tif ( view ) {\n\t\t\tview.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the next or previous focusable view in {@link #focusables} with respect\n\t * to {@link #current}.\n\t *\n\t * @protected\n\t * @param {Number} step Either `1` for checking forward from {@link #current} or\n\t * `-1` for checking backwards.\n\t * @returns {module:ui/view~View|null}\n\t */\n\t_getFocusableItem( step ) {\n\t\t// Cache for speed.\n\t\tconst current = this.current;\n\t\tconst collectionLength = this.focusables.length;\n\n\t\tif ( !collectionLength ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Start from the beginning if no view is focused.\n\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\tif ( current === null ) {\n\t\t\treturn this[ step === 1 ? 'first' : 'last' ];\n\t\t}\n\n\t\t// Cycle in both directions.\n\t\tlet index = ( current + collectionLength + step ) % collectionLength;\n\n\t\tdo {\n\t\t\tconst view = this.focusables.get( index );\n\n\t\t\t// TODO: Check if view is visible.\n\t\t\tif ( isFocusable( view ) ) {\n\t\t\t\treturn view;\n\t\t\t}\n\n\t\t\t// Cycle in both directions.\n\t\t\tindex = ( index + collectionLength + step ) % collectionLength;\n\t\t} while ( index !== current );\n\n\t\treturn null;\n\t}\n}\n\n// Checks whether a view is focusable.\n//\n// @private\n// @param {module:ui/view~View} view A view to be checked.\n// @returns {Boolean}\nfunction isFocusable( view ) {\n\treturn !!( view.focus && global.window.getComputedStyle( view.element ).display != 'none' );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/matcher\n */\n\n/**\n * View matcher class.\n * Instance of this class can be used to find {@link module:engine/view/element~Element elements} that match given pattern.\n */\nexport default class Matcher {\n\t/**\n\t * Creates new instance of Matcher.\n\t *\n\t * @param {String|RegExp|Object} [pattern] Match patterns. See {@link module:engine/view/matcher~Matcher#add add method} for\n\t * more information.\n\t */\n\tconstructor( ...pattern ) {\n\t\t/**\n\t\t * @private\n\t\t * @type {Array<String|RegExp|Object>}\n\t\t */\n\t\tthis._patterns = [];\n\n\t\tthis.add( ...pattern );\n\t}\n\n\t/**\n\t * Adds pattern or patterns to matcher instance.\n\t *\n\t *\t\t// String.\n\t *\t\tmatcher.add( 'div' );\n\t *\n\t *\t\t// Regular expression.\n\t *\t\tmatcher.add( /^\\w/ );\n\t *\n\t *\t\t// Single class.\n\t *\t\tmatcher.add( {\n\t *\t\t\tclasses: 'foobar'\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/view/matcher~MatcherPattern} for more examples.\n\t *\n\t * Multiple patterns can be added in one call:\n\t *\n\t * \t\tmatcher.add( 'div', { classes: 'foobar' } );\n\t *\n\t * @param {Object|String|RegExp|Function} pattern Object describing pattern details. If string or regular expression\n\t * is provided it will be used to match element's name. Pattern can be also provided in a form\n\t * of a function - then this function will be called with each {@link module:engine/view/element~Element element} as a parameter.\n\t * Function's return value will be stored under `match` key of the object returned from\n\t * {@link module:engine/view/matcher~Matcher#match match} or {@link module:engine/view/matcher~Matcher#matchAll matchAll} methods.\n\t * @param {String|RegExp} [pattern.name] Name or regular expression to match element's name.\n\t * @param {Object} [pattern.attributes] Object with key-value pairs representing attributes to match. Each object key\n\t * represents attribute name. Value under that key can be either:\n\t * * `true` - then attribute is just required (can be empty),\n\t * * a string - then attribute has to be equal, or\n\t * * a regular expression - then attribute has to match the expression.\n\t * @param {String|RegExp|Array} [pattern.classes] Class name or array of class names to match. Each name can be\n\t * provided in a form of string or regular expression.\n\t * @param {Object} [pattern.styles] Object with key-value pairs representing styles to match. Each object key\n\t * represents style name. Value under that key can be either a string or a regular expression and it will be used\n\t * to match style value.\n\t */\n\tadd( ...pattern ) {\n\t\tfor ( let item of pattern ) {\n\t\t\t// String or RegExp pattern is used as element's name.\n\t\t\tif ( typeof item == 'string' || item instanceof RegExp ) {\n\t\t\t\titem = { name: item };\n\t\t\t}\n\n\t\t\t// Single class name/RegExp can be provided.\n\t\t\tif ( item.classes && ( typeof item.classes == 'string' || item.classes instanceof RegExp ) ) {\n\t\t\t\titem.classes = [ item.classes ];\n\t\t\t}\n\n\t\t\tthis._patterns.push( item );\n\t\t}\n\t}\n\n\t/**\n\t * Matches elements for currently stored patterns. Returns match information about first found\n\t * {@link module:engine/view/element~Element element}, otherwise returns `null`.\n\t *\n\t * Example of returned object:\n\t *\n\t *\t\t{\n\t *\t\t\telement: <instance of found element>,\n\t *\t\t\tpattern: <pattern used to match found element>,\n\t *\t\t\tmatch: {\n\t *\t\t\t\tname: true,\n\t *\t\t\t\tattributes: [ 'title', 'href' ],\n\t *\t\t\t\tclasses: [ 'foo' ],\n\t *\t\t\t\tstyles: [ 'color', 'position' ]\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * @see module:engine/view/matcher~Matcher#add\n\t * @see module:engine/view/matcher~Matcher#matchAll\n\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n\t * @returns {Object|null} result\n\t * @returns {module:engine/view/element~Element} result.element Matched view element.\n\t * @returns {Object|String|RegExp|Function} result.pattern Pattern that was used to find matched element.\n\t * @returns {Object} result.match Object representing matched element parts.\n\t * @returns {Boolean} [result.match.name] True if name of the element was matched.\n\t * @returns {Array} [result.match.attributes] Array with matched attribute names.\n\t * @returns {Array} [result.match.classes] Array with matched class names.\n\t * @returns {Array} [result.match.styles] Array with matched style names.\n\t */\n\tmatch( ...element ) {\n\t\tfor ( const singleElement of element ) {\n\t\t\tfor ( const pattern of this._patterns ) {\n\t\t\t\tconst match = isElementMatching( singleElement, pattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\telement: singleElement,\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\tmatch\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Matches elements for currently stored patterns. Returns array of match information with all found\n\t * {@link module:engine/view/element~Element elements}. If no element is found - returns `null`.\n\t *\n\t * @see module:engine/view/matcher~Matcher#add\n\t * @see module:engine/view/matcher~Matcher#match\n\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n\t * @returns {Array.<Object>|null} Array with match information about found elements or `null`. For more information\n\t * see {@link module:engine/view/matcher~Matcher#match match method} description.\n\t */\n\tmatchAll( ...element ) {\n\t\tconst results = [];\n\n\t\tfor ( const singleElement of element ) {\n\t\t\tfor ( const pattern of this._patterns ) {\n\t\t\t\tconst match = isElementMatching( singleElement, pattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\tresults.push( {\n\t\t\t\t\t\telement: singleElement,\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\tmatch\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn results.length > 0 ? results : null;\n\t}\n\n\t/**\n\t * Returns the name of the element to match if there is exactly one pattern added to the matcher instance\n\t * and it matches element name defined by `string` (not `RegExp`). Otherwise, returns `null`.\n\t *\n\t * @returns {String|null} Element name trying to match.\n\t */\n\tgetElementName() {\n\t\tif ( this._patterns.length !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst pattern = this._patterns[ 0 ];\n\t\tconst name = pattern.name;\n\n\t\treturn ( typeof pattern != 'function' && name && !( name instanceof RegExp ) ) ? name : null;\n\t}\n}\n\n// Returns match information if {@link module:engine/view/element~Element element} is matching provided pattern.\n// If element cannot be matched to provided pattern - returns `null`.\n//\n// @param {module:engine/view/element~Element} element\n// @param {Object|String|RegExp|Function} pattern\n// @returns {Object|null} Returns object with match information or null if element is not matching.\nfunction isElementMatching( element, pattern ) {\n\t// If pattern is provided as function - return result of that function;\n\tif ( typeof pattern == 'function' ) {\n\t\treturn pattern( element );\n\t}\n\n\tconst match = {};\n\t// Check element's name.\n\tif ( pattern.name ) {\n\t\tmatch.name = matchName( pattern.name, element.name );\n\n\t\tif ( !match.name ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Check element's attributes.\n\tif ( pattern.attributes ) {\n\t\tmatch.attributes = matchAttributes( pattern.attributes, element );\n\n\t\tif ( !match.attributes ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Check element's classes.\n\tif ( pattern.classes ) {\n\t\tmatch.classes = matchClasses( pattern.classes, element );\n\n\t\tif ( !match.classes ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Check element's styles.\n\tif ( pattern.styles ) {\n\t\tmatch.styles = matchStyles( pattern.styles, element );\n\n\t\tif ( !match.styles ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if name can be matched by provided pattern.\n//\n// @param {String|RegExp} pattern\n// @param {String} name\n// @returns {Boolean} Returns `true` if name can be matched, `false` otherwise.\nfunction matchName( pattern, name ) {\n\t// If pattern is provided as RegExp - test against this regexp.\n\tif ( pattern instanceof RegExp ) {\n\t\treturn pattern.test( name );\n\t}\n\n\treturn pattern === name;\n}\n\n// Checks if attributes of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about attributes to match. Each key of the object will be\n// used as attribute name. Value of each key can be a string or regular expression to match against attribute value.\n// @param {module:engine/view/element~Element} element Element which attributes will be tested.\n// @returns {Array|null} Returns array with matched attribute names or `null` if no attributes were matched.\nfunction matchAttributes( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const name in patterns ) {\n\t\tconst pattern = patterns[ name ];\n\n\t\tif ( element.hasAttribute( name ) ) {\n\t\t\tconst attribute = element.getAttribute( name );\n\n\t\t\tif ( pattern === true ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else if ( pattern instanceof RegExp ) {\n\t\t\t\tif ( pattern.test( attribute ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if ( attribute === pattern ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if classes of provided element can be matched against provided patterns.\n//\n// @param {Array.<String|RegExp>} patterns Array of strings or regular expressions to match against element's classes.\n// @param {module:engine/view/element~Element} element Element which classes will be tested.\n// @returns {Array|null} Returns array with matched class names or `null` if no classes were matched.\nfunction matchClasses( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const pattern of patterns ) {\n\t\tif ( pattern instanceof RegExp ) {\n\t\t\tconst classes = element.getClassNames();\n\n\t\t\tfor ( const name of classes ) {\n\t\t\t\tif ( pattern.test( name ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( match.length === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else if ( element.hasClass( pattern ) ) {\n\t\t\tmatch.push( pattern );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if styles of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about styles to match. Each key of the object will be\n// used as style name. Value of each key can be a string or regular expression to match against style value.\n// @param {module:engine/view/element~Element} element Element which styles will be tested.\n// @returns {Array|null} Returns array with matched style names or `null` if no styles were matched.\nfunction matchStyles( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const name in patterns ) {\n\t\tconst pattern = patterns[ name ];\n\n\t\tif ( element.hasStyle( name ) ) {\n\t\t\tconst style = element.getStyle( name );\n\n\t\t\tif ( pattern instanceof RegExp ) {\n\t\t\t\tif ( pattern.test( style ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if ( style === pattern ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n/**\n * An entity that is a valid pattern recognized by a matcher. `MatcherPattern` is used by {@link ~Matcher} to recognize\n * if a view element fits in a group of view elements described by the pattern.\n *\n * `MatcherPattern` can be given as a `String`, a `RegExp`, an `Object` or a `Function`.\n *\n * If `MatcherPattern` is given as a `String` or `RegExp`, it will match any view element that has a matching name:\n *\n *\t\t// Match any element with name equal to 'div'.\n *\t\tconst pattern = 'div';\n *\n *\t\t// Match any element which name starts on 'p'.\n *\t\tconst pattern = /^p/;\n *\n * If `MatcherPattern` is given as an `Object`, all the object's properties will be matched with view element properties.\n *\n *\t\t// Match view element's name.\n *\t\tconst pattern = { name: /^p/ };\n *\n *\t\t// Match view element which has matching attributes.\n *\t\tconst pattern = {\n *\t\t\tattributes: {\n *\t\t\t\ttitle: 'foobar',\t// Attribute title should equal 'foobar'.\n *\t\t\t\tfoo: /^\\w+/,\t\t// Attribute foo should match /^\\w+/ regexp.\n *\t\t\t\tbar: true\t\t\t// Attribute bar should be set (can be empty).\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Match view element which has given class.\n *\t\tconst pattern = {\n *\t\t\tclasses: 'foobar'\n *\t\t};\n *\n *\t\t// Match view element class using regular expression.\n *\t\tconst pattern = {\n *\t\t\tclasses: /foo.../\n *\t\t};\n *\n *\t\t// Multiple classes to match.\n *\t\tconst pattern = {\n *\t\t\tclasses: [ 'baz', 'bar', /foo.../ ]\n *\t\t};\n *\n *\t\t// Match view element which has given styles.\n *\t\tconst pattern = {\n *\t\t\tstyles: {\n *\t\t\t\tposition: 'absolute',\n *\t\t\t\tcolor: /^\\w*blue$/\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Pattern with multiple properties.\n *\t\tconst pattern = {\n *\t\t\tname: 'span',\n *\t\t\tstyles: {\n *\t\t\t\t'font-weight': 'bold'\n *\t\t\t},\n *\t\t\tclasses: 'highlighted'\n *\t\t};\n *\n * If `MatcherPattern` is given as a `Function`, the function takes a view element as a first and only parameter and\n * the function should decide whether that element matches. If so, it should return what part of the view element has been matched.\n * Otherwise, the function should return `null`. The returned result will be included in `match` property of the object\n * returned by {@link ~Matcher#match} call.\n *\n *\t\t// Match an empty <div> element.\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'div' && element.childCount > 0 ) {\n *\t\t\t\t// Return which part of the element was matched.\n *\t\t\t\treturn { name: true };\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n *\t\t// Match a <p> element with big font (\"heading-like\" element).\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'p' ) {\n *\t\t\t\tconst fontSize = element.getStyle( 'font-size' );\n *\t\t\t\tconst size = fontSize.match( /(\\d+)/px );\n *\n *\t\t\t\tif ( size && Number( size[ 1 ] ) > 26 ) {\n *\t\t\t\t\treturn { name: true, attribute: [ 'font-size' ] };\n *\t\t\t\t}\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n * `MatcherPattern` is defined in a way that it is a superset of {@link module:engine/view/elementdefinition~ElementDefinition},\n * that is, every `ElementDefinition` also can be used as a `MatcherPattern`.\n *\n * @typedef {String|RegExp|Object|Function} module:engine/view/matcher~MatcherPattern\n *\n * @property {String|RegExp} [name] View element name to match.\n * @property {String|RegExp|Array.<String|RegExp>} [classes] View element's class name(s) to match.\n * @property {Object} [styles] Object with key-value pairs representing styles to match.\n * Each object key represents style name. Value can be given as `String` or `RegExp`.\n * @property {Object} [attributes] Object with key-value pairs representing attributes to match.\n * Each object key represents attribute name. Value can be given as `String` or `RegExp`.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/viewcollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\n\n/**\n * Collects {@link module:ui/view~View} instances.\n *\n *\t\tconst parentView = new ParentView( locale );\n *\t\tconst collection = new ViewCollection( locale );\n *\n *\t\tcollection.setParent( parentView.element );\n *\n *\t\tconst viewA = new ChildView( locale );\n *\t\tconst viewB = new ChildView( locale );\n *\n * View collection renders and manages view {@link module:ui/view~View#element elements}:\n *\n *\t\tcollection.add( viewA );\n *\t\tcollection.add( viewB );\n *\n *\t\tconsole.log( parentView.element.firsChild ); // -> viewA.element\n *\t\tconsole.log( parentView.element.lastChild ); // -> viewB.element\n *\n * It {@link module:ui/viewcollection~ViewCollection#delegate propagates} DOM events too:\n *\n *\t\t// Delegate #click and #keydown events from viewA and viewB to the parentView.\n *\t\tcollection.delegate( 'click' ).to( parentView );\n *\n *\t\tparentView.on( 'click', ( evt ) => {\n *\t\t\tconsole.log( `${ evt.source } has been clicked.` );\n *\t\t} );\n *\n *\t\t// This event will be delegated to the parentView.\n *\t\tviewB.fire( 'click' );\n *\n * **Note**: A view collection can be used directly in the {@link module:ui/template~TemplateDefinition definition}\n * of a {@link module:ui/template~Template template}.\n *\n * @extends module:utils/collection~Collection\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class ViewCollection extends Collection {\n\t/**\n\t * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The {@link module:core/editor/editor~Editor editor's locale} instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( {\n\t\t\t// An #id Number attribute should be legal and not break the `ViewCollection` instance.\n\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/93\n\t\t\tidProperty: 'viewUid'\n\t\t} );\n\n\t\t// Handle {@link module:ui/view~View#element} in DOM when a new view is added to the collection.\n\t\tthis.on( 'add', ( evt, view, index ) => {\n\t\t\tif ( !view.isRendered ) {\n\t\t\t\tview.render();\n\t\t\t}\n\n\t\t\tif ( view.element && this._parentElement ) {\n\t\t\t\tthis._parentElement.insertBefore( view.element, this._parentElement.children[ index ] );\n\t\t\t}\n\t\t} );\n\n\t\t// Handle {@link module:ui/view~View#element} in DOM when a view is removed from the collection.\n\t\tthis.on( 'remove', ( evt, view ) => {\n\t\t\tif ( view.element && this._parentElement ) {\n\t\t\t\tview.element.remove();\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The {@link module:core/editor/editor~Editor#locale editor's locale} instance.\n\t\t * See the view {@link module:ui/view~View#locale locale} property.\n\t\t *\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * A parent element within which child views are rendered and managed in DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis._parentElement = null;\n\t}\n\n\t/**\n\t * Destroys the view collection along with child views.\n\t * See the view {@link module:ui/view~View#destroy} method.\n\t */\n\tdestroy() {\n\t\tthis.map( view => view.destroy() );\n\t}\n\n\t/**\n\t * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and\n\t * {@link #remove removing} views in the collection synchronizes their\n\t * {@link module:ui/view~View#element elements} in the parent element.\n\t *\n\t * @param {HTMLElement} element A new parent element.\n\t */\n\tsetParent( elementOrDocFragment ) {\n\t\tthis._parentElement = elementOrDocFragment;\n\t}\n\n\t/**\n\t * Delegates selected events coming from within views in the collection to any\n\t * {@link module:utils/emittermixin~Emitter}.\n\t *\n\t * For the following views and collection:\n\t *\n\t *\t\tconst viewA = new View();\n\t *\t\tconst viewB = new View();\n\t *\t\tconst viewC = new View();\n\t *\n\t *\t\tconst views = parentView.createCollection();\n\t *\n\t *\t\tviews.delegate( 'eventX' ).to( viewB );\n\t *\t\tviews.delegate( 'eventX', 'eventY' ).to( viewC );\n\t *\n\t *\t\tviews.add( viewA );\n\t *\n\t * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:\n\t *\n\t *\t\tviewA.fire( 'eventX', customData );\n\t *\n\t * and `eventY` is delegated (fired by) `viewC` along with `customData`:\n\t *\n\t *\t\tviewA.fire( 'eventY', customData );\n\t *\n\t * See {@link module:utils/emittermixin~Emitter#delegate}.\n\t *\n\t * @param {...String} events {@link module:ui/view~View} event names to be delegated to another\n\t * {@link module:utils/emittermixin~Emitter}.\n\t * @returns {Object}\n\t * @returns {Function} return.to A function which accepts the destination of\n\t * {@link module:utils/emittermixin~Emitter#delegate delegated} events.\n\t */\n\tdelegate( ...events ) {\n\t\tif ( !events.length || !isStringArray( events ) ) {\n\t\t\t/**\n\t\t\t * All event names must be strings.\n\t\t\t *\n\t\t\t * @error ui-viewcollection-delegate-wrong-events\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-viewcollection-delegate-wrong-events: All event names must be strings.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Selects destination for {@link module:utils/emittermixin~Emitter#delegate} events.\n\t\t\t *\n\t\t\t * @memberOf module:ui/viewcollection~ViewCollection#delegate\n\t\t\t * @function module:ui/viewcollection~ViewCollection#delegate.to\n\t\t\t * @param {module:utils/emittermixin~Emitter} dest An `Emitter` instance which is\n\t\t\t * the destination for delegated events.\n\t\t\t */\n\t\t\tto: dest => {\n\t\t\t\t// Activate delegating on existing views in this collection.\n\t\t\t\tfor ( const view of this ) {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.delegate( evtName ).to( dest );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Activate delegating on future views in this collection.\n\t\t\t\tthis.on( 'add', ( evt, view ) => {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.delegate( evtName ).to( dest );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\t// Deactivate delegating when view is removed from this collection.\n\t\t\t\tthis.on( 'remove', ( evt, view ) => {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.stopDelegating( evtName, dest );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Removes a child view from the collection. If the {@link #setParent parent element} of the\n\t * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed\n\t * in DOM, reflecting the order of the collection.\n\t *\n\t * See the {@link #add} method.\n\t *\n\t * @method #remove\n\t * @param {module:ui/view~View|Number|String} subject The view to remove, its id or index in the collection.\n\t * @returns {Object} The removed view.\n\t */\n}\n\n// Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\nfunction isStringArray( arr ) {\n\treturn arr.every( a => typeof a == 'string' );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/tomap\n */\n\nimport objectToMap from './objecttomap';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * Transforms object or iterable to map. Iterable needs to be in the format acceptable by the `Map` constructor.\n *\n *\t\tmap = toMap( { 'foo': 1, 'bar': 2 } );\n *\t\tmap = toMap( [ [ 'foo', 1 ], [ 'bar', 2 ] ] );\n *\t\tmap = toMap( anotherMap );\n *\n * @param {Object|Iterable} data Object or iterable to transform.\n * @returns {Map} Map created from data.\n */\nexport default function toMap( data ) {\n\tif ( isPlainObject( data ) ) {\n\t\treturn objectToMap( data );\n\t} else {\n\t\treturn new Map( data );\n\t}\n}\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/template\n */\n\n/* global document */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport View from './view';\nimport ViewCollection from './viewcollection';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport { isObject, cloneDeepWith } from 'lodash-es';\n\nconst xhtmlNs = 'http://www.w3.org/1999/xhtml';\n\n/**\n * A basic Template class. It renders a DOM HTML element or text from a\n * {@link module:ui/template~TemplateDefinition definition} and supports element attributes, children,\n * bindings to {@link module:utils/observablemixin~Observable observables} and DOM event propagation.\n *\n * A simple template can look like this:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\tclass: 'foo',\n *\t\t\t\tstyle: {\n *\t\t\t\t\tbackgroundColor: 'yellow'\n *\t\t\t\t}\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t'A paragraph.'\n *\t\t\t]\n *\t\t} ).render();\n *\n * and it will render the following HTML element:\n *\n *\t\t<p class=\"foo\" style=\"background-color: yellow;\">A paragraph.</p>\n *\n * Additionally, the `observable` will always fire `clicked` upon clicking `<p>` in the DOM.\n *\n * See {@link module:ui/template~TemplateDefinition} to know more about templates and complex\n * template definitions.\n *\n* @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Template {\n\t/**\n\t * Creates an instance of the {@link ~Template} class.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} def The definition of the template.\n\t */\n\tconstructor( def ) {\n\t\tObject.assign( this, normalize( clone( def ) ) );\n\n\t\t/**\n\t\t * Indicates whether this particular Template instance has been\n\t\t * {@link #render rendered}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isRendered = false;\n\n\t\t/**\n\t\t * The tag (`tagName`) of this template, e.g. `div`. It also indicates that the template\n\t\t * renders to an HTML element.\n\t\t *\n\t\t * @member {String} #tag\n\t\t */\n\n\t\t/**\n\t\t * The text of the template. It also indicates that the template renders to a DOM text node.\n\t\t *\n\t\t * @member {Array.<String|module:ui/template~TemplateValueSchema>} #text\n\t\t */\n\n\t\t/**\n\t\t * The attributes of the template, e.g. `{ id: [ 'ck-id' ] }`, corresponding with\n\t\t * the attributes of an HTML element.\n\t\t *\n\t\t * **Note**: This property only makes sense when {@link #tag} is defined.\n\t\t *\n\t\t * @member {Object} #attributes\n\t\t */\n\n\t\t/**\n\t\t * The children of the template. They can be either:\n\t\t * * independent instances of {@link ~Template} (sub–templates),\n\t\t * * native DOM Nodes.\n\t\t *\n\t\t * **Note**: This property only makes sense when {@link #tag} is defined.\n\t\t *\n\t\t * @member {Array.<module:ui/template~Template|Node>} #children\n\t\t */\n\n\t\t/**\n\t\t * The DOM event listeners of the template.\n\t\t *\n\t\t * @member {Object} #eventListeners\n\t\t */\n\n\t\t/**\n\t\t * The data used by the {@link #revert} method to restore a node to its original state.\n\t\t *\n\t\t * See: {@link #apply}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/template~RenderData}\n\t\t */\n\t\tthis._revertData = null;\n\t}\n\n\t/**\n\t * Renders a DOM Node (an HTML element or text) out of the template.\n\t *\n\t *\t\tconst domNode = new Template( { ... } ).render();\n\t *\n\t * See: {@link #apply}.\n\t *\n\t * @returns {HTMLElement|Text}\n\t */\n\trender() {\n\t\tconst node = this._renderNode( {\n\t\t\tintoFragment: true\n\t\t} );\n\n\t\tthis._isRendered = true;\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Applies the template to an existing DOM Node, either HTML element or text.\n\t *\n\t * **Note:** No new DOM nodes will be created. Applying extends:\n\t *\n\t * {@link module:ui/template~TemplateDefinition attributes},\n\t * {@link module:ui/template~TemplateDefinition event listeners}, and\n\t * `textContent` of {@link module:ui/template~TemplateDefinition children} only.\n\t *\n\t * **Note:** Existing `class` and `style` attributes are extended when a template\n\t * is applied to an HTML element, while other attributes and `textContent` are overridden.\n\t *\n\t * **Note:** The process of applying a template can be easily reverted using the\n\t * {@link module:ui/template~Template#revert} method.\n\t *\n\t *\t\tconst element = document.createElement( 'div' );\n\t *\t\tconst observable = new Model( { divClass: 'my-div' } );\n\t *\t\tconst emitter = Object.create( EmitterMixin );\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tid: 'first-div',\n\t *\t\t\t\tclass: bind.to( 'divClass' )\n\t *\t\t\t},\n\t *\t\t\ton: {\n\t *\t\t\t\tclick: bind( 'elementClicked' ) // Will be fired by the observable.\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t'Div text.'\n\t *\t\t\t]\n\t *\t\t} ).apply( element );\n\t *\n\t *\t\tconsole.log( element.outerHTML ); // -> '<div id=\"first-div\" class=\"my-div\"></div>'\n\t *\n\t * @see module:ui/template~Template#render\n\t * @see module:ui/template~Template#revert\n\t * @param {Node} node Root node for the template to apply.\n\t */\n\tapply( node ) {\n\t\tthis._revertData = getEmptyRevertData();\n\n\t\tthis._renderNode( {\n\t\t\tnode,\n\t\t\tisApplying: true,\n\t\t\trevertData: this._revertData\n\t\t} );\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.\n\t *\n\t * @param {Node} node The root node for the template to revert. In most of the cases, it is the\n\t * same node used by {@link module:ui/template~Template#apply}.\n\t */\n\trevert( node ) {\n\t\tif ( !this._revertData ) {\n\t\t\t/**\n\t\t\t * Attempting to revert a template which has not been applied yet.\n\t\t\t *\n\t\t\t * @error ui-template-revert-not-applied\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-revert-not-applied: Attempting to revert a template which has not been applied yet.',\n\t\t\t\t[ this, node ]\n\t\t\t);\n\t\t}\n\n\t\tthis._revertTemplateFromNode( node, this._revertData );\n\t}\n\n\t/**\n\t * Returns an iterator which traverses the template in search of {@link module:ui/view~View}\n\t * instances and returns them one by one.\n\t *\n\t *\t\tconst viewFoo = new View();\n\t *\t\tconst viewBar = new View();\n\t *\t\tconst viewBaz = new View();\n\t *\t\tconst template = new Template( {\n\t *\t\t\ttag: 'div',\n\t *\t\t\tchildren: [\n\t *\t\t\t\tviewFoo,\n\t *\t\t\t\t{\n\t *\t\t\t\t\ttag: 'div',\n\t *\t\t\t\t\tchildren: [\n\t *\t\t\t\t\t\tviewBar\n\t *\t\t\t\t\t]\n\t *\t\t\t\t},\n\t *\t\t\t\tviewBaz\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Logs: viewFoo, viewBar, viewBaz\n\t *\t\tfor ( const view of template.getViews() ) {\n\t *\t\t\tconsole.log( view );\n\t *\t\t}\n\t *\n\t * @returns {Iterable.<module:ui/view~View>}\n\t */\n\t* getViews() {\n\t\tfunction* search( def ) {\n\t\t\tif ( def.children ) {\n\t\t\t\tfor ( const child of def.children ) {\n\t\t\t\t\tif ( isView( child ) ) {\n\t\t\t\t\t\tyield child;\n\t\t\t\t\t} else if ( isTemplate( child ) ) {\n\t\t\t\t\t\tyield* search( child );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tyield* search( this );\n\t}\n\n\t/**\n\t * An entry point to the interface which binds DOM nodes to\n\t * {@link module:utils/observablemixin~Observable observables}.\n\t * There are two types of bindings:\n\t *\n\t * * HTML element attributes or text `textContent` synchronized with attributes of an\n\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}\n\t * and {@link module:ui/template~BindChain#if}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\t// Binds the element \"class\" attribute to observable#classAttribute.\n\t *\t\t\t\tclass: bind.to( 'classAttribute' )\n\t *\t\t\t}\n\t *\t\t} ).render();\n\t *\n\t * * DOM events fired on HTML element propagated through\n\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\ton: {\n\t *\t\t\t\t// Will be fired by the observable.\n\t *\t\t\t\tclick: bind( 'elementClicked' )\n\t *\t\t\t}\n\t *\t\t} ).render();\n\t *\n\t * Also see {@link module:ui/view~View#bindTemplate}.\n\t *\n\t * @param {module:utils/observablemixin~Observable} observable An observable which provides boundable attributes.\n\t * @param {module:utils/emittermixin~Emitter} emitter An emitter that listens to observable attribute\n\t * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.\n\t * @returns {module:ui/template~BindChain}\n\t */\n\tstatic bind( observable, emitter ) {\n\t\treturn {\n\t\t\tto( eventNameOrFunctionOrAttribute, callback ) {\n\t\t\t\treturn new TemplateToBinding( {\n\t\t\t\t\teventNameOrFunction: eventNameOrFunctionOrAttribute,\n\t\t\t\t\tattribute: eventNameOrFunctionOrAttribute,\n\t\t\t\t\tobservable, emitter, callback\n\t\t\t\t} );\n\t\t\t},\n\n\t\t\tif( attribute, valueIfTrue, callback ) {\n\t\t\t\treturn new TemplateIfBinding( {\n\t\t\t\t\tobservable, emitter, attribute, valueIfTrue, callback\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Extends an existing {@link module:ui/template~Template} instance with some additional content\n\t * from another {@link module:ui/template~TemplateDefinition}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tconst template = new Template( {\n\t *\t\t\ttag: 'p',\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'a',\n\t *\t\t\t\tdata-x: bind.to( 'foo' )\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t{\n\t *\t\t\t\t\ttag: 'span',\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\tclass: 'b'\n\t *\t\t\t\t\t},\n\t *\t\t\t\t\tchildren: [\n\t *\t\t\t\t\t\t'Span'\n\t *\t\t\t\t\t]\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t } );\n\t *\n\t *\t\t// Instance-level extension.\n\t *\t\tTemplate.extend( template, {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'b',\n\t *\t\t\t\tdata-x: bind.to( 'bar' )\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t{\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\tclass: 'c'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Child extension.\n\t *\t\tTemplate.extend( template.children[ 0 ], {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'd'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * the `outerHTML` of `template.render()` is:\n\t *\n\t *\t\t<p class=\"a b\" data-x=\"{ observable.foo } { observable.bar }\">\n\t *\t\t\t<span class=\"b c d\">Span</span>\n\t *\t\t</p>\n\t *\n\t * @param {module:ui/template~Template} template An existing template instance to be extended.\n\t * @param {module:ui/template~TemplateDefinition} def Additional definition to be applied to a template.\n\t */\n\tstatic extend( template, def ) {\n\t\tif ( template._isRendered ) {\n\t\t\t/**\n\t\t\t * Extending a template after rendering may not work as expected. To make sure\n\t\t\t * the {@link module:ui/template~Template.extend extending} works for an element,\n\t\t\t * make sure it happens before {@link #render} is called.\n\t\t\t *\n\t\t\t * @error template-extend-render\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'template-extend-render: Attempting to extend a template which has already been rendered.',\n\t\t\t\t[ this, template ]\n\t\t\t);\n\t\t}\n\n\t\textendTemplate( template, normalize( clone( def ) ) );\n\t}\n\n\t/**\n\t * Renders a DOM Node (either an HTML element or text) out of the template.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderNode( data ) {\n\t\tlet isInvalid;\n\n\t\tif ( data.node ) {\n\t\t\t// When applying, a definition cannot have \"tag\" and \"text\" at the same time.\n\t\t\tisInvalid = this.tag && this.text;\n\t\t} else {\n\t\t\t// When rendering, a definition must have either \"tag\" or \"text\": XOR( this.tag, this.text ).\n\t\t\tisInvalid = this.tag ? this.text : !this.text;\n\t\t}\n\n\t\tif ( isInvalid ) {\n\t\t\t/**\n\t\t\t * Node definition cannot have the \"tag\" and \"text\" properties at the same time.\n\t\t\t * Node definition must have either \"tag\" or \"text\" when rendering a new Node.\n\t\t\t *\n\t\t\t * @error ui-template-wrong-syntax\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-wrong-syntax: Node definition must have either \"tag\" or \"text\" when rendering a new Node.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tif ( this.text ) {\n\t\t\treturn this._renderText( data );\n\t\t} else {\n\t\t\treturn this._renderElement( data );\n\t\t}\n\t}\n\n\t/**\n\t * Renders an HTML element out of the template.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderElement( data ) {\n\t\tlet node = data.node;\n\n\t\tif ( !node ) {\n\t\t\tnode = data.node = document.createElementNS( this.ns || xhtmlNs, this.tag );\n\t\t}\n\n\t\tthis._renderAttributes( data );\n\t\tthis._renderElementChildren( data );\n\t\tthis._setUpListeners( data );\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Renders a text node out of {@link module:ui/template~Template#text}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderText( data ) {\n\t\tlet node = data.node;\n\n\t\t// Save the original textContent to revert it in #revert().\n\t\tif ( node ) {\n\t\t\tdata.revertData.text = node.textContent;\n\t\t} else {\n\t\t\tnode = data.node = document.createTextNode( '' );\n\t\t}\n\n\t\t// Check if this Text Node is bound to Observable. Cases:\n\t\t//\n\t\t//\t\ttext: [ Template.bind( ... ).to( ... ) ]\n\t\t//\n\t\t//\t\ttext: [\n\t\t//\t\t\t'foo',\n\t\t//\t\t\tTemplate.bind( ... ).to( ... ),\n\t\t//\t\t\t...\n\t\t//\t\t]\n\t\t//\n\t\tif ( hasTemplateBinding( this.text ) ) {\n\t\t\tthis._bindToObservable( {\n\t\t\t\tschema: this.text,\n\t\t\t\tupdater: getTextUpdater( node ),\n\t\t\t\tdata\n\t\t\t} );\n\t\t}\n\t\t// Simply set text. Cases:\n\t\t//\n\t\t//\t\ttext: [ 'all', 'are', 'static' ]\n\t\t//\n\t\t//\t\ttext: [ 'foo' ]\n\t\t//\n\t\telse {\n\t\t\tnode.textContent = this.text.join( '' );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderAttributes( data ) {\n\t\tlet attrName, attrValue, domAttrValue, attrNs;\n\n\t\tif ( !this.attributes ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = data.node;\n\t\tconst revertData = data.revertData;\n\n\t\tfor ( attrName in this.attributes ) {\n\t\t\t// Current attribute value in DOM.\n\t\t\tdomAttrValue = node.getAttribute( attrName );\n\n\t\t\t// The value to be set.\n\t\t\tattrValue = this.attributes[ attrName ];\n\n\t\t\t// Save revert data.\n\t\t\tif ( revertData ) {\n\t\t\t\trevertData.attributes[ attrName ] = domAttrValue;\n\t\t\t}\n\n\t\t\t// Detect custom namespace:\n\t\t\t//\n\t\t\t//\t\tclass: {\n\t\t\t//\t\t\tns: 'abc',\n\t\t\t//\t\t\tvalue: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tattrNs = ( isObject( attrValue[ 0 ] ) && attrValue[ 0 ].ns ) ? attrValue[ 0 ].ns : null;\n\n\t\t\t// Activate binding if one is found. Cases:\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\tTemplate.bind( ... ).to( ... )\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t'bar',\n\t\t\t//\t\t\tTemplate.bind( ... ).to( ... ),\n\t\t\t//\t\t\t'baz'\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\t//\t\tclass: {\n\t\t\t//\t\t\tns: 'abc',\n\t\t\t//\t\t\tvalue: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tif ( hasTemplateBinding( attrValue ) ) {\n\t\t\t\t// Normalize attributes with additional data like namespace:\n\t\t\t\t//\n\t\t\t\t//\t\tclass: {\n\t\t\t\t//\t\t\tns: 'abc',\n\t\t\t\t//\t\t\tvalue: [ ... ]\n\t\t\t\t//\t\t}\n\t\t\t\t//\n\t\t\t\tconst valueToBind = attrNs ? attrValue[ 0 ].value : attrValue;\n\n\t\t\t\t// Extend the original value of attributes like \"style\" and \"class\",\n\t\t\t\t// don't override them.\n\t\t\t\tif ( revertData && shouldExtend( attrName ) ) {\n\t\t\t\t\tvalueToBind.unshift( domAttrValue );\n\t\t\t\t}\n\n\t\t\t\tthis._bindToObservable( {\n\t\t\t\t\tschema: valueToBind,\n\t\t\t\t\tupdater: getAttributeUpdater( node, attrName, attrNs ),\n\t\t\t\t\tdata\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Style attribute could be an Object so it needs to be parsed in a specific way.\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\twidth: '100px',\n\t\t\t//\t\t\theight: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\telse if ( attrName == 'style' && typeof attrValue[ 0 ] !== 'string' ) {\n\t\t\t\tthis._renderStyleAttribute( attrValue[ 0 ], data );\n\t\t\t}\n\n\t\t\t// Otherwise simply set the static attribute:\n\t\t\t//\n\t\t\t//\t\tclass: [ 'foo' ]\n\t\t\t//\n\t\t\t//\t\tclass: [ 'all', 'are', 'static' ]\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t{\n\t\t\t//\t\t\t\tns: 'abc',\n\t\t\t//\t\t\t\tvalue: [ 'foo' ]\n\t\t\t//\t\t\t}\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\telse {\n\t\t\t\t// Extend the original value of attributes like \"style\" and \"class\",\n\t\t\t\t// don't override them.\n\t\t\t\tif ( revertData && domAttrValue && shouldExtend( attrName ) ) {\n\t\t\t\t\tattrValue.unshift( domAttrValue );\n\t\t\t\t}\n\n\t\t\t\tattrValue = attrValue\n\t\t\t\t\t// Retrieve \"values\" from:\n\t\t\t\t\t//\n\t\t\t\t\t//\t\tclass: [\n\t\t\t\t\t//\t\t\t{\n\t\t\t\t\t//\t\t\t\tns: 'abc',\n\t\t\t\t\t//\t\t\t\tvalue: [ ... ]\n\t\t\t\t\t//\t\t\t}\n\t\t\t\t\t//\t\t]\n\t\t\t\t\t//\n\t\t\t\t\t.map( val => val ? ( val.value || val ) : val )\n\t\t\t\t\t// Flatten the array.\n\t\t\t\t\t.reduce( ( prev, next ) => prev.concat( next ), [] )\n\t\t\t\t\t// Convert into string.\n\t\t\t\t\t.reduce( arrayValueReducer, '' );\n\n\t\t\t\tif ( !isFalsy( attrValue ) ) {\n\t\t\t\t\tnode.setAttributeNS( attrNs, attrName, attrValue );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Renders the `style` attribute of an HTML element based on\n\t * {@link module:ui/template~Template#attributes}.\n\t *\n\t * A style attribute is an {Object} with static values:\n\t *\n\t *\t\tattributes: {\n\t *\t\t\tstyle: {\n\t *\t\t\t\tcolor: 'red'\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * or values bound to {@link module:ui/model~Model} properties:\n\t *\n\t *\t\tattributes: {\n\t *\t\t\tstyle: {\n\t *\t\t\t\tcolor: bind.to( ... )\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be\n\t * needed.\n\t *\n\t * @private\n\t * @param {Object} styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderStyleAttribute( styles, data ) {\n\t\tconst node = data.node;\n\n\t\tfor ( const styleName in styles ) {\n\t\t\tconst styleValue = styles[ styleName ];\n\n\t\t\t// Cases:\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\tcolor: bind.to( 'attribute' )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tif ( hasTemplateBinding( styleValue ) ) {\n\t\t\t\tthis._bindToObservable( {\n\t\t\t\t\tschema: [ styleValue ],\n\t\t\t\t\tupdater: getStyleUpdater( node, styleName ),\n\t\t\t\t\tdata\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Cases:\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\tcolor: 'red'\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\telse {\n\t\t\t\tnode.style[ styleName ] = styleValue;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderElementChildren( data ) {\n\t\tconst node = data.node;\n\t\tconst container = data.intoFragment ? document.createDocumentFragment() : node;\n\t\tconst isApplying = data.isApplying;\n\t\tlet childIndex = 0;\n\n\t\tfor ( const child of this.children ) {\n\t\t\tif ( isViewCollection( child ) ) {\n\t\t\t\tif ( !isApplying ) {\n\t\t\t\t\tchild.setParent( node );\n\n\t\t\t\t\t// Note: ViewCollection renders its children.\n\t\t\t\t\tfor ( const view of child ) {\n\t\t\t\t\t\tcontainer.appendChild( view.element );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( isView( child ) ) {\n\t\t\t\tif ( !isApplying ) {\n\t\t\t\t\tif ( !child.isRendered ) {\n\t\t\t\t\t\tchild.render();\n\t\t\t\t\t}\n\n\t\t\t\t\tcontainer.appendChild( child.element );\n\t\t\t\t}\n\t\t\t} else if ( isNode( child ) ) {\n\t\t\t\tcontainer.appendChild( child );\n\t\t\t} else {\n\t\t\t\tif ( isApplying ) {\n\t\t\t\t\tconst revertData = data.revertData;\n\t\t\t\t\tconst childRevertData = getEmptyRevertData();\n\n\t\t\t\t\trevertData.children.push( childRevertData );\n\n\t\t\t\t\tchild._renderNode( {\n\t\t\t\t\t\tnode: container.childNodes[ childIndex++ ],\n\t\t\t\t\t\tisApplying: true,\n\t\t\t\t\t\trevertData: childRevertData\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tcontainer.appendChild( child.render() );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( data.intoFragment ) {\n\t\t\tnode.appendChild( container );\n\t\t}\n\t}\n\n\t/**\n\t * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}\n\t * on an HTML element.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_setUpListeners( data ) {\n\t\tif ( !this.eventListeners ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const key in this.eventListeners ) {\n\t\t\tconst revertBindings = this.eventListeners[ key ].map( schemaItem => {\n\t\t\t\tconst [ domEvtName, domSelector ] = key.split( '@' );\n\n\t\t\t\treturn schemaItem.activateDomEventListener( domEvtName, domSelector, data );\n\t\t\t} );\n\n\t\t\tif ( data.revertData ) {\n\t\t\t\tdata.revertData.bindings.push( revertBindings );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}\n\t * activates the binding and sets its initial value.\n\t *\n\t * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or\n\t * text node `textContent`.\n\t *\n\t * @protected\n\t * @param {Object} options Binding options.\n\t * @param {module:ui/template~TemplateValueSchema} options.schema\n\t * @param {Function} options.updater A function which updates the DOM (like attribute or text).\n\t * @param {module:ui/template~RenderData} options.data Rendering data.\n\t */\n\t_bindToObservable( { schema, updater, data } ) {\n\t\tconst revertData = data.revertData;\n\n\t\t// Set initial values.\n\t\tsyncValueSchemaValue( schema, updater, data );\n\n\t\tconst revertBindings = schema\n\t\t\t// Filter \"falsy\" (false, undefined, null, '') value schema components out.\n\t\t\t.filter( item => !isFalsy( item ) )\n\t\t\t// Filter inactive bindings from schema, like static strings ('foo'), numbers (42), etc.\n\t\t\t.filter( item => item.observable )\n\t\t\t// Once only the actual binding are left, let the emitter listen to observable change:attribute event.\n\t\t\t// TODO: Reduce the number of listeners attached as many bindings may listen\n\t\t\t// to the same observable attribute.\n\t\t\t.map( templateBinding => templateBinding.activateAttributeListener( schema, updater, data ) );\n\n\t\tif ( revertData ) {\n\t\t\trevertData.bindings.push( revertBindings );\n\t\t}\n\t}\n\n\t/**\n\t * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to\n\t * return it to the original state.\n\t *\n\t * @protected\n\t * @param {HTMLElement|Text} node A node to be reverted.\n\t * @param {Object} revertData An object that stores information about what changes have been made by\n\t * {@link #apply} to the node. See {@link module:ui/template~RenderData#revertData} for more information.\n\t */\n\t_revertTemplateFromNode( node, revertData ) {\n\t\tfor ( const binding of revertData.bindings ) {\n\t\t\t// Each binding may consist of several observable+observable#attribute.\n\t\t\t// like the following has 2:\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t'x',\n\t\t\t//\t\t\tbind.to( 'foo' ),\n\t\t\t//\t\t\t'y',\n\t\t\t//\t\t\tbind.to( 'bar' )\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\tfor ( const revertBinding of binding ) {\n\t\t\t\trevertBinding();\n\t\t\t}\n\t\t}\n\n\t\tif ( revertData.text ) {\n\t\t\tnode.textContent = revertData.text;\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const attrName in revertData.attributes ) {\n\t\t\tconst attrValue = revertData.attributes[ attrName ];\n\n\t\t\t// When the attribute has **not** been set before #apply().\n\t\t\tif ( attrValue === null ) {\n\t\t\t\tnode.removeAttribute( attrName );\n\t\t\t} else {\n\t\t\t\tnode.setAttribute( attrName, attrValue );\n\t\t\t}\n\t\t}\n\n\t\tfor ( let i = 0; i < revertData.children.length; ++i ) {\n\t\t\tthis._revertTemplateFromNode( node.childNodes[ i ], revertData.children[ i ] );\n\t\t}\n\t}\n}\n\nmix( Template, EmitterMixin );\n\n/**\n * Describes a binding created by the {@link module:ui/template~Template.bind} interface.\n *\n * @protected\n */\nexport class TemplateBinding {\n\t/**\n\t * Creates an instance of the {@link module:ui/template~TemplateBinding} class.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} def The definition of the binding.\n\t */\n\tconstructor( def ) {\n\t\tObject.assign( this, def );\n\n\t\t/**\n\t\t * An observable instance of the binding. It either:\n\t\t *\n\t\t * * provides the attribute with the value,\n\t\t * * or passes the event when a corresponding DOM event is fired.\n\t\t *\n\t\t * @member {module:utils/observablemixin~ObservableMixin} module:ui/template~TemplateBinding#observable\n\t\t */\n\n\t\t/**\n\t\t * An {@link module:utils/emittermixin~Emitter} used by the binding to:\n\t\t *\n\t\t * * listen to the attribute change in the {@link module:ui/template~TemplateBinding#observable},\n\t\t * * or listen to the event in the DOM.\n\t\t *\n\t\t * @member {module:utils/emittermixin~EmitterMixin} module:ui/template~TemplateBinding#emitter\n\t\t */\n\n\t\t/**\n\t\t * The name of the {@link module:ui/template~TemplateBinding#observable observed attribute}.\n\t\t *\n\t\t * @member {String} module:ui/template~TemplateBinding#attribute\n\t\t */\n\n\t\t/**\n\t\t * A custom function to process the value of the {@link module:ui/template~TemplateBinding#attribute}.\n\t\t *\n\t\t * @member {Function} [module:ui/template~TemplateBinding#callback]\n\t\t */\n\t}\n\n\t/**\n\t * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the\n\t * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.\n\t *\n\t * @param {Node} [node] A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.\n\t * @returns {*} The value of {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}.\n\t */\n\tgetValue( node ) {\n\t\tconst value = this.observable[ this.attribute ];\n\n\t\treturn this.callback ? this.callback( value, node ) : value;\n\t}\n\n\t/**\n\t * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated\n\t * value of {@link module:ui/template~TemplateValueSchema}.\n\t *\n\t * @param {module:ui/template~TemplateValueSchema} schema A full schema to generate an attribute or text in the DOM.\n\t * @param {Function} updater A DOM updater function used to update the native DOM attribute or text.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t * @returns {Function} A function to sever the listener binding.\n\t */\n\tactivateAttributeListener( schema, updater, data ) {\n\t\tconst callback = () => syncValueSchemaValue( schema, updater, data );\n\n\t\tthis.emitter.listenTo( this.observable, 'change:' + this.attribute, callback );\n\n\t\t// Allows revert of the listener.\n\t\treturn () => {\n\t\t\tthis.emitter.stopListening( this.observable, 'change:' + this.attribute, callback );\n\t\t};\n\t}\n}\n\n/**\n * Describes either:\n *\n * * a binding to an {@link module:utils/observablemixin~Observable},\n * * or a native DOM event binding.\n *\n * It is created by the {@link module:ui/template~BindChain#to} method.\n *\n * @protected\n */\nexport class TemplateToBinding extends TemplateBinding {\n\t/**\n\t * Activates the listener for the native DOM event, which when fired, is propagated by\n\t * the {@link module:ui/template~TemplateBinding#emitter}.\n\t *\n\t * @param {String} domEvtName The name of the native DOM event.\n\t * @param {String} domSelector The selector in the DOM to filter delegated events.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t * @returns {Function} A function to sever the listener binding.\n\t */\n\tactivateDomEventListener( domEvtName, domSelector, data ) {\n\t\tconst callback = ( evt, domEvt ) => {\n\t\t\tif ( !domSelector || domEvt.target.matches( domSelector ) ) {\n\t\t\t\tif ( typeof this.eventNameOrFunction == 'function' ) {\n\t\t\t\t\tthis.eventNameOrFunction( domEvt );\n\t\t\t\t} else {\n\t\t\t\t\tthis.observable.fire( this.eventNameOrFunction, domEvt );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.emitter.listenTo( data.node, domEvtName, callback );\n\n\t\t// Allows revert of the listener.\n\t\treturn () => {\n\t\t\tthis.emitter.stopListening( data.node, domEvtName, callback );\n\t\t};\n\t}\n}\n\n/**\n * Describes a binding to {@link module:utils/observablemixin~ObservableMixin} created by the {@link module:ui/template~BindChain#if}\n * method.\n *\n * @protected\n */\nexport class TemplateIfBinding extends TemplateBinding {\n\t/**\n\t * @inheritDoc\n\t */\n\tgetValue( node ) {\n\t\tconst value = super.getValue( node );\n\n\t\treturn isFalsy( value ) ? false : ( this.valueIfTrue || true );\n\t}\n\n\t/**\n\t * The value of the DOM attribute or text to be set if the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable} is `true`.\n\t *\n\t * @member {String} [module:ui/template~TemplateIfBinding#valueIfTrue]\n\t */\n}\n\n// Checks whether given {@link module:ui/template~TemplateValueSchema} contains a\n// {@link module:ui/template~TemplateBinding}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @returns {Boolean}\nfunction hasTemplateBinding( schema ) {\n\tif ( !schema ) {\n\t\treturn false;\n\t}\n\n\t// Normalize attributes with additional data like namespace:\n\t//\n\t//\t\tclass: {\n\t//\t\t\tns: 'abc',\n\t//\t\t\tvalue: [ ... ]\n\t//\t\t}\n\t//\n\tif ( schema.value ) {\n\t\tschema = schema.value;\n\t}\n\n\tif ( Array.isArray( schema ) ) {\n\t\treturn schema.some( hasTemplateBinding );\n\t} else if ( schema instanceof TemplateBinding ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Assembles the value using {@link module:ui/template~TemplateValueSchema} and stores it in a form of\n// an Array. Each entry of the Array corresponds to one of {@link module:ui/template~TemplateValueSchema}\n// items.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\n// @returns {Array}\nfunction getValueSchemaValue( schema, node ) {\n\treturn schema.map( schemaItem => {\n\t\t// Process {@link module:ui/template~TemplateBinding} bindings.\n\t\tif ( schemaItem instanceof TemplateBinding ) {\n\t\t\treturn schemaItem.getValue( node );\n\t\t}\n\n\t\t// All static values like strings, numbers, and \"falsy\" values (false, null, undefined, '', etc.) just pass.\n\t\treturn schemaItem;\n\t} );\n}\n\n// A function executed each time the bound Observable attribute changes, which updates the DOM with a value\n// constructed from {@link module:ui/template~TemplateValueSchema}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Function} updater A function which updates the DOM (like attribute or text).\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\nfunction syncValueSchemaValue( schema, updater, { node } ) {\n\tlet value = getValueSchemaValue( schema, node );\n\n\t// Check if schema is a single Template.bind.if, like:\n\t//\n\t//\t\tclass: Template.bind.if( 'foo' )\n\t//\n\tif ( schema.length == 1 && schema[ 0 ] instanceof TemplateIfBinding ) {\n\t\tvalue = value[ 0 ];\n\t} else {\n\t\tvalue = value.reduce( arrayValueReducer, '' );\n\t}\n\n\tif ( isFalsy( value ) ) {\n\t\tupdater.remove();\n\t} else {\n\t\tupdater.set( value );\n\t}\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset `textContent`.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @returns {Object}\nfunction getTextUpdater( node ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tnode.textContent = value;\n\t\t},\n\n\t\tremove() {\n\t\t\tnode.textContent = '';\n\t\t}\n\t};\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset an attribute.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} attrName Name of the attribute to be modified.\n// @param {String} [ns=null] Namespace to use.\n// @returns {Object}\nfunction getAttributeUpdater( el, attrName, ns ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tel.setAttributeNS( ns, attrName, value );\n\t\t},\n\n\t\tremove() {\n\t\t\tel.removeAttributeNS( ns, attrName );\n\t\t}\n\t};\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of CSSStyleDeclaration to set or remove a style.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} styleName Name of the style to be modified.\n// @returns {Object}\nfunction getStyleUpdater( el, styleName ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tel.style[ styleName ] = value;\n\t\t},\n\n\t\tremove() {\n\t\t\tel.style[ styleName ] = null;\n\t\t}\n\t};\n}\n\n// Clones definition of the template.\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition}\nfunction clone( def ) {\n\tconst clone = cloneDeepWith( def, value => {\n\t\t// Don't clone the `Template.bind`* bindings because of the references to Observable\n\t\t// and DomEmitterMixin instances inside, which would also be traversed and cloned by greedy\n\t\t// cloneDeepWith algorithm. There's no point in cloning Observable/DomEmitterMixins\n\t\t// along with the definition.\n\t\t//\n\t\t// Don't clone Template instances if provided as a child. They're simply #render()ed\n\t\t// and nothing should interfere.\n\t\t//\n\t\t// Also don't clone View instances if provided as a child of the Template. The template\n\t\t// instance will be extracted from the View during the normalization and there's no need\n\t\t// to clone it.\n\t\tif ( value && ( value instanceof TemplateBinding || isTemplate( value ) || isView( value ) || isViewCollection( value ) ) ) {\n\t\t\treturn value;\n\t\t}\n\t} );\n\n\treturn clone;\n}\n\n// Normalizes given {@link module:ui/template~TemplateDefinition}.\n//\n// See:\n//  * {@link normalizeAttributes}\n//  * {@link normalizeListeners}\n//  * {@link normalizePlainTextDefinition}\n//  * {@link normalizeTextDefinition}\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition} Normalized definition.\nfunction normalize( def ) {\n\tif ( typeof def == 'string' ) {\n\t\tdef = normalizePlainTextDefinition( def );\n\t} else if ( def.text ) {\n\t\tnormalizeTextDefinition( def );\n\t}\n\n\tif ( def.on ) {\n\t\tdef.eventListeners = normalizeListeners( def.on );\n\n\t\t// Template mixes EmitterMixin, so delete #on to avoid collision.\n\t\tdelete def.on;\n\t}\n\n\tif ( !def.text ) {\n\t\tif ( def.attributes ) {\n\t\t\tnormalizeAttributes( def.attributes );\n\t\t}\n\n\t\tconst children = [];\n\n\t\tif ( def.children ) {\n\t\t\tif ( isViewCollection( def.children ) ) {\n\t\t\t\tchildren.push( def.children );\n\t\t\t} else {\n\t\t\t\tfor ( const child of def.children ) {\n\t\t\t\t\tif ( isTemplate( child ) || isView( child ) || isNode( child ) ) {\n\t\t\t\t\t\tchildren.push( child );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchildren.push( new Template( child ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdef.children = children;\n\t}\n\n\treturn def;\n}\n\n// Normalizes \"attributes\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tattributes: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: {\n//\t\t\t\tvalue: 'bar'\n//\t\t\t}\n//\t\t}\n//\n// becomes\n//\n//\t\tattributes: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: {\n//\t\t\t\tvalue: [ 'bar' ]\n//\t\t\t}\n//\t\t}\n//\n// @param {Object} attributes\nfunction normalizeAttributes( attributes ) {\n\tfor ( const a in attributes ) {\n\t\tif ( attributes[ a ].value ) {\n\t\t\tattributes[ a ].value = [].concat( attributes[ a ].value );\n\t\t}\n\n\t\tarrayify( attributes, a );\n\t}\n}\n\n// Normalizes \"on\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\ton: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// becomes\n//\n//\t\ton: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// @param {Object} listeners\n// @returns {Object} Object containing normalized listeners.\nfunction normalizeListeners( listeners ) {\n\tfor ( const l in listeners ) {\n\t\tarrayify( listeners, l );\n\t}\n\n\treturn listeners;\n}\n\n// Normalizes \"string\" {@link module:ui/template~TemplateDefinition}.\n//\n//\t\t\"foo\"\n//\n// becomes\n//\n//\t\t{ text: [ 'foo' ] },\n//\n// @param {String} def\n// @returns {module:ui/template~TemplateDefinition} Normalized template definition.\nfunction normalizePlainTextDefinition( def ) {\n\treturn {\n\t\ttext: [ def ]\n\t};\n}\n\n// Normalizes text {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tchildren: [\n//\t\t\t{ text: 'def' },\n//\t\t\t{ text: {@link module:ui/template~TemplateBinding} }\n//\t\t]\n//\n// becomes\n//\n//\t\tchildren: [\n//\t\t\t{ text: [ 'def' ] },\n//\t\t\t{ text: [ {@link module:ui/template~TemplateBinding} ] }\n//\t\t]\n//\n// @param {module:ui/template~TemplateDefinition} def\nfunction normalizeTextDefinition( def ) {\n\tif ( !Array.isArray( def.text ) ) {\n\t\tdef.text = [ def.text ];\n\t}\n}\n\n// Wraps an entry in Object in an Array, if not already one.\n//\n//\t\t{\n//\t\t\tx: 'y',\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// becomes\n//\n//\t\t{\n//\t\t\tx: [ 'y' ],\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// @param {Object} obj\n// @param {String} key\nfunction arrayify( obj, key ) {\n\tif ( !Array.isArray( obj[ key ] ) ) {\n\t\tobj[ key ] = [ obj[ key ] ];\n\t}\n}\n\n// A helper which concatenates the value avoiding unwanted\n// leading white spaces.\n//\n// @param {String} prev\n// @param {String} cur\n// @returns {String}\nfunction arrayValueReducer( prev, cur ) {\n\tif ( isFalsy( cur ) ) {\n\t\treturn prev;\n\t} else if ( isFalsy( prev ) ) {\n\t\treturn cur;\n\t} else {\n\t\treturn `${ prev } ${ cur }`;\n\t}\n}\n\n// Extends one object defined in the following format:\n//\n//\t\t{\n//\t\t\tkey1: [Array1],\n//\t\t\tkey2: [Array2],\n//\t\t\t...\n//\t\t\tkeyN: [ArrayN]\n//\t\t}\n//\n// with another object of the same data format.\n//\n// @param {Object} obj Base object.\n// @param {Object} ext Object extending base.\n// @returns {String}\nfunction extendObjectValueArray( obj, ext ) {\n\tfor ( const a in ext ) {\n\t\tif ( obj[ a ] ) {\n\t\t\tobj[ a ].push( ...ext[ a ] );\n\t\t} else {\n\t\t\tobj[ a ] = ext[ a ];\n\t\t}\n\t}\n}\n\n// A helper for {@link module:ui/template~Template#extend}. Recursively extends {@link module:ui/template~Template} instance\n// with content from {@link module:ui/template~TemplateDefinition}. See {@link module:ui/template~Template#extend} to learn more.\n//\n// @param {module:ui/template~Template} def A template instance to be extended.\n// @param {module:ui/template~TemplateDefinition} def A definition which is to extend the template instance.\n// @param {Object} Error context.\nfunction extendTemplate( template, def ) {\n\tif ( def.attributes ) {\n\t\tif ( !template.attributes ) {\n\t\t\ttemplate.attributes = {};\n\t\t}\n\n\t\textendObjectValueArray( template.attributes, def.attributes );\n\t}\n\n\tif ( def.eventListeners ) {\n\t\tif ( !template.eventListeners ) {\n\t\t\ttemplate.eventListeners = {};\n\t\t}\n\n\t\textendObjectValueArray( template.eventListeners, def.eventListeners );\n\t}\n\n\tif ( def.text ) {\n\t\ttemplate.text.push( ...def.text );\n\t}\n\n\tif ( def.children && def.children.length ) {\n\t\tif ( template.children.length != def.children.length ) {\n\t\t\t/**\n\t\t\t * The number of children in extended definition does not match.\n\t\t\t *\n\t\t\t * @error ui-template-extend-children-mismatch\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-extend-children-mismatch: The number of children in extended definition does not match.',\n\t\t\t\ttemplate\n\t\t\t);\n\t\t}\n\n\t\tlet childIndex = 0;\n\n\t\tfor ( const childDef of def.children ) {\n\t\t\textendTemplate( template.children[ childIndex++ ], childDef );\n\t\t}\n\t}\n}\n\n// Checks if value is \"falsy\".\n// Note: 0 (Number) is not \"falsy\" in this context.\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isFalsy( value ) {\n\treturn !value && value !== 0;\n}\n\n// Checks if the item is an instance of {@link module:ui/view~View}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isView( item ) {\n\treturn item instanceof View;\n}\n\n// Checks if the item is an instance of {@link module:ui/template~Template}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isTemplate( item ) {\n\treturn item instanceof Template;\n}\n\n// Checks if the item is an instance of {@link module:ui/viewcollection~ViewCollection}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isViewCollection( item ) {\n\treturn item instanceof ViewCollection;\n}\n\n// Creates an empty skeleton for {@link module:ui/template~Template#revert}\n// data.\n//\n// @private\nfunction getEmptyRevertData() {\n\treturn {\n\t\tchildren: [],\n\t\tbindings: [],\n\t\tattributes: {}\n\t};\n}\n\n// Checks whether an attribute should be extended when\n// {@link module:ui/template~Template#apply} is called.\n//\n// @private\n// @param {String} attrName Attribute name to check.\nfunction shouldExtend( attrName ) {\n\treturn attrName == 'class' || attrName == 'style';\n}\n\n/**\n * A definition of the {@link module:ui/template~Template}. It describes what kind of\n * node a template will render (HTML element or text), attributes of an element, DOM event\n * listeners and children.\n *\n * Also see:\n * * {@link module:ui/template~TemplateValueSchema} to learn about HTML element attributes,\n * * {@link module:ui/template~TemplateListenerSchema} to learn about DOM event listeners.\n *\n * A sample definition on an HTML element can look like this:\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\ttag: 'span',\n *\t\t\t\t\tattributes: { ... },\n *\t\t\t\t\tchildren: [ ... ],\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\ttext: 'static–text'\n *\t\t\t\t},\n *\t\t\t\t'also-static–text',\n *\t\t\t],\n *\t\t\tattributes: {\n *\t\t\t\tclass: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tid: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tstyle: {@link module:ui/template~TemplateValueSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\t'click': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// Document.querySelector format is also accepted.\n *\t\t\t\t'keyup@a.some-class': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t}\n *\t\t} );\n *\n * A {@link module:ui/view~View}, another {@link module:ui/template~Template} or a native DOM node\n * can also become a child of a template. When a view is passed, its {@link module:ui/view~View#element} is used:\n *\n *\t\tconst view = new SomeView();\n *\t\tconst childTemplate = new Template( { ... } );\n *\t\tconst childNode = document.createElement( 'b' );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: [\n *\t\t\t\t// view#element will be added as a child of this <p>.\n *\t\t\t\tview,\n *\n * \t\t\t\t// The output of childTemplate.render() will be added here.\n *\t\t\t\tchildTemplate,\n *\n *\t\t\t\t// Native DOM nodes are included directly in the rendered output.\n *\t\t\t\tchildNode\n *\t\t\t]\n *\t\t} );\n *\n * An entire {@link module:ui/viewcollection~ViewCollection} can be used as a child in the definition:\n *\n *\t\tconst collection = new ViewCollection();\n *\t\tcollection.add( someView );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: collection\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateDefinition\n * @type Object\n *\n * @property {String} tag See the template {@link module:ui/template~Template#tag} property.\n *\n * @property {Array.<module:ui/template~TemplateDefinition>} [children]\n * See the template {@link module:ui/template~Template#children} property.\n *\n * @property {Object.<String, module:ui/template~TemplateValueSchema>} [attributes]\n * See the template {@link module:ui/template~Template#attributes} property.\n *\n * @property {String|module:ui/template~TemplateValueSchema|Array.<String|module:ui/template~TemplateValueSchema>} [text]\n * See the template {@link module:ui/template~Template#text} property.\n *\n * @property {Object.<String, module:ui/template~TemplateListenerSchema>} [on]\n * See the template {@link module:ui/template~Template#eventListeners} property.\n */\n\n/**\n * Describes a value of an HTML element attribute or `textContent`. It allows combining multiple\n * data sources like static values and {@link module:utils/observablemixin~Observable} attributes.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn where to use it,\n * * {@link module:ui/template~Template.bind} to learn how to configure\n * {@link module:utils/observablemixin~Observable} attribute bindings,\n * * {@link module:ui/template~Template#render} to learn how to render a template,\n * * {@link module:ui/template~BindChain#to `to()`} and {@link module:ui/template~BindChain#if `if()`}\n * methods to learn more about bindings.\n *\n * Attribute values can be described in many different ways:\n *\n *\t\t// Bind helper will create bindings to attributes of the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// A plain string schema.\n *\t\t\t\t'class': 'static-text',\n *\n *\t\t\t\t// An object schema, binds to the \"foo\" attribute of the\n *\t\t\t\t// observable and follows its value.\n *\t\t\t\t'class': bind.to( 'foo' ),\n *\n *\t\t\t\t// An array schema, combines the above.\n *\t\t\t\t'class': [\n *\t\t\t\t\t'static-text',\n *\t\t\t\t\tbind.to( 'bar', () => { ... } ),\n *\n * \t\t\t\t\t// Bindings can also be conditional.\n *\t\t\t\t\tbind.if( 'baz', 'class-when-baz-is-true' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema, with a custom namespace, e.g. useful for creating SVGs.\n *\t\t\t\t'class': {\n *\t\t\t\t\tns: 'http://ns.url',\n *\t\t\t\t\tvalue: [\n *\t\t\t\t\t\tbind.if( 'baz', 'value-when-true' ),\n *\t\t\t\t\t\t'static-text'\n *\t\t\t\t\t]\n *\t\t\t\t},\n *\n *\t\t\t\t// An object schema, specific for styles.\n *\t\t\t\tstyle: {\n *\t\t\t\t\tcolor: 'red',\n *\t\t\t\t\tbackgroundColor: bind.to( 'qux', () => { ... } )\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * Text nodes can also have complex values:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\t// Will render a \"foo\" text node.\n *\t\tnew Template( {\n *\t\t\ttext: 'foo'\n *\t\t} );\n *\n *\t\t// Will render a \"static text: {observable.foo}\" text node.\n *\t\t// The text of the node will be updated as the \"foo\" attribute changes.\n *\t\tnew Template( {\n *\t\t\ttext: [\n *\t\t\t\t'static text: ',\n *\t\t\t\tbind.to( 'foo', () => { ... } )\n *\t\t\t]\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateValueSchema\n * @type {Object|String|Array}\n */\n\n/**\n * Describes an event listener attached to an HTML element. Such listener can propagate DOM events\n * through an {@link module:utils/observablemixin~Observable} instance, execute custom callbacks\n * or both, if necessary.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn more about template definitions,\n * * {@link module:ui/template~BindChain#to `to()`} method to learn more about bindings.\n *\n * Check out different ways of attaching event listeners below:\n *\n *\t\t// Bind helper will propagate events through the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\ton: {\n *\t\t\t\t// An object schema. The observable will fire the \"clicked\" event upon DOM \"click\".\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\n *\t\t\t\t// An object schema. It will work for \"click\" event on \"a.foo\" children only.\n *\t\t\t\t'click@a.foo': bind.to( 'clicked' )\n *\n *\t\t\t\t// An array schema, makes the observable propagate multiple events.\n *\t\t\t\tclick: [\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( 'executed' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema with a custom callback.\n *\t\t\t\t'click@a.foo': {\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( evt => {\n *\t\t\t\t\t\tconsole.log( `${ evt.target } has been clicked!` );\n *\t\t\t\t\t} }\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateListenerSchema\n * @type {Object|String|Array}\n */\n\n/**\n * The return value of {@link ~Template.bind `Template.bind()`}. It provides `to()` and `if()`\n * methods to create the {@link module:utils/observablemixin~Observable observable} attribute and event bindings.\n *\n * @interface module:ui/template~BindChain\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to either:\n *\n * * an HTML element attribute or a text node `textContent`, so it remains in sync with the observable\n * attribute as it changes,\n * * or an HTML element DOM event, so the DOM events are propagated through an observable.\n *\n * Some common use cases of `to()` bindings are presented below:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// class=\"...\" attribute gets bound to `observable#a`\n *\t\t\t\tclass: bind.to( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t// <p>...</p> gets bound to observable#b; always `toUpperCase()`.\n *\t\t\t\t{\n *\t\t\t\t\ttext: bind.to( 'b', ( value, node ) => value.toUpperCase() )\n *\t\t\t\t}\n *\t\t\t],\n *\t\t\ton: {\n *\t\t\t\tclick: [\n *\t\t\t\t\t// An observable will fire \"clicked\" upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\n *\t\t\t\t\t// A custom callback will be executed upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( () => {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t} )\n *\t\t\t\t]\n *\t\t\t}\n *\t\t} ).render();\n *\n * Learn more about using `to()` in the {@link module:ui/template~TemplateValueSchema} and\n * {@link module:ui/template~TemplateListenerSchema}.\n *\n * @method #to\n * @param {String|Function} eventNameOrFunctionOrAttribute An attribute name of\n * {@link module:utils/observablemixin~Observable} or a DOM event name or an event callback.\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to an HTML element attribute or a text\n * node `textContent` so it remains in sync with the observable attribute as it changes.\n *\n * Unlike {@link module:ui/template~BindChain#to}, it controls the presence of the attribute or `textContent`\n * depending on the \"falseness\" of an {@link module:utils/observablemixin~Observable} attribute.\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'input',\n *\t\t\tattributes: {\n *\t\t\t\t// <input checked> when `observable#a` is not undefined/null/false/''\n *\t\t\t\t// <input> when `observable#a` is undefined/null/false\n *\t\t\t\tchecked: bind.if( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\t// <input>\"b-is-not-set\"</input> when `observable#b` is undefined/null/false/''\n *\t\t\t\t\t// <input></input> when `observable#b` is not \"falsy\"\n *\t\t\t\t\ttext: bind.if( 'b', 'b-is-not-set', ( value, node ) => !value )\n *\t\t\t\t}\n *\t\t\t]\n *\t\t} ).render();\n *\n * Learn more about using `if()` in the {@link module:ui/template~TemplateValueSchema}.\n *\n * @method #if\n * @param {String} attribute An attribute name of {@link module:utils/observablemixin~Observable} used in the binding.\n * @param {String} [valueIfTrue] Value set when the {@link module:utils/observablemixin~Observable} attribute is not\n * undefined/null/false/'' (empty string).\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * The {@link module:ui/template~Template#_renderNode} configuration.\n *\n * @private\n * @interface module:ui/template~RenderData\n */\n\n/**\n * Tells {@link module:ui/template~Template#_renderNode} to render\n * children into `DocumentFragment` first and then append the fragment\n * to the parent element. It is a speed optimization.\n *\n * @member {Boolean} #intoFragment\n */\n\n/**\n * A node which is being rendered.\n *\n * @member {HTMLElement|Text} #node\n */\n\n/**\n * Indicates whether the {@module:ui/template~RenderNodeOptions#node} has\n * been provided by {@module:ui/template~Template#apply}.\n *\n * @member {Boolean} #isApplying\n */\n\n/**\n * An object storing the data that helps {@module:ui/template~Template#revert}\n * bringing back an element to its initial state, i.e. before\n * {@module:ui/template~Template#apply} was called.\n *\n * @member {Object} #revertData\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/emittermixin\n */\n\nimport { default as EmitterMixin, _getEmitterListenedTo, _setEmitterId } from '../emittermixin';\nimport uid from '../uid';\nimport isNode from './isnode';\nimport isWindow from './iswindow';\nimport { extend } from 'lodash-es';\n\n/**\n * Mixin that injects the DOM events API into its host. It provides the API\n * compatible with {@link module:utils/emittermixin~EmitterMixin}.\n *\n * DOM emitter mixin is by default available in the {@link module:ui/view~View} class,\n * but it can also be mixed into any other class:\n *\n *\t\timport mix from '../utils/mix.js';\n *\t\timport DomEmitterMixin from '../utils/dom/emittermixin.js';\n *\n *\t\tclass SomeView {}\n *\t\tmix( SomeView, DomEmitterMixin );\n *\n *\t\tconst view = new SomeView();\n *\t\tview.listenTo( domElement, ( evt, domEvt ) => {\n *\t\t\tconsole.log( evt, domEvt );\n *\t\t} );\n *\n * @mixin EmitterMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n */\nconst DomEmitterMixin = extend( {}, EmitterMixin, {\n\t/**\n\t * Registers a callback function to be executed when an event is fired in a specific Emitter or DOM Node.\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} emitter The object that fires the event.\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n\t * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n\t * order they were added.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t */\n\tlistenTo( emitter, ...rest ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, replace the argument with\n\t\t// corresponding ProxyEmitter (or create one if not existing).\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxy = this._getProxyEmitter( emitter ) || new ProxyEmitter( emitter );\n\n\t\t\tproxy.attach( ...rest );\n\n\t\t\temitter = proxy;\n\t\t}\n\n\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\tEmitterMixin.listenTo.call( this, emitter, ...rest );\n\t},\n\n\t/**\n\t * Stops listening for events. It can be used at different levels:\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * * To stop listening to a specific callback.\n\t * * To stop listening to a specific event.\n\t * * To stop listening to all events fired by a specific object.\n\t * * To stop listening to all events fired by all object.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n\t * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n\t * for all events from `emitter`.\n\t * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n\t * `event`.\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, replace the argument with corresponding ProxyEmitter.\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxy = this._getProxyEmitter( emitter );\n\n\t\t\t// Element has no listeners.\n\t\t\tif ( !proxy ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\temitter = proxy;\n\t\t}\n\n\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\tEmitterMixin.stopListening.call( this, emitter, event, callback );\n\n\t\tif ( emitter instanceof ProxyEmitter ) {\n\t\t\temitter.detach( event );\n\t\t}\n\t},\n\n\t/**\n\t * Retrieves ProxyEmitter instance for given DOM Node residing in this Host.\n\t *\n\t * @pivate\n\t * @param {Node} node DOM Node of the ProxyEmitter.\n\t * @returns {module:utils/dom/emittermixin~ProxyEmitter} ProxyEmitter instance or null.\n\t */\n\t_getProxyEmitter( node ) {\n\t\treturn _getEmitterListenedTo( this, getNodeUID( node ) );\n\t}\n} );\n\nexport default DomEmitterMixin;\n\n/**\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#on}.\n *\n *                                  listenTo( click, ... )\n *                    +-----------------------------------------+\n *                    |              stopListening( ... )       |\n *     +----------------------------+                           |             addEventListener( click, ... )\n *     | Host                       |                           |   +---------------------------------------------+\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\n *     | _listeningTo: {            |                +----------v-------------+                                   |\n *     |   UID: {                   |                | ProxyEmitter           |                                   |\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\n *     | }                          |                | _domListeners: {},     |                                   |\n *     | +------------------------+ |                | _emitterId: UID        |                                   |\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\n *     | +------------------------+ |                           |   |                                             |\n *     +--------------^-------------+                           |   +---------------------------------------------+\n *                    |                                         |                  click (DOM Event)\n *                    +-----------------------------------------+\n *                                fire( click, DOM Event )\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n * @private\n */\nclass ProxyEmitter {\n\t/**\n\t * @param {Node} node DOM Node that fires events.\n\t * @returns {Object} ProxyEmitter instance bound to the DOM Node.\n\t */\n\tconstructor( node ) {\n\t\t// Set emitter ID to match DOM Node \"expando\" property.\n\t\t_setEmitterId( this, getNodeUID( node ) );\n\n\t\t// Remember the DOM Node this ProxyEmitter is bound to.\n\t\tthis._domNode = node;\n\t}\n}\n\nextend( ProxyEmitter.prototype, EmitterMixin, {\n\t/**\n\t * Collection of native DOM listeners.\n\t *\n\t * @private\n\t * @member {Object} module:utils/dom/emittermixin~ProxyEmitter#_domListeners\n\t */\n\n\t/**\n\t * Registers a callback function to be executed when an event is fired.\n\t *\n\t * It attaches a native DOM listener to the DOM Node. When fired,\n\t * a corresponding Emitter event will also fire with DOM Event object as an argument.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#attach\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t */\n\tattach( event, callback, options = {} ) {\n\t\t// If the DOM Listener for given event already exist it is pointless\n\t\t// to attach another one.\n\t\tif ( this._domListeners && this._domListeners[ event ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domListener = this._createDomListener( event, !!options.useCapture );\n\n\t\t// Attach the native DOM listener to DOM Node.\n\t\tthis._domNode.addEventListener( event, domListener, !!options.useCapture );\n\n\t\tif ( !this._domListeners ) {\n\t\t\tthis._domListeners = {};\n\t\t}\n\n\t\t// Store the native DOM listener in this ProxyEmitter. It will be helpful\n\t\t// when stopping listening to the event.\n\t\tthis._domListeners[ event ] = domListener;\n\t},\n\n\t/**\n\t * Stops executing the callback on the given event.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#detach\n\t * @param {String} event The name of the event.\n\t */\n\tdetach( event ) {\n\t\tlet events;\n\n\t\t// Remove native DOM listeners which are orphans. If no callbacks\n\t\t// are awaiting given event, detach native DOM listener from DOM Node.\n\t\t// See: {@link attach}.\n\n\t\tif ( this._domListeners[ event ] && ( !( events = this._events[ event ] ) || !events.callbacks.length ) ) {\n\t\t\tthis._domListeners[ event ].removeListener();\n\t\t}\n\t},\n\n\t/**\n\t * Creates a native DOM listener callback. When the native DOM event\n\t * is fired it will fire corresponding event on this ProxyEmitter.\n\t * Note: A native DOM Event is passed as an argument.\n\t *\n\t * @private\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#_createDomListener\n\t * @param {String} event The name of the event.\n\t * @param {Boolean} useCapture Indicates whether the listener was created for capturing event.\n\t * @returns {Function} The DOM listener callback.\n\t */\n\t_createDomListener( event, useCapture ) {\n\t\tconst domListener = domEvt => {\n\t\t\tthis.fire( event, domEvt );\n\t\t};\n\n\t\t// Supply the DOM listener callback with a function that will help\n\t\t// detach it from the DOM Node, when it is no longer necessary.\n\t\t// See: {@link detach}.\n\t\tdomListener.removeListener = () => {\n\t\t\tthis._domNode.removeEventListener( event, domListener, useCapture );\n\t\t\tdelete this._domListeners[ event ];\n\t\t};\n\n\t\treturn domListener;\n\t}\n} );\n\n// Gets an unique DOM Node identifier. The identifier will be set if not defined.\n//\n// @private\n// @param {Node} node\n// @returns {String} UID for given DOM Node.\nfunction getNodeUID( node ) {\n\treturn node[ 'data-ck-expando' ] || ( node[ 'data-ck-expando' ] = uid() );\n}\n\n/**\n * Interface representing classes which mix in {@link module:utils/dom/emittermixin~EmitterMixin}.\n *\n * @interface Emitter\n */\n","import assignValue from './_assignValue.js';\nimport baseAssignValue from './_baseAssignValue.js';\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nexport default copyObject;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/node\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { clone } from 'lodash-es';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Abstract tree view node class.\n *\n * This is an abstract class. Its constructor should not be used directly.\n * Use the {@link module:engine/view/element~Element} class to create view elements\n * or {@link module:engine/view/text~Text} class to create view text nodes.\n *\n * @abstract\n */\nexport default class Node {\n\t/**\n\t * Creates a tree view node.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Parent element. Null by default. Set by {@link module:engine/view/element~Element#_insertChild}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t\t */\n\t\tthis.parent = null;\n\t}\n\n\t/**\n\t * Index of the node in the parent element or null if the node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that view tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget index() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// No parent or child doesn't exist in parent's children.\n\t\tif ( ( pos = this.parent.getChildIndex( this ) ) == -1 ) {\n\t\t\t/**\n\t\t\t * The node's parent does not contain this node. It means that the document tree is corrupted.\n\t\t\t *\n\t\t\t * @error view-node-not-found-in-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-node-not-found-in-parent: The node\\'s parent does not contain this node.', this );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Node's next sibling, or `null` if it is the last child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nextSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\n\t}\n\n\t/**\n\t * Node's previous sibling, or `null` if it is the first child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget previousSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\n\t}\n\n\t/**\n\t * Top-most ancestor of the node. If the node has no parent it is the root itself.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\tlet root = this; // eslint-disable-line consistent-this\n\n\t\twhile ( root.parent ) {\n\t\t\troot = root.parent;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/document~Document View document} that owns this node, or `null` if the node is inside\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/document~Document|null}\n\t */\n\tget document() {\n\t\t// Parent might be Node, null or DocumentFragment.\n\t\tif ( this.parent instanceof Node ) {\n\t\t\treturn this.parent.document;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Gets a path to the node. The path is an array containing indices of consecutive ancestors of this node,\n\t * beginning from {@link module:engine/view/node~Node#root root}, down to this node's index.\n\t *\n\t *\t\tconst abc = downcastWriter.createText( 'abc' );\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst h1 = downcastWriter.createElement( 'h1', null, downcastWriter.createText( 'header' ) );\n\t *\t\tconst p = downcastWriter.createElement( 'p', null, [ abc, foo ] );\n\t *\t\tconst div = downcastWriter.createElement( 'div', null, [ h1, p ] );\n\t *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n\t *\t\th1.getPath(); // Returns [ 0 ].\n\t *\t\tdiv.getPath(); // Returns [].\n\t *\n\t * @returns {Array.<Number>} The path.\n\t */\n\tgetPath() {\n\t\tconst path = [];\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\twhile ( node.parent ) {\n\t\t\tpath.unshift( node.index );\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this node.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both nodes.\n\t *\n\t * @param {module:engine/view/node~Node} node The second node.\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( node, options = {} ) {\n\t\tconst ancestorsA = this.getAncestors( options );\n\t\tconst ancestorsB = node.getAncestors( options );\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/view/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisBefore( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisPath = this.getPath();\n\t\tconst nodePath = node.getPath();\n\n\t\tconst result = compareArrays( thisPath, nodePath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn true;\n\n\t\t\tcase 'extension':\n\t\t\t\treturn false;\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < nodePath[ result ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/view/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisAfter( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// In other cases, just check if the `node` is before, and return the opposite.\n\t\treturn !this.isBefore( node );\n\t}\n\n\t/**\n\t * Removes node from parent.\n\t *\n\t * @protected\n\t */\n\t_remove() {\n\t\tthis.parent._removeChildren( this.index );\n\t}\n\n\t/**\n\t * @protected\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Changed node.\n\t * @fires change\n\t */\n\t_fireChange( type, node ) {\n\t\tthis.fire( 'change:' + type, node );\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent._fireChange( type, node );\n\t\t}\n\t}\n\n\t/**\n\t * Custom toJSON method to solve child-parent circular dependencies.\n\t *\n\t * @returns {Object} Clone of this object with the parent property removed.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\t// Due to circular references we need to remove parent reference.\n\t\tdelete json.parent;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t * This method is useful when processing view objects that are of unknown type. For example, a function\n\t * may return a {@link module:engine/view/documentfragment~DocumentFragment} or a {@link module:engine/view/node~Node}\n\t * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n\t *\n\t *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n\t *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n\t *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n\t *\n\t * Since this method is also available on a range of model objects, you can prefix the type of the object with\n\t * `model:` or `view:` to check, for example, if this is the model's or view's element:\n\t *\n\t *\t\tviewElement.is( 'view:element' ); // -> true\n\t *\t\tviewElement.is( 'model:element' ); // -> false\n\t *\n\t * By using this method it is also possible to check a name of an element:\n\t *\n\t *\t\timgElement.is( 'img' ); // -> true\n\t *\t\timgElement.is( 'element', 'img' ); // -> same as above\n\t *\t\timgElement.is( 'view:element', 'img' ); // -> same as above, but more precise\n\t *\n\t * The list of view objects which implement the `is()` method:\n\t *\n\t * * {@link module:engine/view/attributeelement~AttributeElement#is `AttributeElement#is()`}\n\t * * {@link module:engine/view/containerelement~ContainerElement#is `ContainerElement#is()`}\n\t * * {@link module:engine/view/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n\t * * {@link module:engine/view/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n\t * * {@link module:engine/view/editableelement~EditableElement#is `EditableElement#is()`}\n\t * * {@link module:engine/view/element~Element#is `Element#is()`}\n\t * * {@link module:engine/view/emptyelement~EmptyElement#is `EmptyElement#is()`}\n\t * * {@link module:engine/view/node~Node#is `Node#is()`}\n\t * * {@link module:engine/view/position~Position#is `Position#is()`}\n\t * * {@link module:engine/view/range~Range#is `Range#is()`}\n\t * * {@link module:engine/view/rooteditableelement~RootEditableElement#is `RootEditableElement#is()`}\n\t * * {@link module:engine/view/selection~Selection#is `Selection#is()`}\n\t * * {@link module:engine/view/text~Text#is `Text#is()`}\n\t * * {@link module:engine/view/textproxy~TextProxy#is `TextProxy#is()`}\n\t * * {@link module:engine/view/uielement~UIElement#is `UIElement#is()`}\n\t *\n\t * @method #is\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'node' || type == 'view:node';\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @method #_clone\n\t * @returns {module:engine/view/node~Node} Clone of this node.\n\t */\n\n\t/**\n\t * Checks if provided node is similar to this node.\n\t *\n\t * @method #isSimilar\n\t * @returns {Boolean} True if nodes are similar.\n\t */\n}\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} children changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:children\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} attributes changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:attributes\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when {@link module:engine/view/text~Text text nodes} data changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:text\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * @event change\n */\n\nmix( Node, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/node\n */\n\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Model node. Most basic structure of model tree.\n *\n * This is an abstract class that is a base for other classes representing different nodes in model.\n *\n * **Note:** If a node is detached from the model tree, you can manipulate it using it's API.\n * However, it is **very important** that nodes already attached to model tree should be only changed through\n * {@link module:engine/model/writer~Writer Writer API}.\n *\n * Changes done by `Node` methods, like {@link module:engine/model/element~Element#_insertChild _insertChild} or\n * {@link module:engine/model/node~Node#_setAttribute _setAttribute}\n * do not generate {@link module:engine/model/operation/operation~Operation operations}\n * which are essential for correct editor work if you modify nodes in {@link module:engine/model/document~Document document} root.\n *\n * The flow of working on `Node` (and classes that inherits from it) is as such:\n * 1. You can create a `Node` instance, modify it using it's API.\n * 2. Add `Node` to the model using `Batch` API.\n * 3. Change `Node` that was already added to the model using `Batch` API.\n *\n * Similarly, you cannot use `Batch` API on a node that has not been added to the model tree, with the exception\n * of {@link module:engine/model/writer~Writer#insert inserting} that node to the model tree.\n *\n * Be aware that using {@link module:engine/model/writer~Writer#remove remove from Batch API} does not allow to use `Node` API because\n * the information about `Node` is still kept in model document.\n *\n * In case of {@link module:engine/model/element~Element element node}, adding and removing children also counts as changing a node and\n * follows same rules.\n */\nexport default class Node {\n\t/**\n\t * Creates a model node.\n\t *\n\t * This is an abstract class, so this constructor should not be used directly.\n\t *\n\t * @abstract\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( attrs ) {\n\t\t/**\n\t\t * Parent of this node. It could be {@link module:engine/model/element~Element}\n\t\t * or {@link module:engine/model/documentfragment~DocumentFragment}.\n\t\t * Equals to `null` if the node has no parent.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t\t */\n\t\tthis.parent = null;\n\n\t\t/**\n\t\t * Attributes set on this node.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/model/node~Node#_attrs\n\t\t */\n\t\tthis._attrs = toMap( attrs );\n\t}\n\n\t/**\n\t * Index of this node in it's parent or `null` if the node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that model tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget index() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( ( pos = this.parent.getChildIndex( this ) ) === null ) {\n\t\t\tthrow new CKEditorError( 'model-node-not-found-in-parent: The node\\'s parent does not contain this node.', this );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Offset at which this node starts in it's parent. It is equal to the sum of {@link #offsetSize offsetSize}\n\t * of all it's previous siblings. Equals to `null` if node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that model tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget startOffset() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( ( pos = this.parent.getChildStartOffset( this ) ) === null ) {\n\t\t\tthrow new CKEditorError( 'model-node-not-found-in-parent: The node\\'s parent does not contain this node.', this );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Offset size of this node. Represents how much \"offset space\" is occupied by the node in it's parent.\n\t * It is important for {@link module:engine/model/position~Position position}. When node has `offsetSize` greater than `1`, position\n\t * can be placed between that node start and end. `offsetSize` greater than `1` is for nodes that represents more\n\t * than one entity, i.e. {@link module:engine/model/text~Text text node}.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Offset at which this node ends in it's parent. It is equal to the sum of this node's\n\t * {@link module:engine/model/node~Node#startOffset start offset} and {@link #offsetSize offset size}.\n\t * Equals to `null` if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget endOffset() {\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.startOffset + this.offsetSize;\n\t}\n\n\t/**\n\t * Node's next sibling or `null` if the node is a last child of it's parent or if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nextSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\n\t}\n\n\t/**\n\t * Node's previous sibling or `null` if the node is a first child of it's parent or if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget previousSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\n\t}\n\n\t/**\n\t * The top-most ancestor of the node. If node has no parent it is the root itself. If the node is a part\n\t * of {@link module:engine/model/documentfragment~DocumentFragment}, it's `root` is equal to that `DocumentFragment`.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\tlet root = this; // eslint-disable-line consistent-this\n\n\t\twhile ( root.parent ) {\n\t\t\troot = root.parent;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns this node or `null` if the node has no parent or is inside\n\t * a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\t// This is a top element of a sub-tree.\n\t\tif ( this.root == this ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Root may be `DocumentFragment` which does not have document property.\n\t\treturn this.root.document || null;\n\t}\n\n\t/**\n\t * Gets path to the node. The path is an array containing starting offsets of consecutive ancestors of this node,\n\t * beginning from {@link module:engine/model/node~Node#root root}, down to this node's starting offset. The path can be used to\n\t * create {@link module:engine/model/position~Position Position} instance.\n\t *\n\t *\t\tconst abc = new Text( 'abc' );\n\t *\t\tconst foo = new Text( 'foo' );\n\t *\t\tconst h1 = new Element( 'h1', null, new Text( 'header' ) );\n\t *\t\tconst p = new Element( 'p', null, [ abc, foo ] );\n\t *\t\tconst div = new Element( 'div', null, [ h1, p ] );\n\t *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n\t *\t\th1.getPath(); // Returns [ 0 ].\n\t *\t\tdiv.getPath(); // Returns [].\n\t *\n\t * @returns {Array.<Number>} The path.\n\t */\n\tgetPath() {\n\t\tconst path = [];\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\twhile ( node.parent ) {\n\t\t\tpath.unshift( node.startOffset );\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this node.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both nodes.\n\t *\n\t * @param {module:engine/model/node~Node} node The second node.\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( node, options = {} ) {\n\t\tconst ancestorsA = this.getAncestors( options );\n\t\tconst ancestorsB = node.getAncestors( options );\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/model/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisBefore( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisPath = this.getPath();\n\t\tconst nodePath = node.getPath();\n\n\t\tconst result = compareArrays( thisPath, nodePath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn true;\n\n\t\t\tcase 'extension':\n\t\t\t\treturn false;\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < nodePath[ result ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/model/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisAfter( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// In other cases, just check if the `node` is before, and return the opposite.\n\t\treturn !this.isBefore( node );\n\t}\n\n\t/**\n\t * Checks if the node has an attribute with given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on node, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on node.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Converts `Node` to plain object and returns it.\n\t *\n\t * @returns {Object} `Node` converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = {};\n\n\t\t// Serializes attributes to the object.\n\t\t// attributes = { a: 'foo', b: 1, c: true }.\n\t\tif ( this._attrs.size ) {\n\t\t\tjson.attributes = Array.from( this._attrs ).reduce( ( result, attr ) => {\n\t\t\t\tresult[ attr[ 0 ] ] = attr[ 1 ];\n\n\t\t\t\treturn result;\n\t\t\t}, {} );\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t * This method is useful when processing model objects that are of unknown type. For example, a function\n\t * may return a {@link module:engine/model/documentfragment~DocumentFragment} or a {@link module:engine/model/node~Node}\n\t * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n\t *\n\t *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n\t *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n\t *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n\t *\n\t * Since this method is also available on a range of view objects, you can prefix the type of the object with\n\t * `model:` or `view:` to check, for example, if this is the model's or view's element:\n\t *\n\t *\t\tmodelElement.is( 'model:element' ); // -> true\n\t *\t\tmodelElement.is( 'view:element' ); // -> false\n\t *\n\t * By using this method it is also possible to check a name of an element:\n\t *\n\t *\t\timageElement.is( 'image' ); // -> true\n\t *\t\timageElement.is( 'element', 'image' ); // -> same as above\n\t *\t\timageElement.is( 'model:element', 'image' ); // -> same as above, but more precise\n\t *\n\t * The list of model objects which implement the `is()` method:\n\t *\n\t * * {@link module:engine/model/node~Node#is `Node#is()`}\n\t * * {@link module:engine/model/text~Text#is `Text#is()`}\n\t * * {@link module:engine/model/element~Element#is `Element#is()`}\n\t * * {@link module:engine/model/rootelement~RootElement#is `RootElement#is()`}\n\t * * {@link module:engine/model/position~Position#is `Position#is()`}\n\t * * {@link module:engine/model/liveposition~LivePosition#is `LivePosition#is()`}\n\t * * {@link module:engine/model/range~Range#is `Range#is()`}\n\t * * {@link module:engine/model/liverange~LiveRange#is `LiveRange#is()`}\n\t * * {@link module:engine/model/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n\t * * {@link module:engine/model/selection~Selection#is `Selection#is()`}\n\t * * {@link module:engine/model/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n\t * * {@link module:engine/model/markercollection~Marker#is `Marker#is()`}\n\t * * {@link module:engine/model/textproxy~TextProxy#is `TextProxy#is()`}\n\t *\n\t * @method #is\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'node' || type == 'model:node';\n\t}\n\n\t/**\n\t * Creates a copy of this node, that is a node with exactly same attributes, and returns it.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/node~Node} Node with same attributes as this node.\n\t */\n\t_clone() {\n\t\treturn new Node( this._attrs );\n\t}\n\n\t/**\n\t * Removes this node from it's parent.\n\t *\n\t * @see module:engine/model/writer~Writer#remove\n\t * @protected\n\t */\n\t_remove() {\n\t\tthis.parent._removeChildren( this.index );\n\t}\n\n\t/**\n\t * Sets attribute on the node. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * @see module:engine/model/writer~Writer#setAttribute\n\t * @protected\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\t_setAttribute( key, value ) {\n\t\tthis._attrs.set( key, value );\n\t}\n\n\t/**\n\t * Removes all attributes from the node and sets given attributes.\n\t *\n\t * @see module:engine/model/writer~Writer#setAttributes\n\t * @protected\n\t * @param {Object} [attrs] Attributes to set. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\t_setAttributesTo( attrs ) {\n\t\tthis._attrs = toMap( attrs );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the node.\n\t *\n\t * @see module:engine/model/writer~Writer#removeAttribute\n\t * @protected\n\t * @param {String} key Key of attribute to remove.\n\t * @returns {Boolean} `true` if the attribute was set on the element, `false` otherwise.\n\t */\n\t_removeAttribute( key ) {\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Removes all attributes from the node.\n\t *\n\t * @see module:engine/model/writer~Writer#clearAttributes\n\t * @protected\n\t */\n\t_clearAttributes() {\n\t\tthis._attrs.clear();\n\t}\n}\n\n/**\n * The node's parent does not contain this node.\n *\n * This error may be thrown from corrupted trees.\n *\n * @error model-node-not-found-in-parent\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/nodelist\n */\n\nimport Node from './node';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\n * in classes like {@link module:engine/model/element~Element Element}\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n */\nexport default class NodeList {\n\t/**\n\t * Creates an empty node list.\n\t *\n\t * @protected\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes contained in this node list.\n\t */\n\tconstructor( nodes ) {\n\t\t/**\n\t\t * Nodes contained in this node list.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<module:engine/model/node~Node>}\n\t\t */\n\t\tthis._nodes = [];\n\n\t\tif ( nodes ) {\n\t\t\tthis._insertNodes( 0, nodes );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all nodes contained inside this node list.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._nodes[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._nodes.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Gets the node at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of node.\n\t * @returns {module:engine/model/node~Node|null} Node at given index.\n\t */\n\tgetNode( index ) {\n\t\treturn this._nodes[ index ] || null;\n\t}\n\n\t/**\n\t * Returns an index of the given node. Returns `null` if given node is not inside this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetNodeIndex( node ) {\n\t\tconst index = this._nodes.indexOf( node );\n\n\t\treturn index == -1 ? null : index;\n\t}\n\n\t/**\n\t * Returns the starting offset of given node. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Node to look for.\n\t * @returns {Number|null} Node's starting offset.\n\t */\n\tgetNodeStartOffset( node ) {\n\t\tconst index = this.getNodeIndex( node );\n\n\t\treturn index === null ? null : this._nodes.slice( 0, index ).reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Converts index to offset in node list.\n\t *\n\t * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.\n\t *\n\t * @param {Number} index Node's index.\n\t * @returns {Number} Node's starting offset.\n\t */\n\tindexToOffset( index ) {\n\t\tif ( index == this._nodes.length ) {\n\t\t\treturn this.maxOffset;\n\t\t}\n\n\t\tconst node = this._nodes[ index ];\n\n\t\tif ( !node ) {\n\t\t\t/**\n\t\t\t * Given index cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error nodelist-index-out-of-bounds\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-index-out-of-bounds: Given index cannot be found in the node list.', this );\n\t\t}\n\n\t\treturn this.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Converts offset in node list to index.\n\t *\n\t * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\tlet totalOffset = 0;\n\n\t\tfor ( const node of this._nodes ) {\n\t\t\tif ( offset >= totalOffset && offset < totalOffset + node.offsetSize ) {\n\t\t\t\treturn this.getNodeIndex( node );\n\t\t\t}\n\n\t\t\ttotalOffset += node.offsetSize;\n\t\t}\n\n\t\tif ( totalOffset != offset ) {\n\t\t\t/**\n\t\t\t * Given offset cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error model-nodelist-offset-out-of-bounds\n\t\t\t * @param {Number} offset\n\t\t\t * @param {module:engine/model/nodelist~NodeList} nodeList Stringified node list.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-offset-out-of-bounds: Given offset cannot be found in the node list.',\n\t\t\t\tthis,\n\t\t\t\t{\n\t\t\t\t\toffset,\n\t\t\t\t\tnodeList: this\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\treturn this.length;\n\t}\n\n\t/**\n\t * Inserts given nodes at given index.\n\t *\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to be inserted.\n\t */\n\t_insertNodes( index, nodes ) {\n\t\t// Validation.\n\t\tfor ( const node of nodes ) {\n\t\t\tif ( !( node instanceof Node ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to insert an object which is not a Node instance.\n\t\t\t\t *\n\t\t\t\t * @error nodelist-insertNodes-not-node\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-nodelist-insertNodes-not-node: Trying to insert an object which is not a Node instance.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._nodes.splice( index, 0, ...nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index.\n\t *\n\t * @protected\n\t * @param {Number} indexStart Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeNodes( indexStart, howMany = 1 ) {\n\t\treturn this._nodes.splice( indexStart, howMany );\n\t}\n\n\t/**\n\t * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\n\t * are also converted to their plain object representation.\n\t *\n\t * @returns {Array.<module:engine/model/node~Node>} `NodeList` instance converted to `Array`.\n\t */\n\ttoJSON() {\n\t\treturn this._nodes.map( node => node.toJSON() );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/treewalker\n */\n\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Position from './position';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n\t/**\n\t * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n\t *\n\t * @constructor\n\t * @param {Object} options Object with configuration.\n\t * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {module:engine/view/position~Position} [options.startPosition] Starting position.\n\t * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\n\t * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all characters from\n\t * {@link module:engine/view/text~Text} should be returned as one {@link module:engine/view/text~Text} (`false`) ore one by one as\n\t * {@link module:engine/view/textproxy~TextProxy} (`true`).\n\t * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\n\t * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\n\t * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\n\t * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\n\t * each {@link module:engine/view/element~Element} will be returned once, while if the option is `false` they might be returned\n\t * twice: for `'elementStart'` and `'elementEnd'`.\n\t */\n\tconstructor( options = {} ) {\n\t\tif ( !options.boundaries && !options.startPosition ) {\n\t\t\t/**\n\t\t\t * Neither boundaries nor starting position have been defined.\n\t\t\t *\n\t\t\t * @error view-tree-walker-no-start-position\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.',\n\t\t\t\tnull\n\t\t\t);\n\t\t}\n\n\t\tif ( options.direction && options.direction != 'forward' && options.direction != 'backward' ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.',\n\t\t\t\toptions.startPosition,\n\t\t\t\t{ direction: options.direction }\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Iterator boundaries.\n\t\t *\n\t\t * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\n\t\t * on the start of boundary, then `{ done: true }` is returned.\n\t\t *\n\t\t * If boundaries are not defined they are set before first and after last child of the root node.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/range~Range} module:engine/view/treewalker~TreeWalker#boundaries\n\t\t */\n\t\tthis.boundaries = options.boundaries || null;\n\n\t\t/**\n\t\t * Iterator position. If start position is not defined then position depends on {@link #direction}. If direction is\n\t\t * `'forward'` position starts form the beginning, when direction is `'backward'` position starts from the end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position} module:engine/view/treewalker~TreeWalker#position\n\t\t */\n\t\tif ( options.startPosition ) {\n\t\t\tthis.position = Position._createAt( options.startPosition );\n\t\t} else {\n\t\t\tthis.position = Position._createAt( options.boundaries[ options.direction == 'backward' ? 'end' : 'start' ] );\n\t\t}\n\n\t\t/**\n\t\t * Walking direction. Defaults `'forward'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'backward'|'forward'} module:engine/view/treewalker~TreeWalker#direction\n\t\t */\n\t\tthis.direction = options.direction || 'forward';\n\n\t\t/**\n\t\t * Flag indicating whether all characters from {@link module:engine/view/text~Text} should be returned as one\n\t\t * {@link module:engine/view/text~Text} or one by one as {@link module:engine/view/textproxy~TextProxy}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#singleCharacters\n\t\t */\n\t\tthis.singleCharacters = !!options.singleCharacters;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\n\t\t * iterated node will not be returned along with `elementEnd` tag.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#shallow\n\t\t */\n\t\tthis.shallow = !!options.shallow;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should ignore `elementEnd` tags. If set to `true`, walker will not\n\t\t * return a parent node of the start position. Each {@link module:engine/view/element~Element} will be returned once.\n\t\t * When set to `false` each element might be returned twice: for `'elementStart'` and `'elementEnd'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#ignoreElementEnd\n\t\t */\n\t\tthis.ignoreElementEnd = !!options.ignoreElementEnd;\n\n\t\t/**\n\t\t * Start boundary parent.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryStartParent\n\t\t */\n\t\tthis._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n\n\t\t/**\n\t\t * End boundary parent.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryEndParent\n\t\t */\n\t\tthis._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n\t *\n\t * For example:\n\t *\n\t * \t\twalker.skip( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n\t * \t\twalker.skip( value => true ); // Move the position to the end: <p>{}foo</p> -> <p>foo</p>[]\n\t * \t\twalker.skip( value => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t */\n\tskip( skip ) {\n\t\tlet done, value, prevPosition;\n\n\t\tdo {\n\t\t\tprevPosition = this.position;\n\n\t\t\t( { done, value } = this.next() );\n\t\t} while ( !done && skip( value ) );\n\n\t\tif ( !done ) {\n\t\t\tthis.position = prevPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the next tree walker's value.\n\t *\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} Object implementing iterator interface, returning\n\t * information about taken step.\n\t */\n\tnext() {\n\t\tif ( this.direction == 'forward' ) {\n\t\t\treturn this._next();\n\t\t} else {\n\t\t\treturn this._previous();\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step forward in view. Moves the {@link #position} to the next position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done `true` if iterator is done, `false` otherwise.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_next() {\n\t\tlet position = this.position.clone();\n\t\tconst previousPosition = this.position;\n\t\tconst parent = position.parent;\n\n\t\t// We are at the end of the root.\n\t\tif ( parent.parent === null && position.offset === parent.childCount ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just after current position.\n\t\tlet node;\n\n\t\t// Text is a specific parent because it contains string instead of child nodes.\n\t\tif ( parent instanceof Text ) {\n\t\t\tif ( position.isAtEnd ) {\n\t\t\t\t// Prevent returning \"elementEnd\" for Text node. Skip that value and return the next walker step.\n\t\t\t\tthis.position = Position._createAfter( parent );\n\n\t\t\t\treturn this._next();\n\t\t\t}\n\n\t\t\tnode = parent.data[ position.offset ];\n\t\t} else {\n\t\t\tnode = parent.getChild( position.offset );\n\t\t}\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition = new Position( node, 0 );\n\t\t\t} else {\n\t\t\t\tposition.offset++;\n\t\t\t}\n\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t} else if ( node instanceof Text ) {\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tposition = new Position( node, 0 );\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\tlet charactersCount = node.data.length;\n\t\t\t\tlet item;\n\n\t\t\t\t// If text stick out of walker range, we need to cut it and wrap in TextProxy.\n\t\t\t\tif ( node == this._boundaryEndParent ) {\n\t\t\t\t\tcharactersCount = this.boundaries.end.offset;\n\t\t\t\t\titem = new TextProxy( node, 0, charactersCount );\n\t\t\t\t\tposition = Position._createAfter( item );\n\t\t\t\t} else {\n\t\t\t\t\titem = new TextProxy( node, 0, node.data.length );\n\t\t\t\t\t// If not just keep moving forward.\n\t\t\t\t\tposition.offset++;\n\t\t\t\t}\n\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t\t}\n\t\t} else if ( typeof node == 'string' ) {\n\t\t\tlet textLength;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\ttextLength = 1;\n\t\t\t} else {\n\t\t\t\t// Check if text stick out of walker range.\n\t\t\t\tconst endOffset = parent === this._boundaryEndParent ? this.boundaries.end.offset : parent.data.length;\n\n\t\t\t\ttextLength = endOffset - position.offset;\n\t\t\t}\n\n\t\t\tconst textProxy = new TextProxy( parent, position.offset, textLength );\n\n\t\t\tposition.offset += textLength;\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'text', textProxy, previousPosition, position, textLength );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the end of current `parent`.\n\t\t\tposition = Position._createAfter( parent );\n\t\t\tthis.position = position;\n\n\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\treturn this._formatReturnValue( 'elementEnd', parent, previousPosition, position );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step backward in view. Moves the {@link #position} to the previous position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_previous() {\n\t\tlet position = this.position.clone();\n\t\tconst previousPosition = this.position;\n\t\tconst parent = position.parent;\n\n\t\t// We are at the beginning of the root.\n\t\tif ( parent.parent === null && position.offset === 0 ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just before current position.\n\t\tlet node;\n\n\t\t// Text {@link module:engine/view/text~Text} element is a specific parent because contains string instead of child nodes.\n\t\tif ( parent instanceof Text ) {\n\t\t\tif ( position.isAtStart ) {\n\t\t\t\t// Prevent returning \"elementStart\" for Text node. Skip that value and return the next walker step.\n\t\t\t\tthis.position = Position._createBefore( parent );\n\n\t\t\t\treturn this._previous();\n\t\t\t}\n\n\t\t\tnode = parent.data[ position.offset - 1 ];\n\t\t} else {\n\t\t\tnode = parent.getChild( position.offset - 1 );\n\t\t}\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition = new Position( node, node.childCount );\n\t\t\t\tthis.position = position;\n\n\t\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\t\treturn this._previous();\n\t\t\t\t} else {\n\t\t\t\t\treturn this._formatReturnValue( 'elementEnd', node, previousPosition, position );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tposition.offset--;\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t\t}\n\t\t} else if ( node instanceof Text ) {\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tposition = new Position( node, node.data.length );\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._previous();\n\t\t\t} else {\n\t\t\t\tlet charactersCount = node.data.length;\n\t\t\t\tlet item;\n\n\t\t\t\t// If text stick out of walker range, we need to cut it and wrap in TextProxy.\n\t\t\t\tif ( node == this._boundaryStartParent ) {\n\t\t\t\t\tconst offset = this.boundaries.start.offset;\n\n\t\t\t\t\titem = new TextProxy( node, offset, node.data.length - offset );\n\t\t\t\t\tcharactersCount = item.data.length;\n\t\t\t\t\tposition = Position._createBefore( item );\n\t\t\t\t} else {\n\t\t\t\t\titem = new TextProxy( node, 0, node.data.length );\n\t\t\t\t\t// If not just keep moving backward.\n\t\t\t\t\tposition.offset--;\n\t\t\t\t}\n\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t\t}\n\t\t} else if ( typeof node == 'string' ) {\n\t\t\tlet textLength;\n\n\t\t\tif ( !this.singleCharacters ) {\n\t\t\t\t// Check if text stick out of walker range.\n\t\t\t\tconst startOffset = parent === this._boundaryStartParent ? this.boundaries.start.offset : 0;\n\n\t\t\t\ttextLength = position.offset - startOffset;\n\t\t\t} else {\n\t\t\t\ttextLength = 1;\n\t\t\t}\n\n\t\t\tposition.offset -= textLength;\n\n\t\t\tconst textProxy = new TextProxy( parent, position.offset, textLength );\n\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'text', textProxy, previousPosition, position, textLength );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the beginning of current `parent`.\n\t\t\tposition = Position._createBefore( parent );\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'elementStart', parent, previousPosition, position, 1 );\n\t\t}\n\t}\n\n\t/**\n\t * Format returned data and adjust `previousPosition` and `nextPosition` if reach the bound of the {@link module:engine/view/text~Text}.\n\t *\n\t * @private\n\t * @param {module:engine/view/treewalker~TreeWalkerValueType} type Type of step.\n\t * @param {module:engine/view/item~Item} item Item between old and new position.\n\t * @param {module:engine/view/position~Position} previousPosition Previous position of iterator.\n\t * @param {module:engine/view/position~Position} nextPosition Next position of iterator.\n\t * @param {Number} [length] Length of the item.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue}\n\t */\n\t_formatReturnValue( type, item, previousPosition, nextPosition, length ) {\n\t\t// Text is a specific parent, because contains string instead of children.\n\t\t// Walker doesn't enter to the Text except situations when walker is iterating over every single character,\n\t\t// or the bound starts/ends inside the Text. So when the position is at the beginning or at the end of the Text\n\t\t// we move it just before or just after Text.\n\t\tif ( item instanceof TextProxy ) {\n\t\t\t// Position is at the end of Text.\n\t\t\tif ( item.offsetInText + item.data.length == item.textNode.data.length ) {\n\t\t\t\tif ( this.direction == 'forward' && !( this.boundaries && this.boundaries.end.isEqual( this.position ) ) ) {\n\t\t\t\t\tnextPosition = Position._createAfter( item.textNode );\n\t\t\t\t\t// When we change nextPosition of returned value we need also update walker current position.\n\t\t\t\t\tthis.position = nextPosition;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousPosition = Position._createAfter( item.textNode );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Position is at the begining ot the text.\n\t\t\tif ( item.offsetInText === 0 ) {\n\t\t\t\tif ( this.direction == 'backward' && !( this.boundaries && this.boundaries.start.isEqual( this.position ) ) ) {\n\t\t\t\t\tnextPosition = Position._createBefore( item.textNode );\n\t\t\t\t\t// When we change nextPosition of returned value we need also update walker current position.\n\t\t\t\t\tthis.position = nextPosition;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousPosition = Position._createBefore( item.textNode );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdone: false,\n\t\t\tvalue: {\n\t\t\t\ttype,\n\t\t\t\titem,\n\t\t\t\tpreviousPosition,\n\t\t\t\tnextPosition,\n\t\t\t\tlength\n\t\t\t}\n\t\t};\n\t}\n}\n\n/**\n * Type of the step made by {@link module:engine/view/treewalker~TreeWalker}.\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end\n * of node, or `'text'` if walker traversed over single and multiple characters.\n * For {@link module:engine/view/text~Text} `elementStart` and `elementEnd` is not returned.\n *\n * @typedef {String} module:engine/view/treewalker~TreeWalkerValueType\n */\n\n/**\n * Object returned by {@link module:engine/view/treewalker~TreeWalker} when traversing tree view.\n *\n * @typedef {Object} module:engine/view/treewalker~TreeWalkerValue\n * @property {module:engine/view/treewalker~TreeWalkerValueType} type\n * @property {module:engine/view/item~Item} item Item between the old and the new positions\n * of the tree walker.\n * @property {module:engine/view/position~Position} previousPosition Previous position of the iterator.\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\n * position before the item.\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after item.\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\n * inside of the text to its parent just before or just after that text.\n * @property {module:engine/view/position~Position} nextPosition Next position of the iterator.\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after the item.\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\n * before the item.\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\n * inside of the text to its parent just before or just after that text.\n * @property {Number} [length] Length of the item. For `'elementStart'` it is `1`. For `'text'` it is\n * the length of that text. For `'elementEnd'` it is `undefined`.\n */\n\n/**\n * Tree walking directions.\n *\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/markeroperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\n\n/**\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MarkerOperation extends Operation {\n\t/**\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/range~Range} oldRange Marker range before the change.\n\t * @param {module:engine/model/range~Range} newRange Marker range after the change.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Marker collection on which change should be executed.\n\t * @param {Boolean} affectsData Specifies whether the marker operation affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( name, oldRange, newRange, markers, affectsData, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Marker name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Marker range before the change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.oldRange = oldRange ? oldRange.clone() : null;\n\n\t\t/**\n\t\t * Marker range after the change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.newRange = newRange ? newRange.clone() : null;\n\n\t\t/**\n\t\t * Specifies whether the marker operation affects the data produced by the data pipeline\n\t\t * (is persisted in the editor's data).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.affectsData = affectsData;\n\n\t\t/**\n\t\t * Marker collection on which change should be executed.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis._markers = markers;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'marker';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new MarkerOperation( this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n\t */\n\tgetReversed() {\n\t\treturn new MarkerOperation( this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst type = this.newRange ? '_set' : '_remove';\n\n\t\tthis._markers[ type ]( this.name, this.newRange, true, this.affectsData );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tif ( this.oldRange ) {\n\t\t\tjson.oldRange = this.oldRange.toJSON();\n\t\t}\n\n\t\tif ( this.newRange ) {\n\t\t\tjson.newRange = this.newRange.toJSON();\n\t\t}\n\n\t\tdelete json._markers;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MarkerOperation';\n\t}\n\n\t/**\n\t * Creates `MarkerOperation` object from deserialized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new MarkerOperation(\n\t\t\tjson.name,\n\t\t\tjson.oldRange ? Range.fromJSON( json.oldRange, document ) : null,\n\t\t\tjson.newRange ? Range.fromJSON( json.newRange, document ) : null,\n\t\t\tdocument.model.markers,\n\t\t\tjson.affectsData,\n\t\t\tjson.baseVersion\n\t\t);\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/renameoperation\n */\n\nimport Operation from './operation';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Position from '../position';\n\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RenameOperation extends Operation {\n\t/**\n\t * Creates an operation that changes element's name.\n\t *\n\t * @param {module:engine/model/position~Position} position Position before an element to change.\n\t * @param {String} oldName Current name of the element.\n\t * @param {String} newName New name for the element.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, oldName, newName, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position before an element to change.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/renameoperation~RenameOperation#position\n\t\t */\n\t\tthis.position = position;\n\t\t// This position sticks to the next node because it is a position before the node that we want to change.\n\t\tthis.position.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Current name of the element.\n\t\t *\n\t\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#oldName\n\t\t */\n\t\tthis.oldName = oldName;\n\n\t\t/**\n\t\t * New name for the element.\n\t\t *\n\t\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#newName\n\t\t */\n\t\tthis.newName = newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'rename';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/renameoperation~RenameOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new RenameOperation( this.position.clone(), this.oldName, this.newName, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/renameoperation~RenameOperation}\n\t */\n\tgetReversed() {\n\t\treturn new RenameOperation( this.position.clone(), this.newName, this.oldName, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.position.nodeAfter;\n\n\t\tif ( !( element instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Given position is invalid or node after it is not instance of Element.\n\t\t\t *\n\t\t\t * @error rename-operation-wrong-position\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rename-operation-wrong-position: Given position is invalid or node after it is not an instance of Element.',\n\t\t\t\tthis\n\t\t\t);\n\t\t} else if ( element.name !== this.oldName ) {\n\t\t\t/**\n\t\t\t * Element to change has different name than operation's old name.\n\t\t\t *\n\t\t\t * @error rename-operation-wrong-name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rename-operation-wrong-name: Element to change has different name than operation\\'s old name.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst element = this.position.nodeAfter;\n\n\t\telement.name = this.newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'RenameOperation';\n\t}\n\n\t/**\n\t * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new RenameOperation( Position.fromJSON( json.position, document ), json.oldName, json.newName, json.baseVersion );\n\t}\n}\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/diff\n */\n\nimport fastDiff from '../src/fastdiff';\n\n// The following code is based on the \"O(NP) Sequence Comparison Algorithm\"\n// by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n\n/**\n * Calculates the difference between two arrays or strings producing an array containing a list of changes\n * necessary to transform input into output.\n *\n *\t\tdiff( 'aba', 'acca' ); // [ 'equal', 'insert', 'insert', 'delete', 'equal' ]\n *\n * This function is based on the \"O(NP) Sequence Comparison Algorithm\" by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n * Unfortunately, while it gives the most precise results, its to complex for longer strings/arrow (above 200 items).\n * Therefore, `diff()` automatically switches to {@link module:utils/fastdiff~fastDiff `fastDiff()`} when detecting\n * such a scenario. The return formats of both functions are identical.\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Output array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default === is used.\n * @returns {Array} Array of changes.\n */\nexport default function diff( a, b, cmp ) {\n\t// Set the comparator function.\n\tcmp = cmp || function( a, b ) {\n\t\treturn a === b;\n\t};\n\n\tconst aLength = a.length;\n\tconst bLength = b.length;\n\n\t// Perform `fastDiff` for longer strings/arrays (see #269).\n\tif ( aLength > 200 || bLength > 200 || aLength + bLength > 300 ) {\n\t\treturn diff.fastDiff( a, b, cmp, true );\n\t}\n\n\t// Temporary action type statics.\n\tlet _insert, _delete;\n\n\t// Swapped the arrays to use the shorter one as the first one.\n\tif ( bLength < aLength ) {\n\t\tconst tmp = a;\n\n\t\ta = b;\n\t\tb = tmp;\n\n\t\t// We swap the action types as well.\n\t\t_insert = 'delete';\n\t\t_delete = 'insert';\n\t} else {\n\t\t_insert = 'insert';\n\t\t_delete = 'delete';\n\t}\n\n\tconst m = a.length;\n\tconst n = b.length;\n\tconst delta = n - m;\n\n\t// Edit scripts, for each diagonal.\n\tconst es = {};\n\t// Furthest points, the furthest y we can get on each diagonal.\n\tconst fp = {};\n\n\tfunction snake( k ) {\n\t\t// We use -1 as an alternative below to handle initial values ( instead of filling the fp with -1 first ).\n\t\t// Furthest points (y) on the diagonal below k.\n\t\tconst y1 = ( fp[ k - 1 ] !== undefined ? fp[ k - 1 ] : -1 ) + 1;\n\t\t// Furthest points (y) on the diagonal above k.\n\t\tconst y2 = fp[ k + 1 ] !== undefined ? fp[ k + 1 ] : -1;\n\t\t// The way we should go to get further.\n\t\tconst dir = y1 > y2 ? -1 : 1;\n\n\t\t// Clone previous changes array (if any).\n\t\tif ( es[ k + dir ] ) {\n\t\t\tes[ k ] = es[ k + dir ].slice( 0 );\n\t\t}\n\n\t\t// Create changes array.\n\t\tif ( !es[ k ] ) {\n\t\t\tes[ k ] = [];\n\t\t}\n\n\t\t// Push the action.\n\t\tes[ k ].push( y1 > y2 ? _insert : _delete );\n\n\t\t// Set the beginning coordinates.\n\t\tlet y = Math.max( y1, y2 );\n\t\tlet x = y - k;\n\n\t\t// Traverse the diagonal as long as the values match.\n\t\twhile ( x < m && y < n && cmp( a[ x ], b[ y ] ) ) {\n\t\t\tx++;\n\t\t\ty++;\n\t\t\t// Push no change action.\n\t\t\tes[ k ].push( 'equal' );\n\t\t}\n\n\t\treturn y;\n\t}\n\n\tlet p = 0;\n\tlet k;\n\n\t// Traverse the graph until we reach the end of the longer string.\n\tdo {\n\t\t// Updates furthest points and edit scripts for diagonals below delta.\n\t\tfor ( k = -p; k < delta; k++ ) {\n\t\t\tfp[ k ] = snake( k );\n\t\t}\n\n\t\t// Updates furthest points and edit scripts for diagonals above delta.\n\t\tfor ( k = delta + p; k > delta; k-- ) {\n\t\t\tfp[ k ] = snake( k );\n\t\t}\n\n\t\t// Updates furthest point and edit script for the delta diagonal.\n\t\t// note that the delta diagonal is the one which goes through the sink (m, n).\n\t\tfp[ delta ] = snake( delta );\n\n\t\tp++;\n\t} while ( fp[ delta ] !== n );\n\n\t// Return the final list of edit changes.\n\t// We remove the first item that represents the action for the injected nulls.\n\treturn es[ delta ].slice( 1 );\n}\n\n// Store the API in static property to easily overwrite it in tests.\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\ndiff.fastDiff = fastDiff;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/isnode\n */\n\n/**\n * Checks if the object is a native DOM Node.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isNode( obj ) {\n\tif ( obj ) {\n\t\tif ( obj.defaultView ) {\n\t\t\treturn obj instanceof obj.defaultView.Document;\n\t\t} else if ( obj.ownerDocument && obj.ownerDocument.defaultView ) {\n\t\t\treturn obj instanceof obj.ownerDocument.defaultView.Node;\n\t\t}\n\t}\n\n\treturn false;\n}\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/model/documentfragment\n */\n\nimport NodeList from './nodelist';\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * DocumentFragment represents a part of model which does not have a common root but it's top-level nodes\n * can be seen as siblings. In other words, it is a detached part of model tree, without a root.\n *\n * DocumentFragment has own {@link module:engine/model/markercollection~MarkerCollection}. Markers from this collection\n * will be set to the {@link module:engine/model/model~Model#markers model markers} by a\n * {@link module:engine/model/writer~Writer#insert} function.\n */\nexport default class DocumentFragment {\n\t/**\n\t * Creates an empty `DocumentFragment`.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createDocumentFragment} method instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n\t * Nodes to be contained inside the `DocumentFragment`.\n\t */\n\tconstructor( children ) {\n\t\t/**\n\t\t * DocumentFragment static markers map. This is a list of names and {@link module:engine/model/range~Range ranges}\n\t\t * which will be set as Markers to {@link module:engine/model/model~Model#markers model markers collection}\n\t\t * when DocumentFragment will be inserted to the document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Map<String,module:engine/model/range~Range>} module:engine/model/documentfragment~DocumentFragment#markers\n\t\t */\n\t\tthis.markers = new Map();\n\n\t\t/**\n\t\t * List of nodes contained inside the document fragment.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/documentfragment~DocumentFragment#_children\n\t\t */\n\t\tthis._children = new NodeList();\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all nodes contained inside this document fragment.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this.getChildren();\n\t}\n\n\t/**\n\t * Number of this document fragment's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this document fragment's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._children.maxOffset;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {null}\n\t */\n\tget parent() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tdocFrag.is( 'documentFragment' ); // -> true\n\t *\t\tdocFrag.is( 'model:documentFragment' ); // -> true\n\t *\n\t *\t\tdocFrag.is( 'view:documentFragment' ); // -> false\n\t *\t\tdocFrag.is( 'element' ); // -> false\n\t *\t\tdocFrag.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'documentFragment' || type == 'model:documentFragment';\n\t}\n\n\t/**\n\t * Gets the child at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/model/node~Node|null} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children.getNode( index );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all of this document fragment's children.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an index of the given child node. Returns `null` if given node is not a child of this document fragment.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.getNodeIndex( node );\n\t}\n\n\t/**\n\t * Returns the starting offset of given child. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n\t * given node is not a child of this document fragment.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's starting offset.\n\t */\n\tgetChildStartOffset( node ) {\n\t\treturn this._children.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Returns path to a `DocumentFragment`, which is an empty array. Added for compatibility reasons.\n\t *\n\t * @returns {Array}\n\t */\n\tgetPath() {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns a descendant node by its path relative to this element.\n\t *\n\t *\t\t// <this>a<b>c</b></this>\n\t *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n\t *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n\t *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n\t *\n\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n\t * @returns {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tgetNodeByPath( relativePath ) {\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\tfor ( const index of relativePath ) {\n\t\t\tnode = node.getChild( node.offsetToIndex( index ) );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Converts offset \"position\" to index \"position\".\n\t *\n\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n\t * too high, returns index after last child}.\n\t *\n\t *\t\tconst textNode = new Text( 'foo' );\n\t *\t\tconst pElement = new Element( 'p' );\n\t *\t\tconst docFrag = new DocumentFragment( [ textNode, pElement ] );\n\t *\t\tdocFrag.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n\t *\t\tdocFrag.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n\t *\t\tdocFrag.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n\t *\t\tdocFrag.offsetToIndex( 2 ); // Returns 0.\n\t *\t\tdocFrag.offsetToIndex( 3 ); // Returns 1.\n\t *\t\tdocFrag.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\treturn this._children.offsetToIndex( offset );\n\t}\n\n\t/**\n\t * Converts `DocumentFragment` instance to plain object and returns it.\n\t * Takes care of converting all of this document fragment's children.\n\t *\n\t * @returns {Object} `DocumentFragment` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = [];\n\n\t\tfor ( const node of this._children ) {\n\t\t\tjson.push( node.toJSON() );\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a `DocumentFragment` instance from given plain object (i.e. parsed JSON string).\n\t * Converts `DocumentFragment` children to proper nodes.\n\t *\n\t * @param {Object} json Plain object to be converted to `DocumentFragment`.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} `DocumentFragment` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\treturn new DocumentFragment( children );\n\t}\n\n\t/**\n\t * {@link #_insertChild Inserts} one or more nodes at the end of this document fragment.\n\t *\n\t * @protected\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_appendChild( items ) {\n\t\tthis._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n\t * to this document fragment.\n\t *\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_insertChild( index, items ) {\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t}\n\n\t\tthis._children._insertNodes( index, nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index\n\t * and sets {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n\t *\n\t * @protected\n\t * @param {Number} index Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tconst nodes = this._children._removeNodes( index, howMany );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tnode.parent = null;\n\t\t}\n\n\t\treturn nodes;\n\t}\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>}\n// @returns {Iterable.<module:engine/model/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data, node.getAttributes() );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/documentfragment\n */\n\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\n/**\n * Document fragment.\n *\n * To create a new document fragment instance use the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createDocumentFragment `UpcastWriter#createDocumentFragment()`}\n * method.\n */\nexport default class DocumentFragment {\n\t/**\n\t * Creates new DocumentFragment instance.\n\t *\n\t * @protected\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into the created document fragment.\n\t */\n\tconstructor( children ) {\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/element~Element>} module:engine/view/documentfragment~DocumentFragment#_children\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over nodes added to this document fragment.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of child nodes in this document fragment.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {null}\n\t */\n\tget parent() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tdocFrag.is( 'documentFragment' ); // -> true\n\t *\t\tdocFrag.is( 'view:documentFragment' ); // -> true\n\t *\n\t *\t\tdocFrag.is( 'model:documentFragment' ); // -> false\n\t *\t\tdocFrag.is( 'element' ); // -> false\n\t *\t\tdocFrag.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'documentFragment' || type == 'view:documentFragment';\n\t}\n\n\t/**\n\t * {@link module:engine/view/documentfragment~DocumentFragment#_insertChild Insert} a child node or a list of child nodes at the end\n\t * and sets the parent of these nodes to this fragment.\n\t *\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @returns {Number} Number of appended nodes.\n\t */\n\t_appendChild( items ) {\n\t\treturn this._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this fragment.\n\t *\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\t_insertChild( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Fires `change` event with given type of the change.\n\t *\n\t * @private\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Changed node.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_fireChange( type, node ) {\n\t\tthis.fire( 'change:' + type, node );\n\t}\n}\n\nmix( DocumentFragment, EmitterMixin );\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/datatransfer\n */\n\n/**\n * Facade over the native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n */\nexport default class DataTransfer {\n\tconstructor( nativeDataTransfer ) {\n\t\t/**\n\t\t * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<File>} #files\n\t\t */\n\t\tthis.files = getFiles( nativeDataTransfer );\n\n\t\t/**\n\t\t * The native DataTransfer object.\n\t\t *\n\t\t * @private\n\t\t * @member {DataTransfer} #_native\n\t\t */\n\t\tthis._native = nativeDataTransfer;\n\t}\n\n\t/**\n\t * Returns an array of available native content types.\n\t *\n\t * @returns {Array.<String>}\n\t */\n\tget types() {\n\t\treturn this._native.types;\n\t}\n\n\t/**\n\t * Gets data from the data transfer by its mime type.\n\t *\n\t *\t\tdataTransfer.getData( 'text/plain' );\n\t *\n\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n\t * @returns {String}\n\t */\n\tgetData( type ) {\n\t\treturn this._native.getData( type );\n\t}\n\n\t/**\n\t * Sets data in the data transfer.\n\t *\n\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n\t * @param {String} data\n\t */\n\tsetData( type, data ) {\n\t\tthis._native.setData( type, data );\n\t}\n}\n\nfunction getFiles( nativeDataTransfer ) {\n\t// DataTransfer.files and items are Array-like and might not have an iterable interface.\n\tconst files = nativeDataTransfer.files ? Array.from( nativeDataTransfer.files ) : [];\n\tconst items = nativeDataTransfer.items ? Array.from( nativeDataTransfer.items ) : [];\n\n\tif ( files.length ) {\n\t\treturn files;\n\t}\n\t// Chrome have empty DataTransfer.files, but let get files through the items interface.\n\treturn items\n\t\t.filter( item => item.kind === 'file' )\n\t\t.map( item => item.getAsFile() );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboardobserver\n */\n\nimport DomEventObserver from '@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver';\nimport EventInfo from '@ckeditor/ckeditor5-utils/src/eventinfo';\nimport DataTransfer from './datatransfer';\n\n/**\n * Clipboard events observer.\n *\n * Fires the following events:\n *\n * * {@link module:engine/view/document~Document#event:clipboardInput}\n * * {@link module:engine/view/document~Document#event:dragover}\n * * {@link module:engine/view/document~Document#event:drop}\n * * {@link module:engine/view/document~Document#event:paste}\n * * {@link module:engine/view/document~Document#event:copy}\n * * {@link module:engine/view/document~Document#event:cut}\n *\n * Note that this observer is not available by default (it is not added by the engine).\n * To make it available it needs to be added to {@link module:engine/view/document~Document} by\n * the {@link module:engine/view/view~View#addObserver `View#addObserver()`} method. You can also load the\n * {@link module:clipboard/clipboard~Clipboard} plugin which adds this observer automatically (because it uses it).\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class ClipboardObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst viewDocument = this.document;\n\n\t\tthis.domEventType = [ 'paste', 'copy', 'cut', 'drop', 'dragover' ];\n\n\t\tthis.listenTo( viewDocument, 'paste', handleInput, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'drop', handleInput, { priority: 'low' } );\n\n\t\tfunction handleInput( evt, data ) {\n\t\t\tdata.preventDefault();\n\n\t\t\tconst targetRanges = data.dropRange ? [ data.dropRange ] : Array.from( viewDocument.selection.getRanges() );\n\n\t\t\tconst eventInfo = new EventInfo( viewDocument, 'clipboardInput' );\n\n\t\t\tviewDocument.fire( eventInfo, {\n\t\t\t\tdataTransfer: data.dataTransfer,\n\t\t\t\ttargetRanges\n\t\t\t} );\n\n\t\t\t// If CKEditor handled the input, do not bubble the original event any further.\n\t\t\t// This helps external integrations recognize that fact and act accordingly.\n\t\t\t// https://github.com/ckeditor/ckeditor5-upload/issues/92\n\t\t\tif ( eventInfo.stop.called ) {\n\t\t\t\tdata.stopPropagation();\n\t\t\t}\n\t\t}\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tconst evtData = {\n\t\t\tdataTransfer: new DataTransfer( domEvent.clipboardData ? domEvent.clipboardData : domEvent.dataTransfer )\n\t\t};\n\n\t\tif ( domEvent.type == 'drop' ) {\n\t\t\tevtData.dropRange = getDropViewRange( this.view, domEvent );\n\t\t}\n\n\t\tthis.fire( domEvent.type, domEvent, evtData );\n\t}\n}\n\nfunction getDropViewRange( view, domEvent ) {\n\tconst domDoc = domEvent.target.ownerDocument;\n\tconst x = domEvent.clientX;\n\tconst y = domEvent.clientY;\n\tlet domRange;\n\n\t// Webkit & Blink.\n\tif ( domDoc.caretRangeFromPoint && domDoc.caretRangeFromPoint( x, y ) ) {\n\t\tdomRange = domDoc.caretRangeFromPoint( x, y );\n\t}\n\t// FF.\n\telse if ( domEvent.rangeParent ) {\n\t\tdomRange = domDoc.createRange();\n\t\tdomRange.setStart( domEvent.rangeParent, domEvent.rangeOffset );\n\t\tdomRange.collapse( true );\n\t}\n\n\tif ( domRange ) {\n\t\treturn view.domConverter.domRangeToView( domRange );\n\t} else {\n\t\treturn view.document.selection.getFirstRange();\n\t}\n}\n\n/**\n * Fired as a continuation of {@link #event:paste} and {@link #event:drop} events.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * Fired with a `dataTransfer` which comes from the clipboard and which content should be processed\n * and inserted into the editor.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardInput\n * @param {Object} data Event data.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges Ranges which are the target of the operation\n * (usually – into which the content should be inserted).\n * If clipboard input was triggered by a paste operation, then these are the selection ranges. If by a drop operation,\n * then it's the drop position (which can be different than the selection at the moment of drop).\n */\n\n/**\n * Fired when user drags content over one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:dragover\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user dropped content into one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:drop\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n * @param {module:engine/view/range~Range} dropRange The position into which the content is dropped.\n */\n\n/**\n * Fired when user pasted content into one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:paste\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user copied content from one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @event module:engine/view/document~Document#event:copy\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user cut content from one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @event module:engine/view/document~Document#event:cut\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:paste},\n * {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut} events.\n *\n * In order to access clipboard data use `dataTransfer` property.\n *\n * @class module:clipboard/clipboardobserver~ClipboardEventData\n * @extends module:engine/view/observer/domeventdata~DomEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboardobserver~ClipboardEventData#dataTransfer\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/viewtoplaintext\n */\n\n// Elements which should not have empty-line padding.\n// Most `view.ContainerElement` want to be separate by new-line, but some are creating one structure\n// together (like `<li>`) so it is better to separate them by only one \"\\n\".\nconst smallPaddingElements = [ 'figcaption', 'li' ];\n\n/**\n * Converts {@link module:engine/view/item~Item view item} and all of its children to plain text.\n *\n * @param {module:engine/view/item~Item} viewItem View item to convert.\n * @returns {String} Plain text representation of `viewItem`.\n */\nexport default function viewToPlainText( viewItem ) {\n\tlet text = '';\n\n\tif ( viewItem.is( 'text' ) || viewItem.is( 'textProxy' ) ) {\n\t\t// If item is `Text` or `TextProxy` simple take its text data.\n\t\ttext = viewItem.data;\n\t} else if ( viewItem.is( 'img' ) && viewItem.hasAttribute( 'alt' ) ) {\n\t\t// Special case for images - use alt attribute if it is provided.\n\t\ttext = viewItem.getAttribute( 'alt' );\n\t} else {\n\t\t// Other elements are document fragments, attribute elements or container elements.\n\t\t// They don't have their own text value, so convert their children.\n\t\tlet prev = null;\n\n\t\tfor ( const child of viewItem.getChildren() ) {\n\t\t\tconst childText = viewToPlainText( child );\n\n\t\t\t// Separate container element children with one or more new-line characters.\n\t\t\tif ( prev && ( prev.is( 'containerElement' ) || child.is( 'containerElement' ) ) ) {\n\t\t\t\tif ( smallPaddingElements.includes( prev.name ) || smallPaddingElements.includes( child.name ) ) {\n\t\t\t\t\ttext += '\\n';\n\t\t\t\t} else {\n\t\t\t\t\ttext += '\\n\\n';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttext += childText;\n\t\t\tprev = child;\n\t\t}\n\t}\n\n\treturn text;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboard\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport ClipboardObserver from './clipboardobserver';\n\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js';\n\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\n\n/**\n * The clipboard feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through the clipboard pipeline in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with serialized editor's data.\n *\n * Read more about the clipboard integration in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive} guide.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Clipboard extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Clipboard';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst modelDocument = editor.model.document;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t/**\n\t\t * Data processor used to convert pasted HTML to a view structure.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/htmldataprocessor~HtmlDataProcessor} #_htmlDataProcessor\n\t\t */\n\t\tthis._htmlDataProcessor = new HtmlDataProcessor();\n\n\t\tview.addObserver( ClipboardObserver );\n\n\t\t// The clipboard paste pipeline.\n\n\t\t// Pasting and dropping is disabled when editor is read-only.\n\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\tthis.listenTo( viewDocument, 'clipboardInput', evt => {\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardInput', ( evt, data ) => {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\t\t\tlet content = '';\n\n\t\t\tif ( dataTransfer.getData( 'text/html' ) ) {\n\t\t\t\tcontent = normalizeClipboardHtml( dataTransfer.getData( 'text/html' ) );\n\t\t\t} else if ( dataTransfer.getData( 'text/plain' ) ) {\n\t\t\t\tcontent = plainTextToHtml( dataTransfer.getData( 'text/plain' ) );\n\t\t\t}\n\n\t\t\tcontent = this._htmlDataProcessor.toView( content );\n\n\t\t\tthis.fire( 'inputTransformation', { content, dataTransfer } );\n\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this, 'inputTransformation', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tconst dataController = this.editor.data;\n\t\t\t\tconst model = this.editor.model;\n\n\t\t\t\t// Convert the pasted content to a model document fragment.\n\t\t\t\t// Conversion is contextual, but in this case we need an \"all allowed\" context and for that\n\t\t\t\t// we use the $clipboardHolder item.\n\t\t\t\tconst modelFragment = dataController.toModel( data.content, '$clipboardHolder' );\n\n\t\t\t\tif ( modelFragment.childCount == 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmodel.insertContent( modelFragment );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// The clipboard copy/cut pipeline.\n\n\t\tfunction onCopyCut( evt, data ) {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\n\t\t\tdata.preventDefault();\n\n\t\t\tconst content = editor.data.toView( editor.model.getSelectedContent( modelDocument.selection ) );\n\n\t\t\tviewDocument.fire( 'clipboardOutput', { dataTransfer, content, method: evt.name } );\n\t\t}\n\n\t\tthis.listenTo( viewDocument, 'copy', onCopyCut, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'cut', ( evt, data ) => {\n\t\t\t// Cutting is disabled when editor is read-only.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t} else {\n\t\t\t\tonCopyCut( evt, data );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardOutput', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tdata.dataTransfer.setData( 'text/html', this._htmlDataProcessor.toData( data.content ) );\n\t\t\t\tdata.dataTransfer.setData( 'text/plain', viewToPlainText( data.content ) );\n\t\t\t}\n\n\t\t\tif ( data.method == 'cut' ) {\n\t\t\t\teditor.model.deleteContent( modelDocument.selection );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n}\n\n/**\n * Fired with a `content` and `dataTransfer` objects. The `content` which comes from the clipboard (was pasted or dropped)\n * should be processed in order to be inserted into the editor. The `dataTransfer` object is available\n * in case the transformation functions needs access to a raw clipboard data.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:clipboard/clipboard~Clipboard#event:inputTransformation\n * @param {Object} data Event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content Event data. Content to be inserted into the editor.\n * It can be modified by the event listeners. Read more about the clipboard pipelines in\n * {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of selected content. The content can be processed before it ends up in the clipboard.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#output-pipeline \"clipboard output pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboard~ClipboardOutputEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboard~ClipboardOutputEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboard~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboard~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboard~ClipboardOutputEventData#method\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/normalizeclipboarddata\n */\n\n/**\n * Removes some popular browser quirks out of the clipboard data (HTML).\n *\n * @param {String} data The HTML data to normalize.\n * @returns {String} Normalized HTML.\n */\nexport default function normalizeClipboardData( data ) {\n\treturn data\n\t\t.replace( /<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, ( fullMatch, spaces ) => {\n\t\t\t// Handle the most popular and problematic case when even a single space becomes an nbsp;.\n\t\t\t// Decode those to normal spaces. Read more in https://github.com/ckeditor/ckeditor5-clipboard/issues/2.\n\t\t\tif ( spaces.length == 1 ) {\n\t\t\t\treturn ' ';\n\t\t\t}\n\n\t\t\treturn spaces;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/plaintexttohtml\n */\n\n/**\n * Converts plain text to its HTML-ized version.\n *\n * @param {String} text The plain text to convert.\n * @returns {String} HTML generated from the plain text.\n */\nexport default function plainTextToHtml( text ) {\n\ttext = text\n\t\t// Encode <>.\n\t\t.replace( /</g, '&lt;' )\n\t\t.replace( />/g, '&gt;' )\n\t\t// Creates paragraphs for every line breaks.\n\t\t.replace( /\\n/g, '</p><p>' )\n\t\t// Preserve trailing spaces (only the first and last one – the rest is handled below).\n\t\t.replace( /^\\s/, '&nbsp;' )\n\t\t.replace( /\\s$/, '&nbsp;' )\n\t\t// Preserve other subsequent spaces now.\n\t\t.replace( /\\s\\s/g, ' &nbsp;' );\n\n\tif ( text.indexOf( '</p><p>' ) > -1 ) {\n\t\t// If we created paragraphs above, add the trailing ones.\n\t\ttext = `<p>${ text }</p>`;\n\t}\n\n\t// TODO:\n\t// * What about '\\nfoo' vs ' foo'?\n\n\treturn text;\n}\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice.js';\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nexport default castSlice;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nexport default hasUnicode;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nexport default asciiToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nexport default unicodeToArray;\n","import asciiToArray from './_asciiToArray.js';\nimport hasUnicode from './_hasUnicode.js';\nimport unicodeToArray from './_unicodeToArray.js';\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nexport default stringToArray;\n","import castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nexport default createCaseFirst;\n","import createCaseFirst from './_createCaseFirst.js';\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nexport default upperFirst;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/utils\n */\nimport { upperFirst } from 'lodash-es';\nconst ATTRIBUTE_WHITESPACES = /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g;\n// eslint-disable-line no-control-regex\nconst SAFE_URL = /^(?:(?:https?|ftps?|mailto):|[^a-z]|[a-z+.-]+(?:[^a-z+.:-]|$))/i;\n/**\n * Returns `true` if a given view node is the link element.\n *\n * @param {module:engine/view/node~Node} node\n * @returns {Boolean}\n */\nexport function isLinkElement(node) {\n    return node.is('attributeElement') && !!node.getCustomProperty('link');\n}\n/**\n * Creates link {@link module:engine/view/attributeelement~AttributeElement} with the provided `href` attribute.\n *\n * @param {String} href\n * @returns {module:engine/view/attributeelement~AttributeElement}\n */\nexport function createLinkElement(href, writer) {\n    // Priority 5 - https://github.com/ckeditor/ckeditor5-link/issues/121.\n    const linkElement = writer.createAttributeElement('a', { href }, { priority: 5 });\n    writer.setCustomProperty('link', true, linkElement);\n    return linkElement;\n}\n/**\n * Returns a safe URL based on a given value.\n *\n * A URL is considered safe if it is safe for the user (does not contain any malicious code).\n *\n * If a URL is considered unsafe, a simple `\"#\"` is returned.\n *\n * @protected\n * @param {*} url\n * @returns {String} Safe URL.\n */\nexport function ensureSafeUrl(url) {\n    url = String(url);\n    return isSafeUrl(url) ? url : '#';\n}\n// Checks whether the given URL is safe for the user (does not contain any malicious code).\n//\n// @param {String} url URL to check.\nfunction isSafeUrl(url) {\n    const normalizedUrl = url.replace(ATTRIBUTE_WHITESPACES, '');\n    return normalizedUrl.match(SAFE_URL);\n}\n/**\n * Returns the {@link module:link/link~LinkConfig#decorators `config.link.decorators`} configuration processed\n * to respect the locale of the editor, i.e. to display the {@link module:link/link~LinkDecoratorManualDefinition label}\n * in the correct language.\n *\n * **Note**: Only the few most commonly used labels are translated automatically. Other labels should be manually\n * translated in the {@link module:link/link~LinkConfig#decorators `config.link.decorators`} configuration.\n *\n * @param {module:utils/locale~Locale#t} t shorthand for {@link module:utils/locale~Locale#t Locale#t}\n * @param {Array.<module:link/link~LinkDecoratorDefinition>} The decorator reference\n * where the label values should be localized.\n * @returns {Array.<module:link/link~LinkDecoratorDefinition>}\n */\nexport function getLocalizedDecorators(t, decorators) {\n    const localizedDecoratorsLabels = {\n        'Open in a new tab': t('Open in a new tab'),\n        'Downloadable': t('Downloadable')\n    };\n    decorators.forEach(decorator => {\n        if (decorator.label && localizedDecoratorsLabels[decorator.label]) {\n            decorator.label = localizedDecoratorsLabels[decorator.label];\n        }\n        return decorator;\n    });\n    return decorators;\n}\n/**\n * Converts an object with defined decorators to a normalized array of decorators. The `id` key is added for each decorator and\n * is used as the attribute's name in the model.\n *\n * @param {Object.<String, module:link/link~LinkDecoratorDefinition>} decorators\n * @returns {Array.<module:link/link~LinkDecoratorDefinition>}\n */\nexport function normalizeDecorators(decorators) {\n    const retArray = [];\n    if (decorators) {\n        for (const [key, value] of Object.entries(decorators)) {\n            const decorator = Object.assign({}, value, { id: `link${ upperFirst(key) }` });\n            retArray.push(decorator);\n        }\n    }\n    return retArray;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/liverange\n */\n\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * `LiveRange` is a type of {@link module:engine/model/range~Range Range}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Be very careful when dealing with `LiveRange`. Each `LiveRange` instance bind events that might\n * have to be unbound. Use {@link module:engine/model/liverange~LiveRange#detach detach} whenever you don't need `LiveRange` anymore.\n */\nexport default class LiveRange extends Range {\n\t/**\n\t * Creates a live range.\n\t *\n\t * @see module:engine/model/range~Range\n\t */\n\tconstructor( start, end ) {\n\t\tsuper( start, end );\n\n\t\tbindWithDocument.call( this );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by `LiveRange`. Use it whenever you don't need `LiveRange` instance\n\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n\t * referring to it).\n\t */\n\tdetach() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tliveRange.is( 'range' ); // -> true\n\t *\t\tliveRange.is( 'model:range' ); // -> true\n\t *\t\tliveRange.is( 'liveRange' ); // -> true\n\t *\t\tliveRange.is( 'model:liveRange' ); // -> true\n\t *\n\t *\t\tliveRange.is( 'view:range' ); // -> false\n\t *\t\tliveRange.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'liveRange' || type == 'model:liveRange' || super.is( type );\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/range~Range range instance} that is equal to this live range.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\ttoRange() {\n\t\treturn new Range( this.start, this.end );\n\t}\n\n\t/**\n\t * Creates a `LiveRange` instance that is equal to the given range.\n\t *\n\t * @param {module:engine/model/range~Range} range\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\tstatic fromRange( range ) {\n\t\treturn new LiveRange( range.start, range.end );\n\t}\n\n\t/**\n\t * @see module:engine/model/range~Range._createIn\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liverange~LiveRange._createIn\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * @see module:engine/model/range~Range._createOn\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liverange~LiveRange._createOn\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * @see module:engine/model/range~Range._createFromPositionAndShift\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liverange~LiveRange._createFromPositionAndShift\n\t * @param {module:engine/model/position~Position} position\n\t * @param {Number} shift\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * Fired when `LiveRange` instance boundaries have changed due to changes in the\n\t * {@link module:engine/model/document~Document document}.\n\t *\n\t * @event change:range\n\t * @param {module:engine/model/range~Range} oldRange Range with start and end position equal to start and end position of this live\n\t * range before it got changed.\n\t * @param {Object} data Object with additional information about the change.\n\t * @param {module:engine/model/position~Position|null} data.deletionPosition Source position for remove and merge changes.\n\t * Available if the range was moved to the graveyard root, `null` otherwise.\n\t */\n\n\t/**\n\t * Fired when `LiveRange` instance boundaries have not changed after a change in {@link module:engine/model/document~Document document}\n\t * but the change took place inside the range, effectively changing its content.\n\t *\n\t * @event change:content\n\t * @param {module:engine/model/range~Range} range Range with start and end position equal to start and end position of\n\t * change range.\n\t * @param {Object} data Object with additional information about the change.\n\t * @param {null} data.deletionPosition Due to the nature of this event, this property is always set to `null`. It is passed\n\t * for compatibility with the {@link module:engine/model/liverange~LiveRange#event:change:range} event.\n\t */\n}\n\n// Binds this `LiveRange` to the {@link module:engine/model/document~Document document}\n// that owns this range's {@link module:engine/model/range~Range#root root}.\n//\n// @private\nfunction bindWithDocument() {\n\tthis.listenTo(\n\t\tthis.root.document.model,\n\t\t'applyOperation',\n\t\t( event, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransform.call( this, operation );\n\t\t},\n\t\t{ priority: 'low' }\n\t);\n}\n\n// Updates this range accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform( operation ) {\n\t// Transform the range by the operation. Join the result ranges if needed.\n\tconst ranges = this.getTransformedByOperation( operation );\n\tconst result = Range._createFromRanges( ranges );\n\n\tconst boundariesChanged = !result.isEqual( this );\n\tconst contentChanged = doesOperationChangeRangeContent( this, operation );\n\n\tlet deletionPosition = null;\n\n\tif ( boundariesChanged ) {\n\t\t// If range boundaries have changed, fire `change:range` event.\n\t\t//\n\t\tif ( result.root.rootName == '$graveyard' ) {\n\t\t\t// If the range was moved to the graveyard root, set `deletionPosition`.\n\t\t\tif ( operation.type == 'remove' ) {\n\t\t\t\tdeletionPosition = operation.sourcePosition;\n\t\t\t} else {\n\t\t\t\t// Merge operation.\n\t\t\t\tdeletionPosition = operation.deletionPosition;\n\t\t\t}\n\t\t}\n\n\t\tconst oldRange = this.toRange();\n\n\t\tthis.start = result.start;\n\t\tthis.end = result.end;\n\n\t\tthis.fire( 'change:range', oldRange, { deletionPosition } );\n\t} else if ( contentChanged ) {\n\t\t// If range boundaries have not changed, but there was change inside the range, fire `change:content` event.\n\t\tthis.fire( 'change:content', this.toRange(), { deletionPosition } );\n\t}\n}\n\n// Checks whether given operation changes something inside the range (even if it does not change boundaries).\n//\n// @private\n// @param {module:engine/model/range~Range} range Range to check.\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n// @returns {Boolean}\nfunction doesOperationChangeRangeContent( range, operation ) {\n\tswitch ( operation.type ) {\n\t\tcase 'insert':\n\t\t\treturn range.containsPosition( operation.position );\n\t\tcase 'move':\n\t\tcase 'remove':\n\t\tcase 'reinsert':\n\t\tcase 'merge':\n\t\t\treturn range.containsPosition( operation.sourcePosition ) ||\n\t\t\t\trange.start.isEqual( operation.sourcePosition ) ||\n\t\t\t\trange.containsPosition( operation.targetPosition );\n\t\tcase 'split':\n\t\t\treturn range.containsPosition( operation.splitPosition ) || range.containsPosition( operation.insertionPosition );\n\t}\n\n\treturn false;\n}\n\nmix( LiveRange, EmitterMixin );\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nexport default eq;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nexport default listCacheClear;\n","import eq from './eq.js';\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nexport default assocIndexOf;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nexport default listCacheDelete;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nexport default listCacheGet;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nexport default listCacheHas;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nexport default listCacheSet;\n","import listCacheClear from './_listCacheClear.js';\nimport listCacheDelete from './_listCacheDelete.js';\nimport listCacheGet from './_listCacheGet.js';\nimport listCacheHas from './_listCacheHas.js';\nimport listCacheSet from './_listCacheSet.js';\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nexport default ListCache;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/attributeelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n// Default attribute priority.\nconst DEFAULT_PRIORITY = 10;\n\n/**\n * Attribute elements are used to represent formatting elements in the view (think – `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class AttributeElement extends Element {\n\t/**\n\t * Creates an attribute element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n\t * @see module:engine/view/element~Element\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\n\t\t/**\n\t\t * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Number}\n\t\t */\n\t\tthis._priority = DEFAULT_PRIORITY;\n\n\t\t/**\n\t\t * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n\t\t * and then two elements are considered similar if, and only if they have the same `_id`.\n\t\t *\n\t\t * @protected\n\t\t * @member {String|Number}\n\t\t */\n\t\tthis._id = null;\n\n\t\t/**\n\t\t * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n\t\t * and still exist in the view tree.\n\t\t *\n\t\t * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set.<module:engine/view/attributeelement~AttributeElement>|null}\n\t\t */\n\t\tthis._clonesGroup = null;\n\t}\n\n\t/**\n\t * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget priority() {\n\t\treturn this._priority;\n\t}\n\n\t/**\n\t * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n\t * and then two elements are considered similar if, and only if they have the same `id`.\n\t *\n\t * @readonly\n\t * @type {String|Number}\n\t */\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n\t * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n\t *\n\t * Note: If this element has been removed from the tree, returned set will not include it.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n\t * if this element has no `id`.\n\t *\n\t * @returns {Set.<module:engine/view/attributeelement~AttributeElement>} Set containing all the attribute elements\n\t * with the same `id` that were added and not removed from the view tree.\n\t */\n\tgetElementsWithSameId() {\n\t\tif ( this.id === null ) {\n\t\t\t/**\n\t\t\t * Cannot get elements with the same id for an attribute element without id.\n\t\t\t *\n\t\t\t * @error attribute-element-get-elements-with-same-id-no-id\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'attribute-element-get-elements-with-same-id-no-id: ' +\n\t\t\t\t'Cannot get elements with the same id for an attribute element without id.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\treturn new Set( this._clonesGroup );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tattributeElement.is( 'attributeElement' ); // -> true\n\t *\t\tattributeElement.is( 'element' ); // -> true\n\t *\t\tattributeElement.is( 'node' ); // -> true\n\t *\t\tattributeElement.is( 'view:attributeElement' ); // -> true\n\t *\t\tattributeElement.is( 'view:element' ); // -> true\n\t *\t\tattributeElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\tattributeElement.is( 'model:element' ); // -> false\n\t *\t\tattributeElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an attribute element, you can also check its\n\t * {@link module:engine/view/attributeelement~AttributeElement#name name}:\n\t *\n\t *\t\tattributeElement.is( 'b' ); // -> true if this is a bold element\n\t *\t\tattributeElement.is( 'attributeElement', 'b' ); // -> same as above\n\t *\t\ttext.is( 'b' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type && type.replace( /^view:/, '' );\n\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'attributeElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'attributeElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t *\n\t * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n\t * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n\t * different set of children nodes.\n\t *\n\t * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n\t * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n\t * considered similar.\n\t *\n\t * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n\t *\n\t * * two following similar elements can be merged together into one, longer element,\n\t * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n\t * decide whether processed element should be unwrapped,\n\t * * etc.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\t// If any element has an `id` set, just compare the ids.\n\t\tif ( this.id !== null || otherElement.id !== null ) {\n\t\t\treturn this.id === otherElement.id;\n\t\t}\n\n\t\treturn super.isSimilar( otherElement ) && this.priority == otherElement.priority;\n\t}\n\n\t/**\n\t * Clones provided element with priority.\n\t *\n\t * @protected\n\t * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\n\t */\n\t_clone( deep ) {\n\t\tconst cloned = super._clone( deep );\n\n\t\t// Clone priority too.\n\t\tcloned._priority = this._priority;\n\n\t\t// And id too.\n\t\tcloned._id = this._id;\n\n\t\treturn cloned;\n\t}\n}\n\n/**\n * Default attribute priority.\n *\n * @member {Number} module:engine/view/attributeelement~AttributeElement.DEFAULT_PRIORITY\n */\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\n\n// Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getFillerOffset() {\n\t// <b>foo</b> does not need filler.\n\tif ( nonUiChildrenCount( this ) ) {\n\t\treturn null;\n\t}\n\n\tlet element = this.parent;\n\n\t// <p><b></b></p> needs filler -> <p><b><br></b></p>\n\twhile ( element && element.is( 'attributeElement' ) ) {\n\t\tif ( nonUiChildrenCount( element ) > 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\telement = element.parent;\n\t}\n\n\tif ( !element || nonUiChildrenCount( element ) > 1 ) {\n\t\treturn null;\n\t}\n\n\t// Render block filler at the end of element (after all ui elements).\n\treturn this.childCount;\n}\n\n// Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n//\n// @param {module:engine/view/element~Element} element\n// @returns {Number}\nfunction nonUiChildrenCount( element ) {\n\treturn Array.from( element.getChildren() ).filter( element => !element.is( 'uiElement' ) ).length;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/containerelement\n */\n\nimport Element from './element';\n\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly used for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * The container element should be your default choice when writing a converter, unless:\n *\n * * this element represents a model text attribute (then use {@link module:engine/view/attributeelement~AttributeElement}),\n * * this is an empty element like `<img>` (then use {@link module:engine/view/emptyelement~EmptyElement}),\n * * this is a root element,\n * * this is a nested editable element (then use  {@link module:engine/view/editableelement~EditableElement}).\n *\n * To create a new container element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `DowncastWriter#createContainerElement()`}\n * method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class ContainerElement extends Element {\n\t/**\n\t * Creates a container element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement\n\t * @see module:engine/view/element~Element\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tcontainerElement.is( 'containerElement' ); // -> true\n\t *\t\tcontainerElement.is( 'element' ); // -> true\n\t *\t\tcontainerElement.is( 'node' ); // -> true\n\t *\t\tcontainerElement.is( 'view:containerElement' ); // -> true\n\t *\t\tcontainerElement.is( 'view:element' ); // -> true\n\t *\t\tcontainerElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\tcontainerElement.is( 'model:element' ); // -> false\n\t *\t\tcontainerElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is a container element, you can also check its\n\t * {@link module:engine/view/containerelement~ContainerElement#name name}:\n\t *\n\t *\t\tcontainerElement.is( 'div' ); // -> true if this is a div container element\n\t *\t\tcontainerElement.is( 'contaienrElement', 'div' ); // -> same as above\n\t *\t\ttext.is( 'div' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type && type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'containerElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'containerElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n}\n\n/**\n * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n *\n * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n */\nexport function getFillerOffset() {\n\tconst children = [ ...this.getChildren() ];\n\tconst lastChild = children[ this.childCount - 1 ];\n\n\t// Block filler is required after a `<br>` if it's the last element in its container. See #1422.\n\tif ( lastChild && lastChild.is( 'element', 'br' ) ) {\n\t\treturn this.childCount;\n\t}\n\n\tfor ( const child of children ) {\n\t\t// If there's any non-UI element – don't render the bogus.\n\t\tif ( !child.is( 'uiElement' ) ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// If there are only UI elements – render the bogus at the end of the element.\n\treturn this.childCount;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/indexof\n */\n\n/**\n * Returns index of the node in the parent element.\n *\n * @param {Node} node Node which index is tested.\n * @returns {Number} Index of the node in the parent element. Returns 0 if node has no parent.\n */\nexport default function indexOf( node ) {\n\tlet index = 0;\n\n\twhile ( node.previousSibling ) {\n\t\tnode = node.previousSibling;\n\t\tindex++;\n\t}\n\n\treturn index;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals Node */\n\n/**\n * @module utils/dom/getancestors\n */\n\n/**\n * Returns all ancestors of given DOM node, starting from the top-most (root). Includes the given node itself. If the\n * node is a part of `DocumentFragment` that `DocumentFragment` will be returned. In contrary, if the node is\n * appended to a `Document`, that `Document` will not be returned (algorithms operating on DOM tree care for `Document#documentElement`\n * at most, which will be returned).\n *\n * @param {Node} node DOM node.\n * @returns {Array.<Node|DocumentFragment>} Array of given `node` parents.\n */\nexport default function getAncestors( node ) {\n\tconst nodes = [];\n\n\t// We are interested in `Node`s `DocumentFragment`s only.\n\twhile ( node && node.nodeType != Node.DOCUMENT_NODE ) {\n\t\tnodes.unshift( node );\n\t\tnode = node.parentNode;\n\t}\n\n\treturn nodes;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/domconverter\n */\n\n/* globals document, Node, NodeFilter, Text */\n\nimport ViewText from './text';\nimport ViewElement from './element';\nimport ViewPosition from './position';\nimport ViewRange from './range';\nimport ViewSelection from './selection';\nimport ViewDocumentFragment from './documentfragment';\nimport ViewTreeWalker from './treewalker';\nimport { BR_FILLER, getDataWithoutFiller, INLINE_FILLER_LENGTH, isInlineFiller, NBSP_FILLER, startsWithFiller } from './filler';\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport indexOf from '@ckeditor/ckeditor5-utils/src/dom/indexof';\nimport getAncestors from '@ckeditor/ckeditor5-utils/src/dom/getancestors';\nimport getCommonAncestor from '@ckeditor/ckeditor5-utils/src/dom/getcommonancestor';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport { isElement } from 'lodash-es';\n\n// eslint-disable-next-line new-cap\nconst BR_FILLER_REF = BR_FILLER( document );\n\n/**\n * DomConverter is a set of tools to do transformations between DOM nodes and view nodes. It also handles\n * {@link module:engine/view/domconverter~DomConverter#bindElements binding} these nodes.\n *\n * The instance of DOMConverter is available in {@link module:engine/view/view~View#domConverter `editor.editing.view.domConverter`}.\n *\n * DomConverter does not check which nodes should be rendered (use {@link module:engine/view/renderer~Renderer}), does not keep a\n * state of a tree nor keeps synchronization between tree view and DOM tree (use {@link module:engine/view/document~Document}).\n *\n * DomConverter keeps DOM elements to View element bindings, so when the converter will be destroyed, the binding will\n * be lost. Two converters will keep separate binding maps, so one tree view can be bound with two DOM trees.\n */\nexport default class DomConverter {\n\t/**\n\t * Creates DOM converter.\n\t *\n\t * @param {Object} options Object with configuration options.\n\t * @param {module:engine/view/filler~BlockFillerMode} [options.blockFillerMode='br'] The type of the block filler to use.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * The mode of a block filler used by DOM converter.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'br'|'nbsp'} module:engine/view/domconverter~DomConverter#blockFillerMode\n\t\t */\n\t\tthis.blockFillerMode = options.blockFillerMode || 'br';\n\n\t\t/**\n\t\t * Elements which are considered pre-formatted elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#preElements\n\t\t */\n\t\tthis.preElements = [ 'pre' ];\n\n\t\t/**\n\t\t * Elements which are considered block elements (and hence should be filled with a\n\t\t * {@link #isBlockFiller block filler}).\n\t\t *\n\t\t * Whether an element is considered a block element also affects handling of trailing whitespaces.\n\t\t *\n\t\t * You can extend this array if you introduce support for block elements which are not yet recognized here.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#blockElements\n\t\t */\n\t\tthis.blockElements = [ 'p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'dd', 'dt', 'figcaption' ];\n\n\t\t/**\n\t\t * Block {@link module:engine/view/filler filler} creator, which is used to create all block fillers during the\n\t\t * view to DOM conversion and to recognize block fillers during the DOM to view conversion.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {Function} module:engine/view/domconverter~DomConverter#_blockFiller\n\t\t */\n\t\tthis._blockFiller = this.blockFillerMode == 'br' ? BR_FILLER : NBSP_FILLER;\n\n\t\t/**\n\t\t * DOM to View mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_domToViewMapping\n\t\t */\n\t\tthis._domToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View to DOM mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_viewToDomMapping\n\t\t */\n\t\tthis._viewToDomMapping = new WeakMap();\n\n\t\t/**\n\t\t * Holds mapping between fake selection containers and corresponding view selections.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_fakeSelectionMapping\n\t\t */\n\t\tthis._fakeSelectionMapping = new WeakMap();\n\t}\n\n\t/**\n\t * Binds given DOM element that represents fake selection to a **position** of a\n\t * {@link module:engine/view/documentselection~DocumentSelection document selection}.\n\t * Document selection copy is stored and can be retrieved by\n\t * {@link module:engine/view/domconverter~DomConverter#fakeSelectionToView} method.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @param {module:engine/view/documentselection~DocumentSelection} viewDocumentSelection\n\t */\n\tbindFakeSelection( domElement, viewDocumentSelection ) {\n\t\tthis._fakeSelectionMapping.set( domElement, new ViewSelection( viewDocumentSelection ) );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/view/selection~Selection view selection} instance corresponding to\n\t * given DOM element that represents fake selection. Returns `undefined` if binding to given DOM element does not exists.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @returns {module:engine/view/selection~Selection|undefined}\n\t */\n\tfakeSelectionToView( domElement ) {\n\t\treturn this._fakeSelectionMapping.get( domElement );\n\t}\n\n\t/**\n\t * Binds DOM and View elements, so it will be possible to get corresponding elements using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {HTMLElement} domElement DOM element to bind.\n\t * @param {module:engine/view/element~Element} viewElement View element to bind.\n\t */\n\tbindElements( domElement, viewElement ) {\n\t\tthis._domToViewMapping.set( domElement, viewElement );\n\t\tthis._viewToDomMapping.set( viewElement, domElement );\n\t}\n\n\t/**\n\t * Unbinds given `domElement` from the view element it was bound to. Unbinding is deep, meaning that all children of\n\t * `domElement` will be unbound too.\n\t *\n\t * @param {HTMLElement} domElement DOM element to unbind.\n\t */\n\tunbindDomElement( domElement ) {\n\t\tconst viewElement = this._domToViewMapping.get( domElement );\n\n\t\tif ( viewElement ) {\n\t\t\tthis._domToViewMapping.delete( domElement );\n\t\t\tthis._viewToDomMapping.delete( viewElement );\n\n\t\t\t// Use Array.from because of MS Edge (#923).\n\t\t\tfor ( const child of Array.from( domElement.childNodes ) ) {\n\t\t\t\tthis.unbindDomElement( child );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Binds DOM and View document fragments, so it will be possible to get corresponding document fragments using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {DocumentFragment} domFragment DOM document fragment to bind.\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment View document fragment to bind.\n\t */\n\tbindDocumentFragments( domFragment, viewFragment ) {\n\t\tthis._domToViewMapping.set( domFragment, viewFragment );\n\t\tthis._viewToDomMapping.set( viewFragment, domFragment );\n\t}\n\n\t/**\n\t * Converts view to DOM. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View node or document fragment to transform.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @returns {Node|DocumentFragment} Converted node or DocumentFragment.\n\t */\n\tviewToDom( viewNode, domDocument, options = {} ) {\n\t\tif ( viewNode.is( 'text' ) ) {\n\t\t\tconst textData = this._processDataFromViewText( viewNode );\n\n\t\t\treturn domDocument.createTextNode( textData );\n\t\t} else {\n\t\t\tif ( this.mapViewToDom( viewNode ) ) {\n\t\t\t\treturn this.mapViewToDom( viewNode );\n\t\t\t}\n\n\t\t\tlet domElement;\n\n\t\t\tif ( viewNode.is( 'documentFragment' ) ) {\n\t\t\t\t// Create DOM document fragment.\n\t\t\t\tdomElement = domDocument.createDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domElement, viewNode );\n\t\t\t\t}\n\t\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\t\t// UIElement has its own render() method (see #799).\n\t\t\t\tdomElement = viewNode.render( domDocument );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\treturn domElement;\n\t\t\t} else {\n\t\t\t\t// Create DOM element.\n\t\t\t\tif ( viewNode.hasAttribute( 'xmlns' ) ) {\n\t\t\t\t\tdomElement = domDocument.createElementNS( viewNode.getAttribute( 'xmlns' ), viewNode.name );\n\t\t\t\t} else {\n\t\t\t\t\tdomElement = domDocument.createElement( viewNode.name );\n\t\t\t\t}\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tfor ( const key of viewNode.getAttributeKeys() ) {\n\t\t\t\t\tdomElement.setAttribute( key, viewNode.getAttribute( key ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.viewChildrenToDom( viewNode, domDocument, options ) ) {\n\t\t\t\t\tdomElement.appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn domElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the view element to DOM using the\n\t * {@link module:engine/view/domconverter~DomConverter#viewToDom} method.\n\t * Additionally, this method adds block {@link module:engine/view/filler filler} to the list of children, if needed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElement Parent view element.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#viewToDom} options parameter.\n\t * @returns {Iterable.<Node>} DOM nodes.\n\t */\n\t* viewChildrenToDom( viewElement, domDocument, options = {} ) {\n\t\tconst fillerPositionOffset = viewElement.getFillerOffset && viewElement.getFillerOffset();\n\t\tlet offset = 0;\n\n\t\tfor ( const childView of viewElement.getChildren() ) {\n\t\t\tif ( fillerPositionOffset === offset ) {\n\t\t\t\tyield this._blockFiller( domDocument );\n\t\t\t}\n\n\t\t\tyield this.viewToDom( childView, domDocument, options );\n\n\t\t\toffset++;\n\t\t}\n\n\t\tif ( fillerPositionOffset === offset ) {\n\t\t\tyield this._blockFiller( domDocument );\n\t\t}\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/range~Range} to DOM range.\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {Range} DOM range.\n\t */\n\tviewRangeToDom( viewRange ) {\n\t\tconst domStart = this.viewPositionToDom( viewRange.start );\n\t\tconst domEnd = this.viewPositionToDom( viewRange.end );\n\n\t\tconst domRange = document.createRange();\n\t\tdomRange.setStart( domStart.parent, domStart.offset );\n\t\tdomRange.setEnd( domEnd.parent, domEnd.offset );\n\n\t\treturn domRange;\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/position~Position} to DOM parent and offset.\n\t *\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t * If the converted position is directly before inline filler it is moved inside the filler.\n\t *\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {Object|null} position DOM position or `null` if view position could not be converted to DOM.\n\t * @returns {Node} position.parent DOM position parent.\n\t * @returns {Number} position.offset DOM position offset.\n\t */\n\tviewPositionToDom( viewPosition ) {\n\t\tconst viewParent = viewPosition.parent;\n\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\tconst domParent = this.findCorrespondingDomText( viewParent );\n\n\t\t\tif ( !domParent ) {\n\t\t\t\t// Position is in a view text node that has not been rendered to DOM yet.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet offset = viewPosition.offset;\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset += INLINE_FILLER_LENGTH;\n\t\t\t}\n\n\t\t\treturn { parent: domParent, offset };\n\t\t} else {\n\t\t\t// viewParent is instance of ViewElement.\n\t\t\tlet domParent, domBefore, domAfter;\n\n\t\t\tif ( viewPosition.offset === 0 ) {\n\t\t\t\tdomParent = this.mapViewToDom( viewParent );\n\n\t\t\t\tif ( !domParent ) {\n\t\t\t\t\t// Position is in a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomAfter = domParent.childNodes[ 0 ];\n\t\t\t} else {\n\t\t\t\tconst nodeBefore = viewPosition.nodeBefore;\n\n\t\t\t\tdomBefore = nodeBefore.is( 'text' ) ?\n\t\t\t\t\tthis.findCorrespondingDomText( nodeBefore ) :\n\t\t\t\t\tthis.mapViewToDom( viewPosition.nodeBefore );\n\n\t\t\t\tif ( !domBefore ) {\n\t\t\t\t\t// Position is after a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomParent = domBefore.parentNode;\n\t\t\t\tdomAfter = domBefore.nextSibling;\n\t\t\t}\n\n\t\t\t// If there is an inline filler at position return position inside the filler. We should never return\n\t\t\t// the position before the inline filler.\n\t\t\tif ( isText( domAfter ) && startsWithFiller( domAfter ) ) {\n\t\t\t\treturn { parent: domAfter, offset: INLINE_FILLER_LENGTH };\n\t\t\t}\n\n\t\t\tconst offset = domBefore ? indexOf( domBefore ) + 1 : 0;\n\n\t\t\treturn { parent: domParent, offset };\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM to view. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items. For\n\t * {@link module:engine/view/filler fillers} `null` will be returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {Node|DocumentFragment} domNode DOM node or document fragment to transform.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @param {Boolean} [options.keepOriginalCase=false] If `false`, node's tag name will be converter to lower case.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} Converted node or document fragment\n\t * or `null` if DOM node is a {@link module:engine/view/filler filler} or the given node is an empty text node.\n\t */\n\tdomToView( domNode, options = {} ) {\n\t\tif ( this.isBlockFiller( domNode, this.blockFillerMode ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// When node is inside UIElement return that UIElement as it's view representation.\n\t\tconst uiElement = this.getParentUIElement( domNode, this._domToViewMapping );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tif ( isText( domNode ) ) {\n\t\t\tif ( isInlineFiller( domNode ) ) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tconst textData = this._processDataFromDomText( domNode );\n\n\t\t\t\treturn textData === '' ? null : new ViewText( textData );\n\t\t\t}\n\t\t} else if ( this.isComment( domNode ) ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tif ( this.mapDomToView( domNode ) ) {\n\t\t\t\treturn this.mapDomToView( domNode );\n\t\t\t}\n\n\t\t\tlet viewElement;\n\n\t\t\tif ( this.isDocumentFragment( domNode ) ) {\n\t\t\t\t// Create view document fragment.\n\t\t\t\tviewElement = new ViewDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domNode, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Create view element.\n\t\t\t\tconst viewName = options.keepOriginalCase ? domNode.tagName : domNode.tagName.toLowerCase();\n\t\t\t\tviewElement = new ViewElement( viewName );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domNode, viewElement );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tconst attrs = domNode.attributes;\n\n\t\t\t\tfor ( let i = attrs.length - 1; i >= 0; i-- ) {\n\t\t\t\t\tviewElement._setAttribute( attrs[ i ].name, attrs[ i ].value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.domChildrenToView( domNode, options ) ) {\n\t\t\t\t\tviewElement._appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn viewElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the DOM element to view nodes using\n\t * the {@link module:engine/view/domconverter~DomConverter#domToView} method.\n\t * Additionally this method omits block {@link module:engine/view/filler filler}, if it exists in the DOM parent.\n\t *\n\t * @param {HTMLElement} domElement Parent DOM element.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n\t * @returns {Iterable.<module:engine/view/node~Node>} View nodes.\n\t */\n\t* domChildrenToView( domElement, options = {} ) {\n\t\tfor ( let i = 0; i < domElement.childNodes.length; i++ ) {\n\t\t\tconst domChild = domElement.childNodes[ i ];\n\t\t\tconst viewChild = this.domToView( domChild, options );\n\n\t\t\tif ( viewChild !== null ) {\n\t\t\t\tyield viewChild;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM selection to view {@link module:engine/view/selection~Selection}.\n\t * Ranges which cannot be converted will be omitted.\n\t *\n\t * @param {Selection} domSelection DOM selection.\n\t * @returns {module:engine/view/selection~Selection} View selection.\n\t */\n\tdomSelectionToView( domSelection ) {\n\t\t// DOM selection might be placed in fake selection container.\n\t\t// If container contains fake selection - return corresponding view selection.\n\t\tif ( domSelection.rangeCount === 1 ) {\n\t\t\tlet container = domSelection.getRangeAt( 0 ).startContainer;\n\n\t\t\t// The DOM selection might be moved to the text node inside the fake selection container.\n\t\t\tif ( isText( container ) ) {\n\t\t\t\tcontainer = container.parentNode;\n\t\t\t}\n\n\t\t\tconst viewSelection = this.fakeSelectionToView( container );\n\n\t\t\tif ( viewSelection ) {\n\t\t\t\treturn viewSelection;\n\t\t\t}\n\t\t}\n\n\t\tconst isBackward = this.isDomSelectionBackward( domSelection );\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( let i = 0; i < domSelection.rangeCount; i++ ) {\n\t\t\t// DOM Range have correct start and end, no matter what is the DOM Selection direction. So we don't have to fix anything.\n\t\t\tconst domRange = domSelection.getRangeAt( i );\n\t\t\tconst viewRange = this.domRangeToView( domRange );\n\n\t\t\tif ( viewRange ) {\n\t\t\t\tviewRanges.push( viewRange );\n\t\t\t}\n\t\t}\n\n\t\treturn new ViewSelection( viewRanges, { backward: isBackward } );\n\t}\n\n\t/**\n\t * Converts DOM Range to view {@link module:engine/view/range~Range}.\n\t * If the start or end position can not be converted `null` is returned.\n\t *\n\t * @param {Range} domRange DOM range.\n\t * @returns {module:engine/view/range~Range|null} View range.\n\t */\n\tdomRangeToView( domRange ) {\n\t\tconst viewStart = this.domPositionToView( domRange.startContainer, domRange.startOffset );\n\t\tconst viewEnd = this.domPositionToView( domRange.endContainer, domRange.endOffset );\n\n\t\tif ( viewStart && viewEnd ) {\n\t\t\treturn new ViewRange( viewStart, viewEnd );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Converts DOM parent and offset to view {@link module:engine/view/position~Position}.\n\t *\n\t * If the position is inside a {@link module:engine/view/filler filler} which has no corresponding view node,\n\t * position of the filler will be converted and returned.\n\t *\n\t * If the position is inside DOM element rendered by {@link module:engine/view/uielement~UIElement}\n\t * that position will be converted to view position before that UIElement.\n\t *\n\t * If structures are too different and it is not possible to find corresponding position then `null` will be returned.\n\t *\n\t * @param {Node} domParent DOM position parent.\n\t * @param {Number} domOffset DOM position offset.\n\t * @returns {module:engine/view/position~Position} viewPosition View position.\n\t */\n\tdomPositionToView( domParent, domOffset ) {\n\t\tif ( this.isBlockFiller( domParent, this.blockFillerMode ) ) {\n\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t}\n\n\t\t// If position is somewhere inside UIElement - return position before that element.\n\t\tconst viewElement = this.mapDomToView( domParent );\n\n\t\tif ( viewElement && viewElement.is( 'uiElement' ) ) {\n\t\t\treturn ViewPosition._createBefore( viewElement );\n\t\t}\n\n\t\tif ( isText( domParent ) ) {\n\t\t\tif ( isInlineFiller( domParent ) ) {\n\t\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t\t}\n\n\t\t\tconst viewParent = this.findCorrespondingViewText( domParent );\n\t\t\tlet offset = domOffset;\n\n\t\t\tif ( !viewParent ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset -= INLINE_FILLER_LENGTH;\n\t\t\t\toffset = offset < 0 ? 0 : offset;\n\t\t\t}\n\n\t\t\treturn new ViewPosition( viewParent, offset );\n\t\t}\n\t\t// domParent instanceof HTMLElement.\n\t\telse {\n\t\t\tif ( domOffset === 0 ) {\n\t\t\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t\t\tif ( viewParent ) {\n\t\t\t\t\treturn new ViewPosition( viewParent, 0 );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst domBefore = domParent.childNodes[ domOffset - 1 ];\n\t\t\t\tconst viewBefore = isText( domBefore ) ?\n\t\t\t\t\tthis.findCorrespondingViewText( domBefore ) :\n\t\t\t\t\tthis.mapDomToView( domBefore );\n\n\t\t\t\t// TODO #663\n\t\t\t\tif ( viewBefore && viewBefore.parent ) {\n\t\t\t\t\treturn new ViewPosition( viewBefore.parent, viewBefore.index + 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Returns corresponding view {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment} for provided DOM element or\n\t * document fragment. If there is no view item {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * to the given DOM - `undefined` is returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {DocumentFragment|Element} domElementOrDocumentFragment DOM element or document fragment.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|undefined}\n\t * Corresponding view element, document fragment or `undefined` if no element was bound.\n\t */\n\tmapDomToView( domElementOrDocumentFragment ) {\n\t\treturn this.getParentUIElement( domElementOrDocumentFragment ) || this._domToViewMapping.get( domElementOrDocumentFragment );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * For all text nodes rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * Note that for the block or inline {@link module:engine/view/filler filler} this method returns `null`.\n\t *\n\t * @param {Text} domText DOM text node.\n\t * @returns {module:engine/view/text~Text|null} Corresponding view text node or `null`, if it was not possible to find a\n\t * corresponding node.\n\t */\n\tfindCorrespondingViewText( domText ) {\n\t\tif ( isInlineFiller( domText ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If DOM text was rendered by UIElement - return that element.\n\t\tconst uiElement = this.getParentUIElement( domText );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tconst previousSibling = domText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling ) {\n\t\t\tif ( !( this.isElement( previousSibling ) ) ) {\n\t\t\t\t// The previous is text or comment.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewElement = this.mapDomToView( previousSibling );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst nextSibling = viewElement.nextSibling;\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( nextSibling instanceof ViewText ) {\n\t\t\t\t\treturn viewElement.nextSibling;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Try to use parent to find the corresponding text node.\n\t\telse {\n\t\t\tconst viewElement = this.mapDomToView( domText.parentNode );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst firstChild = viewElement.getChild( 0 );\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( firstChild instanceof ViewText ) {\n\t\t\t\t\treturn firstChild;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns corresponding DOM item for provided {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment}.\n\t * To find a corresponding text for {@link module:engine/view/text~Text view Text instance}\n\t * use {@link #findCorrespondingDomText}.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View element or document fragment.\n\t * @returns {Node|DocumentFragment|undefined} Corresponding DOM node or document fragment.\n\t */\n\tmapViewToDom( documentFragmentOrElement ) {\n\t\treturn this._viewToDomMapping.get( documentFragmentOrElement );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} viewText View text node.\n\t * @returns {Text|null} Corresponding DOM text node or `null`, if it was not possible to find a corresponding node.\n\t */\n\tfindCorrespondingDomText( viewText ) {\n\t\tconst previousSibling = viewText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling && this.mapViewToDom( previousSibling ) ) {\n\t\t\treturn this.mapViewToDom( previousSibling ).nextSibling;\n\t\t}\n\n\t\t// If this is a first node, try to use parent to find the corresponding text node.\n\t\tif ( !previousSibling && viewText.parent && this.mapViewToDom( viewText.parent ) ) {\n\t\t\treturn this.mapViewToDom( viewText.parent ).childNodes[ 0 ];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Focuses DOM editable that is corresponding to provided {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t * @param {module:engine/view/editableelement~EditableElement} viewEditable\n\t */\n\tfocus( viewEditable ) {\n\t\tconst domEditable = this.mapViewToDom( viewEditable );\n\n\t\tif ( domEditable && domEditable.ownerDocument.activeElement !== domEditable ) {\n\t\t\t// Save the scrollX and scrollY positions before the focus.\n\t\t\tconst { scrollX, scrollY } = global.window;\n\t\t\tconst scrollPositions = [];\n\n\t\t\t// Save all scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst { scrollLeft, scrollTop } = node;\n\n\t\t\t\tscrollPositions.push( [ scrollLeft, scrollTop ] );\n\t\t\t} );\n\n\t\t\tdomEditable.focus();\n\n\t\t\t// Restore scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/957\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst [ scrollLeft, scrollTop ] = scrollPositions.shift();\n\n\t\t\t\tnode.scrollLeft = scrollLeft;\n\t\t\t\tnode.scrollTop = scrollTop;\n\t\t\t} );\n\n\t\t\t// Restore the scrollX and scrollY positions after the focus.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\tglobal.window.scrollTo( scrollX, scrollY );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.ELEMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisElement( node ) {\n\t\treturn node && node.nodeType == Node.ELEMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.DOCUMENT_FRAGMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisDocumentFragment( node ) {\n\t\treturn node && node.nodeType == Node.DOCUMENT_FRAGMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.COMMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisComment( node ) {\n\t\treturn node && node.nodeType == Node.COMMENT_NODE;\n\t}\n\n\t/**\n\t * Checks if the node is an instance of the block filler for this DOM converter.\n\t *\n\t *\t\tconst converter = new DomConverter( { blockFillerMode: 'br' } );\n\t *\n\t *\t\tconverter.isBlockFiller( BR_FILLER( document ) ); // true\n\t *\t\tconverter.isBlockFiller( NBSP_FILLER( document ) ); // false\n\t *\n\t * **Note:**: For the `'nbsp'` mode the method also checks context of a node so it cannot be a detached node.\n\t *\n\t * @param {Node} domNode DOM node to check.\n\t * @returns {Boolean} True if a node is considered a block filler for given mode.\n\t */\n\tisBlockFiller( domNode ) {\n\t\treturn this.blockFillerMode == 'br' ? domNode.isEqualNode( BR_FILLER_REF ) : isNbspBlockFiller( domNode, this.blockElements );\n\t}\n\n\t/**\n\t * Returns `true` if given selection is a backward selection, that is, if it's `focus` is before `anchor`.\n\t *\n\t * @param {Selection} DOM Selection instance to check.\n\t * @returns {Boolean}\n\t */\n\tisDomSelectionBackward( selection ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Since it takes multiple lines of code to check whether a \"DOM Position\" is before/after another \"DOM Position\",\n\t\t// we will use the fact that range will collapse if it's end is before it's start.\n\t\tconst range = document.createRange();\n\n\t\trange.setStart( selection.anchorNode, selection.anchorOffset );\n\t\trange.setEnd( selection.focusNode, selection.focusOffset );\n\n\t\tconst backward = range.collapsed;\n\n\t\trange.detach();\n\n\t\treturn backward;\n\t}\n\n\t/**\n\t * Returns parent {@link module:engine/view/uielement~UIElement} for provided DOM node. Returns `null` if there is no\n\t * parent UIElement.\n\t *\n\t * @param {Node} domNode\n\t * @returns {module:engine/view/uielement~UIElement|null}\n\t */\n\tgetParentUIElement( domNode ) {\n\t\tconst ancestors = getAncestors( domNode );\n\n\t\t// Remove domNode from the list.\n\t\tancestors.pop();\n\n\t\twhile ( ancestors.length ) {\n\t\t\tconst domNode = ancestors.pop();\n\t\t\tconst viewNode = this._domToViewMapping.get( domNode );\n\n\t\t\tif ( viewNode && viewNode.is( 'uiElement' ) ) {\n\t\t\t\treturn viewNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks if given selection's boundaries are at correct places.\n\t *\n\t * The following places are considered as incorrect for selection boundaries:\n\t * * before or in the middle of the inline filler sequence,\n\t * * inside the DOM element which represents {@link module:engine/view/uielement~UIElement a view ui element}.\n\t *\n\t * @param {Selection} domSelection DOM Selection object to be checked.\n\t * @returns {Boolean} `true` if the given selection is at a correct place, `false` otherwise.\n\t */\n\tisDomSelectionCorrect( domSelection ) {\n\t\treturn this._isDomSelectionPositionCorrect( domSelection.anchorNode, domSelection.anchorOffset ) &&\n\t\t\tthis._isDomSelectionPositionCorrect( domSelection.focusNode, domSelection.focusOffset );\n\t}\n\n\t/**\n\t * Checks if the given DOM position is a correct place for selection boundary. See {@link #isDomSelectionCorrect}.\n\t *\n\t * @private\n\t * @param {Element} domParent Position parent.\n\t * @param {Number} offset Position offset.\n\t * @returns {Boolean} `true` if given position is at a correct place for selection boundary, `false` otherwise.\n\t */\n\t_isDomSelectionPositionCorrect( domParent, offset ) {\n\t\t// If selection is before or in the middle of inline filler string, it is incorrect.\n\t\tif ( isText( domParent ) && startsWithFiller( domParent ) && offset < INLINE_FILLER_LENGTH ) {\n\t\t\t// Selection in a text node, at wrong position (before or in the middle of filler).\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isElement( domParent ) && startsWithFiller( domParent.childNodes[ offset ] ) ) {\n\t\t\t// Selection in an element node, before filler text node.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t// If selection is in `view.UIElement`, it is incorrect. Note that `mapDomToView()` returns `view.UIElement`\n\t\t// also for any dom element that is inside the view ui element (so we don't need to perform any additional checks).\n\t\tif ( viewParent && viewParent.is( 'uiElement' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Takes text data from a given {@link module:engine/view/text~Text#data} and processes it so\n\t * it is correctly displayed in the DOM.\n\t *\n\t * Following changes are done:\n\t *\n\t * * a space at the beginning is changed to `&nbsp;` if this is the first text node in its container\n\t * element or if a previous text node ends with a space character,\n\t * * space at the end of the text node is changed to `&nbsp;` if there are two spaces at the end of a node or if next node\n\t * starts with a space or if it is the last text node in its container,\n\t * * remaining spaces are replaced to a chain of spaces and `&nbsp;` (e.g. `'x   x'` becomes `'x &nbsp; x'`).\n\t *\n\t * Content of {@link #preElements} is not processed.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node View text node to process.\n\t * @returns {String} Processed text data.\n\t */\n\t_processDataFromViewText( node ) {\n\t\tlet data = node.data;\n\n\t\t// If any of node ancestors has a name which is in `preElements` array, then currently processed\n\t\t// view text node is (will be) in preformatted element. We should not change whitespaces then.\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn data;\n\t\t}\n\n\t\t// 1. Replace the first space with a nbsp if the previous node ends with a space or there is no previous node\n\t\t// (container element boundary).\n\t\tif ( data.charAt( 0 ) == ' ' ) {\n\t\t\tconst prevNode = this._getTouchingViewTextNode( node, false );\n\t\t\tconst prevEndsWithSpace = prevNode && this._nodeEndsWithSpace( prevNode );\n\n\t\t\tif ( prevEndsWithSpace || !prevNode ) {\n\t\t\t\tdata = '\\u00A0' + data.substr( 1 );\n\t\t\t}\n\t\t}\n\n\t\t// 2. Replace the last space with nbsp if there are two spaces at the end or if the next node starts with space or there is no\n\t\t// next node (container element boundary).\n\t\t//\n\t\t// Keep in mind that Firefox prefers $nbsp; before tag, not inside it:\n\t\t//\n\t\t// Foo <span>&nbsp;bar</span>  <-- bad.\n\t\t// Foo&nbsp;<span> bar</span>  <-- good.\n\t\t//\n\t\t// More here: https://github.com/ckeditor/ckeditor5-engine/issues/1747.\n\t\tif ( data.charAt( data.length - 1 ) == ' ' ) {\n\t\t\tconst nextNode = this._getTouchingViewTextNode( node, true );\n\n\t\t\tif ( data.charAt( data.length - 2 ) == ' ' || !nextNode || nextNode.data.charAt( 0 ) == ' ' ) {\n\t\t\t\tdata = data.substr( 0, data.length - 1 ) + '\\u00A0';\n\t\t\t}\n\t\t}\n\n\t\t// 3. Create space+nbsp pairs.\n\t\treturn data.replace( / {2}/g, ' \\u00A0' );\n\t}\n\n\t/**\n\t * Checks whether given node ends with a space character after changing appropriate space characters to `&nbsp;`s.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node Node to check.\n\t * @returns {Boolean} `true` if given `node` ends with space, `false` otherwise.\n\t */\n\t_nodeEndsWithSpace( node ) {\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst data = this._processDataFromViewText( node );\n\n\t\treturn data.charAt( data.length - 1 ) == ' ';\n\t}\n\n\t/**\n\t * Takes text data from native `Text` node and processes it to a correct {@link module:engine/view/text~Text view text node} data.\n\t *\n\t * Following changes are done:\n\t *\n\t * * multiple whitespaces are replaced to a single space,\n\t * * space at the beginning of a text node is removed if it is the first text node in its container\n\t * element or if the previous text node ends with a space character,\n\t * * space at the end of the text node is removed if there are two spaces at the end of a node or if next node\n\t * starts with a space or if it is the last text node in its container\n\t * * nbsps are converted to spaces.\n\t *\n\t * @param {Node} node DOM text node to process.\n\t * @returns {String} Processed data.\n\t * @private\n\t */\n\t_processDataFromDomText( node ) {\n\t\tlet data = node.data;\n\n\t\tif ( _hasDomParentOfType( node, this.preElements ) ) {\n\t\t\treturn getDataWithoutFiller( node );\n\t\t}\n\n\t\t// Change all consecutive whitespace characters (from the [ \\n\\t\\r] set –\n\t\t// see https://github.com/ckeditor/ckeditor5-engine/issues/822#issuecomment-311670249) to a single space character.\n\t\t// That's how multiple whitespaces are treated when rendered, so we normalize those whitespaces.\n\t\t// We're replacing 1+ (and not 2+) to also normalize singular \\n\\t\\r characters (#822).\n\t\tdata = data.replace( /[ \\n\\t\\r]{1,}/g, ' ' );\n\n\t\tconst prevNode = this._getTouchingInlineDomNode( node, false );\n\t\tconst nextNode = this._getTouchingInlineDomNode( node, true );\n\n\t\tconst shouldLeftTrim = this._checkShouldLeftTrimDomText( prevNode );\n\t\tconst shouldRightTrim = this._checkShouldRightTrimDomText( node, nextNode );\n\n\t\t// If the previous dom text node does not exist or it ends by whitespace character, remove space character from the beginning\n\t\t// of this text node. Such space character is treated as a whitespace.\n\t\tif ( shouldLeftTrim ) {\n\t\t\tdata = data.replace( /^ /, '' );\n\t\t}\n\n\t\t// If the next text node does not exist remove space character from the end of this text node.\n\t\tif ( shouldRightTrim ) {\n\t\t\tdata = data.replace( / $/, '' );\n\t\t}\n\n\t\t// At the beginning and end of a block element, Firefox inserts normal space + <br> instead of non-breaking space.\n\t\t// This means that the text node starts/end with normal space instead of non-breaking space.\n\t\t// This causes a problem because the normal space would be removed in `.replace` calls above. To prevent that,\n\t\t// the inline filler is removed only after the data is initially processed (by the `.replace` above). See ckeditor5#692.\n\t\tdata = getDataWithoutFiller( new Text( data ) );\n\n\t\t// At this point we should have removed all whitespaces from DOM text data.\n\t\t//\n\t\t// Now, We will reverse the process that happens in `_processDataFromViewText`.\n\t\t//\n\t\t// We have to change &nbsp; chars, that were in DOM text data because of rendering reasons, to spaces.\n\t\t// First, change all ` \\u00A0` pairs (space + &nbsp;) to two spaces. DOM converter changes two spaces from model/view to\n\t\t// ` \\u00A0` to ensure proper rendering. Since here we convert back, we recognize those pairs and change them back to `  `.\n\t\tdata = data.replace( / \\u00A0/g, '  ' );\n\n\t\t// Then, let's change the last nbsp to a space.\n\t\tif ( /( |\\u00A0)\\u00A0$/.test( data ) || !nextNode || ( nextNode.data && nextNode.data.charAt( 0 ) == ' ' ) ) {\n\t\t\tdata = data.replace( /\\u00A0$/, ' ' );\n\t\t}\n\n\t\t// Then, change &nbsp; character that is at the beginning of the text node to space character.\n\t\t// We do that replacement only if this is the first node or the previous node ends on whitespace character.\n\t\tif ( shouldLeftTrim ) {\n\t\t\tdata = data.replace( /^\\u00A0/, ' ' );\n\t\t}\n\n\t\t// At this point, all whitespaces should be removed and all &nbsp; created for rendering reasons should be\n\t\t// changed to normal space. All left &nbsp; are &nbsp; inserted intentionally.\n\t\treturn data;\n\t}\n\n\t/**\n\t * Helper function which checks if a DOM text node, preceded by the given `prevNode` should\n\t * be trimmed from the left side.\n\t *\n\t * @param {Node} prevNode\n\t */\n\t_checkShouldLeftTrimDomText( prevNode ) {\n\t\tif ( !prevNode ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( isElement( prevNode ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn /[^\\S\\u00A0]/.test( prevNode.data.charAt( prevNode.data.length - 1 ) );\n\t}\n\n\t/**\n\t * Helper function which checks if a DOM text node, succeeded by the given `nextNode` should\n\t * be trimmed from the right side.\n\t *\n\t * @param {Node} node\n\t * @param {Node} nextNode\n\t */\n\t_checkShouldRightTrimDomText( node, nextNode ) {\n\t\tif ( nextNode ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !startsWithFiller( node );\n\t}\n\n\t/**\n\t * Helper function. For given {@link module:engine/view/text~Text view text node}, it finds previous or next sibling\n\t * that is contained in the same container element. If there is no such sibling, `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} node Reference node.\n\t * @param {Boolean} getNext\n\t * @returns {module:engine/view/text~Text|null} Touching text node or `null` if there is no next or previous touching text node.\n\t */\n\t_getTouchingViewTextNode( node, getNext ) {\n\t\tconst treeWalker = new ViewTreeWalker( {\n\t\t\tstartPosition: getNext ? ViewPosition._createAfter( node ) : ViewPosition._createBefore( node ),\n\t\t\tdirection: getNext ? 'forward' : 'backward'\n\t\t} );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\t// ViewContainerElement is found on a way to next ViewText node, so given `node` was first/last\n\t\t\t// text node in its container element.\n\t\t\tif ( value.item.is( 'containerElement' ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// <br> found – it works like a block boundary, so do not scan further.\n\t\t\telse if ( value.item.is( 'br' ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// Found a text node in the same container element.\n\t\t\telse if ( value.item.is( 'textProxy' ) ) {\n\t\t\t\treturn value.item;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Helper function. For the given text node, it finds the closest touching node which is either\n\t * a text node or a `<br>`. The search is terminated at block element boundaries and if a matching node\n\t * wasn't found so far, `null` is returned.\n\t *\n\t * In the following DOM structure:\n\t *\n\t *\t\t<p>foo<b>bar</b><br>bom</p>\n\t *\n\t * * `foo` doesn't have its previous touching inline node (`null` is returned),\n\t * * `foo`'s next touching inline node is `bar`\n\t * * `bar`'s next touching inline node is `<br>`\n\t *\n\t * This method returns text nodes and `<br>` elements because these types of nodes affect how\n\t * spaces in the given text node need to be converted.\n\t *\n\t * @private\n\t * @param {Text} node\n\t * @param {Boolean} getNext\n\t * @returns {Text|Element|null}\n\t */\n\t_getTouchingInlineDomNode( node, getNext ) {\n\t\tif ( !node.parentNode ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst direction = getNext ? 'nextNode' : 'previousNode';\n\t\tconst document = node.ownerDocument;\n\t\tconst topmostParent = getAncestors( node )[ 0 ];\n\n\t\tconst treeWalker = document.createTreeWalker( topmostParent, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, {\n\t\t\tacceptNode( node ) {\n\t\t\t\tif ( isText( node ) ) {\n\t\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t\t}\n\n\t\t\t\tif ( node.tagName == 'BR' ) {\n\t\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t\t}\n\n\t\t\t\treturn NodeFilter.FILTER_SKIP;\n\t\t\t}\n\t\t} );\n\n\t\ttreeWalker.currentNode = node;\n\n\t\tconst touchingNode = treeWalker[ direction ]();\n\n\t\tif ( touchingNode !== null ) {\n\t\t\tconst lca = getCommonAncestor( node, touchingNode );\n\n\t\t\t// If there is common ancestor between the text node and next/prev text node,\n\t\t\t// and there are no block elements on a way from the text node to that ancestor,\n\t\t\t// and there are no block elements on a way from next/prev text node to that ancestor...\n\t\t\tif (\n\t\t\t\tlca &&\n\t\t\t\t!_hasDomParentOfType( node, this.blockElements, lca ) &&\n\t\t\t\t!_hasDomParentOfType( touchingNode, this.blockElements, lca )\n\t\t\t) {\n\t\t\t\t// Then they are in the same container element.\n\t\t\t\treturn touchingNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n// Helper function.\n// Used to check if given native `Element` or `Text` node has parent with tag name from `types` array.\n//\n// @param {Node} node\n// @param {Array.<String>} types\n// @param {Boolean} [boundaryParent] Can be given if parents should be checked up to a given element (excluding that element).\n// @returns {Boolean} `true` if such parent exists or `false` if it does not.\nfunction _hasDomParentOfType( node, types, boundaryParent ) {\n\tlet parents = getAncestors( node );\n\n\tif ( boundaryParent ) {\n\t\tparents = parents.slice( parents.indexOf( boundaryParent ) + 1 );\n\t}\n\n\treturn parents.some( parent => parent.tagName && types.includes( parent.tagName.toLowerCase() ) );\n}\n\n// A helper that executes given callback for each DOM node's ancestor, starting from the given node\n// and ending in document#documentElement.\n//\n// @param {Node} node\n// @param {Function} callback A callback to be executed for each ancestor.\nfunction forEachDomNodeAncestor( node, callback ) {\n\twhile ( node && node != global.document ) {\n\t\tcallback( node );\n\t\tnode = node.parentNode;\n\t}\n}\n\n// Checks if given node is a nbsp block filler.\n//\n// A &nbsp; is a block filler only if it is a single child of a block element.\n//\n// @param {Node} domNode DOM node.\n// @returns {Boolean}\nfunction isNbspBlockFiller( domNode, blockElements ) {\n\tconst isNBSP = isText( domNode ) && domNode.data == '\\u00A0';\n\n\treturn isNBSP && hasBlockParent( domNode, blockElements ) && domNode.parentNode.childNodes.length === 1;\n}\n\n// Checks if domNode has block parent.\n//\n// @param {Node} domNode DOM node.\n// @returns {Boolean}\nfunction hasBlockParent( domNode, blockElements ) {\n\tconst parent = domNode.parentNode;\n\n\treturn parent && parent.tagName && blockElements.includes( parent.tagName.toLowerCase() );\n}\n\n/**\n * Enum representing type of the block filler.\n *\n * Possible values:\n *\n * * `br` - for `<br>` block filler used in editing view,\n * * `nbsp` - for `&nbsp;` block fillers used in the data.\n *\n * @typedef {String} module:engine/view/filler~BlockFillerMode\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getcommonancestor\n */\n\nimport getAncestors from './getancestors';\n\n/**\n * Searches and returns the lowest common ancestor of two given nodes.\n *\n * @param {Node} nodeA First node.\n * @param {Node} nodeB Second node.\n * @returns {Node|DocumentFragment|Document|null} Lowest common ancestor of both nodes or `null` if nodes do not have a common ancestor.\n */\nexport default function getCommonAncestor( nodeA, nodeB ) {\n\tconst ancestorsA = getAncestors( nodeA );\n\tconst ancestorsB = getAncestors( nodeB );\n\n\tlet i = 0;\n\n\t// It does not matter which array is shorter.\n\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\ti++;\n\t}\n\n\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global DOMParser */\n\n/**\n * @module ui/icon/iconview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/icon/icon.css';\n\n/**\n * The icon view class.\n *\n * @extends module:ui/view~View\n */\nexport default class IconView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The SVG source of the icon.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #content\n\t\t */\n\t\tthis.set( 'content', '' );\n\n\t\t/**\n\t\t * This attribute specifies the boundaries to which the\n\t\t * icon content should stretch.\n\t\t *\n\t\t * @observable\n\t\t * @default '0 0 20 20'\n\t\t * @member {String} #viewBox\n\t\t */\n\t\tthis.set( 'viewBox', '0 0 20 20' );\n\n\t\t/**\n\t\t * The fill color of the child `path.ck-icon__fill`.\n\t\t *\n\t\t * @observable\n\t\t * @default ''\n\t\t * @member {String} #fillColor\n\t\t */\n\t\tthis.set( 'fillColor', '' );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'svg',\n\t\t\tns: 'http://www.w3.org/2000/svg',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-icon'\n\t\t\t\t],\n\t\t\t\tviewBox: bind.to( 'viewBox' )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis._updateXMLContent();\n\t\tthis._colorFillPaths();\n\n\t\t// This is a hack for lack of innerHTML binding.\n\t\t// See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\n\t\tthis.on( 'change:content', () => {\n\t\t\tthis._updateXMLContent();\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\n\t\tthis.on( 'change:fillColor', () => {\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\t}\n\n\t/**\n\t * Updates the {@link #element} with the value of {@link #content}.\n\t *\n\t * @private\n\t */\n\t_updateXMLContent() {\n\t\tif ( this.content ) {\n\t\t\tconst parsed = new DOMParser().parseFromString( this.content.trim(), 'image/svg+xml' );\n\t\t\tconst svg = parsed.querySelector( 'svg' );\n\t\t\tconst viewBox = svg.getAttribute( 'viewBox' );\n\n\t\t\tif ( viewBox ) {\n\t\t\t\tthis.viewBox = viewBox;\n\t\t\t}\n\n\t\t\tthis.element.innerHTML = '';\n\n\t\t\twhile ( svg.childNodes.length > 0 ) {\n\t\t\t\tthis.element.appendChild( svg.childNodes[ 0 ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fills all child `path.ck-icon__fill` with the `#fillColor`.\n\t *\n\t * @private\n\t */\n\t_colorFillPaths() {\n\t\tif ( this.fillColor ) {\n\t\t\tthis.element.querySelectorAll( '.ck-icon__fill' ).forEach( path => {\n\t\t\t\tpath.style.fill = this.fillColor;\n\t\t\t} );\n\t\t}\n\t}\n}\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/isrange\n */\n\n/**\n * Checks if the object is a native DOM Range.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isRange( obj ) {\n\treturn Object.prototype.toString.apply( obj ) == '[object Range]';\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.463 5.187a.888.888 0 1 1 1.254 1.255L9.16 10l3.557 3.557a.888.888 0 1 1-1.254 1.255L7.26 10.61a.888.888 0 0 1 .16-1.382l4.043-4.042z\\\" /></svg>\\n\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M8.537 14.813a.888.888 0 1 1-1.254-1.255L10.84 10 7.283 6.442a.888.888 0 1 1 1.254-1.255L12.74 9.39a.888.888 0 0 1-.16 1.382l-4.043 4.042z\\\"/></svg>\\n\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/panel/balloon/contextualballoon\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BalloonPanelView from './balloonpanelview';\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport prevIcon from '../../../theme/icons/previous-arrow.svg';\nimport nextIcon from '../../../theme/icons/next-arrow.svg';\nimport '../../../theme/components/panel/balloonrotator.css';\nimport '../../../theme/components/panel/fakepanel.css';\nconst toPx = toUnit('px');\n/**\n * Provides the common contextual balloon for the editor.\n *\n * The role of this plugin is to unify the contextual balloons logic, simplify views management and help\n * avoid the unnecessary complexity of handling multiple {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * instances in the editor.\n *\n * This plugin allows for creating single or multiple panel stacks.\n *\n * Each stack may have multiple views, with the one on the top being visible. When the visible view is removed from the stack,\n * the previous view becomes visible.\n *\n * It might be useful to implement nested navigation in a balloon. For instance, a toolbar view may contain a link button.\n * When you click it, a link view (which lets you set the URL) is created and put on top of the toolbar view, so the link panel\n * is displayed. When you finish editing the link and close (remove) the link view, the toolbar view is visible again.\n *\n * However, there are cases when there are multiple independent balloons to be displayed, for instance, if the selection\n * is inside two inline comments at the same time. For such cases, you can create two independent panel stacks.\n * The contextual balloon plugin will create a navigation bar to let the users switch between these panel stacks using the \"Next\"\n * and \"Previous\" buttons.\n *\n * If there are no views in the current stack, the balloon panel will try to switch to the next stack. If there are no\n * panels in any stack, the balloon panel will be hidden.\n *\n * **Note**: To force the balloon panel to show only one view, even if there are other stacks, use the `singleViewMode=true` option\n * when {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#add adding} a view to a panel.\n *\n * From the implementation point of view, the contextual ballon plugin is reusing a single\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance to display multiple contextual balloon\n * panels in the editor. It also creates a special {@link module:ui/panel/balloon/contextualballoon~RotatorView rotator view},\n * used to manage multiple panel stacks. Rotator view is a child of the balloon panel view and the parent of the specific\n * view you want to display. If there is more than one panel stack to be displayed, the rotator view will add a\n * navigation bar. If there is only one stack, the rotator view is transparent (it does not add any UI elements).\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ContextualBalloon extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'ContextualBalloon';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    constructor(editor) {\n        super(editor);\n        /**\n\t\t * The {@link module:utils/dom/position~Options#limiter position limiter}\n\t\t * for the {@link #view balloon}, used when no `limiter` has been passed into {@link #add}\n\t\t * or {@link #updatePosition}.\n\t\t *\n\t\t * By default, a function that obtains the farthest DOM\n\t\t * {@link module:engine/view/rooteditableelement~RootEditableElement}\n\t\t * of the {@link module:engine/view/document~Document#selection}.\n\t\t *\n\t\t * @member {module:utils/dom/position~Options#limiter} #positionLimiter\n\t\t */\n        this.positionLimiter = () => {\n            const view = this.editor.editing.view;\n            const viewDocument = view.document;\n            const editableElement = viewDocument.selection.editableElement;\n            if (editableElement) {\n                return view.domConverter.mapViewToDom(editableElement.root);\n            }\n            return null;\n        };\n        /**\n\t\t * The currently visible view or `null` when there are no views in any stack.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {module:ui/view~View|null} #visibleView\n\t\t */\n        this.set('visibleView', null);\n        /**\n\t\t * The common balloon panel view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} #view\n\t\t */\n        this.view = new BalloonPanelView(editor.locale);\n        editor.ui.view.body.add(this.view);\n        editor.ui.focusTracker.add(this.view.element);\n        /**\n\t\t * The map of views and their stacks.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<module:ui/view~View,Set>}\n\t\t */\n        this._viewToStack = new Map();\n        /**\n\t\t * The map of IDs and stacks.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<String,Set>}\n\t\t */\n        this._idToStack = new Map();\n        /**\n\t\t * A total number of all stacks in the balloon.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #_numberOfStacks\n\t\t */\n        this.set('_numberOfStacks', 0);\n        /**\n\t\t * A flag that controls the single view mode.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_singleViewMode\n\t\t */\n        this.set('_singleViewMode', false);\n        /**\n\t\t * Rotator view embedded in the contextual balloon.\n\t\t * Displays the currently visible view in the balloon and provides navigation for switching stacks.\n\t\t *\n\t\t * @private\n\t\t * @type {module:ui/panel/balloon/contextualballoon~RotatorView}\n\t\t */\n        this._rotatorView = this._createRotatorView();\n        /**\n\t\t * Displays fake panels under the balloon panel view when multiple stacks are added to the balloon.\n\t\t *\n\t\t * @private\n\t\t * @type {module:ui/view~View}\n\t\t */\n        this._fakePanelsView = this._createFakePanelsView();\n    }\n    /**\n\t * Returns `true` when the given view is in one of the stacks. Otherwise returns `false`.\n\t *\n\t * @param {module:ui/view~View} view\n\t * @returns {Boolean}\n\t */\n    hasView(view) {\n        return Array.from(this._viewToStack.keys()).includes(view);\n    }\n    /**\n\t * Adds a new view to the stack and makes it visible if the current stack is visible\n\t * or it is the first view in the balloon.\n\t *\n\t * @param {Object} data The configuration of the view.\n\t * @param {String} [data.stackId='main'] The ID of the stack that the view is added to.\n\t * @param {module:ui/view~View} [data.view] The content of the balloon.\n\t * @param {module:utils/dom/position~Options} [data.position] Positioning options.\n\t * @param {String} [data.balloonClassName] An additional CSS class added to the {@link #view balloon} when visible.\n\t * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n\t * @param {Boolean} [data.singleViewMode=false] Whether the view should be the only visible view even if other stacks were added.\n\t */\n    add(data) {\n        if (this.hasView(data.view)) {\n            /**\n\t\t\t * Trying to add configuration of the same view more than once.\n\t\t\t *\n\t\t\t * @error contextualballoon-add-view-exist\n\t\t\t */\n            throw new CKEditorError('contextualballoon-add-view-exist: Cannot add configuration of the same view twice.', [\n                this,\n                data\n            ]);\n        }\n        const stackId = data.stackId || 'main';\n        // If new stack is added, creates it and show view from this stack.\n        if (!this._idToStack.has(stackId)) {\n            this._idToStack.set(stackId, new Map([[\n                    data.view,\n                    data\n                ]]));\n            this._viewToStack.set(data.view, this._idToStack.get(stackId));\n            this._numberOfStacks = this._idToStack.size;\n            if (!this._visibleStack || data.singleViewMode) {\n                this.showStack(stackId);\n            }\n            return;\n        }\n        const stack = this._idToStack.get(stackId);\n        if (data.singleViewMode) {\n            this.showStack(stackId);\n        }\n        // Add new view to the stack.\n        stack.set(data.view, data);\n        this._viewToStack.set(data.view, stack);\n        // And display it if is added to the currently visible stack.\n        if (stack === this._visibleStack) {\n            this._showView(data);\n        }\n    }\n    /**\n\t * Removes the given view from the stack. If the removed view was visible,\n\t * the view preceding it in the stack will become visible instead.\n\t * When there is no view in the stack, the next stack will be displayed.\n\t * When there are no more stacks, the balloon will hide.\n\t *\n\t * @param {module:ui/view~View} view A view to be removed from the balloon.\n\t */\n    remove(view) {\n        if (!this.hasView(view)) {\n            /**\n\t\t\t * Trying to remove the configuration of the view not defined in the stack.\n\t\t\t *\n\t\t\t * @error contextualballoon-remove-view-not-exist\n\t\t\t */\n            throw new CKEditorError('contextualballoon-remove-view-not-exist: Cannot remove the configuration of a non-existent view.', [\n                this,\n                view\n            ]);\n        }\n        const stack = this._viewToStack.get(view);\n        if (this._singleViewMode && this.visibleView === view) {\n            this._singleViewMode = false;\n        }\n        // When visible view will be removed we need to show a preceding view or next stack\n        // if a view is the only view in the stack.\n        if (this.visibleView === view) {\n            if (stack.size === 1) {\n                if (this._idToStack.size > 1) {\n                    this._showNextStack();\n                } else {\n                    this.view.hide();\n                    this.visibleView = null;\n                    this._rotatorView.hideView();\n                }\n            } else {\n                this._showView(Array.from(stack.values())[stack.size - 2]);\n            }\n        }\n        if (stack.size === 1) {\n            this._idToStack.delete(this._getStackId(stack));\n            this._numberOfStacks = this._idToStack.size;\n        } else {\n            stack.delete(view);\n        }\n        this._viewToStack.delete(view);\n    }\n    /**\n\t * Updates the position of the balloon using the position data of the first visible view in the stack.\n\t * When new position data is given, the position data of the currently visible view will be updated.\n\t *\n\t * @param {module:utils/dom/position~Options} [position] position options.\n\t */\n    updatePosition(position) {\n        if (position) {\n            this._visibleStack.get(this.visibleView).position = position;\n        }\n        this.view.pin(this._getBalloonPosition());\n        this._fakePanelsView.updatePosition();\n    }\n    /**\n\t * Shows the last view from the stack of a given ID.\n\t *\n\t * @param {String} id\n\t */\n    showStack(id) {\n        this.visibleStack = id;\n        const stack = this._idToStack.get(id);\n        if (!stack) {\n            /**\n\t\t\t * Trying to show a stack that does not exist.\n\t\t\t *\n\t\t\t * @error contextualballoon-showstack-stack-not-exist\n\t\t\t */\n            throw new CKEditorError('contextualballoon-showstack-stack-not-exist: Cannot show a stack that does not exist.', this);\n        }\n        if (this._visibleStack === stack) {\n            return;\n        }\n        this._showView(Array.from(stack.values()).pop());\n    }\n    /**\n\t * Returns the stack of the currently visible view.\n\t *\n\t * @private\n\t * @type {Set}\n\t */\n    get _visibleStack() {\n        return this._viewToStack.get(this.visibleView);\n    }\n    /**\n\t * Returns the ID of the given stack.\n\t *\n\t * @private\n\t * @param {Set} stack\n\t * @returns {String}\n\t */\n    _getStackId(stack) {\n        const entry = Array.from(this._idToStack.entries()).find(entry => entry[1] === stack);\n        return entry[0];\n    }\n    /**\n\t * Shows the last view from the next stack.\n\t *\n\t * @private\n\t */\n    _showNextStack() {\n        const stacks = Array.from(this._idToStack.values());\n        let nextIndex = stacks.indexOf(this._visibleStack) + 1;\n        if (!stacks[nextIndex]) {\n            nextIndex = 0;\n        }\n        this.showStack(this._getStackId(stacks[nextIndex]));\n    }\n    /**\n\t * Shows the last view from the previous stack.\n\t *\n\t * @private\n\t */\n    _showPrevStack() {\n        const stacks = Array.from(this._idToStack.values());\n        let nextIndex = stacks.indexOf(this._visibleStack) - 1;\n        if (!stacks[nextIndex]) {\n            nextIndex = stacks.length - 1;\n        }\n        this.showStack(this._getStackId(stacks[nextIndex]));\n    }\n    /**\n\t * Creates a rotator view.\n\t *\n\t * @private\n\t * @returns {module:ui/panel/balloon/contextualballoon~RotatorView}\n\t */\n    _createRotatorView() {\n        const view = new RotatorView(this.editor.locale);\n        const t = this.editor.locale.t;\n        this.view.content.add(view);\n        // Hide navigation when there is only a one stack & not in single view mode.\n        view.bind('isNavigationVisible').to(this, '_numberOfStacks', this, '_singleViewMode', (value, isSingleViewMode) => {\n            return !isSingleViewMode && value > 1;\n        });\n        // Update balloon position after toggling navigation.\n        view.on('change:isNavigationVisible', () => this.updatePosition(), { priority: 'low' });\n        // Update stacks counter value.\n        view.bind('counter').to(this, 'visibleView', this, '_numberOfStacks', (visibleView, numberOfStacks) => {\n            if (numberOfStacks < 2) {\n                return '';\n            }\n            const current = Array.from(this._idToStack.values()).indexOf(this._visibleStack) + 1;\n            return t('%0 of %1', [\n                current,\n                numberOfStacks\n            ]);\n        });\n        view.buttonNextView.on('execute', () => {\n            // When current view has a focus then move focus to the editable before removing it,\n            // otherwise editor will lost focus.\n            if (view.focusTracker.isFocused) {\n                this.editor.editing.view.focus();\n            }\n            this._showNextStack();\n        });\n        view.buttonPrevView.on('execute', () => {\n            // When current view has a focus then move focus to the editable before removing it,\n            // otherwise editor will lost focus.\n            if (view.focusTracker.isFocused) {\n                this.editor.editing.view.focus();\n            }\n            this._showPrevStack();\n        });\n        return view;\n    }\n    /**\n\t * @returns {module:ui/view~View}\n\t */\n    _createFakePanelsView() {\n        const view = new FakePanelsView(this.editor.locale, this.view);\n        view.bind('numberOfPanels').to(this, '_numberOfStacks', this, '_singleViewMode', (number, isSingleViewMode) => {\n            const showPanels = !isSingleViewMode && number >= 2;\n            return showPanels ? Math.min(number - 1, 2) : 0;\n        });\n        view.listenTo(this.view, 'change:top', () => view.updatePosition());\n        view.listenTo(this.view, 'change:left', () => view.updatePosition());\n        this.editor.ui.view.body.add(view);\n        return view;\n    }\n    /**\n\t * Sets the view as the content of the balloon and attaches the balloon using position\n\t * options of the first view.\n\t *\n\t * @private\n\t * @param {Object} data Configuration.\n\t * @param {module:ui/view~View} [data.view] The view to show in the balloon.\n\t * @param {String} [data.balloonClassName=''] Additional class name which will be added to the {@link #view balloon}.\n\t * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n\t */\n    _showView({view, balloonClassName = '', withArrow = true, singleViewMode = false}) {\n        this.view.class = balloonClassName;\n        this.view.withArrow = withArrow;\n        this._rotatorView.showView(view);\n        this.visibleView = view;\n        this.view.pin(this._getBalloonPosition());\n        this._fakePanelsView.updatePosition();\n        if (singleViewMode) {\n            this._singleViewMode = true;\n        }\n    }\n    /**\n\t * Returns position options of the last view in the stack.\n\t * This keeps the balloon in the same position when the view is changed.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n    _getBalloonPosition() {\n        let position = Array.from(this._visibleStack.values()).pop().position;\n        // Use the default limiter if none has been specified.\n        if (position && !position.limiter) {\n            // Don't modify the original options object.\n            position = Object.assign({}, position, { limiter: this.positionLimiter });\n        }\n        return position;\n    }\n}\n/**\n * Rotator view is a helper class for the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon}.\n * It is used for displaying the last view from the current stack and providing navigation buttons for switching stacks.\n * See the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon} documentation to learn more.\n *\n * @extends module:ui/view~View\n */\nclass RotatorView extends View {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(locale) {\n        super(locale);\n        const t = locale.t;\n        const bind = this.bindTemplate;\n        /**\n\t\t * Defines whether navigation is visible or not.\n\t\t *\n\t\t * @member {Boolean} #isNavigationVisible\n\t\t */\n        this.set('isNavigationVisible', true);\n        /**\n\t\t * Used for checking if a view is focused or not.\n\t\t *\n\t\t * @type {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * Navigation button for switching the stack to the previous one.\n\t\t *\n\t\t * @type {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.buttonPrevView = this._createButtonView(t('Previous'), prevIcon);\n        /**\n\t\t * Navigation button for switching the stack to the next one.\n\t\t *\n\t\t * @type {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.buttonNextView = this._createButtonView(t('Next'), nextIcon);\n        /**\n\t\t * A collection of the child views that creates the rotator content.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.content = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-balloon-rotator'\n                ],\n                'z-index': '-1'\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck-balloon-rotator__navigation',\n                            bind.to('isNavigationVisible', value => value ? '' : 'ck-hidden')\n                        ]\n                    },\n                    children: [\n                        this.buttonPrevView,\n                        {\n                            tag: 'span',\n                            attributes: { class: ['ck-balloon-rotator__counter'] },\n                            children: [{ text: bind.to('counter') }]\n                        },\n                        this.buttonNextView\n                    ]\n                },\n                {\n                    tag: 'div',\n                    attributes: { class: 'ck-balloon-rotator__content' },\n                    children: this.content\n                }\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        this.focusTracker.add(this.element);\n    }\n    /**\n\t * Shows a given view.\n\t *\n\t * @param {module:ui/view~View} view The view to show.\n\t */\n    showView(view) {\n        this.hideView();\n        this.content.add(view);\n    }\n    /**\n\t * Hides the currently displayed view.\n\t */\n    hideView() {\n        this.content.clear();\n    }\n    /**\n\t * Creates a navigation button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button icon.\n\t * @returns {module:ui/button/buttonview~ButtonView}\n\t */\n    _createButtonView(label, icon) {\n        const view = new ButtonView(this.locale);\n        view.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        return view;\n    }\n}\n// Displays additional layers under the balloon when multiple stacks are added to the balloon.\n//\n// @private\n// @extends module:ui/view~View\nclass FakePanelsView extends View {\n    // @inheritDoc\n    constructor(locale, balloonPanelView) {\n        super(locale);\n        const bind = this.bindTemplate;\n        // Fake panels top offset.\n        //\n        // @observable\n        // @member {Number} #top\n        this.set('top', 0);\n        // Fake panels left offset.\n        //\n        // @observable\n        // @member {Number} #left\n        this.set('left', 0);\n        // Fake panels height.\n        //\n        // @observable\n        // @member {Number} #height\n        this.set('height', 0);\n        // Fake panels width.\n        //\n        // @observable\n        // @member {Number} #width\n        this.set('width', 0);\n        // Number of rendered fake panels.\n        //\n        // @observable\n        // @member {Number} #numberOfPanels\n        this.set('numberOfPanels', 0);\n        // Collection of the child views which creates fake panel content.\n        //\n        // @readonly\n        // @type {module:ui/viewcollection~ViewCollection}\n        this.content = this.createCollection();\n        // Context.\n        //\n        // @private\n        // @type {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n        this._balloonPanelView = balloonPanelView;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck-fake-panel',\n                    bind.to('numberOfPanels', number => number ? '' : 'ck-hidden')\n                ],\n                style: {\n                    top: bind.to('top', toPx),\n                    left: bind.to('left', toPx),\n                    width: bind.to('width', toPx),\n                    height: bind.to('height', toPx)\n                }\n            },\n            children: this.content\n        });\n        this.on('change:numberOfPanels', (evt, name, next, prev) => {\n            if (next > prev) {\n                this._addPanels(next - prev);\n            } else {\n                this._removePanels(prev - next);\n            }\n            this.updatePosition();\n        });\n    }\n    // @private\n    // @param {Number} number\n    _addPanels(number) {\n        while (number--) {\n            const view = new View();\n            view.setTemplate({ tag: 'div' });\n            this.content.add(view);\n            this.registerChild(view);\n        }\n    }\n    // @private\n    // @param {Number} number\n    _removePanels(number) {\n        while (number--) {\n            const view = this.content.last;\n            this.content.remove(view);\n            this.deregisterChild(view);\n            view.destroy();\n        }\n    }\n    // Updates coordinates of fake panels.\n    updatePosition() {\n        if (this.numberOfPanels) {\n            const {top, left} = this._balloonPanelView;\n            const {width, height} = new Rect(this._balloonPanelView.element);\n            Object.assign(this, {\n                top,\n                left,\n                width,\n                height\n            });\n        }\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/view/upcastwriter\n */\n\nimport DocumentFragment from './documentfragment';\nimport Element from './element';\nimport Text from './text';\nimport { isPlainObject } from 'lodash-es';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n\n/**\n * View upcast writer. It provides a set of methods used to manipulate non-semantic view trees.\n *\n * It should be used only while working on a non-semantic view\n * (e.g. a view created from HTML string on paste).\n * To manipulate a view which was or is being downcasted from the the model use the\n * {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n *\n * Unlike `DowncastWriter`, which is available in the {@link module:engine/view/view~View#change `View#change()`} block,\n * `UpcastWriter` can be created wherever you need it:\n *\n *\t\tconst writer = new UpcastWriter();\n *\t\tconst text = writer.createText( 'foo!' );\n *\n *\t\twriter.appendChild( text, someViewElement );\n */\nexport default class UpcastWriter {\n\t/**\n\t * Creates a new {@link module:engine/view/documentfragment~DocumentFragment} instance.\n\t *\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into the created document fragment.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} The created document fragment.\n\t */\n\tcreateDocumentFragment( children ) {\n\t\treturn new DocumentFragment( children );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/element~Element} instance.\n\t *\n\t * Attributes can be passed in various formats:\n\t *\n\t *\t\tupcastWriter.createElement( 'div', { class: 'editor', contentEditable: 'true' } ); // object\n\t *\t\tupcastWriter.createElement( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n\t *\t\tupcastWriter.createElement( 'div', mapOfAttributes ); // map\n\t *\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t * @returns {module:engine/view/element~Element} Created element.\n\t */\n\tcreateElement( name, attrs, children ) {\n\t\treturn new Element( name, attrs, children );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/text~Text} instance.\n\t *\n\t * @param {String} data The text's data.\n\t * @returns {module:engine/view/text~Text} The created text node.\n\t */\n\tcreateText( data ) {\n\t\treturn new Text( data );\n\t}\n\n\t/**\n\t * Clones the provided element.\n\t *\n\t * @see module:engine/view/element~Element#_clone\n\t * @param {module:engine/view/element~Element} element Element to be cloned.\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/element~Element} Clone of this element.\n\t */\n\tclone( element, deep = false ) {\n\t\treturn element._clone( deep );\n\t}\n\n\t/**\n\t * Appends a child node or a list of child nodes at the end of this node\n\t * and sets the parent of these nodes to this element.\n\t *\n\t * @see module:engine/view/element~Element#_appendChild\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n\t * to which items will be appended.\n\t * @fires module:engine/view/node~Node#event:change\n\t * @returns {Number} Number of appended nodes.\n\t */\n\tappendChild( items, element ) {\n\t\treturn element._appendChild( items );\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this element.\n\t *\n\t * @see module:engine/view/element~Element#_insertChild\n\t * @param {Number} index Offset at which nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n\t * to which items will be inserted.\n\t * @fires module:engine/view/node~Node#event:change\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\tinsertChild( index, items, element ) {\n\t\treturn element._insertChild( index, items );\n\t}\n\n\t/**\n\t * Removes the given number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @see module:engine/view/element~Element#_removeChildren\n\t * @param {Number} index Offset from which nodes will be removed.\n\t * @param {Number} howMany Number of nodes to remove.\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n\t * which children will be removed.\n\t * @fires module:engine/view/node~Node#event:change\n\t * @returns {Array.<module:engine/view/node~Node>} The array containing removed nodes.\n\t */\n\tremoveChildren( index, howMany, element ) {\n\t\treturn element._removeChildren( index, howMany );\n\t}\n\n\t/**\n\t * Removes given element from the view structure. Will not have effect on detached elements.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which will be removed.\n\t * @returns {Array.<module:engine/view/node~Node>} The array containing removed nodes.\n\t */\n\tremove( element ) {\n\t\tconst parent = element.parent;\n\n\t\tif ( parent ) {\n\t\t\treturn this.removeChildren( parent.getChildIndex( element ), 1, parent );\n\t\t}\n\n\t\treturn [];\n\t}\n\n\t/**\n\t * Replaces given element with the new one in the view structure. Will not have effect on detached elements.\n\t *\n\t * @param {module:engine/view/element~Element} oldElement Element which will be replaced.\n\t * @param {module:engine/view/element~Element} newElement Element which will be inserted in the place of the old element.\n\t * @returns {Boolean} Whether old element was successfully replaced.\n\t */\n\treplace( oldElement, newElement ) {\n\t\tconst parent = oldElement.parent;\n\n\t\tif ( parent ) {\n\t\t\tconst index = parent.getChildIndex( oldElement );\n\n\t\t\tthis.removeChildren( index, 1, parent );\n\t\t\tthis.insertChild( index, newElement, parent );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Removes given element from view structure and places its children in its position.\n\t * It does nothing if element has no parent.\n\t *\n\t * @param {module:engine/view/element~Element} element Element to unwrap.\n\t */\n\tunwrapElement( element ) {\n\t\tconst parent = element.parent;\n\n\t\tif ( parent ) {\n\t\t\tconst index = parent.getChildIndex( element );\n\n\t\t\tthis.remove( element );\n\t\t\tthis.insertChild( index, element.getChildren(), parent );\n\t\t}\n\t}\n\n\t/**\n\t * Renames element by creating a copy of a given element but with its name changed and then moving contents of the\n\t * old element to the new one.\n\t *\n\t * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n\t *\n\t * @param {String} newName New element name.\n\t * @param {module:engine/view/element~Element} element Element to be renamed.\n\t * @returns {module:engine/view/element~Element|null} New element or null if the old element\n\t * was not replaced (happens for detached elements).\n\t */\n\trename( newName, element ) {\n\t\tconst newElement = new Element( newName, element.getAttributes(), element.getChildren() );\n\n\t\treturn this.replace( element, newElement ) ? newElement : null;\n\t}\n\n\t/**\n\t * Adds or overwrites element's attribute with a specified key and value.\n\t *\n\t *\t\twriter.setAttribute( linkElement, 'href', 'http://ckeditor.com' );\n\t *\n\t * @see module:engine/view/element~Element#_setAttribute\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @param {module:engine/view/element~Element} element Element for which attribute will be set.\n\t */\n\tsetAttribute( key, value, element ) {\n\t\telement._setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t *\t\twriter.removeAttribute( linkElement, 'href' );\n\t *\n\t * @see module:engine/view/element~Element#_removeAttribute\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/view/element~Element} element Element from which attribute will be removed.\n\t */\n\tremoveAttribute( key, element ) {\n\t\telement._removeAttribute( key );\n\t}\n\n\t/**\n\t * Adds specified class to the element.\n\t *\n\t *\t\twriter.addClass( linkElement, 'foo' );\n\t *\t\twriter.addClass( linkElement, [ 'foo', 'bar' ] );\n\t *\n\t * @see module:engine/view/element~Element#_addClass\n\t * @param {Array.<String>|String} className Single class name or array of class names which will be added.\n\t * @param {module:engine/view/element~Element} element Element for which class will be added.\n\t */\n\taddClass( className, element ) {\n\t\telement._addClass( className );\n\t}\n\n\t/**\n\t * Removes specified class from the element.\n\t *\n\t *\t\twriter.removeClass( linkElement, 'foo' );\n\t *\t\twriter.removeClass( linkElement, [ 'foo', 'bar' ] );\n\t *\n\t * @see module:engine/view/element~Element#_removeClass\n\t * @param {Array.<String>|String} className Single class name or array of class names which will be removed.\n\t * @param {module:engine/view/element~Element} element Element from which class will be removed.\n\t */\n\tremoveClass( className, element ) {\n\t\telement._removeClass( className );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\twriter.setStyle( element, 'color', 'red' );\n\t *\t\twriter.setStyle( element, {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t} );\n\t *\n\t * @see module:engine/view/element~Element#_setStyle\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @param {module:engine/view/element~Element} element Element for which style will be added.\n\t */\n\tsetStyle( property, value, element ) {\n\t\tif ( isPlainObject( property ) && element === undefined ) {\n\t\t\telement = value;\n\t\t}\n\t\telement._setStyle( property, value );\n\t}\n\n\t/**\n\t * Removes specified style from the element.\n\t *\n\t *\t\twriter.removeStyle( element, 'color' );  // Removes 'color' style.\n\t *\t\twriter.removeStyle( element, [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @see module:engine/view/element~Element#_removeStyle\n\t * @param {Array.<String>|String} property Style property name or names to be removed.\n\t * @param {module:engine/view/element~Element} element Element from which style will be removed.\n\t */\n\tremoveStyle( property, element ) {\n\t\telement._removeStyle( property );\n\t}\n\n\t/**\n\t * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @see module:engine/view/element~Element#_setCustomProperty\n\t * @param {String|Symbol} key Custom property name/key.\n\t * @param {*} value Custom property value to be stored.\n\t * @param {module:engine/view/element~Element} element Element for which custom property will be set.\n\t */\n\tsetCustomProperty( key, value, element ) {\n\t\telement._setCustomProperty( key, value );\n\t}\n\n\t/**\n\t * Removes a custom property stored under the given key.\n\t *\n\t * @see module:engine/view/element~Element#_removeCustomProperty\n\t * @param {String|Symbol} key Name/key of the custom property to be removed.\n\t * @param {module:engine/view/element~Element} element Element from which the custom property will be removed.\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\tremoveCustomProperty( key, element ) {\n\t\treturn element._removeCustomProperty( key );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n}\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/editableelement\n */\n\nimport ContainerElement from './containerelement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\nconst documentSymbol = Symbol( 'document' );\n\n/**\n * Editable element which can be a {@link module:engine/view/rooteditableelement~RootEditableElement root}\n * or nested editable area in the editor.\n *\n * Editable is automatically read-only when its {@link module:engine/view/document~Document Document} is read-only.\n *\n * The constructor of this class shouldn't be used directly. To create new `EditableElement` use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`} method.\n *\n * @extends module:engine/view/containerelement~ContainerElement\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditableElement extends ContainerElement {\n\t/**\n\t * Creates an editable element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createEditableElement\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Whether the editable is in read-write or read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/editableelement~EditableElement#isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Whether the editable is focused.\n\t\t *\n\t\t * This property updates when {@link module:engine/view/document~Document#isFocused document.isFocused} or view\n\t\t * selection is changed.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/editableelement~EditableElement#isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The {@link module:engine/view/document~Document} which is an owner of this root.\n\t\t * Can only by set once.\n\t\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-editableelement-document-already-set`\n\t\t * when document is already set.\n\t\t *\n\t\t * @member {module:engine/view/document~Document} #document\n\t\t */\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\teditableElement.is( 'editableElement' ); // -> true\n\t *\t\teditableElement.is( 'element' ); // -> true\n\t *\t\teditableElement.is( 'node' ); // -> true\n\t *\t\teditableElement.is( 'view:editableElement' ); // -> true\n\t *\t\teditableElement.is( 'view:element' ); // -> true\n\t *\t\teditableElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\teditableElement.is( 'model:element' ); // -> false\n\t *\t\teditableElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an editbale element, you can also check its\n\t * {@link module:engine/view/editableelement~EditableElement#name name}:\n\t *\n\t *\t\teditableElement.is( 'div' ); // -> true if this is a div element\n\t *\t\teditableElement.is( 'editableElement', 'div' ); // -> same as above\n\t *\t\ttext.is( 'div' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type && type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'editableElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'editableElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Returns document associated with the editable.\n\t *\n\t * @readonly\n\t * @returns {module:engine/view/document~Document}\n\t */\n\tget document() {\n\t\treturn this.getCustomProperty( documentSymbol );\n\t}\n\n\t/**\n\t * Sets document of this editable element.\n\t *\n\t * @protected\n\t * @param {module:engine/view/document~Document} document\n\t */\n\tset _document( document ) {\n\t\tif ( this.getCustomProperty( documentSymbol ) ) {\n\t\t\t/**\n\t\t\t * View document is already set. It can only be set once.\n\t\t\t *\n\t\t\t * @error view-editableelement-document-already-set\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-editableelement-document-already-set: View document is already set.', this );\n\t\t}\n\n\t\tthis._setCustomProperty( documentSymbol, document );\n\n\t\tthis.bind( 'isReadOnly' ).to( document );\n\n\t\tthis.bind( 'isFocused' ).to(\n\t\t\tdocument,\n\t\t\t'isFocused',\n\t\t\tisFocused => isFocused && document.selection.editableElement == this\n\t\t);\n\n\t\t// Update focus state based on selection changes.\n\t\tthis.listenTo( document.selection, 'change', () => {\n\t\t\tthis.isFocused = document.isFocused && document.selection.editableElement == this;\n\t\t} );\n\t}\n}\n\nmix( EditableElement, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/domeventdata\n */\n\nimport { extend } from 'lodash-es';\n\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n */\nexport default class DomEventData {\n\t/**\n\t * @param {module:engine/view/view~View} view The instance of the view controller.\n\t * @param {Event} domEvent The DOM event.\n\t * @param {Object} [additionalData] Additional properties that the instance should contain.\n\t */\n\tconstructor( view, domEvent, additionalData ) {\n\t\t/**\n\t\t * Instance of the view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View} module:engine/view/observer/observer~Observer.DomEvent#view\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * The instance of the document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document} module:engine/view/observer/observer~Observer.DomEvent#document\n\t\t */\n\t\tthis.document = view.document;\n\n\t\t/**\n\t\t * The DOM event.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Event} module:engine/view/observer/observer~Observer.DomEvent#domEvent\n\t\t */\n\t\tthis.domEvent = domEvent;\n\n\t\t/**\n\t\t * The DOM target.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} module:engine/view/observer/observer~Observer.DomEvent#target\n\t\t */\n\t\tthis.domTarget = domEvent.target;\n\n\t\textend( this, additionalData );\n\t}\n\n\t/**\n\t * The tree view element representing the target.\n\t *\n\t * @readonly\n\t * @type module:engine/view/element~Element\n\t */\n\tget target() {\n\t\treturn this.view.domConverter.mapDomToView( this.domTarget );\n\t}\n\n\t/**\n\t * Prevents the native's event default action.\n\t */\n\tpreventDefault() {\n\t\tthis.domEvent.preventDefault();\n\t}\n\n\t/**\n\t * Stops native event propagation.\n\t */\n\tstopPropagation() {\n\t\tthis.domEvent.stopPropagation();\n\t}\n}\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nexport default arrayEach;\n","import copyObject from './_copyObject.js';\nimport keys from './keys.js';\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nexport default baseAssign;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nexport default baseAssignIn;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nexport default copyArray;\n","import copyObject from './_copyObject.js';\nimport getSymbols from './_getSymbols.js';\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nexport default copySymbols;\n","import arrayPush from './_arrayPush.js';\nimport getPrototype from './_getPrototype.js';\nimport getSymbols from './_getSymbols.js';\nimport stubArray from './stubArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nexport default getSymbolsIn;\n","import copyObject from './_copyObject.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nexport default copySymbolsIn;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nexport default getAllKeysIn;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nexport default initCloneArray;\n","import Uint8Array from './_Uint8Array.js';\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nexport default cloneArrayBuffer;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nexport default cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nexport default cloneRegExp;\n","import Symbol from './_Symbol.js';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nexport default cloneSymbol;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nexport default cloneTypedArray;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\nimport cloneDataView from './_cloneDataView.js';\nimport cloneRegExp from './_cloneRegExp.js';\nimport cloneSymbol from './_cloneSymbol.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nexport default initCloneByTag;\n","import isObject from './isObject.js';\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nexport default baseCreate;\n","import baseCreate from './_baseCreate.js';\nimport getPrototype from './_getPrototype.js';\nimport isPrototype from './_isPrototype.js';\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nexport default initCloneObject;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nexport default baseIsMap;\n","import baseIsMap from './_baseIsMap.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nexport default isMap;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nexport default baseIsSet;\n","import baseIsSet from './_baseIsSet.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nexport default isSet;\n","import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isMap from './isMap.js';\nimport isObject from './isObject.js';\nimport isSet from './isSet.js';\nimport keys from './keys.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default nativeKeysIn;\n","import isObject from './isObject.js';\nimport isPrototype from './_isPrototype.js';\nimport nativeKeysIn from './_nativeKeysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeysIn;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeysIn from './_baseKeysIn.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nexport default keysIn;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeys from './_baseKeys.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nexport default keys;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default arrayFilter;\n","import arrayFilter from './_arrayFilter.js';\nimport stubArray from './stubArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nexport default getSymbols;\n","import getNative from './_getNative.js';\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nexport default defineProperty;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nexport default Uint8Array;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/iswindow\n */\n\n/**\n * Checks if the object is a native DOM Window.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isWindow( obj ) {\n\tconst stringifiedObject = Object.prototype.toString.apply( obj );\n\n\t// Returns `true` for the `window` object in browser environments.\n\tif ( stringifiedObject == '[object Window]' ) {\n\t\treturn true;\n\t}\n\n\t// Returns `true` for the `window` object in the Electron environment.\n\tif ( stringifiedObject == '[object global]' ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","import ListCache from './_ListCache.js';\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nexport default stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nexport default stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nexport default stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nexport default stackHas;\n","import ListCache from './_ListCache.js';\nimport Map from './_Map.js';\nimport MapCache from './_MapCache.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nexport default stackSet;\n","import ListCache from './_ListCache.js';\nimport stackClear from './_stackClear.js';\nimport stackDelete from './_stackDelete.js';\nimport stackGet from './_stackGet.js';\nimport stackHas from './_stackHas.js';\nimport stackSet from './_stackSet.js';\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nexport default Stack;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/spy\n */\n\n/**\n * Creates a spy function (ala Sinon.js) that can be used to inspect call to it.\n *\n * The following are the present features:\n *\n * * spy.called: property set to `true` if the function has been called at least once.\n *\n * @returns {Function} The spy function.\n */\nfunction spy() {\n\treturn function spy() {\n\t\tspy.called = true;\n\t};\n}\n\nexport default spy;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/eventinfo\n */\n\nimport spy from './spy';\n\n/**\n * The event object passed to event callbacks. It is used to provide information about the event as well as a tool to\n * manipulate it.\n */\nexport default class EventInfo {\n\t/**\n\t * @param {Object} source The emitter.\n\t * @param {String} name The event name.\n\t */\n\tconstructor( source, name ) {\n\t\t/**\n\t\t * The object that fired the event.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object}\n\t\t */\n\t\tthis.source = source;\n\n\t\t/**\n\t\t * The event name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Path this event has followed. See {@link module:utils/emittermixin~EmitterMixin#delegate}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<Object>}\n\t\t */\n\t\tthis.path = [];\n\n\t\t// The following methods are defined in the constructor because they must be re-created per instance.\n\n\t\t/**\n\t\t * Stops the event emitter to call further callbacks for this event interaction.\n\t\t *\n\t\t * @method #stop\n\t\t */\n\t\tthis.stop = spy();\n\n\t\t/**\n\t\t * Removes the current callback from future interactions of this event.\n\t\t *\n\t\t * @method #off\n\t\t */\n\t\tthis.off = spy();\n\n\t\t/**\n\t\t * The value which will be returned by {@link module:utils/emittermixin~EmitterMixin#fire}.\n\t\t *\n\t\t * It's `undefined` by default and can be changed by an event listener:\n\t\t *\n\t\t *\t\tdataController.fire( 'getSelectedContent', ( evt ) => {\n\t\t *\t\t\t// This listener will make `dataController.fire( 'getSelectedContent' )`\n\t\t *\t\t\t// always return an empty DocumentFragment.\n\t\t *\t\t\tevt.return = new DocumentFragment();\n\t\t *\n\t\t *\t\t\t// Make sure no other listeners are executed.\n\t\t *\t\t\tevt.stop();\n\t\t *\t\t} );\n\t\t *\n\t\t * @member #return\n\t\t */\n\t}\n}\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getresizeobserver\n */\n\n/* globals setTimeout, clearTimeout */\n\nimport mix from '../mix';\nimport global from './global';\nimport Rect from './rect';\nimport DomEmitterMixin from './emittermixin';\n\nconst RESIZE_CHECK_INTERVAL = 100;\n\n/**\n * Returns an instance of [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver).\n * In browsers that support the `ResizeObserver` API, the native observer instance is returned.\n * In other browsers, a polyfilled instance is returned instead with a compatible API.\n *\n * [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) about the native API.\n *\n * @param {Function} callback A function called when any observed element was resized. Refer to the\n * native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API to\n * learn more.\n * @returns {module:utils/dom/getresizeobserver~ResizeObserver} An observer instance.\n */\nexport default function getResizeObserver( callback ) {\n\t// TODO: One day, the `ResizeObserver` API will be supported in all modern web browsers.\n\t// When it happens, this module will no longer make sense and should be removed and\n\t// the native implementation should be used across the project to save bytes.\n\t// Check out https://caniuse.com/#feat=resizeobserver.\n\tif ( typeof global.window.ResizeObserver === 'function' ) {\n\t\treturn new global.window.ResizeObserver( callback );\n\t} else {\n\t\treturn new ResizeObserverPolyfill( callback );\n\t}\n}\n\n/**\n * A polyfill class for the native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver).\n *\n * @private\n * @mixes module:utils/domemittermixin~DomEmitterMixin\n */\nclass ResizeObserverPolyfill {\n\t/**\n\t * Creates an instance of the {@link module:utils/dom/getresizeobserver~ResizeObserverPolyfill} class.\n\t *\n\t * It synchronously reacts to resize of the window to check if observed elements' geometry changed.\n\t *\n\t * Additionally, the polyfilled observer uses a timeout to check if observed elements' geometry has changed\n\t * in some other way (dynamic layouts, scrollbars showing up, etc.), so its response can also be asynchronous.\n\t *\n\t * @param {Function} callback A function called when any observed element was resized. Refer to the\n\t * native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API to\n\t * learn more.\n\t */\n\tconstructor( callback ) {\n\t\t/**\n\t\t * A function called when any observed {@link #_elements element} was resized.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Function}\n\t\t */\n\t\tthis._callback = callback;\n\n\t\t/**\n\t\t * DOM elements currently observed by the observer instance.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Set}\n\t\t */\n\t\tthis._elements = new Set();\n\n\t\t/**\n\t\t * Cached DOM {@link #_elements elements} bounding rects to compare to upon the next check.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Map.<HTMLElement,module:utils/dom/rect~Rect>}\n\t\t */\n\t\tthis._previousRects = new Map();\n\n\t\t/**\n\t\t * An UID of the current timeout upon which the observed elements rects\n\t\t * will be compared to the {@link #_previousRects previous rects} from the past.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Map.<HTMLElement,module:utils/dom/rect~Rect>}\n\t\t */\n\t\tthis._periodicCheckTimeout = null;\n\t}\n\n\t/**\n\t * Starts observing a DOM element.\n\t *\n\t * Learn more in the\n\t * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe).\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tobserve( element ) {\n\t\tthis._elements.add( element );\n\n\t\tif ( this._elements.size === 1 ) {\n\t\t\tthis._startPeriodicCheck();\n\t\t}\n\t}\n\n\t/**\n\t * Stops observing a DOM element.\n\t *\n\t * Learn more in the\n\t * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/unobserve).\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tunobserve( element ) {\n\t\tthis._elements.delete( element );\n\t\tthis._previousRects.delete( element );\n\n\t\tif ( !this._elements.size ) {\n\t\t\tthis._stopPeriodicCheck();\n\t\t}\n\t}\n\n\t/**\n\t * Stops observing all observed DOM elements.\n\t *\n\t * Learn more in the\n\t * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/disconnect).\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tdisconnect() {\n\t\tthis._elements.forEach( element => this.unobserve( element ) );\n\t}\n\n\t/**\n\t * When called, the observer calls the {@link #_callback resize callback} for all observed\n\t * {@link #_elements elements} but also starts checking periodically for changes in the elements' geometry.\n\t * If some are detected, {@link #_callback resize callback} is called for relevant elements that were resized.\n\t *\n\t * @protected\n\t */\n\t_startPeriodicCheck() {\n\t\tconst periodicCheck = () => {\n\t\t\tthis._checkElementRectsAndExecuteCallback();\n\t\t\tthis._periodicCheckTimeout = setTimeout( periodicCheck, RESIZE_CHECK_INTERVAL );\n\t\t};\n\n\t\tthis.listenTo( global.window, 'resize', () => {\n\t\t\tthis._checkElementRectsAndExecuteCallback();\n\t\t} );\n\n\t\tperiodicCheck();\n\t}\n\n\t/**\n\t * Stops checking for changes in all observed {@link #_elements elements} geometry.\n\t *\n\t * @protected\n\t */\n\t_stopPeriodicCheck() {\n\t\tclearTimeout( this._periodicCheckTimeout );\n\t\tthis.stopListening();\n\t\tthis._previousRects.clear();\n\t}\n\n\t/**\n\t * Checks if the geometry of any of the {@link #_elements element} has changed. If so, executes\n\t * the {@link #_callback resize callback} with element geometry data.\n\t *\n\t * @protected\n\t */\n\t_checkElementRectsAndExecuteCallback() {\n\t\tconst entries = [];\n\n\t\tfor ( const element of this._elements ) {\n\t\t\tif ( this._hasRectChanged( element ) ) {\n\t\t\t\tentries.push( {\n\t\t\t\t\ttarget: element,\n\t\t\t\t\tcontentRect: this._previousRects.get( element )\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\tif ( entries.length ) {\n\t\t\tthis._callback( entries );\n\t\t}\n\t}\n\n\t/**\n\t * Compares the DOM element geometry to the {@link #_previousRects cached geometry} from the past.\n\t * Returns `true` if geometry has changed or the element is checked for the first time.\n\t *\n\t * @protected\n\t * @param {HTMLElement} element\n\t * @returns {Boolean}\n\t */\n\t_hasRectChanged( element ) {\n\t\tif ( !element.ownerDocument.body.contains( element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst currentRect = new Rect( element );\n\t\tconst previousRect = this._previousRects.get( element );\n\n\t\t// The first check should always yield true despite no Previous rect to compare to.\n\t\t// The native ResizeObserver does that and... that makes sense. Sort of.\n\t\tconst hasChanged = !previousRect || !previousRect.isEqual( currentRect );\n\n\t\tthis._previousRects.set( element, currentRect );\n\n\t\treturn hasChanged;\n\t}\n}\n\nmix( ResizeObserverPolyfill, DomEmitterMixin );\n\n/**\n * A resize observer object (either native or {@link module:utils/dom/getresizeobserver~getResizeObserver polyfilled})\n * offering the [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API.\n *\n * @typedef {Function} module:utils/dom/getresizeobserver~ResizeObserver\n */\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"9.5\\\" cy=\\\"4.5\\\" r=\\\"1.5\\\"/><circle cx=\\\"9.5\\\" cy=\\\"10.5\\\" r=\\\"1.5\\\"/><circle cx=\\\"9.5\\\" cy=\\\"16.5\\\" r=\\\"1.5\\\"/></svg>\\n\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/toolbarview\n */\n/* globals console */\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport getResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/getresizeobserver';\nimport preventDefault from '../bindings/preventdefault.js';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport {\n    createDropdown,\n    addToolbarToDropdown\n} from '../dropdown/utils';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport verticalDotsIcon from '@ckeditor/ckeditor5-core/theme/icons/three-vertical-dots.svg';\nimport '../../theme/components/toolbar/toolbar.css';\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n    /**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t * @param {module:ui/toolbar/toolbarview~ToolbarOptions} [options] Configuration options of the toolbar.\n\t */\n    constructor(locale, options) {\n        super(locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        /**\n\t\t * A reference to the options object passed to the constructor.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarOptions}\n\t\t */\n        this.options = options || {};\n        /**\n\t\t * Label used by assistive technologies to describe this toolbar element.\n\t\t *\n\t\t * @default 'Editor toolbar'\n\t\t * @member {String} #ariaLabel\n\t\t */\n        this.set('ariaLabel', t('Editor toolbar'));\n        /**\n\t\t * A collection of toolbar items (buttons, dropdowns, etc.).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.items = this.createCollection();\n        /**\n\t\t * Tracks information about the DOM focus in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * to handle keyboard navigation in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n        this.set('class');\n        /**\n\t\t * A (child) view containing {@link #items toolbar items}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ItemsView}\n\t\t */\n        this.itemsView = new ItemsView(locale);\n        /**\n\t\t * A top–level collection aggregating building blocks of the toolbar.\n\t\t *\n\t\t *\t┌───────────────── ToolbarView ─────────────────┐\n\t\t *\t| ┌──────────────── #children ────────────────┐ |\n\t\t *\t| |   ┌──────────── #itemsView ───────────┐   | |\n\t\t *\t| |   | [ item1 ] [ item2 ] ... [ itemN ] |   | |\n\t\t *\t| |   └──────────────────────────────────-┘   | |\n\t\t *\t| └───────────────────────────────────────────┘ |\n\t\t *\t└───────────────────────────────────────────────┘\n\t\t *\n\t\t * By default, it contains the {@link #itemsView} but it can be extended with additional\n\t\t * UI elements when necessary.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.children = this.createCollection();\n        this.children.add(this.itemsView);\n        /**\n\t\t * A collection of {@link #items} that take part in the focus cycling\n\t\t * (i.e. navigation using the keyboard). Usually, it contains a subset of {@link #items} with\n\t\t * some optional UI elements that also belong to the toolbar and should be focusable\n\t\t * by the user.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.focusables = this.createCollection();\n        /**\n\t\t * Controls the orientation of toolbar items. Only available when\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull dynamic items grouping}\n\t\t * is **disabled**.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVertical\n\t\t */\n        /**\n\t\t * Helps cycling over {@link #focusables focusable items} in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this.focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate toolbar items backwards using the arrow[left,up] keys.\n                focusPrevious: [\n                    'arrowleft',\n                    'arrowup'\n                ],\n                // Navigate toolbar items forwards using the arrow[right,down] keys.\n                focusNext: [\n                    'arrowright',\n                    'arrowdown'\n                ]\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar',\n                    bind.to('class')\n                ],\n                role: 'toolbar',\n                'aria-label': bind.to('ariaLabel')\n            },\n            children: this.children,\n            on: {\n                // https://github.com/ckeditor/ckeditor5-ui/issues/206\n                mousedown: preventDefault(this)\n            }\n        });\n        /**\n\t\t * An instance of the active toolbar behavior that shapes its look and functionality.\n\t\t *\n\t\t * See {@link module:ui/toolbar/toolbarview~ToolbarBehavior} to learn more.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarBehavior}\n\t\t */\n        this._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping(this) : new StaticLayout(this);\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        // Children added before rendering should be known to the #focusTracker.\n        for (const item of this.items) {\n            this.focusTracker.add(item.element);\n        }\n        this.items.on('add', (evt, item) => {\n            this.focusTracker.add(item.element);\n        });\n        this.items.on('remove', (evt, item) => {\n            this.focusTracker.remove(item.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n        this._behavior.render(this);\n    }\n    /**\n\t * @inheritDoc\n\t */\n    destroy() {\n        this._behavior.destroy();\n        return super.destroy();\n    }\n    /**\n\t * Focuses the first focusable in {@link #focusables}.\n\t */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Focuses the last focusable in {@link #focusables}.\n\t */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n    /**\n\t * A utility that expands the plain toolbar configuration into\n\t * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n\t *\n\t * @param {Array.<String>} config The toolbar items configuration.\n\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n\t */\n    fillFromConfig(config, factory) {\n        config.map(name => {\n            if (name == '|') {\n                this.items.add(new ToolbarSeparatorView());\n            } else if (factory.has(name)) {\n                this.items.add(factory.create(name));\n            } else {\n                /**\n\t\t\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n\t\t\t\t * name does not exist so it was omitted when rendering the toolbar.\n\t\t\t\t *\n\t\t\t\t * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n\t\t\t\t * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n\t\t\t\t *\n\t\t\t\t * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n\t\t\t\t * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n\t\t\t\t *\n\t\t\t\t * You can use the following snippet to retrieve all available toolbar items:\n\t\t\t\t *\n\t\t\t\t *\t\tArray.from( editor.ui.componentFactory.names() );\n\t\t\t\t *\n\t\t\t\t * @error toolbarview-item-unavailable\n\t\t\t\t * @param {String} name The name of the component.\n\t\t\t\t */\n                console.warn(attachLinkToDocumentation('toolbarview-item-unavailable: The requested toolbar item is unavailable.'), { name });\n            }\n        });\n    }\n}\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n *\n * @private\n * @extends module:ui/view~View\n */\nclass ItemsView extends View {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(locale) {\n        super(locale);\n        /**\n\t\t * A collection of items (buttons, dropdowns, etc.).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.children = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar__items'\n                ]\n            },\n            children: this.children\n        });\n    }\n}\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass StaticLayout {\n    /**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n\t * behavior.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n    constructor(view) {\n        const bind = view.bindTemplate;\n        // Static toolbar can be vertical when needed.\n        view.set('isVertical', false);\n        // 1:1 pass–through binding, all ToolbarView#items are visible.\n        view.itemsView.children.bindTo(view.items).using(item => item);\n        // 1:1 pass–through binding, all ToolbarView#items are focusable.\n        view.focusables.bindTo(view.items).using(item => item);\n        view.extendTemplate({\n            attributes: {\n                class: [// When vertical, the toolbar has an additional CSS class.\n                    bind.if('isVertical', 'ck-toolbar_vertical')]\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n    }\n    /**\n\t * @inheritDoc\n\t */\n    destroy() {\n    }\n}\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow --------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass DynamicGrouping {\n    /**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n\t * behavior.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n    constructor(view) {\n        /**\n\t\t * A collection of toolbar children.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.viewChildren = view.children;\n        /**\n\t\t * A collection of focusable toolbar elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.viewFocusables = view.focusables;\n        /**\n\t\t * A view containing toolbar items.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ItemsView}\n\t\t */\n        this.viewItemsView = view.itemsView;\n        /**\n\t\t * Toolbar focus tracker.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.viewFocusTracker = view.focusTracker;\n        /**\n\t\t * Toolbar locale.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n        this.viewLocale = view.locale;\n        /**\n\t\t * Toolbar element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} #viewElement\n\t\t */\n        /**\n\t\t * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n\t\t * Aggregates items that fit into a single row of the toolbar and were not {@link #groupedItems grouped}\n\t\t * into a {@link #groupedItemsDropdown dropdown}. Items of this collection are displayed in the\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarView#itemsView}.\n\t\t *\n\t\t * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped, it\n\t\t * matches the {@link module:ui/toolbar/toolbarview~ToolbarView#items} collection in size and order.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.ungroupedItems = view.createCollection();\n        /**\n\t\t * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n\t\t * A collection of the toolbar items that do not fit into a single row of the toolbar.\n\t\t * Grouped items are displayed in a dedicated {@link #groupedItemsDropdown dropdown}.\n\t\t *\n\t\t * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped,\n\t\t * this collection is empty.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.groupedItems = view.createCollection();\n        /**\n\t\t * The dropdown that aggregates {@link #groupedItems grouped items} that do not fit into a single\n\t\t * row of the toolbar. It is displayed on demand as the last of\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarView#children toolbar children} and offers another\n\t\t * (nested) toolbar which displays items that would normally overflow.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownview~DropdownView}\n\t\t */\n        this.groupedItemsDropdown = this._createGroupedItemsDropdown();\n        /**\n\t\t * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n\t\t * and manage items that do not fit into a single row.\n\t\t *\n\t\t * **Note:** Created in {@link #_enableGroupingOnResize}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/dom/getresizeobserver~ResizeObserver}\n\t\t */\n        this.resizeObserver = null;\n        /**\n\t\t * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n\t\t * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n\t\t * a single toolbar line. This value can be reused between updates because it is unlikely that\n\t\t * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n        this.cachedPadding = null;\n        // Only those items that were not grouped are visible to the user.\n        view.itemsView.children.bindTo(this.ungroupedItems).using(item => item);\n        // Make sure all #items visible in the main space of the toolbar are \"focuscycleable\".\n        this.ungroupedItems.on('add', this._updateFocusCycleableItems.bind(this));\n        this.ungroupedItems.on('remove', this._updateFocusCycleableItems.bind(this));\n        // Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n        view.children.on('add', this._updateFocusCycleableItems.bind(this));\n        view.children.on('remove', this._updateFocusCycleableItems.bind(this));\n        // ToolbarView#items is dynamic. When an item is added, it should be automatically\n        // represented in either grouped or ungrouped items at the right index.\n        // In other words #items == concat( #ungroupedItems, #groupedItems )\n        // (in length and order).\n        view.items.on('add', (evt, item, index) => {\n            if (index > this.ungroupedItems.length) {\n                this.groupedItems.add(item, index - this.ungroupedItems.length);\n            } else {\n                this.ungroupedItems.add(item, index);\n            }\n            // When a new ungrouped item joins in and lands in #ungroupedItems, there's a chance it causes\n            // the toolbar to overflow.\n            this._updateGrouping();\n        });\n        // When an item is removed from ToolbarView#items, it should be automatically\n        // removed from either grouped or ungrouped items.\n        view.items.on('remove', (evt, item, index) => {\n            if (index > this.ungroupedItems.length) {\n                this.groupedItems.remove(item);\n            } else {\n                this.ungroupedItems.remove(item);\n            }\n            // Whether removed from grouped or ungrouped items, there is a chance\n            // some new space is available and we could do some ungrouping.\n            this._updateGrouping();\n        });\n        view.extendTemplate({\n            attributes: {\n                class: [// To group items dynamically, the toolbar needs a dedicated CSS class.\n                    'ck-toolbar_grouping']\n            }\n        });\n    }\n    /**\n\t * Enables dynamic items grouping based on the dimensions of the toolbar.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n    render(view) {\n        this.viewElement = view.element;\n        this._enableGroupingOnResize();\n    }\n    /**\n\t * Cleans up the internals used by this behavior.\n\t */\n    destroy() {\n        // The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n        // so let's make sure it's actually destroyed along with the toolbar.\n        this.groupedItemsDropdown.destroy();\n        this.resizeObserver.disconnect();\n    }\n    /**\n\t * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n\t * and it will move them to the {@link #groupedItems} when it happens.\n\t *\n\t * At the same time, it will also check if there is enough space in the toolbar for the first of the\n\t * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n\t * without the toolbar wrapping.\n\t *\n\t * @protected\n\t */\n    _updateGrouping() {\n        // Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n        // for instance before #render(), or after render but without a parent or a parent detached\n        // from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n        // nothing else.\n        if (!this.viewElement.ownerDocument.body.contains(this.viewElement)) {\n            return;\n        }\n        let wereItemsGrouped;\n        // Group #items as long as some wrap to the next row. This will happen, for instance,\n        // when the toolbar is getting narrow and there is not enough space to display all items in\n        // a single row.\n        while (this._areItemsOverflowing) {\n            this._groupLastItem();\n            wereItemsGrouped = true;\n        }\n        // If none were grouped now but there were some items already grouped before,\n        // then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n        // for instance, the toolbar is stretching and there's more space in it than before.\n        if (!wereItemsGrouped && this.groupedItems.length) {\n            // Ungroup items as long as none are overflowing or there are none to ungroup left.\n            while (this.groupedItems.length && !this._areItemsOverflowing) {\n                this._ungroupFirstItem();\n            }\n            // If the ungrouping ended up with some item wrapping to the next row,\n            // put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n            // an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n            // clean–up is vital for the algorithm.\n            if (this._areItemsOverflowing) {\n                this._groupLastItem();\n            }\n        }\n    }\n    /**\n\t * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n\t * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n    get _areItemsOverflowing() {\n        // An empty toolbar cannot overflow.\n        if (!this.ungroupedItems.length) {\n            return false;\n        }\n        const element = this.viewElement;\n        const uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n        const lastChildRect = new Rect(element.lastChild);\n        const toolbarRect = new Rect(element);\n        if (!this.cachedPadding) {\n            const computedStyle = global.window.getComputedStyle(element);\n            const paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n            // parseInt() is essential because of quirky floating point numbers logic and DOM.\n            // If the padding turned out too big because of that, the grouped items dropdown would\n            // always look (from the Rect perspective) like it overflows (while it's not).\n            this.cachedPadding = Number.parseInt(computedStyle[paddingProperty]);\n        }\n        if (uiLanguageDirection === 'ltr') {\n            return lastChildRect.right > toolbarRect.right - this.cachedPadding;\n        } else {\n            return lastChildRect.left < toolbarRect.left + this.cachedPadding;\n        }\n    }\n    /**\n\t * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n\t * upon resize when there is little space available. Instead, the toolbar items are moved to the\n\t * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n\t *\n\t * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n\t * them in the dropdown if necessary. It will also observe the browser window for size changes in\n\t * the future and respond to them by grouping more items or reverting already grouped back, depending\n\t * on the visual space available.\n\t *\n\t * @private\n\t */\n    _enableGroupingOnResize() {\n        let previousWidth;\n        // TODO: Consider debounce.\n        this.resizeObserver = getResizeObserver(([entry]) => {\n            if (!previousWidth || previousWidth !== entry.contentRect.width) {\n                this._updateGrouping();\n                previousWidth = entry.contentRect.width;\n            }\n        });\n        this.resizeObserver.observe(this.viewElement);\n        this._updateGrouping();\n    }\n    /**\n\t * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n\t * to the {@link #groupedItems} collection.\n\t *\n\t * The opposite of {@link #_ungroupFirstItem}.\n\t *\n\t * @private\n\t */\n    _groupLastItem() {\n        if (!this.groupedItems.length) {\n            this.viewChildren.add(new ToolbarSeparatorView());\n            this.viewChildren.add(this.groupedItemsDropdown);\n            this.viewFocusTracker.add(this.groupedItemsDropdown.element);\n        }\n        this.groupedItems.add(this.ungroupedItems.remove(this.ungroupedItems.last), 0);\n    }\n    /**\n\t * Moves the very first item belonging to {@link #groupedItems} back\n\t * to the {@link #ungroupedItems} collection.\n\t *\n\t * The opposite of {@link #_groupLastItem}.\n\t *\n\t * @private\n\t */\n    _ungroupFirstItem() {\n        this.ungroupedItems.add(this.groupedItems.remove(this.groupedItems.first));\n        if (!this.groupedItems.length) {\n            this.viewChildren.remove(this.groupedItemsDropdown);\n            this.viewChildren.remove(this.viewChildren.last);\n            this.viewFocusTracker.remove(this.groupedItemsDropdown.element);\n        }\n    }\n    /**\n\t * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n\t * collection when there is not enough space in the toolbar to display all items in a single row.\n\t *\n\t * @private\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n    _createGroupedItemsDropdown() {\n        const locale = this.viewLocale;\n        const t = locale.t;\n        const dropdown = createDropdown(locale);\n        dropdown.class = 'ck-toolbar__grouped-dropdown';\n        // Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n        // (https://github.com/ckeditor/ckeditor5/issues/5608)\n        dropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n        addToolbarToDropdown(dropdown, []);\n        dropdown.buttonView.set({\n            label: t('Show more items'),\n            tooltip: true,\n            icon: verticalDotsIcon\n        });\n        // 1:1 pass–through binding.\n        dropdown.toolbarView.items.bindTo(this.groupedItems).using(item => item);\n        return dropdown;\n    }\n    /**\n\t * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}\n\t * collection so it represents the up–to–date state of the UI from the perspective of the user.\n\t *\n\t * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n\t * it must be subject to focus cycling in the toolbar.\n\t *\n\t * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n\t * to learn more about the purpose of this method.\n\t *\n\t * @private\n\t */\n    _updateFocusCycleableItems() {\n        this.viewFocusables.clear();\n        this.ungroupedItems.map(item => {\n            this.viewFocusables.add(item);\n        });\n        if (this.groupedItems.length) {\n            this.viewFocusables.add(this.groupedItemsDropdown);\n        }\n    }\n}    /**\n * Options passed to the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n *\n * @interface module:ui/toolbar/toolbarview~ToolbarOptions\n */\n     /**\n * When set to `true`, the toolbar will automatically group {@link module:ui/toolbar/toolbarview~ToolbarView#items} that\n * would normally wrap to the next line when there is not enough space to display them in a single row, for\n * instance, if the parent container of the toolbar is narrow.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull\n */\n     /**\n * A class interface defining the behavior of the {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * Toolbar behaviors extend its look and functionality and have an impact on the\n * {@link module:ui/toolbar/toolbarview~ToolbarView#element} template or\n * {@link module:ui/toolbar/toolbarview~ToolbarView#render rendering}. They can be enabled\n * conditionally, e.g. depending on the configuration of the toolbar.\n *\n * @private\n * @interface module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n     /**\n * Creates a new toolbar behavior instance.\n *\n * The instance is created in the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n * This is the right place to extend the {@link module:ui/toolbar/toolbarview~ToolbarView#template} of\n * the toolbar, define extra toolbar properties, etc.\n *\n * @method #constructor\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior is added to.\n */\n     /**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#render rendered}.\n * It can be used to, for example, customize the behavior of the toolbar when its {@link module:ui/toolbar/toolbarview~ToolbarView#element}\n * is available.\n *\n * @readonly\n * @member {Function} #render\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar being rendered.\n */\n     /**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#destroy destroyed}.\n * It allows cleaning up after the toolbar behavior, for instance, this is the right place to detach\n * event listeners, free up references, etc.\n *\n * @readonly\n * @member {Function} #destroy\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/preventdefault\n */\n\n/**\n * A helper which executes a native `Event.preventDefault()` if the target of an event equals the\n * {@link module:ui/view~View#element element of the view}. It shortens the definition of a\n * {@link module:ui/view~View#template template}.\n *\n *\t\t// In a class extending View.\n *\t\timport preventDefault from '@ckeditor/ckeditor5-ui/src/bindings/preventdefault';\n *\n *\t\t// ...\n *\n *\t\tthis.setTemplate( {\n *\t\t\ttag: 'div',\n *\n *\t\t\ton: {\n *\t\t\t\t// Prevent the default mousedown action on this view.\n *\t\t\t\tmousedown: preventDefault( this )\n *\t\t\t}\n *\t\t} );\n *\n * @param {module:ui/view~View} view View instance that defines the template.\n * @returns {module:ui/template~TemplateToBinding}\n */\nexport default function preventDefault( view ) {\n\treturn view.bindTemplate.to( evt => {\n\t\tif ( evt.target === view.element ) {\n\t\t\tevt.preventDefault();\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraphcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The paragraph command.\n *\n * @extends module:core/command~Command\n */\nexport default class ParagraphCommand extends Command {\n\t/**\n\t * The value of the command. Indicates whether the selection start is placed in a paragraph.\n\t *\n\t * @readonly\n\t * @observable\n\t * @member {Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst block = first( document.selection.getSelectedBlocks() );\n\n\t\tthis.value = !!block && block.is( 'paragraph' );\n\t\tthis.isEnabled = !!block && checkCanBecomeParagraph( block, model.schema );\n\t}\n\n\t/**\n\t * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\n\t * will be turned to paragraphs.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Options for the executed command.\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} [options.selection]\n\t * The selection that the command should be applied to.\n\t * By default, if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tconst blocks = ( options.selection || document.selection ).getSelectedBlocks();\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tif ( !block.is( 'paragraph' ) && checkCanBecomeParagraph( block, model.schema ) ) {\n\t\t\t\t\twriter.rename( block, 'paragraph' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks whether the given block can be replaced by a paragraph.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeParagraph( block, schema ) {\n\treturn schema.checkChild( block.parent, 'paragraph' ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraph\n */\n\nimport ParagraphCommand from './paragraphcommand';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The paragraph feature for the editor.\n *\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Paragraph extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Paragraph';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst data = editor.data;\n\n\t\teditor.commands.add( 'paragraph', new ParagraphCommand( editor ) );\n\n\t\t// Schema.\n\t\tmodel.schema.register( 'paragraph', { inheritAllFrom: '$block' } );\n\n\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\n\t\t// Content autoparagraphing. --------------------------------------------------\n\n\t\t// Handles element which has not been converted by any plugin and checks if it would be converted if\n\t\t// we wrap it in a paragraph or change it to a paragraph.\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: ( viewElement, modelWriter ) => {\n\t\t\t\tif ( !Paragraph.paragraphLikeElements.has( viewElement.name ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// Do not auto-paragraph empty elements.\n\t\t\t\tif ( viewElement.isEmpty ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn modelWriter.createElement( 'paragraph' );\n\t\t\t},\n\t\t\tconverterPriority: 'low'\n\t\t} );\n\n\t\tdata.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n\t\t\t// Do not try auto-paragraphing if the element was already converted.\n\t\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the element is not paragraph-like try wrapping it in a paragraph.\n\t\t\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tObject.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Handles not converted text nodes and checks if would be converted if we wraps then by a paragraph.\n\t\tdata.upcastDispatcher.on( 'text', ( evt, data, conversionApi ) => {\n\t\t\t// When node is already converted then do nothing.\n\t\t\tif ( data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tObject.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Empty roots autoparagraphing. -----------------------------------------------\n\n\t\t// Post-fixer which takes care of adding empty paragraph elements to empty roots.\n\t\t// Besides fixing content on #changesDone we also need to handle editor.data#ready event because\n\t\t// if initial data is empty or setData() wasn't even called there will be no #change fired.\n\t\tmodel.document.registerPostFixer( writer => this._autoparagraphEmptyRoots( writer ) );\n\n\t\teditor.data.on( 'ready', () => {\n\t\t\tmodel.enqueueChange( 'transparent', writer => this._autoparagraphEmptyRoots( writer ) );\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Fixes all empty roots.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n\t */\n\t_autoparagraphEmptyRoots( writer ) {\n\t\tconst model = this.editor.model;\n\n\t\tfor ( const rootName of model.document.getRootNames() ) {\n\t\t\tconst root = model.document.getRoot( rootName );\n\n\t\t\tif ( root.isEmpty && root.rootName != '$graveyard' ) {\n\t\t\t\t// If paragraph element is allowed in the root, create paragraph element.\n\t\t\t\tif ( model.schema.checkChild( root, 'paragraph' ) ) {\n\t\t\t\t\twriter.insertElement( 'paragraph', root );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A list of element names which should be treated by the autoparagraphing algorithms as\n * paragraph-like. This means that e.g. the following content:\n *\n *\t\t<h1>Foo</h1>\n *\t\t<table>\n *\t\t\t<tr>\n *\t\t\t\t<td>X</td>\n *\t\t\t\t<td>\n *\t\t\t\t\t<ul>\n *\t\t\t\t\t\t<li>Y</li>\n *\t\t\t\t\t\t<li>Z</li>\n *\t\t\t\t\t</ul>\n *\t\t\t\t</td>\n *\t\t\t</tr>\n *\t\t</table>\n *\n * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n * by the paragraph feature and converted to:\n *\n *\t\t<p>Foo</p>\n *\t\t<p>X</p>\n *\t\t<p>Y</p>\n *\t\t<p>Z</p>\n *\n * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n * have a priority upon conversion.\n *\n * @member {Set.<String>} module:paragraph/paragraph~Paragraph.paragraphLikeElements\n */\nParagraph.paragraphLikeElements = new Set( [\n\t'blockquote',\n\t'dd',\n\t'div',\n\t'dt',\n\t'h1',\n\t'h2',\n\t'h3',\n\t'h4',\n\t'h5',\n\t'h6',\n\t'li',\n\t'p',\n\t'td'\n] );\n\nfunction wrapInParagraph( input, position, conversionApi ) {\n\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n\n\tconversionApi.writer.insert( paragraph, position );\n\treturn conversionApi.convertItem( input, conversionApi.writer.createPositionAt( paragraph, 0 ) );\n}\n\nfunction isParagraphable( node, position, schema ) {\n\tconst context = schema.createContext( position );\n\n\t// When paragraph is allowed in this context...\n\tif ( !schema.checkChild( context, 'paragraph' ) ) {\n\t\treturn false;\n\t}\n\n\t// And a node would be allowed in this paragraph...\n\tif ( !schema.checkChild( context.push( 'paragraph' ), node ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/panel/balloon/balloonpanelview\n */\n\nimport View from '../../view';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\nimport isRange from '@ckeditor/ckeditor5-utils/src/dom/isrange';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { isElement } from 'lodash-es';\n\nimport '../../../theme/components/panel/balloonpanel.css';\n\nconst toPx = toUnit( 'px' );\nconst defaultLimiterElement = global.document.body;\n\n/**\n * The balloon panel view class.\n *\n * A floating container which can\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#pin pin} to any\n * {@link module:utils/dom/position~Options#target target} in the DOM and remain in that position\n * e.g. when the web page is scrolled.\n *\n * The balloon panel can be used to display contextual, non-blocking UI like forms, toolbars and\n * the like in its {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#content} view\n * collection.\n *\n * There is a number of {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}\n * that the balloon can use, automatically switching from one to another when the viewport space becomes\n * scarce to keep the balloon visible to the user as long as it is possible. The balloon will also\n * accept any custom position set provided by the user compatible with the\n * {@link module:utils/dom/position~Options options}.\n *\n *\t\tconst panel = new BalloonPanelView( locale );\n *\t\tconst childView = new ChildView();\n *\t\tconst positions = BalloonPanelView.defaultPositions;\n *\n *\t\tpanel.render();\n *\n *\t\t// Add a child view to the panel's content collection.\n *\t\tpanel.content.add( childView );\n *\n *\t\t// Start pinning the panel to an element with the \"target\" id DOM.\n *\t\t// The balloon will remain pinned until unpin() is called.\n *\t\tpanel.pin( {\n *\t\t\ttarget: document.querySelector( '#target' ),\n *\t\t\tpositions: [\n *\t\t\t\tpositions.northArrowSouth,\n *\t\t\t\tpositions.southArrowNorth\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\nexport default class BalloonPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The absolute top position of the balloon panel in pixels.\n\t\t *\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #top\n\t\t */\n\t\tthis.set( 'top', 0 );\n\n\t\t/**\n\t\t * The absolute left position of the balloon panel in pixels.\n\t\t *\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #left\n\t\t */\n\t\tthis.set( 'left', 0 );\n\n\t\t/**\n\t\t * The balloon panel's current position. The position name is reflected in the CSS class set\n\t\t * to the balloon, i.e. `.ck-balloon-panel_arrow_nw` for the \"arrow_nw\" position. The class\n\t\t * controls the minor aspects of the balloon's visual appearance like the placement\n\t\t * of an {@link #withArrow arrow}. To support a new position, an additional CSS must be created.\n\t\t *\n\t\t * Default position names correspond with\n\t\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n\t\t *\n\t\t * See the {@link #attachTo} and {@link #pin} methods to learn about custom balloon positions.\n\t\t *\n\t\t * @observable\n\t\t * @default 'arrow_nw'\n\t\t * @member {'arrow_nw'|'arrow_ne'|'arrow_sw'|'arrow_se'} #position\n\t\t */\n\t\tthis.set( 'position', 'arrow_nw' );\n\n\t\t/**\n\t\t * Controls whether the balloon panel is visible or not.\n\t\t *\n\t\t * @observable\n\t\t * @default false\n\t\t * @member {Boolean} #isVisible\n\t\t */\n\t\tthis.set( 'isVisible', false );\n\n\t\t/**\n\t\t * Controls whether the balloon panel has an arrow. The presence of the arrow\n\t\t * is reflected in the `ck-balloon-panel_with-arrow` CSS class.\n\t\t *\n\t\t * @observable\n\t\t * @default true\n\t\t * @member {Boolean} #withArrow\n\t\t */\n\t\tthis.set( 'withArrow', true );\n\n\t\t/**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * A callback that starts pinning the panel when {@link #isVisible} gets\n\t\t * `true`. Used by {@link #pin}.\n\t\t *\n\t\t * @private\n\t\t * @member {Function} #_pinWhenIsVisibleCallback\n\t\t */\n\n\t\t/**\n\t\t * A collection of the child views that creates the balloon panel contents.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.content = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-balloon-panel',\n\t\t\t\t\tbind.to( 'position', value => `ck-balloon-panel_${ value }` ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-balloon-panel_visible' ),\n\t\t\t\t\tbind.if( 'withArrow', 'ck-balloon-panel_with-arrow' ),\n\t\t\t\t\tbind.to( 'class' )\n\t\t\t\t],\n\n\t\t\t\tstyle: {\n\t\t\t\t\ttop: bind.to( 'top', toPx ),\n\t\t\t\t\tleft: bind.to( 'left', toPx )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.content\n\t\t} );\n\t}\n\n\t/**\n\t * Shows the panel.\n\t *\n\t * See {@link #isVisible}.\n\t */\n\tshow() {\n\t\tthis.isVisible = true;\n\t}\n\n\t/**\n\t * Hides the panel.\n\t *\n\t * See {@link #isVisible}.\n\t */\n\thide() {\n\t\tthis.isVisible = false;\n\t}\n\n\t/**\n\t * Attaches the panel to a specified {@link module:utils/dom/position~Options#target} with a\n\t * smart positioning heuristics that chooses from available positions to make sure the panel\n\t * is visible to the user i.e. within the limits of the viewport.\n\t *\n\t * This method accepts configuration {@link module:utils/dom/position~Options options}\n\t * to set the `target`, optional `limiter` and `positions` the balloon should choose from.\n\t *\n\t *\t\tconst panel = new BalloonPanelView( locale );\n\t *\t\tconst positions = BalloonPanelView.defaultPositions;\n\t *\n\t *\t\tpanel.render();\n\t *\n\t *\t\t// Attach the panel to an element with the \"target\" id DOM.\n\t *\t\tpanel.attachTo( {\n\t *\t\t\ttarget: document.querySelector( '#target' ),\n\t *\t\t\tpositions: [\n\t *\t\t\t\tpositions.northArrowSouth,\n\t *\t\t\t\tpositions.southArrowNorth\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t * **Note**: Attaching the panel will also automatically {@link #show} it.\n\t *\n\t * **Note**: An attached panel will not follow its target when the window is scrolled or resized.\n\t * See the {@link #pin} method for a more permanent positioning strategy.\n\t *\n\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\n\t * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\n\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n\t */\n\tattachTo( options ) {\n\t\tthis.show();\n\n\t\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\t\tconst positionOptions = Object.assign( {}, {\n\t\t\telement: this.element,\n\t\t\tpositions: [\n\t\t\t\tdefaultPositions.southArrowNorth,\n\t\t\t\tdefaultPositions.southArrowNorthWest,\n\t\t\t\tdefaultPositions.southArrowNorthEast,\n\t\t\t\tdefaultPositions.northArrowSouth,\n\t\t\t\tdefaultPositions.northArrowSouthWest,\n\t\t\t\tdefaultPositions.northArrowSouthEast\n\t\t\t],\n\t\t\tlimiter: defaultLimiterElement,\n\t\t\tfitInViewport: true\n\t\t}, options );\n\n\t\tconst optimalPosition = BalloonPanelView._getOptimalPosition( positionOptions );\n\n\t\t// Usually browsers make some problems with super accurate values like 104.345px\n\t\t// so it is better to use int values.\n\t\tconst left = parseInt( optimalPosition.left );\n\t\tconst top = parseInt( optimalPosition.top );\n\t\tconst position = optimalPosition.name;\n\n\t\tObject.assign( this, { top, left, position } );\n\t}\n\n\t/**\n\t * Works the same way as the {@link #attachTo} method except that the position of the panel is\n\t * continuously updated when:\n\t *\n\t * * any ancestor of the {@link module:utils/dom/position~Options#target}\n\t * or {@link module:utils/dom/position~Options#limiter} is scrolled,\n\t * * the browser window gets resized or scrolled.\n\t *\n\t * Thanks to that, the panel always sticks to the {@link module:utils/dom/position~Options#target}\n\t * and is immune to the changing environment.\n\t *\n\t *\t\tconst panel = new BalloonPanelView( locale );\n\t *\t\tconst positions = BalloonPanelView.defaultPositions;\n\t *\n\t *\t\tpanel.render();\n\t *\n\t *\t\t// Pin the panel to an element with the \"target\" id DOM.\n\t *\t\tpanel.pin( {\n\t *\t\t\ttarget: document.querySelector( '#target' ),\n\t *\t\t\tpositions: [\n\t *\t\t\t\tpositions.northArrowSouth,\n\t *\t\t\t\tpositions.southArrowNorth\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t * To leave the pinned state, use the {@link #unpin} method.\n\t *\n\t * **Note**: Pinning the panel will also automatically {@link #show} it.\n\t *\n\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\n\t * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\n\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n\t */\n\tpin( options ) {\n\t\tthis.unpin();\n\n\t\tthis._pinWhenIsVisibleCallback = () => {\n\t\t\tif ( this.isVisible ) {\n\t\t\t\tthis._startPinning( options );\n\t\t\t} else {\n\t\t\t\tthis._stopPinning();\n\t\t\t}\n\t\t};\n\n\t\tthis._startPinning( options );\n\n\t\t// Control the state of the listeners depending on whether the panel is visible\n\t\t// or not.\n\t\t// TODO: Use on() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n\t\tthis.listenTo( this, 'change:isVisible', this._pinWhenIsVisibleCallback );\n\t}\n\n\t/**\n\t * Stops pinning the panel, as set up by {@link #pin}.\n\t */\n\tunpin() {\n\t\tif ( this._pinWhenIsVisibleCallback ) {\n\t\t\t// Deactivate listeners attached by pin().\n\t\t\tthis._stopPinning();\n\n\t\t\t// Deactivate the panel pin() control logic.\n\t\t\t// TODO: Use off() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n\t\t\tthis.stopListening( this, 'change:isVisible', this._pinWhenIsVisibleCallback );\n\n\t\t\tthis._pinWhenIsVisibleCallback = null;\n\n\t\t\tthis.hide();\n\t\t}\n\t}\n\n\t/**\n\t * Starts managing the pinned state of the panel. See {@link #pin}.\n\t *\n\t * @private\n\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\n\t * {@link module:utils/dom/position~getOptimalPosition}.\n\t */\n\t_startPinning( options ) {\n\t\tthis.attachTo( options );\n\n\t\tconst targetElement = getDomElement( options.target );\n\t\tconst limiterElement = options.limiter ? getDomElement( options.limiter ) : defaultLimiterElement;\n\n\t\t// Then we need to listen on scroll event of eny element in the document.\n\t\tthis.listenTo( global.document, 'scroll', ( evt, domEvt ) => {\n\t\t\tconst scrollTarget = domEvt.target;\n\n\t\t\t// The position needs to be updated if the positioning target is within the scrolled element.\n\t\t\tconst isWithinScrollTarget = targetElement && scrollTarget.contains( targetElement );\n\n\t\t\t// The position needs to be updated if the positioning limiter is within the scrolled element.\n\t\t\tconst isLimiterWithinScrollTarget = limiterElement && scrollTarget.contains( limiterElement );\n\n\t\t\t// The positioning target and/or limiter can be a Rect, object etc..\n\t\t\t// There's no way to optimize the listener then.\n\t\t\tif ( isWithinScrollTarget || isLimiterWithinScrollTarget || !targetElement || !limiterElement ) {\n\t\t\t\tthis.attachTo( options );\n\t\t\t}\n\t\t}, { useCapture: true } );\n\n\t\t// We need to listen on window resize event and update position.\n\t\tthis.listenTo( global.window, 'resize', () => {\n\t\t\tthis.attachTo( options );\n\t\t} );\n\t}\n\n\t/**\n\t * Stops managing the pinned state of the panel. See {@link #pin}.\n\t *\n\t * @private\n\t */\n\t_stopPinning() {\n\t\tthis.stopListening( global.document, 'scroll' );\n\t\tthis.stopListening( global.window, 'resize' );\n\t}\n}\n\n// Returns the DOM element for given object or null, if there is none,\n// e.g. when the passed object is a Rect instance or so.\n//\n// @private\n// @param {*} object\n// @returns {HTMLElement|null}\nfunction getDomElement( object ) {\n\tif ( isElement( object ) ) {\n\t\treturn object;\n\t}\n\n\tif ( isRange( object ) ) {\n\t\treturn object.commonAncestorContainer;\n\t}\n\n\tif ( typeof object == 'function' ) {\n\t\treturn getDomElement( object() );\n\t}\n\n\treturn null;\n}\n\n/**\n * A horizontal offset of the arrow tip from the edge of the balloon. Controlled by CSS.\n *\n *\t\t +-----|---------...\n *\t\t |     |\n *\t\t |     |\n *\t\t |     |\n *\t\t |     |\n *\t\t +--+  |  +------...\n *\t\t     \\ | /\n *\t\t      \\|/\n *\t    >|-----|<---------------- horizontal offset\n *\n * @default 30\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowHorizontalOffset\n */\nBalloonPanelView.arrowHorizontalOffset = 25;\n\n/**\n * A vertical offset of the arrow from the edge of the balloon. Controlled by CSS.\n *\n *\t\t +-------------...\n *\t\t |\n *\t\t |\n *\t\t |                      /-- vertical offset\n *\t\t |                     V\n *\t\t +--+    +-----...    ---------\n *\t\t     \\  /              |\n *\t\t      \\/               |\n *\t\t-------------------------------\n *\t\t                       ^\n *\n * @default 15\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowVerticalOffset\n */\nBalloonPanelView.arrowVerticalOffset = 10;\n\n/**\n * Function used to calculate the optimal position for the balloon.\n *\n * @protected\n * @member {Function} module:ui/panel/balloon/balloonpanelview~BalloonPanelView._getOptimalPosition\n */\nBalloonPanelView._getOptimalPosition = getOptimalPosition;\n\n/**\n * A default set of positioning functions used by the balloon panel view\n * when attaching using the {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo} method.\n *\n * The available positioning functions are as follows:\n *\n * **North**\n *\n * * `northArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t    [ Target ]\n *\n * * `northArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t          [ Target ]\n *\n * * `northArrowSouthWest`\n *\n * \t\t  +-----------------+\n * \t\t  |     Balloon     |\n * \t\t  +-----------------+\n * \t\t     V\n * \t\t[ Target ]\n *\n * **North west**\n *\n * * `northWestArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t         [ Target ]\n *\n * * `northWestArrowSouthWest`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t   V\n * \t\t   [ Target ]\n *\n * * `northWestArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t               [ Target ]\n *\n * **North east**\n *\n * * `northEastArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t[ Target ]\n *\n * * `northEastArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t      [ Target ]\n *\n * * `northEastArrowSouthWest`\n *\n * \t\t      +-----------------+\n * \t\t      |     Balloon     |\n * \t\t      +-----------------+\n * \t\t         V\n * \t\t[ Target ]\n *\n * **South**\n *\n * * `southArrowNorth`\n *\n *\t\t    [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southArrowNorthEast`\n *\n *\t\t          [ Target ]\n *\t\t               ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southArrowNorthWest`\n *\n *\t\t[ Target ]\n *\t\t     ^\n *\t\t   +-----------------+\n *\t\t   |     Balloon     |\n *\t\t   +-----------------+\n *\n * **South west**\n *\n * * `southWestArrowNorth`\n *\n *\t\t         [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthWest`\n *\n *\t\t  [ Target ]\n *\t\t  ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthEast`\n *\n *\t\t               [ Target ]\n *\t\t               ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * **South east**\n *\n * * `southEastArrowNorth`\n *\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southEastArrowNorthEast`\n *\n *\t\t       [ Target ]\n *\t\t                ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southEastArrowNorthWest`\n *\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t       +-----------------+\n *\t\t       |     Balloon     |\n *\t\t       +-----------------+\n *\n * See {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo}.\n *\n * Positioning functions must be compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that the position function returns will be reflected in the balloon panel's class that\n * controls the placement of the \"arrow\". See {@link #position} to learn more.\n *\n * @member {Object} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions\n */\nBalloonPanelView.defaultPositions = {\n\t// ------- North\n\n\tnorthArrowSouth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n\t\tname: 'arrow_s'\n\t} ),\n\n\tnorthArrowSouthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_se'\n\t} ),\n\n\tnorthArrowSouthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_sw'\n\t} ),\n\n\t// ------- North west\n\n\tnorthWestArrowSouth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width / 2,\n\t\tname: 'arrow_s'\n\t} ),\n\n\tnorthWestArrowSouthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_sw'\n\t} ),\n\n\tnorthWestArrowSouthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_se'\n\t} ),\n\n\t// ------- North east\n\n\tnorthEastArrowSouth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width / 2,\n\t\tname: 'arrow_s'\n\t} ),\n\n\tnorthEastArrowSouthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_se'\n\t} ),\n\n\tnorthEastArrowSouthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_sw'\n\t} ),\n\n\t// ------- South\n\n\tsouthArrowNorth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n\t\tname: 'arrow_n'\n\t} ),\n\n\tsouthArrowNorthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_ne'\n\t} ),\n\n\tsouthArrowNorthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_nw'\n\t} ),\n\n\t// ------- South west\n\n\tsouthWestArrowNorth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width / 2,\n\t\tname: 'arrow_n'\n\t} ),\n\n\tsouthWestArrowNorthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_nw'\n\t} ),\n\n\tsouthWestArrowNorthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_ne'\n\t} ),\n\n\t// ------- South east\n\n\tsouthEastArrowNorth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width / 2,\n\t\tname: 'arrow_n'\n\t} ),\n\n\tsouthEastArrowNorthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_ne'\n\t} ),\n\n\tsouthEastArrowNorthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_nw'\n\t} ),\n};\n\n// Returns the top coordinate for positions starting with `north*`.\n//\n// @private\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\n// @returns {Number}\nfunction getNorthTop( targetRect, balloonRect ) {\n\treturn targetRect.top - balloonRect.height - BalloonPanelView.arrowVerticalOffset;\n}\n\n// Returns the top coordinate for positions starting with `south*`.\n//\n// @private\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\n// @returns {Number}\nfunction getSouthTop( targetRect ) {\n\treturn targetRect.bottom + BalloonPanelView.arrowVerticalOffset;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/clickoutsidehandler\n */\n\n/* global document */\n\n/**\n * Handles clicking **outside** of a specified set of elements, then fires an action.\n *\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\n * certain issues when the user keeps holding the mouse button and the UI cannot react\n * properly.\n *\n * @param {Object} options Configuration options.\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior\n * should be added.\n * @param {Function} options.activator Function returning a `Boolean`, to determine whether the handler is active.\n * @param {Array.<HTMLElement>} options.contextElements HTML elements that determine the scope of the\n * handler. Clicking any of them or their descendants will **not** fire the callback.\n * @param {Function} options.callback An action executed by the handler.\n */\nexport default function clickOutsideHandler( { emitter, activator, callback, contextElements } ) {\n\temitter.listenTo( document, 'mousedown', ( evt, { target } ) => {\n\t\tif ( !activator() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const contextElement of contextElements ) {\n\t\t\tif ( contextElement.contains( target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tcallback();\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/priorities\n */\n\n/**\n * String representing a priority value.\n *\n * @typedef {'highest'|'high'|'normal'|'low'|'lowest'} module:utils/priorities~PriorityString\n */\n\n/**\n * Provides group of constants to use instead of hardcoding numeric priority values.\n *\n * @namespace\n */\nconst priorities = {\n\t/**\n\t * Converts a string with priority name to it's numeric value. If `Number` is given, it just returns it.\n\t *\n\t * @static\n\t * @param {module:utils/priorities~PriorityString|Number} priority Priority to convert.\n\t * @returns {Number} Converted priority.\n\t */\n\tget( priority ) {\n\t\tif ( typeof priority != 'number' ) {\n\t\t\treturn this[ priority ] || this.normal;\n\t\t} else {\n\t\t\treturn priority;\n\t\t}\n\t},\n\n\thighest: 100000,\n\thigh: 1000,\n\tnormal: 0,\n\tlow: -1000,\n\tlowest: -100000\n};\n\nexport default priorities;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/tounit\n */\n\n/**\n * Returns a helper function, which adds a desired trailing\n * `unit` to the passed value.\n *\n * @param {String} unit An unit like \"px\" or \"em\".\n * @returns {module:utils/dom/tounit~helper}\n */\nexport default function toUnit( unit ) {\n\t/**\n\t * A function, which adds a pre–defined trailing `unit`\n\t * to the passed `value`.\n\t *\n\t * @function helper\n \t * @param {*} value A value to be given the unit.\n \t * @returns {String} A value with the trailing unit.\n\t */\n\treturn value => value + unit;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/mouseobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * Mouse events observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View} by {@link module:engine/view/view~View#addObserver} method.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class MouseObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = 'mousedown';\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when mouse button is pressed down on one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/mouseobserver~MouseObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:engine/view/observer/mouseobserver~MouseObserver}\n * needs to be added to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:engine/view/observer/mouseobserver~MouseObserver\n * @event module:engine/view/document~Document#event:mousedown\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widget\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport { getLabel, isWidget, WIDGET_SELECTED_CLASS_NAME } from './utils';\nimport { getCode, keyCodes, parseKeystroke } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\nimport '../theme/widget.css';\n\nconst selectAllKeystrokeCode = parseKeystroke( 'Ctrl+A' );\n\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaviors required by widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~Selection#isFake fake}. Additionally, the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Widget extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Widget';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst view = this.editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t/**\n\t\t * Holds previously selected widgets.\n\t\t *\n\t\t * @private\n\t\t * @type {Set.<module:engine/view/element~Element>}\n\t\t */\n\t\tthis._previouslySelected = new Set();\n\n\t\t// Model to view selection converter.\n\t\t// Converts selection placed over widget element to fake selection\n\t\tthis.editor.editing.downcastDispatcher.on( 'selection', ( evt, data, conversionApi ) => {\n\t\t\t// Remove selected class from previously selected widgets.\n\t\t\tthis._clearPreviouslySelectedWidgets( conversionApi.writer );\n\n\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\tconst viewSelection = viewWriter.document.selection;\n\t\t\tconst selectedElement = viewSelection.getSelectedElement();\n\t\t\tlet lastMarked = null;\n\n\t\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tconst node = value.item;\n\n\t\t\t\t\t// Do not mark nested widgets in selected one. See: #57.\n\t\t\t\t\tif ( isWidget( node ) && !isChild( node, lastMarked ) ) {\n\t\t\t\t\t\tviewWriter.addClass( WIDGET_SELECTED_CLASS_NAME, node );\n\n\t\t\t\t\t\tthis._previouslySelected.add( node );\n\t\t\t\t\t\tlastMarked = node;\n\n\t\t\t\t\t\t// Check if widget is a single element selected.\n\t\t\t\t\t\tif ( node == selectedElement ) {\n\t\t\t\t\t\t\tviewWriter.setSelection( viewSelection.getRanges(), { fake: true, label: getLabel( selectedElement ) } );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// If mouse down is pressed on widget - create selection over whole widget.\n\t\tview.addObserver( MouseObserver );\n\t\tthis.listenTo( viewDocument, 'mousedown', ( ...args ) => this._onMousedown( ...args ) );\n\n\t\t// Handle custom keydown behaviour.\n\t\tthis.listenTo( viewDocument, 'keydown', ( ...args ) => this._onKeydown( ...args ), { priority: 'high' } );\n\n\t\t// Handle custom delete behaviour.\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tif ( this._handleDelete( data.direction == 'forward' ) ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_onMousedown( eventInfo, domEventData ) {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tlet element = domEventData.target;\n\n\t\t// Do nothing for single or double click inside nested editable.\n\t\tif ( isInsideNestedEditable( element ) ) {\n\t\t\t// But at least triple click inside nested editable causes broken selection in Safari.\n\t\t\t// For such event, we select the entire nested editable element.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/1463.\n\t\t\tif ( env.isSafari && domEventData.domEvent.detail >= 3 ) {\n\t\t\t\tconst mapper = editor.editing.mapper;\n\t\t\t\tconst modelElement = mapper.toModelElement( element );\n\n\t\t\t\tthis.editor.model.change( writer => {\n\t\t\t\t\tdomEventData.preventDefault();\n\t\t\t\t\twriter.setSelection( modelElement, 'in' );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If target is not a widget element - check if one of the ancestors is.\n\t\tif ( !isWidget( element ) ) {\n\t\t\telement = element.findAncestor( isWidget );\n\n\t\t\tif ( !element ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tdomEventData.preventDefault();\n\n\t\t// Focus editor if is not focused already.\n\t\tif ( !viewDocument.isFocused ) {\n\t\t\tview.focus();\n\t\t}\n\n\t\t// Create model selection over widget.\n\t\tconst modelElement = editor.editing.mapper.toModelElement( element );\n\n\t\tthis._setSelectionOverElement( modelElement );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_onKeydown( eventInfo, domEventData ) {\n\t\tconst keyCode = domEventData.keyCode;\n\t\tconst isLtrContent = this.editor.locale.contentLanguageDirection === 'ltr';\n\t\tconst isForward = keyCode == keyCodes.arrowdown || keyCode == keyCodes[ isLtrContent ? 'arrowright' : 'arrowleft' ];\n\t\tlet wasHandled = false;\n\n\t\t// Checks if the keys were handled and then prevents the default event behaviour and stops\n\t\t// the propagation.\n\t\tif ( isArrowKeyCode( keyCode ) ) {\n\t\t\twasHandled = this._handleArrowKeys( isForward );\n\t\t} else if ( isSelectAllKeyCode( domEventData ) ) {\n\t\t\twasHandled = this._selectAllNestedEditableContent() || this._selectAllContent();\n\t\t} else if ( keyCode === keyCodes.enter ) {\n\t\t\twasHandled = this._handleEnterKey( domEventData.shiftKey );\n\t\t}\n\n\t\tif ( wasHandled ) {\n\t\t\tdomEventData.preventDefault();\n\t\t\teventInfo.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles delete keys: backspace and delete.\n\t *\n\t * @private\n\t * @param {Boolean} isForward Set to true if delete was performed in forward direction.\n\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n\t */\n\t_handleDelete( isForward ) {\n\t\t// Do nothing when the read only mode is enabled.\n\t\tif ( this.editor.isReadOnly ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelDocument = this.editor.model.document;\n\t\tconst modelSelection = modelDocument.selection;\n\n\t\t// Do nothing on non-collapsed selection.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst objectElement = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( objectElement ) {\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\tlet previousNode = modelSelection.anchor.parent;\n\n\t\t\t\t// Remove previous element if empty.\n\t\t\t\twhile ( previousNode.isEmpty ) {\n\t\t\t\t\tconst nodeToRemove = previousNode;\n\t\t\t\t\tpreviousNode = nodeToRemove.parent;\n\n\t\t\t\t\twriter.remove( nodeToRemove );\n\t\t\t\t}\n\n\t\t\t\tthis._setSelectionOverElement( objectElement );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Handles arrow keys.\n\t *\n\t * @private\n\t * @param {Boolean} isForward Set to true if arrow key should be handled in forward direction.\n\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n\t */\n\t_handleArrowKeys( isForward ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelDocument = model.document;\n\t\tconst modelSelection = modelDocument.selection;\n\t\tconst objectElement = modelSelection.getSelectedElement();\n\n\t\t// If object element is selected.\n\t\tif ( objectElement && schema.isObject( objectElement ) ) {\n\t\t\tconst position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n\t\t\tconst newRange = schema.getNearestSelectionRange( position, isForward ? 'forward' : 'backward' );\n\n\t\t\tif ( newRange ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelection( newRange );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// If selection is next to object element.\n\t\t// Return if not collapsed.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst objectElement2 = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( !!objectElement2 && schema.isObject( objectElement2 ) ) {\n\t\t\tthis._setSelectionOverElement( objectElement2 );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Handles the enter key, giving users and access to positions in the editable directly before\n\t * (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or after (<kbd>Enter</kbd>) the selected widget.\n\t * It improves the UX, mainly when the widget is the first or last child of the root editable\n\t * and there's no other way to type after or before it.\n\t *\n\t * @private\n\t * @param {Boolean} isBackwards Set to true if the new paragraph is to be inserted before\n\t * the selected widget (<kbd>Shift</kbd>+<kbd>Enter</kbd>).\n\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n\t */\n\t_handleEnterKey( isBackwards ) {\n\t\tconst model = this.editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst selectedElement = modelSelection.getSelectedElement();\n\n\t\tif ( shouldInsertParagraph( selectedElement, model.schema ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\tlet position = writer.createPositionAt( selectedElement, isBackwards ? 'before' : 'after' );\n\t\t\t\tconst paragraph = writer.createElement( 'paragraph' );\n\n\t\t\t\t// Split the parent when inside a block element.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5/issues/1529\n\t\t\t\tif ( model.schema.isBlock( selectedElement.parent ) ) {\n\t\t\t\t\tconst paragraphLimit = model.schema.findAllowedParent( position, paragraph );\n\n\t\t\t\t\tposition = writer.split( position, paragraphLimit ).position;\n\t\t\t\t}\n\n\t\t\t\twriter.insert( paragraph, position );\n\t\t\t\twriter.setSelection( paragraph, 'in' );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Extends the {@link module:engine/model/selection~Selection document's selection} to span the entire\n\t * content of the nested editable if already anchored in one.\n\t *\n\t * See: {@link module:engine/model/schema~Schema#getLimitElement}.\n\t *\n\t * @private\n\t */\n\t_selectAllNestedEditableContent() {\n\t\tconst model = this.editor.model;\n\t\tconst documentSelection = model.document.selection;\n\t\tconst limitElement = model.schema.getLimitElement( documentSelection );\n\n\t\tif ( documentSelection.getFirstRange().root == limitElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeIn( limitElement ) );\n\t\t} );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Handles <kbd>CTRL + A</kbd> when widget is selected.\n\t *\n\t * @private\n\t * @returns {Boolean} Returns true if widget was selected and selecting all was handled by this method.\n\t */\n\t_selectAllContent() {\n\t\tconst model = this.editor.model;\n\t\tconst editing = this.editor.editing;\n\t\tconst view = editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst viewSelection = viewDocument.selection;\n\n\t\tconst selectedElement = viewSelection.getSelectedElement();\n\n\t\t// Only widget is selected.\n\t\t// https://github.com/ckeditor/ckeditor5-widget/issues/23\n\t\tif ( selectedElement && isWidget( selectedElement ) ) {\n\t\t\tconst widgetParent = editing.mapper.toModelElement( selectedElement.parent );\n\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeIn( widgetParent ) );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t */\n\t_setSelectionOverElement( element ) {\n\t\tthis.editor.model.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeOn( element ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if {@link module:engine/model/element~Element element} placed next to the current\n\t * {@link module:engine/model/selection~Selection model selection} exists and is marked in\n\t * {@link module:engine/model/schema~Schema schema} as `object`.\n\t *\n\t * @private\n\t * @param {Boolean} forward Direction of checking.\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\t_getObjectElementNextToSelection( forward ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelSelection = model.document.selection;\n\n\t\t// Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n\t\t// to its current state after undo.\n\t\tconst probe = model.createSelection( modelSelection );\n\t\tmodel.modifySelection( probe, { direction: forward ? 'forward' : 'backward' } );\n\t\tconst objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\n\n\t\tif ( !!objectElement && schema.isObject( objectElement ) ) {\n\t\t\treturn objectElement;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes CSS class from previously selected widgets.\n\t *\n\t * @private\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\t_clearPreviouslySelectedWidgets( writer ) {\n\t\tfor ( const widget of this._previouslySelected ) {\n\t\t\twriter.removeClass( WIDGET_SELECTED_CLASS_NAME, widget );\n\t\t}\n\n\t\tthis._previouslySelected.clear();\n\t}\n}\n\n// Returns 'true' if provided key code represents one of the arrow keys.\n//\n// @param {Number} keyCode\n// @returns {Boolean}\nfunction isArrowKeyCode( keyCode ) {\n\treturn keyCode == keyCodes.arrowright ||\n\t\tkeyCode == keyCodes.arrowleft ||\n\t\tkeyCode == keyCodes.arrowup ||\n\t\tkeyCode == keyCodes.arrowdown;\n}\n\n// Returns 'true' if provided (DOM) key event data corresponds with the Ctrl+A keystroke.\n//\n// @param {module:engine/view/observer/keyobserver~KeyEventData} domEventData\n// @returns {Boolean}\nfunction isSelectAllKeyCode( domEventData ) {\n\treturn getCode( domEventData ) == selectAllKeystrokeCode;\n}\n\n// Returns `true` when element is a nested editable or is placed inside one.\n//\n// @param {module:engine/view/element~Element}\n// @returns {Boolean}\nfunction isInsideNestedEditable( element ) {\n\twhile ( element ) {\n\t\tif ( element.is( 'editableElement' ) && !element.is( 'rootElement' ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Click on nested widget should select it.\n\t\tif ( isWidget( element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\telement = element.parent;\n\t}\n\n\treturn false;\n}\n\n// Checks whether the specified `element` is a child of the `parent` element.\n//\n// @param {module:engine/view/element~Element} element An element to check.\n// @param {module:engine/view/element~Element|null} parent A parent for the element.\n// @returns {Boolean}\nfunction isChild( element, parent ) {\n\tif ( !parent ) {\n\t\treturn false;\n\t}\n\n\treturn Array.from( element.getAncestors() ).includes( parent );\n}\n\n// Checks if enter key should insert paragraph. This should be done only on elements of type object (excluding inline objects).\n//\n// @param {module:engine/model/element~Element} element And element to check.\n// @param {module:engine/model/schema~Schema} schema\nfunction shouldInsertParagraph( element, schema ) {\n\treturn element && schema.isObject( element ) && !schema.isInline( element );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/attributecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * An extension of the base {@link module:core/command~Command} class, which provides utilities for a command\n * that toggles a single attribute on a text or an element.\n *\n * `AttributeCommand` uses {@link module:engine/model/document~Document#selection}\n * to decide which nodes (if any) should be changed, and applies or removes the attribute from them.\n *\n * The command checks the {@link module:engine/model/model~Model#schema} to decide if it can be enabled\n * for the current selection and to which nodes the attribute can be applied.\n *\n * @extends module:core/command~Command\n */\nexport default class AttributeCommand extends Command {\n\t/**\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {String} attributeKey Attribute that will be set by the command.\n\t */\n\tconstructor( editor, attributeKey ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The attribute that will be set by the command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.attributeKey = attributeKey;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection#hasAttribute selection has the attribute} which means that:\n\t\t *\n\t\t * * If the selection is not empty &ndash; That the attribute is set on the first node in the selection that allows this attribute.\n\t\t * * If the selection is empty &ndash; That the selection has the attribute itself (which means that newly typed\n\t\t * text will have this attribute, too).\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t}\n\n\t/**\n\t * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.value = this._getValueFromFirstAllowedNode();\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, this.attributeKey );\n\t}\n\n\t/**\n\t * Executes the command &mdash; applies the attribute to the selection or removes it from the selection.\n\t *\n\t * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.\n\t *\n\t * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n\t *\n\t * * If the selection is on a range, the command applies the attribute to all nodes in that range\n\t * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n\t * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n\t * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n\t * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n\t * that the selection inherits all attributes from a node if it is in an empty node).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Command options.\n\t * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply the attribute,\n\t * otherwise the command will remove the attribute.\n\t * If not set, the command will look for its current value to decide what it should do.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst value = ( options.forceValue === undefined ) ? !this.value : options.forceValue;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setSelectionAttribute( this.attributeKey, true );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeSelectionAttribute( this.attributeKey );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), this.attributeKey );\n\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\tif ( value ) {\n\t\t\t\t\t\twriter.setAttribute( this.attributeKey, value, range );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.removeAttribute( this.attributeKey, range );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the attribute value of the first node in the selection that allows the attribute.\n\t * For the collapsed selection returns the selection attribute.\n\t *\n\t * @private\n\t * @returns {Boolean} The attribute value.\n\t */\n\t_getValueFromFirstAllowedNode() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn selection.hasAttribute( this.attributeKey );\n\t\t}\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\tif ( schema.checkAttribute( item, this.attributeKey ) ) {\n\t\t\t\t\treturn item.hasAttribute( this.attributeKey );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledinput/labeledinputview\n */\n\nimport View from '../view';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport LabelView from '../label/labelview';\nimport '../../theme/components/labeledinput/labeledinput.css';\n\n/**\n * The labeled input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class LabeledInputView extends View {\n\t/**\n\t * Creates an instance of the labeled input view class.\n\t *\n\t * @param {module:utils/locale~Locale} locale The locale instance.\n\t * @param {Function} InputView Constructor of the input view.\n\t */\n\tconstructor( locale, InputView ) {\n\t\tsuper( locale );\n\n\t\tconst inputUid = `ck-input-${ uid() }`;\n\t\tconst statusUid = `ck-status-${ uid() }`;\n\n\t\t/**\n\t\t * The text of the label.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #label\n\t\t */\n\t\tthis.set( 'label' );\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * Controls whether the component is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * The validation error text. When set, it will be displayed\n\t\t * next to the {@link #inputView} as a typical validation error message.\n\t\t * Set it to `null` to hide the message.\n\t\t *\n\t\t * **Note:** Setting this property to anything but `null` will automatically\n\t\t * make the {@link module:ui/inputtext/inputtextview~InputTextView#hasError `hasError`}\n\t\t * of the {@link #inputView} `true`.\n\t\t *\n\t\t * **Note:** Typing in the {@link #inputView} which fires the\n\t\t * {@link module:ui/inputtext/inputtextview~InputTextView#event:input `input` event}\n\t\t * resets this property back to `null`, indicating that the input field can be re–validated.\n\t\t *\n\t\t * @observable\n\t\t * @member {String|null} #errorText\n\t\t */\n\t\tthis.set( 'errorText', null );\n\n\t\t/**\n\t\t * The additional information text displayed next to the {@link #inputView} which can\n\t\t * be used to inform the user about the purpose of the input, provide help or hints.\n\t\t *\n\t\t * Set it to `null` to hide the message.\n\t\t *\n\t\t * **Note:** This text will be displayed in the same place as {@link #errorText} but the\n\t\t * latter always takes precedence: if the {@link #errorText} is set, it replaces\n\t\t * {@link #errorText} for as long as the value of the input is invalid.\n\t\t *\n\t\t * @observable\n\t\t * @member {String|null} #infoText\n\t\t */\n\t\tthis.set( 'infoText', null );\n\n\t\t/**\n\t\t * The label view.\n\t\t *\n\t\t * @member {module:ui/label/labelview~LabelView} #labelView\n\t\t */\n\t\tthis.labelView = this._createLabelView( inputUid );\n\n\t\t/**\n\t\t * The input view.\n\t\t *\n\t\t * @member {module:ui/inputtext/inputtextview~InputTextView} #inputView\n\t\t */\n\t\tthis.inputView = this._createInputView( InputView, inputUid, statusUid );\n\n\t\t/**\n\t\t * The status view for the {@link #inputView}. It displays {@link #errorText} and\n\t\t * {@link #infoText}.\n\t\t *\n\t\t * @member {module:ui/view~View} #statusView\n\t\t */\n\t\tthis.statusView = this._createStatusView( statusUid );\n\n\t\t/**\n\t\t * The combined status text made of {@link #errorText} and {@link #infoText}.\n\t\t * Note that when present, {@link #errorText} always takes precedence in the\n\t\t * status.\n\t\t *\n\t\t * @see #errorText\n\t\t * @see #infoText\n\t\t * @see #statusView\n\t\t * @private\n\t\t * @observable\n\t\t * @member {String|null} #_statusText\n\t\t */\n\t\tthis.bind( '_statusText' ).to(\n\t\t\tthis, 'errorText',\n\t\t\tthis, 'infoText',\n\t\t\t( errorText, infoText ) => errorText || infoText\n\t\t);\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-labeled-input',\n\t\t\t\t\tbind.if( 'isReadOnly', 'ck-disabled' )\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis.labelView,\n\t\t\t\tthis.inputView,\n\t\t\t\tthis.statusView\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * Creates label view class instance and bind with view.\n\t *\n\t * @private\n\t * @param {String} id Unique id to set as labelView#for attribute.\n\t * @returns {module:ui/label/labelview~LabelView}\n\t */\n\t_createLabelView( id ) {\n\t\tconst labelView = new LabelView( this.locale );\n\n\t\tlabelView.for = id;\n\t\tlabelView.bind( 'text' ).to( this, 'label' );\n\n\t\treturn labelView;\n\t}\n\n\t/**\n\t * Creates input view class instance and bind with view.\n\t *\n\t * @private\n\t * @param {Function} InputView Input view constructor.\n\t * @param {String} inputUid Unique id to set as inputView#id attribute.\n\t * @param {String} statusUid Unique id of the status for the input's `aria-describedby` attribute.\n\t * @returns {module:ui/inputtext/inputtextview~InputTextView}\n\t */\n\t_createInputView( InputView, inputUid, statusUid ) {\n\t\tconst inputView = new InputView( this.locale, statusUid );\n\n\t\tinputView.id = inputUid;\n\t\tinputView.ariaDescribedById = statusUid;\n\t\tinputView.bind( 'value' ).to( this );\n\t\tinputView.bind( 'isReadOnly' ).to( this );\n\t\tinputView.bind( 'hasError' ).to( this, 'errorText', value => !!value );\n\n\t\tinputView.on( 'input', () => {\n\t\t\t// UX: Make the error text disappear and disable the error indicator as the user\n\t\t\t// starts fixing the errors.\n\t\t\tthis.errorText = null;\n\t\t} );\n\n\t\treturn inputView;\n\t}\n\n\t/**\n\t * Creates the status view instance. It displays {@link #errorText} and {@link #infoText}\n\t * next to the {@link #inputView}. See {@link #_statusText}.\n\t *\n\t * @private\n\t * @param {String} statusUid Unique id of the status, shared with the input's `aria-describedby` attribute.\n\t * @returns {module:ui/view~View}\n\t */\n\t_createStatusView( statusUid ) {\n\t\tconst statusView = new View( this.locale );\n\t\tconst bind = this.bindTemplate;\n\n\t\tstatusView.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-labeled-input__status',\n\t\t\t\t\tbind.if( 'errorText', 'ck-labeled-input__status_error' ),\n\t\t\t\t\tbind.if( '_statusText', 'ck-hidden', value => !value )\n\t\t\t\t],\n\t\t\t\tid: statusUid,\n\t\t\t\trole: bind.if( 'errorText', 'alert' )\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: bind.to( '_statusText' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn statusView;\n\t}\n\n\t/**\n\t * Moves the focus to the input and selects the value.\n\t */\n\tselect() {\n\t\tthis.inputView.select();\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis.inputView.focus();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/inputtext/inputtextview\n */\n\nimport View from '../view';\nimport '../../theme/components/inputtext/inputtext.css';\n\n/**\n * The text input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class InputTextView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * The `id` attribute of the input (i.e. to pair with a `<label>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #id\n\t\t */\n\t\tthis.set( 'id' );\n\n\t\t/**\n\t\t * The `placeholder` attribute of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #placeholder\n\t\t */\n\t\tthis.set( 'placeholder' );\n\n\t\t/**\n\t\t * Controls whether the input view is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Set to `true` when the field has some error. Usually controlled via\n\t\t * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #hasError\n\t\t */\n\t\tthis.set( 'hasError', false );\n\n\t\t/**\n\t\t * The `id` of the element describing this field, e.g. when it has\n\t\t * some error, it helps screen readers read the error text.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #ariaDescribedById\n\t\t */\n\t\tthis.set( 'ariaDescribedById' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'input',\n\t\t\tattributes: {\n\t\t\t\ttype: 'text',\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-input',\n\t\t\t\t\t'ck-input-text',\n\t\t\t\t\tbind.if( 'hasError', 'ck-error' )\n\t\t\t\t],\n\t\t\t\tid: bind.to( 'id' ),\n\t\t\t\tplaceholder: bind.to( 'placeholder' ),\n\t\t\t\treadonly: bind.to( 'isReadOnly' ),\n\t\t\t\t'aria-invalid': bind.if( 'hasError', true ),\n\t\t\t\t'aria-describedby': bind.to( 'ariaDescribedById' )\n\t\t\t},\n\t\t\ton: {\n\t\t\t\tinput: bind.to( 'input' )\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Fired when the user types in the input. Corresponds to the native\n\t\t * DOM `input` event.\n\t\t *\n\t\t * @event input\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tconst setValue = value => {\n\t\t\tthis.element.value = ( !value && value !== 0 ) ? '' : value;\n\t\t};\n\n\t\tsetValue( this.value );\n\n\t\t// Bind `this.value` to the DOM element's value.\n\t\t// We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n\t\tthis.on( 'change:value', ( evt, name, value ) => {\n\t\t\tsetValue( value );\n\t\t} );\n\t}\n\n\t/**\n\t * Moves the focus to the input and selects the value.\n\t */\n\tselect() {\n\t\tthis.element.select();\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/submithandler\n */\n\n/**\n * A handler useful for {@link module:ui/view~View views} working as HTML forms. It intercepts a native DOM\n * `submit` event, prevents the default web browser behavior (navigation and page reload) and\n * fires the `submit` event on a view instead. Such a custom event can be then used by any\n * {@link module:utils/dom/emittermixin~Emitter emitter}, e.g. to serialize the form data.\n *\n *\t\timport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\n *\n *\t\t// ...\n *\n *\t\tclass AnyFormView extends View {\n *\t\t\tconstructor() {\n *\t\t\t\tsuper();\n *\n *\t\t\t\t// ...\n *\n *\t\t\t\tsubmitHandler( {\n *\t\t\t\t\tview: this\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n *\t\t// ...\n *\n *\t\tconst view = new AnyFormView();\n *\n *\t\t// A sample listener attached by an emitter working with the view.\n *\t\tthis.listenTo( view, 'submit', () => {\n *\t\t\tsaveTheFormData();\n *\t\t\thideTheForm();\n *\t\t} );\n *\n * @param {Object} [options] Configuration options.\n * @param {module:ui/view~View} options.view The view which DOM `submit` events should be handled.\n */\nexport default function submitHandler( { view } ) {\n\tview.listenTo( view.element, 'submit', ( evt, domEvt ) => {\n\t\tdomEvt.preventDefault();\n\t\tview.fire( 'submit' );\n\t}, { useCapture: true } );\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.972 16.615a.997.997 0 0 1-.744-.292l-4.596-4.596a1 1 0 1 1 1.414-1.414l3.926 3.926 9.937-9.937a1 1 0 0 1 1.414 1.415L7.717 16.323a.997.997 0 0 1-.745.292z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.591 10.177l4.243 4.242a1 1 0 0 1-1.415 1.415l-4.242-4.243-4.243 4.243a1 1 0 0 1-1.414-1.415l4.243-4.242L4.52 5.934A1 1 0 0 1 5.934 4.52l4.243 4.243 4.242-4.243a1 1 0 1 1 1.415 1.414l-4.243 4.243z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/widgettoolbarrepository\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\nimport BalloonPanelView from '@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview';\nimport { isWidget } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Widget toolbar repository plugin. A central point for registering widget toolbars. This plugin handles the whole\n * toolbar rendering process and exposes a concise API.\n *\n * To add a toolbar for your widget use the {@link ~WidgetToolbarRepository#register `WidgetToolbarRepository#register()`} method.\n *\n * The following example comes from the {@link module:image/imagetoolbar~ImageToolbar} plugin:\n *\n * \t\tclass ImageToolbar extends Plugin {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ WidgetToolbarRepository ];\n *\t\t\t}\n *\n *\t\t\tafterInit() {\n *\t\t\t\tconst editor = this.editor;\n *\t\t\t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n *\n *\t\t\t\twidgetToolbarRepository.register( 'image', {\n *\t\t\t\t\titems: editor.config.get( 'image.toolbar' ),\n *\t\t\t\t\tgetRelatedElement: getSelectedImageWidget\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n */\nexport default class WidgetToolbarRepository extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'WidgetToolbarRepository';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        // Disables the default balloon toolbar for all widgets.\n        if (editor.plugins.has('BalloonToolbar')) {\n            const balloonToolbar = editor.plugins.get('BalloonToolbar');\n            this.listenTo(balloonToolbar, 'show', evt => {\n                if (isWidgetSelected(editor.editing.view.document.selection)) {\n                    evt.stop();\n                }\n            }, { priority: 'high' });\n        }\n        /**\n\t\t * A map of toolbar definitions.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<String,module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition>} #_toolbarDefinitions\n\t\t */\n        this._toolbarDefinitions = new Map();\n        /**\n\t\t * @private\n\t\t */\n        this._balloon = this.editor.plugins.get('ContextualBalloon');\n        this.listenTo(editor.ui, 'update', () => {\n            this._updateToolbarsVisibility();\n        });\n        // UI#update is not fired after focus is back in editor, we need to check if balloon panel should be visible.\n        this.listenTo(editor.ui.focusTracker, 'change:isFocused', () => {\n            this._updateToolbarsVisibility();\n        }, { priority: 'low' });\n    }\n    destroy() {\n        super.destroy();\n        for (const toolbarConfig of this._toolbarDefinitions.values()) {\n            toolbarConfig.view.destroy();\n        }\n    }\n    /**\n\t * Registers toolbar in the WidgetToolbarRepository. It renders it in the `ContextualBalloon` based on the value of the invoked\n\t * `getRelatedElement` function. Toolbar items are gathered from `items` array.\n\t * The balloon's CSS class is by default `ck-toolbar-container` and may be override with the `balloonClassName` option.\n\t *\n\t * Note: This method should be called in the {@link module:core/plugin~PluginInterface#afterInit `Plugin#afterInit()`}\n\t * callback (or later) to make sure that the given toolbar items were already registered by other plugins.\n\t *\n\t * @param {String} toolbarId An id for the toolbar. Used to\n\t * @param {Object} options\n\t * @param {String} [options.ariaLabel] Label used by assistive technologies to describe this toolbar element.\n\t * @param {Array.<String>} options.items Array of toolbar items.\n\t * @param {Function} options.getRelatedElement Callback which returns an element the toolbar should be attached to.\n\t * @param {String} [options.balloonClassName='ck-toolbar-container'] CSS class for the widget balloon.\n\t */\n    register(toolbarId, {ariaLabel, items, getRelatedElement, balloonClassName = 'ck-toolbar-container'}) {\n        const editor = this.editor;\n        const t = editor.t;\n        const toolbarView = new ToolbarView(editor.locale);\n        toolbarView.ariaLabel = ariaLabel || t('Widget toolbar');\n        if (this._toolbarDefinitions.has(toolbarId)) {\n            /**\n\t\t\t * Toolbar with the given id was already added.\n\t\t\t *\n\t\t\t * @error widget-toolbar-duplicated\n\t\t\t * @param toolbarId Toolbar id.\n\t\t\t */\n            throw new CKEditorError('widget-toolbar-duplicated: Toolbar with the given id was already added.', this, { toolbarId });\n        }\n        toolbarView.fillFromConfig(items, editor.ui.componentFactory);\n        this._toolbarDefinitions.set(toolbarId, {\n            view: toolbarView,\n            getRelatedElement,\n            balloonClassName\n        });\n    }\n    /**\n\t * Iterates over stored toolbars and makes them visible or hidden.\n\t *\n\t * @private\n\t */\n    _updateToolbarsVisibility() {\n        let maxRelatedElementDepth = 0;\n        let deepestRelatedElement = null;\n        let deepestToolbarDefinition = null;\n        for (const definition of this._toolbarDefinitions.values()) {\n            const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n            if (!this.editor.ui.focusTracker.isFocused) {\n                if (this._isToolbarVisible(definition)) {\n                    this._hideToolbar(definition);\n                }\n            } else if (!relatedElement) {\n                if (this._isToolbarInBalloon(definition)) {\n                    this._hideToolbar(definition);\n                }\n            } else {\n                const relatedElementDepth = relatedElement.getAncestors().length;\n                // Many toolbars can express willingness to be displayed but they do not know about\n                // each other. Figure out which toolbar is deepest in the view tree to decide which\n                // should be displayed. For instance, if a selected image is inside a table cell, display\n                // the ImageToolbar rather than the TableToolbar (#60).\n                if (relatedElementDepth > maxRelatedElementDepth) {\n                    maxRelatedElementDepth = relatedElementDepth;\n                    deepestRelatedElement = relatedElement;\n                    deepestToolbarDefinition = definition;\n                }\n            }\n        }\n        if (deepestToolbarDefinition) {\n            this._showToolbar(deepestToolbarDefinition, deepestRelatedElement);\n        }\n    }\n    /**\n\t * Hides the given toolbar.\n\t *\n\t * @private\n\t * @param {module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition} toolbarDefinition\n\t */\n    _hideToolbar(toolbarDefinition) {\n        this._balloon.remove(toolbarDefinition.view);\n        this.stopListening(this._balloon, 'change:visibleView');\n    }\n    /**\n\t * Shows up the toolbar if the toolbar is not visible.\n\t * Otherwise, repositions the toolbar's balloon when toolbar's view is the most top view in balloon stack.\n\t *\n\t * It might happen here that the toolbar's view is under another view. Then do nothing as the other toolbar view\n\t * should be still visible after the {@link module:core/editor/editorui~EditorUI#event:update}.\n\t *\n\t * @private\n\t * @param {module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition} toolbarDefinition\n\t * @param {module:engine/view/element~Element} relatedElement\n\t */\n    _showToolbar(toolbarDefinition, relatedElement) {\n        if (this._isToolbarVisible(toolbarDefinition)) {\n            repositionContextualBalloon(this.editor, relatedElement);\n        } else if (!this._isToolbarInBalloon(toolbarDefinition)) {\n            this._balloon.add({\n                view: toolbarDefinition.view,\n                position: getBalloonPositionData(this.editor, relatedElement),\n                balloonClassName: toolbarDefinition.balloonClassName\n            });\n            // Update toolbar position each time stack with toolbar view is switched to visible.\n            // This is in a case target element has changed when toolbar was in invisible stack\n            // e.g. target image was wrapped by a block quote.\n            // See https://github.com/ckeditor/ckeditor5-widget/issues/92.\n            this.listenTo(this._balloon, 'change:visibleView', () => {\n                for (const definition of this._toolbarDefinitions.values()) {\n                    if (this._isToolbarVisible(definition)) {\n                        const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n                        repositionContextualBalloon(this.editor, relatedElement);\n                    }\n                }\n            });\n        }\n    }\n    /**\n\t * @private\n\t * @param {Object} toolbar\n\t * @returns {Boolean}\n\t */\n    _isToolbarVisible(toolbar) {\n        return this._balloon.visibleView === toolbar.view;\n    }\n    /**\n\t * @private\n\t * @param {Object} toolbar\n\t * @returns {Boolean}\n\t */\n    _isToolbarInBalloon(toolbar) {\n        return this._balloon.hasView(toolbar.view);\n    }\n}\nfunction repositionContextualBalloon(editor, relatedElement) {\n    const balloon = editor.plugins.get('ContextualBalloon');\n    const position = getBalloonPositionData(editor, relatedElement);\n    balloon.updatePosition(position);\n}\nfunction getBalloonPositionData(editor, relatedElement) {\n    const editingView = editor.editing.view;\n    const defaultPositions = BalloonPanelView.defaultPositions;\n    return {\n        target: editingView.domConverter.mapViewToDom(relatedElement),\n        positions: [\n            defaultPositions.northArrowSouth,\n            defaultPositions.northArrowSouthWest,\n            defaultPositions.northArrowSouthEast,\n            defaultPositions.southArrowNorth,\n            defaultPositions.southArrowNorthWest,\n            defaultPositions.southArrowNorthEast\n        ]\n    };\n}\nfunction isWidgetSelected(selection) {\n    const viewElement = selection.getSelectedElement();\n    return !!(viewElement && isWidget(viewElement));\n}    /**\n * The toolbar definition object used by the toolbar repository to manage toolbars.\n * It contains information necessary to display the toolbar in the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} and\n * update it during its life (display) cycle.\n *\n * @typedef {Object} module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition\n *\n * @property {module:ui/view~View} view The UI view of the toolbar.\n * @property {Function} getRelatedElement A function that returns an engine {@link module:engine/view/view~View}\n * element the toolbar is to be attached to. For instance, an image widget or a table widget (or `null` when\n * there is no such element). The function accepts an instance of {@link module:engine/view/selection~Selection}.\n * @property {String} balloonClassName CSS class for the widget balloon when a toolbar is displayed.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/version\n */\n\n/* globals window, global */\n\nimport { version } from 'ckeditor5/package.json';\nimport CKEditorError from './ckeditorerror';\n\nconst windowOrGlobal = typeof window === 'object' ? window : global;\n\nif ( windowOrGlobal.CKEDITOR_VERSION ) {\n\t/**\n\t * This error is thrown when due to a mistake in how CKEditor 5 was installed or initialized, some\n\t * of its modules were duplicated (evaluated and executed twice). Module duplication leads to inevitable runtime\n\t * errors.\n\t *\n\t * There are many situations in which some modules can be loaded twice. In the worst case scenario,\n\t * you may need to check your project for each of these issues and fix them all.\n\t *\n\t * # Trying to add a plugin to an existing build\n\t *\n\t * If you import an existing CKEditor 5 build and a plugin like this:\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\t *\t\timport Highlight from '@ckeditor/ckeditor5-highlight/src/highlight';\n\t *\n\t * Then your project loads some CKEditor 5 packages twice. How does it happen?\n\t *\n\t * The build package contains a file which is already compiled with webpack. This means\n\t * that it contains all the necessary code from e.g. `@ckeditor/ckeditor5-engine` and `@ckeditor/ckeditor5-utils`.\n\t *\n\t * However, the `Highlight` plugin imports some of the modules from these packages, too. If you ask webpack to\n\t * build such a project, you will end up with the modules being included (and run) twice &mdash; first, because they are\n\t * included inside the build package, and second, because they are required by the `Highlight` plugin.\n\t *\n\t * Therefore, **you must never add plugins to an existing build** unless your plugin has no dependencies.\n\t *\n\t * Adding plugins to a build is done by taking the source version of this build (so, before it was built with webpack)\n\t * and adding plugins there. In this situation, webpack will know that it only needs to load each plugin once.\n\t *\n\t * Read more in the {@glink builds/guides/integration/installing-plugins \"Installing plugins\"} guide.\n\t *\n\t * # Confused an editor build with an editor implementation\n\t *\n\t * This scenario is very similar to the previous one, but has a different origin.\n\t *\n\t * Let's assume that you wanted to use CKEditor 5 from source, as explained in the\n\t * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"} section\n\t * or in the {@glink framework/guides/quick-start \"Quick start\"} guide of CKEditor 5 Framework.\n\t *\n\t * The correct way to do so is to import an editor and plugins and run them together like this:\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\n\t *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n\t *\t\timport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\t *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n\t *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ), {\n\t *\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t *\t\t\t\ttoolbar: [ 'bold', 'italic' ]\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( error => {\n\t *\t\t\t\tconsole.error( error.stack );\n\t *\t\t\t} );\n\t *\n\t * However, you might have mistakenly imported a build instead of the source `ClassicEditor`. In this case\n\t * your imports will look like this:\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\t *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n\t *\t\timport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\t *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n\t *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n\t *\n\t * This creates the same situation as in the previous section because you use a build together with source plugins.\n\t *\n\t * Remember: `@ckeditor/ckeditor5-build-*` packages contain editor builds and `@ckeditor/ckeditor5-editor-*` contain source editors.\n\t *\n\t * # Loading two or more builds on one page\n\t *\n\t * If you use CKEditor 5 builds, you might have loaded two (or more) `ckeditor.js` files on one web page.\n\t * Check your web page for duplicated `<script>` elements or make sure your page builder/bundler includes CKEditor only once.\n\t *\n\t * If you want to use two different types of editors at once, see the\n\t * {@glink builds/guides/integration/advanced-setup#scenario-3-using-two-different-editors \"Using two different editors\"}\n\t * section.\n\t *\n\t * # Using outdated packages\n\t *\n\t * Building CKEditor 5 from source requires using multiple npm packages. These packages have their dependencies\n\t * to other packages. If you use the latest version of, for example, `@ckeditor/ckeditor5-editor-classic` with\n\t * an outdated version of `@ckeditor/ckeditor5-image`, npm or yarn will need to install two different versions of\n\t * `@ckeditor/ckeditor5-core` because `@ckeditor/ckeditor5-editor-classic` and `@ckeditor/ckeditor5-image` may require\n\t * different versions of the core package.\n\t *\n\t * The solution to this issue is to update all packages to their latest version. We recommend\n\t * using tools like [`node-check-updates`](https://www.npmjs.com/package/npm-check-updates) which simplify this process.\n\t *\n\t * # Conflicting version of dependencies\n\t *\n\t * This is a special case of the previous scenario. If you use CKEditor 5 with some third-party plugins,\n\t * it may happen that even if you use the latest versions of the official packages and the latest version of\n\t * these third-party packages, there will be a conflict between some of their dependencies.\n\t *\n\t * Such a problem can be resolved by either downgrading CKEditor 5 packages (which we do not recommend) or\n\t * asking the author of the third-party package to upgrade its depdendencies (or forking their project and doing this yourself).\n\t *\n\t * # Packages were duplicated in `node_modules`\n\t *\n\t * In some situations, especially when calling `npm install` multiple times, it may happen\n\t * that npm will not correctly \"deduplicate\" packages.\n\t *\n\t * Normally, npm deduplicates all packages so, for example, `@ckeditor/ckeditor5-core` is installed only once in `node_modules/`.\n\t * However, it is known to fail to do so from time to time.\n\t *\n\t * We recommend checking if any of the steps listed below help:\n\t *\n\t * * `rm -rf node_modules && npm install` to make sure you have a clean `node_modules/` directory. This step\n\t * is known to help in most cases.\n\t * * If you use `yarn.lock` or `package-lock.json`, remove it before `npm install`.\n\t * * Check whether all CKEditor 5 packages are up to date and reinstall them\n\t * if you changed anything (`rm -rf node_modules && npm install`).\n\t *\n\t * If all packages are correct and compatible with each other, the steps above are known to help. If not, you may\n\t * try to check with `npm ls` how many times packages like `@ckeditor/ckeditor5-core`, `@ckeditor/ckeditor5-engine` and\n\t *`@ckeditor/ckeditor5-utils` are installed. If more than once, verify which package causes that.\n\t *\n\t * @error ckeditor-duplicated-modules\n\t */\n\tthrow new CKEditorError(\n\t\t'ckeditor-duplicated-modules: Some CKEditor 5 modules are duplicated.',\n\t\tnull\n\t);\n} else {\n\twindowOrGlobal.CKEDITOR_VERSION = version;\n}\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbols from './_getSymbols.js';\nimport keys from './keys.js';\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nexport default getAllKeys;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/count\n */\n\n/**\n * Returns the number of items return by the iterator.\n *\n *\t\tcount( [ 1, 2, 3, 4, 5 ] ); // 5;\n *\n * @param {Iterable.<*>} iterator Any iterator.\n * @returns {Number} Number of items returned by that iterator.\n */\nexport default function count( iterator ) {\n\tlet count = 0;\n\n\tfor ( const _ of iterator ) { // eslint-disable-line no-unused-vars\n\t\tcount++;\n\t}\n\n\treturn count;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/uielement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * UI element class. It should be used to represent editing UI which needs to be injected into the editing view\n * If possible, you should keep your UI outside the editing view. However, if that is not possible,\n * UI elements can be used.\n *\n * How a UI element is rendered is in your control (you pass a callback to\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}).\n * The editor will ignore your UI element – the selection cannot be placed in it, it is skipped (invisible) when\n * the user modifies the selection by using arrow keys and the editor does not listen to any mutations which\n * happen inside your UI elements.\n *\n * The limitation is that you cannot convert a model element to a UI element. UI elements need to be\n * created for {@link module:engine/model/markercollection~Marker markers} or as additinal elements\n * inside normal {@link module:engine/view/containerelement~ContainerElement container elements}.\n *\n * To create a new UI element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class UIElement extends Element {\n\t/**\n\t * Creates new instance of UIElement.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` when third parameter is passed,\n\t * to inform that usage of UIElement is incorrect (adding child nodes to UIElement is forbidden).\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createUIElement\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attributes] Collection of attributes.\n\t */\n\tconstructor( name, attributes, children ) {\n\t\tsuper( name, attributes, children );\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for UIElements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tuiElement.is( 'uiElement' ); // -> true\n\t *\t\tuiElement.is( 'element' ); // -> true\n\t *\t\tuiElement.is( 'node' ); // -> true\n\t *\t\tuiElement.is( 'view:uiElement' ); // -> true\n\t *\t\tuiElement.is( 'view:element' ); // -> true\n\t *\t\tuiElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\tuiElement.is( 'model:element' ); // -> false\n\t *\t\tuiElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an ui element, you can also check its\n\t * {@link module:engine/view/uielement~UIElement#name name}:\n\t *\n\t *\t\tuiElement.is( 'span' ); // -> true if this is a span ui element\n\t *\t\tuiElement.is( 'uiElement', 'span' ); // -> same as above\n\t *\t\ttext.is( 'span' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'uiElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'uiElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` to prevent adding any child nodes\n\t * to UIElement.\n\t *\n\t * @protected\n\t */\n\t_insertChild( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to {@link module:engine/view/uielement~UIElement}.\n\t\t\t *\n\t\t\t * @error view-uielement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-uielement-cannot-add: Cannot add child nodes to UIElement instance.', this );\n\t\t}\n\t}\n\n\t/**\n\t * Renders this {@link module:engine/view/uielement~UIElement} to DOM. This method is called by\n\t * {@link module:engine/view/domconverter~DomConverter}.\n\t * Do not use inheritance to create custom rendering method, replace `render()` method instead:\n\t *\n\t *\t\tconst myUIElement = downcastWriter.createUIElement( 'span' );\n\t *\t\tmyUIElement.render = function( domDocument ) {\n\t *\t\t\tconst domElement = this.toDomElement( domDocument );\n\t *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n\t *\n\t *\t\t\treturn domElement;\n\t *\t\t};\n\t *\n\t * @param {Document} domDocument\n\t * @returns {HTMLElement}\n\t */\n\trender( domDocument ) {\n\t\treturn this.toDomElement( domDocument );\n\t}\n\n\t/**\n\t * Creates DOM element based on this view UIElement.\n\t * Note that each time this method is called new DOM element is created.\n\t *\n\t * @param {Document} domDocument\n\t * @returns {HTMLElement}\n\t */\n\ttoDomElement( domDocument ) {\n\t\tconst domElement = domDocument.createElement( this.name );\n\n\t\tfor ( const key of this.getAttributeKeys() ) {\n\t\t\tdomElement.setAttribute( key, this.getAttribute( key ) );\n\t\t}\n\n\t\treturn domElement;\n\t}\n}\n\n/**\n * This function injects UI element handling to the given {@link module:engine/view/document~Document document}.\n *\n * A callback is added to {@link module:engine/view/document~Document#event:keydown document keydown event}.\n * The callback handles the situation when right arrow key is pressed and selection is collapsed before a UI element.\n * Without this handler, it would be impossible to \"jump over\" UI element using right arrow key.\n *\n * @param {module:engine/view/view~View} view View controller to which the quirks handling will be injected.\n */\nexport function injectUiElementHandling( view ) {\n\tview.document.on( 'keydown', ( evt, data ) => jumpOverUiElement( evt, data, view.domConverter ) );\n}\n\n// Returns `null` because block filler is not needed for UIElements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n\n// Selection cannot be placed in a `UIElement`. Whenever it is placed there, it is moved before it. This\n// causes a situation when it is impossible to jump over `UIElement` using right arrow key, because the selection\n// ends up in ui element (in DOM) and is moved back to the left. This handler fixes this situation.\nfunction jumpOverUiElement( evt, data, domConverter ) {\n\tif ( data.keyCode == keyCodes.arrowright ) {\n\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\t\tconst domSelectionCollapsed = domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed;\n\n\t\t// Jump over UI element if selection is collapsed or shift key is pressed. These are the cases when selection would extend.\n\t\tif ( domSelectionCollapsed || data.shiftKey ) {\n\t\t\tconst domParent = domSelection.focusNode;\n\t\t\tconst domOffset = domSelection.focusOffset;\n\n\t\t\tconst viewPosition = domConverter.domPositionToView( domParent, domOffset );\n\n\t\t\t// In case if dom element is not converted to view or is not mapped or something. Happens for example in some tests.\n\t\t\tif ( viewPosition === null ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip all following ui elements.\n\t\t\tlet jumpedOverAnyUiElement = false;\n\n\t\t\tconst nextViewPosition = viewPosition.getLastMatchingPosition( value => {\n\t\t\t\tif ( value.item.is( 'uiElement' ) ) {\n\t\t\t\t\t// Remember that there was at least one ui element.\n\t\t\t\t\tjumpedOverAnyUiElement = true;\n\t\t\t\t}\n\n\t\t\t\t// Jump over ui elements, jump over empty attribute elements, move up from inside of attribute element.\n\t\t\t\tif ( value.item.is( 'uiElement' ) || value.item.is( 'attributeElement' ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Don't jump over text or don't get out of container element.\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\t// If anything has been skipped, fix position.\n\t\t\t// This `if` could be possibly omitted but maybe it is better not to mess with DOM selection if not needed.\n\t\t\tif ( jumpedOverAnyUiElement ) {\n\t\t\t\tconst newDomPosition = domConverter.viewPositionToDom( nextViewPosition );\n\n\t\t\t\tif ( domSelectionCollapsed ) {\n\t\t\t\t\t// Selection was collapsed, so collapse it at further position.\n\t\t\t\t\tdomSelection.collapse( newDomPosition.parent, newDomPosition.offset );\n\t\t\t\t} else {\n\t\t\t\t\t// Selection was not collapse, so extend it instead of collapsing.\n\t\t\t\t\tdomSelection.extend( newDomPosition.parent, newDomPosition.offset );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/rootattributeoperation\n */\n\nimport Operation from './operation';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\n *\n * This operation is needed, because root elements can't be changed through\n * @link module:engine/model/operation/attributeoperation~AttributeOperation}.\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\n * requires a range to change and root element can't\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\n * {@link module:engine/model/position~Position} can't be created before a root element.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RootAttributeOperation extends Operation {\n\t/**\n\t * Creates an operation that changes, removes or adds attributes on root element.\n\t *\n\t * @see module:engine/model/operation/attributeoperation~AttributeOperation\n\t * @param {module:engine/model/rootelement~RootElement} root Root element to change.\n\t * @param {String} key Key of an attribute to change or remove.\n\t * @param {*} oldValue Old value of the attribute with given key or `null` if adding a new attribute.\n\t * @param {*} newValue New value to set for the attribute. If `null`, then the operation just removes the attribute.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( root, key, oldValue, newValue, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Root element to change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/rootelement~RootElement}\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Key of an attribute to change or remove.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/**\n\t\t * Old value of the attribute with given key or `null` if adding a new attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.oldValue = oldValue;\n\n\t\t/**\n\t\t * New value to set for the attribute. If `null`, then the operation just removes the attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.newValue = newValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.oldValue === null ) {\n\t\t\treturn 'addRootAttribute';\n\t\t} else if ( this.newValue === null ) {\n\t\t\treturn 'removeRootAttribute';\n\t\t} else {\n\t\t\treturn 'changeRootAttribute';\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new RootAttributeOperation( this.root, this.key, this.oldValue, this.newValue, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n\t */\n\tgetReversed() {\n\t\treturn new RootAttributeOperation( this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( this.root != this.root.root || this.root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * The element to change is not a root element.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-not-a-root\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t * @param {*} value\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-not-a-root: The element to change is not a root element.',\n\t\t\t\tthis,\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\n\t\tif ( this.oldValue !== null && this.root.getAttribute( this.key ) !== this.oldValue ) {\n\t\t\t/**\n\t\t\t * The attribute which should be removed does not exists for the given node.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-wrong-old-value\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t * @param {*} value\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-wrong-old-value: Changed node has different attribute value than operation\\'s ' +\n\t\t\t\t'old attribute value.',\n\t\t\t\tthis,\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\n\t\tif ( this.oldValue === null && this.newValue !== null && this.root.hasAttribute( this.key ) ) {\n\t\t\t/**\n\t\t\t * The attribute with given key already exists for the given node.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-attribute-exists\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-attribute-exists: The attribute with given key already exists.',\n\t\t\t\tthis,\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tif ( this.newValue !== null ) {\n\t\t\tthis.root._setAttribute( this.key, this.newValue );\n\t\t} else {\n\t\t\tthis.root._removeAttribute( this.key );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.root = this.root.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'RootAttributeOperation';\n\t}\n\n\t/**\n\t * Creates RootAttributeOperation object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tif ( !document.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error rootattributeoperation-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-fromjson-no-root: Cannot create RootAttributeOperation. Root with specified name does not exist.',\n\t\t\t\tthis,\n\t\t\t\t{ rootName: json.root }\n\t\t\t);\n\t\t}\n\n\t\treturn new RootAttributeOperation( document.getRoot( json.root ), json.key, json.oldValue, json.newValue, json.baseVersion );\n\t}\n}\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nexport default identity;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nexport default apply;\n","import apply from './_apply.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nexport default overRest;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nexport default constant;\n","import constant from './constant.js';\nimport defineProperty from './_defineProperty.js';\nimport identity from './identity.js';\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nexport default baseSetToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nexport default shortOut;\n","import baseSetToString from './_baseSetToString.js';\nimport shortOut from './_shortOut.js';\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nexport default setToString;\n","import identity from './identity.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nexport default baseRest;\n","import eq from './eq.js';\nimport isArrayLike from './isArrayLike.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nexport default isIterateeCall;\n","import baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nexport default createAssigner;\n","import copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport keysIn from './keysIn.js';\n\n/**\n * This method is like `_.assign` except that it iterates over own and\n * inherited source properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assign\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n */\nvar assignIn = createAssigner(function(object, source) {\n  copyObject(source, keysIn(source), object);\n});\n\nexport default assignIn;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/button/switchbuttonview\n */\n\nimport View from '../view';\nimport ButtonView from './buttonview';\n\nimport '../../theme/components/button/switchbutton.css';\n\n/**\n * The switch button view class.\n *\n *\t\tconst view = new SwitchButtonView();\n *\n *\t\tview.set( {\n *\t\t\twithText: true,\n *\t\t\tlabel: 'Switch me!'\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/button/buttonview~ButtonView\n */\nexport default class SwitchButtonView extends ButtonView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.isToggleable = true;\n\n\t\t/**\n\t\t * The toggle switch of the button.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #toggleSwitchView\n\t\t */\n\t\tthis.toggleSwitchView = this._createToggleView();\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-switchbutton'\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.children.add( this.toggleSwitchView );\n\t}\n\n\t/**\n\t * Creates a toggle child view.\n\t *\n\t * @private\n\t * @returns {module:ui/view~View}\n\t */\n\t_createToggleView() {\n\t\tconst toggleSwitchView = new View();\n\n\t\ttoggleSwitchView.setTemplate( {\n\t\t\ttag: 'span',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button__toggle'\n\t\t\t\t],\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'span',\n\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t\t'ck-button__toggle__inner'\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn toggleSwitchView;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/utils\n */\n\nimport { isWidget, toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { findAncestor } from './commands/utils';\n\n/**\n * Converts a given {@link module:engine/view/element~Element} to a table widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the table widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label. It will be concatenated with the table `alt` attribute if one is present.\n * @returns {module:engine/view/element~Element}\n */\nexport function toTableWidget( viewElement, writer ) {\n\twriter.setCustomProperty( 'table', true, viewElement );\n\n\treturn toWidget( viewElement, writer, { hasSelectionHandle: true } );\n}\n\n/**\n * Checks if a given view element is a table widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\nexport function isTableWidget( viewElement ) {\n\treturn !!viewElement.getCustomProperty( 'table' ) && isWidget( viewElement );\n}\n\n/**\n * Returns a table widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\nexport function getSelectedTableWidget( selection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\tif ( viewElement && isTableWidget( viewElement ) ) {\n\t\treturn viewElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns a table widget editing view element if one is among selection's ancestors.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\nexport function getTableWidgetAncestor( selection ) {\n\tconst parentTable = findAncestor( 'table', selection.getFirstPosition() );\n\n\tif ( parentTable && isTableWidget( parentTable.parent ) ) {\n\t\treturn parentTable.parent;\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\n\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class HtmlDataProcessor {\n\t/**\n\t * Creates a new instance of the HTML data processor class.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * A DOM parser instance used to parse an HTML string to an HTML document.\n\t\t *\n\t\t * @private\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis._domParser = new DOMParser();\n\n\t\t/**\n\t\t * A DOM converter used to convert DOM elements to view elements.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis._domConverter = new DomConverter( { blockFillerMode: 'nbsp' } );\n\n\t\t/**\n\t\t * A basic HTML writer instance used to convert DOM elements to an HTML string.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\n\t\t */\n\t\tthis._htmlWriter = new BasicHtmlWriter();\n\t}\n\n\t/**\n\t * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n\t * to data format &mdash; in this case to an HTML string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} HTML string.\n\t */\n\ttoData( viewFragment ) {\n\t\t// Convert view DocumentFragment to DOM DocumentFragment.\n\t\tconst domFragment = this._domConverter.viewToDom( viewFragment, document );\n\n\t\t// Convert DOM DocumentFragment to HTML output.\n\t\treturn this._htmlWriter.getHtml( domFragment );\n\t}\n\n\t/**\n\t * Converts the provided HTML string to a view tree.\n\t *\n\t * @param {String} data An HTML string.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n\t */\n\ttoView( data ) {\n\t\t// Convert input HTML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\treturn this._domConverter.domToView( domFragment );\n\t}\n\n\t/**\n\t * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n\t * the provided data.\n\t *\n\t * @private\n\t * @param {String} data\n\t * @returns {DocumentFragment}\n\t */\n\t_toDom( data ) {\n\t\tconst document = this._domParser.parseFromString( data, 'text/html' );\n\t\tconst fragment = document.createDocumentFragment();\n\t\tconst nodes = document.body.childNodes;\n\n\t\twhile ( nodes.length > 0 ) {\n\t\t\tfragment.appendChild( nodes[ 0 ] );\n\t\t}\n\n\t\treturn fragment;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/model\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport { extend } from 'lodash-es';\n\n/**\n * The base MVC model class.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Model {\n\t/**\n\t * Creates a new Model instance.\n\t *\n\t * @param {Object} [attributes] The model state attributes to be defined during the instance creation.\n\t * @param {Object} [properties] The (out of state) properties to be appended to the instance during creation.\n\t */\n\tconstructor( attributes, properties ) {\n\t\t// Extend this instance with the additional (out of state) properties.\n\t\tif ( properties ) {\n\t\t\textend( this, properties );\n\t\t}\n\n\t\t// Initialize the attributes.\n\t\tif ( attributes ) {\n\t\t\tthis.set( attributes );\n\t\t}\n\t}\n}\n\nmix( Model, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/notification/notification\n */\n\n/* globals window */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The Notification plugin.\n *\n * This plugin sends a few types of notifications: `success`, `info` and `warning`. The notifications need to be\n * handled and displayed by a plugin responsible for showing the UI of the notifications. Using this plugin for dispatching\n * notifications makes it possible to switch the notifications UI.\n *\n * Note that every unhandled and not stopped `warning` notification will be displayed as a system alert.\n * See {@link module:ui/notification/notification~Notification#showWarning}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Notification extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Notification';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// Each unhandled and not stopped `show:warning` event is displayed as a system alert.\n\t\tthis.on( 'show:warning', ( evt, data ) => {\n\t\t\twindow.alert( data.message ); // eslint-disable-line no-alert\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Shows a success notification.\n\t *\n\t * By default, it fires the {@link #event:show:success `show:success` event} with the given `data`. The event namespace can be extended\n\t * using the `data.namespace` option. For example:\n\t *\n\t * \t\tshowSuccess( 'Image is uploaded.', {\n\t * \t\t\tnamespace: 'upload:image'\n\t * \t\t} );\n\t *\n\t * will fire the `show:success:upload:image` event.\n\t *\n\t * You can provide the title of the notification:\n\t *\n\t *\t\tshowSuccess( 'Image is uploaded.', {\n\t *\t\t\ttitle: 'Image upload success'\n\t *\t\t} );\n\t *\n\t * @param {String} message The content of the notification.\n\t * @param {Object} [data={}] Additional data.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title] The title of the notification.\n\t */\n\tshowSuccess( message, data = {} ) {\n\t\tthis._showNotification( {\n\t\t\tmessage,\n\t\t\ttype: 'success',\n\t\t\tnamespace: data.namespace,\n\t\t\ttitle: data.title\n\t\t} );\n\t}\n\n\t/**\n\t * Shows an information notification.\n\t *\n\t * By default, it fires the {@link #event:show:info `show:info` event} with the given `data`. The event namespace can be extended\n\t * using the `data.namespace` option. For example:\n\t *\n\t * \t\tshowInfo( 'Editor is offline.', {\n\t * \t\t\tnamespace: 'editor:status'\n\t * \t\t} );\n\t *\n\t * will fire the `show:info:editor:status` event.\n\t *\n\t * You can provide the title of the notification:\n\t *\n\t *\t\tshowInfo( 'Editor is offline.', {\n\t *\t\t\ttitle: 'Network information'\n\t *\t\t} );\n\t *\n\t * @param {String} message The content of the notification.\n\t * @param {Object} [data={}] Additional data.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title] The title of the notification.\n\t */\n\tshowInfo( message, data = {} ) {\n\t\tthis._showNotification( {\n\t\t\tmessage,\n\t\t\ttype: 'info',\n\t\t\tnamespace: data.namespace,\n\t\t\ttitle: data.title\n\t\t} );\n\t}\n\n\t/**\n\t * Shows a warning notification.\n\t *\n\t * By default, it fires the {@link #event:show:warning `show:warning` event}\n\t * with the given `data`. The event namespace can be extended using the `data.namespace` option. For example:\n\t *\n\t * \t\tshowWarning( 'Image upload error.', {\n\t * \t\t\tnamespace: 'upload:image'\n\t * \t\t} );\n\t *\n\t * will fire the `show:warning:upload:image` event.\n\t *\n\t * You can provide the title of the notification:\n\t *\n\t *\t\tshowWarning( 'Image upload error.', {\n\t *\t\t\ttitle: 'Upload failed'\n\t *\t\t} );\n\t *\n\t * Note that each unhandled and not stopped `warning` notification will be displayed as a system alert.\n\t * The plugin responsible for displaying warnings should `stop()` the event to prevent displaying it as an alert:\n\t *\n\t * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n\t * \t\t\t// Do something with the data.\n\t *\n\t * \t\t\t// Stop this event to prevent displaying it as an alert.\n\t * \t\t\tevt.stop();\n\t * \t\t} );\n\t *\n\t * You can attach many listeners to the same event and `stop()` this event in a listener with a low priority:\n\t *\n\t * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n\t * \t\t\t// Show the warning in the UI, but do not stop it.\n\t * \t\t} );\n\t *\n\t * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n\t * \t\t\t// Log the warning to some error tracker.\n\t *\n\t * \t\t\t// Stop this event to prevent displaying it as an alert.\n\t * \t\t\tevt.stop();\n\t * \t\t}, { priority: 'low' } );\n\t *\n\t * @param {String} message The content of the notification.\n\t * @param {Object} [data={}] Additional data.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title] The title of the notification.\n\t */\n\tshowWarning( message, data = {} ) {\n\t\tthis._showNotification( {\n\t\t\tmessage,\n\t\t\ttype: 'warning',\n\t\t\tnamespace: data.namespace,\n\t\t\ttitle: data.title\n\t\t} );\n\t}\n\n\t/**\n\t * Fires the `show` event with the specified type, namespace and message.\n\t *\n\t * @private\n\t * @param {Object} data The message data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {'success'|'info'|'warning'} data.type The type of the message.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title=''] The title of the notification.\n\t */\n\t_showNotification( data ) {\n\t\tconst event = `show:${ data.type }` + ( data.namespace ? `:${ data.namespace }` : '' );\n\n\t\tthis.fire( event, {\n\t\t\tmessage: data.message,\n\t\t\ttype: data.type,\n\t\t\ttitle: data.title || ''\n\t\t} );\n\t}\n\n\t/**\n\t * Fired when one of the `showSuccess()`, `showInfo()`, `showWarning()` methods is called.\n\t *\n\t * @event show\n\t * @param {Object} data The notification data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {String} data.title The title of the notification.\n\t * @param {'success'|'info'|'warning'} data.type The type of the notification.\n\t */\n\n\t/**\n\t * Fired when the `showSuccess()` method is called.\n\t *\n\t * @event show:success\n\t * @param {Object} data The notification data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {String} data.title The title of the notification.\n\t * @param {'success'} data.type The type of the notification.\n\t */\n\n\t/**\n\t * Fired when the `showInfo()` method is called.\n\t *\n\t * @event show:info\n\t * @param {Object} data The notification data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {String} data.title The title of the notification.\n\t * @param {'info'} data.type The type of the notification.\n\t */\n\n\t/**\n\t * Fired when the `showWarning()` method is called.\n\t *\n\t * When this event is not handled or stopped by `event.stop()`, the `data.message` of this event will\n\t * be automatically displayed as a system alert.\n\t *\n\t * @event show:warning\n\t * @param {Object} data The notification data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {String} data.title The title of the notification.\n\t * @param {'warning'} data.type The type of the notification.\n\t */\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/document\n */\n\nimport DocumentSelection from './documentselection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\n/**\n * Document class creates an abstract layer over the content editable area, contains a tree of view elements and\n * {@link module:engine/view/documentselection~DocumentSelection view selection} associated with this document.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Document {\n\t/**\n\t * Creates a Document instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Selection done on this document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection} module:engine/view/document~Document#selection\n\t\t */\n\t\tthis.selection = new DocumentSelection();\n\n\t\t/**\n\t\t * Roots of the view tree. Collection of the {@link module:engine/view/element~Element view elements}.\n\t\t *\n\t\t * View roots are created as a result of binding between {@link module:engine/view/document~Document#roots} and\n\t\t * {@link module:engine/model/document~Document#roots} and this is handled by\n\t\t * {@link module:engine/controller/editingcontroller~EditingController}, so to create view root we need to create\n\t\t * model root using {@link module:engine/model/document~Document#createRoot}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection} module:engine/view/document~Document#roots\n\t\t */\n\t\tthis.roots = new Collection( { idProperty: 'rootName' } );\n\n\t\t/**\n\t\t * Defines whether document is in read-only mode.\n\t\t *\n\t\t * When document is read-ony then all roots are read-only as well and caret placed inside this root is hidden.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * True if document is focused.\n\t\t *\n\t\t * This property is updated by the {@link module:engine/view/observer/focusobserver~FocusObserver}.\n\t\t * If the {@link module:engine/view/observer/focusobserver~FocusObserver} is disabled this property will not change.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/document~Document#isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * True if composition is in progress inside the document.\n\t\t *\n\t\t * This property is updated by the {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n\t\t * If the {@link module:engine/view/observer/compositionobserver~CompositionObserver} is disabled this property will not change.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/document~Document#isComposing\n\t\t */\n\t\tthis.set( 'isComposing', false );\n\n\t\t/**\n\t\t * Post-fixer callbacks registered to the view document.\n\t\t *\n\t\t * @private\n\t\t * @member {Set}\n\t\t */\n\t\tthis._postFixers = new Set();\n\t}\n\n\t/**\n\t * Gets a {@link module:engine/view/document~Document#roots view root element} with the specified name. If the name is not\n\t * specific \"main\" root is returned.\n\t *\n\t * @param {String} [name='main'] Name of the root.\n\t * @returns {module:engine/view/rooteditableelement~RootEditableElement|null} The view root element with the specified name\n\t * or null when there is no root of given name.\n\t */\n\tgetRoot( name = 'main' ) {\n\t\treturn this.roots.get( name );\n\t}\n\n\t/**\n\t * Allows registering post-fixer callbacks. A post-fixers mechanism allows to update the view tree just before it is rendered\n\t * to the DOM.\n\t *\n\t * Post-fixers are executed right after all changes from the outermost change block were applied but\n\t * before the {@link module:engine/view/view~View#event:render render event} is fired. If a post-fixer callback made\n\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n\t * not be fixed in the new document tree state.\n\t *\n\t * View post-fixers are useful when you want to apply some fixes whenever the view structure changes. Keep in mind that\n\t * changes executed in a view post-fixer should not break model-view mapping.\n\t *\n\t * The types of changes which should be safe:\n\t *\n\t * * adding or removing attribute from elements,\n\t * * changes inside of {@link module:engine/view/uielement~UIElement UI elements},\n\t * * {@link module:engine/model/differ~Differ#refreshItem marking some of the model elements to be re-converted}.\n\t *\n\t * Try to avoid changes which touch view structure:\n\t *\n\t * * you should not add or remove nor wrap or unwrap any view elements,\n\t * * you should not change the editor data model in a view post-fixer.\n\t *\n\t * As a parameter, a post-fixer callback receives a {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n\t *\n\t * Typically, a post-fixer will look like this:\n\t *\n\t *\t\teditor.editing.view.document.registerPostFixer( writer => {\n\t *\t\t\tif ( checkSomeCondition() ) {\n\t *\t\t\t\twriter.doSomething();\n\t *\n\t *\t\t\t\t// Let other post-fixers know that something changed.\n\t *\t\t\t\treturn true;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Note that nothing happens right after you register a post-fixer (e.g. execute such a code in the console).\n\t * That is because adding a post-fixer does not execute it.\n\t * The post-fixer will be executed as soon as any change in the document needs to cause its rendering.\n\t * If you want to re-render the editor's view after registering the post-fixer then you should do it manually by calling\n\t * {@link module:engine/view/view~View#forceRender `view.forceRender()`}.\n\t *\n\t * If you need to register a callback which is executed when DOM elements are already updated,\n\t * use {@link module:engine/view/view~View#event:render render event}.\n\t *\n\t * @param {Function} postFixer\n\t */\n\tregisterPostFixer( postFixer ) {\n\t\tthis._postFixers.add( postFixer );\n\t}\n\n\t/**\n\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n\t */\n\tdestroy() {\n\t\tthis.roots.map( root => root.destroy() );\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n\t *\n\t * @protected\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\t_callPostFixers( writer ) {\n\t\tlet wasFixed = false;\n\n\t\tdo {\n\t\t\tfor ( const callback of this._postFixers ) {\n\t\t\t\twasFixed = callback( writer );\n\n\t\t\t\tif ( wasFixed ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while ( wasFixed );\n\t}\n\n\t/**\n\t * Event fired whenever document content layout changes. It is fired whenever content is\n\t * {@link module:engine/view/view~View#event:render rendered}, but should be also fired by observers in case of\n\t * other actions which may change layout, for instance when image loads.\n\t *\n\t * @event layoutChanged\n\t */\n}\n\nmix( Document, ObservableMixin );\n\n/**\n * Enum representing type of the change.\n *\n * Possible values:\n *\n * * `children` - for child list changes,\n * * `attributes` - for element attributes changes,\n * * `text` - for text nodes changes.\n *\n * @typedef {String} module:engine/view/document~ChangeType\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/emptyelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n\n/**\n * Empty element class. It is used to represent elements that cannot contain any child nodes (for example `<img>` elements).\n *\n * To create a new empty element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class EmptyElement extends Element {\n\t/**\n\t * Creates new instance of EmptyElement.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\n\t * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createEmptyElement\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attributes] Collection of attributes.\n\t */\n\tconstructor( name, attributes, children ) {\n\t\tsuper( name, attributes, children );\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for EmptyElements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\temptyElement.is( 'emptyElement' ); // -> true\n\t *\t\temptyElement.is( 'element' ); // -> true\n\t *\t\temptyElement.is( 'node' ); // -> true\n\t *\t\temptyElement.is( 'view:emptyElement' ); // -> true\n\t *\t\temptyElement.is( 'view:element' ); // -> true\n\t *\t\temptyElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\temptyElement.is( 'model:element' ); // -> false\n\t *\t\temptyElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an empty element, you can also check its\n\t * {@link module:engine/view/emptyelement~EmptyElement#name name}:\n\t *\n\t *\t\temptyElement.is( 'img' ); // -> true if this is a img element\n\t *\t\temptyElement.is( 'emptyElement', 'img' ); // -> same as above\n\t *\t\ttext.is( 'img' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'emptyElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'emptyElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\n\t * adding any child nodes to EmptyElement.\n\t *\n\t * @protected\n\t */\n\t_insertChild( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\n\t\t\t *\n\t\t\t * @error view-emptyelement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-emptyelement-cannot-add: Cannot add child nodes to EmptyElement instance.',\n\t\t\t\t[ this, nodes ]\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Returns `null` because block filler is not needed for EmptyElements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/view/downcastwriter\n */\n\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport ContainerElement from './containerelement';\nimport AttributeElement from './attributeelement';\nimport EmptyElement from './emptyelement';\nimport UIElement from './uielement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport DocumentFragment from './documentfragment';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Text from './text';\nimport EditableElement from './editableelement';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * View downcast writer.\n *\n * It provides a set of methods used to manipulate view nodes.\n *\n * Do not create an instance of this writer manually. To modify a view structure, use\n * the {@link module:engine/view/view~View#change `View#change()`} block.\n *\n * The `DowncastWriter` is designed to work with semantic views which are the views that were/are being downcasted from the model.\n * To work with ordinary views (e.g. parsed from a pasted content) use the\n * {@link module:engine/view/upcastwriter~UpcastWriter upcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n */\nexport default class DowncastWriter {\n\tconstructor( document ) {\n\t\t/**\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = document;\n\n\t\t/**\n\t\t * Holds references to the attribute groups that share the same {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t\t * The keys are `id`s, the values are `Set`s holding {@link module:engine/view/attributeelement~AttributeElement}s.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<String,Set>}\n\t\t */\n\t\tthis._cloneGroups = new Map();\n\t}\n\n\t/**\n\t * Sets {@link module:engine/view/documentselection~DocumentSelection selection's} ranges and direction to the\n\t * specified location based on the given {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t * Usage:\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets backward selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'p' );\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t * \t\twriter.setSelection( paragraph, 'in' );\n\t *\n\t * Creates a range on the {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'on' );\n\t *\n\t * \t\t// Removes all ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * `DowncastWriter#setSelection()` allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\twriter.setSelection( range, { backward: true } );\n\t *\n\t *\t\t// Sets selection as fake.\n\t *\t\t// Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * \t\t// This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * \t\t// represented in other way, for example by applying proper CSS class.\n\t *\t\twriter.setSelection( range, { fake: true } );\n\t *\n\t * \t\t// Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * \t\t// (and be  properly handled by screen readers).\n\t *\t\twriter.setSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tsetSelection( selectable, placeOrOffset, options ) {\n\t\tthis.document.selection._setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/view/documentselection~DocumentSelection#focus selection's focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\n\t * @param {String} data The text's data.\n\t * @returns {module:engine/view/text~Text} The created text node.\n\t */\n\tcreateText( data ) {\n\t\treturn new Text( data );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/attributeelement~AttributeElement}.\n\t *\n\t *\t\twriter.createAttributeElement( 'strong' );\n\t *\t\twriter.createAttributeElement( 'a', { href: 'foo.bar' } );\n\t *\n\t *\t\t// Make `<a>` element contain other attributes element so the `<a>` element is not broken.\n\t *\t\twriter.createAttributeElement( 'a', { href: 'foo.bar' }, { priority: 5 } );\n\t *\n\t *\t\t// Set `id` of a marker element so it is not joined or merged with \"normal\" elements.\n\t *\t\twriter.createAttributeElement( 'span', { class: 'my-marker' }, { id: 'marker:my' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Element's attributes.\n\t * @param {Object} [options] Element's options.\n\t * @param {Number} [options.priority] Element's {@link module:engine/view/attributeelement~AttributeElement#priority priority}.\n\t * @param {Number|String} [options.id] Element's {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Created element.\n\t */\n\tcreateAttributeElement( name, attributes, options = {} ) {\n\t\tconst attributeElement = new AttributeElement( name, attributes );\n\n\t\tif ( options.priority ) {\n\t\t\tattributeElement._priority = options.priority;\n\t\t}\n\n\t\tif ( options.id ) {\n\t\t\tattributeElement._id = options.id;\n\t\t}\n\n\t\treturn attributeElement;\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/containerelement~ContainerElement}.\n\t *\n\t *\t\twriter.createContainerElement( 'p' );\n\t *\n\t *\t\t// Create element with custom attributes.\n\t *\t\twriter.createContainerElement( 'div', { id: 'foo-bar', 'data-baz': '123' } );\n\t *\n\t *\t\t// Create element with custom styles.\n\t *\t\twriter.createContainerElement( 'p', { style: 'font-weight: bold; padding-bottom: 10px' } );\n\t *\n\t *\t\t// Create element with custom classes.\n\t *\t\twriter.createContainerElement( 'p', { class: 'foo bar baz' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/containerelement~ContainerElement} Created element.\n\t */\n\tcreateContainerElement( name, attributes ) {\n\t\treturn new ContainerElement( name, attributes );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t *\t\twriter.createEditableElement( 'div' );\n\t *\t\twriter.createEditableElement( 'div', { id: 'foo-1234' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/editableelement~EditableElement} Created element.\n\t */\n\tcreateEditableElement( name, attributes ) {\n\t\tconst editableElement = new EditableElement( name, attributes );\n\t\teditableElement._document = this.document;\n\n\t\treturn editableElement;\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/emptyelement~EmptyElement}.\n\t *\n\t *\t\twriter.createEmptyElement( 'img' );\n\t *\t\twriter.createEmptyElement( 'img', { id: 'foo-1234' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/emptyelement~EmptyElement} Created element.\n\t */\n\tcreateEmptyElement( name, attributes ) {\n\t\treturn new EmptyElement( name, attributes );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/uielement~UIElement}.\n\t *\n\t *\t\twriter.createUIElement( 'span' );\n\t *\t\twriter.createUIElement( 'span', { id: 'foo-1234' } );\n\t *\n\t * Custom render function can be provided as third parameter:\n\t *\n\t *\t\twriter.createUIElement( 'span', null, function( domDocument ) {\n\t *\t\t\tconst domElement = this.toDomElement( domDocument );\n\t *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n\t *\n\t *\t\t\treturn domElement;\n\t *\t\t} );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {Function} [renderFunction] Custom render function.\n\t * @returns {module:engine/view/uielement~UIElement} Created element.\n\t */\n\tcreateUIElement( name, attributes, renderFunction ) {\n\t\tconst uiElement = new UIElement( name, attributes );\n\n\t\tif ( renderFunction ) {\n\t\t\tuiElement.render = renderFunction;\n\t\t}\n\n\t\treturn uiElement;\n\t}\n\n\t/**\n\t * Adds or overwrite element's attribute with a specified key and value.\n\t *\n\t *\t\twriter.setAttribute( 'href', 'http://ckeditor.com', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetAttribute( key, value, element ) {\n\t\telement._setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t *\t\twriter.removeAttribute( 'href', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveAttribute( key, element ) {\n\t\telement._removeAttribute( key );\n\t}\n\n\t/**\n\t * Adds specified class to the element.\n\t *\n\t *\t\twriter.addClass( 'foo', linkElement );\n\t *\t\twriter.addClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\taddClass( className, element ) {\n\t\telement._addClass( className );\n\t}\n\n\t/**\n\t * Removes specified class from the element.\n\t *\n\t *\t\twriter.removeClass( 'foo', linkElement );\n\t *\t\twriter.removeClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveClass( className, element ) {\n\t\telement._removeClass( className );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\twriter.setStyle( 'color', 'red', element );\n\t *\t\twriter.setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t}, element );\n\t *\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @param {module:engine/view/element~Element} element Element to set styles on.\n\t */\n\tsetStyle( property, value, element ) {\n\t\tif ( isPlainObject( property ) && element === undefined ) {\n\t\t\telement = value;\n\t\t}\n\n\t\telement._setStyle( property, value );\n\t}\n\n\t/**\n\t * Removes specified style from the element.\n\t *\n\t *\t\twriter.removeStyle( 'color', element );  // Removes 'color' style.\n\t *\t\twriter.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @param {Array.<String>|String} property\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveStyle( property, element ) {\n\t\telement._removeStyle( property );\n\t}\n\n\t/**\n\t * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetCustomProperty( key, value, element ) {\n\t\telement._setCustomProperty( key, value );\n\t}\n\n\t/**\n\t * Removes a custom property stored under the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\tremoveCustomProperty( key, element ) {\n\t\treturn element._removeCustomProperty( key );\n\t}\n\n\t/**\n\t * Breaks attribute nodes at provided position or at boundaries of provided range. It breaks attribute elements inside\n\t * up to a container element.\n\t *\n\t * In following examples `<p>` is a container, `<b>` and `<u>` are attribute nodes:\n\t *\n\t *\t\t<p>foo<b><u>bar{}</u></b></p> -> <p>foo<b><u>bar</u></b>[]</p>\n\t *\t\t<p>foo<b><u>{}bar</u></b></p> -> <p>foo{}<b><u>bar</u></b></p>\n\t *\t\t<p>foo<b><u>b{}ar</u></b></p> -> <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t *\t\t<p><b>fo{o</b><u>ba}r</u></p> -> <p><b>fo</b><b>o</b><u>ba</u><u>r</u></b></p>\n\t *\n\t * **Note:** {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer} is that `breakAttributes` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container`\n\t * when {@link module:engine/view/range~Range#start start}\n\t * and {@link module:engine/view/range~Range#end end} positions of a passed range are not placed inside same parent container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element`\n\t * when trying to break attributes\n\t * inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element`\n\t * when trying to break attributes\n\t * inside {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#breakContainer\n\t * @param {module:engine/view/position~Position|module:engine/view/range~Range} positionOrRange Position where\n\t * to break attribute elements.\n\t * @returns {module:engine/view/position~Position|module:engine/view/range~Range} New position or range, after breaking the attribute\n\t * elements.\n\t */\n\tbreakAttributes( positionOrRange ) {\n\t\tif ( positionOrRange instanceof Position ) {\n\t\t\treturn this._breakAttributes( positionOrRange );\n\t\t} else {\n\t\t\treturn this._breakAttributesRange( positionOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Breaks {@link module:engine/view/containerelement~ContainerElement container view element} into two, at the given position. Position\n\t * has to be directly inside container element and cannot be in root. Does not break if position is at the beginning\n\t * or at the end of it's parent element.\n\t *\n\t *\t\t<p>foo^bar</p> -> <p>foo</p><p>bar</p>\n\t *\t\t<div><p>foo</p>^<p>bar</p></div> -> <div><p>foo</p></div><div><p>bar</p></div>\n\t *\t\t<p>^foobar</p> -> ^<p>foobar</p>\n\t *\t\t<p>foobar^</p> -> <p>foobar</p>^\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer} is that `breakAttributes` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#breakAttributes\n\t * @param {module:engine/view/position~Position} position Position where to break element.\n\t * @returns {module:engine/view/position~Position} Position between broken elements. If element has not been broken,\n\t * the returned position is placed either before it or after it.\n\t */\n\tbreakContainer( position ) {\n\t\tconst element = position.parent;\n\n\t\tif ( !( element.is( 'containerElement' ) ) ) {\n\t\t\t/**\n\t\t\t * Trying to break an element which is not a container element.\n\t\t\t *\n\t\t\t * @error view-writer-break-non-container-element\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-writer-break-non-container-element: Trying to break an element which is not a container element.',\n\t\t\t\tthis.document\n\t\t\t);\n\t\t}\n\n\t\tif ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Trying to break root element.\n\t\t\t *\n\t\t\t * @error view-writer-break-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-break-root: Trying to break root element.', this.document );\n\t\t}\n\n\t\tif ( position.isAtStart ) {\n\t\t\treturn Position._createBefore( element );\n\t\t} else if ( !position.isAtEnd ) {\n\t\t\tconst newElement = element._clone( false );\n\n\t\t\tthis.insert( Position._createAfter( element ), newElement );\n\n\t\t\tconst sourceRange = new Range( position, Position._createAt( element, 'end' ) );\n\t\t\tconst targetPosition = new Position( newElement, 0 );\n\n\t\t\tthis.move( sourceRange, targetPosition );\n\t\t}\n\n\t\treturn Position._createAfter( element );\n\t}\n\n\t/**\n\t * Merges {@link module:engine/view/attributeelement~AttributeElement attribute elements}. It also merges text nodes if needed.\n\t * Only {@link module:engine/view/attributeelement~AttributeElement#isSimilar similar} attribute elements can be merged.\n\t *\n\t * In following examples `<p>` is a container and `<b>` is an attribute element:\n\t *\n\t *\t\t<p>foo[]bar</p> -> <p>foo{}bar</p>\n\t *\t\t<p><b>foo</b>[]<b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *\t\t<p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p> -> <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p>\n\t *\n\t * It will also take care about empty attributes when merging:\n\t *\n\t *\t\t<p><b>[]</b></p> -> <p>[]</p>\n\t *\t\t<p><b>foo</b><i>[]</i><b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#mergeContainers\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeAttributes( position ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// When inside text node - nothing to merge.\n\t\tif ( positionParent.is( 'text' ) ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When inside empty attribute - remove it.\n\t\tif ( positionParent.is( 'attributeElement' ) && positionParent.childCount === 0 ) {\n\t\t\tconst parent = positionParent.parent;\n\t\t\tconst offset = positionParent.index;\n\n\t\t\tpositionParent._remove();\n\t\t\tthis._removeFromClonedElementsGroup( positionParent );\n\n\t\t\treturn this.mergeAttributes( new Position( parent, offset ) );\n\t\t}\n\n\t\tconst nodeBefore = positionParent.getChild( positionOffset - 1 );\n\t\tconst nodeAfter = positionParent.getChild( positionOffset );\n\n\t\t// Position should be placed between two nodes.\n\t\tif ( !nodeBefore || !nodeAfter ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When position is between two text nodes.\n\t\tif ( nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\t\t// When position is between two same attribute elements.\n\t\telse if ( nodeBefore.is( 'attributeElement' ) && nodeAfter.is( 'attributeElement' ) && nodeBefore.isSimilar( nodeAfter ) ) {\n\t\t\t// Move all children nodes from node placed after selection and remove that node.\n\t\t\tconst count = nodeBefore.childCount;\n\t\t\tnodeBefore._appendChild( nodeAfter.getChildren() );\n\n\t\t\tnodeAfter._remove();\n\t\t\tthis._removeFromClonedElementsGroup( nodeAfter );\n\n\t\t\t// New position is located inside the first node, before new nodes.\n\t\t\t// Call this method recursively to merge again if needed.\n\t\t\treturn this.mergeAttributes( new Position( nodeBefore, count ) );\n\t\t}\n\n\t\treturn position;\n\t}\n\n\t/**\n\t * Merges two {@link module:engine/view/containerelement~ContainerElement container elements} that are before and after given position.\n\t * Precisely, the element after the position is removed and it's contents are moved to element before the position.\n\t *\n\t *\t\t<p>foo</p>^<p>bar</p> -> <p>foo^bar</p>\n\t *\t\t<div>foo</div>^<p>bar</p> -> <div>foo^bar</div>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#mergeAttributes\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeContainers( position ) {\n\t\tconst prev = position.nodeBefore;\n\t\tconst next = position.nodeAfter;\n\n\t\tif ( !prev || !next || !prev.is( 'containerElement' ) || !next.is( 'containerElement' ) ) {\n\t\t\t/**\n\t\t\t * Element before and after given position cannot be merged.\n\t\t\t *\n\t\t\t * @error view-writer-merge-containers-invalid-position\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-merge-containers-invalid-position: ' +\n\t\t\t\t'Element before and after given position cannot be merged.', this.document );\n\t\t}\n\n\t\tconst lastChild = prev.getChild( prev.childCount - 1 );\n\t\tconst newPosition = lastChild instanceof Text ? Position._createAt( lastChild, 'end' ) : Position._createAt( prev, 'end' );\n\n\t\tthis.move( Range._createIn( next ), Position._createAt( prev, 'end' ) );\n\t\tthis.remove( Range._createOn( next ) );\n\n\t\treturn newPosition;\n\t}\n\n\t/**\n\t * Insert node or nodes at specified position. Takes care about breaking attributes before insertion\n\t * and merging them afterwards.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n\t * contains instances that are not {@link module:engine/view/text~Text Texts},\n\t * {@link module:engine/view/attributeelement~AttributeElement AttributeElements},\n\t * {@link module:engine/view/containerelement~ContainerElement ContainerElements},\n\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElements} or\n\t * {@link module:engine/view/uielement~UIElement UIElements}.\n\t *\n\t * @param {module:engine/view/position~Position} position Insertion position.\n\t * @param {module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement|\n\t * module:engine/view/containerelement~ContainerElement|module:engine/view/emptyelement~EmptyElement|\n\t * module:engine/view/uielement~UIElement|Iterable.<module:engine/view/text~Text|\n\t * module:engine/view/attributeelement~AttributeElement|module:engine/view/containerelement~ContainerElement|\n\t * module:engine/view/emptyelement~EmptyElement|module:engine/view/uielement~UIElement>} nodes Node or nodes to insert.\n\t * @returns {module:engine/view/range~Range} Range around inserted nodes.\n\t */\n\tinsert( position, nodes ) {\n\t\tnodes = isIterable( nodes ) ? [ ...nodes ] : [ nodes ];\n\n\t\t// Check if nodes to insert are instances of AttributeElements, ContainerElements, EmptyElements, UIElements or Text.\n\t\tvalidateNodesToInsert( nodes, this.document );\n\n\t\tconst container = getParentContainer( position );\n\n\t\tif ( !container ) {\n\t\t\t/**\n\t\t\t * Position's parent container cannot be found.\n\t\t\t *\n\t\t\t * @error view-writer-invalid-position-container\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-invalid-position-container', this.document );\n\t\t}\n\n\t\tconst insertionPosition = this._breakAttributes( position, true );\n\t\tconst length = container._insertChild( insertionPosition.offset, nodes );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tthis._addToClonedElementsGroup( node );\n\t\t}\n\n\t\tconst endPosition = insertionPosition.getShiftedBy( length );\n\t\tconst start = this.mergeAttributes( insertionPosition );\n\n\t\t// When no nodes were inserted - return collapsed range.\n\t\tif ( length === 0 ) {\n\t\t\treturn new Range( start, start );\n\t\t} else {\n\t\t\t// If start position was merged - move end position.\n\t\t\tif ( !start.isEqual( insertionPosition ) ) {\n\t\t\t\tendPosition.offset--;\n\t\t\t}\n\n\t\t\tconst end = this.mergeAttributes( endPosition );\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\t}\n\n\t/**\n\t * Removes provided range from the container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range|module:engine/view/item~Item} rangeOrItem Range to remove from container\n\t * or an {@link module:engine/view/item~Item item} to remove. If range is provided, after removing, it will be updated\n\t * to a collapsed range showing the new position.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} Document fragment containing removed nodes.\n\t */\n\tremove( rangeOrItem ) {\n\t\tconst range = rangeOrItem instanceof Range ? rangeOrItem : Range._createOn( rangeOrItem );\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// If range is collapsed - nothing to remove.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn new DocumentFragment();\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\tconst count = breakEnd.offset - breakStart.offset;\n\n\t\t// Remove nodes in range.\n\t\tconst removed = parentContainer._removeChildren( breakStart.offset, count );\n\n\t\tfor ( const node of removed ) {\n\t\t\tthis._removeFromClonedElementsGroup( node );\n\t\t}\n\n\t\t// Merge after removing.\n\t\tconst mergePosition = this.mergeAttributes( breakStart );\n\t\trange.start = mergePosition;\n\t\trange.end = mergePosition.clone();\n\n\t\t// Return removed nodes.\n\t\treturn new DocumentFragment( removed );\n\t}\n\n\t/**\n\t * Removes matching elements from given range.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range Range to clear.\n\t * @param {module:engine/view/element~Element} element Element to remove.\n\t */\n\tclear( range, element ) {\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// Create walker on given range.\n\t\t// We walk backward because when we remove element during walk it modifies range end position.\n\t\tconst walker = range.getWalker( {\n\t\t\tdirection: 'backward',\n\t\t\tignoreElementEnd: true\n\t\t} );\n\n\t\t// Let's walk.\n\t\tfor ( const current of walker ) {\n\t\t\tconst item = current.item;\n\t\t\tlet rangeToRemove;\n\n\t\t\t// When current item matches to the given element.\n\t\t\tif ( item.is( 'element' ) && element.isSimilar( item ) ) {\n\t\t\t\t// Create range on this element.\n\t\t\t\trangeToRemove = Range._createOn( item );\n\t\t\t\t// When range starts inside Text or TextProxy element.\n\t\t\t} else if ( !current.nextPosition.isAfter( range.start ) && item.is( 'textProxy' ) ) {\n\t\t\t\t// We need to check if parent of this text matches to given element.\n\t\t\t\tconst parentElement = item.getAncestors().find( ancestor => {\n\t\t\t\t\treturn ancestor.is( 'element' ) && element.isSimilar( ancestor );\n\t\t\t\t} );\n\n\t\t\t\t// If it is then create range inside this element.\n\t\t\t\tif ( parentElement ) {\n\t\t\t\t\trangeToRemove = Range._createIn( parentElement );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we have found element to remove.\n\t\t\tif ( rangeToRemove ) {\n\t\t\t\t// We need to check if element range stick out of the given range and truncate if it is.\n\t\t\t\tif ( rangeToRemove.end.isAfter( range.end ) ) {\n\t\t\t\t\trangeToRemove.end = range.end;\n\t\t\t\t}\n\n\t\t\t\tif ( rangeToRemove.start.isBefore( range.start ) ) {\n\t\t\t\t\trangeToRemove.start = range.start;\n\t\t\t\t}\n\n\t\t\t\t// At the end we remove range with found element.\n\t\t\t\tthis.remove( rangeToRemove );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves nodes from provided range to target position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} sourceRange Range containing nodes to move.\n\t * @param {module:engine/view/position~Position} targetPosition Position to insert.\n\t * @returns {module:engine/view/range~Range} Range in target container. Inserted nodes are placed between\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions.\n\t */\n\tmove( sourceRange, targetPosition ) {\n\t\tlet nodes;\n\n\t\tif ( targetPosition.isAfter( sourceRange.end ) ) {\n\t\t\ttargetPosition = this._breakAttributes( targetPosition, true );\n\n\t\t\tconst parent = targetPosition.parent;\n\t\t\tconst countBefore = parent.childCount;\n\n\t\t\tsourceRange = this._breakAttributesRange( sourceRange, true );\n\n\t\t\tnodes = this.remove( sourceRange );\n\n\t\t\ttargetPosition.offset += ( parent.childCount - countBefore );\n\t\t} else {\n\t\t\tnodes = this.remove( sourceRange );\n\t\t}\n\n\t\treturn this.insert( targetPosition, nodes );\n\t}\n\n\t/**\n\t * Wraps elements within range with provided {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t * If a collapsed range is provided, it will be wrapped only if it is equal to view selection.\n\t *\n\t * If a collapsed range was passed and is same as selection, the selection\n\t * will be moved to the inside of the wrapped attribute element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-invalid-range-container`\n\t * when {@link module:engine/view/range~Range#start}\n\t * and {@link module:engine/view/range~Range#end} positions are not placed inside same parent container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-nonselection-collapsed-range` when passed range\n\t * is collapsed and different than view selection.\n\t *\n\t * @param {module:engine/view/range~Range} range Range to wrap.\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute Attribute element to use as wrapper.\n\t * @returns {module:engine/view/range~Range} range Range after wrapping, spanning over wrapping attribute element.\n\t*/\n\twrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\tthrow new CKEditorError( 'view-writer-wrap-invalid-attribute', this.document );\n\t\t}\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\tif ( !range.isCollapsed ) {\n\t\t\t// Non-collapsed range. Wrap it with the attribute element.\n\t\t\treturn this._wrapRange( range, attribute );\n\t\t} else {\n\t\t\t// Collapsed range. Wrap position.\n\t\t\tlet position = range.start;\n\n\t\t\tif ( position.parent.is( 'element' ) && !_hasNonUiChildren( position.parent ) ) {\n\t\t\t\tposition = position.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n\t\t\t}\n\n\t\t\tposition = this._wrapPosition( position, attribute );\n\t\t\tconst viewSelection = this.document.selection;\n\n\t\t\t// If wrapping position is equal to view selection, move view selection inside wrapping attribute element.\n\t\t\tif ( viewSelection.isCollapsed && viewSelection.getFirstPosition().isEqual( range.start ) ) {\n\t\t\t\tthis.setSelection( position );\n\t\t\t}\n\n\t\t\treturn new Range( position );\n\t\t}\n\t}\n\n\t/**\n\t * Unwraps nodes within provided range from attribute element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t */\n\tunwrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\t/**\n\t\t\t * Attribute element need to be instance of attribute element.\n\t\t\t *\n\t\t\t * @error view-writer-unwrap-invalid-attribute\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-unwrap-invalid-attribute', this.document );\n\t\t}\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// If range is collapsed - nothing to unwrap.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn range;\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Unwrap children located between break points.\n\t\tconst newRange = this._unwrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Renames element by creating a copy of renamed element but with changed name and then moving contents of the\n\t * old element to the new one. Keep in mind that this will invalidate all {@link module:engine/view/position~Position positions} which\n\t * has renamed element as {@link module:engine/view/position~Position#parent a parent}.\n\t *\n\t * New element has to be created because `Element#tagName` property in DOM is readonly.\n\t *\n\t * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n\t *\n\t * @param {String} newName New name for element.\n\t * @param {module:engine/view/containerelement~ContainerElement} viewElement Element to be renamed.\n\t */\n\trename( newName, viewElement ) {\n\t\tconst newElement = new ContainerElement( newName, viewElement.getAttributes() );\n\n\t\tthis.insert( Position._createAfter( viewElement ), newElement );\n\t\tthis.move( Range._createIn( viewElement ), Position._createAt( newElement, 0 ) );\n\t\tthis.remove( Range._createOn( viewElement ) );\n\n\t\treturn newElement;\n\t}\n\n\t/**\n\t * Cleans up memory by removing obsolete cloned elements group from the writer.\n\t *\n\t * Should be used whenever all {@link module:engine/view/attributeelement~AttributeElement attribute elements}\n\t * with the same {@link module:engine/view/attributeelement~AttributeElement#id id} are going to be removed from the view and\n\t * the group will no longer be needed.\n\t *\n\t * Cloned elements group are not removed automatically in case if the group is still needed after all its elements\n\t * were removed from the view.\n\t *\n\t * Keep in mind that group names are equal to the `id` property of the attribute element.\n\t *\n\t * @param {String} groupName Name of the group to clear.\n\t */\n\tclearClonedElementsGroup( groupName ) {\n\t\tthis._cloneGroups.delete( groupName );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'p' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Wraps children with provided `wrapElement`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be wrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} wrapElement\n\t */\n\t_wrapChildren( parent, startOffset, endOffset, wrapElement ) {\n\t\tlet i = startOffset;\n\t\tconst wrapPositions = [];\n\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\t\t\tconst isText = child.is( 'text' );\n\t\t\tconst isAttribute = child.is( 'attributeElement' );\n\t\t\tconst isEmpty = child.is( 'emptyElement' );\n\t\t\tconst isUI = child.is( 'uiElement' );\n\n\t\t\t//\n\t\t\t// (In all examples, assume that `wrapElement` is `<span class=\"foo\">` element.)\n\t\t\t//\n\t\t\t// Check if `wrapElement` can be joined with the wrapped element. One of requirements is having same name.\n\t\t\t// If possible, join elements.\n\t\t\t//\n\t\t\t// <p><span class=\"bar\">abc</span></p>  -->  <p><span class=\"foo bar\">abc</span></p>\n\t\t\t//\n\t\t\tif ( isAttribute && this._wrapAttributeElement( wrapElement, child ) ) {\n\t\t\t\twrapPositions.push( new Position( parent, i ) );\n\t\t\t}\n\t\t\t//\n\t\t\t// Wrap the child if it is not an attribute element or if it is an attribute element that should be inside\n\t\t\t// `wrapElement` (due to priority).\n\t\t\t//\n\t\t\t// <p>abc</p>                   -->  <p><span class=\"foo\">abc</span></p>\n\t\t\t// <p><strong>abc</strong></p>  -->  <p><span class=\"foo\"><strong>abc</strong></span></p>\n\t\t\t//\n\t\t\telse if ( isText || isEmpty || isUI || ( isAttribute && shouldABeOutsideB( wrapElement, child ) ) ) {\n\t\t\t\t// Clone attribute.\n\t\t\t\tconst newAttribute = wrapElement._clone();\n\n\t\t\t\t// Wrap current node with new attribute.\n\t\t\t\tchild._remove();\n\t\t\t\tnewAttribute._appendChild( child );\n\n\t\t\t\tparent._insertChild( i, newAttribute );\n\t\t\t\tthis._addToClonedElementsGroup( newAttribute );\n\n\t\t\t\twrapPositions.push( new Position( parent, i ) );\n\t\t\t}\n\t\t\t//\n\t\t\t// If other nested attribute is found and it wasn't wrapped (see above), continue wrapping inside it.\n\t\t\t//\n\t\t\t// <p><a href=\"foo.html\">abc</a></p>  -->  <p><a href=\"foo.html\"><span class=\"foo\">abc</span></a></p>\n\t\t\t//\n\t\t\telse if ( isAttribute ) {\n\t\t\t\tthis._wrapChildren( child, 0, child.childCount, wrapElement );\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge at each wrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of wrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range._createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Unwraps children from provided `unwrapElement`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} unwrapElement\n\t */\n\t_unwrapChildren( parent, startOffset, endOffset, unwrapElement ) {\n\t\tlet i = startOffset;\n\t\tconst unwrapPositions = [];\n\n\t\t// Iterate over each element between provided offsets inside parent.\n\t\t// We don't use tree walker or range iterator because we will be removing and merging potentially multiple nodes,\n\t\t// so it could get messy. It is safer to it manually in this case.\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\n\t\t\t// Skip all text nodes. There should be no container element's here either.\n\t\t\tif ( !child.is( 'attributeElement' ) ) {\n\t\t\t\ti++;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// (In all examples, assume that `unwrapElement` is `<span class=\"foo\">` element.)\n\t\t\t//\n\t\t\t// If the child is similar to the given attribute element, unwrap it - it will be completely removed.\n\t\t\t//\n\t\t\t// <p><span class=\"foo\">abc</span>xyz</p>  -->  <p>abcxyz</p>\n\t\t\t//\n\t\t\tif ( child.isSimilar( unwrapElement ) ) {\n\t\t\t\tconst unwrapped = child.getChildren();\n\t\t\t\tconst count = child.childCount;\n\n\t\t\t\t// Replace wrapper element with its children\n\t\t\t\tchild._remove();\n\t\t\t\tparent._insertChild( i, unwrapped );\n\n\t\t\t\tthis._removeFromClonedElementsGroup( child );\n\n\t\t\t\t// Save start and end position of moved items.\n\t\t\t\tunwrapPositions.push(\n\t\t\t\t\tnew Position( parent, i ),\n\t\t\t\t\tnew Position( parent, i + count )\n\t\t\t\t);\n\n\t\t\t\t// Skip elements that were unwrapped. Assuming there won't be another element to unwrap in child elements.\n\t\t\t\ti += count;\n\t\t\t\tendOffset += count - 1;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// If the child is not similar but is an attribute element, try partial unwrapping - remove the same attributes/styles/classes.\n\t\t\t// Partial unwrapping will happen only if the elements have the same name.\n\t\t\t//\n\t\t\t// <p><span class=\"foo bar\">abc</span>xyz</p>  -->  <p><span class=\"bar\">abc</span>xyz</p>\n\t\t\t// <p><i class=\"foo\">abc</i>xyz</p>            -->  <p><i class=\"foo\">abc</i>xyz</p>\n\t\t\t//\n\t\t\tif ( this._unwrapAttributeElement( unwrapElement, child ) ) {\n\t\t\t\tunwrapPositions.push(\n\t\t\t\t\tnew Position( parent, i ),\n\t\t\t\t\tnew Position( parent, i + 1 )\n\t\t\t\t);\n\n\t\t\t\ti++;\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//\n\t\t\t// If other nested attribute is found, look through it's children for elements to unwrap.\n\t\t\t//\n\t\t\t// <p><i><span class=\"foo\">abc</span></i><p>  -->  <p><i>abc</i><p>\n\t\t\t//\n\t\t\tthis._unwrapChildren( child, 0, child.childCount, unwrapElement );\n\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge at each unwrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of unwrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset || position.offset == endOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range._createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Helper function for `view.writer.wrap`. Wraps range with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/range~Range} New range after wrapping, spanning over wrapping attribute element.\n\t */\n\t_wrapRange( range, attribute ) {\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Wrap all children with attribute.\n\t\tconst newRange = this._wrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Helper function for {@link #wrap}. Wraps position with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/position~Position} New position after wrapping.\n\t */\n\t_wrapPosition( position, attribute ) {\n\t\t// Return same position when trying to wrap with attribute similar to position parent.\n\t\tif ( attribute.isSimilar( position.parent ) ) {\n\t\t\treturn movePositionToTextNode( position.clone() );\n\t\t}\n\n\t\t// When position is inside text node - break it and place new position between two text nodes.\n\t\tif ( position.parent.is( 'text' ) ) {\n\t\t\tposition = breakTextNode( position );\n\t\t}\n\n\t\t// Create fake element that will represent position, and will not be merged with other attributes.\n\t\tconst fakePosition = this.createAttributeElement();\n\t\tfakePosition._priority = Number.POSITIVE_INFINITY;\n\t\tfakePosition.isSimilar = () => false;\n\n\t\t// Insert fake element in position location.\n\t\tposition.parent._insertChild( position.offset, fakePosition );\n\n\t\t// Range around inserted fake attribute element.\n\t\tconst wrapRange = new Range( position, position.getShiftedBy( 1 ) );\n\n\t\t// Wrap fake element with attribute (it will also merge if possible).\n\t\tthis.wrap( wrapRange, attribute );\n\n\t\t// Remove fake element and place new position there.\n\t\tconst newPosition = new Position( fakePosition.parent, fakePosition.index );\n\t\tfakePosition._remove();\n\n\t\t// If position is placed between text nodes - merge them and return position inside.\n\t\tconst nodeBefore = newPosition.nodeBefore;\n\t\tconst nodeAfter = newPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof Text && nodeAfter instanceof Text ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\n\t\t// If position is next to text node - move position inside.\n\t\treturn movePositionToTextNode( newPosition );\n\t}\n\n\t/**\n\t * \tWraps one {@link module:engine/view/attributeelement~AttributeElement AttributeElement} into another by\n\t * \tmerging them if possible. When merging is possible - all attributes, styles and classes are moved from wrapper\n\t * \telement to element being wrapped.\n\t *\n\t * \t@private\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} toWrap AttributeElement to wrap using wrapper element.\n\t * \t@returns {Boolean} Returns `true` if elements are merged.\n\t */\n\t_wrapAttributeElement( wrapper, toWrap ) {\n\t\tif ( !canBeJoined( wrapper, toWrap ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can't merge if name or priority differs.\n\t\tif ( wrapper.name !== toWrap.name || wrapper.priority !== toWrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes can be merged.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are different we cannot wrap.\n\t\t\tif ( toWrap.hasAttribute( key ) && toWrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles can be merged.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( toWrap.hasStyle( key ) && toWrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Move all attributes/classes/styles from wrapper to wrapped AttributeElement.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Move only these attributes that are not present - other are similar.\n\t\t\tif ( !toWrap.hasAttribute( key ) ) {\n\t\t\t\tthis.setAttribute( key, wrapper.getAttribute( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( !toWrap.hasStyle( key ) ) {\n\t\t\t\tthis.setStyle( key, wrapper.getStyle( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getClassNames() ) {\n\t\t\tif ( !toWrap.hasClass( key ) ) {\n\t\t\t\tthis.addClass( key, toWrap );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Unwraps {@link module:engine/view/attributeelement~AttributeElement AttributeElement} from another by removing\n\t * corresponding attributes, classes and styles. All attributes, classes and styles from wrapper should be present\n\t * inside element being unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * @param {module:engine/view/attributeelement~AttributeElement} toUnwrap AttributeElement to unwrap using wrapper element.\n\t * @returns {Boolean} Returns `true` if elements are unwrapped.\n\t **/\n\t_unwrapAttributeElement( wrapper, toUnwrap ) {\n\t\tif ( !canBeJoined( wrapper, toUnwrap ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can't unwrap if name or priority differs.\n\t\tif ( wrapper.name !== toUnwrap.name || wrapper.priority !== toUnwrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper attributes.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasAttribute( key ) || toUnwrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper classes.\n\t\tif ( !toUnwrap.hasClass( ...wrapper.getClassNames() ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper styles.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\t// If some styles are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasStyle( key ) || toUnwrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Remove all wrapper's attributes from unwrapped element.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.removeAttribute( key, toUnwrap );\n\t\t}\n\n\t\t// Remove all wrapper's classes from unwrapped element.\n\t\tthis.removeClass( Array.from( wrapper.getClassNames() ), toUnwrap );\n\n\t\t// Remove all wrapper's styles from unwrapped element.\n\t\tthis.removeStyle( Array.from( wrapper.getStyleNames() ), toUnwrap );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at the boundaries of given range.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range Range which `start` and `end` positions will be used to break attributes.\n\t * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n\t * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n\t * @returns {module:engine/view/range~Range} New range with located at break positions.\n\t */\n\t_breakAttributesRange( range, forceSplitText = false ) {\n\t\tconst rangeStart = range.start;\n\t\tconst rangeEnd = range.end;\n\n\t\tvalidateRangeContainer( range, this.document );\n\n\t\t// Break at the collapsed position. Return new collapsed range.\n\t\tif ( range.isCollapsed ) {\n\t\t\tconst position = this._breakAttributes( range.start, forceSplitText );\n\n\t\t\treturn new Range( position, position );\n\t\t}\n\n\t\tconst breakEnd = this._breakAttributes( rangeEnd, forceSplitText );\n\t\tconst count = breakEnd.parent.childCount;\n\t\tconst breakStart = this._breakAttributes( rangeStart, forceSplitText );\n\n\t\t// Calculate new break end offset.\n\t\tbreakEnd.offset += breakEnd.parent.childCount - count;\n\n\t\treturn new Range( breakStart, breakEnd );\n\t}\n\n\t/**\n\t * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at given position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element` when break position\n\t * is placed inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element` when break position\n\t * is placed inside {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position Position where to break attributes.\n\t * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n\t * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n\t * @returns {module:engine/view/position~Position} New position after breaking the attributes.\n\t */\n\t_breakAttributes( position, forceSplitText = false ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// If position is placed inside EmptyElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'emptyElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break inside EmptyElement instance.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-empty-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-empty-element', this.document );\n\t\t}\n\n\t\t// If position is placed inside UIElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'uiElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break inside UIElement instance.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-ui-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-ui-element', this.document );\n\t\t}\n\n\t\t// There are no attributes to break and text nodes breaking is not forced.\n\t\tif ( !forceSplitText && positionParent.is( 'text' ) && isContainerOrFragment( positionParent.parent ) ) {\n\t\t\treturn position.clone();\n\t\t}\n\n\t\t// Position's parent is container, so no attributes to break.\n\t\tif ( isContainerOrFragment( positionParent ) ) {\n\t\t\treturn position.clone();\n\t\t}\n\n\t\t// Break text and start again in new position.\n\t\tif ( positionParent.is( 'text' ) ) {\n\t\t\treturn this._breakAttributes( breakTextNode( position ), forceSplitText );\n\t\t}\n\n\t\tconst length = positionParent.childCount;\n\n\t\t// <p>foo<b><u>bar{}</u></b></p>\n\t\t// <p>foo<b><u>bar</u>[]</b></p>\n\t\t// <p>foo<b><u>bar</u></b>[]</p>\n\t\tif ( positionOffset == length ) {\n\t\t\tconst newPosition = new Position( positionParent.parent, positionParent.index + 1 );\n\n\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t} else {\n\t\t\t// <p>foo<b><u>{}bar</u></b></p>\n\t\t\t// <p>foo<b>[]<u>bar</u></b></p>\n\t\t\t// <p>foo{}<b><u>bar</u></b></p>\n\t\t\tif ( positionOffset === 0 ) {\n\t\t\t\tconst newPosition = new Position( positionParent.parent, positionParent.index );\n\n\t\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t\t}\n\t\t\t// <p>foo<b><u>b{}ar</u></b></p>\n\t\t\t// <p>foo<b><u>b[]ar</u></b></p>\n\t\t\t// <p>foo<b><u>b</u>[]<u>ar</u></b></p>\n\t\t\t// <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t\t\telse {\n\t\t\t\tconst offsetAfter = positionParent.index + 1;\n\n\t\t\t\t// Break element.\n\t\t\t\tconst clonedNode = positionParent._clone();\n\n\t\t\t\t// Insert cloned node to position's parent node.\n\t\t\t\tpositionParent.parent._insertChild( offsetAfter, clonedNode );\n\t\t\t\tthis._addToClonedElementsGroup( clonedNode );\n\n\t\t\t\t// Get nodes to move.\n\t\t\t\tconst count = positionParent.childCount - positionOffset;\n\t\t\t\tconst nodesToMove = positionParent._removeChildren( positionOffset, count );\n\n\t\t\t\t// Move nodes to cloned node.\n\t\t\t\tclonedNode._appendChild( nodesToMove );\n\n\t\t\t\t// Create new position to work on.\n\t\t\t\tconst newPosition = new Position( positionParent.parent, offsetAfter );\n\n\t\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stores the information that an {@link module:engine/view/attributeelement~AttributeElement attribute element} was\n\t * added to the tree. Saves the reference to the group in the given element and updates the group, so other elements\n\t * from the group now keep a reference to the given attribute element.\n\t *\n\t * The clones group can be obtained using {@link module:engine/view/attributeelement~AttributeElement#getElementsWithSameId}.\n\t *\n\t * Does nothing if added element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to save.\n\t */\n\t_addToClonedElementsGroup( element ) {\n\t\t// Add only if the element is in document tree.\n\t\tif ( !element.root.is( 'rootElement' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Traverse the element's children recursively to find other attribute elements that also might got inserted.\n\t\t// The loop is at the beginning so we can make fast returns later in the code.\n\t\tif ( element.is( 'element' ) ) {\n\t\t\tfor ( const child of element.getChildren() ) {\n\t\t\t\tthis._addToClonedElementsGroup( child );\n\t\t\t}\n\t\t}\n\n\t\tconst id = element.id;\n\n\t\tif ( !id ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet group = this._cloneGroups.get( id );\n\n\t\tif ( !group ) {\n\t\t\tgroup = new Set();\n\t\t\tthis._cloneGroups.set( id, group );\n\t\t}\n\n\t\tgroup.add( element );\n\t\telement._clonesGroup = group;\n\t}\n\n\t/**\n\t * Removes all the information about the given {@link module:engine/view/attributeelement~AttributeElement attribute element}\n\t * from its clones group.\n\t *\n\t * Keep in mind, that the element will still keep a reference to the group (but the group will not keep a reference to it).\n\t * This allows to reference the whole group even if the element was already removed from the tree.\n\t *\n\t * Does nothing if the element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to remove.\n\t */\n\t_removeFromClonedElementsGroup( element ) {\n\t\t// Traverse the element's children recursively to find other attribute elements that also got removed.\n\t\t// The loop is at the beginning so we can make fast returns later in the code.\n\t\tif ( element.is( 'element' ) ) {\n\t\t\tfor ( const child of element.getChildren() ) {\n\t\t\t\tthis._removeFromClonedElementsGroup( child );\n\t\t\t}\n\t\t}\n\n\t\tconst id = element.id;\n\n\t\tif ( !id ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst group = this._cloneGroups.get( id );\n\n\t\tif ( !group ) {\n\t\t\treturn;\n\t\t}\n\n\t\tgroup.delete( element );\n\t\t// Not removing group from element on purpose!\n\t\t// If other parts of code have reference to this element, they will be able to get references to other elements from the group.\n\t}\n}\n\n// Helper function for `view.writer.wrap`. Checks if given element has any children that are not ui elements.\nfunction _hasNonUiChildren( parent ) {\n\treturn Array.from( parent.getChildren() ).some( child => !child.is( 'uiElement' ) );\n}\n\n/**\n * Attribute element need to be instance of attribute element.\n *\n * @error view-writer-wrap-invalid-attribute\n */\n\n// Returns first parent container of specified {@link module:engine/view/position~Position Position}.\n// Position's parent node is checked as first, then next parents are checked.\n// Note that {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n//\n// @param {module:engine/view/position~Position} position Position used as a start point to locate parent container.\n// @returns {module:engine/view/containerelement~ContainerElement|module:engine/view/documentfragment~DocumentFragment|undefined}\n// Parent container element or `undefined` if container is not found.\nfunction getParentContainer( position ) {\n\tlet parent = position.parent;\n\n\twhile ( !isContainerOrFragment( parent ) ) {\n\t\tif ( !parent ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tparent = parent.parent;\n\t}\n\n\treturn parent;\n}\n\n// Checks if first {@link module:engine/view/attributeelement~AttributeElement AttributeElement} provided to the function\n// can be wrapped otuside second element. It is done by comparing elements'\n// {@link module:engine/view/attributeelement~AttributeElement#priority priorities}, if both have same priority\n// {@link module:engine/view/element~Element#getIdentity identities} are compared.\n//\n// @param {module:engine/view/attributeelement~AttributeElement} a\n// @param {module:engine/view/attributeelement~AttributeElement} b\n// @returns {Boolean}\nfunction shouldABeOutsideB( a, b ) {\n\tif ( a.priority < b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority > b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use identities.\n\treturn a.getIdentity() < b.getIdentity();\n}\n\n// Returns new position that is moved to near text node. Returns same position if there is no text node before of after\n// specified position.\n//\n//\t\t<p>foo[]</p>  ->  <p>foo{}</p>\n//\t\t<p>[]foo</p>  ->  <p>{}foo</p>\n//\n// @param {module:engine/view/position~Position} position\n// @returns {module:engine/view/position~Position} Position located inside text node or same position if there is no text nodes\n// before or after position location.\nfunction movePositionToTextNode( position ) {\n\tconst nodeBefore = position.nodeBefore;\n\n\tif ( nodeBefore && nodeBefore.is( 'text' ) ) {\n\t\treturn new Position( nodeBefore, nodeBefore.data.length );\n\t}\n\n\tconst nodeAfter = position.nodeAfter;\n\n\tif ( nodeAfter && nodeAfter.is( 'text' ) ) {\n\t\treturn new Position( nodeAfter, 0 );\n\t}\n\n\treturn position;\n}\n\n// Breaks text node into two text nodes when possible.\n//\n//\t\t<p>foo{}bar</p> -> <p>foo[]bar</p>\n//\t\t<p>{}foobar</p> -> <p>[]foobar</p>\n//\t\t<p>foobar{}</p> -> <p>foobar[]</p>\n//\n// @param {module:engine/view/position~Position} position Position that need to be placed inside text node.\n// @returns {module:engine/view/position~Position} New position after breaking text node.\nfunction breakTextNode( position ) {\n\tif ( position.offset == position.parent.data.length ) {\n\t\treturn new Position( position.parent.parent, position.parent.index + 1 );\n\t}\n\n\tif ( position.offset === 0 ) {\n\t\treturn new Position( position.parent.parent, position.parent.index );\n\t}\n\n\t// Get part of the text that need to be moved.\n\tconst textToMove = position.parent.data.slice( position.offset );\n\n\t// Leave rest of the text in position's parent.\n\tposition.parent._data = position.parent.data.slice( 0, position.offset );\n\n\t// Insert new text node after position's parent text node.\n\tposition.parent.parent._insertChild( position.parent.index + 1, new Text( textToMove ) );\n\n\t// Return new position between two newly created text nodes.\n\treturn new Position( position.parent.parent, position.parent.index + 1 );\n}\n\n// Merges two text nodes into first node. Removes second node and returns merge position.\n//\n// @param {module:engine/view/text~Text} t1 First text node to merge. Data from second text node will be moved at the end of\n// this text node.\n// @param {module:engine/view/text~Text} t2 Second text node to merge. This node will be removed after merging.\n// @returns {module:engine/view/position~Position} Position after merging text nodes.\nfunction mergeTextNodes( t1, t2 ) {\n\t// Merge text data into first text node and remove second one.\n\tconst nodeBeforeLength = t1.data.length;\n\tt1._data += t2.data;\n\tt2._remove();\n\n\treturn new Position( t1, nodeBeforeLength );\n}\n\n// Checks if provided nodes are valid to insert. Checks if each node is an instance of\n// {@link module:engine/view/text~Text Text} or {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n// {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElement} or\n// {@link module:engine/view/uielement~UIElement UIElement}.\n//\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n// contains instances that are not {@link module:engine/view/text~Text Texts},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElements},\n// {@link module:engine/view/uielement~UIElement UIElements},\n// {@link module:engine/view/attributeelement~AttributeElement AttributeElements} or\n// {@link module:engine/view/containerelement~ContainerElement ContainerElements}.\n//\n// @param Iterable.<module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement\n// |module:engine/view/containerelement~ContainerElement> nodes\n// @param {Object} errorContext\nfunction validateNodesToInsert( nodes, errorContext ) {\n\tfor ( const node of nodes ) {\n\t\tif ( !validNodesToInsert.some( ( validNode => node instanceof validNode ) ) ) { // eslint-disable-line no-use-before-define\n\t\t\t/**\n\t\t\t * Inserted nodes should be valid to insert. of {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n\t\t\t * {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n\t\t\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElement},\n\t\t\t * {@link module:engine/view/uielement~UIElement UIElement}, {@link module:engine/view/text~Text Text}.\n\t\t\t *\n\t\t\t * @error view-writer-insert-invalid-node\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-insert-invalid-node', errorContext );\n\t\t}\n\n\t\tif ( !node.is( 'text' ) ) {\n\t\t\tvalidateNodesToInsert( node.getChildren(), errorContext );\n\t\t}\n\t}\n}\n\nconst validNodesToInsert = [ Text, AttributeElement, ContainerElement, EmptyElement, UIElement ];\n\n// Checks if node is ContainerElement or DocumentFragment, because in most cases they should be treated the same way.\n//\n// @param {module:engine/view/node~Node} node\n// @returns {Boolean} Returns `true` if node is instance of ContainerElement or DocumentFragment.\nfunction isContainerOrFragment( node ) {\n\treturn node && ( node.is( 'containerElement' ) || node.is( 'documentFragment' ) );\n}\n\n// Checks if {@link module:engine/view/range~Range#start range start} and {@link module:engine/view/range~Range#end range end} are placed\n// inside same {@link module:engine/view/containerelement~ContainerElement container element}.\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when validation fails.\n//\n// @param {module:engine/view/range~Range} range\n// @param {Object} errorContext\nfunction validateRangeContainer( range, errorContext ) {\n\tconst startContainer = getParentContainer( range.start );\n\tconst endContainer = getParentContainer( range.end );\n\n\tif ( !startContainer || !endContainer || startContainer !== endContainer ) {\n\t\t/**\n\t\t * Range container is invalid. This can happen if {@link module:engine/view/range~Range#start range start} and\n\t\t * {@link module:engine/view/range~Range#end range end} positions are not placed inside same container or\n\t\t * parent container for these positions cannot be found.\n\t\t *\n\t\t * @error view-writer-invalid-range-container\n\t\t */\n\n\t\tthrow new CKEditorError( 'view-writer-invalid-range-container', errorContext );\n\t}\n}\n\n// Checks if two attribute elements can be joined together. Elements can be joined together if, and only if\n// they do not have ids specified.\n//\n// @private\n// @param {module:engine/view/element~Element} a\n// @param {module:engine/view/element~Element} b\n// @returns {Boolean}\nfunction canBeJoined( a, b ) {\n\treturn a.id === null && b.id === null;\n}\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import defineProperty from './_defineProperty.js';\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nexport default baseAssignValue;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignValue;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nexport default stubArray;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nexport default arrayPush;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nexport default isIndex;\n","import arrayPush from './_arrayPush.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nexport default baseGetAllKeys;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/objecttomap\n */\n\n/**\n * Transforms object to map.\n *\n *\t\tconst map = objectToMap( { 'foo': 1, 'bar': 2 } );\n *\t\tmap.get( 'foo' ); // 1\n *\n * @param {Object} obj Object to transform.\n * @returns {Map} Map created from object.\n */\nexport default function objectToMap( obj ) {\n\tconst map = new Map();\n\n\tfor ( const key in obj ) {\n\t\tmap.set( key, obj[ key ] );\n\t}\n\n\treturn map;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/documentselection\n */\n\nimport Selection from './selection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\n/**\n * Class representing the document selection in the view.\n *\n * Its instance is available in {@link module:engine/view/document~Document#selection `Document#selection`}.\n *\n * It is similar to {@link module:engine/view/selection~Selection} but\n * it has a read-only API and can be modified only by the writer available in\n * the {@link module:engine/view/view~View#change `View#change()`} block\n * (so via {@link module:engine/view/downcastwriter~DowncastWriter#setSelection `DowncastWriter#setSelection()`}).\n */\nexport default class DocumentSelection {\n\t/**\n\t * Creates new DocumentSelection instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = new DocumentSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = new DocumentSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\tconst selection = new DocumentSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = new DocumentSelection( otherSelection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, offset );\n\t *\t\tconst selection = new DocumentSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = new DocumentSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = new DocumentSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = new DocumentSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = new DocumentSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = new DocumentSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tconstructor( selectable = null, placeOrOffset, options ) {\n\t\t/**\n\t\t * Selection is used internally (`DocumentSelection` is a proxy to that selection).\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/selection~Selection}\n\t\t */\n\t\tthis._selection = new Selection();\n\n\t\t// Delegate change event to be fired on DocumentSelection instance.\n\t\tthis._selection.delegate( 'change' ).to( this );\n\n\t\t// Set selection data.\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Returns true if selection instance is marked as `fake`.\n\t *\n\t * @see #_setTo\n\t * @returns {Boolean}\n\t */\n\tget isFake() {\n\t\treturn this._selection.isFake;\n\t}\n\n\t/**\n\t * Returns fake selection label.\n\t *\n\t * @see #_setTo\n\t * @returns {String}\n\t */\n\tget fakeSelectionLabel() {\n\t\treturn this._selection.fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n\t * {@link #focus focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n\t * It may be a bit unintuitive when there are multiple ranges in selection.\n\t *\n\t * @see #focus\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget anchor() {\n\t\treturn this._selection.anchor;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * @see #anchor\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget focus() {\n\t\treturn this._selection.focus;\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this._selection.isCollapsed;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._selection.rangeCount;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus} precedes {@link #anchor}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn this._selection.isBackward;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n\t * if the selection is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\treturn this._selection.editableElement;\n\t}\n\n\t/**\n\t * Used for the compatibility with the {@link module:engine/view/selection~Selection#isEqual} method.\n\t *\n\t * @protected\n\t */\n\tget _ranges() {\n\t\treturn this._selection._ranges;\n\t}\n\n\t/**\n\t * Returns an iterable that contains copies of all ranges added to the selection.\n\t *\n\t * @returns {Iterable.<module:engine/view/range~Range>}\n\t */\n\t* getRanges() {\n\t\tyield* this._selection.getRanges();\n\t}\n\n\t/**\n\t * Returns copy of the first range in the selection. First range is the one which\n\t * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n\t * position of all other ranges (not to confuse with the first range added to the selection).\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\treturn this._selection.getFirstRange();\n\t}\n\n\t/**\n\t * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n\t * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n\t * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\treturn this._selection.getLastRange();\n\t}\n\n\t/**\n\t * Returns copy of the first position in the selection. First position is the position that\n\t * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\treturn this._selection.getFirstPosition();\n\t}\n\n\t/**\n\t * Returns copy of the last position in the selection. Last position is the position that\n\t * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\treturn this._selection.getLastPosition();\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/view/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\treturn this._selection.getSelectedElement();\n\t}\n\n\t/**\n\t * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n\t * same number of ranges and all ranges from one selection equal to a range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\treturn this._selection.isEqual( otherSelection );\n\t}\n\n\t/**\n\t * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n\t * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n\t * equal to any trimmed range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n\t */\n\tisSimilar( otherSelection ) {\n\t\treturn this._selection.isSimilar( otherSelection );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tdocSelection.is( 'selection' ); // -> true\n\t *\t\tdocSelection.is( 'documentSelection' ); // -> true\n\t *\t\tdocSelection.is( 'view:selection' ); // -> true\n\t *\t\tdocSelection.is( 'view:documentSelection' ); // -> true\n\t *\n\t *\t\tdocSelection.is( 'model:documentSelection' ); // -> false\n\t *\t\tdocSelection.is( 'element' ); // -> false\n\t *\t\tdocSelection.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' ||\n\t\t\ttype == 'documentSelection' ||\n\t\t\ttype == 'view:selection' ||\n\t\t\ttype == 'view:documentSelection';\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/view/selection~Selectable selectable}.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tdocumentSelection._setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\tdocumentSelection._setTo( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tdocumentSelection._setTo( otherSelection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, offset );\n\t *\t\tdocumentSelection._setTo( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tdocumentSelection._setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t *\t\tdocumentSelection._setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tdocumentSelection._setTo( paragraph, 'on' );\n\t *\n\t * \t\t// Clears selection. Removes all ranges.\n\t *\t\tdocumentSelection._setTo( null );\n\t *\n\t * `Selection#_setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\tdocumentSelection._setTo( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to des cribe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tdocumentSelection._setTo( range, { fake: true, label: 'foo' } );\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {module:engine/view/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\t_setTo( selectable, placeOrOffset, options ) {\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link #focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tthis._selection.setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Fired whenever selection ranges are changed through {@link ~DocumentSelection Selection API}.\n\t *\n\t * @event change\n\t */\n}\n\nmix( DocumentSelection, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/fastdiff\n */\n\n/**\n * Finds positions of the first and last change in the given string/array and generates a set of changes:\n *\n *\t\tfastDiff( '12a', '12xyza' );\n *\t\t// [ { index: 2, type: 'insert', values: [ 'x', 'y', 'z' ] } ]\n *\n *\t\tfastDiff( '12a', '12aa' );\n *\t\t// [ { index: 3, type: 'insert', values: [ 'a' ] } ]\n *\n *\t\tfastDiff( '12xyza', '12a' );\n *\t\t// [ { index: 2, type: 'delete', howMany: 3 } ]\n *\n *\t\tfastDiff( [ '1', '2', 'a', 'a' ], [ '1', '2', 'a' ] );\n *\t\t// [ { index: 3, type: 'delete', howMany: 1 } ]\n *\n *\t\tfastDiff( [ '1', '2', 'a', 'b', 'c', '3' ], [ '2', 'a', 'b' ] );\n *\t\t// [ { index: 0, type: 'insert', values: [ '2', 'a', 'b' ] }, { index: 3, type: 'delete', howMany: 6 } ]\n *\n * Passed arrays can contain any type of data, however to compare them correctly custom comparator function\n * should be passed as a third parameter:\n *\n *\t\tfastDiff( [ { value: 1 }, { value: 2 } ], [ { value: 1 }, { value: 3 } ], ( a, b ) => {\n *\t\t\treturn a.value === b.value;\n *\t\t} );\n *\t\t// [ { index: 1, type: 'insert', values: [ { value: 3 } ] }, { index: 2, type: 'delete', howMany: 1 } ]\n *\n * The resulted set of changes can be applied to the input in order to transform it into the output, for example:\n *\n *\t\tlet input = '12abc3';\n *\t\tconst output = '2ab';\n *\t\tconst changes = fastDiff( input, output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput = input.substring( 0, change.index ) + change.values.join( '' ) + input.substring( change.index );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput = input.substring( 0, change.index ) + input.substring( change.index + change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// input equals output now\n *\n * or in case of arrays:\n *\n *\t\tlet input = [ '1', '2', 'a', 'b', 'c', '3' ];\n *\t\tconst output = [ '2', 'a', 'b' ];\n *\t\tconst changes = fastDiff( input, output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput = input.slice( 0, change.index ).concat( change.values, input.slice( change.index ) );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput = input.slice( 0, change.index ).concat( input.slice( change.index + change.howMany ) );\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// input equals output now\n *\n * By passing `true` as the fourth parameter (`atomicChanges`) the output of this function will become compatible with\n * the {@link module:utils/diff~diff `diff()`} function:\n *\n *\t\tfastDiff( '12a', '12xyza' );\n *\t\t// [ 'equal', 'equal', 'insert', 'insert', 'insert', 'equal' ]\n *\n * The default output format of this function is compatible with the output format of\n * {@link module:utils/difftochanges~diffToChanges `diffToChanges()`}. The `diffToChanges()` input format is, in turn,\n * compatible with the output of {@link module:utils/diff~diff `diff()`}:\n *\n *\t\tconst a = '1234';\n *\t\tconst b = '12xyz34';\n *\n *\t\t// Both calls will return the same results (grouped changes format).\n *\t\tfastDiff( a, b );\n *\t\tdiffToChanges( diff( a, b ) );\n *\n *\t\t// Again, both calls will return the same results (atomic changes format).\n *\t\tfastDiff( a, b, null, true );\n *\t\tdiff( a, b );\n *\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Input array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default `===` (strict equal operator) is used.\n * @param {Boolean} [atomicChanges=false] Whether an array of `inset|delete|equal` operations should\n * be returned instead of changes set. This makes this function compatible with {@link module:utils/diff~diff `diff()`}.\n * @returns {Array} Array of changes.\n */\nexport default function fastDiff( a, b, cmp, atomicChanges = false ) {\n\t// Set the comparator function.\n\tcmp = cmp || function( a, b ) {\n\t\treturn a === b;\n\t};\n\n\t// Transform text or any iterable into arrays for easier, consistent processing.\n\tif ( !Array.isArray( a ) ) {\n\t\ta = Array.from( a );\n\t}\n\n\tif ( !Array.isArray( b ) ) {\n\t\tb = Array.from( b );\n\t}\n\n\t// Find first and last change.\n\tconst changeIndexes = findChangeBoundaryIndexes( a, b, cmp );\n\n\t// Transform into changes array.\n\treturn atomicChanges ? changeIndexesToAtomicChanges( changeIndexes, b.length ) : changeIndexesToChanges( b, changeIndexes );\n}\n\n// Finds position of the first and last change in the given arrays. For example:\n//\n//\t\tconst indexes = findChangeBoundaryIndexes( [ '1', '2', '3', '4' ], [ '1', '3', '4', '2', '4' ] );\n//\t\tconsole.log( indexes ); // { firstIndex: 1, lastIndexOld: 3, lastIndexNew: 4 }\n//\n// The above indexes means that in the first array the modified part is `1[23]4` and in the second array it is `1[342]4`.\n// Based on such indexes, array with `insert`/`delete` operations which allows transforming first value into the second one\n// can be generated.\n//\n// @param {Array} arr1\n// @param {Array} arr2\n// @param {Function} cmp Comparator function.\n// @returns {Object}\n// @returns {Number} return.firstIndex Index of the first change in both values (always the same for both).\n// @returns {Number} result.lastIndexOld Index of the last common value in `arr1`.\n// @returns {Number} result.lastIndexNew Index of the last common value in `arr2`.\nfunction findChangeBoundaryIndexes( arr1, arr2, cmp ) {\n\t// Find the first difference between passed values.\n\tconst firstIndex = findFirstDifferenceIndex( arr1, arr2, cmp );\n\n\t// If arrays are equal return -1 indexes object.\n\tif ( firstIndex === -1 ) {\n\t\treturn { firstIndex: -1, lastIndexOld: -1, lastIndexNew: -1 };\n\t}\n\n\t// Remove the common part of each value and reverse them to make it simpler to find the last difference between them.\n\tconst oldArrayReversed = cutAndReverse( arr1, firstIndex );\n\tconst newArrayReversed = cutAndReverse( arr2, firstIndex );\n\n\t// Find the first difference between reversed values.\n\t// It should be treated as \"how many elements from the end the last difference occurred\".\n\t//\n\t// For example:\n\t//\n\t// \t\t\t\tinitial\t->\tafter cut\t-> reversed:\n\t// oldValue:\t'321ba'\t->\t'21ba'\t\t-> 'ab12'\n\t// newValue:\t'31xba'\t->\t'1xba'\t\t-> 'abx1'\n\t// lastIndex:\t\t\t\t\t\t\t-> 2\n\t//\n\t// So the last change occurred two characters from the end of the arrays.\n\tconst lastIndex = findFirstDifferenceIndex( oldArrayReversed, newArrayReversed, cmp );\n\n\t// Use `lastIndex` to calculate proper offset, starting from the beginning (`lastIndex` kind of starts from the end).\n\tconst lastIndexOld = arr1.length - lastIndex;\n\tconst lastIndexNew = arr2.length - lastIndex;\n\n\treturn { firstIndex, lastIndexOld, lastIndexNew };\n}\n\n// Returns a first index on which given arrays differ. If both arrays are the same, -1 is returned.\n//\n// @param {Array} arr1\n// @param {Array} arr2\n// @param {Function} cmp Comparator function.\n// @returns {Number}\nfunction findFirstDifferenceIndex( arr1, arr2, cmp ) {\n\tfor ( let i = 0; i < Math.max( arr1.length, arr2.length ); i++ ) {\n\t\tif ( arr1[ i ] === undefined || arr2[ i ] === undefined || !cmp( arr1[ i ], arr2[ i ] ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1; // Return -1 if arrays are equal.\n}\n\n// Returns a copy of the given array with `howMany` elements removed starting from the beginning and in reversed order.\n//\n// @param {Array} arr Array to be processed.\n// @param {Number} howMany How many elements from array beginning to remove.\n// @returns {Array} Shortened and reversed array.\nfunction cutAndReverse( arr, howMany ) {\n\treturn arr.slice( howMany ).reverse();\n}\n\n// Generates changes array based on change indexes from `findChangeBoundaryIndexes` function. This function will\n// generate array with 0 (no changes), 1 (deletion or insertion) or 2 records (insertion and deletion).\n//\n// @param {Array} newArray New array for which change indexes were calculated.\n// @param {Object} changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n// @returns {Array.<Object>} Array of changes compatible with {@link module:utils/difftochanges~diffToChanges} format.\nfunction changeIndexesToChanges( newArray, changeIndexes ) {\n\tconst result = [];\n\tconst { firstIndex, lastIndexOld, lastIndexNew } = changeIndexes;\n\n\t// Order operations as 'insert', 'delete' array to keep compatibility with {@link module:utils/difftochanges~diffToChanges}\n\t// in most cases. However, 'diffToChanges' does not stick to any order so in some cases\n\t// (for example replacing '12345' with 'abcd') it will generate 'delete', 'insert' order.\n\tif ( lastIndexNew - firstIndex > 0 ) {\n\t\tresult.push( {\n\t\t\tindex: firstIndex,\n\t\t\ttype: 'insert',\n\t\t\tvalues: newArray.slice( firstIndex, lastIndexNew )\n\t\t} );\n\t}\n\n\tif ( lastIndexOld - firstIndex > 0 ) {\n\t\tresult.push( {\n\t\t\tindex: firstIndex + ( lastIndexNew - firstIndex ), // Increase index of what was inserted.\n\t\t\ttype: 'delete',\n\t\t\thowMany: lastIndexOld - firstIndex\n\t\t} );\n\t}\n\n\treturn result;\n}\n\n// Generates array with set `equal|insert|delete` operations based on change indexes from `findChangeBoundaryIndexes` function.\n//\n// @param {Object} changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n// @param {Number} newLength Length of the new array on which `findChangeBoundaryIndexes` calculated change indexes.\n// @returns {Array.<String>} Array of changes compatible with {@link module:utils/diff~diff} format.\nfunction changeIndexesToAtomicChanges( changeIndexes, newLength ) {\n\tconst { firstIndex, lastIndexOld, lastIndexNew } = changeIndexes;\n\n\t// No changes.\n\tif ( firstIndex === -1 ) {\n\t\treturn Array( newLength ).fill( 'equal' );\n\t}\n\n\tlet result = [];\n\tif ( firstIndex > 0 ) {\n\t\tresult = result.concat( Array( firstIndex ).fill( 'equal' ) );\n\t}\n\n\tif ( lastIndexNew - firstIndex > 0 ) {\n\t\tresult = result.concat( Array( lastIndexNew - firstIndex ).fill( 'insert' ) );\n\t}\n\n\tif ( lastIndexOld - firstIndex > 0 ) {\n\t\tresult = result.concat( Array( lastIndexOld - firstIndex ).fill( 'delete' ) );\n\t}\n\n\tif ( lastIndexNew < newLength ) {\n\t\tresult = result.concat( Array( newLength - lastIndexNew ).fill( 'equal' ) );\n\t}\n\n\treturn result;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getborderwidths\n */\n\n/**\n * Returns an object containing CSS border widths of a specified HTML element.\n *\n * @param {HTMLElement} element An element which has CSS borders.\n * @returns {Object} An object containing `top`, `left`, `right` and `bottom` properties\n * with numerical values of the `border-[top,left,right,bottom]-width` CSS styles.\n */\nexport default function getBorderWidths( element ) {\n\t// Call getComputedStyle on the window the element document belongs to.\n\tconst style = element.ownerDocument.defaultView.getComputedStyle( element );\n\n\treturn {\n\t\ttop: parseInt( style.borderTopWidth, 10 ),\n\t\tright: parseInt( style.borderRightWidth, 10 ),\n\t\tbottom: parseInt( style.borderBottomWidth, 10 ),\n\t\tleft: parseInt( style.borderLeftWidth, 10 )\n\t};\n}\n","import getNative from './_getNative.js';\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nexport default nativeCreate;\n","import nativeCreate from './_nativeCreate.js';\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nexport default hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default hashDelete;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nexport default hashGet;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nexport default hashHas;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nexport default hashSet;\n","import hashClear from './_hashClear.js';\nimport hashDelete from './_hashDelete.js';\nimport hashGet from './_hashGet.js';\nimport hashHas from './_hashHas.js';\nimport hashSet from './_hashSet.js';\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nexport default Hash;\n","import Hash from './_Hash.js';\nimport ListCache from './_ListCache.js';\nimport Map from './_Map.js';\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nexport default mapCacheClear;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nexport default isKeyable;\n","import isKeyable from './_isKeyable.js';\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nexport default getMapData;\n","import getMapData from './_getMapData.js';\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default mapCacheDelete;\n","import getMapData from './_getMapData.js';\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nexport default mapCacheGet;\n","import getMapData from './_getMapData.js';\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nexport default mapCacheHas;\n","import getMapData from './_getMapData.js';\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nexport default mapCacheSet;\n","import mapCacheClear from './_mapCacheClear.js';\nimport mapCacheDelete from './_mapCacheDelete.js';\nimport mapCacheGet from './_mapCacheGet.js';\nimport mapCacheHas from './_mapCacheHas.js';\nimport mapCacheSet from './_mapCacheSet.js';\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nexport default MapCache;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nexport default setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nexport default setCacheHas;\n","import MapCache from './_MapCache.js';\nimport setCacheAdd from './_setCacheAdd.js';\nimport setCacheHas from './_setCacheHas.js';\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nexport default SetCache;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default arraySome;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nexport default cacheHas;\n","import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nexport default mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nexport default setToArray;\n","import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n","import getAllKeys from './_getAllKeys.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalObjects;\n","import Stack from './_Stack.js';\nimport equalArrays from './_equalArrays.js';\nimport equalByTag from './_equalByTag.js';\nimport equalObjects from './_equalObjects.js';\nimport getTag from './_getTag.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nexport default baseIsEqualDeep;\n","import baseIsEqualDeep from './_baseIsEqualDeep.js';\nimport isObjectLike from './isObjectLike.js';\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nexport default baseIsEqual;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nexport default baseTimes;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","import baseTimes from './_baseTimes.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isIndex from './_isIndex.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default arrayLikeKeys;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/utils\n */\n\n/**\n * Returns attributes that should be preserved on the enter key.\n *\n * Filtering is realized based on `copyOnEnter` attribute property. Read more about attribute properties\n * {@link module:engine/model/schema~Schema#setAttributeProperties here}.\n *\n * @param {module:engine/model/schema~Schema} schema\n * @param {Iterable.<*>} allAttributes attributes to filter.\n * @returns {Iterable.<*>}\n */\nexport function* getCopyOnEnterAttributes( schema, allAttributes ) {\n\tfor ( const attribute of allAttributes ) {\n\t\tif ( attribute && schema.getAttributeProperties( attribute[ 0 ] ).copyOnEnter ) {\n\t\t\tyield attribute;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/enterobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class EnterObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst doc = this.document;\n\n\t\tdoc.on( 'keydown', ( evt, data ) => {\n\t\t\tif ( this.isEnabled && data.keyCode == keyCodes.enter ) {\n\t\t\t\t// Save the event object to check later if it was stopped or not.\n\t\t\t\tlet event;\n\t\t\t\tdoc.once( 'enter', evt => ( event = evt ), { priority: 'highest' } );\n\n\t\t\t\tdoc.fire( 'enter', new DomEventData( doc, data.domEvent, {\n\t\t\t\t\tisSoft: data.shiftKey\n\t\t\t\t} ) );\n\n\t\t\t\t// Stop `keydown` event if `enter` event was stopped.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\t\tif ( event && event.stop.called ) {\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user presses the <kbd>Enter</kbd> key.\n *\n * Note: This event is fired by the {@link module:enter/enterobserver~EnterObserver observer}\n * (usually registered by the {@link module:enter/enter~Enter Enter feature} and\n * {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature}).\n *\n * @event module:engine/view/document~Document#event:enter\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {Boolean} data.isSoft Whether it's a soft enter (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or hard enter (<kbd>Enter</kbd>).\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/position\n */\n\nimport global from './global';\nimport Rect from './rect';\nimport getPositionedAncestor from './getpositionedancestor';\nimport getBorderWidths from './getborderwidths';\nimport { isFunction } from 'lodash-es';\n\n/**\n * Calculates the `position: absolute` coordinates of a given element so it can be positioned with respect to the\n * target in the visually most efficient way, taking various restrictions like viewport or limiter geometry\n * into consideration.\n *\n *\t\t// The element which is to be positioned.\n *\t\tconst element = document.body.querySelector( '#toolbar' );\n *\n *\t\t// A target to which the element is positioned relatively.\n *\t\tconst target = document.body.querySelector( '#container' );\n *\n *\t\t// Finding the optimal coordinates for the positioning.\n *\t\tconst { left, top, name } = getOptimalPosition( {\n *\t\t\telement: element,\n *\t\t\ttarget: target,\n *\n * \t\t\t// The algorithm will chose among these positions to meet the requirements such\n * \t\t\t// as \"limiter\" element or \"fitInViewport\", set below. The positions are considered\n * \t\t\t// in the order of the array.\n *\t\t\tpositions: [\n *\t\t\t\t//\n *\t\t\t \t//\t[ Target ]\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t|     Element     |\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\n *\t\t\t\ttargetRect => ( {\n *\t\t\t\t\ttop: targetRect.bottom,\n *\t\t\t\t\tleft: targetRect.left,\n *\t\t\t\t\tname: 'mySouthEastPosition'\n *\t\t\t\t} ),\n *\n *\t\t\t\t//\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t|     Element     |\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t[ Target ]\n *\t\t\t\t//\n *\t\t\t\t( targetRect, elementRect ) => ( {\n *\t\t\t\t\ttop: targetRect.top - elementRect.height,\n *\t\t\t\t\tleft: targetRect.left,\n *\t\t\t\t\tname: 'myNorthEastPosition'\n *\t\t\t\t} )\n *\t\t\t],\n *\n *\t\t\t// Find a position such guarantees the element remains within visible boundaries of <body>.\n *\t\t\tlimiter: document.body,\n *\n *\t\t\t// Find a position such guarantees the element remains within visible boundaries of the browser viewport.\n *\t\t\tfitInViewport: true\n *\t\t} );\n *\n *\t\t// The best position which fits into document.body and the viewport. May be useful\n *\t\t// to set proper class on the `element`.\n *\t\tconsole.log( name ); // -> \"myNorthEastPosition\"\n *\n *\t\t// Using the absolute coordinates which has been found to position the element\n *\t\t// as in the diagram depicting the \"myNorthEastPosition\" position.\n *\t\telement.style.top = top;\n *\t\telement.style.left = left;\n *\n * @param {module:utils/dom/position~Options} options Positioning options object.\n * @returns {module:utils/dom/position~Position}\n */\nexport function getOptimalPosition( { element, target, positions, limiter, fitInViewport } ) {\n\t// If the {@link module:utils/dom/position~Options#target} is a function, use what it returns.\n\t// https://github.com/ckeditor/ckeditor5-utils/issues/157\n\tif ( isFunction( target ) ) {\n\t\ttarget = target();\n\t}\n\n\t// If the {@link module:utils/dom/position~Options#limiter} is a function, use what it returns.\n\t// https://github.com/ckeditor/ckeditor5-ui/issues/260\n\tif ( isFunction( limiter ) ) {\n\t\tlimiter = limiter();\n\t}\n\n\tconst positionedElementAncestor = getPositionedAncestor( element.parentElement );\n\tconst elementRect = new Rect( element );\n\tconst targetRect = new Rect( target );\n\n\tlet bestPosition;\n\tlet name;\n\n\t// If there are no limits, just grab the very first position and be done with that drama.\n\tif ( !limiter && !fitInViewport ) {\n\t\t[ name, bestPosition ] = getPosition( positions[ 0 ], targetRect, elementRect );\n\t} else {\n\t\tconst limiterRect = limiter && new Rect( limiter ).getVisible();\n\t\tconst viewportRect = fitInViewport && new Rect( global.window );\n\n\t\t[ name, bestPosition ] =\n\t\t\tgetBestPosition( positions, targetRect, elementRect, limiterRect, viewportRect ) ||\n\t\t\t// If there's no best position found, i.e. when all intersections have no area because\n\t\t\t// rects have no width or height, then just use the first available position.\n\t\t\tgetPosition( positions[ 0 ], targetRect, elementRect );\n\t}\n\n\tlet { left, top } = getAbsoluteRectCoordinates( bestPosition );\n\n\tif ( positionedElementAncestor ) {\n\t\tconst ancestorPosition = getAbsoluteRectCoordinates( new Rect( positionedElementAncestor ) );\n\t\tconst ancestorBorderWidths = getBorderWidths( positionedElementAncestor );\n\n\t\t// (https://github.com/ckeditor/ckeditor5-ui-default/issues/126)\n\t\t// If there's some positioned ancestor of the panel, then its `Rect` must be taken into\n\t\t// consideration. `Rect` is always relative to the viewport while `position: absolute` works\n\t\t// with respect to that positioned ancestor.\n\t\tleft -= ancestorPosition.left;\n\t\ttop -= ancestorPosition.top;\n\n\t\t// (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n\t\t// If there's some positioned ancestor of the panel, not only its position must be taken into\n\t\t// consideration (see above) but also its internal scrolls. Scroll have an impact here because `Rect`\n\t\t// is relative to the viewport (it doesn't care about scrolling), while `position: absolute`\n\t\t// must compensate that scrolling.\n\t\tleft += positionedElementAncestor.scrollLeft;\n\t\ttop += positionedElementAncestor.scrollTop;\n\n\t\t// (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n\t\t// If there's some positioned ancestor of the panel, then its `Rect` includes its CSS `borderWidth`\n\t\t// while `position: absolute` positioning does not consider it.\n\t\t// E.g. `{ position: absolute, top: 0, left: 0 }` means upper left corner of the element,\n\t\t// not upper-left corner of its border.\n\t\tleft -= ancestorBorderWidths.left;\n\t\ttop -= ancestorBorderWidths.top;\n\t}\n\n\treturn { left, top, name };\n}\n\n// For given position function, returns a corresponding `Rect` instance.\n//\n// @private\n// @param {Function} position A function returning {@link module:utils/dom/position~Position}.\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned element.\n// @returns {Array} An array containing position name and its Rect.\nfunction getPosition( position, targetRect, elementRect ) {\n\tconst { left, top, name } = position( targetRect, elementRect );\n\n\treturn [ name, elementRect.clone().moveTo( left, top ) ];\n}\n\n// For a given array of positioning functions, returns such that provides the best\n// fit of the `elementRect` into the `limiterRect` and `viewportRect`.\n//\n// @private\n// @param {module:utils/dom/position~Options#positions} positions Functions returning\n// {@link module:utils/dom/position~Position} to be checked, in the order of preference.\n// @param {utils/dom/rect~Rect} targetRect A rect of the {@link module:utils/dom/position~Options#target}.\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned {@link module:utils/dom/position~Options#element}.\n// @param {utils/dom/rect~Rect} limiterRect A rect of the {@link module:utils/dom/position~Options#limiter}.\n// @param {utils/dom/rect~Rect} viewportRect A rect of the viewport.\n// @returns {Array} An array containing the name of the position and it's rect.\nfunction getBestPosition( positions, targetRect, elementRect, limiterRect, viewportRect ) {\n\tlet maxLimiterIntersectArea = 0;\n\tlet maxViewportIntersectArea = 0;\n\tlet bestPositionRect;\n\tlet bestPositionName;\n\n\t// This is when element is fully visible.\n\tconst elementRectArea = elementRect.getArea();\n\n\tpositions.some( position => {\n\t\tconst [ positionName, positionRect ] = getPosition( position, targetRect, elementRect );\n\t\tlet limiterIntersectArea;\n\t\tlet viewportIntersectArea;\n\n\t\tif ( limiterRect ) {\n\t\t\tif ( viewportRect ) {\n\t\t\t\t// Consider only the part of the limiter which is visible in the viewport. So the limiter is getting limited.\n\t\t\t\tconst limiterViewportIntersectRect = limiterRect.getIntersection( viewportRect );\n\n\t\t\t\tif ( limiterViewportIntersectRect ) {\n\t\t\t\t\t// If the limiter is within the viewport, then check the intersection between that part of the\n\t\t\t\t\t// limiter and actual position.\n\t\t\t\t\tlimiterIntersectArea = limiterViewportIntersectRect.getIntersectionArea( positionRect );\n\t\t\t\t} else {\n\t\t\t\t\tlimiterIntersectArea = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlimiterIntersectArea = limiterRect.getIntersectionArea( positionRect );\n\t\t\t}\n\t\t}\n\n\t\tif ( viewportRect ) {\n\t\t\tviewportIntersectArea = viewportRect.getIntersectionArea( positionRect );\n\t\t}\n\n\t\t// The only criterion: intersection with the viewport.\n\t\tif ( viewportRect && !limiterRect ) {\n\t\t\tif ( viewportIntersectArea > maxViewportIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\t\t// The only criterion: intersection with the limiter.\n\t\telse if ( !viewportRect && limiterRect ) {\n\t\t\tif ( limiterIntersectArea > maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\t\t// Two criteria: intersection with the viewport and the limiter visible in the viewport.\n\t\telse {\n\t\t\tif ( viewportIntersectArea > maxViewportIntersectArea && limiterIntersectArea >= maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t} else if ( viewportIntersectArea >= maxViewportIntersectArea && limiterIntersectArea > maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\n\t\tfunction setBestPosition() {\n\t\t\tmaxViewportIntersectArea = viewportIntersectArea;\n\t\t\tmaxLimiterIntersectArea = limiterIntersectArea;\n\t\t\tbestPositionRect = positionRect;\n\t\t\tbestPositionName = positionName;\n\t\t}\n\n\t\t// If a such position is found that element is fully container by the limiter then, obviously,\n\t\t// there will be no better one, so finishing.\n\t\treturn limiterIntersectArea === elementRectArea;\n\t} );\n\n\treturn bestPositionRect ? [ bestPositionName, bestPositionRect ] : null;\n}\n\n// DOMRect (also Rect) works in a scroll–independent geometry but `position: absolute` doesn't.\n// This function converts Rect to `position: absolute` coordinates.\n//\n// @private\n// @param {utils/dom/rect~Rect} rect A rect to be converted.\n// @returns {Object} Object containing `left` and `top` properties, in absolute coordinates.\nfunction getAbsoluteRectCoordinates( { left, top } ) {\n\tconst { scrollX, scrollY } = global.window;\n\n\treturn {\n\t\tleft: left + scrollX,\n\t\ttop: top + scrollY,\n\t};\n}\n\n/**\n * The `getOptimalPosition` helper options.\n *\n * @interface module:utils/dom/position~Options\n */\n\n/**\n * Element that is to be positioned.\n *\n * @member {HTMLElement} #element\n */\n\n/**\n * Target with respect to which the `element` is to be positioned.\n *\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #target\n */\n\n/**\n * An array of functions which return {@link module:utils/dom/position~Position} relative\n * to the `target`, in the order of preference.\n *\n * @member {Array.<Function>} #positions\n */\n\n/**\n * When set, the algorithm will chose position which fits the most in the\n * limiter's bounding rect.\n *\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #limiter\n */\n\n/**\n * When set, the algorithm will chose such a position which fits `element`\n * the most inside visible viewport.\n *\n * @member {Boolean} #fitInViewport\n */\n\n/**\n * An object describing a position in `position: absolute` coordinate\n * system, along with position name.\n *\n * @typedef {Object} module:utils/dom/position~Position\n *\n * @property {Number} top Top position offset.\n * @property {Number} left Left position offset.\n * @property {String} name Name of the position.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getpositionedancestor\n */\n\nimport global from './global';\n\n/**\n * For a given element, returns the nearest ancestor element which CSS position is not \"static\".\n *\n * @param {HTMLElement} element The native DOM element to be checked.\n * @returns {HTMLElement|null}\n */\nexport default function getPositionedAncestor( element ) {\n\twhile ( element && element.tagName.toLowerCase() != 'html' ) {\n\t\tif ( global.window.getComputedStyle( element ).position != 'static' ) {\n\t\t\treturn element;\n\t\t}\n\n\t\telement = element.parentElement;\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/placeholder\n */\n\nimport '../../theme/placeholder.css';\n\n// Each document stores information about its placeholder elements and check functions.\nconst documentPlaceholders = new WeakMap();\n\n/**\n * A helper that enables a placeholder on the provided view element (also updates its visibility).\n * The placeholder is a CSS pseudo–element (with a text content) attached to the element.\n *\n * To change the placeholder text, simply call this method again with new options.\n *\n * To disable the placeholder, use {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} helper.\n *\n * @param {Object} [options] Configuration options of the placeholder.\n * @param {module:engine/view/view~View} options.view Editing view instance.\n * @param {module:engine/view/element~Element} options.element Element that will gain a placeholder.\n * See `options.isDirectHost` to learn more.\n * @param {String} options.text Placeholder text.\n * @param {Boolean} [options.isDirectHost=true] If set `false`, the placeholder will not be enabled directly\n * in the passed `element` but in one of its children (selected automatically, i.e. a first empty child element).\n * Useful when attaching placeholders to elements that can host other elements (not just text), for instance,\n * editable root elements.\n */\nexport function enablePlaceholder( options ) {\n\tconst { view, element, text, isDirectHost = true } = options;\n\tconst doc = view.document;\n\n\t// Use a single a single post fixer per—document to update all placeholders.\n\tif ( !documentPlaceholders.has( doc ) ) {\n\t\tdocumentPlaceholders.set( doc, new Map() );\n\n\t\t// If a post-fixer callback makes a change, it should return `true` so other post–fixers\n\t\t// can re–evaluate the document again.\n\t\tdoc.registerPostFixer( writer => updateDocumentPlaceholders( doc, writer ) );\n\t}\n\n\t// Store information about the element placeholder under its document.\n\tdocumentPlaceholders.get( doc ).set( element, {\n\t\ttext,\n\t\tisDirectHost\n\t} );\n\n\t// Update the placeholders right away.\n\tview.change( writer => updateDocumentPlaceholders( doc, writer ) );\n}\n\n/**\n * Disables the placeholder functionality from a given element.\n *\n * See {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} to learn more.\n *\n * @param {module:engine/view/view~View} view\n * @param {module:engine/view/element~Element} element\n */\nexport function disablePlaceholder( view, element ) {\n\tconst doc = element.document;\n\n\tview.change( writer => {\n\t\tif ( !documentPlaceholders.has( doc ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst placeholders = documentPlaceholders.get( doc );\n\t\tconst config = placeholders.get( element );\n\n\t\twriter.removeAttribute( 'data-placeholder', config.hostElement );\n\t\thidePlaceholder( writer, config.hostElement );\n\n\t\tplaceholders.delete( element );\n\t} );\n}\n\n/**\n * Shows a placeholder in the provided element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * **Note**: This helper will blindly show the placeholder directly in the root editable element if\n * one is passed, which could result in a visual clash if the editable element has some children\n * (for instance, an empty paragraph). Use {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`}\n * in that case or make sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\nexport function showPlaceholder( writer, element ) {\n\tif ( !element.hasClass( 'ck-placeholder' ) ) {\n\t\twriter.addClass( 'ck-placeholder', element );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Hides a placeholder in the element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\nexport function hidePlaceholder( writer, element ) {\n\tif ( element.hasClass( 'ck-placeholder' ) ) {\n\t\twriter.removeClass( 'ck-placeholder', element );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Checks if a placeholder should be displayed in the element.\n *\n * **Note**: This helper will blindly check the possibility of showing a placeholder directly in the\n * root editable element if one is passed, which may not be the expected result. If an element can\n * host other elements (not just text), most likely one of its children should be checked instead\n * because it will be the final host for the placeholder. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} in that case or make\n * sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean}\n */\nexport function needsPlaceholder( element ) {\n\tconst doc = element.document;\n\n\t// The element was removed from document.\n\tif ( !doc ) {\n\t\treturn false;\n\t}\n\n\t// The element is empty only as long as it contains nothing but uiElements.\n\tconst isEmptyish = !Array.from( element.getChildren() )\n\t\t.some( element => !element.is( 'uiElement' ) );\n\n\t// If the element is empty and the document is blurred.\n\tif ( !doc.isFocused && isEmptyish ) {\n\t\treturn true;\n\t}\n\n\tconst viewSelection = doc.selection;\n\tconst selectionAnchor = viewSelection.anchor;\n\n\t// If document is focused and the element is empty but the selection is not anchored inside it.\n\tif ( isEmptyish && selectionAnchor && selectionAnchor.parent !== element ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Updates all placeholders associated with a document in a post–fixer callback.\n//\n// @private\n// @param { module:engine/view/document~Document} doc\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {Boolean} True if any changes were made to the view document.\nfunction updateDocumentPlaceholders( doc, writer ) {\n\tconst placeholders = documentPlaceholders.get( doc );\n\tlet wasViewModified = false;\n\n\tfor ( const [ element, config ] of placeholders ) {\n\t\tif ( updatePlaceholder( writer, element, config ) ) {\n\t\t\twasViewModified = true;\n\t\t}\n\t}\n\n\treturn wasViewModified;\n}\n\n// Updates a single placeholder in a post–fixer callback.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/element~Element} element\n// @param {Object} config Configuration of the placeholder\n// @param {String} config.text\n// @param {Boolean} config.isDirectHost\n// @returns {Boolean} True if any changes were made to the view document.\nfunction updatePlaceholder( writer, element, config ) {\n\tconst { text, isDirectHost } = config;\n\tconst hostElement = isDirectHost ? element : getChildPlaceholderHostSubstitute( element );\n\tlet wasViewModified = false;\n\n\t// When not a direct host, it could happen that there is no child element\n\t// capable of displaying a placeholder.\n\tif ( !hostElement ) {\n\t\treturn false;\n\t}\n\n\t// Cache the host element. It will be necessary for disablePlaceholder() to know\n\t// which element should have class and attribute removed because, depending on\n\t// the config.isDirectHost value, it could be the element or one of its descendants.\n\tconfig.hostElement = hostElement;\n\n\t// This may be necessary when updating the placeholder text to something else.\n\tif ( hostElement.getAttribute( 'data-placeholder' ) !== text ) {\n\t\twriter.setAttribute( 'data-placeholder', text, hostElement );\n\t\twasViewModified = true;\n\t}\n\n\tif ( needsPlaceholder( hostElement ) ) {\n\t\tif ( showPlaceholder( writer, hostElement ) ) {\n\t\t\twasViewModified = true;\n\t\t}\n\t} else if ( hidePlaceholder( writer, hostElement ) ) {\n\t\twasViewModified = true;\n\t}\n\n\treturn wasViewModified;\n}\n\n// Gets a child element capable of displaying a placeholder if a parent element can host more\n// than just text (for instance, when it is a root editable element). The child element\n// can then be used in other placeholder helpers as a substitute of its parent.\n//\n// @private\n// @param {module:engine/view/element~Element} parent\n// @returns {module:engine/view/element~Element|null}\nfunction getChildPlaceholderHostSubstitute( parent ) {\n\tif ( parent.childCount === 1 ) {\n\t\tconst firstChild = parent.getChild( 0 );\n\n\t\tif ( firstChild.is( 'element' ) && !firstChild.is( 'uiElement' ) ) {\n\t\t\treturn firstChild;\n\t\t}\n\t}\n\n\treturn null;\n}\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/label/labelview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/label/label.css';\n\n/**\n * The label view class.\n *\n * @extends module:ui/view~View\n */\nexport default class LabelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The text of the label.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #text\n\t\t */\n\t\tthis.set( 'text' );\n\n\t\t/**\n\t\t * The `for` attribute of the label (i.e. to pair with an `<input>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #for\n\t\t */\n\t\tthis.set( 'for' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'label',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-label'\n\t\t\t\t],\n\t\t\t\tfor: bind.to( 'for' )\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: bind.to( 'text' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/tooltip/tooltipview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/tooltip/tooltip.css';\n\n/**\n * The tooltip view class.\n *\n * @extends module:ui/view~View\n */\nexport default class TooltipView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The text of the tooltip visible to the user.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #text\n\t\t */\n\t\tthis.set( 'text', '' );\n\n\t\t/**\n\t\t * The position of the tooltip (south or north).\n\t\t *\n\t\t *\t\t+-----------+\n\t\t *\t\t|   north   |\n\t\t *\t\t+-----------+\n\t\t *\t\t      V\n\t\t *\t\t  [element]\n\t\t *\n\t\t *\t\t  [element]\n\t\t *\t\t      ^\n\t\t *\t\t+-----------+\n\t\t *\t\t|   south   |\n\t\t *\t\t+-----------+\n\t\t *\n\t\t * @observable\n\t\t * @default 's'\n\t\t * @member {'s'|'n'} #position\n\t\t */\n\t\tthis.set( 'position', 's' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-tooltip',\n\t\t\t\t\tbind.to( 'position', position => 'ck-tooltip_' + position ),\n\t\t\t\t\tbind.if( 'text', 'ck-hidden', value => !value.trim() )\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'span',\n\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t\t'ck-tooltip__text'\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: bind.to( 'text' ),\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.042 9.367l2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M14.958 9.367l-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/undoui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport undoIcon from '../theme/icons/undo.svg';\nimport redoIcon from '../theme/icons/redo.svg';\n/**\n * The undo UI feature. It introduces the `'undo'` and `'redo'` buttons to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UndoUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = editor.t;\n        const localizedUndoIcon = locale.uiLanguageDirection == 'ltr' ? undoIcon : redoIcon;\n        const localizedRedoIcon = locale.uiLanguageDirection == 'ltr' ? redoIcon : undoIcon;\n        this._addButton('undo', t('Undo'), 'CTRL+Z', localizedUndoIcon);\n        this._addButton('redo', t('Redo'), 'CTRL+Y', localizedRedoIcon);\n    }\n    /**\n\t * Creates a button for the specified command.\n\t *\n\t * @private\n\t * @param {String} name Command name.\n\t * @param {String} label Button label.\n\t * @param {String} keystroke Command keystroke.\n\t * @param {String} Icon Source of the icon.\n\t */\n    _addButton(name, label, keystroke, Icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, locale => {\n            const command = editor.commands.get(name);\n            const view = new ButtonView(locale);\n            view.set({\n                label,\n                icon: Icon,\n                keystroke,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            this.listenTo(view, 'execute', () => editor.execute(name));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undo\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoEditing from './undoediting';\nimport UndoUI from './undoui';\n\n/**\n * The undo feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:undo/undoediting~UndoEditing undo editing feature}\n * and {@link module:undo/undoui~UndoUI undo UI feature}.\n *\n * Below is the explanation of the undo mechanism working together with {@link module:engine/model/history~History History}:\n *\n * Whenever a {@link module:engine/model/operation/operation~Operation operation} is applied to the\n * {@link module:engine/model/document~Document document}, it is saved to `History` as is.\n * The {@link module:engine/model/batch~Batch batch} that owns that operation is also saved, in\n * {@link module:undo/undocommand~UndoCommand}, together with the selection that was present in the document before the\n * operation was applied. A batch is saved instead of the operation because changes are undone batch-by-batch, not operation-by-operation\n * and a batch is seen as one undo step.\n *\n * After some changes happen to the document, the `History` and `UndoCommand` stack can be represented as follows:\n *\n *\t\t    History                            Undo stack\n *\t\t==============             ==================================\n *\t\t[operation A1]                         [batch A]\n *\t\t[operation B1]                         [batch B]\n *\t\t[operation B2]                         [batch C]\n *\t\t[operation C1]\n *\t\t[operation C2]\n *\t\t[operation B3]\n *\t\t[operation C3]\n *\n * Where operations starting with the same letter are from same batch.\n *\n * Undoing a batch means that a set of operations which will reverse the effects of that batch needs to be generated.\n * For example, if a batch added several letters, undoing the batch should remove them. It is important to apply undoing\n * operations in the reversed order, so if a batch has operation `X`, `Y`, `Z`, reversed operations `Zr`, `Yr` and `Xr`\n * need to be applied. Otherwise reversed operation `Xr` would operate on a wrong document state, because operation `X`\n * does not know that operations `Y` and `Z` happened.\n *\n * After operations from an undone batch got {@link module:engine/model/operation/operation~Operation#getReversed reversed},\n * one needs to make sure if they are ready to be applied. In the scenario above, operation `C3` is the last operation and `C3r`\n * bases on up-to-date document state, so it can be applied to the document.\n *\n *\t\t     History                             Undo stack\n *\t\t=================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]             [   processing undoing batch C   ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\n * Next is operation `C2`, reversed to `C2r`. `C2r` bases on `C2`, so it bases on the wrong document state. It needs to be\n * transformed by operations from history that happened after it, so it \"knows\" about them. Let us assume that `C2' = C2r * B3 * C3 * C3r`,\n * where `*` means \"transformed by\". Rest of operations from that batch are processed in the same fashion.\n *\n *\t\t     History                             Undo stack                                      Redo stack\n *\t\t=================             ==================================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]                                    [ batch Cr ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\t\t[ operation C2' ]\n *\t\t[ operation C1' ]\n *\n * Selective undo works on the same basis, however, instead of undoing the last batch in the undo stack, any batch can be undone.\n * The same algorithm applies: operations from a batch (i.e. `A1`) are reversed and then transformed by operations stored in history.\n *\n * Redo also is very similar to undo. It has its own stack that is filled with undoing (reversed batches). Operations from\n * batch that is re-done are reversed-back, transformed in proper order and applied to the document.\n *\n *\t\t     History                             Undo stack                                      Redo stack\n *\t\t=================             ==================================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]                      [ batch Crr ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\t\t[ operation C2' ]\n *\t\t[ operation C1' ]\n *\t\t[ operation C1'r]\n *\t\t[ operation C2'r]\n *\t\t[ operation C3rr]\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Undo extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ UndoEditing, UndoUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Undo';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { isImage } from '../image/utils';\n\n/**\n * The image text alternative command. It is used to change the `alt` attribute of `<image>` elements.\n *\n * @extends module:core/command~Command\n */\nexport default class ImageTextAlternativeCommand extends Command {\n\t/**\n\t * The command value: `false` if there is no `alt` attribute, otherwise the value of the `alt` attribute.\n\t *\n\t * @readonly\n\t * @observable\n\t * @member {String|Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst element = this.editor.model.document.selection.getSelectedElement();\n\n\t\tthis.isEnabled = isImage( element );\n\n\t\tif ( isImage( element ) && element.hasAttribute( 'alt' ) ) {\n\t\t\tthis.value = element.getAttribute( 'alt' );\n\t\t} else {\n\t\t\tthis.value = false;\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options\n\t * @param {String} options.newValue The new value of the `alt` attribute to set.\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\t\tconst imageElement = model.document.selection.getSelectedElement();\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setAttribute( 'alt', options.newValue, imageElement );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativeediting\n */\n\nimport ImageTextAlternativeCommand from './imagetextalternativecommand';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The image text alternative editing plugin.\n *\n * Registers the `'imageTextAlternative'` command.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageTextAlternativeEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageTextAlternativeEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tthis.editor.commands.add( 'imageTextAlternative', new ImageTextAlternativeCommand( this.editor ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagetextalternative/ui/textalternativeformview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LabeledInputView from '@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview';\nimport InputTextView from '@ckeditor/ckeditor5-ui/src/inputtext/inputtextview';\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\nimport '../../../theme/textalternativeform.css';\n/**\n * The TextAlternativeFormView class.\n *\n * @extends module:ui/view~View\n */\nexport default class TextAlternativeFormView extends View {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(locale) {\n        super(locale);\n        const t = this.locale.t;\n        /**\n\t\t * Tracks information about the DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * A textarea with a label.\n\t\t *\n\t\t * @member {module:ui/labeledinput/labeledinputview~LabeledInputView} #labeledTextarea\n\t\t */\n        this.labeledInput = this._createLabeledInputView();\n        /**\n\t\t * A button used to submit the form.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView} #saveButtonView\n\t\t */\n        this.saveButtonView = this._createButton(t('Save'), checkIcon, 'ck-button-save');\n        this.saveButtonView.type = 'submit';\n        /**\n\t\t * A button used to cancel the form.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView} #cancelButtonView\n\t\t */\n        this.cancelButtonView = this._createButton(t('Cancel'), cancelIcon, 'ck-button-cancel', 'cancel');\n        /**\n\t\t * A collection of views which can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this._focusables = new ViewCollection();\n        /**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-text-alternative-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-image/issues/40\n                tabindex: '-1'\n            },\n            children: [\n                this.labeledInput,\n                this.saveButtonView,\n                this.cancelButtonView\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        this.keystrokes.listenTo(this.element);\n        submitHandler({ view: this });\n        [\n            this.labeledInput,\n            this.saveButtonView,\n            this.cancelButtonView\n        ].forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n    }\n    /**\n\t * Creates the button view.\n\t *\n\t * @private\n\t * @param {String} label The button label\n\t * @param {String} icon The button's icon.\n\t * @param {String} className The additional button CSS class name.\n\t * @param {String} [eventName] The event name that the ButtonView#execute event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createButton(label, icon, className, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.extendTemplate({ attributes: { class: className } });\n        if (eventName) {\n            button.delegate('execute').to(this, eventName);\n        }\n        return button;\n    }\n    /**\n\t * Creates an input with a label.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledinput/labeledinputview~LabeledInputView}\n\t */\n    _createLabeledInputView() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledInputView(this.locale, InputTextView);\n        labeledInput.label = t('Text alternative');\n        labeledInput.inputView.placeholder = t('Text alternative');\n        return labeledInput;\n    }\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.085 6.22L2.943 4.078a.75.75 0 1 1 1.06-1.06l2.592 2.59A11.094 11.094 0 0 1 10 5.068c4.738 0 8.578 3.101 8.578 5.083 0 1.197-1.401 2.803-3.555 3.887l1.714 1.713a.75.75 0 0 1-.09 1.138.488.488 0 0 1-.15.084.75.75 0 0 1-.821-.16L6.17 7.304c-.258.11-.51.233-.757.365l6.239 6.24-.006.005.78.78c-.388.094-.78.166-1.174.215l-1.11-1.11h.011L4.55 8.197a7.2 7.2 0 0 0-.665.514l-.112.098 4.897 4.897-.005.006 1.276 1.276a10.164 10.164 0 0 1-1.477-.117l-.479-.479-.009.009-4.863-4.863-.022.031a2.563 2.563 0 0 0-.124.2c-.043.077-.08.158-.108.241a.534.534 0 0 0-.028.133.29.29 0 0 0 .008.072.927.927 0 0 0 .082.226c.067.133.145.26.234.379l3.242 3.365.025.01.59.623c-3.265-.918-5.59-3.155-5.59-4.668 0-1.194 1.448-2.838 3.663-3.93zm7.07.531a4.632 4.632 0 0 1 1.108 5.992l.345.344.046-.018a9.313 9.313 0 0 0 2-1.112c.256-.187.5-.392.727-.613.137-.134.27-.277.392-.431.072-.091.141-.185.203-.286.057-.093.107-.19.148-.292a.72.72 0 0 0 .036-.12.29.29 0 0 0 .008-.072.492.492 0 0 0-.028-.133.999.999 0 0 0-.036-.096 2.165 2.165 0 0 0-.071-.145 2.917 2.917 0 0 0-.125-.2 3.592 3.592 0 0 0-.263-.335 5.444 5.444 0 0 0-.53-.523 7.955 7.955 0 0 0-1.054-.768 9.766 9.766 0 0 0-1.879-.891c-.337-.118-.68-.219-1.027-.301zm-2.85.21l-.069.002a.508.508 0 0 0-.254.097.496.496 0 0 0-.104.679.498.498 0 0 0 .326.199l.045.005c.091.003.181.003.272.012a2.45 2.45 0 0 1 2.017 1.513c.024.061.043.125.069.185a.494.494 0 0 0 .45.287h.008a.496.496 0 0 0 .35-.158.482.482 0 0 0 .13-.335.638.638 0 0 0-.048-.219 3.379 3.379 0 0 0-.36-.723 3.438 3.438 0 0 0-2.791-1.543l-.028-.001h-.013z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/ui/utils\n */\n\nimport BalloonPanelView from '@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview';\nimport { getSelectedImageWidget } from '../utils';\n\n/**\n * A helper utility that positions the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} instance\n * with respect to the image in the editor content, if one is selected.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport function repositionContextualBalloon( editor ) {\n\tconst balloon = editor.plugins.get( 'ContextualBalloon' );\n\n\tif ( getSelectedImageWidget( editor.editing.view.document.selection ) ) {\n\t\tconst position = getBalloonPositionData( editor );\n\n\t\tballoon.updatePosition( position );\n\t}\n}\n\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected element in the editor content.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n * @returns {module:utils/dom/position~Options}\n */\nexport function getBalloonPositionData( editor ) {\n\tconst editingView = editor.editing.view;\n\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\n\treturn {\n\t\ttarget: editingView.domConverter.viewToDom( editingView.document.selection.getSelectedElement() ),\n\t\tpositions: [\n\t\t\tdefaultPositions.northArrowSouth,\n\t\t\tdefaultPositions.northArrowSouthWest,\n\t\t\tdefaultPositions.northArrowSouthEast,\n\t\t\tdefaultPositions.southArrowNorth,\n\t\t\tdefaultPositions.southArrowNorthWest,\n\t\t\tdefaultPositions.southArrowNorthEast\n\t\t]\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagetextalternative/imagetextalternativeui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\nimport TextAlternativeFormView from './ui/textalternativeformview';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport textAlternativeIcon from '@ckeditor/ckeditor5-core/theme/icons/low-vision.svg';\nimport {\n    repositionContextualBalloon,\n    getBalloonPositionData\n} from '../image/ui/utils';\nimport { getSelectedImageWidget } from '../image/utils';\n/**\n * The image text alternative UI plugin.\n *\n * The plugin uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageTextAlternativeUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'ImageTextAlternativeUI';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        this._createButton();\n        this._createForm();\n    }\n    /**\n\t * @inheritDoc\n\t */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n        this._form.destroy();\n    }\n    /**\n\t * Creates a button showing the balloon panel for changing the image text alternative and\n\t * registers it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n\t *\n\t * @private\n\t */\n    _createButton() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('imageTextAlternative', locale => {\n            const command = editor.commands.get('imageTextAlternative');\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Change image text alternative'),\n                icon: textAlternativeIcon,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            this.listenTo(view, 'execute', () => this._showForm());\n            return view;\n        });\n    }\n    /**\n\t * Creates the {@link module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n\t * form.\n\t *\n\t * @private\n\t */\n    _createForm() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        /**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n        this._balloon = this.editor.plugins.get('ContextualBalloon');\n        /**\n\t\t * A form containing a textarea and buttons, used to change the `alt` text value.\n\t\t *\n\t\t * @member {module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n\t\t */\n        this._form = new TextAlternativeFormView(editor.locale);\n        // Render the form so its #element is available for clickOutsideHandler.\n        this._form.render();\n        this.listenTo(this._form, 'submit', () => {\n            editor.execute('imageTextAlternative', { newValue: this._form.labeledInput.inputView.element.value });\n            this._hideForm(true);\n        });\n        this.listenTo(this._form, 'cancel', () => {\n            this._hideForm(true);\n        });\n        // Close the form on Esc key press.\n        this._form.keystrokes.set('Esc', (data, cancel) => {\n            this._hideForm(true);\n            cancel();\n        });\n        // Reposition the balloon or hide the form if an image widget is no longer selected.\n        this.listenTo(editor.ui, 'update', () => {\n            if (!getSelectedImageWidget(viewDocument.selection)) {\n                this._hideForm(true);\n            } else if (this._isVisible) {\n                repositionContextualBalloon(editor);\n            }\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: this._form,\n            activator: () => this._isVisible,\n            contextElements: [this._balloon.view.element],\n            callback: () => this._hideForm()\n        });\n    }\n    /**\n\t * Shows the {@link #_form} in the {@link #_balloon}.\n\t *\n\t * @private\n\t */\n    _showForm() {\n        if (this._isVisible) {\n            return;\n        }\n        const editor = this.editor;\n        const command = editor.commands.get('imageTextAlternative');\n        const labeledInput = this._form.labeledInput;\n        if (!this._isInBalloon) {\n            this._balloon.add({\n                view: this._form,\n                position: getBalloonPositionData(editor)\n            });\n        }\n        // Make sure that each time the panel shows up, the field remains in sync with the value of\n        // the command. If the user typed in the input, then canceled the balloon (`labeledInput#value`\n        // stays unaltered) and re-opened it without changing the value of the command, they would see the\n        // old value instead of the actual value of the command.\n        // https://github.com/ckeditor/ckeditor5-image/issues/114\n        labeledInput.value = labeledInput.inputView.element.value = command.value || '';\n        this._form.labeledInput.select();\n    }\n    /**\n\t * Removes the {@link #_form} from the {@link #_balloon}.\n\t *\n\t * @param {Boolean} [focusEditable=false] Controls whether the editing view is focused afterwards.\n\t * @private\n\t */\n    _hideForm(focusEditable) {\n        if (!this._isInBalloon) {\n            return;\n        }\n        // Blur the input element before removing it from DOM to prevent issues in some browsers.\n        // See https://github.com/ckeditor/ckeditor5/issues/1501.\n        if (this._form.focusTracker.isFocused) {\n            this._form.saveButtonView.focus();\n        }\n        this._balloon.remove(this._form);\n        if (focusEditable) {\n            this.editor.editing.view.focus();\n        }\n    }\n    /**\n\t * Returns `true` when the {@link #_form} is the visible view in the {@link #_balloon}.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n    get _isVisible() {\n        return this._balloon.visibleView === this._form;\n    }\n    /**\n\t * Returns `true` when the {@link #_form} is in the {@link #_balloon}.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n    get _isInBalloon() {\n        return this._balloon.hasView(this._form);\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageTextAlternativeEditing from './imagetextalternative/imagetextalternativeediting';\nimport ImageTextAlternativeUI from './imagetextalternative/imagetextalternativeui';\n\n/**\n * The image text alternative plugin.\n *\n * For a detailed overview, check the {@glink features/image#image-styles image styles} documentation.\n *\n * This is a \"glue\" plugin which loads the\n *  {@link module:image/imagetextalternative/imagetextalternativeediting~ImageTextAlternativeEditing}\n * and {@link module:image/imagetextalternative/imagetextalternativeui~ImageTextAlternativeUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageTextAlternative extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageTextAlternativeEditing, ImageTextAlternativeUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageTextAlternative';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageEditing from '../src/image/imageediting';\nimport Widget from '@ckeditor/ckeditor5-widget/src/widget';\nimport ImageTextAlternative from './imagetextalternative';\n\nimport '../theme/image.css';\n\n/**\n * The image plugin.\n *\n * For a detailed overview, check the {@glink features/image image feature} documentation.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n *\n * * {@link module:image/image/imageediting~ImageEditing},\n * * {@link module:image/imagetextalternative~ImageTextAlternative}.\n *\n * Usually, it is used in conjuction with other plugins from this package. See the {@glink api/image package page}\n * for more information.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Image extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageEditing, Widget, ImageTextAlternative ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Image';\n\t}\n}\n\n/**\n * The configuration of the image features. Used by the image features in the `@ckeditor/ckeditor5-image` package.\n *\n * Read more in {@link module:image/image~ImageConfig}.\n *\n * @member {module:image/image~ImageConfig} module:core/editor/editorconfig~EditorConfig#image\n */\n\n/**\n * The configuration of the image features. Used by the image features in the `@ckeditor/ckeditor5-image` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\timage: ... // Image feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface ImageConfig\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/ui/filedialogbuttonview\n */\n\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n\n/**\n * The file dialog button view.\n *\n * This component provides a button that opens the native file selection dialog.\n * It can be used to implement the UI of a file upload feature.\n *\n *\t\tconst view = new FileDialogButtonView( locale );\n *\n *\t\tview.set( {\n *\t\t\tacceptedType: 'image/*',\n *\t\t\tallowMultipleFiles: true\n *\t\t} );\n *\n *\t\tview.buttonView.set( {\n *\t\t\tlabel: t( 'Insert image' ),\n *\t\t\ticon: imageIcon,\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.on( 'done', ( evt, files ) => {\n *\t\t\tfor ( const file of Array.from( files ) ) {\n *\t\t\t\tconsole.log( 'Selected file', file );\n *\t\t\t}\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\nexport default class FileDialogButtonView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The button view of the component.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.buttonView = new ButtonView( locale );\n\n\t\t/**\n\t\t * A hidden `<input>` view used to execute file dialog.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:upload/ui/filedialogbuttonview~FileInputView}\n\t\t */\n\t\tthis._fileInputView = new FileInputView( locale );\n\n\t\t/**\n\t\t * Accepted file types. Can be provided in form of file extensions, media type or one of:\n\t\t * * `audio/*`,\n\t\t * * `video/*`,\n\t\t * * `image/*`.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #acceptedType\n\t\t */\n\t\tthis._fileInputView.bind( 'acceptedType' ).to( this );\n\n\t\t/**\n\t\t * Indicates if multiple files can be selected. Defaults to `true`.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #allowMultipleFiles\n\t\t */\n\t\tthis._fileInputView.bind( 'allowMultipleFiles' ).to( this );\n\n\t\t/**\n\t\t * Fired when file dialog is closed with file selected.\n\t\t *\n\t\t *\t\tview.on( 'done', ( evt, files ) => {\n\t\t *\t\t\tfor ( const file of files ) {\n\t\t *\t\t\t\tconsole.log( 'Selected file', file );\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t * @event done\n\t\t * @param {Array.<File>} files Array of selected files.\n\t\t */\n\t\tthis._fileInputView.delegate( 'done' ).to( this );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-file-dialog-button',\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis.buttonView,\n\t\t\t\tthis._fileInputView\n\t\t\t]\n\t\t} );\n\n\t\tthis.buttonView.on( 'execute', () => {\n\t\t\tthis._fileInputView.open();\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the {@link #buttonView}.\n\t */\n\tfocus() {\n\t\tthis.buttonView.focus();\n\t}\n}\n\n/**\n * The hidden file input view class.\n *\n * @private\n * @extends module:ui/view~View\n */\nclass FileInputView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Accepted file types. Can be provided in form of file extensions, media type or one of:\n\t\t * * `audio/*`,\n\t\t * * `video/*`,\n\t\t * * `image/*`.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #acceptedType\n\t\t */\n\t\tthis.set( 'acceptedType' );\n\n\t\t/**\n\t\t * Indicates if multiple files can be selected. Defaults to `false`.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #allowMultipleFiles\n\t\t */\n\t\tthis.set( 'allowMultipleFiles', false );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'input',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-hidden'\n\t\t\t\t],\n\t\t\t\ttype: 'file',\n\t\t\t\ttabindex: '-1',\n\t\t\t\taccept: bind.to( 'acceptedType' ),\n\t\t\t\tmultiple: bind.to( 'allowMultipleFiles' )\n\t\t\t},\n\n\t\t\ton: {\n\t\t\t\t// Removing from code coverage since we cannot programmatically set input element files.\n\t\t\t\tchange: bind.to( /* istanbul ignore next */ () => {\n\t\t\t\t\tif ( this.element && this.element.files && this.element.files.length ) {\n\t\t\t\t\t\tthis.fire( 'done', this.element.files );\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.element.value = '';\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Opens file dialog.\n\t */\n\topen() {\n\t\tthis.element.click();\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.91 10.54c.26-.23.64-.21.88.03l3.36 3.14 2.23-2.06a.64.64 0 0 1 .87 0l2.52 2.97V4.5H3.2v10.12l3.71-4.08zm10.27-7.51c.6 0 1.09.47 1.09 1.05v11.84c0 .59-.49 1.06-1.09 1.06H2.79c-.6 0-1.09-.47-1.09-1.06V4.08c0-.58.49-1.05 1.1-1.05h14.38zm-5.22 5.56a1.96 1.96 0 1 1 3.4-1.96 1.96 1.96 0 0 1-3.4 1.96z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/utils\n */\n\n/* global fetch, File */\n\n/**\n * Creates a regular expression used to test for image files.\n *\n *\t\tconst imageType = createImageTypeRegExp( [ 'png', 'jpeg', 'svg+xml', 'vnd.microsoft.icon' ] );\n *\n *\t\tconsole.log( 'is supported image', imageType.test( file.type ) );\n *\n * @param {Array.<String>} types\n * @returns {RegExp}\n */\nexport function createImageTypeRegExp( types ) {\n\t// Sanitize the MIME type name which may include: \"+\", \"-\" or \".\".\n\tconst regExpSafeNames = types.map( type => type.replace( '+', '\\\\+' ) );\n\n\treturn new RegExp( `^image\\\\/(${ regExpSafeNames.join( '|' ) })$` );\n}\n\n/**\n * Creates a promise that fetches the image local source (Base64 or blob) and resolves with a `File` object.\n *\n * @param {module:engine/view/element~Element} image Image whose source to fetch.\n * @returns {Promise.<File>} A promise which resolves when an image source is fetched and converted to a `File` instance.\n * It resolves with a `File` object. If there were any errors during file processing, the promise will be rejected.\n */\nexport function fetchLocalImage( image ) {\n\treturn new Promise( ( resolve, reject ) => {\n\t\tconst imageSrc = image.getAttribute( 'src' );\n\n\t\t// Fetch works asynchronously and so does not block browser UI when processing data.\n\t\tfetch( imageSrc )\n\t\t\t.then( resource => resource.blob() )\n\t\t\t.then( blob => {\n\t\t\t\tconst mimeType = getImageMimeType( blob, imageSrc );\n\t\t\t\tconst ext = mimeType.replace( 'image/', '' );\n\t\t\t\tconst filename = `image.${ ext }`;\n\t\t\t\tconst file = createFileFromBlob( blob, filename, mimeType );\n\n\t\t\t\tfile ? resolve( file ) : reject();\n\t\t\t} )\n\t\t\t.catch( reject );\n\t} );\n}\n\n/**\n * Checks whether a given node is an image element with a local source (Base64 or blob).\n *\n * @param {module:engine/view/node~Node} node The node to check.\n * @returns {Boolean}\n */\nexport function isLocalImage( node ) {\n\tif ( !node.is( 'element', 'img' ) || !node.getAttribute( 'src' ) ) {\n\t\treturn false;\n\t}\n\n\treturn node.getAttribute( 'src' ).match( /^data:image\\/\\w+;base64,/g ) ||\n\t\tnode.getAttribute( 'src' ).match( /^blob:/g );\n}\n\n// Extracts an image type based on its blob representation or its source.\n//\n// @param {String} src Image `src` attribute value.\n// @param {Blob} blob Image blob representation.\n// @returns {String}\nfunction getImageMimeType( blob, src ) {\n\tif ( blob.type ) {\n\t\treturn blob.type;\n\t} else if ( src.match( /data:(image\\/\\w+);base64/ ) ) {\n\t\treturn src.match( /data:(image\\/\\w+);base64/ )[ 1 ].toLowerCase();\n\t} else {\n\t\t// Fallback to 'jpeg' as common extension.\n\t\treturn 'image/jpeg';\n\t}\n}\n\n// Creates a `File` instance from the given `Blob` instance using the specified file name.\n//\n// @param {Blob} blob The `Blob` instance from which the file will be created.\n// @param {String} filename The file name used during the file creation.\n// @param {String} mimeType The file MIME type.\n// @returns {File|null} The `File` instance created from the given blob or `null` if `File API` is not available.\nfunction createFileFromBlob( blob, filename, mimeType ) {\n\ttry {\n\t\treturn new File( [ blob ], filename, { type: mimeType } );\n\t} catch ( err ) {\n\t\t// Edge does not support `File` constructor ATM, see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9551546/.\n\t\t// However, the `File` function is present (so cannot be checked with `!window.File` or `typeof File === 'function'`), but\n\t\t// calling it with `new File( ... )` throws an error. This try-catch prevents that. Also when the function will\n\t\t// be implemented correctly in Edge the code will start working without any changes (see #247).\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imageupload/imageuploadui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileDialogButtonView from '@ckeditor/ckeditor5-upload/src/ui/filedialogbuttonview';\nimport imageIcon from '@ckeditor/ckeditor5-core/theme/icons/image.svg';\nimport { createImageTypeRegExp } from './utils';\n/**\n * The image upload button plugin.\n *\n * For a detailed overview, check the {@glink features/image-upload/image-upload Image upload feature} documentation.\n *\n * Adds the `'imageUpload'` button to the {@link module:ui/componentfactory~ComponentFactory UI component factory}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUploadUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Setup `imageUpload` button.\n        editor.ui.componentFactory.add('imageUpload', locale => {\n            const view = new FileDialogButtonView(locale);\n            const command = editor.commands.get('imageUpload');\n            const imageTypes = editor.config.get('image.upload.types');\n            const imageTypesRegExp = createImageTypeRegExp(imageTypes);\n            view.set({\n                acceptedType: imageTypes.map(type => `image/${ type }`).join(','),\n                allowMultipleFiles: true\n            });\n            view.buttonView.set({\n                label: t('Insert image'),\n                icon: imageIcon,\n                tooltip: true\n            });\n            view.buttonView.bind('isEnabled').to(command);\n            view.on('done', (evt, files) => {\n                const imagesToUpload = Array.from(files).filter(file => imageTypesRegExp.test(file.type));\n                if (imagesToUpload.length) {\n                    editor.execute('imageUpload', { file: imagesToUpload });\n                }\n            });\n            return view;\n        });\n    }\n}","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 700 250\\\"><rect rx=\\\"4\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/imageuploadprogress\n */\n\n/* globals setTimeout */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport uploadingPlaceholder from '../../theme/icons/image_placeholder.svg';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\nimport '../../theme/imageuploadprogress.css';\nimport '../../theme/imageuploadicon.css';\nimport '../../theme/imageuploadloader.css';\n\n/**\n * The image upload progress plugin.\n * It shows a placeholder when the image is read from the disk and a progress bar while the image is uploading.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUploadProgress extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The image placeholder that is displayed before real image data can be accessed.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} #placeholder\n\t\t */\n\t\tthis.placeholder = 'data:image/svg+xml;utf8,' + encodeURIComponent( uploadingPlaceholder );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Upload status change - update image's view according to that status.\n\t\teditor.editing.downcastDispatcher.on( 'attribute:uploadStatus:image', ( ...args ) => this.uploadStatusChange( ...args ) );\n\t}\n\n\t/**\n\t * This method is called each time the image `uploadStatus` attribute is changed.\n\t *\n\t * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n\t */\n\tuploadStatusChange( evt, data, conversionApi ) {\n\t\tconst editor = this.editor;\n\t\tconst modelImage = data.item;\n\t\tconst uploadId = modelImage.getAttribute( 'uploadId' );\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fileRepository = editor.plugins.get( FileRepository );\n\t\tconst status = uploadId ? data.attributeNewValue : null;\n\t\tconst placeholder = this.placeholder;\n\t\tconst viewFigure = editor.editing.mapper.toViewElement( modelImage );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\tif ( status == 'reading' ) {\n\t\t\t// Start \"appearing\" effect and show placeholder with infinite progress bar on the top\n\t\t\t// while image is read from disk.\n\t\t\t_startAppearEffect( viewFigure, viewWriter );\n\t\t\t_showPlaceholder( placeholder, viewFigure, viewWriter );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Show progress bar on the top of the image when image is uploading.\n\t\tif ( status == 'uploading' ) {\n\t\t\tconst loader = fileRepository.loaders.get( uploadId );\n\n\t\t\t// Start appear effect if needed - see https://github.com/ckeditor/ckeditor5-image/issues/191.\n\t\t\t_startAppearEffect( viewFigure, viewWriter );\n\n\t\t\tif ( !loader ) {\n\t\t\t\t// There is no loader associated with uploadId - this means that image came from external changes.\n\t\t\t\t// In such cases we still want to show the placeholder until image is fully uploaded.\n\t\t\t\t// Show placeholder if needed - see https://github.com/ckeditor/ckeditor5-image/issues/191.\n\t\t\t\t_showPlaceholder( placeholder, viewFigure, viewWriter );\n\t\t\t} else {\n\t\t\t\t// Hide placeholder and initialize progress bar showing upload progress.\n\t\t\t\t_hidePlaceholder( viewFigure, viewWriter );\n\t\t\t\t_showProgressBar( viewFigure, viewWriter, loader, editor.editing.view );\n\t\t\t\t_displayLocalImage( viewFigure, viewWriter, loader );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Because in Edge there is no way to show fancy animation of completeIcon we need to skip it.\n\t\tif ( status == 'complete' && fileRepository.loaders.get( uploadId ) && !env.isEdge ) {\n\t\t\t_showCompleteIcon( viewFigure, viewWriter, editor.editing.view );\n\t\t}\n\n\t\t// Clean up.\n\t\t_hideProgressBar( viewFigure, viewWriter );\n\t\t_hidePlaceholder( viewFigure, viewWriter );\n\t\t_stopAppearEffect( viewFigure, viewWriter );\n\t}\n}\n\n// Adds ck-appear class to the image figure if one is not already applied.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _startAppearEffect( viewFigure, writer ) {\n\tif ( !viewFigure.hasClass( 'ck-appear' ) ) {\n\t\twriter.addClass( 'ck-appear', viewFigure );\n\t}\n}\n\n// Removes ck-appear class to the image figure if one is not already removed.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _stopAppearEffect( viewFigure, writer ) {\n\twriter.removeClass( 'ck-appear', viewFigure );\n}\n\n// Shows placeholder together with infinite progress bar on given image figure.\n//\n// @param {String} Data-uri with a svg placeholder.\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _showPlaceholder( placeholder, viewFigure, writer ) {\n\tif ( !viewFigure.hasClass( 'ck-image-upload-placeholder' ) ) {\n\t\twriter.addClass( 'ck-image-upload-placeholder', viewFigure );\n\t}\n\n\tconst viewImg = viewFigure.getChild( 0 );\n\n\tif ( viewImg.getAttribute( 'src' ) !== placeholder ) {\n\t\twriter.setAttribute( 'src', placeholder, viewImg );\n\t}\n\n\tif ( !_getUIElement( viewFigure, 'placeholder' ) ) {\n\t\twriter.insert( writer.createPositionAfter( viewImg ), _createPlaceholder( writer ) );\n\t}\n}\n\n// Removes placeholder together with infinite progress bar on given image figure.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _hidePlaceholder( viewFigure, writer ) {\n\tif ( viewFigure.hasClass( 'ck-image-upload-placeholder' ) ) {\n\t\twriter.removeClass( 'ck-image-upload-placeholder', viewFigure );\n\t}\n\n\t_removeUIElement( viewFigure, writer, 'placeholder' );\n}\n\n// Shows progress bar displaying upload progress.\n// Attaches it to the file loader to update when upload percentace is changed.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:upload/filerepository~FileLoader} loader\n// @param {module:engine/view/view~View} view\nfunction _showProgressBar( viewFigure, writer, loader, view ) {\n\tconst progressBar = _createProgressBar( writer );\n\twriter.insert( writer.createPositionAt( viewFigure, 'end' ), progressBar );\n\n\t// Update progress bar width when uploadedPercent is changed.\n\tloader.on( 'change:uploadedPercent', ( evt, name, value ) => {\n\t\tview.change( writer => {\n\t\t\twriter.setStyle( 'width', value + '%', progressBar );\n\t\t} );\n\t} );\n}\n\n// Hides upload progress bar.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _hideProgressBar( viewFigure, writer ) {\n\t_removeUIElement( viewFigure, writer, 'progressBar' );\n}\n\n// Shows complete icon and hides after a certain amount of time.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/view~View} view\nfunction _showCompleteIcon( viewFigure, writer, view ) {\n\tconst completeIcon = writer.createUIElement( 'div', { class: 'ck-image-upload-complete-icon' } );\n\n\twriter.insert( writer.createPositionAt( viewFigure, 'end' ), completeIcon );\n\n\tsetTimeout( () => {\n\t\tview.change( writer => writer.remove( writer.createRangeOn( completeIcon ) ) );\n\t}, 3000 );\n}\n\n// Create progress bar element using {@link module:engine/view/uielement~UIElement}.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/uielement~UIElement}\nfunction _createProgressBar( writer ) {\n\tconst progressBar = writer.createUIElement( 'div', { class: 'ck-progress-bar' } );\n\n\twriter.setCustomProperty( 'progressBar', true, progressBar );\n\n\treturn progressBar;\n}\n\n// Create placeholder element using {@link module:engine/view/uielement~UIElement}.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/uielement~UIElement}\nfunction _createPlaceholder( writer ) {\n\tconst placeholder = writer.createUIElement( 'div', { class: 'ck-upload-placeholder-loader' } );\n\n\twriter.setCustomProperty( 'placeholder', true, placeholder );\n\n\treturn placeholder;\n}\n\n// Returns {@link module:engine/view/uielement~UIElement} of given unique property from image figure element.\n// Returns `undefined` if element is not found.\n//\n// @private\n// @param {module:engine/view/element~Element} imageFigure\n// @param {String} uniqueProperty\n// @returns {module:engine/view/uielement~UIElement|undefined}\nfunction _getUIElement( imageFigure, uniqueProperty ) {\n\tfor ( const child of imageFigure.getChildren() ) {\n\t\tif ( child.getCustomProperty( uniqueProperty ) ) {\n\t\t\treturn child;\n\t\t}\n\t}\n}\n\n// Removes {@link module:engine/view/uielement~UIElement} of given unique property from image figure element.\n//\n// @private\n// @param {module:engine/view/element~Element} imageFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {String} uniqueProperty\nfunction _removeUIElement( viewFigure, writer, uniqueProperty ) {\n\tconst element = _getUIElement( viewFigure, uniqueProperty );\n\n\tif ( element ) {\n\t\twriter.remove( writer.createRangeOn( element ) );\n\t}\n}\n\n// Displays local data from file loader.\n//\n// @param {module:engine/view/element~Element} imageFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:upload/filerepository~FileLoader} loader\nfunction _displayLocalImage( viewFigure, writer, loader ) {\n\tif ( loader.data ) {\n\t\tconst viewImg = viewFigure.getChild( 0 );\n\n\t\twriter.setAttribute( 'src', loader.data, viewImg );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { insertImage, isImageAllowed } from '../image/utils';\n\n/**\n * @module image/imageupload/imageuploadcommand\n */\n\n/**\n * The image upload command.\n *\n * The command is registered by the {@link module:image/imageupload/imageuploadediting~ImageUploadEditing} plugin as `'imageUpload'`.\n *\n * In order to upload an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionPosition} algorithm),\n * execute the command and pass the native image file instance:\n *\n *\t\tthis.listenTo( editor.editing.view.document, 'clipboardInput', ( evt, data ) => {\n *\t\t\t// Assuming that only images were pasted:\n *\t\t\tconst images = Array.from( data.dataTransfer.files );\n *\n *\t\t\t// Upload the first image:\n *\t\t\teditor.execute( 'imageUpload', { file: images[ 0 ] } );\n *\t\t} );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'imageUpload', {\n *\t\t\tfile: [\n *\t\t\t\tfile1,\n *\t\t\t\tfile2\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\nexport default class ImageUploadCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = isImageAllowed( this.editor.model );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options Options for the executed command.\n\t * @param {File|Array.<File>} options.file The image file or an array of image files to upload.\n\t */\n\texecute( options ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tconst fileRepository = editor.plugins.get( FileRepository );\n\n\t\tmodel.change( writer => {\n\t\t\tconst filesToUpload = Array.isArray( options.file ) ? options.file : [ options.file ];\n\n\t\t\tfor ( const file of filesToUpload ) {\n\t\t\t\tuploadImage( writer, model, fileRepository, file );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Handles uploading single file.\n//\n// @param {module:engine/model/writer~writer} writer\n// @param {module:engine/model/model~Model} model\n// @param {File} file\nfunction uploadImage( writer, model, fileRepository, file ) {\n\tconst loader = fileRepository.createLoader( file );\n\n\t// Do not throw when upload adapter is not set. FileRepository will log an error anyway.\n\tif ( !loader ) {\n\t\treturn;\n\t}\n\n\tinsertImage( writer, model, { uploadId: loader.id } );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imageupload/imageuploadediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport Notification from '@ckeditor/ckeditor5-ui/src/notification/notification';\nimport Clipboard from '@ckeditor/ckeditor5-clipboard/src/clipboard';\nimport UpcastWriter from '@ckeditor/ckeditor5-engine/src/view/upcastwriter';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\nimport ImageUploadCommand from '../../src/imageupload/imageuploadcommand';\nimport {\n    fetchLocalImage,\n    isLocalImage\n} from '../../src/imageupload/utils';\nimport { createImageTypeRegExp } from './utils';\n/**\n * The editing part of the image upload feature. It registers the `'imageUpload'` command.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUploadEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [\n            FileRepository,\n            Notification,\n            Clipboard\n        ];\n    }\n    static get pluginName() {\n        return 'ImageUploadEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('image', {\n            upload: {\n                types: [\n                    'jpeg',\n                    'png',\n                    'gif',\n                    'bmp',\n                    'webp',\n                    'tiff'\n                ]\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const doc = editor.model.document;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const fileRepository = editor.plugins.get(FileRepository);\n        const imageTypes = createImageTypeRegExp(editor.config.get('image.upload.types'));\n        // Setup schema to allow uploadId and uploadStatus for images.\n        schema.extend('image', {\n            allowAttributes: [\n                'uploadId',\n                'uploadStatus'\n            ]\n        });\n        // Register imageUpload command.\n        editor.commands.add('imageUpload', new ImageUploadCommand(editor));\n        // Register upcast converter for uploadId.\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'img',\n                key: 'uploadId'\n            },\n            model: 'uploadId'\n        });\n        // Handle pasted images.\n        // For every image file, a new file loader is created and a placeholder image is\n        // inserted into the content. Then, those images are uploaded once they appear in the model\n        // (see Document#change listener below).\n        this.listenTo(editor.editing.view.document, 'clipboardInput', (evt, data) => {\n            // Skip if non empty HTML data is included.\n            // https://github.com/ckeditor/ckeditor5-upload/issues/68\n            if (isHtmlIncluded(data.dataTransfer)) {\n                return;\n            }\n            const images = Array.from(data.dataTransfer.files).filter(file => {\n                // See https://github.com/ckeditor/ckeditor5-image/pull/254.\n                if (!file) {\n                    return false;\n                }\n                return imageTypes.test(file.type);\n            });\n            const ranges = data.targetRanges.map(viewRange => editor.editing.mapper.toModelRange(viewRange));\n            editor.model.change(writer => {\n                // Set selection to paste target.\n                writer.setSelection(ranges);\n                if (images.length) {\n                    evt.stop();\n                    // Upload images after the selection has changed in order to ensure the command's state is refreshed.\n                    editor.model.enqueueChange('default', () => {\n                        editor.execute('imageUpload', { file: images });\n                    });\n                }\n            });\n        });\n        // Handle HTML pasted with images with base64 or blob sources.\n        // For every image file, a new file loader is created and a placeholder image is\n        // inserted into the content. Then, those images are uploaded once they appear in the model\n        // (see Document#change listener below).\n        this.listenTo(editor.plugins.get(Clipboard), 'inputTransformation', (evt, data) => {\n            const fetchableImages = Array.from(editor.editing.view.createRangeIn(data.content)).filter(value => isLocalImage(value.item) && !value.item.getAttribute('uploadProcessed')).map(value => {\n                return {\n                    promise: fetchLocalImage(value.item),\n                    imageElement: value.item\n                };\n            });\n            if (!fetchableImages.length) {\n                return;\n            }\n            const writer = new UpcastWriter();\n            for (const fetchableImage of fetchableImages) {\n                // Set attribute marking that the image was processed already.\n                writer.setAttribute('uploadProcessed', true, fetchableImage.imageElement);\n                const loader = fileRepository.createLoader(fetchableImage.promise);\n                if (loader) {\n                    writer.setAttribute('src', '', fetchableImage.imageElement);\n                    writer.setAttribute('uploadId', loader.id, fetchableImage.imageElement);\n                }\n            }\n        });\n        // Prevents from the browser redirecting to the dropped image.\n        editor.editing.view.document.on('dragover', (evt, data) => {\n            data.preventDefault();\n        });\n        // Upload placeholder images that appeared in the model.\n        doc.on('change', () => {\n            const changes = doc.differ.getChanges({ includeChangesInGraveyard: true });\n            for (const entry of changes) {\n                if (entry.type == 'insert' && entry.name != '$text') {\n                    const item = entry.position.nodeAfter;\n                    const isInGraveyard = entry.position.root.rootName == '$graveyard';\n                    for (const image of getImagesFromChangeItem(editor, item)) {\n                        // Check if the image element still has upload id.\n                        const uploadId = image.getAttribute('uploadId');\n                        if (!uploadId) {\n                            continue;\n                        }\n                        // Check if the image is loaded on this client.\n                        const loader = fileRepository.loaders.get(uploadId);\n                        if (!loader) {\n                            continue;\n                        }\n                        if (isInGraveyard) {\n                            // If the image was inserted to the graveyard - abort the loading process.\n                            loader.abort();\n                        } else if (loader.status == 'idle') {\n                            // If the image was inserted into content and has not been loaded yet, start loading it.\n                            this._readAndUpload(loader, image);\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * Reads and uploads an image.\n\t *\n\t * The image is read from the disk and as a Base64-encoded string it is set temporarily to\n\t * `image[src]`. When the image is successfully uploaded, the temporary data is replaced with the target\n\t * image's URL (the URL to the uploaded image on the server).\n\t *\n\t * @protected\n\t * @param {module:upload/filerepository~FileLoader} loader\n\t * @param {module:engine/model/element~Element} imageElement\n\t * @returns {Promise}\n\t */\n    _readAndUpload(loader, imageElement) {\n        const editor = this.editor;\n        const model = editor.model;\n        const t = editor.locale.t;\n        const fileRepository = editor.plugins.get(FileRepository);\n        const notification = editor.plugins.get(Notification);\n        model.enqueueChange('transparent', writer => {\n            writer.setAttribute('uploadStatus', 'reading', imageElement);\n        });\n        return loader.read().then(() => {\n            const promise = loader.upload();\n            // Force re–paint in Safari. Without it, the image will display with a wrong size.\n            // https://github.com/ckeditor/ckeditor5/issues/1975\n            /* istanbul ignore next */\n            if (env.isSafari) {\n                const viewFigure = editor.editing.mapper.toViewElement(imageElement);\n                const viewImg = viewFigure.getChild(0);\n                editor.editing.view.once('render', () => {\n                    // Early returns just to be safe. There might be some code ran\n                    // in between the outer scope and this callback.\n                    if (!viewImg.parent) {\n                        return;\n                    }\n                    const domFigure = editor.editing.view.domConverter.mapViewToDom(viewImg.parent);\n                    if (!domFigure) {\n                        return;\n                    }\n                    const originalDisplay = domFigure.style.display;\n                    domFigure.style.display = 'none';\n                    // Make sure this line will never be removed during minification for having \"no effect\".\n                    domFigure._ckHack = domFigure.offsetHeight;\n                    domFigure.style.display = originalDisplay;\n                });\n            }\n            model.enqueueChange('transparent', writer => {\n                writer.setAttribute('uploadStatus', 'uploading', imageElement);\n            });\n            return promise;\n        }).then(data => {\n            model.enqueueChange('transparent', writer => {\n                writer.setAttributes({\n                    uploadStatus: 'complete',\n                    src: data.default\n                }, imageElement);\n                this._parseAndSetSrcsetAttributeOnImage(data, imageElement, writer);\n            });\n            clean();\n        }).catch(error => {\n            // If status is not 'error' nor 'aborted' - throw error because it means that something else went wrong,\n            // it might be generic error and it would be real pain to find what is going on.\n            if (loader.status !== 'error' && loader.status !== 'aborted') {\n                throw error;\n            }\n            // Might be 'aborted'.\n            if (loader.status == 'error' && error) {\n                notification.showWarning(error, {\n                    title: t('Upload failed'),\n                    namespace: 'upload'\n                });\n            }\n            clean();\n            // Permanently remove image from insertion batch.\n            model.enqueueChange('transparent', writer => {\n                writer.remove(imageElement);\n            });\n        });\n        function clean() {\n            model.enqueueChange('transparent', writer => {\n                writer.removeAttribute('uploadId', imageElement);\n                writer.removeAttribute('uploadStatus', imageElement);\n            });\n            fileRepository.destroyLoader(loader);\n        }\n    }\n    /**\n\t * Creates the `srcset` attribute based on a given file upload response and sets it as an attribute to a specific image element.\n\t *\n\t * @protected\n\t * @param {Object} data Data object from which `srcset` will be created.\n\t * @param {module:engine/model/element~Element} image The image element on which the `srcset` attribute will be set.\n\t * @param {module:engine/model/writer~Writer} writer\n\t */\n    _parseAndSetSrcsetAttributeOnImage(data, image, writer) {\n        // Srcset attribute for responsive images support.\n        let maxWidth = 0;\n        const srcsetAttribute = Object.keys(data)    // Filter out keys that are not integers.\n.filter(key => {\n            const width = parseInt(key, 10);\n            if (!isNaN(width)) {\n                maxWidth = Math.max(maxWidth, width);\n                return true;\n            }\n        })    // Convert each key to srcset entry.\n.map(key => `${ data[key] } ${ key }w`)    // Join all entries.\n.join(', ');\n        if (srcsetAttribute != '') {\n            writer.setAttribute('srcset', {\n                data: srcsetAttribute,\n                width: maxWidth\n            }, image);\n        }\n    }\n}\n// Returns `true` if non-empty `text/html` is included in the data transfer.\n//\n// @param {module:clipboard/datatransfer~DataTransfer} dataTransfer\n// @returns {Boolean}\nexport function isHtmlIncluded(dataTransfer) {\n    return Array.from(dataTransfer.types).includes('text/html') && dataTransfer.getData('text/html') !== '';\n}\nfunction getImagesFromChangeItem(editor, item) {\n    return Array.from(editor.model.createRangeOn(item)).filter(value => value.item.is('image')).map(value => value.item);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageUploadUI from './imageupload/imageuploadui';\nimport ImageUploadProgress from './imageupload/imageuploadprogress';\nimport ImageUploadEditing from './imageupload/imageuploadediting';\n\n/**\n * The image upload plugin.\n *\n * For a detailed overview, check the {@glink features/image-upload/image-upload image upload feature} documentation.\n *\n * This plugin does not do anything directly, but it loads a set of specific plugins to enable image uploading:\n *\n * * {@link module:image/imageupload/imageuploadediting~ImageUploadEditing},\n * * {@link module:image/imageupload/imageuploadui~ImageUploadUI},\n * * {@link module:image/imageupload/imageuploadprogress~ImageUploadProgress}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUpload extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageUpload';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageUploadEditing, ImageUploadUI, ImageUploadProgress ];\n\t}\n}\n\n/**\n * Image upload configuration.\n *\n * @member {module:image/imageupload~ImageUploadConfig} module:image/image~ImageConfig#upload\n */\n\n/**\n * The configuration of the image upload feature. Used by the image upload feature in the `@ckeditor/ckeditor5-image` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\timage: {\n * \t\t\t\t\tupload:  ... // Image upload feature options.\n * \t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface module:image/imageupload~ImageUploadConfig\n */\n\n/**\n * The list of accepted image types.\n *\n * The accepted types of images can be customized to allow only certain types of images:\n *\n *\t\t// Allow only JPEG and PNG images:\n *\t\tconst imageUploadConfig = {\n *\t\t\ttypes: [ 'png', 'jpeg' ]\n *\t\t};\n *\n * The type string should match [one of the sub-types](https://www.iana.org/assignments/media-types/media-types.xhtml#image)\n * of the image MIME type. E.g. for the `image/jpeg` MIME type, add `'jpeg'` to your image upload configuration.\n *\n * **Note:** This setting only restricts some image types to be selected and uploaded through the CKEditor UI and commands. Image type\n * recognition and filtering should also be implemented on the server which accepts image uploads.\n *\n * @member {Array.<String>} module:image/imageupload~ImageUploadConfig#types\n * @default [ 'jpeg', 'png', 'gif', 'bmp', 'webp', 'tiff' ]\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/imageloadobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\n\n/**\n * Observes all new images added to the {@link module:engine/view/document~Document},\n * fires {@link module:engine/view/document~Document#event:imageLoaded} and\n * {@link module:engine/view/document~Document#event:layoutChanged} event every time when the new image\n * has been loaded.\n *\n * **Note:** This event is not fired for images that has been added to the document and rendered as `complete` (already loaded).\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class ImageLoadObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * List of img DOM elements that are observed by this observer.\n\t\t *\n\t\t * @private\n\t\t * @type {Set.<HTMLElement>}\n\t\t */\n\t\tthis._observedElements = new Set();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domRoot, name ) {\n\t\tconst viewRoot = this.document.getRoot( name );\n\n\t\t// When there is a change in one of the view element\n\t\t// we need to check if there are any new `<img/>` elements to observe.\n\t\tviewRoot.on( 'change:children', ( evt, node ) => {\n\t\t\t// Wait for the render to be sure that `<img/>` elements are rendered in the DOM root.\n\t\t\tthis.view.once( 'render', () => this._updateObservedElements( domRoot, node ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Updates the list of observed `<img/>` elements.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot DOM root element.\n\t * @param {module:engine/view/element~Element} viewNode View element where children have changed.\n\t */\n\t_updateObservedElements( domRoot, viewNode ) {\n\t\tif ( !viewNode.is( 'element' ) || viewNode.is( 'attributeElement' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domNode = this.view.domConverter.mapViewToDom( viewNode );\n\n\t\t// If there is no `domNode` it means that it was removed from the DOM in the meanwhile.\n\t\tif ( !domNode ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const domElement of domNode.querySelectorAll( 'img' ) ) {\n\t\t\tif ( !this._observedElements.has( domElement ) ) {\n\t\t\t\tthis.listenTo( domElement, 'load', ( evt, domEvt ) => this._fireEvents( domEvt ) );\n\t\t\t\tthis._observedElements.add( domElement );\n\t\t\t}\n\t\t}\n\n\t\t// Clean up the list of observed elements from elements that has been removed from the root.\n\t\tfor ( const domElement of this._observedElements ) {\n\t\t\tif ( !domRoot.contains( domElement ) ) {\n\t\t\t\tthis.stopListening( domElement );\n\t\t\t\tthis._observedElements.delete( domElement );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fires {@link module:engine/view/document~Document#event:layoutChanged} and\n\t * {@link module:engine/view/document~Document#event:imageLoaded}\n\t * if observer {@link #isEnabled is enabled}.\n\t *\n\t * @protected\n\t * @param {Event} domEvent The DOM event.\n\t */\n\t_fireEvents( domEvent ) {\n\t\tif ( this.isEnabled ) {\n\t\t\tthis.document.fire( 'layoutChanged' );\n\t\t\tthis.document.fire( 'imageLoaded', domEvent );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._observedElements.clear();\n\t\tsuper.destroy();\n\t}\n}\n\n/**\n * Fired when an <img/> DOM element has been loaded in the DOM root.\n *\n * Introduced by {@link module:image/image/imageloadobserver~ImageLoadObserver}.\n *\n * @see module:image/image/imageloadobserver~ImageLoadObserver\n * @event module:engine/view/document~Document#event:imageLoaded\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/converters\n */\n\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * Returns a function that converts the image view representation:\n *\n *\t\t<figure class=\"image\"><img src=\"...\" alt=\"...\"></img></figure>\n *\n * to the model representation:\n *\n *\t\t<image src=\"...\" alt=\"...\"></image>\n *\n * The entire content of the `<figure>` element except the first `<img>` is being converted as children\n * of the `<image>` model element.\n *\n * @returns {Function}\n */\nexport function viewFigureToModel() {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'element:figure', converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\t// Do not convert if this is not an \"image figure\".\n\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: true, classes: 'image' } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find an image element inside the figure element.\n\t\tconst viewImage = Array.from( data.viewItem.getChildren() ).find( viewChild => viewChild.is( 'img' ) );\n\n\t\t// Do not convert if image element is absent, is missing src attribute or was already converted.\n\t\tif ( !viewImage || !viewImage.hasAttribute( 'src' ) || !conversionApi.consumable.test( viewImage, { name: true } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert view image to model image.\n\t\tconst conversionResult = conversionApi.convertItem( viewImage, data.modelCursor );\n\n\t\t// Get image element from conversion result.\n\t\tconst modelImage = first( conversionResult.modelRange.getItems() );\n\n\t\t// When image wasn't successfully converted then finish conversion.\n\t\tif ( !modelImage ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert rest of the figure element's children as an image children.\n\t\tconversionApi.convertChildren( data.viewItem, conversionApi.writer.createPositionAt( modelImage, 0 ) );\n\n\t\t// Set image range as conversion result.\n\t\tdata.modelRange = conversionResult.modelRange;\n\n\t\t// Continue conversion where image conversion ends.\n\t\tdata.modelCursor = conversionResult.modelCursor;\n\t}\n}\n\n/**\n * Converter used to convert the `srcset` model image attribute to the `srcset`, `sizes` and `width` attributes in the view.\n *\n * @returns {Function}\n */\nexport function srcsetAttributeConverter() {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'attribute:srcset:image', converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst writer = conversionApi.writer;\n\t\tconst figure = conversionApi.mapper.toViewElement( data.item );\n\t\tconst img = figure.getChild( 0 );\n\n\t\tif ( data.attributeNewValue === null ) {\n\t\t\tconst srcset = data.attributeOldValue;\n\n\t\t\tif ( srcset.data ) {\n\t\t\t\twriter.removeAttribute( 'srcset', img );\n\t\t\t\twriter.removeAttribute( 'sizes', img );\n\n\t\t\t\tif ( srcset.width ) {\n\t\t\t\t\twriter.removeAttribute( 'width', img );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst srcset = data.attributeNewValue;\n\n\t\t\tif ( srcset.data ) {\n\t\t\t\twriter.setAttribute( 'srcset', srcset.data, img );\n\t\t\t\t// Always outputting `100vw`. See https://github.com/ckeditor/ckeditor5-image/issues/2.\n\t\t\t\twriter.setAttribute( 'sizes', '100vw', img );\n\n\t\t\t\tif ( srcset.width ) {\n\t\t\t\t\twriter.setAttribute( 'width', srcset.width, img );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function modelToViewAttributeConverter( attributeKey ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( `attribute:${ attributeKey }:image`, converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst figure = conversionApi.mapper.toViewElement( data.item );\n\t\tconst img = figure.getChild( 0 );\n\n\t\tif ( data.attributeNewValue !== null ) {\n\t\t\tviewWriter.setAttribute( data.attributeKey, data.attributeNewValue, img );\n\t\t} else {\n\t\t\tviewWriter.removeAttribute( data.attributeKey, img );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { insertImage, isImageAllowed } from './utils';\n\n/**\n * @module image/image/imageinsertcommand\n */\n\n/**\n * Insert image command.\n *\n * The command is registered by the {@link module:image/image/imageediting~ImageEditing} plugin as `'imageInsert'`.\n *\n * In order to insert an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionPosition} algorithm),\n * execute the command and specify the image source:\n *\n *\t\teditor.execute( 'imageInsert', { source: 'http://url.to.the/image' } );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'imageInsert', {\n *\t\t\tsource:  [\n *\t\t\t\t'path/to/image.jpg',\n *\t\t\t\t'path/to/other-image.jpg'\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\nexport default class ImageInsertCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = isImageAllowed( this.editor.model );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options Options for the executed command.\n\t * @param {String|Array.<String>} options.source The image source or an array of image sources to insert.\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\n\t\tmodel.change( writer => {\n\t\t\tconst sources = Array.isArray( options.source ) ? options.source : [ options.source ];\n\n\t\t\tfor ( const src of sources ) {\n\t\t\t\tinsertImage( writer, model, { src } );\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/image/imageediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageLoadObserver from './imageloadobserver';\nimport {\n    viewFigureToModel,\n    modelToViewAttributeConverter,\n    srcsetAttributeConverter\n} from './converters';\nimport { toImageWidget } from './utils';\nimport ImageInsertCommand from './imageinsertcommand';\n/**\n * The image engine plugin.\n *\n * It registers:\n *\n * * `<image>` as a block element in the document schema, and allows `alt`, `src` and `srcset` attributes.\n * * converters for editing and data pipelines.\n * * `'imageInsert'` command.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'ImageEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.t;\n        const conversion = editor.conversion;\n        // See https://github.com/ckeditor/ckeditor5-image/issues/142.\n        editor.editing.view.addObserver(ImageLoadObserver);\n        // Configure schema.\n        schema.register('image', {\n            isObject: true,\n            isBlock: true,\n            allowWhere: '$block',\n            allowAttributes: [\n                'alt',\n                'src',\n                'srcset'\n            ]\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'image',\n            view: (modelElement, viewWriter) => createImageViewElement(viewWriter)\n        });\n        conversion.for('editingDowncast').elementToElement({\n            model: 'image',\n            view: (modelElement, viewWriter) => toImageWidget(createImageViewElement(viewWriter), viewWriter, t('image widget'))\n        });\n        conversion.for('downcast').add(modelToViewAttributeConverter('src')).add(modelToViewAttributeConverter('alt')).add(srcsetAttributeConverter());\n        conversion.for('upcast').elementToElement({\n            view: {\n                name: 'img',\n                attributes: { src: true }\n            },\n            model: (viewImage, modelWriter) => modelWriter.createElement('image', { src: viewImage.getAttribute('src') })\n        }).attributeToAttribute({\n            view: {\n                name: 'img',\n                key: 'alt'\n            },\n            model: 'alt'\n        }).attributeToAttribute({\n            view: {\n                name: 'img',\n                key: 'srcset'\n            },\n            model: {\n                key: 'srcset',\n                value: viewImage => {\n                    const value = { data: viewImage.getAttribute('srcset') };\n                    if (viewImage.hasAttribute('width')) {\n                        value.width = viewImage.getAttribute('width');\n                    }\n                    return value;\n                }\n            }\n        }).add(viewFigureToModel());\n        // Register imageUpload command.\n        editor.commands.add('imageInsert', new ImageInsertCommand(editor));\n    }\n}\n// Creates a view element representing the image.\n//\n//\t\t<figure class=\"image\"><img></img></figure>\n//\n// Note that `alt` and `src` attributes are converted separately, so they are not included.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/containerelement~ContainerElement}\nexport function createImageViewElement(writer) {\n    const emptyElement = writer.createEmptyElement('img');\n    const figure = writer.createContainerElement('figure', { class: 'image' });\n    writer.insert(writer.createPositionAt(figure, 0), emptyElement);\n    return figure;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/findlinkrange\n */\n\n/**\n * Returns a range containing the entire link in which the given `position` is placed.\n *\n * It can be used e.g. to get the entire range on which the `linkHref` attribute needs to be changed when having a\n * selection inside a link.\n *\n * @param {module:engine/model/position~Position} position The start position.\n * @param {String} value The `linkHref` attribute value.\n * @returns {module:engine/model/range~Range} The link range.\n */\nexport default function findLinkRange( position, value, model ) {\n\treturn model.createRange( _findBound( position, value, true, model ), _findBound( position, value, false, model ) );\n}\n\n// Walks forward or backward (depends on the `lookBack` flag), node by node, as long as they have the same `linkHref` attribute value\n// and returns a position just before or after (depends on the `lookBack` flag) the last matched node.\n//\n// @param {module:engine/model/position~Position} position The start position.\n// @param {String} value The `linkHref` attribute value.\n// @param {Boolean} lookBack Whether the walk direction is forward (`false`) or backward (`true`).\n// @returns {module:engine/model/position~Position} The position just before the last matched node.\nfunction _findBound( position, value, lookBack, model ) {\n\t// Get node before or after position (depends on `lookBack` flag).\n\t// When position is inside text node then start searching from text node.\n\tlet node = position.textNode || ( lookBack ? position.nodeBefore : position.nodeAfter );\n\n\tlet lastNode = null;\n\n\twhile ( node && node.getAttribute( 'linkHref' ) == value ) {\n\t\tlastNode = node;\n\t\tnode = lookBack ? node.previousSibling : node.nextSibling;\n\t}\n\n\treturn lastNode ? model.createPositionAt( lastNode, lookBack ? 'before' : 'after' ) : position;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport findLinkRange from './findlinkrange';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\n\n/**\n * The link command. It is used by the {@link module:link/link~Link link feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class LinkCommand extends Command {\n\t/**\n\t * The value of the `'linkHref'` attribute if the start of the selection is located in a node with this attribute.\n\t *\n\t * @observable\n\t * @readonly\n\t * @member {Object|undefined} #value\n\t */\n\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * A collection of {@link module:link/utils~ManualDecorator manual decorators}\n\t\t * corresponding to the {@link module:link/link~LinkConfig#decorators decorator configuration}.\n\t\t *\n\t\t * You can consider it a model with states of manual decorators added to the currently selected link.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils/collection~Collection}\n\t\t */\n\t\tthis.manualDecorators = new Collection();\n\t}\n\n\t/**\n\t * Synchronizes the state of {@link #manualDecorators} with the currently present elements in the model.\n\t */\n\trestoreManualDecoratorStates() {\n\t\tfor ( const manualDecorator of this.manualDecorators ) {\n\t\t\tmanualDecorator.value = this._getDecoratorStateFromModel( manualDecorator.id );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.value = doc.selection.getAttribute( 'linkHref' );\n\n\t\tfor ( const manualDecorator of this.manualDecorators ) {\n\t\t\tmanualDecorator.value = this._getDecoratorStateFromModel( manualDecorator.id );\n\t\t}\n\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, 'linkHref' );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is non-collapsed, the `linkHref` attribute will be applied to nodes inside the selection, but only to\n\t * those nodes where the `linkHref` attribute is allowed (disallowed nodes will be omitted).\n\t *\n\t * When the selection is collapsed and is not inside the text with the `linkHref` attribute, a\n\t * new {@link module:engine/model/text~Text text node} with the `linkHref` attribute will be inserted in place of the caret, but\n\t * only if such element is allowed in this place. The `_data` of the inserted text will equal the `href` parameter.\n\t * The selection will be updated to wrap the just inserted text node.\n\t *\n\t * When the selection is collapsed and inside the text with the `linkHref` attribute, the attribute value will be updated.\n\t *\n\t * # Decorators and model attribute management\n\t *\n\t * There is an optional argument to this command that applies or removes model\n\t * {@glink framework/guides/architecture/editing-engine#text-attributes text attributes} brought by\n\t * {@link module:link/utils~ManualDecorator manual link decorators}.\n\t *\n\t * Text attribute names in the model correspond to the entries in the {@link module:link/link~LinkConfig#decorators configuration}.\n\t * For every decorator configured, a model text attribute exists with the \"link\" prefix. For example, a `'linkMyDecorator'` attribute\n\t * corresponds to `'myDecorator'` in the configuration.\n\t *\n\t * To learn more about link decorators, check out the {@link module:link/link~LinkConfig#decorators `config.link.decorators`}\n\t * documentation.\n\t *\n\t * Here is how to manage decorator attributes with the link command:\n\t *\n\t *\t\tconst linkCommand = editor.commands.get( 'link' );\n\t *\n\t *\t\t// Adding a new decorator attribute.\n\t *\t\tlinkCommand.execute( 'http://example.com', {\n\t *\t\t\tlinkIsExternal: true\n\t *\t\t} );\n\t *\n\t *\t\t// Removing a decorator attribute from the selection.\n\t *\t\tlinkCommand.execute( 'http://example.com', {\n\t *\t\t\tlinkIsExternal: false\n\t *\t\t} );\n\t *\n\t *\t\t// Adding multiple decorator attributes at the same time.\n\t *\t\tlinkCommand.execute( 'http://example.com', {\n\t *\t\t\tlinkIsExternal: true,\n\t *\t\t\tlinkIsDownloadable: true,\n\t *\t\t} );\n\t *\n\t *\t\t// Removing and adding decorator attributes at the same time.\n\t *\t\tlinkCommand.execute( 'http://example.com', {\n\t *\t\t\tlinkIsExternal: false,\n\t *\t\t\tlinkFoo: true,\n\t *\t\t\tlinkIsDownloadable: false,\n\t *\t\t} );\n\t *\n\t * **Note**: If the decorator attribute name is not specified, its state remains untouched.\n\t *\n\t * **Note**: {@link module:link/unlinkcommand~UnlinkCommand#execute `UnlinkCommand#execute()`} removes all\n\t * decorator attributes.\n\t *\n\t * @fires execute\n\t * @param {String} href Link destination.\n\t * @param {Object} [manualDecoratorIds={}] The information about manual decorator attributes to be applied or removed upon execution.\n\t */\n\texecute( href, manualDecoratorIds = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\t// Stores information about manual decorators to turn them on/off when command is applied.\n\t\tconst truthyManualDecorators = [];\n\t\tconst falsyManualDecorators = [];\n\n\t\tfor ( const name in manualDecoratorIds ) {\n\t\t\tif ( manualDecoratorIds[ name ] ) {\n\t\t\t\ttruthyManualDecorators.push( name );\n\t\t\t} else {\n\t\t\t\tfalsyManualDecorators.push( name );\n\t\t\t}\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\t// If selection is collapsed then update selected link or insert new one at the place of caret.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tconst position = selection.getFirstPosition();\n\n\t\t\t\t// When selection is inside text with `linkHref` attribute.\n\t\t\t\tif ( selection.hasAttribute( 'linkHref' ) ) {\n\t\t\t\t\t// Then update `linkHref` value.\n\t\t\t\t\tconst linkRange = findLinkRange( position, selection.getAttribute( 'linkHref' ), model );\n\n\t\t\t\t\twriter.setAttribute( 'linkHref', href, linkRange );\n\n\t\t\t\t\ttruthyManualDecorators.forEach( item => {\n\t\t\t\t\t\twriter.setAttribute( item, true, linkRange );\n\t\t\t\t\t} );\n\n\t\t\t\t\tfalsyManualDecorators.forEach( item => {\n\t\t\t\t\t\twriter.removeAttribute( item, linkRange );\n\t\t\t\t\t} );\n\n\t\t\t\t\t// Create new range wrapping changed link.\n\t\t\t\t\twriter.setSelection( linkRange );\n\t\t\t\t}\n\t\t\t\t// If not then insert text node with `linkHref` attribute in place of caret.\n\t\t\t\t// However, since selection in collapsed, attribute value will be used as data for text node.\n\t\t\t\t// So, if `href` is empty, do not create text node.\n\t\t\t\telse if ( href !== '' ) {\n\t\t\t\t\tconst attributes = toMap( selection.getAttributes() );\n\n\t\t\t\t\tattributes.set( 'linkHref', href );\n\n\t\t\t\t\ttruthyManualDecorators.forEach( item => {\n\t\t\t\t\t\tattributes.set( item, true );\n\t\t\t\t\t} );\n\n\t\t\t\t\tconst node = writer.createText( href, attributes );\n\n\t\t\t\t\tmodel.insertContent( node, position );\n\n\t\t\t\t\t// Create new range wrapping created node.\n\t\t\t\t\twriter.setSelection( writer.createRangeOn( node ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If selection has non-collapsed ranges, we change attribute on nodes inside those ranges\n\t\t\t\t// omitting nodes where `linkHref` attribute is disallowed.\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), 'linkHref' );\n\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\twriter.setAttribute( 'linkHref', href, range );\n\n\t\t\t\t\ttruthyManualDecorators.forEach( item => {\n\t\t\t\t\t\twriter.setAttribute( item, true, range );\n\t\t\t\t\t} );\n\n\t\t\t\t\tfalsyManualDecorators.forEach( item => {\n\t\t\t\t\t\twriter.removeAttribute( item, range );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Provides information whether a decorator with a given name is present in the currently processed selection.\n\t *\n\t * @private\n\t * @param {String} decoratorName The name of the manual decorator used in the model\n\t * @returns {Boolean} The information whether a given decorator is currently present in the selection.\n\t */\n\t_getDecoratorStateFromModel( decoratorName ) {\n\t\tconst doc = this.editor.model.document;\n\t\treturn doc.selection.getAttribute( decoratorName ) || false;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/unlinkcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport findLinkRange from './findlinkrange';\n\n/**\n * The unlink command. It is used by the {@link module:link/link~Link link plugin}.\n *\n * @extends module:core/command~Command\n */\nexport default class UnlinkCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this.editor.model.document.selection.hasAttribute( 'linkHref' );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is collapsed, it removes the `linkHref` attribute from each node with the same `linkHref` attribute value.\n\t * When the selection is non-collapsed, it removes the `linkHref` attribute from each node in selected ranges.\n\t *\n\t * # Decorators\n\t *\n\t * If {@link module:link/link~LinkConfig#decorators `config.link.decorators`} is specified,\n\t * all configured decorators are removed together with the `linkHref` attribute.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst editor = this.editor;\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\n\t\tmodel.change( writer => {\n\t\t\t// Get ranges to unlink.\n\t\t\tconst rangesToUnlink = selection.isCollapsed ?\n\t\t\t\t[ findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ), model ) ] : selection.getRanges();\n\n\t\t\t// Remove `linkHref` attribute from specified ranges.\n\t\t\tfor ( const range of rangesToUnlink ) {\n\t\t\t\twriter.removeAttribute( 'linkHref', range );\n\t\t\t\t// If there are registered custom attributes, then remove them during unlink.\n\t\t\t\tif ( linkCommand ) {\n\t\t\t\t\tfor ( const manualDecorator of linkCommand.manualDecorators ) {\n\t\t\t\t\t\twriter.removeAttribute( manualDecorator.id, range );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/utils\n */\n\n/**\n * Helper class that ties together all {@link module:link/link~LinkDecoratorAutomaticDefinition} and provides\n * a {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement downcast dispatcher} for them.\n */\nexport default class AutomaticDecorators {\n\tconstructor() {\n\t\t/**\n\t\t * Stores the definition of {@link module:link/link~LinkDecoratorAutomaticDefinition automatic decorators}.\n\t\t * This data is used as a source for a downcast dispatcher to create a proper conversion to output data.\n\t\t *\n\t\t * @private\n\t\t * @type {Set}\n\t\t */\n\t\tthis._definitions = new Set();\n\t}\n\n\t/**\n\t * Gives information about the number of decorators stored in the {@link module:link/utils~AutomaticDecorators} instance.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._definitions.size;\n\t}\n\n\t/**\n\t * Adds automatic decorator objects or an array with them to be used during downcasting.\n\t *\n\t * @param {module:link/link~LinkDecoratorAutomaticDefinition|Array.<module:link/link~LinkDecoratorAutomaticDefinition>} item\n\t * A configuration object of automatic rules for decorating links. It might also be an array of such objects.\n\t */\n\tadd( item ) {\n\t\tif ( Array.isArray( item ) ) {\n\t\t\titem.forEach( item => this._definitions.add( item ) );\n\t\t} else {\n\t\t\tthis._definitions.add( item );\n\t\t}\n\t}\n\n\t/**\n\t * Provides the conversion helper used in the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add} method.\n\t *\n\t * @returns {Function} A dispatcher function used as conversion helper\n\t * in {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add}.\n\t */\n\tgetDispatcher() {\n\t\treturn dispatcher => {\n\t\t\tdispatcher.on( 'attribute:linkHref', ( evt, data, conversionApi ) => {\n\t\t\t\t// There is only test as this behavior decorates links and\n\t\t\t\t// it is run before dispatcher which actually consumes this node.\n\t\t\t\t// This allows on writing own dispatcher with highest priority,\n\t\t\t\t// which blocks both native converter and this additional decoration.\n\t\t\t\tif ( !conversionApi.consumable.test( data.item, 'attribute:linkHref' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\t\t\tfor ( const item of this._definitions ) {\n\t\t\t\t\tconst viewElement = viewWriter.createAttributeElement( 'a', item.attributes, {\n\t\t\t\t\t\tpriority: 5\n\t\t\t\t\t} );\n\t\t\t\t\tviewWriter.setCustomProperty( 'link', true, viewElement );\n\t\t\t\t\tif ( item.callback( data.attributeNewValue ) ) {\n\t\t\t\t\t\tif ( data.item.is( 'selection' ) ) {\n\t\t\t\t\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), viewElement );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tviewWriter.wrap( conversionApi.mapper.toViewRange( data.range ), viewElement );\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tviewWriter.unwrap( conversionApi.mapper.toViewRange( data.range ), viewElement );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, { priority: 'high' } );\n\t\t};\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/utils\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Helper class that stores manual decorators with observable {@link module:link/utils~ManualDecorator#value}\n * to support integration with the UI state. An instance of this class is a model with the state of individual manual decorators.\n * These decorators are kept as collections in {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class ManualDecorator {\n\t/**\n\t * Creates a new instance of {@link module:link/utils~ManualDecorator}.\n\t *\n\t * @param {Object} config\n\t * @param {String} config.id The name of the attribute used in the model that represents a given manual decorator.\n\t * For example: `'linkIsExternal'`.\n\t * @param {String} config.label The label used in the user interface to toggle the manual decorator.\n\t * @param {Object} config.attributes A set of attributes added to output data when the decorator is active for a specific link.\n\t * Attributes should keep the format of attributes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n\t */\n\tconstructor( { id, label, attributes } ) {\n\t\t/**\n\t\t * An ID of a manual decorator which is the name of the attribute in the model, for example: 'linkManualDecorator0'.\n\t\t *\n\t\t * @type {String}\n\t\t */\n\t\tthis.id = id;\n\n\t\t/**\n\t\t * The value of the current manual decorator. It reflects its state from the UI.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} module:link/utils~ManualDecorator#value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * The label used in the user interface to toggle the manual decorator.\n\t\t *\n\t\t * @type {String}\n\t\t */\n\t\tthis.label = label;\n\n\t\t/**\n\t\t * A set of attributes added to downcasted data when the decorator is activated for a specific link.\n\t\t * Attributes should be added in a form of attributes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.attributes = attributes;\n\t}\n}\n\nmix( ManualDecorator, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/utils/bindtwostepcarettoattribute\n */\n\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport priorities from '@ckeditor/ckeditor5-utils/src/priorities';\n\n/**\n * This helper enables the two-step caret (phantom) movement behavior for the given {@link module:engine/model/model~Model}\n * attribute on arrow right (<kbd>→</kbd>) and left (<kbd>←</kbd>) key press.\n *\n * Thanks to this (phantom) caret movement the user is able to type before/after as well as at the\n * beginning/end of an attribute.\n *\n * **Note:** This helper support right–to–left (Arabic, Hebrew, etc.) content by mirroring its behavior\n * but for the sake of simplicity examples showcase only left–to–right use–cases.\n *\n * # Forward movement\n *\n * ## \"Entering\" an attribute:\n *\n * When this behavior is enabled for the `a` attribute and the selection is right before it\n * (at the attribute boundary), pressing the right arrow key will not move the selection but update its\n * attributes accordingly:\n *\n * * When enabled:\n *\n *   \t\tfoo{}<$text a=\"true\">bar</$text>\n *\n *    <kbd>→</kbd>\n *\n *   \t\tfoo<$text a=\"true\">{}bar</$text>\n *\n * * When disabled:\n *\n *   \t\tfoo{}<$text a=\"true\">bar</$text>\n *\n *   <kbd>→</kbd>\n *\n *   \t\tfoo<$text a=\"true\">b{}ar</$text>\n *\n *\n * ## \"Leaving\" an attribute:\n *\n * * When enabled:\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n *    <kbd>→</kbd>\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n * * When disabled:\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n *   <kbd>→</kbd>\n *\n *   \t\t<$text a=\"true\">bar</$text>b{}az\n *\n * # Backward movement\n *\n * * When enabled:\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n *    <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n * * When disabled:\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n *   <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\">ba{}r</$text>b{}az\n *\n * @param {Object} options Helper options.\n * @param {module:engine/view/view~View} options.view View controller instance.\n * @param {module:engine/model/model~Model} options.model Data model instance.\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior should be added\n * (e.g. a plugin instance).\n * @param {String} options.attribute Attribute for which this behavior will be added.\n * @param {module:utils/locale~Locale} options.locale The {@link module:core/editor/editor~Editor#locale} instance.\n */\nexport default function bindTwoStepCaretToAttribute( { view, model, emitter, attribute, locale } ) {\n\tconst twoStepCaretHandler = new TwoStepCaretHandler( model, emitter, attribute );\n\tconst modelSelection = model.document.selection;\n\n\t// Listen to keyboard events and handle the caret movement according to the 2-step caret logic.\n\t//\n\t// Note: This listener has the \"high+1\" priority:\n\t// * \"high\" because of the filler logic implemented in the renderer which also engages on #keydown.\n\t// When the gravity is overridden the attributes of the (model) selection attributes are reset.\n\t// It may end up with the filler kicking in and breaking the selection.\n\t// * \"+1\" because we would like to avoid collisions with other features (like Widgets), which\n\t// take over the keydown events with the \"high\" priority. Two-step caret movement takes precedence\n\t// over Widgets in that matter.\n\t//\n\t// Find out more in https://github.com/ckeditor/ckeditor5-engine/issues/1301.\n\temitter.listenTo( view.document, 'keydown', ( evt, data ) => {\n\t\t// This implementation works only for collapsed selection.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When user tries to expand the selection or jump over the whole word or to the beginning/end then\n\t\t// two-steps movement is not necessary.\n\t\tif ( data.shiftKey || data.altKey || data.ctrlKey ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst arrowRightPressed = data.keyCode == keyCodes.arrowright;\n\t\tconst arrowLeftPressed = data.keyCode == keyCodes.arrowleft;\n\n\t\t// When neither left or right arrow has been pressed then do noting.\n\t\tif ( !arrowRightPressed && !arrowLeftPressed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = modelSelection.getFirstPosition();\n\t\tconst contentDirection = locale.contentLanguageDirection;\n\t\tlet isMovementHandled;\n\n\t\tif ( ( contentDirection === 'ltr' && arrowRightPressed ) || ( contentDirection === 'rtl' && arrowLeftPressed ) ) {\n\t\t\tisMovementHandled = twoStepCaretHandler.handleForwardMovement( position, data );\n\t\t} else {\n\t\t\tisMovementHandled = twoStepCaretHandler.handleBackwardMovement( position, data );\n\t\t}\n\n\t\t// Stop the keydown event if the two-step caret movement handled it. Avoid collisions\n\t\t// with other features which may also take over the caret movement (e.g. Widget).\n\t\tif ( isMovementHandled ) {\n\t\t\tevt.stop();\n\t\t}\n\t}, { priority: priorities.get( 'high' ) + 1 } );\n}\n\n/**\n * This is a protected helper–class for {@link module:engine/utils/bindtwostepcarettoattribute}.\n * It handles the state of the 2-step caret movement for a single {@link module:engine/model/model~Model}\n * attribute upon the `keypress` in the {@link module:engine/view/view~View}.\n *\n * @protected\n */\nexport class TwoStepCaretHandler {\n\t/*\n\t * Creates two step handler instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Data model instance.\n\t * @param {module:utils/dom/emittermixin~Emitter} emitter The emitter to which this behavior should be added\n\t * (e.g. a plugin instance).\n\t * @param {String} attribute Attribute for which the behavior will be added.\n\t */\n\tconstructor( model, emitter, attribute ) {\n\t\t/**\n\t\t * The model instance this class instance operates on.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model#schema}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The Attribute this class instance operates on.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.attribute = attribute;\n\n\t\t/**\n\t\t * A reference to the document selection.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/selection~Selection}\n\t\t */\n\t\tthis._modelSelection = model.document.selection;\n\n\t\t/**\n\t\t * The current UID of the overridden gravity, as returned by\n\t\t * {@link module:engine/model/writer~Writer#overrideSelectionGravity}.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._overrideUid = null;\n\n\t\t/**\n\t\t * A flag indicating that the automatic gravity restoration for this attribute\n\t\t * should not happen upon the next\n\t\t * {@link module:engine/model/selection~Selection#event:change:range} event.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._isNextGravityRestorationSkipped = false;\n\n\t\t// The automatic gravity restoration logic.\n\t\temitter.listenTo( this._modelSelection, 'change:range', ( evt, data ) => {\n\t\t\t// Skipping the automatic restoration is needed if the selection should change\n\t\t\t// but the gravity must remain overridden afterwards. See the #handleBackwardMovement\n\t\t\t// to learn more.\n\t\t\tif ( this._isNextGravityRestorationSkipped ) {\n\t\t\t\tthis._isNextGravityRestorationSkipped = false;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip automatic restore when the gravity is not overridden — simply, there's nothing to restore\n\t\t\t// at this moment.\n\t\t\tif ( !this._isGravityOverridden ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip automatic restore when the change is indirect AND the selection is at the attribute boundary.\n\t\t\t// It means that e.g. if the change was external (collaboration) and the user had their\n\t\t\t// selection around the link, its gravity should remain intact in this change:range event.\n\t\t\tif ( !data.directChange && isAtBoundary( this._modelSelection.getFirstPosition(), attribute ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._restoreGravity();\n\t\t} );\n\t}\n\n\t/**\n\t * Updates the document selection and the view according to the two–step caret movement state\n\t * when moving **forwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.\n\t *\n\t * @param {module:engine/model/position~Position} position The model position at the moment of the key press.\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} data Data of the key press.\n\t * @returns {Boolean} `true` when the handler prevented caret movement\n\t */\n\thandleForwardMovement( position, data ) {\n\t\tconst attribute = this.attribute;\n\n\t\t// DON'T ENGAGE 2-SCM if gravity is already overridden. It means that we just entered\n\t\t//\n\t\t// \t\t<paragraph>foo<$text attribute>{}bar</$text>baz</paragraph>\n\t\t//\n\t\t// or left the attribute\n\t\t//\n\t\t// \t\t<paragraph>foo<$text attribute>bar</$text>{}baz</paragraph>\n\t\t//\n\t\t// and the gravity will be restored automatically.\n\t\tif ( this._isGravityOverridden ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// DON'T ENGAGE 2-SCM when the selection is at the beginning of the block AND already has the\n\t\t// attribute:\n\t\t// * when the selection was initially set there using the mouse,\n\t\t// * when the editor has just started\n\t\t//\n\t\t//\t\t<paragraph><$text attribute>{}bar</$text>baz</paragraph>\n\t\t//\n\t\tif ( position.isAtStart && this._hasSelectionAttribute ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// ENGAGE 2-SCM when about to leave one attribute value and enter another:\n\t\t//\n\t\t// \t\t<paragraph><$text attribute=\"1\">foo{}</$text><$text attribute=\"2\">bar</$text></paragraph>\n\t\t//\n\t\t// but DON'T when already in between of them (no attribute selection):\n\t\t//\n\t\t// \t\t<paragraph><$text attribute=\"1\">foo</$text>{}<$text attribute=\"2\">bar</$text></paragraph>\n\t\t//\n\t\tif ( isBetweenDifferentValues( position, attribute ) && this._hasSelectionAttribute ) {\n\t\t\tthis._preventCaretMovement( data );\n\t\t\tthis._removeSelectionAttribute();\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// ENGAGE 2-SCM when entering an attribute:\n\t\t//\n\t\t// \t\t<paragraph>foo{}<$text attribute>bar</$text>baz</paragraph>\n\t\t//\n\t\tif ( isAtStartBoundary( position, attribute ) ) {\n\t\t\tthis._preventCaretMovement( data );\n\t\t\tthis._overrideGravity();\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// ENGAGE 2-SCM when leaving an attribute:\n\t\t//\n\t\t//\t\t<paragraph>foo<$text attribute>bar{}</$text>baz</paragraph>\n\t\t//\n\t\tif ( isAtEndBoundary( position, attribute ) && this._hasSelectionAttribute ) {\n\t\t\tthis._preventCaretMovement( data );\n\t\t\tthis._overrideGravity();\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the document selection and the view according to the two–step caret movement state\n\t * when moving **backwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.\n\t *\n\t * @param {module:engine/model/position~Position} position The model position at the moment of the key press.\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} data Data of the key press.\n\t * @returns {Boolean} `true` when the handler prevented caret movement\n\t */\n\thandleBackwardMovement( position, data ) {\n\t\tconst attribute = this.attribute;\n\n\t\t// When the gravity is already overridden...\n\t\tif ( this._isGravityOverridden ) {\n\t\t\t// ENGAGE 2-SCM & REMOVE SELECTION ATTRIBUTE\n\t\t\t// when about to leave one attribute value and enter another:\n\t\t\t//\n\t\t\t// \t\t<paragraph><$text attribute=\"1\">foo</$text><$text attribute=\"2\">{}bar</$text></paragraph>\n\t\t\t//\n\t\t\t// but DON'T when already in between of them (no attribute selection):\n\t\t\t//\n\t\t\t// \t\t<paragraph><$text attribute=\"1\">foo</$text>{}<$text attribute=\"2\">bar</$text></paragraph>\n\t\t\t//\n\t\t\tif ( isBetweenDifferentValues( position, attribute ) && this._hasSelectionAttribute ) {\n\t\t\t\tthis._preventCaretMovement( data );\n\t\t\t\tthis._restoreGravity();\n\t\t\t\tthis._removeSelectionAttribute();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// ENGAGE 2-SCM when at any boundary of the attribute:\n\t\t\t//\n\t\t\t// \t\t<paragraph>foo<$text attribute>bar</$text>{}baz</paragraph>\n\t\t\t// \t\t<paragraph>foo<$text attribute>{}bar</$text>baz</paragraph>\n\t\t\t//\n\t\t\telse {\n\t\t\t\tthis._preventCaretMovement( data );\n\t\t\t\tthis._restoreGravity();\n\n\t\t\t\t// REMOVE SELECTION ATRIBUTE at the beginning of the block.\n\t\t\t\t// It's like restoring gravity but towards a non-existent content when\n\t\t\t\t// the gravity is overridden:\n\t\t\t\t//\n\t\t\t\t// \t\t<paragraph><$text attribute>{}bar</$text></paragraph>\n\t\t\t\t//\n\t\t\t\t// becomes:\n\t\t\t\t//\n\t\t\t\t// \t\t<paragraph>{}<$text attribute>bar</$text></paragraph>\n\t\t\t\t//\n\t\t\t\tif ( position.isAtStart ) {\n\t\t\t\t\tthis._removeSelectionAttribute();\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\t// ENGAGE 2-SCM when between two different attribute values but selection has no attribute:\n\t\t\t//\n\t\t\t// \t\t<paragraph><$text attribute=\"1\">foo</$text>{}<$text attribute=\"2\">bar</$text></paragraph>\n\t\t\t//\n\t\t\tif ( isBetweenDifferentValues( position, attribute ) && !this._hasSelectionAttribute ) {\n\t\t\t\tthis._preventCaretMovement( data );\n\t\t\t\tthis._setSelectionAttributeFromTheNodeBefore( position );\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// End of block boundary cases:\n\t\t\t//\n\t\t\t// \t\t<paragraph><$text attribute>bar{}</$text></paragraph>\n\t\t\t// \t\t<paragraph><$text attribute>bar</$text>{}</paragraph>\n\t\t\t//\n\t\t\tif ( position.isAtEnd && isAtEndBoundary( position, attribute ) ) {\n\t\t\t\t// DON'T ENGAGE 2-SCM if the selection has the attribute already.\n\t\t\t\t// This is a common selection if set using the mouse.\n\t\t\t\t//\n\t\t\t\t// \t\t<paragraph><$text attribute>bar{}</$text></paragraph>\n\t\t\t\t//\n\t\t\t\tif ( this._hasSelectionAttribute ) {\n\t\t\t\t\t// DON'T ENGAGE 2-SCM if the attribute at the end of the block which has length == 1.\n\t\t\t\t\t// Make sure the selection will not the attribute after it moves backwards.\n\t\t\t\t\t//\n\t\t\t\t\t// \t\t<paragraph>foo<$text attribute>b{}</$text></paragraph>\n\t\t\t\t\t//\n\t\t\t\t\tif ( isStepAfterTheAttributeBoundary( position, attribute ) ) {\n\t\t\t\t\t\t// Skip the automatic gravity restore upon the next selection#change:range event.\n\t\t\t\t\t\t// If not skipped, it would automatically restore the gravity, which should remain\n\t\t\t\t\t\t// overridden.\n\t\t\t\t\t\tthis._skipNextAutomaticGravityRestoration();\n\t\t\t\t\t\tthis._overrideGravity();\n\n\t\t\t\t\t\t// Don't return \"true\" here because we didn't call _preventCaretMovement.\n\t\t\t\t\t\t// Returning here will destabilize the filler logic, which also listens to\n\t\t\t\t\t\t// keydown (and the event would be stopped).\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// ENGAGE 2-SCM if the selection has no attribute. This may happen when the user\n\t\t\t\t// left the attribute using a FORWARD 2-SCM.\n\t\t\t\t//\n\t\t\t\t// \t\t<paragraph><$text attribute>bar</$text>{}</paragraph>\n\t\t\t\t//\n\t\t\t\telse {\n\t\t\t\t\tthis._preventCaretMovement( data );\n\t\t\t\t\tthis._setSelectionAttributeFromTheNodeBefore( position );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// REMOVE SELECTION ATRIBUTE when restoring gravity towards a non-existent content at the\n\t\t\t// beginning of the block.\n\t\t\t//\n\t\t\t// \t\t<paragraph>{}<$text attribute>bar</$text></paragraph>\n\t\t\t//\n\t\t\tif ( position.isAtStart ) {\n\t\t\t\tif ( this._hasSelectionAttribute ) {\n\t\t\t\t\tthis._removeSelectionAttribute();\n\t\t\t\t\tthis._preventCaretMovement( data );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// DON'T ENGAGE 2-SCM when about to enter of leave an attribute.\n\t\t\t// We need to check if the caret is a one position before the attribute boundary:\n\t\t\t//\n\t\t\t// \t\t<paragraph>foo<$text attribute>b{}ar</$text>baz</paragraph>\n\t\t\t// \t\t<paragraph>foo<$text attribute>bar</$text>b{}az</paragraph>\n\t\t\t//\n\t\t\tif ( isStepAfterTheAttributeBoundary( position, attribute ) ) {\n\t\t\t\t// Skip the automatic gravity restore upon the next selection#change:range event.\n\t\t\t\t// If not skipped, it would automatically restore the gravity, which should remain\n\t\t\t\t// overridden.\n\t\t\t\tthis._skipNextAutomaticGravityRestoration();\n\t\t\t\tthis._overrideGravity();\n\n\t\t\t\t// Don't return \"true\" here because we didn't call _preventCaretMovement.\n\t\t\t\t// Returning here will destabilize the filler logic, which also listens to\n\t\t\t\t// keydown (and the event would be stopped).\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * `true` when the gravity is overridden for the {@link #attribute}.\n\t *\n\t * @readonly\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _isGravityOverridden() {\n\t\treturn !!this._overrideUid;\n\t}\n\n\t/**\n\t * `true` when the {@link module:engine/model/selection~Selection} has the {@link #attribute}.\n\t *\n\t * @readonly\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _hasSelectionAttribute() {\n\t\treturn this._modelSelection.hasAttribute( this.attribute );\n\t}\n\n\t/**\n\t * Overrides the gravity using the {@link module:engine/model/writer~Writer model writer}\n\t * and stores the information about this fact in the {@link #_overrideUid}.\n\t *\n\t * A shorthand for {@link module:engine/model/writer~Writer#overrideSelectionGravity}.\n\t *\n\t * @private\n\t */\n\t_overrideGravity() {\n\t\tthis._overrideUid = this.model.change( writer => writer.overrideSelectionGravity() );\n\t}\n\n\t/**\n\t * Restores the gravity using the {@link module:engine/model/writer~Writer model writer}.\n\t *\n\t * A shorthand for {@link module:engine/model/writer~Writer#restoreSelectionGravity}.\n\t *\n\t * @private\n\t */\n\t_restoreGravity() {\n\t\tthis.model.change( writer => {\n\t\t\twriter.restoreSelectionGravity( this._overrideUid );\n\t\t\tthis._overrideUid = null;\n\t\t} );\n\t}\n\n\t/**\n\t * Prevents the caret movement in the view by calling `preventDefault` on the event data.\n\t *\n\t * @private\n\t */\n\t_preventCaretMovement( data ) {\n\t\tdata.preventDefault();\n\t}\n\n\t/**\n\t * Removes the {@link #attribute} from the selection using using the\n\t * {@link module:engine/model/writer~Writer model writer}.\n\t *\n\t * @private\n\t */\n\t_removeSelectionAttribute() {\n\t\tthis.model.change( writer => {\n\t\t\twriter.removeSelectionAttribute( this.attribute );\n\t\t} );\n\t}\n\n\t/**\n\t * Applies the {@link #attribute} to the current selection using using the\n\t * value from the node before the current position. Uses\n\t * the {@link module:engine/model/writer~Writer model writer}.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position\n\t */\n\t_setSelectionAttributeFromTheNodeBefore( position ) {\n\t\tconst attribute = this.attribute;\n\n\t\tthis.model.change( writer => {\n\t\t\twriter.setSelectionAttribute( this.attribute, position.nodeBefore.getAttribute( attribute ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Skips the next automatic selection gravity restoration upon the\n\t * {@link module:engine/model/selection~Selection#event:change:range} event.\n\t *\n\t * See {@link #_isNextGravityRestorationSkipped}.\n\t *\n\t * @private\n\t */\n\t_skipNextAutomaticGravityRestoration() {\n\t\tthis._isNextGravityRestorationSkipped = true;\n\t}\n}\n\n// @param {module:engine/model/position~Position} position\n// @param {String} attribute\n// @returns {Boolean} `true` when position between the nodes sticks to the bound of text with given attribute.\nfunction isAtBoundary( position, attribute ) {\n\treturn isAtStartBoundary( position, attribute ) || isAtEndBoundary( position, attribute );\n}\n\n// @param {module:engine/model/position~Position} position\n// @param {String} attribute\nfunction isAtStartBoundary( position, attribute ) {\n\tconst { nodeBefore, nodeAfter } = position;\n\tconst isAttrBefore = nodeBefore ? nodeBefore.hasAttribute( attribute ) : false;\n\tconst isAttrAfter = nodeAfter ? nodeAfter.hasAttribute( attribute ) : false;\n\n\treturn isAttrAfter && ( !isAttrBefore || nodeBefore.getAttribute( attribute ) !== nodeAfter.getAttribute( attribute ) );\n}\n\n// @param {module:engine/model/position~Position} position\n// @param {String} attribute\nfunction isAtEndBoundary( position, attribute ) {\n\tconst { nodeBefore, nodeAfter } = position;\n\tconst isAttrBefore = nodeBefore ? nodeBefore.hasAttribute( attribute ) : false;\n\tconst isAttrAfter = nodeAfter ? nodeAfter.hasAttribute( attribute ) : false;\n\n\treturn isAttrBefore && ( !isAttrAfter || nodeBefore.getAttribute( attribute ) !== nodeAfter.getAttribute( attribute ) );\n}\n\n// @param {module:engine/model/position~Position} position\n// @param {String} attribute\nfunction isBetweenDifferentValues( position, attribute ) {\n\tconst { nodeBefore, nodeAfter } = position;\n\tconst isAttrBefore = nodeBefore ? nodeBefore.hasAttribute( attribute ) : false;\n\tconst isAttrAfter = nodeAfter ? nodeAfter.hasAttribute( attribute ) : false;\n\n\tif ( !isAttrAfter || !isAttrBefore ) {\n\t\treturn;\n\t}\n\n\treturn nodeAfter.getAttribute( attribute ) !== nodeBefore.getAttribute( attribute );\n}\n\n// @param {module:engine/model/position~Position} position\n// @param {String} attribute\nfunction isStepAfterTheAttributeBoundary( position, attribute ) {\n\treturn isAtBoundary( position.getShiftedBy( -1 ), attribute );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport LinkCommand from './linkcommand';\nimport UnlinkCommand from './unlinkcommand';\nimport { createLinkElement, ensureSafeUrl, getLocalizedDecorators, normalizeDecorators } from './utils';\nimport AutomaticDecorators from './utils/automaticdecorators';\nimport ManualDecorator from './utils/manualdecorator';\nimport bindTwoStepCaretToAttribute from '@ckeditor/ckeditor5-engine/src/utils/bindtwostepcarettoattribute';\nimport findLinkRange from './findlinkrange';\nimport '../theme/link.css';\n\nconst HIGHLIGHT_CLASS = 'ck-link_selected';\nconst DECORATOR_AUTOMATIC = 'automatic';\nconst DECORATOR_MANUAL = 'manual';\nconst EXTERNAL_LINKS_REGEXP = /^(https?:)?\\/\\//;\n\n/**\n * The link engine feature.\n *\n * It introduces the `linkHref=\"url\"` attribute in the model which renders to the view as a `<a href=\"url\">` element\n * as well as `'link'` and `'unlink'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'LinkEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'link', {\n\t\t\taddTargetToExternalLinks: false\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst locale = editor.locale;\n\n\t\t// Allow link attribute on all inline nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: 'linkHref' } );\n\n\t\teditor.conversion.for( 'dataDowncast' )\n\t\t\t.attributeToElement( { model: 'linkHref', view: createLinkElement } );\n\n\t\teditor.conversion.for( 'editingDowncast' )\n\t\t\t.attributeToElement( { model: 'linkHref', view: ( href, writer ) => {\n\t\t\t\treturn createLinkElement( ensureSafeUrl( href ), writer );\n\t\t\t} } );\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t.elementToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'a',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\thref: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmodel: {\n\t\t\t\t\tkey: 'linkHref',\n\t\t\t\t\tvalue: viewElement => viewElement.getAttribute( 'href' )\n\t\t\t\t}\n\t\t\t} );\n\n\t\t// Create linking commands.\n\t\teditor.commands.add( 'link', new LinkCommand( editor ) );\n\t\teditor.commands.add( 'unlink', new UnlinkCommand( editor ) );\n\n\t\tconst linkDecorators = getLocalizedDecorators( editor.t, normalizeDecorators( editor.config.get( 'link.decorators' ) ) );\n\n\t\tthis._enableAutomaticDecorators( linkDecorators.filter( item => item.mode === DECORATOR_AUTOMATIC ) );\n\t\tthis._enableManualDecorators( linkDecorators.filter( item => item.mode === DECORATOR_MANUAL ) );\n\n\t\t// Enable two-step caret movement for `linkHref` attribute.\n\t\tbindTwoStepCaretToAttribute( {\n\t\t\tview: editor.editing.view,\n\t\t\tmodel: editor.model,\n\t\t\temitter: this,\n\t\t\tattribute: 'linkHref',\n\t\t\tlocale\n\t\t} );\n\n\t\t// Setup highlight over selected link.\n\t\tthis._setupLinkHighlight();\n\t}\n\n\t/**\n\t * Processes an array of configured {@link module:link/link~LinkDecoratorAutomaticDefinition automatic decorators}\n\t * and registers a {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast dispatcher}\n\t * for each one of them. Downcast dispatchers are obtained using the\n\t * {@link module:link/utils~AutomaticDecorators#getDispatcher} method.\n\t *\n\t * **Note**: This method also activates the automatic external link decorator if enabled with\n\t * {@link module:link/link~LinkConfig#addTargetToExternalLinks `config.link.addTargetToExternalLinks`}.\n\t *\n\t * @private\n\t * @param {Array.<module:link/link~LinkDecoratorAutomaticDefinition>} automaticDecoratorDefinitions\n\t */\n\t_enableAutomaticDecorators( automaticDecoratorDefinitions ) {\n\t\tconst editor = this.editor;\n\t\tconst automaticDecorators = new AutomaticDecorators();\n\n\t\t// Adds a default decorator for external links.\n\t\tif ( editor.config.get( 'link.addTargetToExternalLinks' ) ) {\n\t\t\tautomaticDecorators.add( {\n\t\t\t\tid: 'linkIsExternal',\n\t\t\t\tmode: DECORATOR_AUTOMATIC,\n\t\t\t\tcallback: url => EXTERNAL_LINKS_REGEXP.test( url ),\n\t\t\t\tattributes: {\n\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\trel: 'noopener noreferrer'\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tautomaticDecorators.add( automaticDecoratorDefinitions );\n\n\t\tif ( automaticDecorators.length ) {\n\t\t\teditor.conversion.for( 'downcast' ).add( automaticDecorators.getDispatcher() );\n\t\t}\n\t}\n\n\t/**\n\t * Processes an array of configured {@link module:link/link~LinkDecoratorManualDefinition manual decorators},\n\t * transforms them into {@link module:link/utils~ManualDecorator} instances and stores them in the\n\t * {@link module:link/linkcommand~LinkCommand#manualDecorators} collection (a model for manual decorators state).\n\t *\n\t * Also registers an {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement attribute-to-element}\n\t * converter for each manual decorator and extends the {@link module:engine/model/schema~Schema model's schema}\n\t * with adequate model attributes.\n\t *\n\t * @private\n\t * @param {Array.<module:link/link~LinkDecoratorManualDefinition>} manualDecoratorDefinitions\n\t */\n\t_enableManualDecorators( manualDecoratorDefinitions ) {\n\t\tif ( !manualDecoratorDefinitions.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst command = editor.commands.get( 'link' );\n\t\tconst manualDecorators = command.manualDecorators;\n\n\t\tmanualDecoratorDefinitions.forEach( decorator => {\n\t\t\teditor.model.schema.extend( '$text', { allowAttributes: decorator.id } );\n\n\t\t\t// Keeps reference to manual decorator to decode its name to attributes during downcast.\n\t\t\tmanualDecorators.add( new ManualDecorator( decorator ) );\n\n\t\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t\t\t\tmodel: decorator.id,\n\t\t\t\tview: ( manualDecoratorName, writer ) => {\n\t\t\t\t\tif ( manualDecoratorName ) {\n\t\t\t\t\t\tconst attributes = manualDecorators.get( decorator.id ).attributes;\n\t\t\t\t\t\tconst element = writer.createAttributeElement( 'a', attributes, { priority: 5 } );\n\t\t\t\t\t\twriter.setCustomProperty( 'link', true, element );\n\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t} } );\n\n\t\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'a',\n\t\t\t\t\tattributes: manualDecorators.get( decorator.id ).attributes\n\t\t\t\t},\n\t\t\t\tmodel: {\n\t\t\t\t\tkey: decorator.id\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Adds a visual highlight style to a link in which the selection is anchored.\n\t * Together with two-step caret movement, they indicate that the user is typing inside the link.\n\t *\n\t * Highlight is turned on by adding the `.ck-link_selected` class to the link in the view:\n\t *\n\t * * The class is removed before the conversion has started, as callbacks added with the `'highest'` priority\n\t * to {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} events.\n\t * * The class is added in the view post fixer, after other changes in the model tree were converted to the view.\n\t *\n\t * This way, adding and removing the highlight does not interfere with conversion.\n\t *\n\t * @private\n\t */\n\t_setupLinkHighlight() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst highlightedLinks = new Set();\n\n\t\t// Adding the class.\n\t\tview.document.registerPostFixer( writer => {\n\t\t\tconst selection = editor.model.document.selection;\n\t\t\tlet changed = false;\n\n\t\t\tif ( selection.hasAttribute( 'linkHref' ) ) {\n\t\t\t\tconst modelRange = findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ), editor.model );\n\t\t\t\tconst viewRange = editor.editing.mapper.toViewRange( modelRange );\n\n\t\t\t\t// There might be multiple `a` elements in the `viewRange`, for example, when the `a` element is\n\t\t\t\t// broken by a UIElement.\n\t\t\t\tfor ( const item of viewRange.getItems() ) {\n\t\t\t\t\tif ( item.is( 'a' ) && !item.hasClass( HIGHLIGHT_CLASS ) ) {\n\t\t\t\t\t\twriter.addClass( HIGHLIGHT_CLASS, item );\n\t\t\t\t\t\thighlightedLinks.add( item );\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t} );\n\n\t\t// Removing the class.\n\t\teditor.conversion.for( 'editingDowncast' ).add( dispatcher => {\n\t\t\t// Make sure the highlight is removed on every possible event, before conversion is started.\n\t\t\tdispatcher.on( 'insert', removeHighlight, { priority: 'highest' } );\n\t\t\tdispatcher.on( 'remove', removeHighlight, { priority: 'highest' } );\n\t\t\tdispatcher.on( 'attribute', removeHighlight, { priority: 'highest' } );\n\t\t\tdispatcher.on( 'selection', removeHighlight, { priority: 'highest' } );\n\n\t\t\tfunction removeHighlight() {\n\t\t\t\tview.change( writer => {\n\t\t\t\t\tfor ( const item of highlightedLinks.values() ) {\n\t\t\t\t\t\twriter.removeClass( HIGHLIGHT_CLASS, item );\n\t\t\t\t\t\thighlightedLinks.delete( item );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarseparatorview\n */\n\nimport View from '../view';\n\n/**\n * The toolbar separator view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ToolbarSeparatorView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar__separator'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n}\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window, document */\n\n/**\n * @module adapter-ckfinder/utils\n */\n\nconst TOKEN_COOKIE_NAME = 'ckCsrfToken';\nconst TOKEN_LENGTH = 40;\nconst tokenCharset = 'abcdefghijklmnopqrstuvwxyz0123456789';\n\n/**\n * Returns the CSRF token value. The value is a hash stored in `document.cookie`\n * under the `ckCsrfToken` key. The CSRF token can be used to secure the communication\n * between the web browser and the CKFinder server.\n *\n * @returns {String}\n */\nexport function getCsrfToken() {\n\tlet token = getCookie( TOKEN_COOKIE_NAME );\n\n\tif ( !token || token.length != TOKEN_LENGTH ) {\n\t\ttoken = generateToken( TOKEN_LENGTH );\n\t\tsetCookie( TOKEN_COOKIE_NAME, token );\n\t}\n\n\treturn token;\n}\n\n/**\n * Returns the value of the cookie with a given name or `null` if the cookie is not found.\n *\n * @param {String} name\n * @returns {String|null}\n */\nexport function getCookie( name ) {\n\tname = name.toLowerCase();\n\tconst parts = document.cookie.split( ';' );\n\n\tfor ( const part of parts ) {\n\t\tconst pair = part.split( '=' );\n\t\tconst key = decodeURIComponent( pair[ 0 ].trim().toLowerCase() );\n\n\t\tif ( key === name ) {\n\t\t\treturn decodeURIComponent( pair[ 1 ] );\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Sets the value of the cookie with a given name.\n *\n * @param {String} name\n * @param {String} value\n */\nexport function setCookie( name, value ) {\n\tdocument.cookie = encodeURIComponent( name ) + '=' + encodeURIComponent( value ) + ';path=/';\n}\n\n// Generates the CSRF token with the given length.\n//\n// @private\n// @param {Number} length\n// @returns {string}\nfunction generateToken( length ) {\n\tlet result = '';\n\tconst randValues = new Uint8Array( length );\n\n\twindow.crypto.getRandomValues( randValues );\n\n\tfor ( let j = 0; j < randValues.length; j++ ) {\n\t\tconst character = tokenCharset.charAt( randValues[ j ] % tokenCharset.length );\n\t\tresult += Math.random() > 0.5 ? character.toUpperCase() : character;\n\t}\n\n\treturn result;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* globals XMLHttpRequest, FormData */\n/**\n * @module adapter-ckfinder/uploadadapter\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport { getCsrfToken } from './utils';\n/**\n * A plugin that enables file uploads in CKEditor 5 using the CKFinder server–side connector.\n *\n * See the {@glink features/image-upload/ckfinder \"CKFinder file manager integration\" guide} to learn how to configure\n * and use this feature as well as find out more about the full integration with the file manager\n * provided by the {@link module:ckfinder/ckfinder~CKFinder} plugin.\n *\n * Check out the {@glink features/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CKFinderUploadAdapter extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [FileRepository];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'CKFinderUploadAdapter';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const url = this.editor.config.get('ckfinder.uploadUrl');\n        if (!url) {\n            return;\n        }\n        // Register CKFinderAdapter\n        this.editor.plugins.get(FileRepository).createUploadAdapter = loader => new UploadAdapter(loader, url, this.editor.t);\n    }\n}\n/**\n * Upload adapter for CKFinder.\n *\n * @private\n * @implements module:upload/filerepository~UploadAdapter\n */\nclass UploadAdapter {\n    /**\n\t * Creates a new adapter instance.\n\t *\n\t * @param {module:upload/filerepository~FileLoader} loader\n\t * @param {String} url\n\t * @param {module:utils/locale~Locale#t} t\n\t */\n    constructor(loader, url, t) {\n        /**\n\t\t * FileLoader instance to use during the upload.\n\t\t *\n\t\t * @member {module:upload/filerepository~FileLoader} #loader\n\t\t */\n        this.loader = loader;\n        /**\n\t\t * Upload URL.\n\t\t *\n\t\t * @member {String} #url\n\t\t */\n        this.url = url;\n        /**\n\t\t * Locale translation method.\n\t\t *\n\t\t * @member {module:utils/locale~Locale#t} #t\n\t\t */\n        this.t = t;\n    }\n    /**\n\t * Starts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#upload\n\t * @returns {Promise.<Object>}\n\t */\n    upload() {\n        return this.loader.file.then(file => {\n            return new Promise((resolve, reject) => {\n                this._initRequest();\n                this._initListeners(resolve, reject, file);\n                this._sendRequest(file);\n            });\n        });\n    }\n    /**\n\t * Aborts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#abort\n\t */\n    abort() {\n        if (this.xhr) {\n            this.xhr.abort();\n        }\n    }\n    /**\n\t * Initializes the XMLHttpRequest object.\n\t *\n\t * @private\n\t */\n    _initRequest() {\n        const xhr = this.xhr = new XMLHttpRequest();\n        xhr.open('POST', this.url, true);\n        xhr.responseType = 'json';\n    }\n    /**\n\t * Initializes XMLHttpRequest listeners.\n\t *\n\t * @private\n\t * @param {Function} resolve Callback function to be called when the request is successful.\n\t * @param {Function} reject Callback function to be called when the request cannot be completed.\n\t * @param {File} file File instance to be uploaded.\n\t */\n    _initListeners(resolve, reject, file) {\n        const xhr = this.xhr;\n        const loader = this.loader;\n        const t = this.t;\n        const genericError = t('Cannot upload file:') + ` ${ file.name }.`;\n        xhr.addEventListener('error', () => reject(genericError));\n        xhr.addEventListener('abort', () => reject());\n        xhr.addEventListener('load', () => {\n            const response = xhr.response;\n            if (!response || !response.uploaded) {\n                return reject(response && response.error && response.error.message ? response.error.message : genericError);\n            }\n            resolve({ default: response.url });\n        });\n        // Upload progress when it's supported.\n        /* istanbul ignore else */\n        if (xhr.upload) {\n            xhr.upload.addEventListener('progress', evt => {\n                if (evt.lengthComputable) {\n                    loader.uploadTotal = evt.total;\n                    loader.uploaded = evt.loaded;\n                }\n            });\n        }\n    }\n    /**\n\t * Prepares the data and sends the request.\n\t *\n\t * @private\n\t * @param {File} file File instance to be uploaded.\n\t */\n    _sendRequest(file) {\n        // Prepare form data.\n        const data = new FormData();\n        data.append('upload', file);\n        data.append('ckCsrfToken', getCsrfToken());\n        // Send request.\n        this.xhr.send(data);\n    }\n}","import isObjectLike from './isObjectLike.js';\nimport isPlainObject from './isPlainObject.js';\n\n/**\n * Checks if `value` is likely a DOM element.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n * @example\n *\n * _.isElement(document.body);\n * // => true\n *\n * _.isElement('<body>');\n * // => false\n */\nfunction isElement(value) {\n  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n}\n\nexport default isElement;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/pendingactions\n */\n\nimport Plugin from './plugin';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The list of pending editor actions.\n *\n * This plugin should be used to synchronise plugins that execute long-lasting actions\n * (e.g. file upload) with the editor integration. It gives the developer who integrates the editor\n * an easy way to check if there are any actions pending whenever such information is needed.\n * All plugins that register a pending action also provide a message about the action that is ongoing\n * which can be displayed to the user. This lets them decide if they want to interrupt the action or wait.\n *\n * Adding and updating a pending action:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n * \t\tconst action = pendingActions.add( 'Upload in progress: 0%.' );\n *\n *\t\t// You can update the message:\n * \t\taction.message = 'Upload in progress: 10%.';\n *\n * Removing a pending action:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n * \t\tconst action = pendingActions.add( 'Unsaved changes.' );\n *\n * \t\tpendingActions.remove( action );\n *\n * Getting pending actions:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n *\n * \t\tconst action1 = pendingActions.add( 'Action 1' );\n * \t\tconst action2 = pendingActions.add( 'Action 2' );\n *\n * \t\tpendingActions.first; // Returns action1\n * \t\tArray.from( pendingActions ); // Returns [ action1, action2 ]\n *\n * This plugin is used by features like {@link module:upload/filerepository~FileRepository} to register their ongoing actions\n * and by features like {@link module:autosave/autosave~Autosave} to detect whether there are any ongoing actions.\n * Read more about saving the data in the {@glink builds/guides/integration/saving-data Saving and getting data} guide.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class PendingActions extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'PendingActions';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t/**\n\t\t * Defines whether there is any registered pending action.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #hasAny\n\t\t */\n\t\tthis.set( 'hasAny', false );\n\n\t\t/**\n\t\t * A list of pending actions.\n\t\t *\n\t\t * @private\n\t\t * @type {module:utils/collection~Collection}\n\t\t */\n\t\tthis._actions = new Collection( { idProperty: '_id' } );\n\t\tthis._actions.delegate( 'add', 'remove' ).to( this );\n\t}\n\n\t/**\n\t * Adds an action to the list of pending actions.\n\t *\n\t * This method returns an action object with an observable message property.\n\t * The action object can be later used in the {@link #remove} method. It also allows you to change the message.\n\t *\n\t * @param {String} message The action message.\n\t * @returns {Object} An observable object that represents a pending action.\n\t */\n\tadd( message ) {\n\t\tif ( typeof message !== 'string' ) {\n\t\t\t/**\n\t\t\t * The message must be a string.\n\t\t\t *\n\t\t\t * @error pendingactions-add-invalid-message\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'pendingactions-add-invalid-message: The message must be a string.', this );\n\t\t}\n\n\t\tconst action = Object.create( ObservableMixin );\n\n\t\taction.set( 'message', message );\n\t\tthis._actions.add( action );\n\t\tthis.hasAny = true;\n\n\t\treturn action;\n\t}\n\n\t/**\n\t * Removes an action from the list of pending actions.\n\t *\n\t * @param {Object} action An action object.\n\t */\n\tremove( action ) {\n\t\tthis._actions.remove( action );\n\t\tthis.hasAny = !!this._actions.length;\n\t}\n\n\t/**\n\t * Returns the first action from the list or null when list is empty\n\t *\n\t * returns {Object|null} The pending action object.\n\t */\n\tget first() {\n\t\treturn this._actions.get( 0 );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._actions[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Fired when an action is added to the list.\n\t *\n\t * @event add\n\t * @param {Object} action The added action.\n\t */\n\n\t/**\n\t * Fired when an action is removed from the list.\n\t *\n\t * @event remove\n\t * @param {Object} action The removed action.\n\t */\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/listcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The list command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class ListCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {'numbered'|'bulleted'} type List type that will be handled by this command.\n\t */\n\tconstructor( editor, type ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The type of the list created by the command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'numbered'|'bulleted'|'todo'}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * A flag indicating whether the command is active, which means that the selection starts in a list of the same type.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @protected\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t.filter( block => checkCanBecomeListItem( block, model.schema ) );\n\n\t\t// Whether we are turning off some items.\n\t\tconst turnOff = this.value === true;\n\t\t// If we are turning off items, we are going to rename them to paragraphs.\n\n\t\tmodel.change( writer => {\n\t\t\t// If part of a list got turned off, we need to handle (outdent) all of sub-items of the last turned-off item.\n\t\t\t// To be sure that model is all the time in a good state, we first fix items below turned-off item.\n\t\t\tif ( turnOff ) {\n\t\t\t\t// Start from the model item that is just after the last turned-off item.\n\t\t\t\tlet next = blocks[ blocks.length - 1 ].nextSibling;\n\t\t\t\tlet currentIndent = Number.POSITIVE_INFINITY;\n\t\t\t\tlet changes = [];\n\n\t\t\t\t// Correct indent of all items after the last turned off item.\n\t\t\t\t// Rules that should be followed:\n\t\t\t\t// 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n\t\t\t\t//    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n\t\t\t\t// 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n\t\t\t\t//    should not end up as a child of any of list items that they were not children of before.\n\t\t\t\t// 3. All other items should have their indent changed relatively to it's parent.\n\t\t\t\t//\n\t\t\t\t// For example:\n\t\t\t\t// 1  * --------\n\t\t\t\t// 2     * --------\n\t\t\t\t// 3        * --------\t\t\t<-- this is turned off.\n\t\t\t\t// 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n\t\t\t\t// 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n\t\t\t\t// 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n\t\t\t\t// 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n\t\t\t\t// 8     * --------\t\t\t\t<-- this has to become indent = 0.\n\t\t\t\t// 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n\t\t\t\t// 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n\t\t\t\t// 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n\t\t\t\t// 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n\t\t\t\t// 13    * --------\n\t\t\t\t// 14       * --------\n\t\t\t\t//\n\t\t\t\t// After turning off 3 the list becomes:\n\t\t\t\t//\n\t\t\t\t// 1  * --------\n\t\t\t\t// 2     * --------\n\t\t\t\t//\n\t\t\t\t// 3  --------\n\t\t\t\t//\n\t\t\t\t// 4  * --------\n\t\t\t\t// 5     * --------\n\t\t\t\t// 6  * --------\n\t\t\t\t// 7     * --------\n\t\t\t\t// 8  * --------\n\t\t\t\t// 9     * --------\n\t\t\t\t// 10       * --------\n\t\t\t\t// 11       * --------\n\t\t\t\t// 12 * --------\n\t\t\t\t// 13    * --------\n\t\t\t\t// 14       * --------\n\t\t\t\t//\n\t\t\t\t// Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n\t\t\t\t// those parent-child connection which are possible to maintain are still maintained. It's worth noting\n\t\t\t\t// that this is the same effect that we would be get by multiple use of outdent command. However doing\n\t\t\t\t// it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n\t\t\t\t// less conversion (faster).\n\t\t\t\twhile ( next && next.name == 'listItem' && next.getAttribute( 'listIndent' ) !== 0 ) {\n\t\t\t\t\t// Check each next list item, as long as its indent is bigger than 0.\n\t\t\t\t\t// If the indent is 0 we are not going to change anything anyway.\n\t\t\t\t\tconst indent = next.getAttribute( 'listIndent' );\n\n\t\t\t\t\t// We check if that's item indent is lower as current relative indent.\n\t\t\t\t\tif ( indent < currentIndent ) {\n\t\t\t\t\t\t// If it is, current relative indent becomes that indent.\n\t\t\t\t\t\tcurrentIndent = indent;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fix indent relatively to current relative indent.\n\t\t\t\t\t// Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n\t\t\t\t\tconst newIndent = indent - currentIndent;\n\n\t\t\t\t\t// Save the entry in changes array. We do not apply it at the moment, because we will need to\n\t\t\t\t\t// reverse the changes so the last item is changed first.\n\t\t\t\t\t// This is to keep model in correct state all the time.\n\t\t\t\t\tchanges.push( { element: next, listIndent: newIndent } );\n\n\t\t\t\t\t// Find next item.\n\t\t\t\t\tnext = next.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tchanges = changes.reverse();\n\n\t\t\t\tfor ( const item of changes ) {\n\t\t\t\t\twriter.setAttribute( 'listIndent', item.listIndent, item.element );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we are turning on, we might change some items that are already `listItem`s but with different type.\n\t\t\t// Changing one nested list item to other type should also trigger changing all its siblings so the\n\t\t\t// whole nested list is of the same type.\n\t\t\t// Example (assume changing to numbered list):\n\t\t\t// * ------\t\t\t\t<-- do not fix, top level item\n\t\t\t//   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- do not fix, item is not affected (different list)\n\t\t\t//   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ---[--\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- already in selection\n\t\t\t// * ------\t\t\t\t<-- already in selection, but does not cause other list items to change because is top-level\n\t\t\t//   * ---]--\t\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- fix, because preceding list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- do not fix, item is not affected (different list)\n\t\t\t// * ------\t\t\t\t<-- do not fix, top level item\n\t\t\tif ( !turnOff ) {\n\t\t\t\t// Find lowest indent among selected items. This will be indicator what is the indent of\n\t\t\t\t// top-most list affected by the command.\n\t\t\t\tlet lowestIndent = Number.POSITIVE_INFINITY;\n\n\t\t\t\tfor ( const item of blocks ) {\n\t\t\t\t\tif ( item.is( 'listItem' ) && item.getAttribute( 'listIndent' ) < lowestIndent ) {\n\t\t\t\t\t\tlowestIndent = item.getAttribute( 'listIndent' );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Do not execute the fix for top-level lists.\n\t\t\t\tlowestIndent = lowestIndent === 0 ? 1 : lowestIndent;\n\n\t\t\t\t// Fix types of list items that are \"before\" the selected blocks.\n\t\t\t\t_fixType( blocks, true, lowestIndent );\n\n\t\t\t\t// Fix types of list items that are \"after\" the selected blocks.\n\t\t\t\t_fixType( blocks, false, lowestIndent );\n\t\t\t}\n\n\t\t\t// Phew! Now it will be easier :).\n\t\t\t// For each block element that was in the selection, we will either: turn it to list item,\n\t\t\t// turn it to paragraph, or change it's type. Or leave it as it is.\n\t\t\t// Do it in reverse as there might be multiple blocks (same as with changing indents).\n\t\t\tfor ( const element of blocks.reverse() ) {\n\t\t\t\tif ( turnOff && element.name == 'listItem' ) {\n\t\t\t\t\t// We are turning off and the element is a `listItem` - it should be converted to `paragraph`.\n\t\t\t\t\t// List item specific attributes are removed by post fixer.\n\t\t\t\t\twriter.rename( element, 'paragraph' );\n\t\t\t\t} else if ( !turnOff && element.name != 'listItem' ) {\n\t\t\t\t\t// We are turning on and the element is not a `listItem` - it should be converted to `listItem`.\n\t\t\t\t\t// The order of operations is important to keep model in correct state.\n\t\t\t\t\twriter.setAttributes( { listType: this.type, listIndent: 0 }, element );\n\t\t\t\t\twriter.rename( element, 'listItem' );\n\t\t\t\t} else if ( !turnOff && element.name == 'listItem' && element.getAttribute( 'listType' ) != this.type ) {\n\t\t\t\t\t// We are turning on and the element is a `listItem` but has different type - change it's type and\n\t\t\t\t\t// type of it's all siblings that have same indent.\n\t\t\t\t\twriter.setAttribute( 'listType', this.type, element );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @private\n\t * @returns {Boolean} The current value.\n\t */\n\t_getValue() {\n\t\t// Check whether closest `listItem` ancestor of the position has a correct type.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\treturn !!listItem && listItem.is( 'listItem' ) && listItem.getAttribute( 'listType' ) == this.type;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\t// If command value is true it means that we are in list item, so the command should be enabled.\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Otherwise, check if list item can be inserted at the position start.\n\t\treturn checkCanBecomeListItem( firstBlock, schema );\n\t}\n}\n\n// Helper function used when one or more list item have their type changed. Fixes type of other list items\n// that are affected by the change (are in same lists) but are not directly in selection. The function got extracted\n// not to duplicated code, as same fix has to be performed before and after selection.\n//\n// @param {Array.<module:engine/model/node~Node>} blocks Blocks that are in selection.\n// @param {Boolean} isBackward Specified whether fix will be applied for blocks before first selected block (`true`)\n// or blocks after last selected block (`false`).\n// @param {Number} lowestIndent Lowest indent among selected blocks.\nfunction _fixType( blocks, isBackward, lowestIndent ) {\n\t// We need to check previous sibling of first changed item and next siblings of last changed item.\n\tconst startingItem = isBackward ? blocks[ 0 ] : blocks[ blocks.length - 1 ];\n\n\tif ( startingItem.is( 'listItem' ) ) {\n\t\tlet item = startingItem[ isBackward ? 'previousSibling' : 'nextSibling' ];\n\t\t// During processing items, keeps the lowest indent of already processed items.\n\t\t// This saves us from changing too many items.\n\t\t// Following example is for going forward as it is easier to read, however same applies to going backward.\n\t\t// * ------\n\t\t//   * ------\n\t\t//     * --[---\n\t\t//   * ------\t\t<-- `lowestIndent` should be 1\n\t\t//     * --]---\t\t<-- `startingItem`, `currentIndent` = 2, `lowestIndent` == 1\n\t\t//     * ------\t\t<-- should be fixed, `indent` == 2 == `currentIndent`\n\t\t//   * ------\t\t<-- should be fixed, set `currentIndent` to 1, `indent` == 1 == `currentIndent`\n\t\t//     * ------\t\t<-- should not be fixed, item is in different list, `indent` = 2, `indent` != `currentIndent`\n\t\t//   * ------\t\t<-- should be fixed, `indent` == 1 == `currentIndent`\n\t\t// * ------\t\t\t<-- break loop (`indent` < `lowestIndent`)\n\t\tlet currentIndent = startingItem.getAttribute( 'listIndent' );\n\n\t\t// Look back until a list item with indent lower than reference `lowestIndent`.\n\t\t// That would be the parent of nested sublist which contains item having `lowestIndent`.\n\t\twhile ( item && item.is( 'listItem' ) && item.getAttribute( 'listIndent' ) >= lowestIndent ) {\n\t\t\tif ( currentIndent > item.getAttribute( 'listIndent' ) ) {\n\t\t\t\tcurrentIndent = item.getAttribute( 'listIndent' );\n\t\t\t}\n\n\t\t\t// Found an item that is in the same nested sublist.\n\t\t\tif ( item.getAttribute( 'listIndent' ) == currentIndent ) {\n\t\t\t\t// Just add the item to selected blocks like it was selected by the user.\n\t\t\t\tblocks[ isBackward ? 'unshift' : 'push' ]( item );\n\t\t\t}\n\n\t\t\titem = item[ isBackward ? 'previousSibling' : 'nextSibling' ];\n\t\t}\n\t}\n}\n\n// Checks whether the given block can be replaced by a listItem.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeListItem( block, schema ) {\n\treturn schema.checkChild( block.parent, 'listItem' ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/setdatainelement\n */\n\n/* globals HTMLTextAreaElement */\n\n/**\n * Sets data in a given element.\n *\n * @param {HTMLElement} el The element in which the data will be set.\n * @param {String} data The data string.\n */\nexport default function setDataInElement( el, data ) {\n\tif ( el instanceof HTMLTextAreaElement ) {\n\t\tel.value = data;\n\t}\n\n\tel.innerHTML = data;\n}\n","export default \"<svg viewBox=\\\"0 0 10 10\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/bold/boldui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport boldIcon from '../../theme/icons/bold.svg';\nconst BOLD = 'bold';\n/**\n * The bold UI feature. It introduces the Bold button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BoldUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(BOLD, locale => {\n            const command = editor.commands.get(BOLD);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Bold'),\n                icon: boldIcon,\n                keystroke: 'CTRL+B',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(BOLD));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/bold\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BoldEditing from './bold/boldediting';\nimport BoldUI from './bold/boldui';\n\n/**\n * The bold feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature documentation}\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/bold/boldediting~BoldEditing bold editing feature}\n * and {@link module:basic-styles/bold/boldui~BoldUI bold UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Bold extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ BoldEditing, BoldUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Bold';\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.586 14.633l.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/italic/italicui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport italicIcon from '../../theme/icons/italic.svg';\nconst ITALIC = 'italic';\n/**\n * The italic UI feature. It introduces the Italic button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ItalicUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(ITALIC, locale => {\n            const command = editor.commands.get(ITALIC);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Italic'),\n                icon: italicIcon,\n                keystroke: 'CTRL+I',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(ITALIC));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/italic\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ItalicEditing from './italic/italicediting';\nimport ItalicUI from './italic/italicui';\n\n/**\n * The italic feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature documentation}\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/italic/italicediting~ItalicEditing} and\n * {@link module:basic-styles/italic/italicui~ItalicUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Italic extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ItalicEditing, ItalicUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Italic';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/utils/dataapimixin\n */\n\n/**\n * Implementation of the {@link module:core/editor/utils/dataapimixin~DataApi}.\n *\n * @mixin DataApiMixin\n * @implements module:core/editor/utils/dataapimixin~DataApi\n */\nconst DataApiMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tsetData( data ) {\n\t\tthis.data.set( data );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tgetData( options ) {\n\t\treturn this.data.get( options );\n\t}\n};\n\nexport default DataApiMixin;\n\n/**\n * Interface defining editor methods for setting and getting data to and from the editor's main root element\n * using the {@link module:core/editor/editor~Editor#data data pipeline}.\n *\n * This interface is not a part of the {@link module:core/editor/editor~Editor} class because one may want to implement\n * an editor with multiple root elements, in which case the methods for setting and getting data will need to be implemented\n * differently.\n *\n * @interface DataApi\n */\n\n/**\n * Sets the data in the editor.\n *\n *\t\teditor.setData( '<p>This is editor!</p>' );\n *\n * By default the editor accepts HTML. This can be controlled by injecting a different data processor.\n * See the {@glink features/markdown Markdown output} guide for more details.\n *\n * Note: Not only is the format of the data configurable, but the type of the `setData()`'s parameter does not\n * have to be a string either. You can e.g. accept an object or a DOM `DocumentFragment` if you consider this\n * the right format for you.\n *\n * @method #setData\n * @param {String} data Input data.\n */\n\n/**\n * Gets the data from the editor.\n *\n *\t\teditor.getData(); // -> '<p>This is editor!</p>'\n *\n * By default the editor outputs HTML. This can be controlled by injecting a different data processor.\n * See the {@glink features/markdown Markdown output} guide for more details.\n *\n * Note: Not only is the format of the data configurable, but the type of the `getData()`'s return value does not\n * have to be a string either. You can e.g. return an object or a DOM `DocumentFragment` if you consider this\n * the right format for you.\n *\n * @method #getData\n * @param {Object} [options]\n * @param {String} [options.rootName='main'] Root name.\n * @param {String} [options.trim='empty'] Whether returned data should be trimmed. This option is set to `'empty'` by default,\n * which means that whenever editor content is considered empty, an empty string is returned. To turn off trimming\n * use `'none'`. In such cases exact content will be returned (for example `'<p>&nbsp;</p>'` for an empty editor).\n * @returns {String} Output data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/basichtmlwriter\n */\n\n/* globals document */\n\n/**\n * Basic HTML writer. It uses the native `innerHTML` property for basic conversion\n * from a document fragment to an HTML string.\n *\n * @implements module:engine/dataprocessor/htmlwriter~HtmlWriter\n */\nexport default class BasicHtmlWriter {\n\t/**\n\t * Returns an HTML string created from the document fragment.\n\t *\n\t * @param {DocumentFragment} fragment\n\t * @returns {String}\n\t */\n\tgetHtml( fragment ) {\n\t\tconst doc = document.implementation.createHTMLDocument( '' );\n\t\tconst container = doc.createElement( 'div' );\n\t\tcontainer.appendChild( fragment );\n\n\t\treturn container.innerHTML;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/editorui/editoruiview\n */\n\n/* globals document */\n\nimport View from '../view';\nimport Template from '../template';\n\nimport '../../theme/components/editorui/editorui.css';\n\n/**\n * The editor UI view class. Base class for the editor main views.\n *\n * @extends module:ui/view~View\n */\nexport default class EditorUIView extends View {\n\t/**\n\t * Creates an instance of the editor UI view class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Collection of the child views, detached from the DOM\n\t\t * structure of the editor, like panels, icons etc.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection} #body\n\t\t */\n\t\tthis.body = this.createCollection();\n\n\t\t/**\n\t\t * The element holding elements of the 'body' region.\n\t\t *\n\t\t * @private\n\t\t * @member {HTMLElement} #_bodyCollectionContainer\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis._renderBodyCollection();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._bodyCollectionContainer.remove();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Creates and appends to `<body>` the {@link #body} collection container.\n\t *\n\t * @private\n\t */\n\t_renderBodyCollection() {\n\t\tconst locale = this.locale;\n\t\tconst bodyElement = this._bodyCollectionContainer = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-reset_all',\n\t\t\t\t\t'ck-body',\n\t\t\t\t\t'ck-rounded-corners'\n\t\t\t\t],\n\t\t\t\tdir: locale.uiLanguageDirection,\n\t\t\t},\n\t\t\tchildren: this.body\n\t\t} ).render();\n\n\t\tdocument.body.appendChild( bodyElement );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals HTMLTextAreaElement */\n\n/**\n * @module utils/dom/getdatafromelement\n */\n\n/**\n * Gets data from a given source element.\n *\n * @param {HTMLElement} el The element from which the data will be retrieved.\n * @returns {String} The data string.\n */\nexport default function getDataFromElement( el ) {\n\tif ( el instanceof HTMLTextAreaElement ) {\n\t\treturn el.value;\n\t}\n\n\treturn el.innerHTML;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/config\n */\n\nimport { isPlainObject, isElement, cloneDeepWith } from 'lodash-es';\n\n/**\n * Handles a configuration dictionary.\n */\nexport default class Config {\n\t/**\n\t * Creates an instance of the {@link ~Config} class.\n\t *\n\t * @param {Object} [configurations] The initial configurations to be set. Usually, provided by the user.\n\t * @param {Object} [defaultConfigurations] The default configurations. Usually, provided by the system.\n\t */\n\tconstructor( configurations, defaultConfigurations ) {\n\t\t/**\n\t\t * Store for the whole configuration.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._config = {};\n\n\t\t// Set default configuration.\n\t\tif ( defaultConfigurations ) {\n\t\t\tthis.define( defaultConfigurations );\n\t\t}\n\n\t\t// Set initial configuration.\n\t\tif ( configurations ) {\n\t\t\tthis._setObjectToTarget( this._config, configurations );\n\t\t}\n\t}\n\n\t/**\n\t * Set configuration values.\n\t *\n\t * It accepts both a name/value pair or an object, which properties and values will be used to set\n\t * configurations.\n\t *\n\t * It also accepts setting a \"deep configuration\" by using dots in the name. For example, `'resize.width'` sets\n\t * the value for the `width` configuration in the `resize` subset.\n\t *\n\t *\t\tconfig.set( 'width', 500 );\n\t *\t\tconfig.set( 'toolbar.collapsed', true );\n\t *\n\t *\t\t// Equivalent to:\n\t *\t\tconfig.set( {\n\t *\t\t\twidth: 500\n\t *\t\t\ttoolbar: {\n\t *\t\t\t\tcollapsed: true\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Passing an object as the value will amend the configuration, not replace it.\n\t *\n\t *\t\tconfig.set( 'toolbar', {\n\t *\t\t\tcollapsed: true,\n\t *\t\t} );\n\t *\n\t *\t\tconfig.set( 'toolbar', {\n\t *\t\t\tcolor: 'red',\n\t *\t\t} );\n\t *\n\t *\t\tconfig.get( 'toolbar.collapsed' ); // true\n\t *\t\tconfig.get( 'toolbar.color' ); // 'red'\n\t *\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t */\n\tset( name, value ) {\n\t\tthis._setToTarget( this._config, name, value );\n\t}\n\n\t/**\n\t * Does exactly the same as {@link #set} with one exception – passed configuration extends\n\t * existing one, but does not overwrite already defined values.\n\t *\n\t * This method is supposed to be called by plugin developers to setup plugin's configurations. It would be\n\t * rarely used for other needs.\n\t *\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t */\n\tdefine( name, value ) {\n\t\tconst isDefine = true;\n\n\t\tthis._setToTarget( this._config, name, value, isDefine );\n\t}\n\n\t/**\n\t * Gets the value for a configuration entry.\n\t *\n\t *\t\tconfig.get( 'name' );\n\t *\n\t * Deep configurations can be retrieved by separating each part with a dot.\n\t *\n\t *\t\tconfig.get( 'toolbar.collapsed' );\n\t *\n\t * @param {String} name The configuration name. Configuration names are case-sensitive.\n\t * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\n\t */\n\tget( name ) {\n\t\treturn this._getFromSource( this._config, name );\n\t}\n\n\t/**\n\t * Saves passed configuration to the specified target (nested object).\n\t *\n\t * @private\n\t * @param {Object} target Nested config object.\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t * @param {Boolean} [isDefine=false] Define if passed configuration should overwrite existing one.\n\t */\n\t_setToTarget( target, name, value, isDefine = false ) {\n\t\t// In case of an object, iterate through it and call `_setToTarget` again for each property.\n\t\tif ( isPlainObject( name ) ) {\n\t\t\tthis._setObjectToTarget( target, name, isDefine );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n\t\tconst parts = name.split( '.' );\n\n\t\t// Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n\t\tname = parts.pop();\n\n\t\t// Iterate over parts to check if currently stored configuration has proper structure.\n\t\tfor ( const part of parts ) {\n\t\t\t// If there is no object for specified part then create one.\n\t\t\tif ( !isPlainObject( target[ part ] ) ) {\n\t\t\t\ttarget[ part ] = {};\n\t\t\t}\n\n\t\t\t// Nested object becomes a target.\n\t\t\ttarget = target[ part ];\n\t\t}\n\n\t\t// In case of value is an object.\n\t\tif ( isPlainObject( value ) ) {\n\t\t\t// We take care of proper config structure.\n\t\t\tif ( !isPlainObject( target[ name ] ) ) {\n\t\t\t\ttarget[ name ] = {};\n\t\t\t}\n\n\t\t\ttarget = target[ name ];\n\n\t\t\t// And iterate through this object calling `_setToTarget` again for each property.\n\t\t\tthis._setObjectToTarget( target, value, isDefine );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Do nothing if we are defining configuration for non empty name.\n\t\tif ( isDefine && typeof target[ name ] != 'undefined' ) {\n\t\t\treturn;\n\t\t}\n\n\t\ttarget[ name ] = value;\n\t}\n\n\t/**\n\t * Get specified configuration from specified source (nested object).\n\t *\n\t * @private\n\t * @param {Object} source level of nested object.\n\t * @param {String} name The configuration name. Configuration names are case-sensitive.\n\t * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\n\t */\n\t_getFromSource( source, name ) {\n\t\t// The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n\t\tconst parts = name.split( '.' );\n\n\t\t// Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n\t\tname = parts.pop();\n\n\t\t// Iterate over parts to check if currently stored configuration has proper structure.\n\t\tfor ( const part of parts ) {\n\t\t\tif ( !isPlainObject( source[ part ] ) ) {\n\t\t\t\tsource = null;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Nested object becomes a source.\n\t\t\tsource = source[ part ];\n\t\t}\n\n\t\t// Always returns undefined for non existing configuration.\n\t\treturn source ? cloneConfig( source[ name ] ) : undefined;\n\t}\n\n\t/**\n\t * Iterates through passed object and calls {@link #_setToTarget} method with object key and value for each property.\n\t *\n\t * @private\n\t * @param {Object} target Nested config object.\n\t * @param {Object} configuration Configuration data set\n\t * @param {Boolean} [isDefine] Defines if passed configuration is default configuration or not.\n\t */\n\t_setObjectToTarget( target, configuration, isDefine ) {\n\t\tObject.keys( configuration ).forEach( key => {\n\t\t\tthis._setToTarget( target, key, configuration[ key ], isDefine );\n\t\t} );\n\t}\n}\n\n// Clones configuration object or value.\n// @param {*} source Source configuration\n// @returns {*} Cloned configuration value.\nfunction cloneConfig( source ) {\n\treturn cloneDeepWith( source, leaveDOMReferences );\n}\n\n// A customizer function for cloneDeepWith.\n// It will leave references to DOM Elements instead of cloning them.\n//\n// @param {*} value\n// @returns {Element|undefined}\nfunction leaveDOMReferences( value ) {\n\treturn isElement( value ) ? value : undefined;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/rooteditableelement\n */\n\nimport EditableElement from './editableelement';\n\nconst rootNameSymbol = Symbol( 'rootName' );\n\n/**\n * Class representing a single root in the data view. A root can be either {@link ~RootEditableElement#isReadOnly editable or read-only},\n * but in both cases it is called \"an editable\". Roots can contain other {@link module:engine/view/editableelement~EditableElement\n * editable elements} making them \"nested editables\".\n *\n * @extends module:engine/view/editableelement~EditableElement\n */\nexport default class RootEditableElement extends EditableElement {\n\t/**\n\t * Creates root editable element.\n\t *\n\t * @param {String} name Node name.\n\t */\n\tconstructor( name ) {\n\t\tsuper( name );\n\n\t\t/**\n\t\t * Name of this root inside {@link module:engine/view/document~Document} that is an owner of this root. If no\n\t\t * other name is set, `main` name is used.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.rootName = 'main';\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\trootEditableElement.is( 'rootEditableElement' ); // -> true\n\t *\t\trootEditableElement.is( 'editableElement' ); // -> true\n\t *\t\trootEditableElement.is( 'element' ); // -> true\n\t *\t\trootEditableElement.is( 'node' ); // -> true\n\t *\t\trootEditableElement.is( 'view:rootEditableElement' ); // -> true\n\t *\t\trootEditableElement.is( 'view:editableElement' ); // -> true\n\t *\t\trootEditableElement.is( 'view:element' ); // -> true\n\t *\t\trootEditableElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\trootEditableElement.is( 'model:element' ); // -> false\n\t *\t\trootEditableElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is a root editbale element, you can also check its\n\t * {@link module:engine/view/rooteditableelement~RootEditableElement#name name}:\n\t *\n\t *\t\trootEditableElement.is( 'div' ); // -> true if this is a div root editable element\n\t *\t\trootEditableElement.is( 'rootEditableElement', 'div' ); // -> same as above\n\t *\t\ttext.is( 'div' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'rootElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'rootElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\tget rootName() {\n\t\treturn this.getCustomProperty( rootNameSymbol );\n\t}\n\n\tset rootName( rootName ) {\n\t\tthis._setCustomProperty( rootNameSymbol, rootName );\n\t}\n\n\t/**\n\t * Overrides old element name and sets new one.\n\t * This is needed because view roots are created before they are attached to the DOM.\n\t * The name of the root element is temporary at this stage. It has to be changed when the\n\t * view root element is attached to the DOM element.\n\t *\n\t * @protected\n\t * @param {String} name The new name of element.\n\t */\n\tset _name( name ) {\n\t\tthis.name = name;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/insertat\n */\n\n/**\n * Inserts node to the parent at given index.\n *\n * @param {Element} parentElement Parent element.\n * @param {Number} index Insertions index.\n * @param {Node} nodeToInsert Node to insert.\n */\nexport default function insertAt( parentElement, index, nodeToInsert ) {\n\tparentElement.insertBefore( nodeToInsert, parentElement.childNodes[ index ] || null );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/remove\n */\n\n/**\n * Removes given node from parent.\n *\n * @param {Node} node Node to remove.\n */\nexport default function remove( node ) {\n\tconst parent = node.parentNode;\n\n\tif ( parent ) {\n\t\tparent.removeChild( node );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals Node */\n\n/**\n * @module engine/view/renderer\n */\n\nimport ViewText from './text';\nimport ViewPosition from './position';\nimport { INLINE_FILLER, INLINE_FILLER_LENGTH, startsWithFiller, isInlineFiller } from './filler';\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport insertAt from '@ckeditor/ckeditor5-utils/src/dom/insertat';\nimport remove from '@ckeditor/ckeditor5-utils/src/dom/remove';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport fastDiff from '@ckeditor/ckeditor5-utils/src/fastdiff';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Renderer is responsible for updating the DOM structure and the DOM selection based on\n * the {@link module:engine/view/renderer~Renderer#markToSync information about updated view nodes}.\n * In other words, it renders the view to the DOM.\n *\n * Its main responsibility is to make only the necessary, minimal changes to the DOM. However, unlike in many\n * virtual DOM implementations, the primary reason for doing minimal changes is not the performance but ensuring\n * that native editing features such as text composition, autocompletion, spell checking, selection's x-index are\n * affected as little as possible.\n *\n * Renderer uses {@link module:engine/view/domconverter~DomConverter} to transform view nodes and positions\n * to and from the DOM.\n */\nexport default class Renderer {\n\t/**\n\t * Creates a renderer instance.\n\t *\n\t * @param {module:engine/view/domconverter~DomConverter} domConverter Converter instance.\n\t * @param {module:engine/view/documentselection~DocumentSelection} selection View selection.\n\t */\n\tconstructor( domConverter, selection ) {\n\t\t/**\n\t\t * Set of DOM Documents instances.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<Document>}\n\t\t */\n\t\tthis.domDocuments = new Set();\n\n\t\t/**\n\t\t * Converter instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = domConverter;\n\n\t\t/**\n\t\t * Set of nodes which attributes changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedAttributes = new Set();\n\n\t\t/**\n\t\t * Set of elements which child lists changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedChildren = new Set();\n\n\t\t/**\n\t\t * Set of text nodes which text data changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedTexts = new Set();\n\n\t\t/**\n\t\t * View selection. Renderer updates DOM selection based on the view selection.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection}\n\t\t */\n\t\tthis.selection = selection;\n\n\t\t/**\n\t\t * Indicates if the view document is focused and selection can be rendered. Selection will not be rendered if\n\t\t * this is set to `false`.\n\t\t *\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.isFocused = false;\n\n\t\t/**\n\t\t * The text node in which the inline filler was rendered.\n\t\t *\n\t\t * @private\n\t\t * @member {Text}\n\t\t */\n\t\tthis._inlineFiller = null;\n\n\t\t/**\n\t\t * DOM element containing fake selection.\n\t\t *\n\t\t * @private\n\t\t * @type {null|HTMLElement}\n\t\t */\n\t\tthis._fakeSelectionContainer = null;\n\t}\n\n\t/**\n\t * Marks a view node to be updated in the DOM by {@link #render `render()`}.\n\t *\n\t * Note that only view nodes whose parents have corresponding DOM elements need to be marked to be synchronized.\n\t *\n\t * @see #markedAttributes\n\t * @see #markedChildren\n\t * @see #markedTexts\n\t *\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Node to be marked.\n\t */\n\tmarkToSync( type, node ) {\n\t\tif ( type === 'text' ) {\n\t\t\tif ( this.domConverter.mapViewToDom( node.parent ) ) {\n\t\t\t\tthis.markedTexts.add( node );\n\t\t\t}\n\t\t} else {\n\t\t\t// If the node has no DOM element it is not rendered yet,\n\t\t\t// its children/attributes do not need to be marked to be sync.\n\t\t\tif ( !this.domConverter.mapViewToDom( node ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( type === 'attributes' ) {\n\t\t\t\tthis.markedAttributes.add( node );\n\t\t\t} else if ( type === 'children' ) {\n\t\t\t\tthis.markedChildren.add( node );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * Unknown type passed to Renderer.markToSync.\n\t\t\t\t *\n\t\t\t\t * @error renderer-unknown-type\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'view-renderer-unknown-type: Unknown type passed to Renderer.markToSync.', this );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Renders all buffered changes ({@link #markedAttributes}, {@link #markedChildren} and {@link #markedTexts}) and\n\t * the current view selection (if needed) to the DOM by applying a minimal set of changes to it.\n\t *\n\t * Renderer tries not to break the text composition (e.g. IME) and x-index of the selection,\n\t * so it does as little as it is needed to update the DOM.\n\t *\n\t * Renderer also handles {@link module:engine/view/filler fillers}. Especially, it checks if the inline filler is needed\n\t * at the selection position and adds or removes it. To prevent breaking text composition inline filler will not be\n\t * removed as long as the selection is in the text node which needed it at first.\n\t */\n\trender() {\n\t\tlet inlineFillerPosition;\n\n\t\t// Refresh mappings.\n\t\tfor ( const element of this.markedChildren ) {\n\t\t\tthis._updateChildrenMappings( element );\n\t\t}\n\n\t\t// There was inline filler rendered in the DOM but it's not\n\t\t// at the selection position any more, so we can remove it\n\t\t// (cause even if it's needed, it must be placed in another location).\n\t\tif ( this._inlineFiller && !this._isSelectionInInlineFiller() ) {\n\t\t\tthis._removeInlineFiller();\n\t\t}\n\n\t\t// If we've got the filler, let's try to guess its position in the view.\n\t\tif ( this._inlineFiller ) {\n\t\t\tinlineFillerPosition = this._getInlineFillerPosition();\n\t\t}\n\t\t// Otherwise, if it's needed, create it at the selection position.\n\t\telse if ( this._needsInlineFillerAtSelection() ) {\n\t\t\tinlineFillerPosition = this.selection.getFirstPosition();\n\n\t\t\t// Do not use `markToSync` so it will be added even if the parent is already added.\n\t\t\tthis.markedChildren.add( inlineFillerPosition.parent );\n\t\t}\n\n\t\tfor ( const element of this.markedAttributes ) {\n\t\t\tthis._updateAttrs( element );\n\t\t}\n\n\t\tfor ( const element of this.markedChildren ) {\n\t\t\tthis._updateChildren( element, { inlineFillerPosition } );\n\t\t}\n\n\t\tfor ( const node of this.markedTexts ) {\n\t\t\tif ( !this.markedChildren.has( node.parent ) && this.domConverter.mapViewToDom( node.parent ) ) {\n\t\t\t\tthis._updateText( node, { inlineFillerPosition } );\n\t\t\t}\n\t\t}\n\n\t\t// Check whether the inline filler is required and where it really is in the DOM.\n\t\t// At this point in most cases it will be in the DOM, but there are exceptions.\n\t\t// For example, if the inline filler was deep in the created DOM structure, it will not be created.\n\t\t// Similarly, if it was removed at the beginning of this function and then neither text nor children were updated,\n\t\t// it will not be present.\n\t\t// Fix those and similar scenarios.\n\t\tif ( inlineFillerPosition ) {\n\t\t\tconst fillerDomPosition = this.domConverter.viewPositionToDom( inlineFillerPosition );\n\t\t\tconst domDocument = fillerDomPosition.parent.ownerDocument;\n\n\t\t\tif ( !startsWithFiller( fillerDomPosition.parent ) ) {\n\t\t\t\t// Filler has not been created at filler position. Create it now.\n\t\t\t\tthis._inlineFiller = addInlineFiller( domDocument, fillerDomPosition.parent, fillerDomPosition.offset );\n\t\t\t} else {\n\t\t\t\t// Filler has been found, save it.\n\t\t\t\tthis._inlineFiller = fillerDomPosition.parent;\n\t\t\t}\n\t\t} else {\n\t\t\t// There is no filler needed.\n\t\t\tthis._inlineFiller = null;\n\t\t}\n\n\t\tthis._updateSelection();\n\t\tthis._updateFocus();\n\n\t\tthis.markedTexts.clear();\n\t\tthis.markedAttributes.clear();\n\t\tthis.markedChildren.clear();\n\t}\n\n\t/**\n\t * Updates mappings of view element's children.\n\t *\n\t * Children that were replaced in the view structure by similar elements (same tag name) are treated as 'replaced'.\n\t * This means that their mappings can be updated so the new view elements are mapped to the existing DOM elements.\n\t * Thanks to that these elements do not need to be re-rendered completely.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewElement The view element whose children mappings will be updated.\n\t */\n\t_updateChildrenMappings( viewElement ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that it was already removed from DOM and there is no need to process it.\n\t\t\treturn;\n\t\t}\n\n\t\tconst actualDomChildren = this.domConverter.mapViewToDom( viewElement ).childNodes;\n\t\tconst expectedDomChildren = Array.from(\n\t\t\tthis.domConverter.viewChildrenToDom( viewElement, domElement.ownerDocument, { withChildren: false } )\n\t\t);\n\t\tconst diff = this._diffNodeLists( actualDomChildren, expectedDomChildren );\n\t\tconst actions = this._findReplaceActions( diff, actualDomChildren, expectedDomChildren );\n\n\t\tif ( actions.indexOf( 'replace' ) !== -1 ) {\n\t\t\tconst counter = { equal: 0, insert: 0, delete: 0 };\n\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action === 'replace' ) {\n\t\t\t\t\tconst insertIndex = counter.equal + counter.insert;\n\t\t\t\t\tconst deleteIndex = counter.equal + counter.delete;\n\t\t\t\t\tconst viewChild = viewElement.getChild( insertIndex );\n\n\t\t\t\t\t// The 'uiElement' is a special one and its children are not stored in a view (#799),\n\t\t\t\t\t// so we cannot use it with replacing flow (since it uses view children during rendering\n\t\t\t\t\t// which will always result in rendering empty element).\n\t\t\t\t\tif ( viewChild && !viewChild.is( 'uiElement' ) ) {\n\t\t\t\t\t\tthis._updateElementMappings( viewChild, actualDomChildren[ deleteIndex ] );\n\t\t\t\t\t}\n\n\t\t\t\t\tremove( expectedDomChildren[ insertIndex ] );\n\t\t\t\t\tcounter.equal++;\n\t\t\t\t} else {\n\t\t\t\t\tcounter[ action ]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates mappings of a given view element.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewElement The view element whose mappings will be updated.\n\t * @param {Node} domElement The DOM element representing the given view element.\n\t */\n\t_updateElementMappings( viewElement, domElement ) {\n\t\t// Remap 'DomConverter' bindings.\n\t\tthis.domConverter.unbindDomElement( domElement );\n\t\tthis.domConverter.bindElements( domElement, viewElement );\n\n\t\t// View element may have children which needs to be updated, but are not marked, mark them to update.\n\t\tthis.markedChildren.add( viewElement );\n\n\t\t// Because we replace new view element mapping with the existing one, the corresponding DOM element\n\t\t// will not be rerendered. The new view element may have different attributes than the previous one.\n\t\t// Since its corresponding DOM element will not be rerendered, new attributes will not be added\n\t\t// to the DOM, so we need to mark it here to make sure its attributes gets updated. See #1427 for more\n\t\t// detailed case study.\n\t\t// Also there are cases where replaced element is removed from the view structure and then has\n\t\t// its attributes changed or removed. In such cases the element will not be present in `markedAttributes`\n\t\t// and also may be the same (`element.isSimilar()`) as the reused element not having its attributes updated.\n\t\t// To prevent such situations we always mark reused element to have its attributes rerenderd (#1560).\n\t\tthis.markedAttributes.add( viewElement );\n\t}\n\n\t/**\n\t * Gets the position of the inline filler based on the current selection.\n\t * Here, we assume that we know that the filler is needed and\n\t * {@link #_isSelectionInInlineFiller is at the selection position}, and, since it is needed,\n\t * it is somewhere at the selection position.\n\t *\n\t * Note: The filler position cannot be restored based on the filler's DOM text node, because\n\t * when this method is called (before rendering), the bindings will often be broken. View-to-DOM\n\t * bindings are only dependable after rendering.\n\t *\n\t * @private\n\t * @returns {module:engine/view/position~Position}\n\t */\n\t_getInlineFillerPosition() {\n\t\tconst firstPos = this.selection.getFirstPosition();\n\n\t\tif ( firstPos.parent.is( 'text' ) ) {\n\t\t\treturn ViewPosition._createBefore( this.selection.getFirstPosition().parent );\n\t\t} else {\n\t\t\treturn firstPos;\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` if the selection has not left the inline filler's text node.\n\t * If it is `true`, it means that the filler had been added for a reason and the selection did not\n\t * leave the filler's text node. For example, the user can be in the middle of a composition so it should not be touched.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if the inline filler and selection are in the same place.\n\t */\n\t_isSelectionInInlineFiller() {\n\t\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Note, we can't check if selection's position equals position of the\n\t\t// this._inlineFiller node, because of #663. We may not be able to calculate\n\t\t// the filler's position in the view at this stage.\n\t\t// Instead, we check it the other way – whether selection is anchored in\n\t\t// that text node or next to it.\n\n\t\t// Possible options are:\n\t\t// \"FILLER{}\"\n\t\t// \"FILLERadded-text{}\"\n\t\tconst selectionPosition = this.selection.getFirstPosition();\n\t\tconst position = this.domConverter.viewPositionToDom( selectionPosition );\n\n\t\tif ( position && isText( position.parent ) && startsWithFiller( position.parent ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Removes the inline filler.\n\t *\n\t * @private\n\t */\n\t_removeInlineFiller() {\n\t\tconst domFillerNode = this._inlineFiller;\n\n\t\t// Something weird happened and the stored node doesn't contain the filler's text.\n\t\tif ( !startsWithFiller( domFillerNode ) ) {\n\t\t\t/**\n\t\t\t * The inline filler node was lost. Most likely, something overwrote the filler text node\n\t\t\t * in the DOM.\n\t\t\t *\n\t\t\t * @error view-renderer-filler-was-lost\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-renderer-filler-was-lost: The inline filler node was lost.', this );\n\t\t}\n\n\t\tif ( isInlineFiller( domFillerNode ) ) {\n\t\t\tdomFillerNode.parentNode.removeChild( domFillerNode );\n\t\t} else {\n\t\t\tdomFillerNode.data = domFillerNode.data.substr( INLINE_FILLER_LENGTH );\n\t\t}\n\n\t\tthis._inlineFiller = null;\n\t}\n\n\t/**\n\t * Checks if the inline {@link module:engine/view/filler filler} should be added.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if the inline filler should be added.\n\t */\n\t_needsInlineFillerAtSelection() {\n\t\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selectionPosition = this.selection.getFirstPosition();\n\t\tconst selectionParent = selectionPosition.parent;\n\t\tconst selectionOffset = selectionPosition.offset;\n\n\t\t// If there is no DOM root we do not care about fillers.\n\t\tif ( !this.domConverter.mapViewToDom( selectionParent.root ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !( selectionParent.is( 'element' ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Prevent adding inline filler inside elements with contenteditable=false.\n\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/1170\n\t\tif ( !isEditable( selectionParent ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// We have block filler, we do not need inline one.\n\t\tif ( selectionOffset === selectionParent.getFillerOffset() ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst nodeBefore = selectionPosition.nodeBefore;\n\t\tconst nodeAfter = selectionPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof ViewText || nodeAfter instanceof ViewText ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if text needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} viewText View text to update.\n\t * @param {Object} options\n\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position where the inline\n\t * filler should be rendered.\n\t */\n\t_updateText( viewText, options ) {\n\t\tconst domText = this.domConverter.findCorrespondingDomText( viewText );\n\t\tconst newDomText = this.domConverter.viewToDom( viewText, domText.ownerDocument );\n\n\t\tconst actualText = domText.data;\n\t\tlet expectedText = newDomText.data;\n\n\t\tconst filler = options.inlineFillerPosition;\n\n\t\tif ( filler && filler.parent == viewText.parent && filler.offset == viewText.index ) {\n\t\t\texpectedText = INLINE_FILLER + expectedText;\n\t\t}\n\n\t\tif ( actualText != expectedText ) {\n\t\t\tconst actions = fastDiff( actualText, expectedText );\n\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action.type === 'insert' ) {\n\t\t\t\t\tdomText.insertData( action.index, action.values.join( '' ) );\n\t\t\t\t} else { // 'delete'\n\t\t\t\t\tdomText.deleteData( action.index, action.howMany );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if attribute list needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewElement The view element to update.\n\t */\n\t_updateAttrs( viewElement ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that 'viewElement' is outdated as its mapping was updated\n\t\t\t// in 'this._updateChildrenMappings()'. There is no need to process it as new view element which\n\t\t\t// replaced old 'viewElement' mapping was also added to 'this.markedAttributes'\n\t\t\t// in 'this._updateChildrenMappings()' so it will be processed separately.\n\t\t\treturn;\n\t\t}\n\n\t\tconst domAttrKeys = Array.from( domElement.attributes ).map( attr => attr.name );\n\t\tconst viewAttrKeys = viewElement.getAttributeKeys();\n\n\t\t// Add or overwrite attributes.\n\t\tfor ( const key of viewAttrKeys ) {\n\t\t\tdomElement.setAttribute( key, viewElement.getAttribute( key ) );\n\t\t}\n\n\t\t// Remove from DOM attributes which do not exists in the view.\n\t\tfor ( const key of domAttrKeys ) {\n\t\t\tif ( !viewElement.hasAttribute( key ) ) {\n\t\t\t\tdomElement.removeAttribute( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if elements child list needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewElement View element to update.\n\t * @param {Object} options\n\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position where the inline\n\t * filler should be rendered.\n\t */\n\t_updateChildren( viewElement, options ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that it was already removed from DOM.\n\t\t\t// There is no need to process it. It will be processed when re-inserted.\n\t\t\treturn;\n\t\t}\n\n\t\tconst inlineFillerPosition = options.inlineFillerPosition;\n\t\tconst actualDomChildren = this.domConverter.mapViewToDom( viewElement ).childNodes;\n\t\tconst expectedDomChildren = Array.from(\n\t\t\tthis.domConverter.viewChildrenToDom( viewElement, domElement.ownerDocument, { bind: true, inlineFillerPosition } )\n\t\t);\n\n\t\t// Inline filler element has to be created as it is present in the DOM, but not in the view. It is required\n\t\t// during diffing so text nodes could be compared correctly and also during rendering to maintain\n\t\t// proper order and indexes while updating the DOM.\n\t\tif ( inlineFillerPosition && inlineFillerPosition.parent === viewElement ) {\n\t\t\taddInlineFiller( domElement.ownerDocument, expectedDomChildren, inlineFillerPosition.offset );\n\t\t}\n\n\t\tconst diff = this._diffNodeLists( actualDomChildren, expectedDomChildren );\n\n\t\tlet i = 0;\n\t\tconst nodesToUnbind = new Set();\n\n\t\tfor ( const action of diff ) {\n\t\t\tif ( action === 'insert' ) {\n\t\t\t\tinsertAt( domElement, i, expectedDomChildren[ i ] );\n\t\t\t\ti++;\n\t\t\t} else if ( action === 'delete' ) {\n\t\t\t\tnodesToUnbind.add( actualDomChildren[ i ] );\n\t\t\t\tremove( actualDomChildren[ i ] );\n\t\t\t} else { // 'equal'\n\t\t\t\t// Force updating text nodes inside elements which did not change and do not need to be re-rendered (#1125).\n\t\t\t\tthis._markDescendantTextToSync( this.domConverter.domToView( expectedDomChildren[ i ] ) );\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// Unbind removed nodes. When node does not have a parent it means that it was removed from DOM tree during\n\t\t// comparision with the expected DOM. We don't need to check child nodes, because if child node was reinserted,\n\t\t// it was moved to DOM tree out of the removed node.\n\t\tfor ( const node of nodesToUnbind ) {\n\t\t\tif ( !node.parentNode ) {\n\t\t\t\tthis.domConverter.unbindDomElement( node );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shorthand for diffing two arrays or node lists of DOM nodes.\n\t *\n\t * @private\n\t * @param {Array.<Node>|NodeList} actualDomChildren Actual DOM children\n\t * @param {Array.<Node>|NodeList} expectedDomChildren Expected DOM children.\n\t * @returns {Array.<String>} The list of actions based on the {@link module:utils/diff~diff} function.\n\t */\n\t_diffNodeLists( actualDomChildren, expectedDomChildren ) {\n\t\tactualDomChildren = filterOutFakeSelectionContainer( actualDomChildren, this._fakeSelectionContainer );\n\n\t\treturn diff( actualDomChildren, expectedDomChildren, sameNodes.bind( null, this.domConverter ) );\n\t}\n\n\t/**\n\t * Finds DOM nodes that were replaced with the similar nodes (same tag name) in the view. All nodes are compared\n\t * within one `insert`/`delete` action group, for example:\n\t *\n\t * \t\tActual DOM:\t\t<p><b>Foo</b>Bar<i>Baz</i><b>Bax</b></p>\n\t * \t\tExpected DOM:\t<p>Bar<b>123</b><i>Baz</i><b>456</b></p>\n\t * \t\tInput actions:\t[ insert, insert, delete, delete, equal, insert, delete ]\n\t * \t\tOutput actions:\t[ insert, replace, delete, equal, replace ]\n\t *\n\t * @private\n\t * @param {Array.<String>} actions Actions array which is a result of the {@link module:utils/diff~diff} function.\n\t * @param {Array.<Node>|NodeList} actualDom Actual DOM children\n\t * @param {Array.<Node>} expectedDom Expected DOM children.\n\t * @returns {Array.<String>} Actions array modified with the `replace` actions.\n\t */\n\t_findReplaceActions( actions, actualDom, expectedDom ) {\n\t\t// If there is no both 'insert' and 'delete' actions, no need to check for replaced elements.\n\t\tif ( actions.indexOf( 'insert' ) === -1 || actions.indexOf( 'delete' ) === -1 ) {\n\t\t\treturn actions;\n\t\t}\n\n\t\tlet newActions = [];\n\t\tlet actualSlice = [];\n\t\tlet expectedSlice = [];\n\n\t\tconst counter = { equal: 0, insert: 0, delete: 0 };\n\n\t\tfor ( const action of actions ) {\n\t\t\tif ( action === 'insert' ) {\n\t\t\t\texpectedSlice.push( expectedDom[ counter.equal + counter.insert ] );\n\t\t\t} else if ( action === 'delete' ) {\n\t\t\t\tactualSlice.push( actualDom[ counter.equal + counter.delete ] );\n\t\t\t} else { // equal\n\t\t\t\tnewActions = newActions.concat( diff( actualSlice, expectedSlice, areSimilar ).map( x => x === 'equal' ? 'replace' : x ) );\n\t\t\t\tnewActions.push( 'equal' );\n\t\t\t\t// Reset stored elements on 'equal'.\n\t\t\t\tactualSlice = [];\n\t\t\t\texpectedSlice = [];\n\t\t\t}\n\t\t\tcounter[ action ]++;\n\t\t}\n\n\t\treturn newActions.concat( diff( actualSlice, expectedSlice, areSimilar ).map( x => x === 'equal' ? 'replace' : x ) );\n\t}\n\n\t/**\n\t * Marks text nodes to be synchronized.\n\t *\n\t * If a text node is passed, it will be marked. If an element is passed, all descendant text nodes inside it will be marked.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewNode View node to sync.\n\t */\n\t_markDescendantTextToSync( viewNode ) {\n\t\tif ( !viewNode ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( viewNode.is( 'text' ) ) {\n\t\t\tthis.markedTexts.add( viewNode );\n\t\t} else if ( viewNode.is( 'element' ) ) {\n\t\t\tfor ( const child of viewNode.getChildren() ) {\n\t\t\t\tthis._markDescendantTextToSync( child );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the selection needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t */\n\t_updateSelection() {\n\t\t// If there is no selection - remove DOM and fake selections.\n\t\tif ( this.selection.rangeCount === 0 ) {\n\t\t\tthis._removeDomSelection();\n\t\t\tthis._removeFakeSelection();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst domRoot = this.domConverter.mapViewToDom( this.selection.editableElement );\n\n\t\t// Do nothing if there is no focus, or there is no DOM element corresponding to selection's editable element.\n\t\tif ( !this.isFocused || !domRoot ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Render selection.\n\t\tif ( this.selection.isFake ) {\n\t\t\tthis._updateFakeSelection( domRoot );\n\t\t} else {\n\t\t\tthis._removeFakeSelection();\n\t\t\tthis._updateDomSelection( domRoot );\n\t\t}\n\t}\n\n\t/**\n\t * Updates the fake selection.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot A valid DOM root where the fake selection container should be added.\n\t */\n\t_updateFakeSelection( domRoot ) {\n\t\tconst domDocument = domRoot.ownerDocument;\n\n\t\tif ( !this._fakeSelectionContainer ) {\n\t\t\tthis._fakeSelectionContainer = createFakeSelectionContainer( domDocument );\n\t\t}\n\n\t\tconst container = this._fakeSelectionContainer;\n\n\t\t// Bind fake selection container with the current selection *position*.\n\t\tthis.domConverter.bindFakeSelection( container, this.selection );\n\n\t\tif ( !this._fakeSelectionNeedsUpdate( domRoot ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !container.parentElement || container.parentElement != domRoot ) {\n\t\t\tdomRoot.appendChild( container );\n\t\t}\n\n\t\tcontainer.textContent = this.selection.fakeSelectionLabel || '\\u00A0';\n\n\t\tconst domSelection = domDocument.getSelection();\n\t\tconst domRange = domDocument.createRange();\n\n\t\tdomSelection.removeAllRanges();\n\t\tdomRange.selectNodeContents( container );\n\t\tdomSelection.addRange( domRange );\n\t}\n\n\t/**\n\t * Updates the DOM selection.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot A valid DOM root where the DOM selection should be rendered.\n\t */\n\t_updateDomSelection( domRoot ) {\n\t\tconst domSelection = domRoot.ownerDocument.defaultView.getSelection();\n\n\t\t// Let's check whether DOM selection needs updating at all.\n\t\tif ( !this._domSelectionNeedsUpdate( domSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Multi-range selection is not available in most browsers, and, at least in Chrome, trying to\n\t\t// set such selection, that is not continuous, throws an error. Because of that, we will just use anchor\n\t\t// and focus of view selection.\n\t\t// Since we are not supporting multi-range selection, we also do not need to check if proper editable is\n\t\t// selected. If there is any editable selected, it is okay (editable is taken from selection anchor).\n\t\tconst anchor = this.domConverter.viewPositionToDom( this.selection.anchor );\n\t\tconst focus = this.domConverter.viewPositionToDom( this.selection.focus );\n\n\t\t// Focus the new editing host.\n\t\t// Otherwise, FF may throw an error (https://github.com/ckeditor/ckeditor5/issues/721).\n\t\tdomRoot.focus();\n\n\t\tdomSelection.collapse( anchor.parent, anchor.offset );\n\t\tdomSelection.extend( focus.parent, focus.offset );\n\n\t\t// Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n\t\tif ( env.isGecko ) {\n\t\t\tfixGeckoSelectionAfterBr( focus, domSelection );\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether a given DOM selection needs to be updated.\n\t *\n\t * @private\n\t * @param {Selection} domSelection The DOM selection to check.\n\t * @returns {Boolean}\n\t */\n\t_domSelectionNeedsUpdate( domSelection ) {\n\t\tif ( !this.domConverter.isDomSelectionCorrect( domSelection ) ) {\n\t\t\t// Current DOM selection is in incorrect position. We need to update it.\n\t\t\treturn true;\n\t\t}\n\n\t\tconst oldViewSelection = domSelection && this.domConverter.domSelectionToView( domSelection );\n\n\t\tif ( oldViewSelection && this.selection.isEqual( oldViewSelection ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If selection is not collapsed, it does not need to be updated if it is similar.\n\t\tif ( !this.selection.isCollapsed && this.selection.isSimilar( oldViewSelection ) ) {\n\t\t\t// Selection did not changed and is correct, do not update.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Selections are not similar.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether the fake selection needs to be updated.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot A valid DOM root where a new fake selection container should be added.\n\t * @returns {Boolean}\n\t */\n\t_fakeSelectionNeedsUpdate( domRoot ) {\n\t\tconst container = this._fakeSelectionContainer;\n\t\tconst domSelection = domRoot.ownerDocument.getSelection();\n\n\t\t// Fake selection needs to be updated if there's no fake selection container, or the container currently sits\n\t\t// in a different root.\n\t\tif ( !container || container.parentElement !== domRoot ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Make sure that the selection actually is within the fake selection.\n\t\tif ( domSelection.anchorNode !== container && !container.contains( domSelection.anchorNode ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn container.textContent !== this.selection.fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Removes the DOM selection.\n\t *\n\t * @private\n\t */\n\t_removeDomSelection() {\n\t\tfor ( const doc of this.domDocuments ) {\n\t\t\tconst domSelection = doc.getSelection();\n\n\t\t\tif ( domSelection.rangeCount ) {\n\t\t\t\tconst activeDomElement = doc.activeElement;\n\t\t\t\tconst viewElement = this.domConverter.mapDomToView( activeDomElement );\n\n\t\t\t\tif ( activeDomElement && viewElement ) {\n\t\t\t\t\tdoc.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes the fake selection.\n\t *\n\t * @private\n\t */\n\t_removeFakeSelection() {\n\t\tconst container = this._fakeSelectionContainer;\n\n\t\tif ( container ) {\n\t\t\tcontainer.remove();\n\t\t}\n\t}\n\n\t/**\n\t * Checks if focus needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t */\n\t_updateFocus() {\n\t\tif ( this.isFocused ) {\n\t\t\tconst editable = this.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t}\n\t\t}\n\t}\n}\n\nmix( Renderer, ObservableMixin );\n\n// Checks if provided element is editable.\n//\n// @private\n// @param {module:engine/view/element~Element} element\n// @returns {Boolean}\nfunction isEditable( element ) {\n\tif ( element.getAttribute( 'contenteditable' ) == 'false' ) {\n\t\treturn false;\n\t}\n\n\tconst parent = element.findAncestor( element => element.hasAttribute( 'contenteditable' ) );\n\n\treturn !parent || parent.getAttribute( 'contenteditable' ) == 'true';\n}\n\n// Adds inline filler at a given position.\n//\n// The position can be given as an array of DOM nodes and an offset in that array,\n// or a DOM parent element and an offset in that element.\n//\n// @private\n// @param {Document} domDocument\n// @param {Element|Array.<Node>} domParentOrArray\n// @param {Number} offset\n// @returns {Text} The DOM text node that contains an inline filler.\nfunction addInlineFiller( domDocument, domParentOrArray, offset ) {\n\tconst childNodes = domParentOrArray instanceof Array ? domParentOrArray : domParentOrArray.childNodes;\n\tconst nodeAfterFiller = childNodes[ offset ];\n\n\tif ( isText( nodeAfterFiller ) ) {\n\t\tnodeAfterFiller.data = INLINE_FILLER + nodeAfterFiller.data;\n\n\t\treturn nodeAfterFiller;\n\t} else {\n\t\tconst fillerNode = domDocument.createTextNode( INLINE_FILLER );\n\n\t\tif ( Array.isArray( domParentOrArray ) ) {\n\t\t\tchildNodes.splice( offset, 0, fillerNode );\n\t\t} else {\n\t\t\tinsertAt( domParentOrArray, offset, fillerNode );\n\t\t}\n\n\t\treturn fillerNode;\n\t}\n}\n\n// Whether two DOM nodes should be considered as similar.\n// Nodes are considered similar if they have the same tag name.\n//\n// @private\n// @param {Node} node1\n// @param {Node} node2\n// @returns {Boolean}\nfunction areSimilar( node1, node2 ) {\n\treturn isNode( node1 ) && isNode( node2 ) &&\n\t\t!isText( node1 ) && !isText( node2 ) &&\n\t\tnode1.tagName.toLowerCase() === node2.tagName.toLowerCase();\n}\n\n// Whether two dom nodes should be considered as the same.\n// Two nodes which are considered the same are:\n//\n//\t\t* Text nodes with the same text.\n//\t\t* Element nodes represented by the same object.\n//\t\t* Two block filler elements.\n//\n// @private\n// @param {String} blockFillerMode Block filler mode, see {@link module:engine/view/domconverter~DomConverter#blockFillerMode}.\n// @param {Node} node1\n// @param {Node} node2\n// @returns {Boolean}\nfunction sameNodes( domConverter, actualDomChild, expectedDomChild ) {\n\t// Elements.\n\tif ( actualDomChild === expectedDomChild ) {\n\t\treturn true;\n\t}\n\t// Texts.\n\telse if ( isText( actualDomChild ) && isText( expectedDomChild ) ) {\n\t\treturn actualDomChild.data === expectedDomChild.data;\n\t}\n\t// Block fillers.\n\telse if ( domConverter.isBlockFiller( actualDomChild ) &&\n\t\tdomConverter.isBlockFiller( expectedDomChild ) ) {\n\t\treturn true;\n\t}\n\n\t// Not matching types.\n\treturn false;\n}\n\n// The following is a Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n// When the native DOM selection is at the end of the block and preceded by <br /> e.g.\n//\n//\t\t<p>foo<br/>[]</p>\n//\n// which happens a lot when using the soft line break, the browser fails to (visually) move the\n// caret to the new line. A quick fix is as simple as force–refreshing the selection with the same range.\nfunction fixGeckoSelectionAfterBr( focus, domSelection ) {\n\tconst parent = focus.parent;\n\n\t// This fix works only when the focus point is at the very end of an element.\n\t// There is no point in running it in cases unrelated to the browser bug.\n\tif ( parent.nodeType != Node.ELEMENT_NODE || focus.offset != parent.childNodes.length - 1 ) {\n\t\treturn;\n\t}\n\n\tconst childAtOffset = parent.childNodes[ focus.offset ];\n\n\t// To stay on the safe side, the fix being as specific as possible, it targets only the\n\t// selection which is at the very end of the element and preceded by <br />.\n\tif ( childAtOffset && childAtOffset.tagName == 'BR' ) {\n\t\tdomSelection.addRange( domSelection.getRangeAt( 0 ) );\n\t}\n}\n\nfunction filterOutFakeSelectionContainer( domChildList, fakeSelectionContainer ) {\n\tconst childList = Array.from( domChildList );\n\n\tif ( childList.length == 0 || !fakeSelectionContainer ) {\n\t\treturn childList;\n\t}\n\n\tconst last = childList[ childList.length - 1 ];\n\n\tif ( last == fakeSelectionContainer ) {\n\t\tchildList.pop();\n\t}\n\n\treturn childList;\n}\n\n// Creates a fake selection container for a given document.\n//\n// @private\n// @param {Document} domDocument\n// @returns {HTMLElement}\nfunction createFakeSelectionContainer( domDocument ) {\n\tconst container = domDocument.createElement( 'div' );\n\n\tObject.assign( container.style, {\n\t\tposition: 'fixed',\n\t\ttop: 0,\n\t\tleft: '-9999px',\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/752.\n\t\twidth: '42px'\n\t} );\n\n\t// Fill it with a text node so we can update it later.\n\tcontainer.textContent = '\\u00A0';\n\n\treturn container;\n}\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * This method is like `_.isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * _.isEqualWith(array, other, customizer);\n * // => true\n */\nfunction isEqualWith(value, other, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  var result = customizer ? customizer(value, other) : undefined;\n  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n}\n\nexport default isEqualWith;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/mutationobserver\n */\n\n/* globals window */\n\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { startsWithFiller, getDataWithoutFiller } from '../filler';\nimport { isEqualWith } from 'lodash-es';\n\n/**\n * Mutation observer class observes changes in the DOM, fires {@link module:engine/view/document~Document#event:mutations} event, mark view\n * elements as changed and call {@link module:engine/view/renderer~Renderer#render}.\n * Because all mutated nodes are marked as \"to be rendered\" and the\n * {@link module:engine/view/renderer~Renderer#render} is called, all changes will be reverted, unless the mutation will be handled by the\n * {@link module:engine/view/document~Document#event:mutations} event listener. It means user will see only handled changes, and the editor\n * will block all changes which are not handled.\n *\n * Mutation Observer also take care of reducing number of mutations which are fired. It removes duplicates and\n * mutations on elements which do not have corresponding view elements. Also\n * {@link module:engine/view/observer/mutationobserver~MutatedText text mutation} is fired only if parent element do not change child list.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class MutationObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Native mutation observer config.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._config = {\n\t\t\tchildList: true,\n\t\t\tcharacterData: true,\n\t\t\tcharacterDataOldValue: true,\n\t\t\tsubtree: true\n\t\t};\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#domConverter}.\n\t\t *\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = view.domConverter;\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#_renderer}.\n\t\t *\n\t\t * @member {module:engine/view/renderer~Renderer}\n\t\t */\n\t\tthis.renderer = view._renderer;\n\n\t\t/**\n\t\t * Observed DOM elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<HTMLElement>}\n\t\t */\n\t\tthis._domElements = [];\n\n\t\t/**\n\t\t * Native mutation observer.\n\t\t *\n\t\t * @private\n\t\t * @member {MutationObserver}\n\t\t */\n\t\tthis._mutationObserver = new window.MutationObserver( this._onMutations.bind( this ) );\n\t}\n\n\t/**\n\t * Synchronously fires {@link module:engine/view/document~Document#event:mutations} event with all mutations in record queue.\n\t * At the same time empties the queue so mutations will not be fired twice.\n\t */\n\tflush() {\n\t\tthis._onMutations( this._mutationObserver.takeRecords() );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tthis._domElements.push( domElement );\n\n\t\tif ( this.isEnabled ) {\n\t\t\tthis._mutationObserver.observe( domElement, this._config );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tenable() {\n\t\tsuper.enable();\n\n\t\tfor ( const domElement of this._domElements ) {\n\t\t\tthis._mutationObserver.observe( domElement, this._config );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisable() {\n\t\tsuper.disable();\n\n\t\tthis._mutationObserver.disconnect();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._mutationObserver.disconnect();\n\t}\n\n\t/**\n\t * Handles mutations. Deduplicates, mark view elements to sync, fire event and call render.\n\t *\n\t * @private\n\t * @param {Array.<Object>} domMutations Array of native mutations.\n\t */\n\t_onMutations( domMutations ) {\n\t\t// As a result of this.flush() we can have an empty collection.\n\t\tif ( domMutations.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domConverter = this.domConverter;\n\n\t\t// Use map and set for deduplication.\n\t\tconst mutatedTexts = new Map();\n\t\tconst mutatedElements = new Set();\n\n\t\t// Handle `childList` mutations first, so we will be able to check if the `characterData` mutation is in the\n\t\t// element with changed structure anyway.\n\t\tfor ( const mutation of domMutations ) {\n\t\t\tif ( mutation.type === 'childList' ) {\n\t\t\t\tconst element = domConverter.mapDomToView( mutation.target );\n\n\t\t\t\t// Do not collect mutations from UIElements.\n\t\t\t\tif ( element && element.is( 'uiElement' ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( element && !this._isBogusBrMutation( mutation ) ) {\n\t\t\t\t\tmutatedElements.add( element );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle `characterData` mutations later, when we have the full list of nodes which changed structure.\n\t\tfor ( const mutation of domMutations ) {\n\t\t\tconst element = domConverter.mapDomToView( mutation.target );\n\n\t\t\t// Do not collect mutations from UIElements.\n\t\t\tif ( element && element.is( 'uiElement' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( mutation.type === 'characterData' ) {\n\t\t\t\tconst text = domConverter.findCorrespondingViewText( mutation.target );\n\n\t\t\t\tif ( text && !mutatedElements.has( text.parent ) ) {\n\t\t\t\t\t// Use text as a key, for deduplication. If there will be another mutation on the same text element\n\t\t\t\t\t// we will have only one in the map.\n\t\t\t\t\tmutatedTexts.set( text, {\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\toldText: text.data,\n\t\t\t\t\t\tnewText: getDataWithoutFiller( mutation.target ),\n\t\t\t\t\t\tnode: text\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\t// When we added first letter to the text node which had only inline filler, for the DOM it is mutation\n\t\t\t\t// on text, but for the view, where filler text node did not existed, new text node was created, so we\n\t\t\t\t// need to fire 'children' mutation instead of 'text'.\n\t\t\t\telse if ( !text && startsWithFiller( mutation.target ) ) {\n\t\t\t\t\tmutatedElements.add( domConverter.mapDomToView( mutation.target.parentNode ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Now we build the list of mutations to fire and mark elements. We did not do it earlier to avoid marking the\n\t\t// same node multiple times in case of duplication.\n\n\t\t// List of mutations we will fire.\n\t\tconst viewMutations = [];\n\n\t\tfor ( const mutatedText of mutatedTexts.values() ) {\n\t\t\tthis.renderer.markToSync( 'text', mutatedText.node );\n\t\t\tviewMutations.push( mutatedText );\n\t\t}\n\n\t\tfor ( const viewElement of mutatedElements ) {\n\t\t\tconst domElement = domConverter.mapViewToDom( viewElement );\n\t\t\tconst viewChildren = Array.from( viewElement.getChildren() );\n\t\t\tconst newViewChildren = Array.from( domConverter.domChildrenToView( domElement, { withChildren: false } ) );\n\n\t\t\t// It may happen that as a result of many changes (sth was inserted and then removed),\n\t\t\t// both elements haven't really changed. #1031\n\t\t\tif ( !isEqualWith( viewChildren, newViewChildren, sameNodes ) ) {\n\t\t\t\tthis.renderer.markToSync( 'children', viewElement );\n\n\t\t\t\tviewMutations.push( {\n\t\t\t\t\ttype: 'children',\n\t\t\t\t\toldChildren: viewChildren,\n\t\t\t\t\tnewChildren: newViewChildren,\n\t\t\t\t\tnode: viewElement\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve `domSelection` using `ownerDocument` of one of mutated nodes.\n\t\t// There should not be simultaneous mutation in multiple documents, so it's fine.\n\t\tconst domSelection = domMutations[ 0 ].target.ownerDocument.getSelection();\n\n\t\tlet viewSelection = null;\n\n\t\tif ( domSelection && domSelection.anchorNode ) {\n\t\t\t// If `domSelection` is inside a dom node that is already bound to a view node from view tree, get\n\t\t\t// corresponding selection in the view and pass it together with `viewMutations`. The `viewSelection` may\n\t\t\t// be used by features handling mutations.\n\t\t\t// Only one range is supported.\n\n\t\t\tconst viewSelectionAnchor = domConverter.domPositionToView( domSelection.anchorNode, domSelection.anchorOffset );\n\t\t\tconst viewSelectionFocus = domConverter.domPositionToView( domSelection.focusNode, domSelection.focusOffset );\n\n\t\t\t// Anchor and focus has to be properly mapped to view.\n\t\t\tif ( viewSelectionAnchor && viewSelectionFocus ) {\n\t\t\t\tviewSelection = new ViewSelection( viewSelectionAnchor );\n\t\t\t\tviewSelection.setFocus( viewSelectionFocus );\n\t\t\t}\n\t\t}\n\n\t\tthis.document.fire( 'mutations', viewMutations, viewSelection );\n\n\t\t// If nothing changes on `mutations` event, at this point we have \"dirty DOM\" (changed) and de-synched\n\t\t// view (which has not been changed). In order to \"reset DOM\" we render the view again.\n\t\tthis.view.forceRender();\n\n\t\tfunction sameNodes( child1, child2 ) {\n\t\t\t// First level of comparison (array of children vs array of children) – use the Lodash's default behavior.\n\t\t\tif ( Array.isArray( child1 ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Elements.\n\t\t\tif ( child1 === child2 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// Texts.\n\t\t\telse if ( child1.is( 'text' ) && child2.is( 'text' ) ) {\n\t\t\t\treturn child1.data === child2.data;\n\t\t\t}\n\n\t\t\t// Not matching types.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if mutation was generated by the browser inserting bogus br on the end of the block element.\n\t * Such mutations are generated while pressing space or performing native spellchecker correction\n\t * on the end of the block element in Firefox browser.\n\t *\n\t * @private\n\t * @param {Object} mutation Native mutation object.\n\t * @returns {Boolean}\n\t */\n\t_isBogusBrMutation( mutation ) {\n\t\tlet addedNode = null;\n\n\t\t// Check if mutation added only one node on the end of its parent.\n\t\tif ( mutation.nextSibling === null && mutation.removedNodes.length === 0 && mutation.addedNodes.length == 1 ) {\n\t\t\taddedNode = this.domConverter.domToView( mutation.addedNodes[ 0 ], {\n\t\t\t\twithChildren: false\n\t\t\t} );\n\t\t}\n\n\t\treturn addedNode && addedNode.is( 'element', 'br' );\n\t}\n}\n\n/**\n * Fired when mutation occurred. If tree view is not changed on this event, DOM will be reverted to the state before\n * mutation, so all changes which should be applied, should be handled on this event.\n *\n * Introduced by {@link module:engine/view/observer/mutationobserver~MutationObserver}.\n *\n * Note that because {@link module:engine/view/observer/mutationobserver~MutationObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @event module:engine/view/document~Document#event:mutations\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|module:engine/view/observer/mutationobserver~MutatedChildren>}\n * viewMutations Array of mutations.\n * For mutated texts it will be {@link module:engine/view/observer/mutationobserver~MutatedText} and for mutated elements it will be\n * {@link module:engine/view/observer/mutationobserver~MutatedChildren}. You can recognize the type based on the `type` property.\n * @param {module:engine/view/selection~Selection|null} viewSelection View selection that is a result of converting DOM selection to view.\n * Keep in\n * mind that the DOM selection is already \"updated\", meaning that it already acknowledges changes done in mutation.\n */\n\n/**\n * Mutation item for text.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedText\n *\n * @property {String} type For text mutations it is always 'text'.\n * @property {module:engine/view/text~Text} node Mutated text node.\n * @property {String} oldText Old text.\n * @property {String} newText New text.\n */\n\n/**\n * Mutation item for child nodes.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedText\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @property {String} type For child nodes mutations it is always 'children'.\n * @property {module:engine/view/element~Element} node Parent of the mutated children.\n * @property {Array.<module:engine/view/node~Node>} oldChildren Old child nodes.\n * @property {Array.<module:engine/view/node~Node>} newChildren New child nodes.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/keyobserver\n */\n\nimport DomEventObserver from './domeventobserver';\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Observer for events connected with pressing keyboard keys.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class KeyObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'keydown', 'keyup' ];\n\t}\n\n\tonDomEvent( domEvt ) {\n\t\tthis.fire( domEvt.type, domEvt, {\n\t\t\tkeyCode: domEvt.keyCode,\n\n\t\t\taltKey: domEvt.altKey,\n\t\t\tctrlKey: domEvt.ctrlKey || domEvt.metaKey,\n\t\t\tshiftKey: domEvt.shiftKey,\n\n\t\t\tget keystroke() {\n\t\t\t\treturn getCode( this );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Fired when a key has been pressed.\n *\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\n *\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/keyobserver~KeyObserver\n * @event module:engine/view/document~Document#event:keydown\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\n */\n\n/**\n * Fired when a key has been released.\n *\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\n *\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/keyobserver~KeyObserver\n * @event module:engine/view/document~Document#event:keyup\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\n */\n\n/**\n * The value of both events - {@link module:engine/view/document~Document#event:keydown} and\n * {@link module:engine/view/document~Document#event:keyup}.\n *\n * @class module:engine/view/observer/keyobserver~KeyEventData\n * @extends module:engine/view/observer/domeventdata~DomEventData\n * @implements module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * Code of the whole keystroke. See {@link module:utils/keyboard~getCode}.\n *\n * @readonly\n * @member {Number} module:engine/view/observer/keyobserver~KeyEventData#keystroke\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/fakeselectionobserver\n */\n\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport { debounce } from 'lodash-es';\n\n/**\n * Fake selection observer class. If view selection is fake it is placed in dummy DOM container. This observer listens\n * on {@link module:engine/view/document~Document#event:keydown keydown} events and handles moving fake view selection to the correct place\n * if arrow keys are pressed.\n * Fires {@link module:engine/view/document~Document#event:selectionChange selectionChange event} simulating natural behaviour of\n * {@link module:engine/view/observer/selectionobserver~SelectionObserver SelectionObserver}.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class FakeSelectionObserver extends Observer {\n\t/**\n\t * Creates new FakeSelectionObserver instance.\n\t *\n\t * @param {module:engine/view/view~View} view\n\t */\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n\t\t *\n\t\t * @private\n\t\t * @param {Object} data Selection change data.\n\t\t * @method #_fireSelectionChangeDoneDebounced\n\t\t */\n\t\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'keydown', ( eventInfo, data ) => {\n\t\t\tconst selection = document.selection;\n\n\t\t\tif ( selection.isFake && _isArrowKeyCode( data.keyCode ) && this.isEnabled ) {\n\t\t\t\t// Prevents default key down handling - no selection change will occur.\n\t\t\t\tdata.preventDefault();\n\n\t\t\t\tthis._handleSelectionMove( data.keyCode );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._fireSelectionChangeDoneDebounced.cancel();\n\t}\n\n\t/**\n\t * Handles collapsing view selection according to given key code. If left or up key is provided - new selection will be\n\t * collapsed to left. If right or down key is pressed - new selection will be collapsed to right.\n\t *\n\t * This method fires {@link module:engine/view/document~Document#event:selectionChange} and\n\t * {@link module:engine/view/document~Document#event:selectionChangeDone} events imitating behaviour of\n\t * {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n\t *\n\t * @private\n\t * @param {Number} keyCode\n\t * @fires module:engine/view/document~Document#event:selectionChange\n\t * @fires module:engine/view/document~Document#event:selectionChangeDone\n\t */\n\t_handleSelectionMove( keyCode ) {\n\t\tconst selection = this.document.selection;\n\t\tconst newSelection = new ViewSelection( selection.getRanges(), { backward: selection.isBackward, fake: false } );\n\n\t\t// Left or up arrow pressed - move selection to start.\n\t\tif ( keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup ) {\n\t\t\tnewSelection.setTo( newSelection.getFirstPosition() );\n\t\t}\n\n\t\t// Right or down arrow pressed - move selection to end.\n\t\tif ( keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowdown ) {\n\t\t\tnewSelection.setTo( newSelection.getLastPosition() );\n\t\t}\n\n\t\tconst data = {\n\t\t\toldSelection: selection,\n\t\t\tnewSelection,\n\t\t\tdomSelection: null\n\t\t};\n\n\t\t// Fire dummy selection change event.\n\t\tthis.document.fire( 'selectionChange', data );\n\n\t\t// Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n\t\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\n\t\t// defined int the function time will elapse since the last time the function was called.\n\t\t// So `selectionChangeDone` will be fired when selection will stop changing.\n\t\tthis._fireSelectionChangeDoneDebounced( data );\n\t}\n}\n\n// Checks if one of the arrow keys is pressed.\n//\n// @private\n// @param {Number} keyCode\n// @returns {Boolean}\nfunction _isArrowKeyCode( keyCode ) {\n\treturn keyCode == keyCodes.arrowright ||\n\t\tkeyCode == keyCodes.arrowleft ||\n\t\tkeyCode == keyCodes.arrowup ||\n\t\tkeyCode == keyCodes.arrowdown;\n}\n\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/selectionobserver\n */\n\n/* global setInterval, clearInterval */\n\nimport Observer from './observer';\nimport MutationObserver from './mutationobserver';\nimport { debounce } from 'lodash-es';\n\n/**\n * Selection observer class observes selection changes in the document. If selection changes on the document this\n * observer checks if there are any mutations and if DOM selection is different than the\n * {@link module:engine/view/document~Document#selection view selection}. Selection observer fires\n * {@link module:engine/view/document~Document#event:selectionChange} event only if selection change was the only change in the document\n * and DOM selection is different then the view selection.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class SelectionObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Instance of the mutation observer. Selection observer calls\n\t\t * {@link module:engine/view/observer/mutationobserver~MutationObserver#flush} to ensure that the mutations will be handled\n\t\t * before the {@link module:engine/view/document~Document#event:selectionChange} event is fired.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/observer/mutationobserver~MutationObserver}\n\t\t * module:engine/view/observer/selectionobserver~SelectionObserver#mutationObserver\n\t\t */\n\t\tthis.mutationObserver = view.getObserver( MutationObserver );\n\n\t\t/**\n\t\t * Reference to the view {@link module:engine/view/documentselection~DocumentSelection} object used to compare\n\t\t * new selection with it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection}\n\t\t * module:engine/view/observer/selectionobserver~SelectionObserver#selection\n\t\t */\n\t\tthis.selection = this.document.selection;\n\n\t\t/* eslint-disable max-len */\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#domConverter}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter} module:engine/view/observer/selectionobserver~SelectionObserver#domConverter\n\t\t */\n\t\t/* eslint-enable max-len */\n\t\tthis.domConverter = view.domConverter;\n\n\t\t/**\n\t\t * Set of documents which have added \"selectionchange\" listener to avoid adding listener twice to the same\n\t\t * document.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakSet.<Document>} module:engine/view/observer/selectionobserver~SelectionObserver#_documents\n\t\t */\n\t\tthis._documents = new WeakSet();\n\n\t\t/**\n\t\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n\t\t *\n\t\t * @private\n\t\t * @param {Object} data Selection change data.\n\t\t * @method #_fireSelectionChangeDoneDebounced\n\t\t */\n\t\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\n\n\t\tthis._clearInfiniteLoopInterval = setInterval( () => this._clearInfiniteLoop(), 1000 );\n\n\t\t/**\n\t\t * Private property to check if the code does not enter infinite loop.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} module:engine/view/observer/selectionobserver~SelectionObserver#_loopbackCounter\n\t\t */\n\t\tthis._loopbackCounter = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tconst domDocument = domElement.ownerDocument;\n\n\t\t// Add listener once per each document.\n\t\tif ( this._documents.has( domDocument ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.listenTo( domDocument, 'selectionchange', () => {\n\t\t\tthis._handleSelectionChange( domDocument );\n\t\t} );\n\n\t\tthis._documents.add( domDocument );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tclearInterval( this._clearInfiniteLoopInterval );\n\t\tthis._fireSelectionChangeDoneDebounced.cancel();\n\t}\n\n\t/**\n\t * Selection change listener. {@link module:engine/view/observer/mutationobserver~MutationObserver#flush Flush} mutations, check if\n\t * selection changes and fires {@link module:engine/view/document~Document#event:selectionChange} event on every change\n\t * and {@link module:engine/view/document~Document#event:selectionChangeDone} when selection stop changing.\n\t *\n\t * @private\n\t * @param {Document} domDocument DOM document.\n\t */\n\t_handleSelectionChange( domDocument ) {\n\t\t// Selection is handled when document is not focused but is read-only. This is because in read-only\n\t\t// mode contenteditable is set as false and editor won't receive focus but we still need to know\n\t\t// selection position.\n\t\tif ( !this.isEnabled || ( !this.document.isFocused && !this.document.isReadOnly ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure the mutation event will be before selection event on all browsers.\n\t\tthis.mutationObserver.flush();\n\n\t\t// If there were mutations then the view will be re-rendered by the mutation observer and selection\n\t\t// will be updated, so selections will equal and event will not be fired, as expected.\n\t\tconst domSelection = domDocument.defaultView.getSelection();\n\t\tconst newViewSelection = this.domConverter.domSelectionToView( domSelection );\n\n\t\tif ( this.selection.isEqual( newViewSelection ) && this.domConverter.isDomSelectionCorrect( domSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure we are not in the infinite loop (#400).\n\t\t// This counter is reset each second. 60 selection changes in 1 second is enough high number\n\t\t// to be very difficult (impossible) to achieve using just keyboard keys (during normal editor use).\n\t\tif ( ++this._loopbackCounter > 60 ) {\n\t\t\t// Selection change observer detected an infinite rendering loop.\n\t\t\t// Most probably you try to put the selection in the position which is not allowed\n\t\t\t// by the browser and browser fixes it automatically what causes `selectionchange` event on\n\t\t\t// which a loopback through a model tries to re-render the wrong selection and again.\n\t\t\t//\n\t\t\t// @if CK_DEBUG // console.warn( 'Selection change observer detected an infinite rendering loop.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.selection.isSimilar( newViewSelection ) ) {\n\t\t\t// If selection was equal and we are at this point of algorithm, it means that it was incorrect.\n\t\t\t// Just re-render it, no need to fire any events, etc.\n\t\t\tthis.view.forceRender();\n\t\t} else {\n\t\t\tconst data = {\n\t\t\t\toldSelection: this.selection,\n\t\t\t\tnewSelection: newViewSelection,\n\t\t\t\tdomSelection\n\t\t\t};\n\n\t\t\t// Prepare data for new selection and fire appropriate events.\n\t\t\tthis.document.fire( 'selectionChange', data );\n\n\t\t\t// Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n\t\t\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\n\t\t\t// defined int the function time will elapse since the last time the function was called.\n\t\t\t// So `selectionChangeDone` will be fired when selection will stop changing.\n\t\t\tthis._fireSelectionChangeDoneDebounced( data );\n\t\t}\n\t}\n\n\t/**\n\t * Clears `SelectionObserver` internal properties connected with preventing infinite loop.\n\t *\n\t * @protected\n\t */\n\t_clearInfiniteLoop() {\n\t\tthis._loopbackCounter = 0;\n\t}\n}\n\n/**\n * Fired when selection has changed. This event is fired only when the selection change was the only change that happened\n * in the document, and old selection is different then the new selection.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChange\n * @param {Object} data\n * @param {module:engine/view/documentselection~DocumentSelection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n\n/**\n * Fired when selection stops changing.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChangeDone\n * @param {Object} data\n * @param {module:engine/view/documentselection~DocumentSelection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/focusobserver\n */\n\n/* globals setTimeout, clearTimeout */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:focus Focus}\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class FocusObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'focus', 'blur' ];\n\t\tthis.useCapture = true;\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'focus', () => {\n\t\t\tdocument.isFocused = true;\n\n\t\t\t// Unfortunately native `selectionchange` event is fired asynchronously.\n\t\t\t// We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\n\t\t\t// overwrite new DOM selection with selection from the view.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\n\t\t\t// Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\n\t\t\tthis._renderTimeoutId = setTimeout( () => view.forceRender(), 50 );\n\t\t} );\n\n\t\tdocument.on( 'blur', ( evt, data ) => {\n\t\t\tconst selectedEditable = document.selection.editableElement;\n\n\t\t\tif ( selectedEditable === null || selectedEditable === data.target ) {\n\t\t\t\tdocument.isFocused = false;\n\n\t\t\t\t// Re-render the document to update view elements.\n\t\t\t\tview.forceRender();\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Identifier of the timeout currently used by focus listener to delay rendering execution.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} #_renderTimeoutId\n\t\t */\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tif ( this._renderTimeoutId ) {\n\t\t\tclearTimeout( this._renderTimeoutId );\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n}\n\n/**\n * Fired when one of the editables gets focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:focus\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when one of the editables loses focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:blur\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/compositionobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:compositionstart Compositionstart},\n * {@link module:engine/view/document~Document#event:compositionupdate compositionupdate} and\n * {@link module:engine/view/document~Document#event:compositionend compositionend} events observer.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class CompositionObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'compositionstart', 'compositionupdate', 'compositionend' ];\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'compositionstart', () => {\n\t\t\tdocument.isComposing = true;\n\t\t} );\n\n\t\tdocument.on( 'compositionend', () => {\n\t\t\tdocument.isComposing = false;\n\t\t} );\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when composition starts inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionstart\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when composition is updated inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionupdate\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when composition ends inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionend\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/inputobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * Observer for events connected with data input.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class InputObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'beforeinput' ];\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired before browser inputs (or deletes) some data.\n *\n * This event is available only on browsers which support DOM `beforeinput` event.\n *\n * Introduced by {@link module:engine/view/observer/inputobserver~InputObserver}.\n *\n * Note that because {@link module:engine/view/observer/inputobserver~InputObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/inputobserver~InputObserver\n * @event module:engine/view/document~Document#event:beforeinput\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/scroll\n */\n\nimport isRange from './isrange';\nimport Rect from './rect';\nimport isText from './istext';\n\nconst utils = {};\n\n/**\n * Makes any page `HTMLElement` or `Range` (`target`) visible inside the browser viewport.\n * This helper will scroll all `target` ancestors and the web browser viewport to reveal the target to\n * the user. If the `target` is already visible, nothing will happen.\n *\n * @param {HTMLElement|Range} options.target A target, which supposed to become visible to the user.\n * @param {Number} [options.viewportOffset] An offset from the edge of the viewport (in pixels)\n * the `target` will be moved by when the viewport is scrolled. It enhances the user experience\n * by keeping the `target` some distance from the edge of the viewport and thus making it easier to\n * read or edit by the user.\n */\nexport function scrollViewportToShowTarget( { target, viewportOffset = 0 } ) {\n\tconst targetWindow = getWindow( target );\n\tlet currentWindow = targetWindow;\n\tlet currentFrame = null;\n\n\t// Iterate over all windows, starting from target's parent window up to window#top.\n\twhile ( currentWindow ) {\n\t\tlet firstAncestorToScroll;\n\n\t\t// Let's scroll target's ancestors first to reveal it. Then, once the ancestor scrolls\n\t\t// settled down, the algorithm can eventually scroll the viewport of the current window.\n\t\t//\n\t\t// Note: If the current window is target's **original** window (e.g. the first one),\n\t\t// start scrolling the closest parent of the target. If not, scroll the closest parent\n\t\t// of an iframe that resides in the current window.\n\t\tif ( currentWindow == targetWindow ) {\n\t\t\tfirstAncestorToScroll = getParentElement( target );\n\t\t} else {\n\t\t\tfirstAncestorToScroll = getParentElement( currentFrame );\n\t\t}\n\n\t\t// Scroll the target's ancestors first. Once done, scrolling the viewport is easy.\n\t\tscrollAncestorsToShowRect( firstAncestorToScroll, () => {\n\t\t\t// Note: If the target does not belong to the current window **directly**,\n\t\t\t// i.e. it resides in an iframe belonging to the window, obtain the target's rect\n\t\t\t// in the coordinates of the current window. By default, a Rect returns geometry\n\t\t\t// relative to the current window's viewport. To make it work in a parent window,\n\t\t\t// it must be shifted.\n\t\t\treturn getRectRelativeToWindow( target, currentWindow );\n\t\t} );\n\n\t\t// Obtain the rect of the target after it has been scrolled within its ancestors.\n\t\t// It's time to scroll the viewport.\n\t\tconst targetRect = getRectRelativeToWindow( target, currentWindow );\n\n\t\tscrollWindowToShowRect( currentWindow, targetRect, viewportOffset );\n\n\t\tif ( currentWindow.parent != currentWindow ) {\n\t\t\t// Keep the reference to the <iframe> element the \"previous current window\" was\n\t\t\t// rendered within. It will be useful to re–calculate the rect of the target\n\t\t\t// in the parent window's relative geometry. The target's rect must be shifted\n\t\t\t// by it's iframe's position.\n\t\t\tcurrentFrame = currentWindow.frameElement;\n\t\t\tcurrentWindow = currentWindow.parent;\n\n\t\t\t// If the current window has some parent but frameElement is inaccessible, then they have\n\t\t\t// different domains/ports and, due to security reasons, accessing and scrolling\n\t\t\t// the parent window won't be possible.\n\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/930.\n\t\t\tif ( !currentFrame ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentWindow = null;\n\t\t}\n\t}\n}\n\n/**\n * Makes any page `HTMLElement` or `Range` (target) visible within its scrollable ancestors,\n * e.g. if they have `overflow: scroll` CSS style.\n *\n * @param {HTMLElement|Range} target A target, which supposed to become visible to the user.\n */\nexport function scrollAncestorsToShowTarget( target ) {\n\tconst targetParent = getParentElement( target );\n\n\tscrollAncestorsToShowRect( targetParent, () => {\n\t\treturn new Rect( target );\n\t} );\n}\n\n// TODO: Using a property value shorthand in the top of the file\n// causes JSDoc to throw errors. See https://github.com/cksource/docs-builder/issues/75.\nObject.assign( utils, {\n\tscrollViewportToShowTarget,\n\tscrollAncestorsToShowTarget\n} );\n\n// Makes a given rect visible within its parent window.\n//\n// Note: Avoid the situation where the caret is still in the viewport, but totally\n// at the edge of it. In such situation, if it moved beyond the viewport in the next\n// action e.g. after paste, the scrolling would move it to the viewportOffset level\n// and it all would look like the caret visually moved up/down:\n//\n// 1.\n//\t\t| foo[]\n//\t\t|                                    <--- N px of space below the caret\n//\t\t+---------------------------------...\n//\n// 2. *paste*\n// 3.\n//\t\t|\n//\t\t|\n//\t\t+-foo-----------------------------...\n//\t\t  bar[]                              <--- caret below viewport, scrolling...\n//\n// 4. *scrolling*\n// 5.\n//\t\t|\n//\t\t| foo\n//\t\t| bar[]                              <--- caret precisely at the edge\n//\t\t+---------------------------------...\n//\n// To prevent this, this method checks the rects moved by the viewportOffset to cover\n// the upper/lower edge of the viewport. It makes sure if the action repeats, there's\n// no twitching – it's a purely visual improvement:\n//\n// 5. (after fix)\n//\t\t|\n//\t\t| foo\n//\t\t| bar[]\n//\t\t|                                    <--- N px of space below the caret\n//\t\t+---------------------------------...\n//\n// @private\n// @param {Window} window A window which is scrolled to reveal the rect.\n// @param {module:utils/dom/rect~Rect} rect A rect which is to be revealed.\n// @param {Number} viewportOffset See scrollViewportToShowTarget.\nfunction scrollWindowToShowRect( window, rect, viewportOffset ) {\n\tconst targetShiftedDownRect = rect.clone().moveBy( 0, viewportOffset );\n\tconst targetShiftedUpRect = rect.clone().moveBy( 0, -viewportOffset );\n\tconst viewportRect = new Rect( window ).excludeScrollbarsAndBorders();\n\n\tconst rects = [ targetShiftedUpRect, targetShiftedDownRect ];\n\n\tif ( !rects.every( rect => viewportRect.contains( rect ) ) ) {\n\t\tlet { scrollX, scrollY } = window;\n\n\t\tif ( isAbove( targetShiftedUpRect, viewportRect ) ) {\n\t\t\tscrollY -= viewportRect.top - rect.top + viewportOffset;\n\t\t} else if ( isBelow( targetShiftedDownRect, viewportRect ) ) {\n\t\t\tscrollY += rect.bottom - viewportRect.bottom + viewportOffset;\n\t\t}\n\n\t\t// TODO: Web browsers scroll natively to place the target in the middle\n\t\t// of the viewport. It's not a very popular case, though.\n\t\tif ( isLeftOf( rect, viewportRect ) ) {\n\t\t\tscrollX -= viewportRect.left - rect.left + viewportOffset;\n\t\t} else if ( isRightOf( rect, viewportRect ) ) {\n\t\t\tscrollX += rect.right - viewportRect.right + viewportOffset;\n\t\t}\n\n\t\twindow.scrollTo( scrollX, scrollY );\n\t}\n}\n\n// Recursively scrolls element ancestors to visually reveal a rect.\n//\n// @private\n// @param {HTMLElement} A parent The first ancestors to start scrolling.\n// @param {Function} getRect A function which returns the Rect, which is to be revealed.\nfunction scrollAncestorsToShowRect( parent, getRect ) {\n\tconst parentWindow = getWindow( parent );\n\tlet parentRect, targetRect;\n\n\twhile ( parent != parentWindow.document.body ) {\n\t\ttargetRect = getRect();\n\t\tparentRect = new Rect( parent ).excludeScrollbarsAndBorders();\n\n\t\tif ( !parentRect.contains( targetRect ) ) {\n\t\t\tif ( isAbove( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollTop -= parentRect.top - targetRect.top;\n\t\t\t} else if ( isBelow( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollTop += targetRect.bottom - parentRect.bottom;\n\t\t\t}\n\n\t\t\tif ( isLeftOf( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollLeft -= parentRect.left - targetRect.left;\n\t\t\t} else if ( isRightOf( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollLeft += targetRect.right - parentRect.right;\n\t\t\t}\n\t\t}\n\n\t\tparent = parent.parentNode;\n\t}\n}\n\n// Determines if a given `Rect` extends beyond the bottom edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isBelow( firstRect, secondRect ) {\n\treturn firstRect.bottom > secondRect.bottom;\n}\n\n// Determines if a given `Rect` extends beyond the top edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isAbove( firstRect, secondRect ) {\n\treturn firstRect.top < secondRect.top;\n}\n\n// Determines if a given `Rect` extends beyond the left edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isLeftOf( firstRect, secondRect ) {\n\treturn firstRect.left < secondRect.left;\n}\n\n// Determines if a given `Rect` extends beyond the right edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isRightOf( firstRect, secondRect ) {\n\treturn firstRect.right > secondRect.right;\n}\n\n// Returns the closest window of an element or range.\n//\n// @private\n// @param {HTMLElement|Range} firstRect\n// @returns {Window}\nfunction getWindow( elementOrRange ) {\n\tif ( isRange( elementOrRange ) ) {\n\t\treturn elementOrRange.startContainer.ownerDocument.defaultView;\n\t} else {\n\t\treturn elementOrRange.ownerDocument.defaultView;\n\t}\n}\n\n// Returns the closest parent of an element or DOM range.\n//\n// @private\n// @param {HTMLElement|Range} firstRect\n// @returns {HTMLelement}\nfunction getParentElement( elementOrRange ) {\n\tif ( isRange( elementOrRange ) ) {\n\t\tlet parent = elementOrRange.commonAncestorContainer;\n\n\t\t// If a Range is attached to the Text, use the closest element ancestor.\n\t\tif ( isText( parent ) ) {\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\treturn parent;\n\t} else {\n\t\treturn elementOrRange.parentNode;\n\t}\n}\n\n// Returns the rect of an element or range residing in an iframe.\n// The result rect is relative to the geometry of the passed window instance.\n//\n// @private\n// @param {HTMLElement|Range} target Element or range which rect should be returned.\n// @param {Window} relativeWindow A window the rect should be relative to.\n// @returns {module:utils/dom/rect~Rect}\nfunction getRectRelativeToWindow( target, relativeWindow ) {\n\tconst targetWindow = getWindow( target );\n\tconst rect = new Rect( target );\n\n\tif ( targetWindow === relativeWindow ) {\n\t\treturn rect;\n\t} else {\n\t\tlet currentWindow = targetWindow;\n\n\t\twhile ( currentWindow != relativeWindow ) {\n\t\t\tconst frame = currentWindow.frameElement;\n\t\t\tconst frameRect = new Rect( frame ).excludeScrollbarsAndBorders();\n\n\t\t\trect.moveBy( frameRect.left, frameRect.top );\n\n\t\t\tcurrentWindow = currentWindow.parent;\n\t\t}\n\t}\n\n\treturn rect;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/view\n */\n\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\nimport InputObserver from './observer/inputobserver';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\tconstructor() {\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = new Document();\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} used by\n\t\t * {@link module:engine/view/view~View#_renderer renderer}\n\t\t * and {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = new DomConverter();\n\n\t\t/**\n\t\t * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Map.<String, HTMLElement>}\n\t\t */\n\t\tthis.domRoots = new Map();\n\n\t\t/**\n\t\t * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isRenderingInProgress\n\t\t */\n\t\tthis.set( 'isRenderingInProgress', false );\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n\t\t *\n\t\t * @protected\n\t\t * @type {module:engine/view/renderer~Renderer}\n\t\t */\n\t\tthis._renderer = new Renderer( this.domConverter, this.document.selection );\n\t\tthis._renderer.bind( 'isFocused' ).to( this.document );\n\n\t\t/**\n\t\t * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n\t\t * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n\t\t * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n\t\t * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap.<HTMLElement,Object>}\n\t\t */\n\t\tthis._initialDomRootAttributes = new WeakMap();\n\n\t\t/**\n\t\t * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<Function, module:engine/view/observer/observer~Observer>}\n\t\t */\n\t\tthis._observers = new Map();\n\n\t\t/**\n\t\t * Is set to `true` when {@link #change view changes} are currently in progress.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._ongoingChange = false;\n\n\t\t/**\n\t\t * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._postFixersInProgress = false;\n\n\t\t/**\n\t\t * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._renderingDisabled = false;\n\n\t\t/**\n\t\t * Internal flag that disables rendering when there are no changes since the last rendering.\n\t\t * It stores information about changed selection and changed elements from attached document roots.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._hasChangedSinceTheLastRendering = false;\n\n\t\t/**\n\t\t * DowncastWriter instance used in {@link #change change method} callbacks.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/view/downcastwriter~DowncastWriter}\n\t\t */\n\t\tthis._writer = new DowncastWriter( this.document );\n\n\t\t// Add default observers.\n\t\tthis.addObserver( MutationObserver );\n\t\tthis.addObserver( SelectionObserver );\n\t\tthis.addObserver( FocusObserver );\n\t\tthis.addObserver( KeyObserver );\n\t\tthis.addObserver( FakeSelectionObserver );\n\t\tthis.addObserver( CompositionObserver );\n\n\t\tif ( env.isAndroid ) {\n\t\t\tthis.addObserver( InputObserver );\n\t\t}\n\n\t\t// Inject quirks handlers.\n\t\tinjectQuirksHandling( this );\n\t\tinjectUiElementHandling( this );\n\n\t\t// Use 'normal' priority so that rendering is performed as first when using that priority.\n\t\tthis.on( 'render', () => {\n\t\t\tthis._render();\n\n\t\t\t// Informs that layout has changed after render.\n\t\t\tthis.document.fire( 'layoutChanged' );\n\n\t\t\t// Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n\t\t\tthis._hasChangedSinceTheLastRendering = false;\n\t\t} );\n\n\t\t// Listen to the document selection changes directly.\n\t\tthis.listenTo( this.document.selection, 'change', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches a DOM root element to the view element and enable all observers on that element.\n\t * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n\t * with the view what means that all child nodes will be removed and replaced with content of the view root.\n\t *\n\t * This method also will change view element name as the same as tag name of given dom root.\n\t * Name is always transformed to lower case.\n\t *\n\t * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n\t *\n\t * @param {Element} domRoot DOM root element.\n\t * @param {String} [name='main'] Name of the root.\n\t */\n\tattachDomRoot( domRoot, name = 'main' ) {\n\t\tconst viewRoot = this.document.getRoot( name );\n\n\t\t// Set view root name the same as DOM root tag name.\n\t\tviewRoot._name = domRoot.tagName.toLowerCase();\n\n\t\tconst initialDomRootAttributes = {};\n\n\t\t// 1. Copy and cache the attributes to remember the state of the element before attaching.\n\t\t//    The cached attributes will be restored in detachDomRoot() so the element goes to the\n\t\t//    clean state as if the editing view never used it.\n\t\t// 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n\t\t//    The editing view takes over the attribute management completely because various\n\t\t//    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n\t\t//    cannot be managed by the engine and the UI library at the same time.\n\t\tfor ( const { name, value } of Array.from( domRoot.attributes ) ) {\n\t\t\tinitialDomRootAttributes[ name ] = value;\n\n\t\t\t// Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n\t\t\t// and its descendants could have already set some using the writer.addClass() on the view\n\t\t\t// document root. They haven't been rendered yet so they are not present in the DOM root.\n\t\t\t// Using writer.setAttribute( 'class', ... ) would override them completely.\n\t\t\tif ( name === 'class' ) {\n\t\t\t\tthis._writer.addClass( value.split( ' ' ), viewRoot );\n\t\t\t} else {\n\t\t\t\tthis._writer.setAttribute( name, value, viewRoot );\n\t\t\t}\n\t\t}\n\n\t\tthis._initialDomRootAttributes.set( domRoot, initialDomRootAttributes );\n\n\t\tconst updateContenteditableAttribute = () => {\n\t\t\tthis._writer.setAttribute( 'contenteditable', !viewRoot.isReadOnly, viewRoot );\n\n\t\t\tif ( viewRoot.isReadOnly ) {\n\t\t\t\tthis._writer.addClass( 'ck-read-only', viewRoot );\n\t\t\t} else {\n\t\t\t\tthis._writer.removeClass( 'ck-read-only', viewRoot );\n\t\t\t}\n\t\t};\n\n\t\t// Set initial value.\n\t\tupdateContenteditableAttribute();\n\n\t\tthis.domRoots.set( name, domRoot );\n\t\tthis.domConverter.bindElements( domRoot, viewRoot );\n\t\tthis._renderer.markToSync( 'children', viewRoot );\n\t\tthis._renderer.markToSync( 'attributes', viewRoot );\n\t\tthis._renderer.domDocuments.add( domRoot.ownerDocument );\n\n\t\tviewRoot.on( 'change:children', ( evt, node ) => this._renderer.markToSync( 'children', node ) );\n\t\tviewRoot.on( 'change:attributes', ( evt, node ) => this._renderer.markToSync( 'attributes', node ) );\n\t\tviewRoot.on( 'change:text', ( evt, node ) => this._renderer.markToSync( 'text', node ) );\n\t\tviewRoot.on( 'change:isReadOnly', () => this.change( updateContenteditableAttribute ) );\n\n\t\tviewRoot.on( 'change', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.observe( domRoot, name );\n\t\t}\n\t}\n\n\t/**\n\t * Detaches a DOM root element from the view element and restores its attributes to the state before\n\t * {@link #attachDomRoot `attachDomRoot()`}.\n\t *\n\t * @param {String} name Name of the root to detach.\n\t */\n\tdetachDomRoot( name ) {\n\t\tconst domRoot = this.domRoots.get( name );\n\n\t\t// Remove all root attributes so the DOM element is \"bare\".\n\t\tArray.from( domRoot.attributes ).forEach( ( { name } ) => domRoot.removeAttribute( name ) );\n\n\t\tconst initialDomRootAttributes = this._initialDomRootAttributes.get( domRoot );\n\n\t\t// Revert all view root attributes back to the state before attachDomRoot was called.\n\t\tfor ( const attribute in initialDomRootAttributes ) {\n\t\t\tdomRoot.setAttribute( attribute, initialDomRootAttributes[ attribute ] );\n\t\t}\n\n\t\tthis.domRoots.delete( name );\n\t\tthis.domConverter.unbindDomElement( domRoot );\n\t}\n\n\t/**\n\t * Gets DOM root element.\n\t *\n\t * @param {String} [name='main']  Name of the root.\n\t * @returns {Element} DOM root element instance.\n\t */\n\tgetDomRoot( name = 'main' ) {\n\t\treturn this.domRoots.get( name );\n\t}\n\n\t/**\n\t * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n\t * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n\t * {@link #domRoots DOM roots}.\n\t *\n\t * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n\t * when registered for the first time. This means that features and other components can register a single observer\n\t * multiple times without caring whether it has been already added or not.\n\t *\n\t * @param {Function} Observer The constructor of an observer to add.\n\t * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n\t * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n\t */\n\taddObserver( Observer ) {\n\t\tlet observer = this._observers.get( Observer );\n\n\t\tif ( observer ) {\n\t\t\treturn observer;\n\t\t}\n\n\t\tobserver = new Observer( this );\n\n\t\tthis._observers.set( Observer, observer );\n\n\t\tfor ( const [ name, domElement ] of this.domRoots ) {\n\t\t\tobserver.observe( domElement, name );\n\t\t}\n\n\t\tobserver.enable();\n\n\t\treturn observer;\n\t}\n\n\t/**\n\t * Returns observer of the given type or `undefined` if such observer has not been added yet.\n\t *\n\t * @param {Function} Observer The constructor of an observer to get.\n\t * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n\t */\n\tgetObserver( Observer ) {\n\t\treturn this._observers.get( Observer );\n\t}\n\n\t/**\n\t * Disables all added observers.\n\t */\n\tdisableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.disable();\n\t\t}\n\t}\n\n\t/**\n\t * Enables all added observers.\n\t */\n\tenableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.enable();\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n\t * caret, if not already visible to the user.\n\t */\n\tscrollToTheSelection() {\n\t\tconst range = this.document.selection.getFirstRange();\n\n\t\tif ( range ) {\n\t\t\tscrollViewportToShowTarget( {\n\t\t\t\ttarget: this.domConverter.viewRangeToDom( range ),\n\t\t\t\tviewportOffset: 20\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n\t * that is currently having selection inside.\n\t */\n\tfocus() {\n\t\tif ( !this.document.isFocused ) {\n\t\t\tconst editable = this.document.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t\tthis.forceRender();\n\t\t\t} else {\n\t\t\t\t// Before focusing view document, selection should be placed inside one of the view's editables.\n\t\t\t\t// Normally its selection will be converted from model document (which have default selection), but\n\t\t\t\t// when using view document on its own, we need to manually place selection before focusing it.\n\t\t\t\t//\n\t\t\t\t// @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n\t * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n\t * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n\t * to nest calls one inside another and still performs a single rendering after all those changes are made.\n\t * It also returns the return value of its callback.\n\t *\n\t *\t\tconst text = view.change( writer => {\n\t *\t\t\tconst newText = writer.createText( 'foo' );\n\t *\t\t\twriter.insert( position1, newText );\n\t *\n\t *\t\t\tview.change( writer => {\n\t *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.remove( range );\n\t *\n\t * \t\t\treturn newText;\n\t *\t\t} );\n\t *\n\t * When the outermost change block is done and rendering to the DOM is over the\n\t * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n\t *\n\t * This method throws a `applying-view-changes-on-rendering` error when\n\t * the change block is used after rendering to the DOM has started.\n\t *\n\t * @param {Function} callback Callback function which may modify the view.\n\t * @returns {*} Value returned by the callback.\n\t */\n\tchange( callback ) {\n\t\tif ( this.isRenderingInProgress || this._postFixersInProgress ) {\n\t\t\t/**\n\t\t\t * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n\t\t\t * cause some unexpected behaviour and inconsistency between the DOM and the view.\n\t\t\t * This may be caused by:\n\t\t\t *\n\t\t\t * * calling {@link #change} or {@link #forceRender} during rendering process,\n\t\t\t * * calling {@link #change} or {@link #forceRender} inside of\n\t\t\t *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n\t\t\t *\n\t\t\t * @error cannot-change-view-tree\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'cannot-change-view-tree: ' +\n\t\t\t\t'Attempting to make changes to the view when it is in an incorrect state: rendering or post-fixers are in progress. ' +\n\t\t\t\t'This may cause some unexpected behavior and inconsistency between the DOM and the view.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\t// Recursive call to view.change() method - execute listener immediately.\n\t\t\tif ( this._ongoingChange ) {\n\t\t\t\treturn callback( this._writer );\n\t\t\t}\n\n\t\t\t// This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n\t\t\t// event for all nested calls.\n\t\t\tthis._ongoingChange = true;\n\t\t\tconst callbackResult = callback( this._writer );\n\t\t\tthis._ongoingChange = false;\n\n\t\t\t// This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n\t\t\t// view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all\n\t\t\t// changes. Also, we don't need to render anything if there're no changes since last rendering.\n\t\t\tif ( !this._renderingDisabled && this._hasChangedSinceTheLastRendering ) {\n\t\t\t\tthis._postFixersInProgress = true;\n\t\t\t\tthis.document._callPostFixers( this._writer );\n\t\t\t\tthis._postFixersInProgress = false;\n\n\t\t\t\tthis.fire( 'render' );\n\t\t\t}\n\n\t\t\treturn callbackResult;\n\t\t} catch ( err ) {\n\t\t\tCKEditorError.rethrowUnexpectedError( err, this );\n\t\t}\n\t}\n\n\t/**\n\t * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n\t * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n\t *\n\t * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n\t * block and the view will automatically check whether it needs to render DOM or not.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n\t * trying to re-render when rendering to DOM has already started.\n\t */\n\tforceRender() {\n\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\tthis.change( () => {} );\n\t}\n\n\t/**\n\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n\t */\n\tdestroy() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.destroy();\n\t\t}\n\n\t\tthis.document.destroy();\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = view.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = view.createRange( start, end );\n\t *\t\tconst selection = view.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ view.createRange( start1, end2 ), view.createRange( star2, end2 ) ];\n\t *\t\tconst selection = view.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = view.createSelection();\n\t *\t\tconst selection = view.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = view.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = view.createPositionFromPath( root, path );\n\t *\t\tconst selection = view.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = view.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = view.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = view.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = view.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s factory method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = view.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = view.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n\t * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n\t *\n\t * @protected\n\t * @param {Boolean} flag A flag indicates whether the rendering should be disabled.\n\t */\n\t_disableRendering( flag ) {\n\t\tthis._renderingDisabled = flag;\n\n\t\tif ( flag == false ) {\n\t\t\t// Render when you stop blocking rendering.\n\t\t\tthis.change( () => {} );\n\t\t}\n\t}\n\n\t/**\n\t * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n\t * before rendering and re-enabled after that.\n\t *\n\t * @private\n\t */\n\t_render() {\n\t\tthis.isRenderingInProgress = true;\n\t\tthis.disableObservers();\n\t\tthis._renderer.render();\n\t\tthis.enableObservers();\n\t\tthis.isRenderingInProgress = false;\n\t}\n\n\t/**\n\t * Fired after a topmost {@link module:engine/view/view~View#change change block} and all\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers} are executed.\n\t *\n\t * Actual rendering is performed as a first listener on 'normal' priority.\n\t *\n\t *\t\tview.on( 'render', () => {\n\t *\t\t\t// Rendering to the DOM is complete.\n\t *\t\t} );\n\t *\n\t * This event is useful when you want to update interface elements after the rendering, e.g. position of the\n\t * balloon panel. If you wants to change view structure use\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers}.\n\t *\n\t * @event module:engine/view/view~View#event:render\n\t */\n}\n\nmix( View, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/mapper\n */\n\nimport ModelPosition from '../model/position';\nimport ModelRange from '../model/range';\n\nimport ViewPosition from '../view/position';\nimport ViewRange from '../view/range';\nimport ViewText from '../view/text';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Maps elements, positions and markers between {@link module:engine/view/document~Document the view} and\n * {@link module:engine/model/model the model}.\n *\n * The instance of the Mapper used for the editing pipeline is available in\n * {@link module:engine/controller/editingcontroller~EditingController#mapper `editor.editing.mapper`}.\n *\n * Mapper uses bound elements to find corresponding elements and positions, so, to get proper results,\n * all model elements should be {@link module:engine/conversion/mapper~Mapper#bindElements bound}.\n *\n * To map complex model to/from view relations, you may provide custom callbacks for\n * {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition modelToViewPosition event} and\n * {@link module:engine/conversion/mapper~Mapper#event:viewToModelPosition viewToModelPosition event} that are fired whenever\n * a position mapping request occurs.\n * Those events are fired by {@link module:engine/conversion/mapper~Mapper#toViewPosition toViewPosition}\n * and {@link module:engine/conversion/mapper~Mapper#toModelPosition toModelPosition} methods. `Mapper` adds it's own default callbacks\n * with `'lowest'` priority. To override default `Mapper` mapping, add custom callback with higher priority and\n * stop the event.\n */\nexport default class Mapper {\n\t/**\n\t * Creates an instance of the mapper.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Model element to view element mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._modelToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View element to model element mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._viewToModelMapping = new WeakMap();\n\n\t\t/**\n\t\t * A map containing callbacks between view element names and functions evaluating length of view elements\n\t\t * in model.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._viewToModelLengthCallbacks = new Map();\n\n\t\t/**\n\t\t * Model marker name to view elements mapping.\n\t\t *\n\t\t * Keys are `String`s while values are `Set`s with {@link module:engine/view/element~Element view elements}.\n\t\t * One marker (name) can be mapped to multiple elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._markerNameToElements = new Map();\n\n\t\t/**\n\t\t * View element to model marker names mapping.\n\t\t *\n\t\t * This is reverse to {@link ~Mapper#_markerNameToElements} map.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._elementToMarkerNames = new Map();\n\n\t\t/**\n\t\t * Stores marker names of markers which has changed due to unbinding a view element (so it is assumed that the view element\n\t\t * has been removed, moved or renamed).\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<module:engine/model/markercollection~Marker>}\n\t\t */\n\t\tthis._unboundMarkerNames = new Set();\n\n\t\t// Default mapper algorithm for mapping model position to view position.\n\t\tthis.on( 'modelToViewPosition', ( evt, data ) => {\n\t\t\tif ( data.viewPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewContainer = this._modelToViewMapping.get( data.modelPosition.parent );\n\n\t\t\tdata.viewPosition = this._findPositionIn( viewContainer, data.modelPosition.offset );\n\t\t}, { priority: 'low' } );\n\n\t\t// Default mapper algorithm for mapping view position to model position.\n\t\tthis.on( 'viewToModelPosition', ( evt, data ) => {\n\t\t\tif ( data.modelPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewBlock = this.findMappedViewAncestor( data.viewPosition );\n\t\t\tconst modelParent = this._viewToModelMapping.get( viewBlock );\n\t\t\tconst modelOffset = this._toModelOffset( data.viewPosition.parent, data.viewPosition.offset, viewBlock );\n\n\t\t\tdata.modelPosition = ModelPosition._createAt( modelParent, modelOffset );\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * Marks model and view elements as corresponding. Corresponding elements can be retrieved by using\n\t * the {@link module:engine/conversion/mapper~Mapper#toModelElement toModelElement} and\n\t * {@link module:engine/conversion/mapper~Mapper#toViewElement toViewElement} methods.\n\t * The information that elements are bound is also used to translate positions.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element.\n\t * @param {module:engine/view/element~Element} viewElement View element.\n\t */\n\tbindElements( modelElement, viewElement ) {\n\t\tthis._modelToViewMapping.set( modelElement, viewElement );\n\t\tthis._viewToModelMapping.set( viewElement, modelElement );\n\t}\n\n\t/**\n\t * Unbinds given {@link module:engine/view/element~Element view element} from the map.\n\t *\n\t * **Note:** view-to-model binding will be removed, if it existed. However, corresponding model-to-view binding\n\t * will be removed only if model element is still bound to passed `viewElement`.\n\t *\n\t * This behavior lets for re-binding model element to another view element without fear of losing the new binding\n\t * when the previously bound view element is unbound.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement View element to unbind.\n\t */\n\tunbindViewElement( viewElement ) {\n\t\tconst modelElement = this.toModelElement( viewElement );\n\n\t\tthis._viewToModelMapping.delete( viewElement );\n\n\t\tif ( this._elementToMarkerNames.has( viewElement ) ) {\n\t\t\tfor ( const markerName of this._elementToMarkerNames.get( viewElement ) ) {\n\t\t\t\tthis._unboundMarkerNames.add( markerName );\n\t\t\t}\n\t\t}\n\n\t\tif ( this._modelToViewMapping.get( modelElement ) == viewElement ) {\n\t\t\tthis._modelToViewMapping.delete( modelElement );\n\t\t}\n\t}\n\n\t/**\n\t * Unbinds given {@link module:engine/model/element~Element model element} from the map.\n\t *\n\t * **Note:** model-to-view binding will be removed, if it existed. However, corresponding view-to-model binding\n\t * will be removed only if view element is still bound to passed `modelElement`.\n\t *\n\t * This behavior lets for re-binding view element to another model element without fear of losing the new binding\n\t * when the previously bound model element is unbound.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element to unbind.\n\t */\n\tunbindModelElement( modelElement ) {\n\t\tconst viewElement = this.toViewElement( modelElement );\n\n\t\tthis._modelToViewMapping.delete( modelElement );\n\n\t\tif ( this._viewToModelMapping.get( viewElement ) == modelElement ) {\n\t\t\tthis._viewToModelMapping.delete( viewElement );\n\t\t}\n\t}\n\n\t/**\n\t * Binds given marker name with given {@link module:engine/view/element~Element view element}. The element\n\t * will be added to the current set of elements bound with given marker name.\n\t *\n\t * @param {module:engine/view/element~Element} element Element to bind.\n\t * @param {String} name Marker name.\n\t */\n\tbindElementToMarker( element, name ) {\n\t\tconst elements = this._markerNameToElements.get( name ) || new Set();\n\t\telements.add( element );\n\n\t\tconst names = this._elementToMarkerNames.get( element ) || new Set();\n\t\tnames.add( name );\n\n\t\tthis._markerNameToElements.set( name, elements );\n\t\tthis._elementToMarkerNames.set( element, names );\n\t}\n\n\t/**\n\t * Unbinds an element from given marker name.\n\t *\n\t * @param {module:engine/view/element~Element} element Element to unbind.\n\t * @param {String} name Marker name.\n\t */\n\tunbindElementFromMarkerName( element, name ) {\n\t\tconst nameToElements = this._markerNameToElements.get( name );\n\n\t\tif ( nameToElements ) {\n\t\t\tnameToElements.delete( element );\n\n\t\t\tif ( nameToElements.size == 0 ) {\n\t\t\t\tthis._markerNameToElements.delete( name );\n\t\t\t}\n\t\t}\n\n\t\tconst elementToNames = this._elementToMarkerNames.get( element );\n\n\t\tif ( elementToNames ) {\n\t\t\telementToNames.delete( name );\n\n\t\t\tif ( elementToNames.size == 0 ) {\n\t\t\t\tthis._elementToMarkerNames.delete( element );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns all marker names of markers which has changed due to unbinding a view element (so it is assumed that the view element\n\t * has been removed, moved or renamed) since the last flush. After returning, the marker names list is cleared.\n\t *\n\t * @returns {Array.<String>}\n\t */\n\tflushUnboundMarkerNames() {\n\t\tconst markerNames = Array.from( this._unboundMarkerNames );\n\n\t\tthis._unboundMarkerNames.clear();\n\n\t\treturn markerNames;\n\t}\n\n\t/**\n\t * Removes all model to view and view to model bindings.\n\t */\n\tclearBindings() {\n\t\tthis._modelToViewMapping = new WeakMap();\n\t\tthis._viewToModelMapping = new WeakMap();\n\t\tthis._markerNameToElements = new Map();\n\t\tthis._elementToMarkerNames = new Map();\n\t\tthis._unboundMarkerNames = new Set();\n\t}\n\n\t/**\n\t * Gets the corresponding model element.\n\t *\n\t * **Note:** {@link module:engine/view/uielement~UIElement} does not have corresponding element in model.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement View element.\n\t * @returns {module:engine/model/element~Element|undefined} Corresponding model element or `undefined` if not found.\n\t */\n\ttoModelElement( viewElement ) {\n\t\treturn this._viewToModelMapping.get( viewElement );\n\t}\n\n\t/**\n\t * Gets the corresponding view element.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element.\n\t * @returns {module:engine/view/element~Element|undefined} Corresponding view element or `undefined` if not found.\n\t */\n\ttoViewElement( modelElement ) {\n\t\treturn this._modelToViewMapping.get( modelElement );\n\t}\n\n\t/**\n\t * Gets the corresponding model range.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {module:engine/model/range~Range} Corresponding model range.\n\t */\n\ttoModelRange( viewRange ) {\n\t\treturn new ModelRange( this.toModelPosition( viewRange.start ), this.toModelPosition( viewRange.end ) );\n\t}\n\n\t/**\n\t * Gets the corresponding view range.\n\t *\n\t * @param {module:engine/model/range~Range} modelRange Model range.\n\t * @returns {module:engine/view/range~Range} Corresponding view range.\n\t */\n\ttoViewRange( modelRange ) {\n\t\treturn new ViewRange( this.toViewPosition( modelRange.start ), this.toViewPosition( modelRange.end ) );\n\t}\n\n\t/**\n\t * Gets the corresponding model position.\n\t *\n\t * @fires viewToModelPosition\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {module:engine/model/position~Position} Corresponding model position.\n\t */\n\ttoModelPosition( viewPosition ) {\n\t\tconst data = {\n\t\t\tviewPosition,\n\t\t\tmapper: this\n\t\t};\n\n\t\tthis.fire( 'viewToModelPosition', data );\n\n\t\treturn data.modelPosition;\n\t}\n\n\t/**\n\t * Gets the corresponding view position.\n\t *\n\t * @fires modelToViewPosition\n\t * @param {module:engine/model/position~Position} modelPosition Model position.\n\t * @param {Object} [options] Additional options for position mapping process.\n\t * @param {Boolean} [options.isPhantom=false] Should be set to `true` if the model position to map is pointing to a place\n\t * in model tree which no longer exists. For example, it could be an end of a removed model range.\n\t * @returns {module:engine/view/position~Position} Corresponding view position.\n\t */\n\ttoViewPosition( modelPosition, options = { isPhantom: false } ) {\n\t\tconst data = {\n\t\t\tmodelPosition,\n\t\t\tmapper: this,\n\t\t\tisPhantom: options.isPhantom\n\t\t};\n\n\t\tthis.fire( 'modelToViewPosition', data );\n\n\t\treturn data.viewPosition;\n\t}\n\n\t/**\n\t * Gets all view elements bound to the given marker name.\n\t *\n\t * @param {String} name Marker name.\n\t * @returns {Set.<module:engine/view/element~Element>|null} View elements bound with given marker name or `null`\n\t * if no elements are bound to given marker name.\n\t */\n\tmarkerNameToElements( name ) {\n\t\tconst boundElements = this._markerNameToElements.get( name );\n\n\t\tif ( !boundElements ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements = new Set();\n\n\t\tfor ( const element of boundElements ) {\n\t\t\tif ( element.is( 'attributeElement' ) ) {\n\t\t\t\tfor ( const clone of element.getElementsWithSameId() ) {\n\t\t\t\t\telements.add( clone );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\telements.add( element );\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Registers a callback that evaluates the length in the model of a view element with given name.\n\t *\n\t * The callback is fired with one argument, which is a view element instance. The callback is expected to return\n\t * a number representing the length of view element in model.\n\t *\n\t *\t\t// List item in view may contain nested list, which have other list items. In model though,\n\t *\t\t// the lists are represented by flat structure. Because of those differences, length of list view element\n\t *\t\t// may be greater than one. In the callback it's checked how many nested list items are in evaluated list item.\n\t *\n\t *\t\tfunction getViewListItemLength( element ) {\n\t *\t\t\tlet length = 1;\n\t *\n\t *\t\t\tfor ( let child of element.getChildren() ) {\n\t *\t\t\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t *\t\t\t\t\tfor ( let item of child.getChildren() ) {\n\t *\t\t\t\t\t\tlength += getViewListItemLength( item );\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn length;\n\t *\t\t}\n\t *\n\t *\t\tmapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t *\n\t * @param {String} viewElementName Name of view element for which callback is registered.\n\t * @param {Function} lengthCallback Function return a length of view element instance in model.\n\t */\n\tregisterViewToModelLength( viewElementName, lengthCallback ) {\n\t\tthis._viewToModelLengthCallbacks.set( viewElementName, lengthCallback );\n\t}\n\n\t/**\n\t * For given `viewPosition`, finds and returns the closest ancestor of this position that has a mapping to\n\t * the model.\n\t *\n\t * @param {module:engine/view/position~Position} viewPosition Position for which mapped ancestor should be found.\n\t * @returns {module:engine/view/element~Element}\n\t */\n\tfindMappedViewAncestor( viewPosition ) {\n\t\tlet parent = viewPosition.parent;\n\n\t\twhile ( !this._viewToModelMapping.has( parent ) ) {\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn parent;\n\t}\n\n\t/**\n\t * Calculates model offset based on the view position and the block element.\n\t *\n\t * Example:\n\t *\n\t *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, p ) -> 5\n\t *\n\t * Is a sum of:\n\t *\n\t *\t\t<p>foo|<b>bar</b></p> // _toModelOffset( p, 3, p ) -> 3\n\t *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, b ) -> 2\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewParent Position parent.\n\t * @param {Number} viewOffset Position offset.\n\t * @param {module:engine/view/element~Element} viewBlock Block used as a base to calculate offset.\n\t * @returns {Number} Offset in the model.\n\t */\n\t_toModelOffset( viewParent, viewOffset, viewBlock ) {\n\t\tif ( viewBlock != viewParent ) {\n\t\t\t// See example.\n\t\t\tconst offsetToParentStart = this._toModelOffset( viewParent.parent, viewParent.index, viewBlock );\n\t\t\tconst offsetInParent = this._toModelOffset( viewParent, viewOffset, viewParent );\n\n\t\t\treturn offsetToParentStart + offsetInParent;\n\t\t}\n\n\t\t// viewBlock == viewParent, so we need to calculate the offset in the parent element.\n\n\t\t// If the position is a text it is simple (\"ba|r\" -> 2).\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\treturn viewOffset;\n\t\t}\n\n\t\t// If the position is in an element we need to sum lengths of siblings ( <b> bar </b> foo | -> 3 + 3 = 6 ).\n\t\tlet modelOffset = 0;\n\n\t\tfor ( let i = 0; i < viewOffset; i++ ) {\n\t\t\tmodelOffset += this.getModelLength( viewParent.getChild( i ) );\n\t\t}\n\n\t\treturn modelOffset;\n\t}\n\n\t/**\n\t * Gets the length of the view element in the model.\n\t *\n\t * The length is calculated as follows:\n\t * * if {@link #registerViewToModelLength length mapping callback} is provided for given `viewNode` it is used to\n\t * evaluate model length (`viewNode` is used as first and only parameter passed to the callback),\n\t * * length of a {@link module:engine/view/text~Text text node} is equal to the length of it's\n\t * {@link module:engine/view/text~Text#data data},\n\t * * length of a {@link module:engine/view/uielement~UIElement ui element} is equal to 0,\n\t * * length of a mapped {@link module:engine/view/element~Element element} is equal to 1,\n\t * * length of a not-mapped {@link module:engine/view/element~Element element} is equal to the length of it's children.\n\t *\n\t * Examples:\n\t *\n\t *\t\tfoo                          -> 3 // Text length is equal to it's data length.\n\t *\t\t<p>foo</p>                   -> 1 // Length of an element which is mapped is by default equal to 1.\n\t *\t\t<b>foo</b>                   -> 3 // Length of an element which is not mapped is a length of its children.\n\t *\t\t<div><p>x</p><p>y</p></div>  -> 2 // Assuming that <div> is not mapped and <p> are mapped.\n\t *\n\t * @param {module:engine/view/element~Element} viewNode View node.\n\t * @returns {Number} Length of the node in the tree model.\n\t */\n\tgetModelLength( viewNode ) {\n\t\tif ( this._viewToModelLengthCallbacks.get( viewNode.name ) ) {\n\t\t\tconst callback = this._viewToModelLengthCallbacks.get( viewNode.name );\n\n\t\t\treturn callback( viewNode );\n\t\t} else if ( this._viewToModelMapping.has( viewNode ) ) {\n\t\t\treturn 1;\n\t\t} else if ( viewNode.is( 'text' ) ) {\n\t\t\treturn viewNode.data.length;\n\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tlet len = 0;\n\n\t\t\tfor ( const child of viewNode.getChildren() ) {\n\t\t\t\tlen += this.getModelLength( child );\n\t\t\t}\n\n\t\t\treturn len;\n\t\t}\n\t}\n\n\t/**\n\t * Finds the position in the view node (or its children) with the expected model offset.\n\t *\n\t * Example:\n\t *\n\t *\t\t<p>fo<b>bar</b>bom</p> -> expected offset: 4\n\t *\n\t *\t\t_findPositionIn( p, 4 ):\n\t *\t\t<p>|fo<b>bar</b>bom</p> -> expected offset: 4, actual offset: 0\n\t *\t\t<p>fo|<b>bar</b>bom</p> -> expected offset: 4, actual offset: 2\n\t *\t\t<p>fo<b>bar</b>|bom</p> -> expected offset: 4, actual offset: 5 -> we are too far\n\t *\n\t *\t\t_findPositionIn( b, 4 - ( 5 - 3 ) ):\n\t *\t\t<p>fo<b>|bar</b>bom</p> -> expected offset: 2, actual offset: 0\n\t *\t\t<p>fo<b>bar|</b>bom</p> -> expected offset: 2, actual offset: 3 -> we are too far\n\t *\n\t *\t\t_findPositionIn( bar, 2 - ( 3 - 3 ) ):\n\t *\t\tWe are in the text node so we can simple find the offset.\n\t *\t\t<p>fo<b>ba|r</b>bom</p> -> expected offset: 2, actual offset: 2 -> position found\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewParent Tree view element in which we are looking for the position.\n\t * @param {Number} expectedOffset Expected offset.\n\t * @returns {module:engine/view/position~Position} Found position.\n\t */\n\t_findPositionIn( viewParent, expectedOffset ) {\n\t\t// Last scanned view node.\n\t\tlet viewNode;\n\t\t// Length of the last scanned view node.\n\t\tlet lastLength = 0;\n\n\t\tlet modelOffset = 0;\n\t\tlet viewOffset = 0;\n\n\t\t// In the text node it is simple: offset in the model equals offset in the text.\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\treturn new ViewPosition( viewParent, expectedOffset );\n\t\t}\n\n\t\t// In other cases we add lengths of child nodes to find the proper offset.\n\n\t\t// If it is smaller we add the length.\n\t\twhile ( modelOffset < expectedOffset ) {\n\t\t\tviewNode = viewParent.getChild( viewOffset );\n\t\t\tlastLength = this.getModelLength( viewNode );\n\t\t\tmodelOffset += lastLength;\n\t\t\tviewOffset++;\n\t\t}\n\n\t\t// If it equals we found the position.\n\t\tif ( modelOffset == expectedOffset ) {\n\t\t\treturn this._moveViewPositionToTextNode( new ViewPosition( viewParent, viewOffset ) );\n\t\t}\n\t\t// If it is higher we need to enter last child.\n\t\telse {\n\t\t\t// ( modelOffset - lastLength ) is the offset to the child we enter,\n\t\t\t// so we subtract it from the expected offset to fine the offset in the child.\n\t\t\treturn this._findPositionIn( viewNode, expectedOffset - ( modelOffset - lastLength ) );\n\t\t}\n\t}\n\n\t/**\n\t * Because we prefer positions in text nodes over positions next to text node moves view position to the text node\n\t * if it was next to it.\n\t *\n\t *\t\t<p>[]<b>foo</b></p> -> <p>[]<b>foo</b></p> // do not touch if position is not directly next to text\n\t *\t\t<p>foo[]<b>foo</b></p> -> <p>foo{}<b>foo</b></p> // move to text node\n\t *\t\t<p><b>[]foo</b></p> -> <p><b>{}foo</b></p> // move to text node\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} viewPosition Position potentially next to text node.\n\t * @returns {module:engine/view/position~Position} Position in text node if possible.\n\t */\n\t_moveViewPositionToTextNode( viewPosition ) {\n\t\t// If the position is just after text node, put it at the end of that text node.\n\t\t// If the position is just before text node, put it at the beginning of that text node.\n\t\tconst nodeBefore = viewPosition.nodeBefore;\n\t\tconst nodeAfter = viewPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof ViewText ) {\n\t\t\treturn new ViewPosition( nodeBefore, nodeBefore.data.length );\n\t\t} else if ( nodeAfter instanceof ViewText ) {\n\t\t\treturn new ViewPosition( nodeAfter, 0 );\n\t\t}\n\n\t\t// Otherwise, just return the given position.\n\t\treturn viewPosition;\n\t}\n\n\t/**\n\t * Fired for each model-to-view position mapping request. The purpose of this event is to enable custom model-to-view position\n\t * mapping. Callbacks added to this event take {@link module:engine/model/position~Position model position} and are expected to\n\t * calculate {@link module:engine/view/position~Position view position}. Calculated view position should be added as `viewPosition`\n\t * value in `data` object that is passed as one of parameters to the event callback.\n\t *\n\t * \t\t// Assume that \"captionedImage\" model element is converted to <img> and following <span> elements in view,\n\t * \t\t// and the model element is bound to <img> element. Force mapping model positions inside \"captionedImage\" to that\n\t * \t\t// <span> element.\n\t *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n\t *\t\t\tconst positionParent = modelPosition.parent;\n\t *\n\t *\t\t\tif ( positionParent.name == 'captionedImage' ) {\n\t *\t\t\t\tconst viewImg = data.mapper.toViewElement( positionParent );\n\t *\t\t\t\tconst viewCaption = viewImg.nextSibling; // The <span> element.\n\t *\n\t *\t\t\t\tdata.viewPosition = new ViewPosition( viewCaption, modelPosition.offset );\n\t *\n\t *\t\t\t\t// Stop the event if other callbacks should not modify calculated value.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** keep in mind that sometimes a \"phantom\" model position is being converted. \"Phantom\" model position is\n\t * a position that points to a non-existing place in model. Such position might still be valid for conversion, though\n\t * (it would point to a correct place in view when converted). One example of such situation is when a range is\n\t * removed from model, there may be a need to map the range's end (which is no longer valid model position). To\n\t * handle such situation, check `data.isPhantom` flag:\n\t *\n\t * \t\t// Assume that there is \"customElement\" model element and whenever position is before it, we want to move it\n\t * \t\t// to the inside of the view element bound to \"customElement\".\n\t *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n\t *\t\t\tif ( data.isPhantom ) {\n\t *\t\t\t\treturn;\n\t *\t\t\t}\n\t *\n\t *\t\t\t// Below line might crash for phantom position that does not exist in model.\n\t *\t\t\tconst sibling = data.modelPosition.nodeBefore;\n\t *\n\t *\t\t\t// Check if this is the element we are interested in.\n\t *\t\t\tif ( !sibling.is( 'customElement' ) ) {\n\t *\t\t\t\treturn;\n\t *\t\t\t}\n\t *\n\t *\t\t\tconst viewElement = data.mapper.toViewElement( sibling );\n\t *\n\t *\t\t\tdata.viewPosition = new ViewPosition( sibling, 0 );\n\t *\n\t *\t\t\tevt.stop();\n\t *\t\t} );\n\t *\n\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n\t * attach a custom callback after default callback and also use `data.viewPosition` calculated by default callback\n\t * (for example to fix it).\n\t *\n\t * **Note:** default mapping callback will not fire if `data.viewPosition` is already set.\n\t *\n\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n\t * the condition that checks if special case scenario happened should be as simple as possible.\n\t *\n\t * @event modelToViewPosition\n\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n\t * `viewPosition` value to that object with calculated {@link module:engine/view/position~Position view position}.\n\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n\t */\n\n\t/**\n\t * Fired for each view-to-model position mapping request. See {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition}.\n\t *\n\t * \t\t// See example in `modelToViewPosition` event description.\n\t * \t\t// This custom mapping will map positions from <span> element next to <img> to the \"captionedImage\" element.\n\t *\t\tmapper.on( 'viewToModelPosition', ( evt, data ) => {\n\t *\t\t\tconst positionParent = viewPosition.parent;\n\t *\n\t *\t\t\tif ( positionParent.hasClass( 'image-caption' ) ) {\n\t *\t\t\t\tconst viewImg = positionParent.previousSibling;\n\t *\t\t\t\tconst modelImg = data.mapper.toModelElement( viewImg );\n\t *\n\t *\t\t\t\tdata.modelPosition = new ModelPosition( modelImg, viewPosition.offset );\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n\t * attach a custom callback after default callback and also use `data.modelPosition` calculated by default callback\n\t * (for example to fix it).\n\t *\n\t * **Note:** default mapping callback will not fire if `data.modelPosition` is already set.\n\t *\n\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n\t * the condition that checks if special case scenario happened should be as simple as possible.\n\t *\n\t * @event viewToModelPosition\n\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n\t * `modelPosition` value to that object with calculated {@link module:engine/model/position~Position model position}.\n\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n\t */\n}\n\nmix( Mapper, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/modelconsumable\n */\n\nimport TextProxy from '../model/textproxy';\n\n/**\n * Manages a list of consumable values for {@link module:engine/model/item~Item model items}.\n *\n * Consumables are various aspects of the model. A model item can be broken down into singular properties that might be\n * taken into consideration when converting that item.\n *\n * `ModelConsumable` is used by {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} while analyzing changed\n * parts of {@link module:engine/model/document~Document the document}. The added / changed / removed model items are broken down\n * into singular properties (the item itself and it's attributes). All those parts are saved in `ModelConsumable`. Then,\n * during conversion, when given part of model item is converted (i.e. the view element has been inserted into the view,\n * but without attributes), consumable value is removed from `ModelConsumable`.\n *\n * For model items, `ModelConsumable` stores consumable values of one of following types: `insert`, `addattribute:<attributeKey>`,\n * `changeattributes:<attributeKey>`, `removeattributes:<attributeKey>`.\n *\n * In most cases, it is enough to let {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * gather consumable values, so there is no need to use\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#add add method} directly.\n * However, it is important to understand how consumable values can be\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n * See {@link module:engine/conversion/downcasthelpers default downcast converters} for more information.\n *\n * Keep in mind, that one conversion event may have multiple callbacks (converters) attached to it. Each of those is\n * able to convert one or more parts of the model. However, when one of those callbacks actually converts\n * something, other should not, because they would duplicate the results. Using `ModelConsumable` helps avoiding\n * this situation, because callbacks should only convert those values, which were not yet consumed from `ModelConsumable`.\n *\n * Consuming multiple values in a single callback:\n *\n *\t\t// Converter for custom `image` element that might have a `caption` element inside which changes\n *\t\t// how the image is displayed in the view:\n *\t\t//\n *\t\t// Model:\n *\t\t//\n *\t\t// [image]\n *\t\t//   └─ [caption]\n *\t\t//       └─ foo\n *\t\t//\n *\t\t// View:\n *\t\t//\n *\t\t// <figure>\n *\t\t//   ├─ <img />\n *\t\t//   └─ <caption>\n *\t\t//       └─ foo\n *\t\tmodelConversionDispatcher.on( 'insert:image', ( evt, data, conversionApi ) => {\n *\t\t\t// First, consume the `image` element.\n *\t\t\tconversionApi.consumable.consume( data.item, 'insert' );\n *\n *\t\t\t// Just create normal image element for the view.\n *\t\t\t// Maybe it will be \"decorated\" later.\n *\t\t\tconst viewImage = new ViewElement( 'img' );\n *\t\t\tconst insertPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\t\t\tconst viewWriter = conversionApi.writer;\n *\n *\t\t\t// Check if the `image` element has children.\n *\t\t\tif ( data.item.childCount > 0 ) {\n *\t\t\t\tconst modelCaption = data.item.getChild( 0 );\n *\n *\t\t\t\t// `modelCaption` insertion change is consumed from consumable values.\n *\t\t\t\t// It will not be converted by other converters, but it's children (probably some text) will be.\n *\t\t\t\t// Through mapping, converters for text will know where to insert contents of `modelCaption`.\n *\t\t\t\tif ( conversionApi.consumable.consume( modelCaption, 'insert' ) ) {\n *\t\t\t\t\tconst viewCaption = new ViewElement( 'figcaption' );\n *\n *\t\t\t\t\tconst viewImageHolder = new ViewElement( 'figure', null, [ viewImage, viewCaption ] );\n *\n *\t\t\t\t\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\n *\t\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImageHolder );\n *\t\t\t\t\tviewWriter.insert( insertPosition, viewImageHolder );\n *\t\t\t\t}\n *\t\t\t} else {\n *\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImage );\n *\t\t\t\tviewWriter.insert( insertPosition, viewImage );\n *\t\t\t}\n *\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class ModelConsumable {\n\t/**\n\t * Creates an empty consumables list.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Contains list of consumable values.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_consumable\n\t\t */\n\t\tthis._consumable = new Map();\n\n\t\t/**\n\t\t * For each {@link module:engine/model/textproxy~TextProxy} added to `ModelConsumable`, this registry holds parent\n\t\t * of that `TextProxy` and start and end indices of that `TextProxy`. This allows identification of `TextProxy`\n\t\t * instances that points to the same part of the model but are different instances. Each distinct `TextProxy`\n\t\t * is given unique `Symbol` which is then registered as consumable. This process is transparent for `ModelConsumable`\n\t\t * API user because whenever `TextProxy` is added, tested, consumed or reverted, internal mechanisms of\n\t\t * `ModelConsumable` translates `TextProxy` to that unique `Symbol`.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_textProxyRegistry\n\t\t */\n\t\tthis._textProxyRegistry = new Map();\n\t}\n\n\t/**\n\t * Adds a consumable value to the consumables list and links it with given model item.\n\t *\n\t *\t\tmodelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.\n\t *\t\tmodelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.\n\t *\t\tmodelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection that has the consumable.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t */\n\tadd( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tif ( !this._consumable.has( item ) ) {\n\t\t\tthis._consumable.set( item, new Map() );\n\t\t}\n\n\t\tthis._consumable.get( item ).set( type, true );\n\t}\n\n\t/**\n\t * Removes given consumable value from given model item.\n\t *\n\t *\t\tmodelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.\n\t *\t\tmodelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.\n\t *\t\tmodelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection from which consumable will be consumed.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t * @returns {Boolean} `true` if consumable value was available and was consumed, `false` otherwise.\n\t */\n\tconsume( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tif ( this.test( item, type ) ) {\n\t\t\tthis._consumable.get( item ).set( type, false );\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Tests whether there is a consumable value of given type connected with given model item.\n\t *\n\t *\t\tmodelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.\n\t *\t\tmodelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.\n\t *\t\tmodelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection to be tested.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t * @returns {null|Boolean} `null` if such consumable was never added, `false` if the consumable values was\n\t * already consumed or `true` if it was added and not consumed yet.\n\t */\n\ttest( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tconst itemConsumables = this._consumable.get( item );\n\n\t\tif ( itemConsumables === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst value = itemConsumables.get( type );\n\n\t\tif ( value === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Reverts consuming of consumable value.\n\t *\n\t *\t\tmodelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.\n\t *\t\tmodelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.\n\t *\t\tmodelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.\n\t *\t\tmodelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.\n\t *\t\tmodelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection to be reverted.\n\t * @param {String} type Consumable type.\n\t * @returns {null|Boolean} `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has\n\t * never been added.\n\t */\n\trevert( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tconst test = this.test( item, type );\n\n\t\tif ( test === false ) {\n\t\t\tthis._consumable.get( item ).set( type, true );\n\n\t\t\treturn true;\n\t\t} else if ( test === true ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets a unique symbol for passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that\n\t * have same parent, same start index and same end index will get the same symbol.\n\t *\n\t * Used internally to correctly consume `TextProxy` instances.\n\t *\n\t * @private\n\t * @param {module:engine/model/textproxy~TextProxy} textProxy `TextProxy` instance to get a symbol for.\n\t * @returns {Symbol} Symbol representing all equal instances of `TextProxy`.\n\t */\n\t_getSymbolForTextProxy( textProxy ) {\n\t\tlet symbol = null;\n\n\t\tconst startMap = this._textProxyRegistry.get( textProxy.startOffset );\n\n\t\tif ( startMap ) {\n\t\t\tconst endMap = startMap.get( textProxy.endOffset );\n\n\t\t\tif ( endMap ) {\n\t\t\t\tsymbol = endMap.get( textProxy.parent );\n\t\t\t}\n\t\t}\n\n\t\tif ( !symbol ) {\n\t\t\tsymbol = this._addSymbolForTextProxy( textProxy.startOffset, textProxy.endOffset, textProxy.parent );\n\t\t}\n\n\t\treturn symbol;\n\t}\n\n\t/**\n\t * Adds a symbol for given properties that characterizes a {@link module:engine/model/textproxy~TextProxy} instance.\n\t *\n\t * Used internally to correctly consume `TextProxy` instances.\n\t *\n\t * @private\n\t * @param {Number} startIndex Text proxy start index in it's parent.\n\t * @param {Number} endIndex Text proxy end index in it's parent.\n\t * @param {module:engine/model/element~Element} parent Text proxy parent.\n\t * @returns {Symbol} Symbol generated for given properties.\n\t */\n\t_addSymbolForTextProxy( start, end, parent ) {\n\t\tconst symbol = Symbol( 'textProxySymbol' );\n\t\tlet startMap, endMap;\n\n\t\tstartMap = this._textProxyRegistry.get( start );\n\n\t\tif ( !startMap ) {\n\t\t\tstartMap = new Map();\n\t\t\tthis._textProxyRegistry.set( start, startMap );\n\t\t}\n\n\t\tendMap = startMap.get( end );\n\n\t\tif ( !endMap ) {\n\t\t\tendMap = new Map();\n\t\t\tstartMap.set( end, endMap );\n\t\t}\n\n\t\tendMap.set( parent, symbol );\n\n\t\treturn symbol;\n\t}\n}\n\n// Returns a normalized consumable type name from given string. A normalized consumable type name is a string that has\n// at most one colon, for example: `insert` or `addMarker:highlight`. If string to normalize has more \"parts\" (more colons),\n// the other parts are dropped, for example: `addattribute:bold:$text` -> `addattributes:bold`.\n//\n// @param {String} type Consumable type.\n// @returns {String} Normalized consumable type.\nfunction _normalizeConsumableType( type ) {\n\tconst parts = type.split( ':' );\n\n\treturn parts.length > 1 ? parts[ 0 ] + ':' + parts[ 1 ] : parts[ 0 ];\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/downcastdispatcher\n */\n\nimport Consumable from './modelconsumable';\nimport Range from '../model/range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { extend } from 'lodash-es';\n\n/**\n * `DowncastDispatcher` is a central point of downcasting (conversion from model to view), which is a process of reacting to changes\n * in the model and firing a set of events. Callbacks listening to those events are called converters. Those\n * converters role is to convert the model changes to changes in view (for example, adding view nodes or\n * changing attributes on view elements).\n *\n * During conversion process, `DowncastDispatcher` fires events, basing on state of the model and prepares\n * data for those events. It is important to understand that those events are connected with changes done on model,\n * for example: \"node has been inserted\" or \"attribute has changed\". This is in a contrary to upcasting (view to model conversion),\n * where we convert view state (view nodes) to a model tree.\n *\n * The events are prepared basing on a diff created by {@link module:engine/model/differ~Differ Differ}, which buffers them\n * and then passes to `DowncastDispatcher` as a diff between old model state and new model state.\n *\n * Note, that because changes are converted there is a need to have a mapping between model structure and view structure.\n * To map positions and elements during downcast (model to view conversion) use {@link module:engine/conversion/mapper~Mapper}.\n *\n * `DowncastDispatcher` fires following events for model tree changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * if a range of nodes has been inserted to the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove remove}\n * if a range of nodes has been removed from the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute}\n * if attribute has been added, changed or removed from a model node.\n *\n * For {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute},\n * `DowncastDispatcher` generates {@link module:engine/conversion/modelconsumable~ModelConsumable consumables}.\n * These are used to have a control over which changes has been already consumed. It is useful when some converters\n * overwrite other or converts multiple changes (for example converts insertion of an element and also converts that\n * element's attributes during insertion).\n *\n * Additionally, `DowncastDispatcher` fires events for {@link module:engine/model/markercollection~Marker marker} changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} if a marker has been added,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} if a marker has been removed.\n *\n * Note, that changing a marker is done through removing the marker from the old range, and adding on the new range,\n * so both those events are fired.\n *\n * Finally, `DowncastDispatcher` also handles firing events for {@link module:engine/model/selection model selection}\n * conversion:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:selection}\n * which converts selection from model to view,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute}\n * which is fired for every selection attribute,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}\n * which is fired for every marker which contains selection.\n *\n * Unlike model tree and markers, events for selection are not fired for changes but for selection state.\n *\n * When providing custom listeners for `DowncastDispatcher` remember to check whether given change has not been\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} yet.\n *\n * When providing custom listeners for `DowncastDispatcher` keep in mind that any callback that had\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} a value from a consumable and\n * converted the change should also stop the event (for efficiency purposes).\n *\n * When providing custom listeners for `DowncastDispatcher` remember to use provided\n * {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer} to apply changes to the view document.\n *\n * Example of a custom converter for `DowncastDispatcher`:\n *\n *\t\t// We will convert inserting \"paragraph\" model element into the model.\n *\t\tdowncastDispatcher.on( 'insert:paragraph', ( evt, data, conversionApi ) => {\n *\t\t\t// Remember to check whether the change has not been consumed yet and consume it.\n *\t\t\tif ( conversionApi.consumable.consume( data.item, 'insert' ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\t// Translate position in model to position in view.\n *\t\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\n *\t\t\t// Create <p> element that will be inserted in view at `viewPosition`.\n *\t\t\tconst viewElement = conversionApi.writer.createContainerElement( 'p' );\n *\n *\t\t\t// Bind the newly created view element to model element so positions will map accordingly in future.\n *\t\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n *\n *\t\t\t// Add the newly created view element to the view.\n *\t\t\tconversionApi.writer.insert( viewPosition, viewElement );\n *\n *\t\t\t// Remember to stop the event propagation.\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class DowncastDispatcher {\n\t/**\n\t * Creates a `DowncastDispatcher` instance.\n\t *\n\t * @see module:engine/conversion/downcastdispatcher~DowncastConversionApi\n\t * @param {Object} conversionApi Additional properties for interface that will be passed to events fired\n\t * by `DowncastDispatcher`.\n\t */\n\tconstructor( conversionApi ) {\n\t\t/**\n\t\t * Interface passed by dispatcher to the events callbacks.\n\t\t *\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastConversionApi}\n\t\t */\n\t\tthis.conversionApi = extend( { dispatcher: this }, conversionApi );\n\t}\n\n\t/**\n\t * Takes {@link module:engine/model/differ~Differ model differ} object with buffered changes and fires conversion basing on it.\n\t *\n\t * @param {module:engine/model/differ~Differ} differ Differ object with buffered changes.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Markers connected with converted model.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertChanges( differ, markers, writer ) {\n\t\t// Before the view is updated, remove markers which have changed.\n\t\tfor ( const change of differ.getMarkersToRemove() ) {\n\t\t\tthis.convertMarkerRemove( change.name, change.range, writer );\n\t\t}\n\n\t\t// Convert changes that happened on model tree.\n\t\tfor ( const entry of differ.getChanges() ) {\n\t\t\tif ( entry.type == 'insert' ) {\n\t\t\t\tthis.convertInsert( Range._createFromPositionAndShift( entry.position, entry.length ), writer );\n\t\t\t} else if ( entry.type == 'remove' ) {\n\t\t\t\tthis.convertRemove( entry.position, entry.length, entry.name, writer );\n\t\t\t} else {\n\t\t\t\t// entry.type == 'attribute'.\n\t\t\t\tthis.convertAttribute( entry.range, entry.attributeKey, entry.attributeOldValue, entry.attributeNewValue, writer );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const markerName of this.conversionApi.mapper.flushUnboundMarkerNames() ) {\n\t\t\tconst markerRange = markers.get( markerName ).getRange();\n\n\t\t\tthis.convertMarkerRemove( markerName, markerRange, writer );\n\t\t\tthis.convertMarkerAdd( markerName, markerRange, writer );\n\t\t}\n\n\t\t// After the view is updated, convert markers which have changed.\n\t\tfor ( const change of differ.getMarkersToAdd() ) {\n\t\t\tthis.convertMarkerAdd( change.name, change.range, writer );\n\t\t}\n\t}\n\n\t/**\n\t * Starts conversion of a range insertion.\n\t *\n\t * For each node in the range, {@link #event:insert insert event is fired}. For each attribute on each node,\n\t * {@link #event:attribute attribute event is fired}.\n\t *\n\t * @fires insert\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Inserted range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertInsert( range, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list of things that can be consumed, consisting of nodes and their attributes.\n\t\tthis.conversionApi.consumable = this._createInsertConsumable( range );\n\n\t\t// Fire a separate insert event for each node and text fragment contained in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range._createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange\n\t\t\t};\n\n\t\t\tthis._testAndFire( 'insert', data );\n\n\t\t\t// Fire a separate addAttribute event for each attribute that was set on inserted items.\n\t\t\t// This is important because most attributes converters will listen only to add/change/removeAttribute events.\n\t\t\t// If we would not add this part, attributes on inserted nodes would not be converted.\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tdata.attributeKey = key;\n\t\t\t\tdata.attributeOldValue = null;\n\t\t\t\tdata.attributeNewValue = item.getAttribute( key );\n\n\t\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of a single node removal. Fires {@link #event:remove remove event} with provided data.\n\t *\n\t * @param {module:engine/model/position~Position} position Position from which node was removed.\n\t * @param {Number} length Offset size of removed node.\n\t * @param {String} name Name of removed node.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertRemove( position, length, name, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'remove:' + name, { position, length }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts conversion of attribute change on given `range`.\n\t *\n\t * For each node in the given `range`, {@link #event:attribute attribute event} is fired with the passed data.\n\t *\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Changed range.\n\t * @param {String} key Key of the attribute that has changed.\n\t * @param {*} oldValue Attribute value before the change or `null` if the attribute has not been set before.\n\t * @param {*} newValue New attribute value or `null` if the attribute has been removed.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertAttribute( range, key, oldValue, newValue, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list with attributes to consume.\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( range, `attribute:${ key }` );\n\n\t\t// Create a separate attribute event for each node in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range._createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\tattributeNewValue: newValue\n\t\t\t};\n\n\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts model selection conversion.\n\t *\n\t * Fires events for given {@link module:engine/model/selection~Selection selection} to start selection conversion.\n\t *\n\t * @fires selection\n\t * @fires addMarker\n\t * @fires attribute\n\t * @param {module:engine/model/selection~Selection} selection Selection to convert.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Markers connected with converted model.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertSelection( selection, markers, writer ) {\n\t\tconst markersAtSelection = Array.from( markers.getMarkersAtPosition( selection.getFirstPosition() ) );\n\n\t\tthis.conversionApi.writer = writer;\n\t\tthis.conversionApi.consumable = this._createSelectionConsumable( selection, markersAtSelection );\n\n\t\tthis.fire( 'selection', { selection }, this.conversionApi );\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const marker of markersAtSelection ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tif ( !shouldMarkerChangeBeConverted( selection.getFirstPosition(), marker, this.conversionApi.mapper ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\tmarkerName: marker.name,\n\t\t\t\tmarkerRange\n\t\t\t};\n\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'addMarker:' + marker.name ) ) {\n\t\t\t\tthis.fire( 'addMarker:' + marker.name, data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\trange: selection.getFirstRange(),\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: selection.getAttribute( key )\n\t\t\t};\n\n\t\t\t// Do not fire event if the attribute has been consumed.\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'attribute:' + data.attributeKey ) ) {\n\t\t\t\tthis.fire( 'attribute:' + data.attributeKey + ':$text', data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Converts added marker. Fires {@link #event:addMarker addMarker} event for each item\n\t * in marker's range. If range is collapsed single event is dispatched. See event description for more details.\n\t *\n\t * @fires addMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange Marker range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertMarkerAdd( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n\t\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// In markers' case, event name == consumable name.\n\t\tconst eventName = 'addMarker:' + markerName;\n\n\t\t//\n\t\t// First, fire an event for the whole marker.\n\t\t//\n\t\tconst consumable = new Consumable();\n\t\tconsumable.add( markerRange, eventName );\n\n\t\tthis.conversionApi.consumable = consumable;\n\n\t\tthis.fire( eventName, { markerName, markerRange }, this.conversionApi );\n\n\t\t//\n\t\t// Do not fire events for each item inside the range if the range got consumed.\n\t\t//\n\t\tif ( !consumable.test( markerRange, eventName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// Then, fire an event for each item inside the marker range.\n\t\t//\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( markerRange, eventName );\n\n\t\tfor ( const item of markerRange.getItems() ) {\n\t\t\t// Do not fire event for already consumed items.\n\t\t\tif ( !this.conversionApi.consumable.test( item, eventName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = { item, range: Range._createOn( item ), markerName, markerRange };\n\n\t\t\tthis.fire( eventName, data, this.conversionApi );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of marker removal. Fires {@link #event:removeMarker removeMarker} event with provided data.\n\t *\n\t * @fires removeMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange Marker range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertMarkerRemove( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n\t\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'removeMarker:' + markerName, { markerName, markerRange }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume from given range,\n\t * assuming that the range has just been inserted to the model.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Inserted range.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createInsertConsumable( range ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\n\t\t\tconsumable.add( item, 'insert' );\n\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tconsumable.add( item, 'attribute:' + key );\n\t\t\t}\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume for given range.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Affected range.\n\t * @param {String} type Consumable type.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createConsumableForRange( range, type ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const item of range.getItems() ) {\n\t\t\tconsumable.add( item, type );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with selection consumable values.\n\t *\n\t * @private\n\t * @param {module:engine/model/selection~Selection} selection Selection to create consumable from.\n\t * @param {Iterable.<module:engine/model/markercollection~Marker>} markers Markers which contains selection.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createSelectionConsumable( selection, markers ) {\n\t\tconst consumable = new Consumable();\n\n\t\tconsumable.add( selection, 'selection' );\n\n\t\tfor ( const marker of markers ) {\n\t\t\tconsumable.add( selection, 'addMarker:' + marker.name );\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconsumable.add( selection, 'attribute:' + key );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Tests passed `consumable` to check whether given event can be fired and if so, fires it.\n\t *\n\t * @private\n\t * @fires insert\n\t * @fires attribute\n\t * @param {String} type Event type.\n\t * @param {Object} data Event data.\n\t */\n\t_testAndFire( type, data ) {\n\t\tif ( !this.conversionApi.consumable.test( data.item, type ) ) {\n\t\t\t// Do not fire event if the item was consumed.\n\t\t\treturn;\n\t\t}\n\n\t\tconst name = data.item.name || '$text';\n\n\t\tthis.fire( type + ':' + name, data, this.conversionApi );\n\t}\n\n\t/**\n\t * Clears conversion API object.\n\t *\n\t * @private\n\t */\n\t_clearConversionApi() {\n\t\tdelete this.conversionApi.writer;\n\t\tdelete this.conversionApi.consumable;\n\t}\n\n\t/**\n\t * Fired for inserted nodes.\n\t *\n\t * `insert` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `insert:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been inserted,\n\t * or {@link module:engine/model/element~Element#name name} of inserted element.\n\t *\n\t * This way listeners can either listen to a general `insert` event or specific event (for example `insert:paragraph`).\n\t *\n\t * @event insert\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item} data.item Inserted item.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over inserted item.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for removed nodes.\n\t *\n\t * `remove` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `remove:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been removed,\n\t * or the {@link module:engine/model/element~Element#name name} of removed element.\n\t *\n\t * This way listeners can either listen to a general `remove` event or specific event (for example `remove:paragraph`).\n\t *\n\t * @event remove\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/position~Position} data.position Position from which the node has been removed.\n\t * @param {Number} data.length Offset size of the removed node.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired in the following cases:\n\t *\n\t * * when an attribute has been added, changed, or removed from a node,\n\t * * when a node with an attribute is inserted,\n\t * * when collapsed model selection attribute is converted.\n\t *\n\t * `attribute` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `attribute:attributeKey:name`. `attributeKey` is the key of added/changed/removed attribute.\n\t * `name` is either `'$text'` if change was on {@link module:engine/model/text~Text a text node},\n\t * or the {@link module:engine/model/element~Element#name name} of element which attribute has changed.\n\t *\n\t * This way listeners can either listen to a general `attribute:bold` event or specific event (for example `attribute:src:image`).\n\t *\n\t * @event attribute\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/documentselection~DocumentSelection} data.item Changed item\n\t * or converted selection.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over changed item or selection range.\n\t * @param {String} data.attributeKey Attribute key.\n\t * @param {*} data.attributeOldValue Attribute value before the change. This is `null` when selection attribute is converted.\n\t * @param {*} data.attributeNewValue New attribute value.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for {@link module:engine/model/selection~Selection selection} changes.\n\t *\n\t * @event selection\n\t * @param {module:engine/model/selection~Selection} selection Selection that is converted.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when a new marker is added to the model. Also fired when collapsed model selection that is inside marker is converted.\n\t *\n\t * `addMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `addMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `addMarker:foo` or `addMarker:foo:abc` and\n\t * `addMarker:foo:bar` events.\n\t *\n\t * If the marker range is not collapsed:\n\t *\n\t * * the event is fired for each item in the marker range one by one,\n\t * * `conversionApi.consumable` includes each item of the marker range and the consumable value is same as event name.\n\t *\n\t * If the marker range is collapsed:\n\t *\n\t * * there is only one event,\n\t * * `conversionApi.consumable` includes marker range with event name.\n\t *\n\t * If selection inside a marker is converted:\n\t *\n\t * * there is only one event,\n\t * * `conversionApi.consumable` includes selection instance with event name.\n\t *\n\t * @event addMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection} data.item Item inside the new marker or\n\t * the selection that is being converted.\n\t * @param {module:engine/model/range~Range} [data.range] Range spanning over converted item. Available only in marker conversion, if\n\t * the marker range was not collapsed.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when marker is removed from the model.\n\t *\n\t * `removeMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `removeMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `removeMarker:foo` or `removeMarker:foo:abc` and\n\t * `removeMarker:foo:bar` events.\n\t *\n\t * @event removeMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n\t * to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n}\n\nmix( DowncastDispatcher, EmitterMixin );\n\n// Helper function, checks whether change of `marker` at `modelPosition` should be converted. Marker changes are not\n// converted if they happen inside an element with custom conversion method.\n//\n// @param {module:engine/model/position~Position} modelPosition\n// @param {module:engine/model/markercollection~Marker} marker\n// @param {module:engine/conversion/mapper~Mapper} mapper\n// @returns {Boolean}\nfunction shouldMarkerChangeBeConverted( modelPosition, marker, mapper ) {\n\tconst range = marker.getRange();\n\tconst ancestors = Array.from( modelPosition.getAncestors() );\n\tancestors.shift(); // Remove root element. It cannot be passed to `model.Range#containsItem`.\n\tancestors.reverse();\n\n\tconst hasCustomHandling = ancestors.some( element => {\n\t\tif ( range.containsItem( element ) ) {\n\t\t\tconst viewElement = mapper.toViewElement( element );\n\n\t\t\treturn !!viewElement.getCustomProperty( 'addHighlight' );\n\t\t}\n\t} );\n\n\treturn !hasCustomHandling;\n}\n\n/**\n * Conversion interface that is registered for given {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * and is passed as one of parameters when {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher dispatcher}\n * fires it's events.\n *\n * @interface module:engine/conversion/downcastdispatcher~DowncastConversionApi\n */\n\n/**\n * The {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} instance.\n *\n * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #dispatcher\n */\n\n/**\n * Stores information about what parts of processed model item are still waiting to be handled. After a piece of model item\n * was converted, appropriate consumable value should be {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n *\n * @member {module:engine/conversion/modelconsumable~ModelConsumable} #consumable\n */\n\n/**\n * The {@link module:engine/conversion/mapper~Mapper} instance.\n *\n * @member {module:engine/conversion/mapper~Mapper} #mapper\n */\n\n/**\n * The {@link module:engine/view/downcastwriter~DowncastWriter} instance used to manipulate data during conversion.\n *\n * @member {module:engine/view/downcastwriter~DowncastWriter} #writer\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/selection\n */\n\nimport Position from './position';\nimport Element from './element';\nimport Node from './node';\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Selection is a set of {@link module:engine/model/range~Range ranges}. It has a direction specified by its\n * {@link module:engine/model/selection~Selection#anchor anchor} and {@link module:engine/model/selection~Selection#focus focus}\n * (it can be {@link module:engine/model/selection~Selection#isBackward forward or backward}).\n * Additionally, selection may have its own attributes (think – whether text typed in in this selection\n * should have those attributes – e.g. whether you type a bolded text).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Selection {\n\t/**\n\t * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n\t * or creates an empty selection if no arguments were passed.\n\t *\n\t *\t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\tconst selection = writer.createSelection( documentSelection );\n\t *\n\t *\t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates selection at the given offset in the given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * Selection's constructor allow passing additional options (`'backward'`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tconstructor( selectable, placeOrOffset, options ) {\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Stores selection ranges.\n\t\t *\n\t\t * @protected\n\t\t * @type {Array.<module:engine/model/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * List of attributes set on current selection.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map.<String,*>}\n\t\t */\n\t\tthis._attrs = new Map();\n\n\t\tif ( selectable ) {\n\t\t\tthis.setTo( selectable, placeOrOffset, options );\n\t\t}\n\t}\n\n\t/**\n\t * Selection anchor. Anchor is the position from which the selection was started. If a user is making a selection\n\t * by dragging the mouse, the anchor is where the user pressed the mouse button (the beggining of the selection).\n\t *\n\t * Anchor and {@link #focus} define the direction of the selection, which is important\n\t * when expanding/shrinking selection. The focus moves, while the anchor should remain in the same place.\n\t *\n\t * Anchor is always set to the {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the last of selection's ranges. Whether it is\n\t * the `start` or `end` depends on the specified `options.backward`. See the {@link #setTo `setTo()`} method.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.end : range.start;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Selection focus. Focus is the position where the selection ends. If a user is making a selection\n\t * by dragging the mouse, the focus is where the mouse cursor is.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.start : range.end;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Whether the selection is collapsed. Selection is collapsed when there is exactly one range in it\n\t * and it is collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\tif ( length === 1 ) {\n\t\t\treturn this._ranges[ 0 ].isCollapsed;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the number of ranges in the selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the selection's {@link #focus} precedes the selection's {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * Checks whether this selection is equal to the given selection. Selections are equal if they have the same directions,\n\t * the same number of ranges and all ranges from one selection equal to ranges from the another selection.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns an iterable object that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield new Range( range.start, range.end );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? new Range( first.start, first.end ) : null;\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? new Range( last.start, last.end ) : null;\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst first = this.getFirstRange();\n\n\t\treturn first ? first.start.clone() : null;\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? lastRange.end.clone() : null;\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable}.\n\t *\n\t *\t\t// Removes all selection's ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tselection.setTo( ranges );\n\t *\n\t *\t\t// Sets selection to other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t *\t\t// Sets selection to the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = new DocumentSelection( doc );\n\t *\t\tselection.setTo( documentSelection );\n\t *\n\t *\t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t *\t\t// Sets collapsed selection at the position of the given node and an offset.\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t *\t\tselection.setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tselection.setTo( paragraph, 'on' );\n\t *\n\t * `Selection#setTo()`' method allow passing additional options (`backward`) as the last argument.\n\t *\n\t *\t\t// Sets backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tsetTo( selectable, placeOrOffset, options ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t} else if ( selectable instanceof Selection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable && typeof selectable.getRanges == 'function' ) {\n\t\t\t// We assume that the selectable is a DocumentSelection.\n\t\t\t// It can't be imported here, because it would lead to circular imports.\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], !!placeOrOffset && !!placeOrOffset.backward );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t} else if ( selectable instanceof Node ) {\n\t\t\tconst backward = !!options && !!options.backward;\n\t\t\tlet range;\n\n\t\t\tif ( placeOrOffset == 'in' ) {\n\t\t\t\trange = Range._createIn( selectable );\n\t\t\t} else if ( placeOrOffset == 'on' ) {\n\t\t\t\trange = Range._createOn( selectable );\n\t\t\t} else if ( placeOrOffset !== undefined ) {\n\t\t\t\trange = new Range( Position._createAt( selectable, placeOrOffset ) );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * selection.setTo requires the second parameter when the first parameter is a node.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-setTo-required-second-parameter\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-setTo-required-second-parameter: ' +\n\t\t\t\t\t'selection.setTo requires the second parameter when the first parameter is a node.',\n\t\t\t\t\t[ this, selectable ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis._setRanges( [ range ], backward );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\tthis._setRanges( selectable, placeOrOffset && !!placeOrOffset.backward );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set the selection to the given place.\n\t\t\t *\n\t\t\t * Invalid parameters were specified when setting the selection. Common issues:\n\t\t\t *\n\t\t\t * * A {@link module:engine/model/textproxy~TextProxy} instance was passed instead of\n\t\t\t * a real {@link module:engine/model/text~Text}.\n\t\t\t * * View nodes were passed instead of model nodes.\n\t\t\t * * `null`/`undefined` was passed.\n\t\t\t *\n\t\t\t * @error model-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-selection-setTo-not-selectable: Cannot set the selection to the given place.',\n\t\t\t\t[ this, selectable ]\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and\n\t * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.\n\t *\n\t * @protected\n\t * @fires change:range\n\t * @param {Iterable.<module:engine/model/range~Range>} newRanges Ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end (`false`)\n\t * or backward - from end to start (`true`).\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\tnewRanges = Array.from( newRanges );\n\n\t\t// Check whether there is any range in new ranges set that is different than all already added ranges.\n\t\tconst anyNewRange = newRanges.some( newRange => {\n\t\t\tif ( !( newRange instanceof Range ) ) {\n\t\t\t\t/**\n\t\t\t\t * Selection range set to an object that is not an instance of {@link module:engine/model/range~Range}.\n\t\t\t\t *\n\t\t\t\t * Only {@link module:engine/model/range~Range} instances can be used to set a selection.\n\t\t\t\t * Common mistakes leading to this error are:\n\t\t\t\t *\n\t\t\t\t * * using DOM `Range` object,\n\t\t\t\t * * incorrect CKEditor 5 installation with multiple `ckeditor5-engine` packages having different versions.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-set-ranges-not-range\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-set-ranges-not-range: ' +\n\t\t\t\t\t'Selection range set to an object that is not an instance of model.Range.',\n\t\t\t\t\t[ this, newRanges ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this._ranges.every( oldRange => {\n\t\t\t\treturn !oldRange.isEqual( newRange );\n\t\t\t} );\n\t\t} );\n\n\t\t// Don't do anything if nothing changed.\n\t\tif ( newRanges.length === this._ranges.length && !anyNewRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._removeAllRanges();\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._pushRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @fires change:range\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error model-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.',\n\t\t\t\t[ this, itemOrPosition ]\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tif ( this._ranges.length ) {\n\t\t\tthis._popRange();\n\t\t}\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._pushRange( new Range( newFocus, anchor ) );\n\t\t\tthis._lastRangeBackward = true;\n\t\t} else {\n\t\t\tthis._pushRange( new Range( anchor, newFocus ) );\n\t\t\tthis._lastRangeBackward = false;\n\t\t}\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t *\n\t * If given attribute was set on the selection, fires the {@link #event:change:range} event with\n\t * removed attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to remove.\n\t */\n\tremoveAttribute( key ) {\n\t\tif ( this.hasAttribute( key ) ) {\n\t\t\tthis._attrs.delete( key );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * If the attribute value has changed, fires the {@link #event:change:range} event with\n\t * the attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\tsetAttribute( key, value ) {\n\t\tif ( this.getAttribute( key ) !== value ) {\n\t\t\tthis._attrs.set( key, value );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = this.getFirstRange();\n\t\tconst nodeAfterStart = range.start.nodeAfter;\n\t\tconst nodeBeforeEnd = range.end.nodeBefore;\n\n\t\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'model:selection' ); // -> true\n\t *\n\t *\t\tselection.is( 'view:selection' ); // -> false\n\t *\t\tselection.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' || type == 'model:selection';\n\t}\n\n\t/**\n\t * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n\t * but will not return blocks nested in other blocks.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<blockQuote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</blockQuote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n\t *\n\t *\t\t[<blockA></blockA>\n\t *\t\t<blockB>\n\t *\t\t\t<blockC></blockC>\n\t *\t\t\t<blockD></blockD>\n\t *\t\t</blockB>\n\t *\t\t<blockE></blockE>]\n\t *\n\t * If the selection is inside a block all the inner blocks (A & B) are returned:\n\t *\n\t * \t\t<block>\n\t *\t\t\t<blockA>[a</blockA>\n\t * \t\t\t<blockB>b]</blockB>\n\t * \t\t</block>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\t* getSelectedBlocks() {\n\t\tconst visited = new WeakSet();\n\n\t\tfor ( const range of this.getRanges() ) {\n\t\t\t// Get start block of range in case of a collapsed range.\n\t\t\tconst startBlock = getParentBlock( range.start, visited );\n\n\t\t\tif ( startBlock && isTopBlockInRange( startBlock, range ) ) {\n\t\t\t\tyield startBlock;\n\t\t\t}\n\n\t\t\tfor ( const value of range.getWalker() ) {\n\t\t\t\tconst block = value.item;\n\n\t\t\t\tif ( value.type == 'elementEnd' && isUnvisitedTopBlock( block, visited, range ) ) {\n\t\t\t\t\tyield block;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst endBlock = getParentBlock( range.end, visited );\n\n\t\t\t// #984. Don't return the end block if the range ends right at its beginning.\n\t\t\tif ( endBlock && !range.end.isTouching( Position._createAt( endBlock, 0 ) ) && isTopBlockInRange( endBlock, range ) ) {\n\t\t\t\tyield endBlock;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element = this.anchor.root ) {\n\t\tconst limitStartPosition = Position._createAt( element, 0 );\n\t\tconst limitEndPosition = Position._createAt( element, 'end' );\n\n\t\treturn limitStartPosition.isTouching( this.getFirstPosition() ) &&\n\t\t\tlimitEndPosition.isTouching( this.getLastPosition() );\n\t}\n\n\t/**\n\t * Adds given range to internal {@link #_ranges ranges array}. Throws an error\n\t * if given range is intersecting with any range that is already stored in this selection.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to add.\n\t */\n\t_pushRange( range ) {\n\t\tthis._checkRange( range );\n\t\tthis._ranges.push( new Range( range.start, range.end ) );\n\t}\n\n\t/**\n\t * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to check.\n\t */\n\t_checkRange( range ) {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tif ( range.isIntersecting( this._ranges[ i ] ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range in the selection.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-range-intersects\n\t\t\t\t * @param {module:engine/model/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/model/range~Range} intersectingRange Range in the selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-range-intersects: Trying to add a range that intersects with another range in the selection.',\n\t\t\t\t\t[ this, range ],\n\t\t\t\t\t{ addedRange: range, intersectingRange: this._ranges[ i ] }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to\n\t * ensure proper ranges removal.\n\t *\n\t * @protected\n\t */\n\t_removeAllRanges() {\n\t\twhile ( this._ranges.length > 0 ) {\n\t\t\tthis._popRange();\n\t\t}\n\t}\n\n\t/**\n\t * Removes most recently added range from the selection.\n\t *\n\t * @protected\n\t */\n\t_popRange() {\n\t\tthis._ranges.pop();\n\t}\n\n\t/**\n\t * Fired when selection range(s) changed.\n\t *\n\t * @event change:range\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n\t * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed because the structure of the model has been changed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t */\n\n\t/**\n\t * Fired when selection attribute changed.\n\t *\n\t * @event change:attribute\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n\t * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed in the model and its attributes were refreshed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n\t */\n}\n\nmix( Selection, EmitterMixin );\n\n// Checks whether the given element extends $block in the schema and has a parent (is not a root).\n// Marks it as already visited.\nfunction isUnvisitedBlock( element, visited ) {\n\tif ( visited.has( element ) ) {\n\t\treturn false;\n\t}\n\n\tvisited.add( element );\n\n\treturn element.document.model.schema.isBlock( element ) && element.parent;\n}\n\n// Checks if the given element is a $block was not previously visited and is a top block in a range.\nfunction isUnvisitedTopBlock( element, visited, range ) {\n\treturn isUnvisitedBlock( element, visited ) && isTopBlockInRange( element, range );\n}\n\n// Finds the lowest element in position's ancestors which is a block.\n// It will search until first ancestor that is a limit element.\n// Marks all ancestors as already visited to not include any of them later on.\nfunction getParentBlock( position, visited ) {\n\tconst schema = position.parent.document.model.schema;\n\n\tconst ancestors = position.parent.getAncestors( { parentFirst: true, includeSelf: true } );\n\n\tlet hasParentLimit = false;\n\n\tconst block = ancestors.find( element => {\n\t\t// Stop searching after first parent node that is limit element.\n\t\tif ( hasParentLimit ) {\n\t\t\treturn false;\n\t\t}\n\n\t\thasParentLimit = schema.isLimit( element );\n\n\t\treturn !hasParentLimit && isUnvisitedBlock( element, visited );\n\t} );\n\n\t// Mark all ancestors of this position's parent, because find() might've stopped early and\n\t// the found block may be a child of another block.\n\tancestors.forEach( element => visited.add( element ) );\n\n\treturn block;\n}\n\n// Checks if the blocks is not nested in other block inside a range.\n//\n// @param {module:engine/model/elmenent~Element} block Block to check.\n// @param {module:engine/model/range~Range} range Range to check.\nfunction isTopBlockInRange( block, range ) {\n\tconst parentBlock = findAncestorBlock( block );\n\n\tif ( !parentBlock ) {\n\t\treturn true;\n\t}\n\n\t// Add loose flag to check as parentRange can be equal to range.\n\tconst isParentInRange = range.containsRange( Range._createOn( parentBlock ), true );\n\n\treturn !isParentInRange;\n}\n\n// Returns first ancestor block of a node.\n//\n// @param {module:engine/model/node~Node} node\n// @returns {module:engine/model/node~Node|undefined}\nfunction findAncestorBlock( node ) {\n\tconst schema = node.document.model.schema;\n\n\tlet parent = node.parent;\n\n\twhile ( parent ) {\n\t\tif ( schema.isBlock( parent ) ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n}\n\n/**\n * An entity that is used to set selection.\n *\n * See also {@link module:engine/model/selection~Selection#setTo}\n *\n * @typedef {\n *     module:engine/model/selection~Selection|\n *     module:engine/model/documentselection~DocumentSelection|\n *     module:engine/model/position~Position|\n *     module:engine/model/range~Range|\n *     module:engine/model/node~Node|\n *     Iterable.<module:engine/model/range~Range>|\n *     null\n * } module:engine/model/selection~Selectable\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/documentselection\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\nimport Selection from './selection';\nimport LiveRange from './liverange';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n\nconst storePrefix = 'selection:';\n\n/**\n * `DocumentSelection` is a special selection which is used as the\n * {@link module:engine/model/document~Document#selection document's selection}.\n * There can be only one instance of `DocumentSelection` per document.\n *\n * Document selection can only be changed by using the {@link module:engine/model/writer~Writer} instance\n * inside the {@link module:engine/model/model~Model#change `change()`} block, as it provides a secure way to modify model.\n *\n * `DocumentSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `DocumentSelection` are:\n * * there is always a range in `DocumentSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `DocumentSelection` are updated automatically according to selection ranges.\n *\n * Since `DocumentSelection` uses {@link module:engine/model/liverange~LiveRange live ranges}\n * and is updated when {@link module:engine/model/document~Document document}\n * changes, it cannot be set on {@link module:engine/model/node~Node nodes}\n * that are inside {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n * If you need to represent a selection in document fragment,\n * use {@link module:engine/model/selection~Selection Selection class} instead.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class DocumentSelection {\n\t/**\n\t * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document which owns this selection.\n\t */\n\tconstructor( doc ) {\n\t\t/**\n\t\t * Selection used internally by that class (`DocumentSelection` is a proxy to that selection).\n\t\t *\n\t\t * @protected\n\t\t */\n\t\tthis._selection = new LiveSelection( doc );\n\n\t\tthis._selection.delegate( 'change:range' ).to( this );\n\t\tthis._selection.delegate( 'change:attribute' ).to( this );\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this._selection.isCollapsed;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\n\t * Together with {@link #focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the most recently added range.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\treturn this._selection.anchor;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\treturn this._selection.focus;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._selection.rangeCount;\n\t}\n\n\t/**\n\t * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to\n\t * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget hasOwnRange() {\n\t\treturn this._selection.hasOwnRange;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus}\n\t * precedes {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn this._selection.isBackward;\n\t}\n\n\t/**\n\t * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.\n\t *\n\t * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\n\t *\n\t * @readonly\n\t * @returns {Boolean}\n\t */\n\tget isGravityOverridden() {\n\t\treturn this._selection.isGravityOverridden;\n\t}\n\n\t/**\n\t * A collection of selection markers.\n\t * Marker is a selection marker when selection range is inside the marker range.\n\t *\n\t * @readonly\n\t * @type {module:utils/collection~Collection.<module:engine/model/markercollection~Marker>}\n\t */\n\tget markers() {\n\t\treturn this._selection.markers;\n\t}\n\n\t/**\n\t * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.\n\t *\n\t * @protected\n\t */\n\tget _ranges() {\n\t\treturn this._selection._ranges;\n\t}\n\n\t/**\n\t * Returns an iterable that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\tgetRanges() {\n\t\treturn this._selection.getRanges();\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\treturn this._selection.getFirstPosition();\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\treturn this._selection.getLastPosition();\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\treturn this._selection.getFirstRange();\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\treturn this._selection.getLastRange();\n\t}\n\n\t/**\n\t * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n\t * but will not return blocks nested in other blocks.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<blockQuote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</blockQuote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n\t *\n\t *\t\t[<blockA></blockA>\n\t *\t\t<blockB>\n\t *\t\t\t<blockC></blockC>\n\t *\t\t\t<blockD></blockD>\n\t *\t\t</blockB>\n\t *\t\t<blockE></blockE>]\n\t *\n\t * If the selection is inside a block all the inner blocks (A & B) are returned:\n\t *\n\t * \t\t<block>\n\t *\t\t\t<blockA>[a</blockA>\n\t * \t\t\t<blockB>b]</blockB>\n\t * \t\t</block>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\tgetSelectedBlocks() {\n\t\treturn this._selection.getSelectedBlocks();\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\treturn this._selection.getSelectedElement();\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element ) {\n\t\treturn this._selection.containsEntireContent( element );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by document selection.\n\t */\n\tdestroy() {\n\t\tthis._selection.destroy();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._selection.getAttributeKeys();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._selection.getAttributes();\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._selection.getAttribute( key );\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._selection.hasAttribute( key );\n\t}\n\n\t/**\n\t * Refreshes selection attributes and markers according to the current position in the model.\n\t */\n\trefresh() {\n\t\tthis._selection._updateMarkers();\n\t\tthis._selection._updateAttributes( false );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'documentSelection' ); // -> true\n\t *\t\tselection.is( 'model:selection' ); // -> true\n\t *\t\tselection.is( 'model:documentSelection' ); // -> true\n\t *\n\t *\t\tselection.is( 'view:selection' ); // -> false\n\t *\t\tselection.is( 'element' ); // -> false\n\t *\t\tselection.is( 'node' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' ||\n\t\t\ttype == 'model:selection' ||\n\t\t\ttype == 'documentSelection' ||\n\t\t\ttype == 'model:documentSelection';\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionFocus\n\t * @protected\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tthis._selection.setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable}.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelection\n\t * @protected\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\t_setTo( selectable, placeOrOffset, options ) {\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\t_setAttribute( key, value ) {\n\t\tthis._selection.setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change:range}\n\t * event with removed attribute key.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#removeSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._selection.removeAttribute( key );\n\t}\n\n\t/**\n\t * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t *\n\t * @protected\n\t * @returns {Iterable.<*>}\n\t */\n\t_getStoredAttributes() {\n\t\treturn this._selection._getStoredAttributes();\n\t}\n\n\t/**\n\t * Temporarily changes the gravity of the selection from the left to the right.\n\t *\n\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left\n\t * gravity, the selection (after being moved by the the user) inherits attributes from its left hand side.\n\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\n\t *\n\t * It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n\t * of the process.\n\t *\n\t * @see module:engine/model/writer~Writer#overrideSelectionGravity\n\t * @protected\n\t * @returns {String} The unique id which allows restoring the gravity.\n\t */\n\t_overrideGravity() {\n\t\treturn this._selection.overrideGravity();\n\t}\n\n\t/**\n\t * Restores the {@link ~DocumentSelection#_overrideGravity overridden gravity}.\n\t *\n\t * Restoring the gravity is only possible using the unique identifier returned by\n\t * {@link ~DocumentSelection#_overrideGravity}. Note that the gravity remains overridden as long as won't be restored\n\t * the same number of times it was overridden.\n\t *\n\t * @see module:engine/model/writer~Writer#restoreSelectionGravity\n\t * @protected\n\t * @param {String} uid The unique id returned by {@link #_overrideGravity}.\n\t */\n\t_restoreGravity( uid ) {\n\t\tthis._selection.restoreGravity( uid );\n\t}\n\n\t/**\n\t * Generates and returns an attribute key for selection attributes store, basing on original attribute key.\n\t *\n\t * @protected\n\t * @param {String} key Attribute key to convert.\n\t * @returns {String} Converted attribute key, applicable for selection store.\n\t */\n\tstatic _getStoreAttributeKey( key ) {\n\t\treturn storePrefix + key;\n\t}\n\n\t/**\n\t * Checks whether the given attribute key is an attribute stored on an element.\n\t *\n\t * @protected\n\t * @param {String} key\n\t * @returns {Boolean}\n\t */\n\tstatic _isStoreAttributeKey( key ) {\n\t\treturn key.startsWith( storePrefix );\n\t}\n}\n\nmix( DocumentSelection, EmitterMixin );\n\n/**\n * Fired when selection range(s) changed.\n *\n * @event change:range\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed because the structure of the model has been changed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n */\n\n/**\n * Fired when selection attribute changed.\n *\n * @event change:attribute\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed in the model and its attributes were refreshed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n */\n\n// `LiveSelection` is used internally by {@link module:engine/model/documentselection~DocumentSelection} and shouldn't be used directly.\n//\n// LiveSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n// to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n//\n// Differences between {@link module:engine/model/selection~Selection} and `LiveSelection` are:\n// * there is always a range in `LiveSelection` - even if no ranges were added there is a \"default range\"\n// present in the selection,\n// * ranges added to this selection updates automatically when the document changes,\n// * attributes of `LiveSelection` are updated automatically according to selection ranges.\n//\n// @extends module:engine/model/selection~Selection\n//\n\nclass LiveSelection extends Selection {\n\t// Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t// @param {module:engine/model/document~Document} doc Document which owns this selection.\n\tconstructor( doc ) {\n\t\tsuper();\n\n\t\t// List of selection markers.\n\t\t// Marker is a selection marker when selection range is inside the marker range.\n\t\t//\n\t\t// @type {module:utils/collection~Collection}\n\t\tthis.markers = new Collection( { idProperty: 'name' } );\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/model~Model}\n\t\tthis._model = doc.model;\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/document~Document}\n\t\tthis._document = doc;\n\n\t\t// Keeps mapping of attribute name to priority with which the attribute got modified (added/changed/removed)\n\t\t// last time. Possible values of priority are: `'low'` and `'normal'`.\n\t\t//\n\t\t// Priorities are used by internal `LiveSelection` mechanisms. All attributes set using `LiveSelection`\n\t\t// attributes API are set with `'normal'` priority.\n\t\t//\n\t\t// @private\n\t\t// @member {Map} module:engine/model/liveselection~LiveSelection#_attributePriority\n\t\tthis._attributePriority = new Map();\n\n\t\t// Contains data required to fix ranges which have been moved to the graveyard.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_fixGraveyardRangesData\n\t\tthis._fixGraveyardRangesData = [];\n\n\t\t// Flag that informs whether the selection ranges have changed. It is changed on true when `LiveRange#change:range` event is fired.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_hasChangedRange\n\t\tthis._hasChangedRange = false;\n\n\t\t// Each overriding gravity adds an UID to the set and each removal removes it.\n\t\t// Gravity is overridden when there's at least one UID in the set.\n\t\t// Gravity is restored when the set is empty.\n\t\t// This is to prevent conflicts when gravity is overridden by more than one feature at the same time.\n\t\t// @private\n\t\t// @type {Set}\n\t\tthis._overriddenGravityRegister = new Set();\n\n\t\t// Ensure selection is correct after each operation.\n\t\tthis.listenTo( this._model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation || operation.type == 'marker' || operation.type == 'rename' || operation.type == 'noop' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twhile ( this._fixGraveyardRangesData.length ) {\n\t\t\t\tconst { liveRange, sourcePosition } = this._fixGraveyardRangesData.shift();\n\n\t\t\t\tthis._fixGraveyardSelection( liveRange, sourcePosition );\n\t\t\t}\n\n\t\t\tif ( this._hasChangedRange ) {\n\t\t\t\tthis._hasChangedRange = false;\n\t\t\t\tthis.fire( 'change:range', { directChange: false } );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Ensure selection is correct and up to date after each range change.\n\t\tthis.on( 'change:range', () => {\n\t\t\tfor ( const range of this.getRanges() ) {\n\t\t\t\tif ( !this._document._validateSelectionRange( range ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Range from {@link module:engine/model/documentselection~DocumentSelection document selection}\n\t\t\t\t\t * starts or ends at incorrect position.\n\t\t\t\t\t *\n\t\t\t\t\t * @error document-selection-wrong-position\n\t\t\t\t\t * @param {module:engine/model/range~Range} range\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'document-selection-wrong-position: Range from document selection starts or ends at incorrect position.',\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t{ range }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Update markers data stored by the selection after each marker change.\n\t\tthis.listenTo( this._model.markers, 'update', () => this._updateMarkers() );\n\n\t\t// Ensure selection is up to date after each change block.\n\t\tthis.listenTo( this._document, 'change', ( evt, batch ) => {\n\t\t\tclearAttributesStoredInElement( this._model, batch );\n\t\t} );\n\t}\n\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\treturn length === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed;\n\t}\n\n\tget anchor() {\n\t\treturn super.anchor || this._document._getDefaultRange().start;\n\t}\n\n\tget focus() {\n\t\treturn super.focus || this._document._getDefaultRange().end;\n\t}\n\n\tget rangeCount() {\n\t\treturn this._ranges.length ? this._ranges.length : 1;\n\t}\n\n\t// Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to\n\t// {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t//\n\t// @readonly\n\t// @type {Boolean}\n\tget hasOwnRange() {\n\t\treturn this._ranges.length > 0;\n\t}\n\n\t// When set to `true` then selection attributes on node before the caret won't be taken\n\t// into consideration while updating selection attributes.\n\t//\n\t// @protected\n\t// @type {Boolean}\n\tget isGravityOverridden() {\n\t\treturn !!this._overriddenGravityRegister.size;\n\t}\n\n\t// Unbinds all events previously bound by live selection.\n\tdestroy() {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tthis._ranges[ i ].detach();\n\t\t}\n\n\t\tthis.stopListening();\n\t}\n\n\t* getRanges() {\n\t\tif ( this._ranges.length ) {\n\t\t\tyield* super.getRanges();\n\t\t} else {\n\t\t\tyield this._document._getDefaultRange();\n\t\t}\n\t}\n\n\tgetFirstRange() {\n\t\treturn super.getFirstRange() || this._document._getDefaultRange();\n\t}\n\n\tgetLastRange() {\n\t\treturn super.getLastRange() || this._document._getDefaultRange();\n\t}\n\n\tsetTo( selectable, optionsOrPlaceOrOffset, options ) {\n\t\tsuper.setTo( selectable, optionsOrPlaceOrOffset, options );\n\t\tthis._updateAttributes( true );\n\t}\n\n\tsetFocus( itemOrPosition, offset ) {\n\t\tsuper.setFocus( itemOrPosition, offset );\n\t\tthis._updateAttributes( true );\n\t}\n\n\tsetAttribute( key, value ) {\n\t\tif ( this._setAttribute( key, value ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\tremoveAttribute( key ) {\n\t\tif ( this._removeAttribute( key ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\toverrideGravity() {\n\t\tconst overrideUid = uid();\n\n\t\t// Remember that another overriding has been requested. It will need to be removed\n\t\t// before the gravity is to be restored.\n\t\tthis._overriddenGravityRegister.add( overrideUid );\n\n\t\tif ( this._overriddenGravityRegister.size === 1 ) {\n\t\t\tthis._updateAttributes( true );\n\t\t}\n\n\t\treturn overrideUid;\n\t}\n\n\trestoreGravity( uid ) {\n\t\tif ( !this._overriddenGravityRegister.has( uid ) ) {\n\t\t\t/**\n\t\t\t * Restoring gravity for an unknown UID is not possible. Make sure you are using a correct\n\t\t\t * UID obtained from the {@link module:engine/model/writer~Writer#overrideSelectionGravity} to restore.\n\t\t\t *\n\t\t\t * @error document-selection-gravity-wrong-restore\n\t\t\t * @param {String} uid The unique identifier returned by\n\t\t\t * {@link module:engine/model/documentselection~DocumentSelection#_overrideGravity}.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'document-selection-gravity-wrong-restore: Attempting to restore the selection gravity for an unknown UID.',\n\t\t\t\tthis,\n\t\t\t\t{ uid }\n\t\t\t);\n\t\t}\n\n\t\tthis._overriddenGravityRegister.delete( uid );\n\n\t\t// Restore gravity only when all overriding have been restored.\n\t\tif ( !this.isGravityOverridden ) {\n\t\t\tthis._updateAttributes( true );\n\t\t}\n\t}\n\n\t_popRange() {\n\t\tthis._ranges.pop().detach();\n\t}\n\n\t_pushRange( range ) {\n\t\tconst liveRange = this._prepareRange( range );\n\n\t\t// `undefined` is returned when given `range` is in graveyard root.\n\t\tif ( liveRange ) {\n\t\t\tthis._ranges.push( liveRange );\n\t\t}\n\t}\n\n\t// Prepares given range to be added to selection. Checks if it is correct,\n\t// converts it to {@link module:engine/model/liverange~LiveRange LiveRange}\n\t// and sets listeners listening to the range's change event.\n\t//\n\t// @private\n\t// @param {module:engine/model/range~Range} range\n\t_prepareRange( range ) {\n\t\tthis._checkRange( range );\n\n\t\tif ( range.root == this._document.graveyard ) {\n\t\t\t// @if CK_DEBUG // console.warn( 'Trying to add a Range that is in the graveyard root. Range rejected.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst liveRange = LiveRange.fromRange( range );\n\n\t\tliveRange.on( 'change:range', ( evt, oldRange, data ) => {\n\t\t\tthis._hasChangedRange = true;\n\n\t\t\t// If `LiveRange` is in whole moved to the graveyard, save necessary data. It will be fixed on `Model#applyOperation` event.\n\t\t\tif ( liveRange.root == this._document.graveyard ) {\n\t\t\t\tthis._fixGraveyardRangesData.push( {\n\t\t\t\t\tliveRange,\n\t\t\t\t\tsourcePosition: data.deletionPosition\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\treturn liveRange;\n\t}\n\n\t_updateMarkers() {\n\t\tconst markers = [];\n\n\t\tfor ( const marker of this._model.markers ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tfor ( const selectionRange of this.getRanges() ) {\n\t\t\t\tif ( markerRange.containsRange( selectionRange, !selectionRange.isCollapsed ) ) {\n\t\t\t\t\tmarkers.push( marker );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor ( const marker of markers ) {\n\t\t\tif ( !this.markers.has( marker ) ) {\n\t\t\t\tthis.markers.add( marker );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const marker of Array.from( this.markers ) ) {\n\t\t\tif ( !markers.includes( marker ) ) {\n\t\t\t\tthis.markers.remove( marker );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.\n\t//\n\t// @protected\n\t// @param {Boolean} clearAll\n\t// @fires change:attribute\n\t_updateAttributes( clearAll ) {\n\t\tconst newAttributes = toMap( this._getSurroundingAttributes() );\n\t\tconst oldAttributes = toMap( this.getAttributes() );\n\n\t\tif ( clearAll ) {\n\t\t\t// If `clearAll` remove all attributes and reset priorities.\n\t\t\tthis._attributePriority = new Map();\n\t\t\tthis._attrs = new Map();\n\t\t} else {\n\t\t\t// If not, remove only attributes added with `low` priority.\n\t\t\tfor ( const [ key, priority ] of this._attributePriority ) {\n\t\t\t\tif ( priority == 'low' ) {\n\t\t\t\t\tthis._attrs.delete( key );\n\t\t\t\t\tthis._attributePriority.delete( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._setAttributesTo( newAttributes );\n\n\t\t// Let's evaluate which attributes really changed.\n\t\tconst changed = [];\n\n\t\t// First, loop through all attributes that are set on selection right now.\n\t\t// Check which of them are different than old attributes.\n\t\tfor ( const [ newKey, newValue ] of this.getAttributes() ) {\n\t\t\tif ( !oldAttributes.has( newKey ) || oldAttributes.get( newKey ) !== newValue ) {\n\t\t\t\tchanged.push( newKey );\n\t\t\t}\n\t\t}\n\n\t\t// Then, check which of old attributes got removed.\n\t\tfor ( const [ oldKey ] of oldAttributes ) {\n\t\t\tif ( !this.hasAttribute( oldKey ) ) {\n\t\t\t\tchanged.push( oldKey );\n\t\t\t}\n\t\t}\n\n\t\t// Fire event with exact data (fire only if anything changed).\n\t\tif ( changed.length > 0 ) {\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: changed, directChange: false } );\n\t\t}\n\t}\n\n\t// Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {*} value Attribute value.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether value has changed.\n\t_setAttribute( key, value, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst oldValue = super.getAttribute( key );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( oldValue === value ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.set( key, value );\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// NOTE: Even if attribute is not present in the selection but is provided to this method, it's priority will\n\t// be changed according to `directChange` parameter.\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether attribute was removed. May not be true if such attributes didn't exist or the\n\t// existing attribute had higher priority.\n\t_removeAttribute( key, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( !super.hasAttribute( key ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.delete( key );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through\n\t// `directChange` parameter).\n\t//\n\t// @private\n\t// @param {Map.<String,*>} attrs Iterable object containing attributes to be set.\n\t// @returns {Set.<String>} Changed attribute keys.\n\t_setAttributesTo( attrs ) {\n\t\tconst changed = new Set();\n\n\t\tfor ( const [ oldKey, oldValue ] of this.getAttributes() ) {\n\t\t\t// Do not remove attribute if attribute with same key and value is about to be set.\n\t\t\tif ( attrs.get( oldKey ) === oldValue ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// All rest attributes will be removed so changed attributes won't change .\n\t\t\tthis._removeAttribute( oldKey, false );\n\t\t}\n\n\t\tfor ( const [ key, value ] of attrs ) {\n\t\t\t// Attribute may not be set because of attributes or because same key/value is already added.\n\t\t\tconst gotAdded = this._setAttribute( key, value, false );\n\n\t\t\tif ( gotAdded ) {\n\t\t\t\tchanged.add( key );\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\t// Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t//\n\t// @protected\n\t// @returns {Iterable.<*>}\n\t* _getStoredAttributes() {\n\t\tconst selectionParent = this.getFirstPosition().parent;\n\n\t\tif ( this.isCollapsed && selectionParent.isEmpty ) {\n\t\t\tfor ( const key of selectionParent.getAttributeKeys() ) {\n\t\t\t\tif ( key.startsWith( storePrefix ) ) {\n\t\t\t\t\tconst realKey = key.substr( storePrefix.length );\n\n\t\t\t\t\tyield [ realKey, selectionParent.getAttribute( key ) ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Checks model text nodes that are closest to the selection's first position and returns attributes of first\n\t// found element. If there are no text nodes in selection's first position parent, it returns selection\n\t// attributes stored in that parent.\n\t//\n\t// @private\n\t// @returns {Iterable.<*>} Collection of attributes.\n\t_getSurroundingAttributes() {\n\t\tconst position = this.getFirstPosition();\n\t\tconst schema = this._model.schema;\n\n\t\tlet attrs = null;\n\n\t\tif ( !this.isCollapsed ) {\n\t\t\t// 1. If selection is a range...\n\t\t\tconst range = this.getFirstRange();\n\n\t\t\t// ...look for a first character node in that range and take attributes from it.\n\t\t\tfor ( const value of range ) {\n\t\t\t\t// If the item is an object, we don't want to get attributes from its children.\n\t\t\t\tif ( value.item.is( 'element' ) && schema.isObject( value.item ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( value.type == 'text' ) {\n\t\t\t\t\tattrs = value.item.getAttributes();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// 2. If the selection is a caret or the range does not contain a character node...\n\n\t\t\tconst nodeBefore = position.textNode ? position.textNode : position.nodeBefore;\n\t\t\tconst nodeAfter = position.textNode ? position.textNode : position.nodeAfter;\n\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden ) {\n\t\t\t\t// ...look at the node before caret and take attributes from it if it is a character node.\n\t\t\t\tattrs = getAttrsIfCharacter( nodeBefore );\n\t\t\t}\n\n\t\t\t// 3. If not, look at the node after caret...\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = getAttrsIfCharacter( nodeAfter );\n\t\t\t}\n\n\t\t\t// 4. If not, try to find the first character on the left, that is in the same node.\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden && !attrs ) {\n\t\t\t\tlet node = nodeBefore;\n\n\t\t\t\twhile ( node && !attrs ) {\n\t\t\t\t\tnode = node.previousSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 5. If not found, try to find the first character on the right, that is in the same node.\n\t\t\tif ( !attrs ) {\n\t\t\t\tlet node = nodeAfter;\n\n\t\t\t\twhile ( node && !attrs ) {\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 6. If not found, selection should retrieve attributes from parent.\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = this._getStoredAttributes();\n\t\t\t}\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\t// Fixes a selection range after it ends up in graveyard root.\n\t//\n\t// @private\n\t// @param {module:engine/model/liverange~LiveRange} liveRange The range from selection, that ended up in the graveyard root.\n\t// @param {module:engine/model/position~Position} removedRangeStart Start position of a range which was removed.\n\t_fixGraveyardSelection( liveRange, removedRangeStart ) {\n\t\t// The start of the removed range is the closest position to the `liveRange` - the original selection range.\n\t\t// This is a good candidate for a fixed selection range.\n\t\tconst positionCandidate = removedRangeStart.clone();\n\n\t\t// Find a range that is a correct selection range and is closest to the start of removed range.\n\t\tconst selectionRange = this._model.schema.getNearestSelectionRange( positionCandidate );\n\n\t\t// Remove the old selection range before preparing and adding new selection range. This order is important,\n\t\t// because new range, in some cases, may intersect with old range (it depends on `getNearestSelectionRange()` result).\n\t\tconst index = this._ranges.indexOf( liveRange );\n\t\tthis._ranges.splice( index, 1 );\n\t\tliveRange.detach();\n\n\t\t// If nearest valid selection range has been found - add it in the place of old range.\n\t\tif ( selectionRange ) {\n\t\t\t// Check the range, convert it to live range, bind events, etc.\n\t\t\tconst newRange = this._prepareRange( selectionRange );\n\n\t\t\t// Add new range in the place of old range.\n\t\t\tthis._ranges.splice( index, 0, newRange );\n\t\t}\n\t\t// If nearest valid selection range cannot be found - just removing the old range is fine.\n\t}\n}\n\n// Helper function for {@link module:engine/model/liveselection~LiveSelection#_updateAttributes}.\n//\n// It takes model item, checks whether it is a text node (or text proxy) and, if so, returns it's attributes. If not, returns `null`.\n//\n// @param {module:engine/model/item~Item|null}  node\n// @returns {Boolean}\nfunction getAttrsIfCharacter( node ) {\n\tif ( node instanceof TextProxy || node instanceof Text ) {\n\t\treturn node.getAttributes();\n\t}\n\n\treturn null;\n}\n\n// Removes selection attributes from element which is not empty anymore.\n//\n// @private\n// @param {module:engine/model/model~Model} model\n// @param {module:engine/model/batch~Batch} batch\nfunction clearAttributesStoredInElement( model, batch ) {\n\tconst differ = model.document.differ;\n\n\tfor ( const entry of differ.getChanges() ) {\n\t\tif ( entry.type != 'insert' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst changeParent = entry.position.parent;\n\t\tconst isNoLongerEmpty = entry.length === changeParent.maxOffset;\n\n\t\tif ( isNoLongerEmpty ) {\n\t\t\tmodel.enqueueChange( batch, writer => {\n\t\t\t\tconst storedAttributes = Array.from( changeParent.getAttributeKeys() )\n\t\t\t\t\t.filter( key => key.startsWith( storePrefix ) );\n\n\t\t\t\tfor ( const key of storedAttributes ) {\n\t\t\t\t\twriter.removeAttribute( key, changeParent );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/conversionhelpers\n */\n\n/**\n * Base class for conversion helpers.\n */\nexport default class ConversionHelpers {\n\t/**\n\t * Creates a conversion helpers instance.\n\t *\n\t * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} dispatchers\n\t */\n\tconstructor( dispatchers ) {\n\t\tthis._dispatchers = dispatchers;\n\t}\n\n\t/**\n\t * Registers a conversion helper.\n\t *\n\t * **Note**: See full usage example in the `{@link module:engine/conversion/conversion~Conversion#for conversion.for()}`\n\t * method description.\n\t *\n\t * @param {Function} conversionHelper The function to be called on event.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers|module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\tadd( conversionHelper ) {\n\t\tfor ( const dispatcher of this._dispatchers ) {\n\t\t\tconversionHelper( dispatcher );\n\t\t}\n\n\t\treturn this;\n\t}\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Contains downcast (model-to-view) converters for {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}.\n *\n * @module engine/conversion/downcasthelpers\n */\n\nimport ModelRange from '../model/range';\nimport ModelSelection from '../model/selection';\nimport ModelElement from '../model/element';\n\nimport ViewAttributeElement from '../view/attributeelement';\nimport DocumentSelection from '../model/documentselection';\nimport ConversionHelpers from './conversionhelpers';\n\nimport { cloneDeep } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Downcast conversion helper functions.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\nexport default class DowncastHelpers extends ConversionHelpers {\n\t/**\n\t * Model element to view element conversion helper.\n\t *\n\t * This conversion results in creating a view element. For example, model `<paragraph>Foo</paragraph>` becomes `<p>Foo</p>` in the view.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'p'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'div',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'fancyParagraph',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'fancy'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t *\t\t\tmodel: 'heading',\n\t *\t\t\tview: ( modelElement, viewWriter ) => {\n\t *\t\t\t\treturn viewWriter.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) )\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #elementToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model element to convert.\n\t * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n\t * that takes the model element and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n\t * as parameters and returns a view container element.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\telementToElement( config ) {\n\t\treturn this.add( downcastElementToElement( config ) );\n\t}\n\n\t/**\n\t * Model attribute to view element conversion helper.\n\t *\n\t * This conversion results in wrapping view nodes with a view attribute element. For example, a model text node with\n\t * `\"Foo\"` as data and the `bold` attribute becomes `<strong>Foo</strong>` in the view.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'strong'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'b',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'invert',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: [ 'font-light', 'bg-dark' ]\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalues: [ 'big', 'small' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tbig: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '1.2em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '0.8em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: ( modelAttributeValue, viewWriter ) => {\n\t *\t\t\t\treturn viewWriter.createAttributeElement( 'span', {\n\t *\t\t\t\t\tstyle: 'font-weight:' + modelAttributeValue\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'color',\n\t *\t\t\t\tname: '$text'\n\t *\t\t\t},\n\t *\t\t\tview: ( modelAttributeValue, viewWriter ) => {\n\t *\t\t\t\treturn viewWriter.createAttributeElement( 'span', {\n\t *\t\t\t\t\tstyle: 'color:' + modelAttributeValue\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #attributeToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n\t * of `String`s with possible values if the model attribute is an enumerable.\n\t * @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view A view element definition or a function\n\t * that takes the model attribute value and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n\t * as parameters and returns a view attribute element. If `config.model.values` is\n\t * given, `config.view` should be an object assigning values from `config.model.values` to view element definitions or functions.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tattributeToElement( config ) {\n\t\treturn this.add( downcastAttributeToElement( config ) );\n\t}\n\n\t/**\n\t * Model attribute to view attribute conversion helper.\n\t *\n\t * This conversion results in adding an attribute to a view node, basing on an attribute from a model node. For example,\n\t * `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>`.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'source',\n\t *\t\t\tview: 'src'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'source',\n\t *\t\t\tview: 'href',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'source'\n\t *\t\t\t},\n\t *\t\t\tview: 'src'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'styled',\n\t *\t\t\t\tvalues: [ 'dark', 'light' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tdark: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'styled', 'styled-dark' ]\n\t *\t\t\t\t},\n\t *\t\t\t\tlight: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'styled', 'styled-light' ]\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t *\t\t\tmodel: 'styled',\n\t *\t\t\tview: modelAttributeValue => ( { key: 'class', value: 'styled-' + modelAttributeValue } )\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #attributeToAttribute\n\t * @param {Object} config Conversion configuration.\n\t * @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n\t * the attribute key, possible values and, optionally, an element name to convert from.\n\t * @param {String|Object|Function} config.view A view attribute key, or a `{ key, value }` object or a function that takes\n\t * the model attribute value and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\n\t * array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n\t * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n\t * `{ key, value }` objects or a functions.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tattributeToAttribute( config ) {\n\t\treturn this.add( downcastAttributeToAttribute( config ) );\n\t}\n\n\t/**\n\t * Model marker to view element conversion helper.\n\t *\n\t * This conversion results in creating a view element on the boundaries of the converted marker. If the converted marker\n\t * is collapsed, only one element is created. For example, model marker set like this: `<paragraph>F[oo b]ar</paragraph>`\n\t * becomes `<p>F<span data-marker=\"search\"></span>oo b<span data-marker=\"search\"></span>ar</p>` in the view.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: 'marker-search'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: 'search-result',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tattributes: {\n\t *\t\t\t\t\t'data-marker': 'search'\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tview: ( markerData, viewWriter ) => {\n\t *\t\t\t\treturn viewWriter.createUIElement( 'span', {\n\t *\t\t\t\t\t'data-marker': 'search',\n\t *\t\t\t\t\t'data-start': markerData.isOpening\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * If a function is passed as the `config.view` parameter, it will be used to generate both boundary elements. The function\n\t * receives the `data` object as a parameter and should return an instance of the\n\t * {@link module:engine/view/uielement~UIElement view UI element}. The `data` object and\n\t * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi `conversionApi`} are passed from\n\t * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}. Additionally,\n\t * the `data.isOpening` parameter is passed, which is set to `true` for the marker start boundary element, and `false` to\n\t * the marker end boundary element.\n\t *\n\t * This kind of conversion is useful for saving data into the database, so it should be used in the data conversion pipeline.\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #markerToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model marker (or model marker group) to convert.\n\t * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n\t * that takes the model marker data as a parameter and returns a view UI element.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tmarkerToElement( config ) {\n\t\treturn this.add( downcastMarkerToElement( config ) );\n\t}\n\n\t/**\n\t * Model marker to highlight conversion helper.\n\t *\n\t * This conversion results in creating a highlight on view nodes. For this kind of conversion,\n\t * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} should be provided.\n\t *\n\t * For text nodes, a `<span>` {@link module:engine/view/attributeelement~AttributeElement} is created and it wraps all text nodes\n\t * in the converted marker range. For example, a model marker set like this: `<paragraph>F[oo b]ar</paragraph>` becomes\n\t * `<p>F<span class=\"comment\">oo b</span>ar</p>` in the view.\n\t *\n\t * {@link module:engine/view/containerelement~ContainerElement} may provide a custom way of handling highlight. Most often,\n\t * the element itself is given classes and attributes described in the highlight descriptor (instead of being wrapped in `<span>`).\n\t * For example, a model marker set like this: `[<image src=\"foo.jpg\"></image>]` becomes `<img src=\"foo.jpg\" class=\"comment\"></img>`\n\t * in the view.\n\t *\n\t * For container elements, the conversion is two-step. While the converter processes the highlight descriptor and passes it\n\t * to a container element, it is the container element instance itself that applies values from the highlight descriptor.\n\t * So, in a sense, the converter takes care of stating what should be applied on what, while the element decides how to apply that.\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( { model: 'comment', view: { classes: 'comment' } } );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( {\n\t *\t\t\tmodel: 'comment',\n\t *\t\t\tview: { classes: 'new-comment' },\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( {\n\t *\t\t\tmodel: 'comment',\n\t *\t\t\tview: data => {\n\t *\t\t\t\t// Assuming that the marker name is in a form of comment:commentType.\n\t *\t\t\t\tconst commentType = data.markerName.split( ':' )[ 1 ];\n\t *\n\t *\t\t\t\treturn {\n\t *\t\t\t\t\tclasses: [ 'comment', 'comment-' + commentType ]\n\t *\t\t\t\t};\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * If a function is passed as the `config.view` parameter, it will be used to generate the highlight descriptor. The function\n\t * receives the `data` object as a parameter and should return a\n\t * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor}.\n\t * The `data` object properties are passed from {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}.\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #markerToHighlight\n\t * @param {Object} config Conversion configuration.\n\t * @param {String} config.model The name of the model marker (or model marker group) to convert.\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} config.view A highlight descriptor\n\t * that will be used for highlighting or a function that takes the model marker data as a parameter and returns a highlight descriptor.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n\t */\n\tmarkerToHighlight( config ) {\n\t\treturn this.add( downcastMarkerToHighlight( config ) );\n\t}\n}\n\n/**\n * Function factory that creates a default downcast converter for text insertion changes.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'insert:$text', insertText() );\n *\n * @returns {Function} Insert text event converter.\n */\nexport function insertText() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\t\tconst viewText = viewWriter.createText( data.item.data );\n\n\t\tviewWriter.insert( viewPosition, viewText );\n\t};\n}\n\n/**\n * Function factory that creates a default downcast converter for node remove changes.\n *\n *\t\tmodelDispatcher.on( 'remove', remove() );\n *\n * @returns {Function} Remove event converter.\n */\nexport function remove() {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Find view range start position by mapping model position at which the remove happened.\n\t\tconst viewStart = conversionApi.mapper.toViewPosition( data.position );\n\n\t\tconst modelEnd = data.position.getShiftedBy( data.length );\n\t\tconst viewEnd = conversionApi.mapper.toViewPosition( modelEnd, { isPhantom: true } );\n\n\t\tconst viewRange = conversionApi.writer.createRange( viewStart, viewEnd );\n\n\t\t// Trim the range to remove in case some UI elements are on the view range boundaries.\n\t\tconst removed = conversionApi.writer.remove( viewRange.getTrimmed() );\n\n\t\t// After the range is removed, unbind all view elements from the model.\n\t\t// Range inside view document fragment is used to unbind deeply.\n\t\tfor ( const child of conversionApi.writer.createRangeIn( removed ).getItems() ) {\n\t\t\tconversionApi.mapper.unbindViewElement( child );\n\t\t}\n\t};\n}\n\n/**\n * Creates a `<span>` {@link module:engine/view/attributeelement~AttributeElement view attribute element} from the information\n * provided by the {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor} object. If a priority\n * is not provided in the descriptor, the default priority will be used.\n *\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n * @returns {module:engine/view/attributeelement~AttributeElement}\n */\nexport function createViewElementFromHighlightDescriptor( descriptor ) {\n\tconst viewElement = new ViewAttributeElement( 'span', descriptor.attributes );\n\n\tif ( descriptor.classes ) {\n\t\tviewElement._addClass( descriptor.classes );\n\t}\n\n\tif ( descriptor.priority ) {\n\t\tviewElement._priority = descriptor.priority;\n\t}\n\n\tviewElement._id = descriptor.id;\n\n\treturn viewElement;\n}\n\n/**\n * Function factory that creates a converter which converts a non-collapsed {@link module:engine/model/selection~Selection model selection}\n * to a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object and maps model positions from the selection to view positions.\n *\n *\t\tmodelDispatcher.on( 'selection', convertRangeSelection() );\n *\n * @returns {Function} Selection converter.\n */\nexport function convertRangeSelection() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst selection = data.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tconst viewRange = conversionApi.mapper.toViewRange( range );\n\t\t\tviewRanges.push( viewRange );\n\t\t}\n\n\t\tconversionApi.writer.setSelection( viewRanges, { backward: selection.isBackward } );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts a collapsed {@link module:engine/model/selection~Selection model selection} to\n * a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object, maps the model selection position to the view position and breaks\n * {@link module:engine/view/attributeelement~AttributeElement attribute elements} at the selection position.\n *\n *\t\tmodelDispatcher.on( 'selection', convertCollapsedSelection() );\n *\n * An example of the view state before and after converting the collapsed selection:\n *\n *\t\t   <p><strong>f^oo<strong>bar</p>\n *\t\t-> <p><strong>f</strong>^<strong>oo</strong>bar</p>\n *\n * By breaking attribute elements like `<strong>`, the selection is in a correct element. Then, when the selection attribute is\n * converted, broken attributes might be merged again, or the position where the selection is may be wrapped\n * with different, appropriate attribute elements.\n *\n * See also {@link module:engine/conversion/downcasthelpers~clearAttributes} which does a clean-up\n * by merging attributes.\n *\n * @returns {Function} Selection converter.\n */\nexport function convertCollapsedSelection() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst selection = data.selection;\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst modelPosition = selection.getFirstPosition();\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( modelPosition );\n\t\tconst brokenPosition = viewWriter.breakAttributes( viewPosition );\n\n\t\tviewWriter.setSelection( brokenPosition );\n\t};\n}\n\n/**\n * Function factory that creates a converter which clears artifacts after the previous\n * {@link module:engine/model/selection~Selection model selection} conversion. It removes all empty\n * {@link module:engine/view/attributeelement~AttributeElement view attribute elements} and merges sibling attributes at all start and end\n * positions of all ranges.\n *\n *\t\t   <p><strong>^</strong></p>\n *\t\t-> <p>^</p>\n *\n *\t\t   <p><strong>foo</strong>^<strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n *\t\t   <p><strong>foo</strong><em>^</em><strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n * This listener should be assigned before any converter for the new selection:\n *\n *\t\tmodelDispatcher.on( 'selection', clearAttributes() );\n *\n * See {@link module:engine/conversion/downcasthelpers~convertCollapsedSelection}\n * which does the opposite by breaking attributes in the selection position.\n *\n * @returns {Function} Selection converter.\n */\nexport function clearAttributes() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t// Not collapsed selection should not have artifacts.\n\t\t\tif ( range.isCollapsed ) {\n\t\t\t\t// Position might be in the node removed by the view writer.\n\t\t\t\tif ( range.end.parent.document ) {\n\t\t\t\t\tconversionApi.writer.mergeAttributes( range.start );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tviewWriter.setSelection( null );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts set/change/remove attribute changes from the model to the view.\n * It can also be used to convert selection attributes. In that case, an empty attribute element will be created and the\n * selection will be put inside it.\n *\n * Attributes from the model are converted to a view element that will be wrapping these view nodes that are bound to\n * model elements having the given attribute. This is useful for attributes like `bold` that may be set on text nodes in the model\n * but are represented as an element in the view:\n *\n *\t\t[paragraph]              MODEL ====> VIEW        <p>\n *\t\t\t|- a {bold: true}                             |- <b>\n *\t\t\t|- b {bold: true}                             |   |- ab\n *\t\t\t|- c                                          |- c\n *\n * Passed `Function` will be provided with the attribute value and then all the parameters of the\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be the wrapping element.\n * When the provided `Function` does not return any element, no conversion will take place.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'attribute:bold', wrap( ( modelAttributeValue, viewWriter ) => {\n *\t\t\treturn viewWriter.createAttributeElement( 'strong' );\n *\t\t} );\n *\n * @protected\n * @param {Function} elementCreator Function returning a view element that will be used for wrapping.\n * @returns {Function} Set/change attribute converter.\n */\nexport function wrap( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Recreate current wrapping node. It will be used to unwrap view range if the attribute value has changed\n\t\t// or the attribute was removed.\n\t\tconst oldViewElement = elementCreator( data.attributeOldValue, conversionApi.writer );\n\n\t\t// Create node to wrap with.\n\t\tconst newViewElement = elementCreator( data.attributeNewValue, conversionApi.writer );\n\n\t\tif ( !oldViewElement && !newViewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\n\t\t\t// Selection attribute conversion.\n\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), newViewElement );\n\t\t} else {\n\t\t\t// Node attribute conversion.\n\t\t\tlet viewRange = conversionApi.mapper.toViewRange( data.range );\n\n\t\t\t// First, unwrap the range from current wrapper.\n\t\t\tif ( data.attributeOldValue !== null && oldViewElement ) {\n\t\t\t\tviewRange = viewWriter.unwrap( viewRange, oldViewElement );\n\t\t\t}\n\n\t\t\tif ( data.attributeNewValue !== null && newViewElement ) {\n\t\t\t\tviewWriter.wrap( viewRange, newViewElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts node insertion changes from the model to the view.\n * The function passed will be provided with all the parameters of the dispatcher's\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be inserted into the view.\n *\n * The converter automatically consumes the corresponding value from the consumables list, stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}) and binds the model and view elements.\n *\n *\t\tdowncastDispatcher.on(\n *\t\t\t'insert:myElem',\n *\t\t\tinsertElement( ( modelItem, viewWriter ) => {\n *\t\t\t\tconst text = viewWriter.createText( 'myText' );\n *\t\t\t\tconst myElem = viewWriter.createElement( 'myElem', { myAttr: 'my-' + modelItem.getAttribute( 'myAttr' ) }, text );\n *\n *\t\t\t\t// Do something fancy with `myElem` using `modelItem` or other parameters.\n *\n *\t\t\t\treturn myElem;\n *\t\t\t}\n *\t\t) );\n *\n * @protected\n * @param {Function} elementCreator Function returning a view element, which will be inserted.\n * @returns {Function} Insert element event converter.\n */\nexport function insertElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewElement = elementCreator( data.item, conversionApi.writer );\n\n\t\tif ( !viewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n\t\tconversionApi.writer.insert( viewPosition, viewElement );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts marker adding change to the\n * {@link module:engine/view/uielement~UIElement view UI element}.\n *\n * The view UI element that will be added to the view depends on the passed parameter. See {@link ~insertElement}.\n * In case of a non-collapsed range, the UI element will not wrap nodes but separate elements will be placed at the beginning\n * and at the end of the range.\n *\n * This converter binds created UI elements with the marker name using {@link module:engine/conversion/mapper~Mapper#bindElementToMarker}.\n *\n * @protected\n * @param {module:engine/view/uielement~UIElement|Function} elementCreator A view UI element or a function returning the view element\n * that will be inserted.\n * @returns {Function} Insert element event converter.\n */\nexport function insertUIElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Create two view elements. One will be inserted at the beginning of marker, one at the end.\n\t\t// If marker is collapsed, only \"opening\" element will be inserted.\n\t\tdata.isOpening = true;\n\t\tconst viewStartElement = elementCreator( data, conversionApi.writer );\n\n\t\tdata.isOpening = false;\n\t\tconst viewEndElement = elementCreator( data, conversionApi.writer );\n\n\t\tif ( !viewStartElement || !viewEndElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst markerRange = data.markerRange;\n\n\t\t// Marker that is collapsed has consumable build differently that non-collapsed one.\n\t\t// For more information see `addMarker` event description.\n\t\t// If marker's range is collapsed - check if it can be consumed.\n\t\tif ( markerRange.isCollapsed && !conversionApi.consumable.consume( markerRange, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If marker's range is not collapsed - consume all items inside.\n\t\tfor ( const value of markerRange ) {\n\t\t\tif ( !conversionApi.consumable.consume( value.item, evt.name ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst mapper = conversionApi.mapper;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// Add \"opening\" element.\n\t\tviewWriter.insert( mapper.toViewPosition( markerRange.start ), viewStartElement );\n\t\tconversionApi.mapper.bindElementToMarker( viewStartElement, data.markerName );\n\n\t\t// Add \"closing\" element only if range is not collapsed.\n\t\tif ( !markerRange.isCollapsed ) {\n\t\t\tviewWriter.insert( mapper.toViewPosition( markerRange.end ), viewEndElement );\n\t\t\tconversionApi.mapper.bindElementToMarker( viewEndElement, data.markerName );\n\t\t}\n\n\t\tevt.stop();\n\t};\n}\n\n// Function factory that returns a default downcast converter for removing a {@link module:engine/view/uielement~UIElement UI element}\n// basing on marker remove change.\n//\n// This converter unbinds elements from the marker name.\n//\n// @returns {Function} Removed UI element converter.\nfunction removeUIElement() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst elements = conversionApi.mapper.markerNameToElements( data.markerName );\n\n\t\tif ( !elements ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const element of elements ) {\n\t\t\tconversionApi.mapper.unbindElementFromMarkerName( element, data.markerName );\n\t\t\tconversionApi.writer.clear( conversionApi.writer.createRangeOn( element ), element );\n\t\t}\n\n\t\tconversionApi.writer.clearClonedElementsGroup( data.markerName );\n\n\t\tevt.stop();\n\t};\n}\n\n// Function factory that creates a converter which converts set/change/remove attribute changes from the model to the view.\n//\n// Attributes from the model are converted to the view element attributes in the view. You may provide a custom function to generate\n// a key-value attribute pair to add/change/remove. If not provided, model attributes will be converted to view element\n// attributes on a one-to-one basis.\n//\n// *Note:** The provided attribute creator should always return the same `key` for a given attribute from the model.\n//\n// The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n// {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n//\n//\t\tmodelDispatcher.on( 'attribute:customAttr:myElem', changeAttribute( ( value, data ) => {\n//\t\t\t// Change attribute key from `customAttr` to `class` in the view.\n//\t\t\tconst key = 'class';\n//\t\t\tlet value = data.attributeNewValue;\n//\n//\t\t\t// Force attribute value to 'empty' if the model element is empty.\n//\t\t\tif ( data.item.childCount === 0 ) {\n//\t\t\t\tvalue = 'empty';\n//\t\t\t}\n//\n//\t\t\t// Return the key-value pair.\n//\t\t\treturn { key, value };\n//\t\t} ) );\n//\n// @param {Function} [attributeCreator] Function returning an object with two properties: `key` and `value`, which\n// represent the attribute key and attribute value to be set on a {@link module:engine/view/element~Element view element}.\n// The function is passed the model attribute value as the first parameter and additional data about the change as the second parameter.\n// @returns {Function} Set/change attribute converter.\nfunction changeAttribute( attributeCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst oldAttribute = attributeCreator( data.attributeOldValue, data );\n\t\tconst newAttribute = attributeCreator( data.attributeNewValue, data );\n\n\t\tif ( !oldAttribute && !newAttribute ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// If model item cannot be mapped to a view element, it means item is not an `Element` instance but a `TextProxy` node.\n\t\t// Only elements can have attributes in a view so do not proceed for anything else (#1587).\n\t\tif ( !viewElement ) {\n\t\t\t/**\n\t\t\t * This error occurs when a {@link module:engine/model/textproxy~TextProxy text node's} attribute is to be downcasted\n\t\t\t * by {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `Attribute to Attribute converter`}.\n\t\t\t * In most cases it is caused by converters misconfiguration when only \"generic\" converter is defined:\n\t\t\t *\n\t\t\t *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n\t\t\t *\t\t\tmodel: 'attribute-name',\n\t\t\t *\t\t\tview: 'attribute-name'\n\t\t\t *\t\t} ) );\n\t\t\t *\n\t\t\t * and given attribute is used on text node, for example:\n\t\t\t *\n\t\t\t *\t\tmodel.change( writer => {\n\t\t\t *\t\t\twriter.insertText( 'Foo', { 'attribute-name': 'bar' }, parent, 0 );\n\t\t\t *\t\t} );\n\t\t\t *\n\t\t\t * In such cases, to convert the same attribute for both {@link module:engine/model/element~Element}\n\t\t\t * and {@link module:engine/model/textproxy~TextProxy `Text`} nodes, text specific\n\t\t\t * {@link module:engine/conversion/conversion~Conversion#attributeToElement `Attribute to Element converter`}\n\t\t\t * with higher {@link module:utils/priorities~PriorityString priority} must also be defined:\n\t\t\t *\n\t\t\t *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t\t\t *\t\t\tmodel: {\n\t\t\t *\t\t\t\tkey: 'attribute-name',\n\t\t\t *\t\t\t\tname: '$text'\n\t\t\t *\t\t\t},\n\t\t\t *\t\t\tview: ( value, writer ) => {\n\t\t\t *\t\t\t\treturn writer.createAttributeElement( 'span', { 'attribute-name': value } );\n\t\t\t *\t\t\t},\n\t\t\t *\t\t\tconverterPriority: 'high'\n\t\t\t *\t\t} ) );\n\t\t\t *\n\t\t\t * @error conversion-attribute-to-attribute-on-text\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'conversion-attribute-to-attribute-on-text: ' +\n\t\t\t\t'Trying to convert text node\\'s attribute with attribute-to-attribute converter.',\n\t\t\t\t[ data, conversionApi ]\n\t\t\t);\n\t\t}\n\n\t\t// First remove the old attribute if there was one.\n\t\tif ( data.attributeOldValue !== null && oldAttribute ) {\n\t\t\tif ( oldAttribute.key == 'class' ) {\n\t\t\t\tconst classes = Array.isArray( oldAttribute.value ) ? oldAttribute.value : [ oldAttribute.value ];\n\n\t\t\t\tfor ( const className of classes ) {\n\t\t\t\t\tviewWriter.removeClass( className, viewElement );\n\t\t\t\t}\n\t\t\t} else if ( oldAttribute.key == 'style' ) {\n\t\t\t\tconst keys = Object.keys( oldAttribute.value );\n\n\t\t\t\tfor ( const key of keys ) {\n\t\t\t\t\tviewWriter.removeStyle( key, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewWriter.removeAttribute( oldAttribute.key, viewElement );\n\t\t\t}\n\t\t}\n\n\t\t// Then set the new attribute.\n\t\tif ( data.attributeNewValue !== null && newAttribute ) {\n\t\t\tif ( newAttribute.key == 'class' ) {\n\t\t\t\tconst classes = Array.isArray( newAttribute.value ) ? newAttribute.value : [ newAttribute.value ];\n\n\t\t\t\tfor ( const className of classes ) {\n\t\t\t\t\tviewWriter.addClass( className, viewElement );\n\t\t\t\t}\n\t\t\t} else if ( newAttribute.key == 'style' ) {\n\t\t\t\tconst keys = Object.keys( newAttribute.value );\n\n\t\t\t\tfor ( const key of keys ) {\n\t\t\t\t\tviewWriter.setStyle( key, newAttribute.value[ key ], viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewWriter.setAttribute( newAttribute.key, newAttribute.value, viewElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Function factory that creates a converter which converts the text inside marker's range. The converter wraps the text with\n// {@link module:engine/view/attributeelement~AttributeElement} created from the provided descriptor.\n// See {link module:engine/conversion/downcasthelpers~createViewElementFromHighlightDescriptor}.\n//\n// It can also be used to convert the selection that is inside a marker. In that case, an empty attribute element will be\n// created and the selection will be put inside it.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter binds the created {@link module:engine/view/attributeelement~AttributeElement attribute elemens} with the marker name\n// using the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\nfunction highlightText( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !data.item ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) && !data.item.is( 'textProxy' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = createViewElementFromHighlightDescriptor( descriptor );\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\n\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), viewElement, viewSelection );\n\t\t} else {\n\t\t\tconst viewRange = conversionApi.mapper.toViewRange( data.range );\n\t\t\tconst rangeAfterWrap = viewWriter.wrap( viewRange, viewElement );\n\n\t\t\tfor ( const element of rangeAfterWrap.getItems() ) {\n\t\t\t\tif ( element.is( 'attributeElement' ) && element.isSimilar( viewElement ) ) {\n\t\t\t\t\tconversionApi.mapper.bindElementToMarker( element, data.markerName );\n\n\t\t\t\t\t// One attribute element is enough, because all of them are bound together by the view writer.\n\t\t\t\t\t// Mapper uses this binding to get all the elements no matter how many of them are registered in the mapper.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Converter function factory. It creates a function which applies the marker's highlight to an element inside the marker's range.\n//\n// The converter checks if an element has the `addHighlight` function stored as a\n// {@link module:engine/view/element~Element#_setCustomProperty custom property} and, if so, uses it to apply the highlight.\n// In such case the converter will consume all element's children, assuming that they were handled by the element itself.\n//\n// When the `addHighlight` custom property is not present, the element is not converted in any special way.\n// This means that converters will proceed to convert the element's child nodes.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter binds altered {@link module:engine/view/containerelement~ContainerElement container elements} with the marker name using\n// the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\nfunction highlightElement( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !data.item ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( data.item instanceof ModelElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\n\t\tif ( viewElement && viewElement.getCustomProperty( 'addHighlight' ) ) {\n\t\t\t// Consume element itself.\n\t\t\tconversionApi.consumable.consume( data.item, evt.name );\n\n\t\t\t// Consume all children nodes.\n\t\t\tfor ( const value of ModelRange._createIn( data.item ) ) {\n\t\t\t\tconversionApi.consumable.consume( value.item, evt.name );\n\t\t\t}\n\n\t\t\tviewElement.getCustomProperty( 'addHighlight' )( viewElement, descriptor, conversionApi.writer );\n\n\t\t\tconversionApi.mapper.bindElementToMarker( viewElement, data.markerName );\n\t\t}\n\t};\n}\n\n// Function factory that creates a converter which converts the removing model marker to the view.\n//\n// Both text nodes and elements are handled by this converter but they are handled a bit differently.\n//\n// Text nodes are unwrapped using the {@link module:engine/view/attributeelement~AttributeElement attribute element} created from the\n// provided highlight descriptor. See {link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n//\n// For elements, the converter checks if an element has the `removeHighlight` function stored as a\n// {@link module:engine/view/element~Element#_setCustomProperty custom property}. If so, it uses it to remove the highlight.\n// In such case, the children of that element will not be converted.\n//\n// When `removeHighlight` is not present, the element is not converted in any special way.\n// The converter will proceed to convert the element's child nodes instead.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter unbinds elements from the marker name.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\nfunction removeHighlight( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// This conversion makes sense only for non-collapsed range.\n\t\tif ( data.markerRange.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// View element that will be used to unwrap `AttributeElement`s.\n\t\tconst viewHighlightElement = createViewElementFromHighlightDescriptor( descriptor );\n\n\t\t// Get all elements bound with given marker name.\n\t\tconst elements = conversionApi.mapper.markerNameToElements( data.markerName );\n\n\t\tif ( !elements ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const element of elements ) {\n\t\t\tconversionApi.mapper.unbindElementFromMarkerName( element, data.markerName );\n\n\t\t\tif ( element.is( 'attributeElement' ) ) {\n\t\t\t\tconversionApi.writer.unwrap( conversionApi.writer.createRangeOn( element ), viewHighlightElement );\n\t\t\t} else {\n\t\t\t\t// if element.is( 'containerElement' ).\n\t\t\t\telement.getCustomProperty( 'removeHighlight' )( element, descriptor.id, conversionApi.writer );\n\t\t\t}\n\t\t}\n\n\t\tconversionApi.writer.clearClonedElementsGroup( data.markerName );\n\n\t\tevt.stop();\n\t};\n}\n\n// Model element to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#elementToElement `.elementToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model element to convert.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n// that takes the model element and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n// as parameters and returns a view container element.\n// @returns {Function} Conversion helper.\nfunction downcastElementToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconfig.view = normalizeToElementConfig( config.view, 'container' );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'insert:' + config.model, insertElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model attribute to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#attributeToElement `.attributeToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n// of `String`s with possible values if the model attribute is an enumerable.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view A view element definition or a function\n// that takes the model attribute value and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n// as parameters and returns a view attribute element. If `config.model.values` is\n// given, `config.view` should be an object assigning values from `config.model.values` to view element definitions or functions.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastAttributeToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst modelKey = config.model.key ? config.model.key : config.model;\n\tlet eventName = 'attribute:' + modelKey;\n\n\tif ( config.model.name ) {\n\t\teventName += ':' + config.model.name;\n\t}\n\n\tif ( config.model.values ) {\n\t\tfor ( const modelValue of config.model.values ) {\n\t\t\tconfig.view[ modelValue ] = normalizeToElementConfig( config.view[ modelValue ], 'attribute' );\n\t\t}\n\t} else {\n\t\tconfig.view = normalizeToElementConfig( config.view, 'attribute' );\n\t}\n\n\tconst elementCreator = getFromAttributeCreator( config );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, wrap( elementCreator ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model attribute to view attribute conversion helper.\n//\n// See {@link ~DowncastHelpers#attributeToAttribute `.attributeToAttribute()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n// the attribute key, possible values and, optionally, an element name to convert from.\n// @param {String|Object|Function} config.view A view attribute key, or a `{ key, value }` object or a function that takes\n// the model attribute value and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\n// array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n// If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n// `{ key, value }` objects or a functions.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastAttributeToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst modelKey = config.model.key ? config.model.key : config.model;\n\tlet eventName = 'attribute:' + modelKey;\n\n\tif ( config.model.name ) {\n\t\teventName += ':' + config.model.name;\n\t}\n\n\tif ( config.model.values ) {\n\t\tfor ( const modelValue of config.model.values ) {\n\t\t\tconfig.view[ modelValue ] = normalizeToAttributeConfig( config.view[ modelValue ] );\n\t\t}\n\t} else {\n\t\tconfig.view = normalizeToAttributeConfig( config.view );\n\t}\n\n\tconst elementCreator = getFromAttributeCreator( config );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, changeAttribute( elementCreator ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model marker to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model marker (or model marker group) to convert.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n// that takes the model marker data as a parameter and returns a view UI element.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastMarkerToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconfig.view = normalizeToElementConfig( config.view, 'ui' );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + config.model, insertUIElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + config.model, removeUIElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Model marker to highlight conversion helper.\n//\n// See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model marker (or model marker group) to convert.\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} config.view A highlight descriptor\n// that will be used for highlighting or a function that takes the model marker data as a parameter and returns a highlight descriptor.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction downcastMarkerToHighlight( config ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + config.model, highlightText( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'addMarker:' + config.model, highlightElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + config.model, removeHighlight( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Takes `config.view`, and if it is an {@link module:engine/view/elementdefinition~ElementDefinition}, converts it\n// to a function (because lower level converters accept only element creator functions).\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} view View configuration.\n// @param {'container'|'attribute'|'ui'} viewElementType View element type to create.\n// @returns {Function} Element creator function to use in lower level converters.\nfunction normalizeToElementConfig( view, viewElementType ) {\n\tif ( typeof view == 'function' ) {\n\t\t// If `view` is already a function, don't do anything.\n\t\treturn view;\n\t}\n\n\treturn ( modelData, viewWriter ) => createViewElementFromDefinition( view, viewWriter, viewElementType );\n}\n\n// Creates a view element instance from the provided {@link module:engine/view/elementdefinition~ElementDefinition} and class.\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition} viewElementDefinition\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @param {'container'|'attribute'|'ui'} viewElementType\n// @returns {module:engine/view/element~Element}\nfunction createViewElementFromDefinition( viewElementDefinition, viewWriter, viewElementType ) {\n\tif ( typeof viewElementDefinition == 'string' ) {\n\t\t// If `viewElementDefinition` is given as a `String`, normalize it to an object with `name` property.\n\t\tviewElementDefinition = { name: viewElementDefinition };\n\t}\n\n\tlet element;\n\tconst attributes = Object.assign( {}, viewElementDefinition.attributes );\n\n\tif ( viewElementType == 'container' ) {\n\t\telement = viewWriter.createContainerElement( viewElementDefinition.name, attributes );\n\t} else if ( viewElementType == 'attribute' ) {\n\t\tconst options = {\n\t\t\tpriority: viewElementDefinition.priority || ViewAttributeElement.DEFAULT_PRIORITY\n\t\t};\n\n\t\telement = viewWriter.createAttributeElement( viewElementDefinition.name, attributes, options );\n\t} else {\n\t\t// 'ui'.\n\t\telement = viewWriter.createUIElement( viewElementDefinition.name, attributes );\n\t}\n\n\tif ( viewElementDefinition.styles ) {\n\t\tconst keys = Object.keys( viewElementDefinition.styles );\n\n\t\tfor ( const key of keys ) {\n\t\t\tviewWriter.setStyle( key, viewElementDefinition.styles[ key ], element );\n\t\t}\n\t}\n\n\tif ( viewElementDefinition.classes ) {\n\t\tconst classes = viewElementDefinition.classes;\n\n\t\tif ( typeof classes == 'string' ) {\n\t\t\tviewWriter.addClass( classes, element );\n\t\t} else {\n\t\t\tfor ( const className of classes ) {\n\t\t\t\tviewWriter.addClass( className, element );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn element;\n}\n\nfunction getFromAttributeCreator( config ) {\n\tif ( config.model.values ) {\n\t\treturn ( modelAttributeValue, viewWriter ) => {\n\t\t\tconst view = config.view[ modelAttributeValue ];\n\n\t\t\tif ( view ) {\n\t\t\t\treturn view( modelAttributeValue, viewWriter );\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t} else {\n\t\treturn config.view;\n\t}\n}\n\n// Takes the configuration, adds default parameters if they do not exist and normalizes other parameters to be used in downcast converters\n// for generating a view attribute.\n//\n// @param {Object} view View configuration.\nfunction normalizeToAttributeConfig( view ) {\n\tif ( typeof view == 'string' ) {\n\t\treturn modelAttributeValue => ( { key: view, value: modelAttributeValue } );\n\t} else if ( typeof view == 'object' ) {\n\t\t// { key, value, ... }\n\t\tif ( view.value ) {\n\t\t\treturn () => view;\n\t\t}\n\t\t// { key, ... }\n\t\telse {\n\t\t\treturn modelAttributeValue => ( { key: view.key, value: modelAttributeValue } );\n\t\t}\n\t} else {\n\t\t// function.\n\t\treturn view;\n\t}\n}\n\n// Helper function for `highlight`. Prepares the actual descriptor object using value passed to the converter.\nfunction prepareDescriptor( highlightDescriptor, data, conversionApi ) {\n\t// If passed descriptor is a creator function, call it. If not, just use passed value.\n\tconst descriptor = typeof highlightDescriptor == 'function' ?\n\t\thighlightDescriptor( data, conversionApi ) :\n\t\thighlightDescriptor;\n\n\tif ( !descriptor ) {\n\t\treturn null;\n\t}\n\n\t// Apply default descriptor priority.\n\tif ( !descriptor.priority ) {\n\t\tdescriptor.priority = 10;\n\t}\n\n\t// Default descriptor id is marker name.\n\tif ( !descriptor.id ) {\n\t\tdescriptor.id = data.markerName;\n\t}\n\n\treturn descriptor;\n}\n\n/**\n * An object describing how the marker highlight should be represented in the view.\n *\n * Each text node contained in a highlighted range will be wrapped in a `<span>`\n * {@link module:engine/view/attributeelement~AttributeElement view attribute element} with CSS class(es), attributes and a priority\n * described by this object.\n *\n * Additionally, each {@link module:engine/view/containerelement~ContainerElement container element} can handle displaying the highlight\n * separately by providing the `addHighlight` and `removeHighlight` custom properties. In this case:\n *\n *  * The `HighlightDescriptor` object is passed to the `addHighlight` function upon conversion and should be used to apply the highlight to\n *  the element.\n *  * The descriptor `id` is passed to the `removeHighlight` function upon conversion and should be used to remove the highlight with the\n *  given ID from the element.\n *\n * @typedef {Object} module:engine/conversion/downcasthelpers~HighlightDescriptor\n *\n * @property {String|Array.<String>} classes A CSS class or an array of classes to set. If the descriptor is used to\n * create an {@link module:engine/view/attributeelement~AttributeElement attribute element} over text nodes, these classes will be set\n * on that attribute element. If the descriptor is applied to an element, usually these classes will be set on that element, however,\n * this depends on how the element converts the descriptor.\n *\n * @property {String} [id] Descriptor identifier. If not provided, it defaults to the converted marker's name.\n *\n * @property {Number} [priority] Descriptor priority. If not provided, it defaults to `10`. If the descriptor is used to create\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element}, it will be that element's\n * {@link module:engine/view/attributeelement~AttributeElement#priority priority}. If the descriptor is applied to an element,\n * the priority will be used to determine which descriptor is more important.\n *\n * @property {Object} [attributes] Attributes to set. If the descriptor is used to create\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element} over text nodes, these attributes will be set on that\n * attribute element. If the descriptor is applied to an element, usually these attributes will be set on that element, however,\n * this depends on how the element converts the descriptor.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport Matcher from '../view/matcher';\nimport ModelRange from '../model/range';\nimport ConversionHelpers from './conversionhelpers';\n\nimport { cloneDeep } from 'lodash-es';\nimport ModelSelection from '../model/selection';\n\n/**\n * Contains {@link module:engine/view/view view} to {@link module:engine/model/model model} converters for\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}.\n *\n * @module engine/conversion/upcasthelpers\n */\n\n/**\n * Upcast conversion helper functions.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\nexport default class UpcastHelpers extends ConversionHelpers {\n\t/**\n\t * View element to model element conversion helper.\n\t *\n\t * This conversion results in creating a model element. For example,\n\t * view `<p>Foo</p>` becomes `<paragraph>Foo</paragraph>` in the model.\n\t *\n\t * Keep in mind that the element will be inserted only if it is allowed\n\t * by {@link module:engine/model/schema~Schema schema} configuration.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t *\t\t\tview: 'p',\n\t *\t\t\tmodel: 'paragraph'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t *\t\t\tview: 'p',\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'fancy'\n\t *\t\t\t},\n\t *\t\t\tmodel: 'fancyParagraph'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t * \t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'heading'\n\t * \t\t\t},\n\t * \t\t\tmodel: ( viewElement, modelWriter ) => {\n\t * \t\t\t\treturn modelWriter.createElement( 'heading', { level: viewElement.getAttribute( 'data-level' ) } );\n\t * \t\t\t}\n\t * \t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #elementToElement\n\t * @param {Object} config Conversion configuration.\n\t * @param {module:engine/view/matcher~MatcherPattern} [config.view] Pattern matching all view elements which should be converted. If not\n\t * set, the converter will fire for every view element.\n\t * @param {String|module:engine/model/element~Element|Function} config.model Name of the model element, a model element\n\t * instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\telementToElement( config ) {\n\t\treturn this.add( upcastElementToElement( config ) );\n\t}\n\n\t/**\n\t * View element to model attribute conversion helper.\n\t *\n\t * This conversion results in setting an attribute on a model node. For example, view `<strong>Foo</strong>` becomes\n\t * `Foo` {@link module:engine/model/text~Text model text node} with `bold` attribute set to `true`.\n\t *\n\t * This helper is meant to set a model attribute on all the elements that are inside the converted element:\n\t *\n\t *\t\t<strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n\t *\n\t * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n\t * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text. See\n\t * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute} for comparison.\n\t *\n\t * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: 'strong',\n\t *\t\t\tmodel: 'bold'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: 'strong',\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: 'bold'\n\t *\t\t\t},\n\t *\t\t\tmodel: 'bold'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: [ 'styled', 'styled-dark' ]\n\t *\t\t\t},\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'styled',\n\t *\t\t\t\tvalue: 'dark'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * \t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tstyles: {\n\t *\t\t\t\t\t'font-size': /[\\s\\S]+/\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalue: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\t\t\t\t\tconst value = fontSize.substr( 0, fontSize.length - 2 );\n\t *\n\t *\t\t\t\t\tif ( value <= 10 ) {\n\t *\t\t\t\t\t\treturn 'small';\n\t *\t\t\t\t\t} else if ( value > 12 ) {\n\t *\t\t\t\t\t\treturn 'big';\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #elementToAttribute\n\t * @param {Object} config Conversion configuration.\n\t * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n\t * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n\t * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n\t * If `String` is given, the model attribute value will be set to `true`.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n\t * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\telementToAttribute( config ) {\n\t\treturn this.add( upcastElementToAttribute( config ) );\n\t}\n\n\t/**\n\t * View attribute to model attribute conversion helper.\n\t *\n\t * This conversion results in setting an attribute on a model node. For example, view `<img src=\"foo.jpg\"></img>` becomes\n\t * `<image source=\"foo.jpg\"></image>` in the model.\n\t *\n\t * This helper is meant to convert view attributes from view elements which got converted to the model, so the view attribute\n\t * is set only on the corresponding model node:\n\t *\n\t *\t\t<div class=\"dark\"><div>foo</div></div>    -->    <div dark=\"true\"><div>foo</div></div>\n\t *\n\t * Above, `class=\"dark\"` attribute is added only to the `<div>` elements that has it. This is in contrary to\n\t * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute} which sets attributes for\n\t * all the children in the model:\n\t *\n\t *\t\t<strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n\t *\n\t * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n\t * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text.\n\t *\n\t * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: 'src',\n\t *\t\t\tmodel: 'source'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: { key: 'src' },\n\t *\t\t\tmodel: 'source'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: { key: 'src' },\n\t *\t\t\tmodel: 'source',\n\t *\t\t\tconverterPriority: 'normal'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tkey: 'data-style',\n\t *\t\t\t\tvalue: /[\\s\\S]+/\n\t *\t\t\t},\n\t *\t\t\tmodel: 'styled'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'img',\n\t *\t\t\t\tkey: 'class',\n\t *\t\t\t\tvalue: 'styled-dark'\n\t *\t\t\t},\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'styled',\n\t *\t\t\t\tvalue: 'dark'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n\t *\t\t\tview: {\n\t *\t\t\t\tkey: 'class',\n\t *\t\t\t\tvalue: /styled-[\\S]+/\n\t *\t\t\t},\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'styled'\n\t *\t\t\t\tvalue: viewElement => {\n\t *\t\t\t\t\tconst regexp = /styled-([\\S]+)/;\n\t *\t\t\t\t\tconst match = viewElement.getAttribute( 'class' ).match( regexp );\n\t *\n\t *\t\t\t\t\treturn match[ 1 ];\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #attributeToAttribute\n\t * @param {Object} config Conversion configuration.\n\t * @param {String|Object} config.view Specifies which view attribute will be converted. If a `String` is passed,\n\t * attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n\t * specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n\t * property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n\t * a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n\t * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n\t * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n\t * If `String` is given, the model attribute value will be same as view attribute value.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n\t * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\tattributeToAttribute( config ) {\n\t\treturn this.add( upcastAttributeToAttribute( config ) );\n\t}\n\n\t/**\n\t * View element to model marker conversion helper.\n\t *\n\t * This conversion results in creating a model marker. For example, if the marker was stored in a view as an element:\n\t * `<p>Fo<span data-marker=\"comment\" data-comment-id=\"7\"></span>o</p><p>B<span data-marker=\"comment\" data-comment-id=\"7\"></span>ar</p>`,\n\t * after the conversion is done, the marker will be available in\n\t * {@link module:engine/model/model~Model#markers model document markers}.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t *\t\t\tview: 'marker-search',\n\t *\t\t\tmodel: 'search'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t *\t\t\tview: 'marker-search',\n\t *\t\t\tmodel: 'search',\n\t *\t\t\tconverterPriority: 'high'\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t *\t\t\tview: 'marker-search',\n\t *\t\t\tmodel: viewElement => 'comment:' + viewElement.getAttribute( 'data-comment-id' )\n\t *\t\t} );\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tattributes: {\n\t *\t\t\t\t\t'data-marker': 'search'\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tmodel: 'search'\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n\t * to the conversion process.\n\t *\n\t * @method #elementToMarker\n\t * @param {Object} config Conversion configuration.\n\t * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n\t * @param {String|Function} config.model Name of the model marker, or a function that takes a view element and returns\n\t * a model marker name.\n\t * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n\t * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\telementToMarker( config ) {\n\t\treturn this.add( upcastElementToMarker( config ) );\n\t}\n}\n\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * or all children of {@link module:engine/view/element~Element} into\n * {@link module:engine/model/documentfragment~DocumentFragment model document fragment}.\n * This is the \"entry-point\" converter for upcast (view to model conversion). This converter starts the conversion of all children\n * of passed view document fragment. Those children {@link module:engine/view/node~Node view nodes} are then handled by other converters.\n *\n * This also a \"default\", last resort converter for all view elements that has not been converted by other converters.\n * When a view element is being converted to the model but it does not have converter specified, that view element\n * will be converted to {@link module:engine/model/documentfragment~DocumentFragment model document fragment} and returned.\n *\n * @returns {Function} Universal converter for view {@link module:engine/view/documentfragment~DocumentFragment fragments} and\n * {@link module:engine/view/element~Element elements} that returns\n * {@link module:engine/model/documentfragment~DocumentFragment model fragment} with children of converted view item.\n */\nexport function convertToModelFragment() {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Second argument in `consumable.consume` is discarded for ViewDocumentFragment but is needed for ViewElement.\n\t\tif ( !data.modelRange && conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\n\t\t\tconst { modelRange, modelCursor } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n\n\t\t\tdata.modelRange = modelRange;\n\t\t\tdata.modelCursor = modelCursor;\n\t\t}\n\t};\n}\n\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/text~Text} to {@link module:engine/model/text~Text}.\n *\n * @returns {Function} {@link module:engine/view/text~Text View text} converter.\n */\nexport function convertText() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( conversionApi.schema.checkChild( data.modelCursor, '$text' ) ) {\n\t\t\tif ( conversionApi.consumable.consume( data.viewItem ) ) {\n\t\t\t\tconst text = conversionApi.writer.createText( data.viewItem.data );\n\n\t\t\t\tconversionApi.writer.insert( text, data.modelCursor );\n\n\t\t\t\tdata.modelRange = ModelRange._createFromPositionAndShift( data.modelCursor, text.offsetSize );\n\t\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Function factory, creates a callback function which converts a {@link module:engine/view/selection~Selection\n * view selection} taken from the {@link module:engine/view/document~Document#event:selectionChange} event\n * and sets in on the {@link module:engine/model/document~Document#selection model}.\n *\n * **Note**: because there is no view selection change dispatcher nor any other advanced view selection to model\n * conversion mechanism, the callback should be set directly on view document.\n *\n *\t\tview.document.on( 'selectionChange', convertSelectionChange( modelDocument, mapper ) );\n *\n * @param {module:engine/model/model~Model} model Data model.\n * @param {module:engine/conversion/mapper~Mapper} mapper Conversion mapper.\n * @returns {Function} {@link module:engine/view/document~Document#event:selectionChange} callback function.\n */\nexport function convertSelectionChange( model, mapper ) {\n\treturn ( evt, data ) => {\n\t\tconst viewSelection = data.newSelection;\n\t\tconst modelSelection = new ModelSelection();\n\n\t\tconst ranges = [];\n\n\t\tfor ( const viewRange of viewSelection.getRanges() ) {\n\t\t\tranges.push( mapper.toModelRange( viewRange ) );\n\t\t}\n\n\t\tmodelSelection.setTo( ranges, { backward: viewSelection.isBackward } );\n\n\t\tif ( !modelSelection.isEqual( model.document.selection ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( modelSelection );\n\t\t\t} );\n\t\t}\n\t};\n}\n\n// View element to model element conversion helper.\n//\n// See {@link ~UpcastHelpers#elementToElement `.elementToElement()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {module:engine/view/matcher~MatcherPattern} [config.view] Pattern matching all view elements which should be converted. If not\n// set, the converter will fire for every view element.\n// @param {String|module:engine/model/element~Element|Function} config.model Name of the model element, a model element\n// instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction upcastElementToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst converter = prepareToElementConverter( config );\n\n\tconst elementName = getViewElementNameFromConfig( config.view );\n\tconst eventName = elementName ? 'element:' + elementName : 'element';\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, converter, { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// View element to model attribute conversion helper.\n//\n// See {@link ~UpcastHelpers#elementToAttribute `.elementToAttribute()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n// @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n// the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n// If `String` is given, the model attribute value will be set to `true`.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction upcastElementToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tnormalizeModelAttributeConfig( config );\n\n\tconst converter = prepareToAttributeConverter( config, false );\n\n\tconst elementName = getViewElementNameFromConfig( config.view );\n\tconst eventName = elementName ? 'element:' + elementName : 'element';\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, converter, { priority: config.converterPriority || 'low' } );\n\t};\n}\n\n// View attribute to model attribute conversion helper.\n//\n// See {@link ~UpcastHelpers#attributeToAttribute `.attributeToAttribute()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.view Specifies which view attribute will be converted. If a `String` is passed,\n// attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n// specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n// property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n// a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n// @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n// the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n// If `String` is given, the model attribute value will be same as view attribute value.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction upcastAttributeToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tlet viewKey = null;\n\n\tif ( typeof config.view == 'string' || config.view.key ) {\n\t\tviewKey = normalizeViewAttributeKeyValueConfig( config );\n\t}\n\n\tnormalizeModelAttributeConfig( config, viewKey );\n\n\tconst converter = prepareToAttributeConverter( config, true );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'element', converter, { priority: config.converterPriority || 'low' } );\n\t};\n}\n\n// View element to model marker conversion helper.\n//\n// See {@link ~UpcastHelpers#elementToMarker `.elementToMarker()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n// @param {String|Function} config.model Name of the model marker, or a function that takes a view element and returns\n// a model marker name.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\nfunction upcastElementToMarker( config ) {\n\tconfig = cloneDeep( config );\n\n\tnormalizeToMarkerConfig( config );\n\n\treturn upcastElementToElement( config );\n}\n\n// Helper function for from-view-element conversion. Checks if `config.view` directly specifies converted view element's name\n// and if so, returns it.\n//\n// @param {Object} config Conversion view config.\n// @returns {String|null} View element name or `null` if name is not directly set.\nfunction getViewElementNameFromConfig( viewConfig ) {\n\tif ( typeof viewConfig == 'string' ) {\n\t\treturn viewConfig;\n\t}\n\n\tif ( typeof viewConfig == 'object' && typeof viewConfig.name == 'string' ) {\n\t\treturn viewConfig.name;\n\t}\n\n\treturn null;\n}\n\n// Helper for to-model-element conversion. Takes a config object and returns a proper converter function.\n//\n// @param {Object} config Conversion configuration.\n// @returns {Function} View to model converter.\nfunction prepareToElementConverter( config ) {\n\tconst matcher = config.view ? new Matcher( config.view ) : null;\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tlet match = {};\n\n\t\t// If `config.view` has not been passed do not try matching. In this case, the converter should fire for all elements.\n\t\tif ( matcher ) {\n\t\t\t// This will be usually just one pattern but we support matchers with many patterns too.\n\t\t\tconst matcherResult = matcher.match( data.viewItem );\n\n\t\t\t// If there is no match, this callback should not do anything.\n\t\t\tif ( !matcherResult ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmatch = matcherResult.match;\n\t\t}\n\n\t\t// Force consuming element's name.\n\t\tmatch.name = true;\n\n\t\t// Create model element basing on config.\n\t\tconst modelElement = getModelElement( config.model, data.viewItem, conversionApi.writer );\n\n\t\t// Do not convert if element building function returned falsy value.\n\t\tif ( !modelElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When element was already consumed then skip it.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, match ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find allowed parent for element that we are going to insert.\n\t\t// If current parent does not allow to insert element but one of the ancestors does\n\t\t// then split nodes to allowed parent.\n\t\tconst splitResult = conversionApi.splitToAllowedParent( modelElement, data.modelCursor );\n\n\t\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\t\tif ( !splitResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Insert element on allowed position.\n\t\tconversionApi.writer.insert( modelElement, splitResult.position );\n\n\t\t// Convert children and insert to element.\n\t\tconversionApi.convertChildren( data.viewItem, conversionApi.writer.createPositionAt( modelElement, 0 ) );\n\n\t\t// Consume appropriate value from consumable values list.\n\t\tconversionApi.consumable.consume( data.viewItem, match );\n\n\t\tconst parts = conversionApi.getSplitParts( modelElement );\n\n\t\t// Set conversion result range.\n\t\tdata.modelRange = new ModelRange(\n\t\t\tconversionApi.writer.createPositionBefore( modelElement ),\n\t\t\tconversionApi.writer.createPositionAfter( parts[ parts.length - 1 ] )\n\t\t);\n\n\t\t// Now we need to check where the `modelCursor` should be.\n\t\tif ( splitResult.cursorParent ) {\n\t\t\t// If we split parent to insert our element then we want to continue conversion in the new part of the split parent.\n\t\t\t//\n\t\t\t// before: <allowed><notAllowed>foo[]</notAllowed></allowed>\n\t\t\t// after:  <allowed><notAllowed>foo</notAllowed><converted></converted><notAllowed>[]</notAllowed></allowed>\n\n\t\t\tdata.modelCursor = conversionApi.writer.createPositionAt( splitResult.cursorParent, 0 );\n\t\t} else {\n\t\t\t// Otherwise just continue after inserted element.\n\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t}\n\t};\n}\n\n// Helper function for upcasting-to-element converter. Takes the model configuration, the converted view element\n// and a writer instance and returns a model element instance to be inserted in the model.\n//\n// @param {String|Function|module:engine/model/element~Element} model Model conversion configuration.\n// @param {module:engine/view/node~Node} input The converted view node.\n// @param {module:engine/model/writer~Writer} writer A writer instance to use to create the model element.\nfunction getModelElement( model, input, writer ) {\n\tif ( model instanceof Function ) {\n\t\treturn model( input, writer );\n\t} else {\n\t\treturn writer.createElement( model );\n\t}\n}\n\n// Helper function view-attribute-to-model-attribute helper. Normalizes `config.view` which was set as `String` or\n// as an `Object` with `key`, `value` and `name` properties. Normalized `config.view` has is compatible with\n// {@link module:engine/view/matcher~MatcherPattern}.\n//\n// @param {Object} config Conversion config.\n// @returns {String} Key of the converted view attribute.\nfunction normalizeViewAttributeKeyValueConfig( config ) {\n\tif ( typeof config.view == 'string' ) {\n\t\tconfig.view = { key: config.view };\n\t}\n\n\tconst key = config.view.key;\n\tlet normalized;\n\n\tif ( key == 'class' || key == 'style' ) {\n\t\tconst keyName = key == 'class' ? 'classes' : 'styles';\n\n\t\tnormalized = {\n\t\t\t[ keyName ]: config.view.value\n\t\t};\n\t} else {\n\t\tconst value = typeof config.view.value == 'undefined' ? /[\\s\\S]*/ : config.view.value;\n\n\t\tnormalized = {\n\t\t\tattributes: {\n\t\t\t\t[ key ]: value\n\t\t\t}\n\t\t};\n\t}\n\n\tif ( config.view.name ) {\n\t\tnormalized.name = config.view.name;\n\t}\n\n\tconfig.view = normalized;\n\n\treturn key;\n}\n\n// Helper function that normalizes `config.model` in from-model-attribute conversion. `config.model` can be set\n// as a `String`, an `Object` with only `key` property or an `Object` with `key` and `value` properties. Normalized\n// `config.model` is an `Object` with `key` and `value` properties.\n//\n// @param {Object} config Conversion config.\n// @param {String} viewAttributeKeyToCopy Key of the converted view attribute. If it is set, model attribute value\n// will be equal to view attribute value.\nfunction normalizeModelAttributeConfig( config, viewAttributeKeyToCopy = null ) {\n\tconst defaultModelValue = viewAttributeKeyToCopy === null ? true : viewElement => viewElement.getAttribute( viewAttributeKeyToCopy );\n\n\tconst key = typeof config.model != 'object' ? config.model : config.model.key;\n\tconst value = typeof config.model != 'object' || typeof config.model.value == 'undefined' ? defaultModelValue : config.model.value;\n\n\tconfig.model = { key, value };\n}\n\n// Helper for to-model-attribute conversion. Takes the model attribute name and conversion configuration and returns\n// a proper converter function.\n//\n// @param {String} modelAttributeKey The key of the model attribute to set on a model node.\n// @param {Object|Array.<Object>} config Conversion configuration. It is possible to provide multiple configurations in an array.\n// @param {Boolean} shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n// on all elements in the range.\nfunction prepareToAttributeConverter( config, shallow ) {\n\tconst matcher = new Matcher( config.view );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst match = matcher.match( data.viewItem );\n\n\t\t// If there is no match, this callback should not do anything.\n\t\tif ( !match ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelKey = config.model.key;\n\t\tconst modelValue = typeof config.model.value == 'function' ? config.model.value( data.viewItem ) : config.model.value;\n\n\t\t// Do not convert if attribute building function returned falsy value.\n\t\tif ( modelValue === null ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( onlyViewNameIsDefined( config.view, data.viewItem ) ) {\n\t\t\tmatch.match.name = true;\n\t\t} else {\n\t\t\t// Do not test or consume `name` consumable.\n\t\t\tdelete match.match.name;\n\t\t}\n\n\t\t// Try to consume appropriate values from consumable values list.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, match.match ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Since we are converting to attribute we need an range on which we will set the attribute.\n\t\t// If the range is not created yet, we will create it.\n\t\tif ( !data.modelRange ) {\n\t\t\t// Convert children and set conversion result as a current data.\n\t\t\tdata = Object.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t\t}\n\n\t\t// Set attribute on current `output`. `Schema` is checked inside this helper function.\n\t\tconst attributeWasSet = setAttributeOn( data.modelRange, { key: modelKey, value: modelValue }, shallow, conversionApi );\n\n\t\tif ( attributeWasSet ) {\n\t\t\tconversionApi.consumable.consume( data.viewItem, match.match );\n\t\t}\n\t};\n}\n\n// Helper function that checks if element name should be consumed in attribute converters.\n//\n// @param {Object} config Conversion view config.\n// @returns {Boolean}\nfunction onlyViewNameIsDefined( viewConfig, viewItem ) {\n\t// https://github.com/ckeditor/ckeditor5-engine/issues/1786\n\tconst configToTest = typeof viewConfig == 'function' ? viewConfig( viewItem ) : viewConfig;\n\n\tif ( typeof configToTest == 'object' && !getViewElementNameFromConfig( configToTest ) ) {\n\t\treturn false;\n\t}\n\n\treturn !configToTest.classes && !configToTest.attributes && !configToTest.styles;\n}\n\n// Helper function for to-model-attribute converter. Sets model attribute on given range. Checks {@link module:engine/model/schema~Schema}\n// to ensure proper model structure.\n//\n// @param {module:engine/model/range~Range} modelRange Model range on which attribute should be set.\n// @param {Object} modelAttribute Model attribute to set.\n// @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion API.\n// @param {Boolean} shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n// on all elements in the range.\n// @returns {Boolean} `true` if attribute was set on at least one node from given `modelRange`.\nfunction setAttributeOn( modelRange, modelAttribute, shallow, conversionApi ) {\n\tlet result = false;\n\n\t// Set attribute on each item in range according to Schema.\n\tfor ( const node of Array.from( modelRange.getItems( { shallow } ) ) ) {\n\t\tif ( conversionApi.schema.checkAttribute( node, modelAttribute.key ) ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttribute.key, modelAttribute.value, node );\n\n\t\t\tresult = true;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n// Helper function for upcasting-to-marker conversion. Takes the config in a format requested by `upcastElementToMarker()`\n// function and converts it to a format that is supported by `_upcastElementToElement()` function.\n//\n// @param {Object} config Conversion configuration.\nfunction normalizeToMarkerConfig( config ) {\n\tconst oldModel = config.model;\n\n\tconfig.model = ( viewElement, modelWriter ) => {\n\t\tconst markerName = typeof oldModel == 'string' ? oldModel : oldModel( viewElement );\n\n\t\treturn modelWriter.createElement( '$marker', { 'data-name': markerName } );\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/controller/editingcontroller\n */\n\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { clearAttributes, convertCollapsedSelection, convertRangeSelection, insertText, remove } from '../conversion/downcasthelpers';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { convertSelectionChange } from '../conversion/upcasthelpers';\n\n/**\n * Controller for the editing pipeline. The editing pipeline controls {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditingController {\n\t/**\n\t * Creates an editing controller instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Editing model.\n\t */\n\tconstructor( model ) {\n\t\t/**\n\t\t * Editor model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Editing view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = new View();\n\n\t\t/**\n\t\t * Mapper which describes the model-view binding.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/mapper~Mapper}\n\t\t */\n\t\tthis.mapper = new Mapper();\n\n\t\t/**\n\t\t * Downcast dispatcher that converts changes from the model to {@link #view the editing view}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\n\t\t */\n\t\tthis.downcastDispatcher = new DowncastDispatcher( {\n\t\t\tmapper: this.mapper\n\t\t} );\n\n\t\tconst doc = this.model.document;\n\t\tconst selection = doc.selection;\n\t\tconst markers = this.model.markers;\n\n\t\t// When plugins listen on model changes (on selection change, post fixers, etc) and change the view as a result of\n\t\t// model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n\t\t// is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n\t\t//\n\t\t// See  https://github.com/ckeditor/ckeditor5-engine/issues/1528\n\t\tthis.listenTo( this.model, '_beforeChanges', () => {\n\t\t\tthis.view._disableRendering( true );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( this.model, '_afterChanges', () => {\n\t\t\tthis.view._disableRendering( false );\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n\t\t// Do it on 'low' priority, so changes are converted after other listeners did their job.\n\t\t// Also convert model selection.\n\t\tthis.listenTo( doc, 'change', () => {\n\t\t\tthis.view.change( writer => {\n\t\t\t\tthis.downcastDispatcher.convertChanges( doc.differ, markers, writer );\n\t\t\t\tthis.downcastDispatcher.convertSelection( selection, markers, writer );\n\t\t\t} );\n\t\t}, { priority: 'low' } );\n\n\t\t// Convert selection from the view to the model when it changes in the view.\n\t\tthis.listenTo( this.view.document, 'selectionChange', convertSelectionChange( this.model, this.mapper ) );\n\n\t\t// Attach default model converters.\n\t\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\n\t\tthis.downcastDispatcher.on( 'remove', remove(), { priority: 'low' } );\n\n\t\t// Attach default model selection converters.\n\t\tthis.downcastDispatcher.on( 'selection', clearAttributes(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertRangeSelection(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertCollapsedSelection(), { priority: 'low' } );\n\n\t\t// Binds {@link module:engine/view/document~Document#roots view roots collection} to\n\t\t// {@link module:engine/model/document~Document#roots model roots collection} so creating\n\t\t// model root automatically creates corresponding view root.\n\t\tthis.view.document.roots.bindTo( this.model.document.roots ).using( root => {\n\t\t\t// $graveyard is a special root that has no reflection in the view.\n\t\t\tif ( root.rootName == '$graveyard' ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewRoot = new RootEditableElement( root.name );\n\n\t\t\tviewRoot.rootName = root.rootName;\n\t\t\tviewRoot._document = this.view.document;\n\t\t\tthis.mapper.bindElements( root, viewRoot );\n\n\t\t\treturn viewRoot;\n\t\t} );\n\t}\n\n\t/**\n\t * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n\t * by `EditingController` that need to be destroyed.\n\t */\n\tdestroy() {\n\t\tthis.view.destroy();\n\t\tthis.stopListening();\n\t}\n}\n\nmix( EditingController, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/plugincollection\n */\n\n/* globals console */\n\nimport CKEditorError, { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class PluginCollection {\n\t/**\n\t * Creates an instance of the PluginCollection class.\n\t * Allows loading and initializing plugins and their dependencies.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Array.<Function>} [availablePlugins] Plugins (constructors) which the collection will be able to use\n\t * when {@link module:core/plugincollection~PluginCollection#init} is used with plugin names (strings, instead of constructors).\n\t * Usually, the editor will pass its built-in plugins to the collection so they can later be\n\t * used in `config.plugins` or `config.removePlugins` by names.\n\t */\n\tconstructor( editor, availablePlugins = [] ) {\n\t\t/**\n\t\t * @protected\n\t\t * @member {module:core/editor/editor~Editor} module:core/plugin~PluginCollection#_editor\n\t\t */\n\t\tthis._editor = editor;\n\n\t\t/**\n\t\t * Map of plugin constructors which can be retrieved by their names.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<String|Function,Function>} module:core/plugin~PluginCollection#_availablePlugins\n\t\t */\n\t\tthis._availablePlugins = new Map();\n\n\t\t/**\n\t\t * @protected\n\t\t * @member {Map} module:core/plugin~PluginCollection#_plugins\n\t\t */\n\t\tthis._plugins = new Map();\n\n\t\tfor ( const PluginConstructor of availablePlugins ) {\n\t\t\tthis._availablePlugins.set( PluginConstructor, PluginConstructor );\n\n\t\t\tif ( PluginConstructor.pluginName ) {\n\t\t\t\tthis._availablePlugins.set( PluginConstructor.pluginName, PluginConstructor );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ PluginConstructor, pluginInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tfor ( const entry of this._plugins ) {\n\t\t\tif ( typeof entry[ 0 ] == 'function' ) {\n\t\t\t\tyield entry;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the plugin instance by its constructor or name.\n\t *\n\t *\t\t// Check if 'Clipboard' plugin was loaded.\n\t *\t\tif ( editor.plugins.has( 'Clipboard' ) ) {\n\t *\t\t\t// Get clipboard plugin instance\n\t *\t\t\tconst clipboard = editor.plugins.get( 'Clipboard' );\n\t *\n\t *\t\t\tthis.listenTo( clipboard, 'inputTransformation', ( evt, data ) => {\n\t *\t\t\t\t// Do something on clipboard input.\n\t *\t\t\t} );\n\t *\t\t}\n\t *\n\t * **Note**: This method will throw error if plugin is not loaded. Use `{@link #has editor.plugins.has()}`\n\t * to check if plugin is available.\n\t *\n\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n\t * @returns {module:core/plugin~PluginInterface}\n\t */\n\tget( key ) {\n\t\tconst plugin = this._plugins.get( key );\n\n\t\tif ( !plugin ) {\n\t\t\t/**\n\t\t\t * The plugin is not loaded and could not be obtained.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor and must be loaded before they can be obtained from\n\t\t\t * the plugin collection.\n\t\t\t * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **Note**: You can use `{@link module:core/plugincollection~PluginCollection#has editor.plugins.has()}`\n\t\t\t * to check if plugin was loaded.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-loaded\n\t\t\t * @param {String} plugin The name of the plugin which is not loaded.\n\t\t\t */\n\t\t\tconst errorMsg = 'plugincollection-plugin-not-loaded: The requested plugin is not loaded.';\n\n\t\t\tlet pluginName = key;\n\n\t\t\tif ( typeof key == 'function' ) {\n\t\t\t\tpluginName = key.pluginName || key.name;\n\t\t\t}\n\n\t\t\tthrow new CKEditorError( errorMsg, this._editor, { plugin: pluginName } );\n\t\t}\n\n\t\treturn plugin;\n\t}\n\n\t/**\n\t * Checks if plugin is loaded.\n\t *\n\t *\t\t// Check if 'Clipboard' plugin was loaded.\n\t *\t\tif ( editor.plugins.has( 'Clipboard' ) ) {\n\t *\t\t\t// Now use clipboard plugin instance:\n\t *\t\t\tconst clipboard = editor.plugins.get( 'Clipboard' );\n\t *\n\t *\t\t\t// ...\n\t *\t\t}\n\t *\n\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n\t * @returns {Boolean}\n\t */\n\thas( key ) {\n\t\treturn this._plugins.has( key );\n\t}\n\n\t/**\n\t * Initializes a set of plugins and adds them to the collection.\n\t *\n\t * @param {Array.<Function|String>} plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\n\t * or {@link module:core/plugin~PluginInterface.pluginName plugin names}. The second option (names) works only if\n\t * `availablePlugins` were passed to the {@link #constructor}.\n\t * @param {Array.<String|Function>} [removePlugins] Names of plugins or plugin constructors\n\t * that should not be loaded (despite being specified in the `plugins` array).\n\t * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which gets resolved once all plugins are loaded\n\t * and available in the collection.\n\t */\n\tinit( plugins, removePlugins = [] ) {\n\t\tconst that = this;\n\t\tconst editor = this._editor;\n\t\tconst loading = new Set();\n\t\tconst loaded = [];\n\n\t\tconst pluginConstructors = mapToAvailableConstructors( plugins );\n\t\tconst removePluginConstructors = mapToAvailableConstructors( removePlugins );\n\t\tconst missingPlugins = getMissingPluginNames( plugins );\n\n\t\tif ( missingPlugins ) {\n\t\t\t/**\n\t\t\t * Some plugins are not available and could not be loaded.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\n\t\t\t * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**, it means\n\t\t\t * that you try to enable a plugin which was not included in that build. This may be due to a typo\n\t\t\t * in the plugin name or simply because that plugin is not a part of this build. In the latter scenario,\n\t\t\t * read more about {@glink builds/guides/development/custom-builds custom builds}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the editor creators directly** (not a build), then it means\n\t\t\t * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \"plugin loader\".\n\t\t\t * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\n\t\t\t * provide each plugin through reference (as a constructor function). Check out the examples in\n\t\t\t * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-found\n\t\t\t * @param {Array.<String>} plugins The name of the plugins which could not be loaded.\n\t\t\t */\n\t\t\tconst errorMsg = 'plugincollection-plugin-not-found: Some plugins are not available and could not be loaded.';\n\n\t\t\t// Log the error so it's more visible on the console. Hopefully, for better DX.\n\t\t\tconsole.error( attachLinkToDocumentation( errorMsg ), { plugins: missingPlugins } );\n\n\t\t\treturn Promise.reject( new CKEditorError( errorMsg, this._editor, { plugins: missingPlugins } ) );\n\t\t}\n\n\t\treturn Promise.all( pluginConstructors.map( loadPlugin ) )\n\t\t\t.then( () => initPlugins( loaded, 'init' ) )\n\t\t\t.then( () => initPlugins( loaded, 'afterInit' ) )\n\t\t\t.then( () => loaded );\n\n\t\tfunction loadPlugin( PluginConstructor ) {\n\t\t\tif ( removePluginConstructors.includes( PluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The plugin is already loaded or being loaded - do nothing.\n\t\t\tif ( that._plugins.has( PluginConstructor ) || loading.has( PluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn instantiatePlugin( PluginConstructor )\n\t\t\t\t.catch( err => {\n\t\t\t\t\t/**\n\t\t\t\t\t * It was not possible to load the plugin.\n\t\t\t\t\t *\n\t\t\t\t\t * This is a generic error logged to the console when a JavaSript error is thrown during the initialization\n\t\t\t\t\t * of one of the plugins.\n\t\t\t\t\t *\n\t\t\t\t\t * If you correctly handled the promise returned by the editor's `create()` method (like shown below)\n\t\t\t\t\t * you will find the original error logged to the console, too:\n\t\t\t\t\t *\n\t\t\t\t\t *\t\tClassicEditor.create( document.getElementById( 'editor' ) )\n\t\t\t\t\t *\t\t\t.then( editor => {\n\t\t\t\t\t *\t\t\t\t// ...\n\t\t\t\t\t * \t\t\t} )\n\t\t\t\t\t *\t\t\t.catch( error => {\n\t\t\t\t\t *\t\t\t\tconsole.error( error );\n\t\t\t\t\t *\t\t\t} );\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-load\n\t\t\t\t\t * @param {String} plugin The name of the plugin that could not be loaded.\n\t\t\t\t\t */\n\t\t\t\t\tconsole.error( attachLinkToDocumentation(\n\t\t\t\t\t\t'plugincollection-load: It was not possible to load the plugin.'\n\t\t\t\t\t), { plugin: PluginConstructor } );\n\n\t\t\t\t\tthrow err;\n\t\t\t\t} );\n\t\t}\n\n\t\tfunction initPlugins( loadedPlugins, method ) {\n\t\t\treturn loadedPlugins.reduce( ( promise, plugin ) => {\n\t\t\t\tif ( !plugin[ method ] ) {\n\t\t\t\t\treturn promise;\n\t\t\t\t}\n\n\t\t\t\treturn promise.then( plugin[ method ].bind( plugin ) );\n\t\t\t}, Promise.resolve() );\n\t\t}\n\n\t\tfunction instantiatePlugin( PluginConstructor ) {\n\t\t\treturn new Promise( resolve => {\n\t\t\t\tloading.add( PluginConstructor );\n\n\t\t\t\tif ( PluginConstructor.requires ) {\n\t\t\t\t\tPluginConstructor.requires.forEach( RequiredPluginConstructorOrName => {\n\t\t\t\t\t\tconst RequiredPluginConstructor = getPluginConstructor( RequiredPluginConstructorOrName );\n\n\t\t\t\t\t\tif ( removePlugins.includes( RequiredPluginConstructor ) ) {\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @error plugincollection-required\n\t\t\t\t\t\t\t * @param {Function} plugin The required plugin.\n\t\t\t\t\t\t\t * @param {Function} requiredBy The parent plugin.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t\t\t'plugincollection-required: Cannot load a plugin because one of its dependencies is listed in' +\n\t\t\t\t\t\t\t\t'the `removePlugins` option.',\n\t\t\t\t\t\t\t\teditor,\n\t\t\t\t\t\t\t\t{ plugin: RequiredPluginConstructor, requiredBy: PluginConstructor }\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tloadPlugin( RequiredPluginConstructor );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tconst plugin = new PluginConstructor( editor );\n\t\t\t\tthat._add( PluginConstructor, plugin );\n\t\t\t\tloaded.push( plugin );\n\n\t\t\t\tresolve();\n\t\t\t} );\n\t\t}\n\n\t\tfunction getPluginConstructor( PluginConstructorOrName ) {\n\t\t\tif ( typeof PluginConstructorOrName == 'function' ) {\n\t\t\t\treturn PluginConstructorOrName;\n\t\t\t}\n\n\t\t\treturn that._availablePlugins.get( PluginConstructorOrName );\n\t\t}\n\n\t\tfunction getMissingPluginNames( plugins ) {\n\t\t\tconst missingPlugins = [];\n\n\t\t\tfor ( const pluginNameOrConstructor of plugins ) {\n\t\t\t\tif ( !getPluginConstructor( pluginNameOrConstructor ) ) {\n\t\t\t\t\tmissingPlugins.push( pluginNameOrConstructor );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn missingPlugins.length ? missingPlugins : null;\n\t\t}\n\n\t\tfunction mapToAvailableConstructors( plugins ) {\n\t\t\treturn plugins\n\t\t\t\t.map( pluginNameOrConstructor => getPluginConstructor( pluginNameOrConstructor ) )\n\t\t\t\t.filter( PluginConstructor => !!PluginConstructor );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys all loaded plugins.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\tconst promises = Array.from( this )\n\t\t\t.map( ( [ , pluginInstance ] ) => pluginInstance )\n\t\t\t.filter( pluginInstance => typeof pluginInstance.destroy == 'function' )\n\t\t\t.map( pluginInstance => pluginInstance.destroy() );\n\n\t\treturn Promise.all( promises );\n\t}\n\n\t/**\n\t * Adds the plugin to the collection. Exposed mainly for testing purposes.\n\t *\n\t * @protected\n\t * @param {Function} PluginConstructor The plugin constructor.\n\t * @param {module:core/plugin~PluginInterface} plugin The instance of the plugin.\n\t */\n\t_add( PluginConstructor, plugin ) {\n\t\tthis._plugins.set( PluginConstructor, plugin );\n\n\t\tconst pluginName = PluginConstructor.pluginName;\n\n\t\tif ( !pluginName ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._plugins.has( pluginName ) ) {\n\t\t\t/**\n\t\t\t * Two plugins with the same {@link module:core/plugin~PluginInterface.pluginName} were loaded.\n\t\t\t * This will lead to runtime conflicts between these plugins.\n\t\t\t *\n\t\t\t * In practice, this warning usually means that new plugins were added to an existing CKEditor 5 build.\n\t\t\t * Plugins should always be added to a source version of the editor (`@ckeditor/ckeditor5-editor-*`),\n\t\t\t * not to an editor imported from one of the `@ckeditor/ckeditor5-build-*` packages.\n\t\t\t *\n\t\t\t * Check your import paths and the list of plugins passed to\n\t\t\t * {@link module:core/editor/editor~Editor.create `Editor.create()`}\n\t\t\t * or specified in {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n\t\t\t *\n\t\t\t * The second option is that your `node_modules/` directory contains duplicated versions of the same\n\t\t\t * CKEditor 5 packages. Normally, on clean installations, npm deduplicates packages in `node_modules/`, so\n\t\t\t * it may be enough to call `rm -rf node_modules && npm i`. However, if you installed conflicting versions\n\t\t\t * of packages, their dependencies may need to be installed in more than one version which may lead to this\n\t\t\t * warning.\n\t\t\t *\n\t\t\t * Technically speaking, this error occurs because after adding a plugin to an existing editor build\n\t\t\t * dependencies of this plugin are being duplicated.\n\t\t\t * They are already built into that editor build and now get added for the second time as dependencies\n\t\t\t * of the plugin you are installing.\n\t\t\t *\n\t\t\t * Read more about {@glink builds/guides/integration/installing-plugins installing plugins}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-name-conflict\n\t\t\t * @param {String} pluginName The duplicated plugin name.\n\t\t\t * @param {Function} plugin1 The first plugin constructor.\n\t\t\t * @param {Function} plugin2 The second plugin constructor.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'plugincollection-plugin-name-conflict: Two plugins with the same name were loaded.',\n\t\t\t\tnull,\n\t\t\t\t{ pluginName, plugin1: this._plugins.get( pluginName ).constructor, plugin2: PluginConstructor }\n\t\t\t);\n\t\t}\n\n\t\tthis._plugins.set( pluginName, plugin );\n\t}\n}\n\nmix( PluginCollection, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/commandcollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n */\nexport default class CommandCollection {\n\t/**\n\t * Creates collection instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Command map.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._commands = new Map();\n\t}\n\n\t/**\n\t * Registers a new command.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @param {module:core/command~Command} command\n\t */\n\tadd( commandName, command ) {\n\t\tthis._commands.set( commandName, command );\n\t}\n\n\t/**\n\t * Retrieves a command from the collection.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @returns {module:core/command~Command}\n\t */\n\tget( commandName ) {\n\t\treturn this._commands.get( commandName );\n\t}\n\n\t/**\n\t * Executes a command.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @param {*} [...commandParams] Command parameters.\n\t */\n\texecute( commandName, ...args ) {\n\t\tconst command = this.get( commandName );\n\n\t\tif ( !command ) {\n\t\t\t/**\n\t\t\t * Command does not exist.\n\t\t\t *\n\t\t\t * @error commandcollection-command-not-found\n\t\t\t * @param {String} commandName Name of the command.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'commandcollection-command-not-found: Command does not exist.', this, { commandName } );\n\t\t}\n\n\t\tcommand.execute( ...args );\n\t}\n\n\t/**\n\t * Returns iterator of command names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* names() {\n\t\tyield* this._commands.keys();\n\t}\n\n\t/**\n\t * Returns iterator of command instances.\n\t *\n\t * @returns {Iterable.<module:core/command~Command>}\n\t */\n\t* commands() {\n\t\tyield* this._commands.values();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ commandName, commandInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._commands[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Destroys all collection commands.\n\t */\n\tdestroy() {\n\t\tfor ( const command of this.commands() ) {\n\t\t\tcommand.destroy();\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window */\n\n/**\n * @module utils/translation-service\n */\n\n/* istanbul ignore else */\nif ( !window.CKEDITOR_TRANSLATIONS ) {\n\twindow.CKEDITOR_TRANSLATIONS = {};\n}\n\n/**\n * Adds translations to existing ones.\n * These translations will later be available for the {@link module:utils/translation-service~translate `translate()`} function.\n *\n *\t\tadd( 'pl', {\n *\t\t\t'OK': 'OK',\n *\t\t\t'Cancel [context: reject]': 'Anuluj'\n *\t\t} );\n *\n * If you cannot import this function from this module (e.g. because you use a CKEditor 5 build), then you can\n * still add translations by extending the global `window.CKEDITOR_TRANSLATIONS` object by using a function like\n * the one below:\n *\n *\t\tfunction addTranslations( language, translations ) {\n *\t\t\tif ( !window.CKEDITOR_TRANSLATIONS ) {\n *\t\t\t\twindow.CKEDITOR_TRANSLATIONS = {};\n *\t\t\t}\n *\n *\t\t\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ] || ( window.CKEDITOR_TRANSLATIONS[ language ] = {} );\n *\n *\t\t\t// Extend the dictionary for the given language.\n *\t\t\tObject.assign( dictionary, translations );\n *\t\t}\n *\n * @param {String} language Target language.\n * @param {Object.<String, String>} translations Translations which will be added to the dictionary.\n */\nexport function add( language, translations ) {\n\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ] || ( window.CKEDITOR_TRANSLATIONS[ language ] = {} );\n\n\tObject.assign( dictionary, translations );\n}\n\n/**\n * Translates string if the translation of the string was previously added to the dictionary.\n * See {@link module:utils/translation-service Translation Service}.\n * This happens in a multi-language mode were translation modules are created by the bundler.\n *\n * When no translation is defined in the dictionary or the dictionary doesn't exist this function returns\n * the original string without the `'[context: ]'` (happens in development and single-language modes).\n *\n * In a single-language mode (when values passed to `t()` were replaced with target language strings) the dictionary\n * is left empty, so this function will return the original strings always.\n *\n *\t\ttranslate( 'pl', 'Cancel [context: reject]' );\n *\n * @param {String} language Target language.\n * @param {String} translationKey String that will be translated.\n * @returns {String} Translated sentence.\n */\nexport function translate( language, translationKey ) {\n\tconst numberOfLanguages = getNumberOfLanguages();\n\n\tif ( numberOfLanguages === 1 ) {\n\t\t// Override the language to the only supported one.\n\t\t// This can't be done in the `Locale` class, because the translations comes after the `Locale` class initialization.\n\t\tlanguage = Object.keys( window.CKEDITOR_TRANSLATIONS )[ 0 ];\n\t}\n\n\tif ( numberOfLanguages === 0 || !hasTranslation( language, translationKey ) ) {\n\t\treturn translationKey.replace( / \\[context: [^\\]]+\\]$/, '' );\n\t}\n\n\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ];\n\n\t// In case of missing translations we still need to cut off the `[context: ]` parts.\n\treturn dictionary[ translationKey ].replace( / \\[context: [^\\]]+\\]$/, '' );\n}\n\n/**\n * Clears dictionaries for test purposes.\n *\n * @protected\n */\nexport function _clear() {\n\twindow.CKEDITOR_TRANSLATIONS = {};\n}\n\n// Checks whether the dictionary exists and translation in that dictionary exists.\nfunction hasTranslation( language, translationKey ) {\n\treturn (\n\t\t( language in window.CKEDITOR_TRANSLATIONS ) &&\n\t\t( translationKey in window.CKEDITOR_TRANSLATIONS[ language ] )\n\t);\n}\n\nfunction getNumberOfLanguages() {\n\treturn Object.keys( window.CKEDITOR_TRANSLATIONS ).length;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/locale\n */\n\n/* globals console */\n\nimport { translate } from './translation-service';\n\nconst RTL_LANGUAGE_CODES = [ 'ar', 'fa', 'he', 'ku', 'ug' ];\n\n/**\n * Represents the localization services.\n */\nexport default class Locale {\n\t/**\n\t * Creates a new instance of the Locale class. Learn more about\n\t * {@glink features/ui-language configuring language of the editor}.\n\t *\n\t * @param {Object} [options] Locale configuration.\n\t * @param {String} [options.uiLanguage='en'] The editor UI language code in the\n\t * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. See {@link #uiLanguage}.\n\t * @param {String} [options.contentLanguage] The editor content language code in the\n\t * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. If not specified, the same as `options.language`.\n\t * See {@link #contentLanguage}.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t\t *\n\t\t * If the {@link #contentLanguage content language} was not specified in the `Locale` constructor,\n\t\t * it also defines the language of the content.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.uiLanguage = options.uiLanguage || 'en';\n\n\t\t/**\n\t\t * The editor content language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t\t *\n\t\t * Usually the same as {@link #uiLanguage editor language}, it can be customized by passing an optional\n\t\t * argument to the `Locale` constructor.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.contentLanguage = options.contentLanguage || this.uiLanguage;\n\n\t\t/**\n\t\t * Text direction of the {@link #uiLanguage editor UI language}. Either `'ltr'` or `'rtl'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.uiLanguageDirection = getLanguageDirection( this.uiLanguage );\n\n\t\t/**\n\t\t * Text direction of the {@link #contentLanguage editor content language}.\n\t\t *\n\t\t * If the content language was passed directly to the `Locale` constructor, this property represents the\n\t\t * direction of that language.\n\t\t *\n\t\t * If the {@link #contentLanguage editor content language} was derived from the {@link #uiLanguage editor language},\n\t\t * the content language direction is the same as the {@link #uiLanguageDirection UI language direction}.\n\t\t *\n\t\t * The value is either `'ltr'` or `'rtl'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.contentLanguageDirection = getLanguageDirection( this.contentLanguage );\n\n\t\t/**\n\t\t * Translates the given string to the {@link #uiLanguage}. This method is also available in\n\t\t * {@link module:core/editor/editor~Editor#t} and {@link module:ui/view~View#t}.\n\t\t *\n\t\t * The strings may contain placeholders (`%<index>`) for values which are passed as the second argument.\n\t\t * `<index>` is the index in the `values` array.\n\t\t *\n\t\t *\t\teditor.t( 'Created file \"%0\" in %1ms.', [ fileName, timeTaken ] );\n\t\t *\n\t\t * This method's context is statically bound to Locale instance,\n\t\t * so it can be called as a function:\n\t\t *\n\t\t *\t\tconst t = this.t;\n\t\t *\t\tt( 'Label' );\n\t\t *\n\t\t * @method #t\n\t\t * @param {String} str The string to translate.\n\t\t * @param {String[]} [values] Values that should be used to interpolate the string.\n\t\t */\n\t\tthis.t = ( ...args ) => this._t( ...args );\n\t}\n\n\t/**\n\t * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t *\n\t * **Note**: This property has been deprecated. Please use {@link #uiLanguage} and {@link #contentLanguage}\n\t * properties instead.\n\t *\n\t * @deprecated\n\t * @member {String}\n\t */\n\tget language() {\n\t\t/**\n\t\t * The {@link module:utils/locale~Locale#language `Locale#language`} property has been deprecated and will\n\t\t * be removed in the near future. Please use {@link #uiLanguage} and {@link #contentLanguage} properties instead.\n\t\t *\n\t\t * @error locale-deprecated-language-property\n\t\t */\n\t\tconsole.warn(\n\t\t\t'locale-deprecated-language-property: ' +\n\t\t\t'The Locale#language property has been deprecated and will be removed in the near future. ' +\n\t\t\t'Please use #uiLanguage and #contentLanguage properties instead.' );\n\n\t\treturn this.uiLanguage;\n\t}\n\n\t/**\n\t * Base for the {@link #t} method.\n\t *\n\t * @private\n\t */\n\t_t( str, values ) {\n\t\tlet translatedString = translate( this.uiLanguage, str );\n\n\t\tif ( values ) {\n\t\t\ttranslatedString = translatedString.replace( /%(\\d+)/g, ( match, index ) => {\n\t\t\t\treturn ( index < values.length ) ? values[ index ] : match;\n\t\t\t} );\n\t\t}\n\n\t\treturn translatedString;\n\t}\n}\n\n// Helps determine whether a language is LTR or RTL.\n//\n// @param {String} language The ISO 639-1 language code.\n// @returns {String} 'ltr' or 'rtl\nfunction getLanguageDirection( languageCode ) {\n\treturn RTL_LANGUAGE_CODES.includes( languageCode ) ? 'rtl' : 'ltr';\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/viewconsumable\n */\n\nimport { isArray } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Class used for handling consumption of view {@link module:engine/view/element~Element elements},\n * {@link module:engine/view/text~Text text nodes} and {@link module:engine/view/documentfragment~DocumentFragment document fragments}.\n * Element's name and its parts (attributes, classes and styles) can be consumed separately. Consuming an element's name\n * does not consume its attributes, classes and styles.\n * To add items for consumption use {@link module:engine/conversion/viewconsumable~ViewConsumable#add add method}.\n * To test items use {@link module:engine/conversion/viewconsumable~ViewConsumable#test test method}.\n * To consume items use {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consume method}.\n * To revert already consumed items use {@link module:engine/conversion/viewconsumable~ViewConsumable#revert revert method}.\n *\n *\t\tviewConsumable.add( element, { name: true } ); // Adds element's name as ready to be consumed.\n *\t\tviewConsumable.add( textNode ); // Adds text node for consumption.\n *\t\tviewConsumable.add( docFragment ); // Adds document fragment for consumption.\n *\t\tviewConsumable.test( element, { name: true }  ); // Tests if element's name can be consumed.\n *\t\tviewConsumable.test( textNode ); // Tests if text node can be consumed.\n *\t\tviewConsumable.test( docFragment ); // Tests if document fragment can be consumed.\n *\t\tviewConsumable.consume( element, { name: true }  ); // Consume element's name.\n *\t\tviewConsumable.consume( textNode ); // Consume text node.\n *\t\tviewConsumable.consume( docFragment ); // Consume document fragment.\n *\t\tviewConsumable.revert( element, { name: true }  ); // Revert already consumed element's name.\n *\t\tviewConsumable.revert( textNode ); // Revert already consumed text node.\n *\t\tviewConsumable.revert( docFragment ); // Revert already consumed document fragment.\n */\nexport default class ViewConsumable {\n\t/**\n\t * Creates new ViewConsumable.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Map of consumable elements. If {@link module:engine/view/element~Element element} is used as a key,\n\t\t * {@link module:engine/conversion/viewconsumable~ViewElementConsumables ViewElementConsumables} instance is stored as value.\n\t\t * For {@link module:engine/view/text~Text text nodes} and\n\t\t * {@link module:engine/view/documentfragment~DocumentFragment document fragments} boolean value is stored as value.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<module:engine/conversion/viewconsumable~ViewElementConsumables|Boolean>}\n\t\t*/\n\t\tthis._consumables = new Map();\n\t}\n\n\t/**\n\t * Adds {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} as ready to be consumed.\n\t *\n\t *\t\tviewConsumable.add( p, { name: true } ); // Adds element's name to consume.\n\t *\t\tviewConsumable.add( p, { attributes: 'name' } ); // Adds element's attribute.\n\t *\t\tviewConsumable.add( p, { classes: 'foobar' } ); // Adds element's class.\n\t *\t\tviewConsumable.add( p, { styles: 'color' } ); // Adds element's style\n\t *\t\tviewConsumable.add( p, { attributes: 'name', styles: 'color' } ); // Adds attribute and style.\n\t *\t\tviewConsumable.add( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be provided.\n\t *\t\tviewConsumable.add( textNode ); // Adds text node to consume.\n\t *\t\tviewConsumable.add( docFragment ); // Adds document fragment to consume.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * attribute is provided - it should be handled separately by providing actual style/class.\n\t *\n\t *\t\tviewConsumable.add( p, { attributes: 'style' } ); // This call will throw an exception.\n\t *\t\tviewConsumable.add( p, { styles: 'color' } ); // This is properly handled style.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t */\n\tadd( element, consumables ) {\n\t\tlet elementConsumables;\n\n\t\t// For text nodes and document fragments just mark them as consumable.\n\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\tthis._consumables.set( element, true );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// For elements create new ViewElementConsumables or update already existing one.\n\t\tif ( !this._consumables.has( element ) ) {\n\t\t\telementConsumables = new ViewElementConsumables();\n\t\t\tthis._consumables.set( element, elementConsumables );\n\t\t} else {\n\t\t\telementConsumables = this._consumables.get( element );\n\t\t}\n\n\t\telementConsumables.add( consumables );\n\t}\n\n\t/**\n\t * Tests if {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} can be consumed.\n\t * It returns `true` when all items included in method's call can be consumed. Returns `false` when\n\t * first already consumed item is found and `null` when first non-consumable item is found.\n\t *\n\t *\t\tviewConsumable.test( p, { name: true } ); // Tests element's name.\n\t *\t\tviewConsumable.test( p, { attributes: 'name' } ); // Tests attribute.\n\t *\t\tviewConsumable.test( p, { classes: 'foobar' } ); // Tests class.\n\t *\t\tviewConsumable.test( p, { styles: 'color' } ); // Tests style.\n\t *\t\tviewConsumable.test( p, { attributes: 'name', styles: 'color' } ); // Tests attribute and style.\n\t *\t\tviewConsumable.test( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be tested.\n\t *\t\tviewConsumable.test( textNode ); // Tests text node.\n\t *\t\tviewConsumable.test( docFragment ); // Tests document fragment.\n\t *\n\t * Testing classes and styles as attribute will test if all added classes/styles can be consumed.\n\t *\n\t *\t\tviewConsumable.test( p, { attributes: 'class' } ); // Tests if all added classes can be consumed.\n\t *\t\tviewConsumable.test( p, { attributes: 'style' } ); // Tests if all added styles can be consumed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t * @returns {Boolean|null} Returns `true` when all items included in method's call can be consumed. Returns `false`\n\t * when first already consumed item is found and `null` when first non-consumable item is found.\n\t */\n\ttest( element, consumables ) {\n\t\tconst elementConsumables = this._consumables.get( element );\n\n\t\tif ( elementConsumables === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// For text nodes and document fragments return stored boolean value.\n\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\treturn elementConsumables;\n\t\t}\n\n\t\t// For elements test consumables object.\n\t\treturn elementConsumables.test( consumables );\n\t}\n\n\t/**\n\t * Consumes {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t * It returns `true` when all items included in method's call can be consumed, otherwise returns `false`.\n\t *\n\t *\t\tviewConsumable.consume( p, { name: true } ); // Consumes element's name.\n\t *\t\tviewConsumable.consume( p, { attributes: 'name' } ); // Consumes element's attribute.\n\t *\t\tviewConsumable.consume( p, { classes: 'foobar' } ); // Consumes element's class.\n\t *\t\tviewConsumable.consume( p, { styles: 'color' } ); // Consumes element's style.\n\t *\t\tviewConsumable.consume( p, { attributes: 'name', styles: 'color' } ); // Consumes attribute and style.\n\t *\t\tviewConsumable.consume( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be consumed.\n\t *\t\tviewConsumable.consume( textNode ); // Consumes text node.\n\t *\t\tviewConsumable.consume( docFragment ); // Consumes document fragment.\n\t *\n\t * Consuming classes and styles as attribute will test if all added classes/styles can be consumed.\n\t *\n\t *\t\tviewConsumable.consume( p, { attributes: 'class' } ); // Consume only if all added classes can be consumed.\n\t *\t\tviewConsumable.consume( p, { attributes: 'style' } ); // Consume only if all added styles can be consumed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t * @returns {Boolean} Returns `true` when all items included in method's call can be consumed,\n\t * otherwise returns `false`.\n\t */\n\tconsume( element, consumables ) {\n\t\tif ( this.test( element, consumables ) ) {\n\t\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\t\t// For text nodes and document fragments set value to false.\n\t\t\t\tthis._consumables.set( element, false );\n\t\t\t} else {\n\t\t\t\t// For elements - consume consumables object.\n\t\t\t\tthis._consumables.get( element ).consume( consumables );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Reverts {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} so they can be consumed once again.\n\t * Method does not revert items that were never previously added for consumption, even if they are included in\n\t * method's call.\n\t *\n\t *\t\tviewConsumable.revert( p, { name: true } ); // Reverts element's name.\n\t *\t\tviewConsumable.revert( p, { attributes: 'name' } ); // Reverts element's attribute.\n\t *\t\tviewConsumable.revert( p, { classes: 'foobar' } ); // Reverts element's class.\n\t *\t\tviewConsumable.revert( p, { styles: 'color' } ); // Reverts element's style.\n\t *\t\tviewConsumable.revert( p, { attributes: 'name', styles: 'color' } ); // Reverts attribute and style.\n\t *\t\tviewConsumable.revert( p, { classes: [ 'baz', 'bar' ] } ); // Multiple names can be reverted.\n\t *\t\tviewConsumable.revert( textNode ); // Reverts text node.\n\t *\t\tviewConsumable.revert( docFragment ); // Reverts document fragment.\n\t *\n\t * Reverting classes and styles as attribute will revert all classes/styles that were previously added for\n\t * consumption.\n\t *\n\t *\t\tviewConsumable.revert( p, { attributes: 'class' } ); // Reverts all classes added for consumption.\n\t *\t\tviewConsumable.revert( p, { attributes: 'style' } ); // Reverts all styles added for consumption.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t */\n\trevert( element, consumables ) {\n\t\tconst elementConsumables = this._consumables.get( element );\n\n\t\tif ( elementConsumables !== undefined ) {\n\t\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\t\t// For text nodes and document fragments - set consumable to true.\n\t\t\t\tthis._consumables.set( element, true );\n\t\t\t} else {\n\t\t\t\t// For elements - revert items from consumables object.\n\t\t\t\telementConsumables.revert( consumables );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates consumable object from {@link module:engine/view/element~Element view element}. Consumable object will include\n\t * element's name and all its attributes, classes and styles.\n\t *\n\t * @static\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Object} consumables\n\t */\n\tstatic consumablesFromElement( element ) {\n\t\tconst consumables = {\n\t\t\tname: true,\n\t\t\tattributes: [],\n\t\t\tclasses: [],\n\t\t\tstyles: []\n\t\t};\n\n\t\tconst attributes = element.getAttributeKeys();\n\n\t\tfor ( const attribute of attributes ) {\n\t\t\t// Skip classes and styles - will be added separately.\n\t\t\tif ( attribute == 'style' || attribute == 'class' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconsumables.attributes.push( attribute );\n\t\t}\n\n\t\tconst classes = element.getClassNames();\n\n\t\tfor ( const className of classes ) {\n\t\t\tconsumables.classes.push( className );\n\t\t}\n\n\t\tconst styles = element.getStyleNames();\n\n\t\tfor ( const style of styles ) {\n\t\t\tconsumables.styles.push( style );\n\t\t}\n\n\t\treturn consumables;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/viewconsumable~ViewConsumable ViewConsumable} instance from\n\t * {@link module:engine/view/node~Node node} or {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t * Instance will contain all elements, child nodes, attributes, styles and classes added for consumption.\n\t *\n\t * @static\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} from View node or document fragment\n\t * from which `ViewConsumable` will be created.\n\t * @param {module:engine/conversion/viewconsumable~ViewConsumable} [instance] If provided, given `ViewConsumable` instance will be used\n\t * to add all consumables. It will be returned instead of a new instance.\n\t */\n\tstatic createFrom( from, instance ) {\n\t\tif ( !instance ) {\n\t\t\tinstance = new ViewConsumable();\n\t\t}\n\n\t\tif ( from.is( 'text' ) ) {\n\t\t\tinstance.add( from );\n\n\t\t\treturn instance;\n\t\t}\n\n\t\t// Add `from` itself, if it is an element.\n\t\tif ( from.is( 'element' ) ) {\n\t\t\tinstance.add( from, ViewConsumable.consumablesFromElement( from ) );\n\t\t}\n\n\t\tif ( from.is( 'documentFragment' ) ) {\n\t\t\tinstance.add( from );\n\t\t}\n\n\t\tfor ( const child of from.getChildren() ) {\n\t\t\tinstance = ViewConsumable.createFrom( child, instance );\n\t\t}\n\n\t\treturn instance;\n\t}\n}\n\n/**\n * This is a private helper-class for {@link module:engine/conversion/viewconsumable~ViewConsumable}.\n * It represents and manipulates consumable parts of a single {@link module:engine/view/element~Element}.\n *\n * @private\n */\nclass ViewElementConsumables {\n\t/**\n\t * Creates ViewElementConsumables instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if name of the element can be consumed.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._canConsumeName = null;\n\n\t\t/**\n\t\t * Contains maps of element's consumables: attributes, classes and styles.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._consumables = {\n\t\t\tattributes: new Map(),\n\t\t\tstyles: new Map(),\n\t\t\tclasses: new Map()\n\t\t};\n\t}\n\n\t/**\n\t * Adds consumable parts of the {@link module:engine/view/element~Element view element}.\n\t * Element's name itself can be marked to be consumed (when element's name is consumed its attributes, classes and\n\t * styles still could be consumed):\n\t *\n\t *\t\tconsumables.add( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.add( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.add( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * attribute is provided - it should be handled separately by providing `style` and `class` in consumables object.\n\t *\n\t * @param {Object} consumables Object describing which parts of the element can be consumed.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be added as consumable.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to add as consumable.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to add as consumable.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to add as consumable.\n\t */\n\tadd( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = true;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._add( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Tests if parts of the {@link module:engine/view/node~Node view node} can be consumed.\n\t *\n\t * Element's name can be tested:\n\t *\n\t *\t\tconsumables.test( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.test( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.test( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be tested.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be tested.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to test.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to test.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to test.\n\t * @returns {Boolean|null} `true` when all tested items can be consumed, `null` when even one of the items\n\t * was never marked for consumption and `false` when even one of the items was already consumed.\n\t */\n\ttest( consumables ) {\n\t\t// Check if name can be consumed.\n\t\tif ( consumables.name && !this._canConsumeName ) {\n\t\t\treturn this._canConsumeName;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tconst value = this._test( type, consumables[ type ] );\n\n\t\t\t\tif ( value !== true ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return true only if all can be consumed.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Consumes parts of {@link module:engine/view/element~Element view element}. This function does not check if consumable item\n\t * is already consumed - it consumes all consumable items provided.\n\t * Element's name can be consumed:\n\t *\n\t *\t\tconsumables.consume( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.consume( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.consume( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be consumed.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be consumed.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to consume.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to consume.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to consume.\n\t */\n\tconsume( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = false;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._consume( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Revert already consumed parts of {@link module:engine/view/element~Element view Element}, so they can be consumed once again.\n\t * Element's name can be reverted:\n\t *\n\t *\t\tconsumables.revert( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.revert( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.revert( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be reverted.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be reverted.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to revert.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to revert.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to revert.\n\t */\n\trevert( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = true;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._revert( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that adds consumables of a given type: attribute, class or style.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * type is provided - it should be handled separately by providing actual style/class type.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_add( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\t/**\n\t\t\t\t * Class and style attributes should be handled separately in\n\t\t\t\t * {@link module:engine/conversion/viewconsumable~ViewConsumable#add `ViewConsumable#add()`}.\n\t\t\t\t *\n\t\t\t\t * What you have done is trying to use:\n\t\t\t\t *\n\t\t\t\t *\t\tconsumables.add( { attributes: [ 'class', 'style' ] } );\n\t\t\t\t *\n\t\t\t\t * While each class and style should be registered separately:\n\t\t\t\t *\n\t\t\t\t *\t\tconsumables.add( { classes: 'some-class', styles: 'font-weight' } );\n\t\t\t\t *\n\t\t\t\t * @error viewconsumable-invalid-attribute\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'viewconsumable-invalid-attribute: Classes and styles should be handled separately.', this );\n\t\t\t}\n\n\t\t\tconsumables.set( name, true );\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that tests consumables of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t * @returns {Boolean|null} Returns `true` if all items can be consumed, `null` when one of the items cannot be\n\t * consumed and `false` when one of the items is already consumed.\n\t */\n\t_test( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// Check all classes/styles if class/style attribute is tested.\n\t\t\t\tconst value = this._test( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\n\t\t\t\tif ( value !== true ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst value = consumables.get( name );\n\t\t\t\t// Return null if attribute is not found.\n\t\t\t\tif ( value === undefined ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif ( !value ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper method that consumes items of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_consume( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// If class or style is provided for consumption - consume them all.\n\t\t\t\tthis._consume( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\t\t\t} else {\n\t\t\t\tconsumables.set( name, false );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that reverts items of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or , `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_revert( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// If class or style is provided for reverting - revert them all.\n\t\t\t\tthis._revert( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\t\t\t} else {\n\t\t\t\tconst value = consumables.get( name );\n\n\t\t\t\tif ( value === false ) {\n\t\t\t\t\tconsumables.set( name, true );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/schema\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport Range from './range';\nimport Position from './position';\nimport Element from './element';\nimport Text from './text';\nimport TreeWalker from './treewalker';\n\n/**\n * The model's schema. It defines allowed and disallowed structures of nodes as well as nodes' attributes.\n * The schema is usually defined by features and based on them the editing framework and features\n * make decisions how to change and process the model.\n *\n * The instance of schema is available in {@link module:engine/model/model~Model#schema `editor.model.schema`}.\n *\n * Read more about the schema in:\n *\n * * {@glink framework/guides/architecture/editing-engine#schema \"Schema\"} section of the\n * {@glink framework/guides/architecture/editing-engine Introduction to the \"Editing engine architecture\"}.\n * * {@glink framework/guides/deep-dive/schema \"Schema\" deep dive} guide.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Schema {\n\t/**\n\t * Creates schema instance.\n\t */\n\tconstructor() {\n\t\tthis._sourceDefinitions = {};\n\n\t\t/**\n\t\t * A dictionary containing attribute properties.\n\t\t *\n\t\t * @private\n\t\t * @member {Object.<String,String>}\n\t\t */\n\t\tthis._attributeProperties = {};\n\n\t\tthis.decorate( 'checkChild' );\n\t\tthis.decorate( 'checkAttribute' );\n\n\t\tthis.on( 'checkAttribute', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.on( 'checkChild', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t\targs[ 1 ] = this.getDefinition( args[ 1 ] );\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Registers schema item. Can only be called once for every item name.\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tinheritAllFrom: '$block'\n\t *\t\t} );\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\tregister( itemName, definition ) {\n\t\tif ( this._sourceDefinitions[ itemName ] ) {\n\t\t\t/**\n\t\t\t * A single item cannot be registered twice in the schema.\n\t\t\t *\n\t\t\t * This situation may happen when:\n\t\t\t *\n\t\t\t * * Two or more plugins called {@link #register `register()`} with the same name. This will usually mean that\n\t\t\t * there is a collision between plugins which try to use the same element in the model. Unfortunately,\n\t\t\t * the only way to solve this is by modifying one of these plugins to use a unique model element name.\n\t\t\t * * A single plugin was loaded twice. This happens when it is installed by npm/yarn in two versions\n\t\t\t * and usually means one or more of the following issues:\n\t\t\t *     * a version mismatch (two of your dependencies require two different versions of this plugin),\n\t\t\t *     * incorrect imports (this plugin is somehow imported twice in a way which confuses webpack),\n\t\t\t *     * mess in `node_modules/` (`rm -rf node_modules/` may help).\n\t\t\t *\n\t\t\t * **Note:** Check the logged `itemName` to better understand which plugin was duplicated/conflicting.\n\t\t\t *\n\t\t\t * @param itemName The name of the model element that is being registered twice.\n\t\t\t * @error schema-cannot-register-item-twice\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'schema-cannot-register-item-twice: A single item cannot be registered twice in the schema.',\n\t\t\t\tthis,\n\t\t\t\t{\n\t\t\t\t\titemName\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ] = [\n\t\t\tObject.assign( {}, definition )\n\t\t];\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Extends a {@link #register registered} item's definition.\n\t *\n\t * Extending properties such as `allowIn` will add more items to the existing properties,\n\t * while redefining properties such as `isBlock` will override the previously defined ones.\n\t *\n\t *\t\tschema.register( 'foo', {\n\t *\t\t\tallowIn: '$root',\n\t *\t\t\tisBlock: true;\n\t *\t\t} );\n\t *\t\tschema.extend( 'foo', {\n\t *\t\t\tallowIn: 'blockQuote',\n\t *\t\t\tisBlock: false\n\t *\t\t} );\n\t *\n\t *\t\tschema.getDefinition( 'foo' );\n\t *\t\t//\t{\n\t *\t\t//\t\tallowIn: [ '$root', 'blockQuote' ],\n\t *\t\t// \t\tisBlock: false\n\t *\t\t//\t}\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\textend( itemName, definition ) {\n\t\tif ( !this._sourceDefinitions[ itemName ] ) {\n\t\t\t/**\n\t\t\t * Cannot extend an item which was not registered yet.\n\t\t\t *\n\t\t\t * This error happens when a plugin tries to extend the schema definition of an item which was not\n\t\t\t * {@link #register registered} yet.\n\t\t\t *\n\t\t\t * @param itemName The name of the model element which is being extended.\n\t\t\t * @error schema-cannot-extend-missing-item\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'schema-cannot-extend-missing-item: Cannot extend an item which was not registered yet.', this, {\n\t\t\t\titemName\n\t\t\t} );\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ].push( Object.assign( {}, definition ) );\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Returns all registered items.\n\t *\n\t * @returns {Object.<String,module:engine/model/schema~SchemaCompiledItemDefinition>}\n\t */\n\tgetDefinitions() {\n\t\tif ( !this._compiledDefinitions ) {\n\t\t\tthis._compile();\n\t\t}\n\n\t\treturn this._compiledDefinitions;\n\t}\n\n\t/**\n\t * Returns a definition of the given item or `undefined` if item is not registered.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t * @returns {module:engine/model/schema~SchemaCompiledItemDefinition}\n\t */\n\tgetDefinition( item ) {\n\t\tlet itemName;\n\n\t\tif ( typeof item == 'string' ) {\n\t\t\titemName = item;\n\t\t} else if ( item.is && ( item.is( 'text' ) || item.is( 'textProxy' ) ) ) {\n\t\t\titemName = '$text';\n\t\t}\n\t\t// Element or module:engine/model/schema~SchemaContextItem.\n\t\telse {\n\t\t\titemName = item.name;\n\t\t}\n\n\t\treturn this.getDefinitions()[ itemName ];\n\t}\n\n\t/**\n\t * Returns `true` if the given item is registered in the schema.\n\t *\n\t *\t\tschema.isRegistered( 'paragraph' ); // -> true\n\t *\t\tschema.isRegistered( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isRegistered( 'foo' ); // -> false\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisRegistered( item ) {\n\t\treturn !!this.getDefinition( item );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a block by {@link module:engine/model/schema~SchemaItemDefinition}'s `isBlock` property.\n\t *\n\t *\t\tschema.isBlock( 'paragraph' ); // -> true\n\t *\t\tschema.isBlock( '$root' ); // -> false\n\t *\n\t *\t\tconst paragraphElement = writer.createElement( 'paragraph' );\n\t *\t\tschema.isBlock( paragraphElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisBlock( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isBlock );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a limit element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isLimit` or `isObject` property\n\t * (all objects are also limits).\n\t *\n\t *\t\tschema.isLimit( 'paragraph' ); // -> false\n\t *\t\tschema.isLimit( '$root' ); // -> true\n\t *\t\tschema.isLimit( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isLimit( 'image' ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisLimit( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!( def.isLimit || def.isObject );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * an object element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isObject` property.\n\t *\n\t *\t\tschema.isObject( 'paragraph' ); // -> false\n\t *\t\tschema.isObject( 'image' ); // -> true\n\t *\n\t *\t\tconst imageElement = writer.createElement( 'image' );\n\t *\t\tschema.isObject( imageElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisObject( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isObject );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * an inline element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isInline` property.\n\t *\n\t *\t\tschema.isInline( 'paragraph' ); // -> false\n\t *\t\tschema.isInline( 'softBreak' ); // -> true\n\t *\n\t *\t\tconst text = writer.createText('foo' );\n\t *\t\tschema.isInline( text ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisInline( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isInline );\n\t}\n\n\t/**\n\t * Checks whether the given node (`child`) can be a child of the given context.\n\t *\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> false\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tallowIn: '$root'\n\t *\t\t} );\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> true\n\t *\n\t * Note: When verifying whether the given node can be a child of the given context, the\n\t * schema also verifies the entire context &mdash; from its root to its last element. Therefore, it is possible\n\t * for `checkChild()` to return `false` even though the context's last element can contain the checked child.\n\t * It happens if one of the context's elements does not allow its child.\n\t *\n\t * @fires checkChild\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the child will be checked.\n\t * @param {module:engine/model/node~Node|String} def The child to check.\n\t */\n\tcheckChild( context, def ) {\n\t\t// Note: context and child are already normalized here to a SchemaContext and SchemaCompiledItemDefinition.\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._checkContextMatch( def, context );\n\t}\n\n\t/**\n\t * Checks whether the given attribute can be applied in the given context (on the last\n\t * item of the context).\n\t *\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> false\n\t *\n\t *\t\tschema.extend( '$text', {\n\t *\t\t\tallowAttributes: 'bold'\n\t *\t\t} );\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> true\n\t *\n\t * @fires checkAttribute\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the attribute will be checked.\n\t * @param {String} attributeName\n\t */\n\tcheckAttribute( context, attributeName ) {\n\t\tconst def = this.getDefinition( context.last );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn def.allowAttributes.includes( attributeName );\n\t}\n\n\t/**\n\t * Checks whether the given element (`elementToMerge`) can be merged with the specified base element (`positionOrBaseElement`).\n\t *\n\t * In other words &mdash; whether `elementToMerge`'s children {@link #checkChild are allowed} in the `positionOrBaseElement`.\n\t *\n\t * This check ensures that elements merged with {@link module:engine/model/writer~Writer#merge `Writer#merge()`}\n\t * will be valid.\n\t *\n\t * Instead of elements, you can pass the instance of the {@link module:engine/model/position~Position} class as the\n\t * `positionOrBaseElement`. It means that the elements before and after the position will be checked whether they can be merged.\n\t *\n\t * @param {module:engine/model/position~Position|module:engine/model/element~Element} positionOrBaseElement The position or base\n\t * element to which the `elementToMerge` will be merged.\n\t * @param {module:engine/model/element~Element} elementToMerge The element to merge. Required if `positionOrBaseElement` is an element.\n\t * @returns {Boolean}\n\t */\n\tcheckMerge( positionOrBaseElement, elementToMerge = null ) {\n\t\tif ( positionOrBaseElement instanceof Position ) {\n\t\t\tconst nodeBefore = positionOrBaseElement.nodeBefore;\n\t\t\tconst nodeAfter = positionOrBaseElement.nodeAfter;\n\n\t\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node before the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-before\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'schema-check-merge-no-element-before: The node before the merge position must be an element.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node after the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-after\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'schema-check-merge-no-element-after: The node after the merge position must be an element.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this.checkMerge( nodeBefore, nodeAfter );\n\t\t}\n\n\t\tfor ( const child of elementToMerge.getChildren() ) {\n\t\t\tif ( !this.checkChild( positionOrBaseElement, child ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkChild} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow elements in specific contexts.\n\t *\n\t * This method is a shorthand for using the {@link #event:checkChild} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow heading1 directly inside a blockQuote.\n\t *\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkChild', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst childDefinition = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkChild()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and\n\t * {@link module:engine/model/schema~SchemaCompiledItemDefinition} (child-to-check definition).\n\t * The callback may return `true/false` to override `checkChild()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkChild()`'s return value.\n\t */\n\taddChildCheck( callback ) {\n\t\tthis.on( 'checkChild', ( evt, [ ctx, childDef ] ) => {\n\t\t\t// checkChild() was called with a non-registered child.\n\t\t\t// In 99% cases such check should return false, so not to overcomplicate all callbacks\n\t\t\t// don't even execute them.\n\t\t\tif ( !childDef ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst retValue = callback( ctx, childDef );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkAttribute} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow attribute if node to which it is applied\n\t * is contained within some other element (e.g. you want to disallow `bold` on `$text` within `heading1`).\n\t *\n\t * This method is a shorthand for using the {@link #event:checkAttribute} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow bold on $text inside heading1.\n\t *\t\tschema.addAttributeCheck( ( context, attributeName ) => {\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst attributeName = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkAttribute()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and attribute name.\n\t * The callback may return `true/false` to override `checkAttribute()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkAttribute()`'s return value.\n\t */\n\taddAttributeCheck( callback ) {\n\t\tthis.on( 'checkAttribute', ( evt, [ ctx, attributeName ] ) => {\n\t\t\tconst retValue = callback( ctx, attributeName );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * This method allows assigning additional metadata to the model attributes. For example,\n\t * {@link module:engine/model/schema~AttributeProperties `AttributeProperties#isFormatting` property} is\n\t * used to mark formatting attributes (like `bold` or `italic`).\n\t *\n\t *\t\t// Mark bold as a formatting attribute.\n\t *\t\tschema.setAttributeProperties( 'bold', {\n\t *\t\t\tisFormatting: true\n\t *\t\t} );\n\t *\n\t *\t\t// Override code not to be considered a formatting markup.\n\t *\t\tschema.setAttributeProperties( 'code', {\n\t *\t\t\tisFormatting: false\n\t *\t\t} );\n\t *\n\t * Properties are not limited to members defined in the\n\t * {@link module:engine/model/schema~AttributeProperties `AttributeProperties` type} and you can also use custom properties:\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\tcustomProperty: 'value'\n\t *\t\t} );\n\t *\n\t * Subsequent calls with the same attribute will extend its custom properties:\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\tone: 1\n\t *\t\t} );\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\ttwo: 2\n\t *\t\t} );\n\t *\n\t *\t\tconsole.log( schema.getAttributeProperties( 'blockQuote' ) );\n\t *\t\t// Logs: { one: 1, two: 2 }\n\t *\n\t * @param {String} attributeName A name of the attribute to receive the properties.\n\t * @param {module:engine/model/schema~AttributeProperties} properties A dictionary of properties.\n\t */\n\tsetAttributeProperties( attributeName, properties ) {\n\t\tthis._attributeProperties[ attributeName ] = Object.assign( this.getAttributeProperties( attributeName ), properties );\n\t}\n\n\t/**\n\t * Returns properties associated with a given model attribute. See {@link #setAttributeProperties `setAttributeProperties()`}.\n\t *\n\t * @param {String} attributeName A name of the attribute.\n\t * @returns {module:engine/model/schema~AttributeProperties}\n\t */\n\tgetAttributeProperties( attributeName ) {\n\t\treturn this._attributeProperties[ attributeName ] || {};\n\t}\n\n\t/**\n\t * Returns the lowest {@link module:engine/model/schema~Schema#isLimit limit element} containing the entire\n\t * selection/range/position or the root otherwise.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/range~Range|module:engine/model/position~Position} selectionOrRangeOrPosition\n\t * The selection/range/position to check.\n\t * @returns {module:engine/model/element~Element} The lowest limit element containing\n\t * the entire `selectionOrRangeOrPosition`.\n\t */\n\tgetLimitElement( selectionOrRangeOrPosition ) {\n\t\tlet element;\n\n\t\tif ( selectionOrRangeOrPosition instanceof Position ) {\n\t\t\telement = selectionOrRangeOrPosition.parent;\n\t\t} else {\n\t\t\tconst ranges = selectionOrRangeOrPosition instanceof Range ?\n\t\t\t\t[ selectionOrRangeOrPosition ] :\n\t\t\t\tArray.from( selectionOrRangeOrPosition.getRanges() );\n\n\t\t\t// Find the common ancestor for all selection's ranges.\n\t\t\telement = ranges\n\t\t\t\t.reduce( ( element, range ) => {\n\t\t\t\t\tconst rangeCommonAncestor = range.getCommonAncestor();\n\n\t\t\t\t\tif ( !element ) {\n\t\t\t\t\t\treturn rangeCommonAncestor;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn element.getCommonAncestor( rangeCommonAncestor, { includeSelf: true } );\n\t\t\t\t}, null );\n\t\t}\n\n\t\twhile ( !this.isLimit( element ) ) {\n\t\t\tif ( element.parent ) {\n\t\t\t\telement = element.parent;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn element;\n\t}\n\n\t/**\n\t * Checks whether the attribute is allowed in selection:\n\t *\n\t * * if the selection is not collapsed, then checks if the attribute is allowed on any of nodes in that range,\n\t * * if the selection is collapsed, then checks if on the selection position there's a text with the\n\t * specified attribute allowed.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * Selection which will be checked.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Boolean}\n\t */\n\tcheckAttributeInSelection( selection, attribute ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\t\t\tconst context = [\n\t\t\t\t...firstPosition.getAncestors(),\n\t\t\t\tnew Text( '', selection.getAttributes() )\n\t\t\t];\n\n\t\t\t// Check whether schema allows for a text with the attribute in the selection.\n\t\t\treturn this.checkAttribute( context, attribute );\n\t\t} else {\n\t\t\tconst ranges = selection.getRanges();\n\n\t\t\t// For all ranges, check nodes in them until you find a node that is allowed to have the attribute.\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tif ( this.checkAttribute( value.item, attribute ) ) {\n\t\t\t\t\t\t// If we found a node that is allowed to have the attribute, return true.\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we haven't found such node, return false.\n\t\treturn false;\n\t}\n\n\t/**\n\t * Transforms the given set of ranges into a set of ranges where the given attribute is allowed (and can be applied).\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be validated.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Iterable.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\t* getValidRanges( ranges, attribute ) {\n\t\tranges = convertToMinimalFlatRanges( ranges );\n\n\t\tfor ( const range of ranges ) {\n\t\t\tyield* this._getValidRangesForRange( range, attribute );\n\t\t}\n\t}\n\n\t/**\n\t * Basing on given `position`, finds and returns a {@link module:engine/model/range~Range range} which is\n\t * nearest to that `position` and is a correct range for selection.\n\t *\n\t * The correct selection range might be collapsed when it is located in a position where the text node can be placed.\n\t * Non-collapsed range is returned when selection can be placed around element marked as an \"object\" in\n\t * the {@link module:engine/model/schema~Schema schema}.\n\t *\n\t * Direction of searching for the nearest correct selection range can be specified as:\n\t *\n\t * * `both` - searching will be performed in both ways,\n\t * * `forward` - searching will be performed only forward,\n\t * * `backward` - searching will be performed only backward.\n\t *\n\t * When valid selection range cannot be found, `null` is returned.\n\t *\n\t * @param {module:engine/model/position~Position} position Reference position where new selection range should be looked for.\n\t * @param {'both'|'forward'|'backward'} [direction='both'] Search direction.\n\t * @returns {module:engine/model/range~Range|null} Nearest selection range or `null` if one cannot be found.\n\t */\n\tgetNearestSelectionRange( position, direction = 'both' ) {\n\t\t// Return collapsed range if provided position is valid.\n\t\tif ( this.checkChild( position, '$text' ) ) {\n\t\t\treturn new Range( position );\n\t\t}\n\n\t\tlet backwardWalker, forwardWalker;\n\n\t\tif ( direction == 'both' || direction == 'backward' ) {\n\t\t\tbackwardWalker = new TreeWalker( { startPosition: position, direction: 'backward' } );\n\t\t}\n\n\t\tif ( direction == 'both' || direction == 'forward' ) {\n\t\t\tforwardWalker = new TreeWalker( { startPosition: position } );\n\t\t}\n\n\t\tfor ( const data of combineWalkers( backwardWalker, forwardWalker ) ) {\n\t\t\tconst type = ( data.walker == backwardWalker ? 'elementEnd' : 'elementStart' );\n\t\t\tconst value = data.value;\n\n\t\t\tif ( value.type == type && this.isObject( value.item ) ) {\n\t\t\t\treturn Range._createOn( value.item );\n\t\t\t}\n\n\t\t\tif ( this.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\t\treturn new Range( value.nextPosition );\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Tries to find position ancestors that allows to insert given node.\n\t * It starts searching from the given position and goes node by node to the top of the model tree\n\t * as long as {@link module:engine/model/schema~Schema#isLimit limit element},\n\t * {@link module:engine/model/schema~Schema#isObject object element} or top-most ancestor won't be reached.\n\t *\n\t * @params {module:engine/model/position~Position} position Position from searching will start.\n\t * @params {module:engine/model/node~Node|String} node Node for which allowed parent should be found or its name.\n\t * @returns {module:engine/model/element~Element|null} element Allowed parent or null if nothing was found.\n\t */\n\tfindAllowedParent( position, node ) {\n\t\tlet parent = position.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( this.checkChild( parent, node ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\t// Do not split limit elements.\n\t\t\tif ( this.isLimit( parent ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes attributes disallowed by the schema.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes that will be filtered.\n\t * @param {module:engine/model/writer~Writer} writer\n\t */\n\tremoveDisallowedAttributes( nodes, writer ) {\n\t\tfor ( const node of nodes ) {\n\t\t\t// When node is a `Text` it has no children, so just filter it out.\n\t\t\tif ( node.is( 'text' ) ) {\n\t\t\t\tremoveDisallowedAttributeFromNode( this, node, writer );\n\t\t\t}\n\t\t\t// In a case of `Element` iterates through positions between nodes inside this element\n\t\t\t// and filter out node before the current position, or position parent when position\n\t\t\t// is at start of an element. Using positions prevent from omitting merged nodes\n\t\t\t// see https://github.com/ckeditor/ckeditor5-engine/issues/1789.\n\t\t\telse {\n\t\t\t\tconst rangeInNode = Range._createIn( node );\n\t\t\t\tconst positionsInRange = rangeInNode.getPositions();\n\n\t\t\t\tfor ( const position of positionsInRange ) {\n\t\t\t\t\tconst item = position.nodeBefore || position.parent;\n\n\t\t\t\t\tremoveDisallowedAttributeFromNode( this, item, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates an instance of the schema context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t * @returns {module:engine/model/schema~SchemaContext}\n\t */\n\tcreateContext( context ) {\n\t\treturn new SchemaContext( context );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_clearCache() {\n\t\tthis._compiledDefinitions = null;\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_compile() {\n\t\tconst compiledDefinitions = {};\n\t\tconst sourceRules = this._sourceDefinitions;\n\t\tconst itemNames = Object.keys( sourceRules );\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompiledDefinitions[ itemName ] = compileBaseItemRule( sourceRules[ itemName ], itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowContentOf( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowWhere( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowAttributesOf( compiledDefinitions, itemName );\n\t\t\tcompileInheritPropertiesFrom( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcleanUpAllowIn( compiledDefinitions, itemName );\n\t\t\tcleanUpAllowAttributes( compiledDefinitions, itemName );\n\t\t}\n\n\t\tthis._compiledDefinitions = compiledDefinitions;\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/schema~SchemaCompiledItemDefinition} def\n\t * @param {module:engine/model/schema~SchemaContext} context\n\t * @param {Number} contextItemIndex\n\t */\n\t_checkContextMatch( def, context, contextItemIndex = context.length - 1 ) {\n\t\tconst contextItem = context.getItem( contextItemIndex );\n\n\t\tif ( def.allowIn.includes( contextItem.name ) ) {\n\t\t\tif ( contextItemIndex == 0 ) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconst parentRule = this.getDefinition( contextItem );\n\n\t\t\t\treturn this._checkContextMatch( parentRule, context, contextItemIndex - 1 );\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Takes a flat range and an attribute name. Traverses the range recursively and deeply to find and return all ranges\n\t * inside the given range on which the attribute can be applied.\n\t *\n\t * This is a helper function for {@link ~Schema#getValidRanges}.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Range to process.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Iterable.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\t* _getValidRangesForRange( range, attribute ) {\n\t\tlet start = range.start;\n\t\tlet end = range.start;\n\n\t\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\tyield* this._getValidRangesForRange( Range._createIn( item ), attribute );\n\t\t\t}\n\n\t\t\tif ( !this.checkAttribute( item, attribute ) ) {\n\t\t\t\tif ( !start.isEqual( end ) ) {\n\t\t\t\t\tyield new Range( start, end );\n\t\t\t\t}\n\n\t\t\t\tstart = Position._createAfter( item );\n\t\t\t}\n\n\t\t\tend = Position._createAfter( item );\n\t\t}\n\n\t\tif ( !start.isEqual( end ) ) {\n\t\t\tyield new Range( start, end );\n\t\t}\n\t}\n}\n\nmix( Schema, ObservableMixin );\n\n/**\n * Event fired when the {@link #checkChild} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addChildCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkChild} method fires an event because it is\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkChild()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkChild( context, child )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance and `child` to a\n * {@link module:engine/model/schema~SchemaCompiledItemDefinition} instance, so you don't have to worry about\n * the various ways how `context` and `child` may be passed to `checkChild()`.\n *\n * **Note:** `childDefinition` may be `undefined` if `checkChild()` was called with a non-registered element.\n *\n * So, in order to implement a rule \"disallow `heading1` in `blockQuote`\" you can add such a listener:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing elements in specific contexts will be a far less common use case, because it's normally handled by\n * `allowIn` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `listItem` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo' ) && childDefinition.name == 'listItem' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkChild\n * @param {Array} args The `checkChild()`'s arguments.\n */\n\n/**\n * Event fired when the {@link #checkAttribute} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addAttributeCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkAttribute} method fires an event because it's\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkAttribute()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst attributeName = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkAttribute( context, attributeName )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance, so you don't have to worry about\n * the various ways how `context` may be passed to `checkAttribute()`.\n *\n * So, in order to implement a rule \"disallow `bold` in a text which is in a `heading1` you can add such a listener:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing attributes in specific contexts will be a far less common use case, because it's normally handled by\n * `allowAttributes` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `bold` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkAttribute\n * @param {Array} args The `checkAttribute()`'s arguments.\n */\n\n/**\n * A definition of a {@link module:engine/model/schema~Schema schema} item.\n *\n * You can define the following rules:\n *\n * * `allowIn` &ndash; A string or an array of strings. Defines in which other items this item will be allowed.\n * * `allowAttributes` &ndash; A string or an array of strings. Defines allowed attributes of the given item.\n * * `allowContentOf` &ndash; A string or an array of strings. Inherits \"allowed children\" from other items.\n * * `allowWhere` &ndash; A string or an array of strings. Inherits \"allowed in\" from other items.\n * * `allowAttributesOf` &ndash; A string or an array of strings. Inherits attributes from other items.\n * * `inheritTypesFrom` &ndash; A string or an array of strings. Inherits `is*` properties of other items.\n * * `inheritAllFrom` &ndash; A string. A shorthand for `allowContentOf`, `allowWhere`, `allowAttributesOf`, `inheritTypesFrom`.\n * * Additionally, you can define the following `is*` properties: `isBlock`, `isLimit`, `isObject`, `isInline`. Read about them below.\n *\n * # The is* properties\n *\n * There are 3 commonly used `is*` properties. Their role is to assign additional semantics to schema items.\n * You can define more properties but you will also need to implement support for them in the existing editor features.\n *\n * * `isBlock` &ndash; Whether this item is paragraph-like. Generally speaking, content is usually made out of blocks\n * like paragraphs, list items, images, headings, etc. All these elements are marked as blocks. A block\n * should not allow another block inside. Note: There is also the `$block` generic item which has `isBlock` set to `true`.\n * Most block type items will inherit from `$block` (through `inheritAllFrom`).\n * * `isLimit` &ndash; It can be understood as whether this element should not be split by <kbd>Enter</kbd>.\n * Examples of limit elements: `$root`, table cell, image caption, etc. In other words, all actions that happen inside\n * a limit element are limited to its content. **Note:** All objects (`isObject`) are treated as limit elements, too.\n * * `isObject` &ndash; Whether an item is \"self-contained\" and should be treated as a whole. Examples of object elements:\n * `image`, `table`, `video`, etc. **Note:** An object is also a limit, so\n * {@link module:engine/model/schema~Schema#isLimit `isLimit()`} returns `true` for object elements automatically.\n * * `isInline` &ndash; Whether an item is \"text-like\" and should be treated as an inline node. Examples of inline elements:\n * `$text`, `softBreak` (`<br>`), etc.\n *\n * # Generic items\n *\n * There are three basic generic items: `$root`, `$block` and `$text`.\n * They are defined as follows:\n *\n *\t\tthis.schema.register( '$root', {\n *\t\t\tisLimit: true\n *\t\t} );\n *\t\tthis.schema.register( '$block', {\n *\t\t\tallowIn: '$root',\n *\t\t\tisBlock: true\n *\t\t} );\n *\t\tthis.schema.register( '$text', {\n *\t\t\tallowIn: '$block',\n *\t\t\tisInline: true\n *\t\t} );\n *\n * They reflect typical editor content that is contained within one root, consists of several blocks\n * (paragraphs, lists items, headings, images) which, in turn, may contain text inside.\n *\n * By inheriting from the generic items you can define new items which will get extended by other editor features.\n * Read more about generic types in the {@glink framework/guides/deep-dive/schema Defining schema} guide.\n *\n * # Example definitions\n *\n * Allow `paragraph` in roots and block quotes:\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowIn: [ '$root', 'blockQuote' ],\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Allow `paragraph` everywhere where `$block` is allowed (i.e. in `$root`):\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Make `image` a block object, which is allowed everywhere where `$block` is.\n * Also, allow `src` and `alt` attributes in it:\n *\n *\t\tschema.register( 'image', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowAttributes: [ 'src', 'alt' ],\n *\t\t\tisBlock: true,\n *\t\t\tisObject: true\n *\t\t} );\n *\n * Make `caption` allowed in `image` and make it allow all the content of `$block`s (usually, `$text`).\n * Also, mark it as a limit element so it cannot be split:\n *\n *\t\tschema.register( 'caption', {\n *\t\t\tallowIn: 'image',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tisLimit: true\n *\t\t} );\n *\n * Make `listItem` inherit all from `$block` but also allow additional attributes:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tinheritAllFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * Which translates to:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tallowAttributesOf: '$block',\n *\t\t\tinheritTypesFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * # Tips\n *\n * * Check schema definitions of existing features to see how they are defined.\n * * If you want to publish your feature so other developers can use it, try to use\n * generic items as much as possible.\n * * Keep your model clean. Limit it to the actual data and store information in a normalized way.\n * * Remember about definining the `is*` properties. They do not affect the allowed structures, but they can\n * affect how the editor features treat your elements.\n *\n * @typedef {Object} module:engine/model/schema~SchemaItemDefinition\n */\n\n/**\n * A simplified version of {@link module:engine/model/schema~SchemaItemDefinition} after\n * compilation by the {@link module:engine/model/schema~Schema schema}.\n * Rules fed to the schema by {@link module:engine/model/schema~Schema#register}\n * and {@link module:engine/model/schema~Schema#extend} methods are defined in the\n * {@link module:engine/model/schema~SchemaItemDefinition} format.\n * Later on, they are compiled to `SchemaCompiledItemDefition` so when you use e.g.\n * the {@link module:engine/model/schema~Schema#getDefinition} method you get the compiled version.\n *\n * The compiled version contains only the following properties:\n *\n * * The `name` property,\n * * The `is*` properties,\n * * The `allowIn` array,\n * * The `allowAttributes` array.\n *\n * @typedef {Object} module:engine/model/schema~SchemaCompiledItemDefinition\n */\n\n/**\n * A schema context &mdash; a list of ancestors of a given position in the document.\n *\n * Considering such position:\n *\n *\t\t<$root>\n *\t\t\t<blockQuote>\n *\t\t\t\t<paragraph>\n *\t\t\t\t\t^\n *\t\t\t\t</paragraph>\n *\t\t\t</blockQuote>\n *\t\t</$root>\n *\n * The context of this position is its {@link module:engine/model/position~Position#getAncestors lists of ancestors}:\n *\n *\t\t[ rootElement, blockQuoteElement, paragraphElement ]\n *\n * Contexts are used in the {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`} and\n * {@link module:engine/model/schema~Schema#event:checkAttribute `Schema#checkAttribute`} events as a definition\n * of a place in the document where the check occurs. The context instances are created based on the first arguments\n * of the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`} and\n * {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} methods so when\n * using these methods you need to use {@link module:engine/model/schema~SchemaContextDefinition}s.\n */\nexport class SchemaContext {\n\t/**\n\t * Creates an instance of the context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t */\n\tconstructor( context ) {\n\t\tif ( context instanceof SchemaContext ) {\n\t\t\treturn context;\n\t\t}\n\n\t\tif ( typeof context == 'string' ) {\n\t\t\tcontext = [ context ];\n\t\t} else if ( !Array.isArray( context ) ) {\n\t\t\t// `context` is item or position.\n\t\t\t// Position#getAncestors() doesn't accept any parameters but it works just fine here.\n\t\t\tcontext = context.getAncestors( { includeSelf: true } );\n\t\t}\n\n\t\tif ( context[ 0 ] && typeof context[ 0 ] != 'string' && context[ 0 ].is( 'documentFragment' ) ) {\n\t\t\tcontext.shift();\n\t\t}\n\n\t\tthis._items = context.map( mapContextItem );\n\t}\n\n\t/**\n\t * The number of items.\n\t *\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * The last item (the lowest node).\n\t *\n\t * @type {module:engine/model/schema~SchemaContextItem}\n\t */\n\tget last() {\n\t\treturn this._items[ this._items.length - 1 ];\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all context items.\n\t *\n\t * @returns {Iterable.<module:engine/model/schema~SchemaContextItem>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns a new schema context instance with an additional item.\n\t *\n\t * Item can be added as:\n\t *\n\t * \t\tconst context = new SchemaContext( [ '$root' ] );\n\t *\n\t * \t\t// An element.\n\t * \t\tconst fooElement = writer.createElement( 'fooElement' );\n\t * \t\tconst newContext = context.push( fooElement ); // [ '$root', 'fooElement' ]\n\t *\n\t * \t\t// A text node.\n\t * \t\tconst text = writer.createText( 'foobar' );\n\t * \t\tconst newContext = context.push( text ); // [ '$root', '$text' ]\n\t *\n\t * \t\t// A string (element name).\n\t * \t\tconst newContext = context.push( 'barElement' ); // [ '$root', 'barElement' ]\n\t *\n\t * **Note** {@link module:engine/model/node~Node} that is already in the model tree will be added as the only item\n\t * (without ancestors).\n\t *\n\t * @param {String|module:engine/model/node~Node|Array<String|module:engine/model/node~Node>} item An item that will be added\n\t * to the current context.\n\t * @returns {module:engine/model/schema~SchemaContext} A new schema context instance with an additional item.\n\t */\n\tpush( item ) {\n\t\tconst ctx = new SchemaContext( [ item ] );\n\n\t\tctx._items = [ ...this._items, ...ctx._items ];\n\n\t\treturn ctx;\n\t}\n\n\t/**\n\t * Gets an item on the given index.\n\t *\n\t * @returns {module:engine/model/schema~SchemaContextItem}\n\t */\n\tgetItem( index ) {\n\t\treturn this._items[ index ];\n\t}\n\n\t/**\n\t * Returns the names of items.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* getNames() {\n\t\tyield* this._items.map( item => item.name );\n\t}\n\n\t/**\n\t * Checks whether the context ends with the given nodes.\n\t *\n\t *\t\tconst ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n\t *\n\t *\t\tctx.endsWith( '$text' ); // -> true\n\t *\t\tctx.endsWith( 'paragraph $text' ); // -> true\n\t *\t\tctx.endsWith( '$root' ); // -> false\n\t *\t\tctx.endsWith( 'paragraph' ); // -> false\n\t *\n\t * @param {String} query\n\t * @returns {Boolean}\n\t */\n\tendsWith( query ) {\n\t\treturn Array.from( this.getNames() ).join( ' ' ).endsWith( query );\n\t}\n}\n\n/**\n * The definition of a {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * Contexts can be created in multiple ways:\n *\n * * By defining a **node** – in this cases this node and all its ancestors will be used.\n * * By defining a **position** in the document – in this case all its ancestors will be used.\n * * By defining an **array of nodes** – in this case this array defines the entire context.\n * * By defining a **name of node** - in this case node will be \"mocked\". It is not recommended because context\n * will be unrealistic (e.g. attributes of these nodes are not specified). However, at times this may be the only\n * way to define the context (e.g. when checking some hypothetical situation).\n * * By defining an **array of node names** (potentially, mixed with real nodes) – The same as **name of node**\n * but it is possible to create a path.\n * * By defining a {@link module:engine/model/schema~SchemaContext} instance - in this case the same instance as provided\n * will be return.\n *\n * Examples of context definitions passed to the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`}\n * method:\n *\n *\t\t// Assuming that we have a $root > blockQuote > paragraph structure, the following code\n *\t\t// will check node 'foo' in the following context:\n *\t\t// [ rootElement, blockQuoteElement, paragraphElement ]\n *\t\tconst contextDefinition = paragraphElement;\n * \t\tconst childToCheck = 'foo';\n *\t\tschema.checkChild( contextDefinition, childToCheck );\n *\n *\t\t// Also check in [ rootElement, blockQuoteElement, paragraphElement ].\n *\t\tschema.checkChild( model.createPositionAt( paragraphElement, 0 ), 'foo' );\n *\n *\t\t// Check in [ rootElement, paragraphElement ].\n *\t\tschema.checkChild( [ rootElement, paragraphElement ], 'foo' );\n *\n *\t\t// Check only fakeParagraphElement.\n *\t\tschema.checkChild( 'paragraph', 'foo' );\n *\n *\t\t// Check in [ fakeRootElement, fakeBarElement, paragraphElement ].\n *\t\tschema.checkChild( [ '$root', 'bar', paragraphElement ], 'foo' );\n *\n * All these `checkChild()` calls will fire {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`}\n * events in which `args[ 0 ]` is an instance of the context. Therefore, you can write a listener like this:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\n *\t\t\tconsole.log( Array.from( ctx.getNames() ) );\n *\t\t} );\n *\n * Which will log the following:\n *\n *\t\t[ '$root', 'blockQuote', 'paragraph' ]\n *\t\t[ '$root', 'paragraph' ]\n *\t\t[ '$root', 'bar', 'paragraph' ]\n *\n * Note: When using the {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} method\n * you may want to check whether a text node may have an attribute. A {@link module:engine/model/text~Text} is a\n * correct way to define a context so you can do this:\n *\n *\t\tschema.checkAttribute( textNode, 'bold' );\n *\n * But sometimes you want to check whether a text at a given position might've had some attribute,\n * in which case you can create a context by mising an array of elements with a `'$text'` string:\n *\n *\t\t// Check in [ rootElement, paragraphElement, textNode ].\n *\t\tschema.checkChild( [ ...positionInParagraph.getAncestors(), '$text' ], 'bold' );\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/position~Position|module:engine/model/schema~SchemaContext|\n * String|Array.<String|module:engine/model/node~Node>} module:engine/model/schema~SchemaContextDefinition\n */\n\n/**\n * An item of the {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * It contains 3 properties:\n *\n * * `name` – the name of this item,\n * * `* getAttributeKeys()` – a generator of keys of item attributes,\n * * `getAttribute( keyName )` – a method to get attribute values.\n *\n * The context item interface is a highly simplified version of {@link module:engine/model/node~Node} and its role\n * is to expose only the information which schema checks are able to provide (which is the name of the node and\n * node's attributes).\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\t\t\tconst firstItem = ctx.getItem( 0 );\n *\n *\t\t\tconsole.log( firstItem.name ); // -> '$root'\n *\t\t\tconsole.log( firstItem.getAttribute( 'foo' ) ); // -> 'bar'\n *\t\t\tconsole.log( Array.from( firstItem.getAttributeKeys() ) ); // -> [ 'foo', 'faa' ]\n *\t\t} );\n *\n * @typedef {Object} module:engine/model/schema~SchemaContextItem\n */\n\n/**\n * A structure containing additional metadata describing the attribute.\n *\n * See {@link module:engine/model/schema~Schema#setAttributeProperties `Schema#setAttributeProperties()`} for usage examples.\n *\n * @typedef {Object} module:engine/model/schema~AttributeProperties\n * @property {Boolean} [isFormatting] Indicates that the attribute should be considered as a visual formatting, like `bold`, `italic` or\n * `fontSize` rather than semantic attribute (such as `src`, `listType`, etc.). For example, it is used by the \"Remove format\" feature.\n * @property {Boolean} [copyOnEnter] Indicates that given text attribute should be copied to the next block when enter is pressed.\n */\n\nfunction compileBaseItemRule( sourceItemRules, itemName ) {\n\tconst itemRule = {\n\t\tname: itemName,\n\n\t\tallowIn: [],\n\t\tallowContentOf: [],\n\t\tallowWhere: [],\n\n\t\tallowAttributes: [],\n\t\tallowAttributesOf: [],\n\n\t\tinheritTypesFrom: []\n\t};\n\n\tcopyTypes( sourceItemRules, itemRule );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowIn' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowContentOf' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowWhere' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributes' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributesOf' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'inheritTypesFrom' );\n\n\tmakeInheritAllWork( sourceItemRules, itemRule );\n\n\treturn itemRule;\n}\n\nfunction compileAllowContentOf( compiledDefinitions, itemName ) {\n\tfor ( const allowContentOfItemName of compiledDefinitions[ itemName ].allowContentOf ) {\n\t\t// The allowContentOf property may point to an unregistered element.\n\t\tif ( compiledDefinitions[ allowContentOfItemName ] ) {\n\t\t\tconst allowedChildren = getAllowedChildren( compiledDefinitions, allowContentOfItemName );\n\n\t\t\tallowedChildren.forEach( allowedItem => {\n\t\t\t\tallowedItem.allowIn.push( itemName );\n\t\t\t} );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowContentOf;\n}\n\nfunction compileAllowWhere( compiledDefinitions, itemName ) {\n\tfor ( const allowWhereItemName of compiledDefinitions[ itemName ].allowWhere ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowWhereItemName ];\n\n\t\t// The allowWhere property may point to an unregistered element.\n\t\tif ( inheritFrom ) {\n\t\t\tconst allowedIn = inheritFrom.allowIn;\n\n\t\t\tcompiledDefinitions[ itemName ].allowIn.push( ...allowedIn );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowWhere;\n}\n\nfunction compileAllowAttributesOf( compiledDefinitions, itemName ) {\n\tfor ( const allowAttributeOfItem of compiledDefinitions[ itemName ].allowAttributesOf ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowAttributeOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst inheritAttributes = inheritFrom.allowAttributes;\n\n\t\t\tcompiledDefinitions[ itemName ].allowAttributes.push( ...inheritAttributes );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowAttributesOf;\n}\n\nfunction compileInheritPropertiesFrom( compiledDefinitions, itemName ) {\n\tconst item = compiledDefinitions[ itemName ];\n\n\tfor ( const inheritPropertiesOfItem of item.inheritTypesFrom ) {\n\t\tconst inheritFrom = compiledDefinitions[ inheritPropertiesOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst typeNames = Object.keys( inheritFrom ).filter( name => name.startsWith( 'is' ) );\n\n\t\t\tfor ( const name of typeNames ) {\n\t\t\t\tif ( !( name in item ) ) {\n\t\t\t\t\titem[ name ] = inheritFrom[ name ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete item.inheritTypesFrom;\n}\n\n// Remove items which weren't registered (because it may break some checks or we'd need to complicate them).\n// Make sure allowIn doesn't contain repeated values.\nfunction cleanUpAllowIn( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\tconst existingItems = itemRule.allowIn.filter( itemToCheck => compiledDefinitions[ itemToCheck ] );\n\n\titemRule.allowIn = Array.from( new Set( existingItems ) );\n}\n\nfunction cleanUpAllowAttributes( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\titemRule.allowAttributes = Array.from( new Set( itemRule.allowAttributes ) );\n}\n\nfunction copyTypes( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst typeNames = Object.keys( sourceItemRule ).filter( name => name.startsWith( 'is' ) );\n\n\t\tfor ( const name of typeNames ) {\n\t\t\titemRule[ name ] = sourceItemRule[ name ];\n\t\t}\n\t}\n}\n\nfunction copyProperty( sourceItemRules, itemRule, propertyName ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tif ( typeof sourceItemRule[ propertyName ] == 'string' ) {\n\t\t\titemRule[ propertyName ].push( sourceItemRule[ propertyName ] );\n\t\t} else if ( Array.isArray( sourceItemRule[ propertyName ] ) ) {\n\t\t\titemRule[ propertyName ].push( ...sourceItemRule[ propertyName ] );\n\t\t}\n\t}\n}\n\nfunction makeInheritAllWork( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst inheritFrom = sourceItemRule.inheritAllFrom;\n\n\t\tif ( inheritFrom ) {\n\t\t\titemRule.allowContentOf.push( inheritFrom );\n\t\t\titemRule.allowWhere.push( inheritFrom );\n\t\t\titemRule.allowAttributesOf.push( inheritFrom );\n\t\t\titemRule.inheritTypesFrom.push( inheritFrom );\n\t\t}\n\t}\n}\n\nfunction getAllowedChildren( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\treturn getValues( compiledDefinitions ).filter( def => def.allowIn.includes( itemRule.name ) );\n}\n\nfunction getValues( obj ) {\n\treturn Object.keys( obj ).map( key => obj[ key ] );\n}\n\nfunction mapContextItem( ctxItem ) {\n\tif ( typeof ctxItem == 'string' ) {\n\t\treturn {\n\t\t\tname: ctxItem,\n\n\t\t\t* getAttributeKeys() {},\n\n\t\t\tgetAttribute() {}\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\t// '$text' means text nodes and text proxies.\n\t\t\tname: ctxItem.is( 'element' ) ? ctxItem.name : '$text',\n\n\t\t\t* getAttributeKeys() {\n\t\t\t\tyield* ctxItem.getAttributeKeys();\n\t\t\t},\n\n\t\t\tgetAttribute( key ) {\n\t\t\t\treturn ctxItem.getAttribute( key );\n\t\t\t}\n\t\t};\n\t}\n}\n\n// Generator function returning values from provided walkers, switching between them at each iteration. If only one walker\n// is provided it will return data only from that walker.\n//\n// @param {module:engine/module/treewalker~TreeWalker} [backward] Walker iterating in backward direction.\n// @param {module:engine/module/treewalker~TreeWalker} [forward] Walker iterating in forward direction.\n// @returns {Iterable.<Object>} Object returned at each iteration contains `value` and `walker` (informing which walker returned\n// given value) fields.\nfunction* combineWalkers( backward, forward ) {\n\tlet done = false;\n\n\twhile ( !done ) {\n\t\tdone = true;\n\n\t\tif ( backward ) {\n\t\t\tconst step = backward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: backward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( forward ) {\n\t\t\tconst step = forward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: forward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Takes an array of non-intersecting ranges. For each of them gets minimal flat ranges covering that range and returns\n// all those minimal flat ranges.\n//\n// @param {Array.<module:engine/model/range~Range>} ranges Ranges to process.\n// @returns {Iterable.<module:engine/model/range~Range>} Minimal flat ranges of given `ranges`.\nfunction* convertToMinimalFlatRanges( ranges ) {\n\tfor ( const range of ranges ) {\n\t\tyield* range.getMinimalFlatRanges();\n\t}\n}\n\nfunction removeDisallowedAttributeFromNode( schema, node, writer ) {\n\tfor ( const attribute of node.getAttributeKeys() ) {\n\t\tif ( !schema.checkAttribute( node, attribute ) ) {\n\t\t\twriter.removeAttribute( attribute, node );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/upcastdispatcher\n */\n\nimport ViewConsumable from './viewconsumable';\nimport ModelRange from '../model/range';\nimport ModelPosition from '../model/position';\nimport { SchemaContext } from '../model/schema';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * `UpcastDispatcher` is a central point of {@link module:engine/view/view view} conversion, which is a process of\n * converting given {@link module:engine/view/documentfragment~DocumentFragment view document fragment} or\n * {@link module:engine/view/element~Element} into another structure.\n * In default application, {@link module:engine/view/view view} is converted to {@link module:engine/model/model}.\n *\n * During conversion process, for all {@link module:engine/view/node~Node view nodes} from the converted view document fragment,\n * `UpcastDispatcher` fires corresponding events. Special callbacks called \"converters\" should listen to\n * `UpcastDispatcher` for those events.\n *\n * Each callback, as the second argument, is passed a special object `data` that has `viewItem`, `modelCursor` and\n * `modelRange` properties. `viewItem` property contains {@link module:engine/view/node~Node view node} or\n * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * that is converted at the moment and might be handled by the callback. `modelRange` property should be used to save the result\n * of conversion and is always a {@link module:engine/model/range~Range} when conversion result is correct.\n * `modelCursor` property is a {@link module:engine/model/position~Position position} on which conversion result will be inserted\n * and is a context according to {@link module:engine/model/schema~Schema schema} will be checked before the conversion.\n * See also {@link ~UpcastDispatcher#convert}. It is also shared by reference by all callbacks listening to given event.\n *\n * The third parameter passed to a callback is an instance of {@link ~UpcastDispatcher}\n * which provides additional tools for converters.\n *\n * Examples of providing callbacks for `UpcastDispatcher`:\n *\n *\t\t// Converter for links (<a>).\n *\t\teditor.data.upcastDispatcher.on( 'element:a', ( evt, data, conversionApi ) => {\n *\t\t\tif ( conversionApi.consumable.consume( data.viewItem, { name: true, attributes: [ 'href' ] } ) ) {\n *\t\t\t\t// <a> element is inline and is represented by an attribute in the model.\n *\t\t\t\t// This is why we need to convert only children.\n *\t\t\t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n *\n *\t\t\t\tfor ( let item of modelRange.getItems() ) {\n *\t\t\t\t\tif ( conversionApi.schema.checkAttribute( item, 'linkHref' ) ) {\n *\t\t\t\t\t\tconversionApi.writer.setAttribute( 'linkHref', data.viewItem.getAttribute( 'href' ), item );\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// Convert <p>'s font-size style.\n *\t\t// Note: You should use a low-priority observer in order to ensure that\n *\t\t// it's executed after the element-to-element converter.\n *\t\teditor.data.upcastDispatcher.on( 'element:p', ( evt, data, conversionApi ) => {\n *\t\t\tconst { consumable, schema, writer } = conversionApi;\n *\n *\t\t\tif ( !consumable.consume( data.viewItem, { style: 'font-size' } ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\tconst fontSize = data.viewItem.getStyle( 'font-size' );\n *\n *\t\t\t// Don't go for the model element after data.modelCursor because it might happen\n *\t\t\t// that a single view element was converted to multiple model elements. Get all of them.\n *\t\t\tfor ( const item of data.modelRange.getItems( { shallow: true } ) ) {\n *\t\t\t\tif ( schema.checkAttribute( item, 'fontSize' ) ) {\n *\t\t\t\t\twriter.setAttribute( 'fontSize', fontSize, item );\n *\t\t\t\t}\n *\t\t\t}\n *\t\t}, { priority: 'low' } );\n *\n *\t\t// Convert all elements which have no custom converter into paragraph (autoparagraphing).\n *  \teditor.data.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n *  \t \t// When element is already consumed by higher priority converters then do nothing.\n *  \t \tif ( conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n *  \t \t\t\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n *\n *  \t \t\t\t// Find allowed parent for paragraph that we are going to insert. If current parent does not allow\n *  \t \t\t\t// to insert paragraph but one of the ancestors does then split nodes to allowed parent.\n *  \t \t\t\tconst splitResult = conversionApi.splitToAllowedParent( paragraph, data.modelCursor );\n *\n *  \t \t\t\t// When there is no split result it means that we can't insert paragraph in this position.\n *  \t \t\t\tif ( splitResult ) {\n *  \t \t\t\t\t// Insert paragraph in allowed position.\n *  \t \t\t\t\tconversionApi.writer.insert( paragraph, splitResult.position );\n *\n *  \t \t\t\t\t// Convert children to paragraph.\n *  \t \t\t\t\tconst { modelRange } = conversionApi.convertChildren(\n *  \t \t\t\t\t\tdata.viewItem,\n *  \t \t\t\t\t\tconversionApi.writer.createPositionAt( paragraph, 0 )\n *  \t \t\t\t\t);\n *\n * \t\t\t\t\t\t// Set as conversion result, attribute converters may use this property.\n *  \t \t\t\t\tdata.modelRange = conversionApi.writer.createRange(\n *  \t \t\t\t\t\tconversionApi.writer.createPositionBefore( paragraph ),\n *  \t \t\t\t\t\tmodelRange.end\n *  \t \t\t\t\t);\n *\n *  \t \t\t\t\t// Continue conversion inside paragraph.\n *  \t \t\t\t\tdata.modelCursor = data.modelRange.end;\n *  \t \t\t\t}\n *  \t \t\t}\n *  \t \t}\n *  \t }, { priority: 'low' } );\n *\n * Before each conversion process, `UpcastDispatcher` fires {@link ~UpcastDispatcher#event:viewCleanup}\n * event which can be used to prepare tree view for conversion.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @fires viewCleanup\n * @fires element\n * @fires text\n * @fires documentFragment\n */\nexport default class UpcastDispatcher {\n\t/**\n\t * Creates a `UpcastDispatcher` that operates using passed API.\n\t *\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi\n\t * @param {Object} [conversionApi] Additional properties for interface that will be passed to events fired\n\t * by `UpcastDispatcher`.\n\t */\n\tconstructor( conversionApi = {} ) {\n\t\t/**\n\t\t * List of the elements that were created during splitting.\n\t\t *\n\t\t * After conversion process the list is cleared.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<module:engine/model/element~Element,Array.<module:engine/model/element~Element>>}\n\t\t */\n\t\tthis._splitParts = new Map();\n\n\t\t/**\n\t\t * Position in the temporary structure where the converted content is inserted. The structure reflect the context of\n\t\t * the target position where the content will be inserted. This property is build based on the context parameter of the\n\t\t * convert method.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/position~Position|null}\n\t\t */\n\t\tthis._modelCursor = null;\n\n\t\t/**\n\t\t * Interface passed by dispatcher to the events callbacks.\n\t\t *\n\t\t * @member {module:engine/conversion/upcastdispatcher~UpcastConversionApi}\n\t\t */\n\t\tthis.conversionApi = Object.assign( {}, conversionApi );\n\n\t\t// `convertItem`, `convertChildren` and `splitToAllowedParent` are bound to this `UpcastDispatcher`\n\t\t// instance and set on `conversionApi`. This way only a part of `UpcastDispatcher` API is exposed.\n\t\tthis.conversionApi.convertItem = this._convertItem.bind( this );\n\t\tthis.conversionApi.convertChildren = this._convertChildren.bind( this );\n\t\tthis.conversionApi.splitToAllowedParent = this._splitToAllowedParent.bind( this );\n\t\tthis.conversionApi.getSplitParts = this._getSplitParts.bind( this );\n\t}\n\n\t/**\n\t * Starts the conversion process. The entry point for the conversion.\n\t *\n\t * @fires element\n\t * @fires text\n\t * @fires documentFragment\n\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element} viewItem\n\t * Part of the view to be converted.\n\t * @param {module:engine/model/writer~Writer} writer Instance of model writer.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context=['$root']] Elements will be converted according to this context.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Model data that is a result of the conversion process\n\t * wrapped in `DocumentFragment`. Converted marker elements will be set as that document fragment's\n\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n\t */\n\tconvert( viewItem, writer, context = [ '$root' ] ) {\n\t\tthis.fire( 'viewCleanup', viewItem );\n\n\t\t// Create context tree and set position in the top element.\n\t\t// Items will be converted according to this position.\n\t\tthis._modelCursor = createContextTree( context, writer );\n\n\t\t// Store writer in conversion as a conversion API\n\t\t// to be sure that conversion process will use the same batch.\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create consumable values list for conversion process.\n\t\tthis.conversionApi.consumable = ViewConsumable.createFrom( viewItem );\n\n\t\t// Custom data stored by converter for conversion process.\n\t\tthis.conversionApi.store = {};\n\n\t\t// Do the conversion.\n\t\tconst { modelRange } = this._convertItem( viewItem, this._modelCursor );\n\n\t\t// Conversion result is always a document fragment so let's create it.\n\t\tconst documentFragment = writer.createDocumentFragment();\n\n\t\t// When there is a conversion result.\n\t\tif ( modelRange ) {\n\t\t\t// Remove all empty elements that were create while splitting.\n\t\t\tthis._removeEmptyElements();\n\n\t\t\t// Move all items that were converted in context tree to the document fragment.\n\t\t\tfor ( const item of Array.from( this._modelCursor.parent.getChildren() ) ) {\n\t\t\t\twriter.append( item, documentFragment );\n\t\t\t}\n\n\t\t\t// Extract temporary markers elements from model and set as static markers collection.\n\t\t\tdocumentFragment.markers = extractMarkersFromModelFragment( documentFragment, writer );\n\t\t}\n\n\t\t// Clear context position.\n\t\tthis._modelCursor = null;\n\n\t\t// Clear split elements lists.\n\t\tthis._splitParts.clear();\n\n\t\t// Clear conversion API.\n\t\tthis.conversionApi.writer = null;\n\t\tthis.conversionApi.store = null;\n\n\t\t// Return fragment as conversion result.\n\t\treturn documentFragment;\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertItem\n\t */\n\t_convertItem( viewItem, modelCursor ) {\n\t\tconst data = Object.assign( { viewItem, modelCursor, modelRange: null } );\n\n\t\tif ( viewItem.is( 'element' ) ) {\n\t\t\tthis.fire( 'element:' + viewItem.name, data, this.conversionApi );\n\t\t} else if ( viewItem.is( 'text' ) ) {\n\t\t\tthis.fire( 'text', data, this.conversionApi );\n\t\t} else {\n\t\t\tthis.fire( 'documentFragment', data, this.conversionApi );\n\t\t}\n\n\t\t// Handle incorrect conversion result.\n\t\tif ( data.modelRange && !( data.modelRange instanceof ModelRange ) ) {\n\t\t\t/**\n\t\t\t * Incorrect conversion result was dropped.\n\t\t\t *\n\t\t\t * {@link module:engine/model/range~Range Model range} should be a conversion result.\n\t\t\t *\n\t\t\t * @error view-conversion-dispatcher-incorrect-result\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-conversion-dispatcher-incorrect-result: Incorrect conversion result was dropped.', this );\n\t\t}\n\n\t\treturn { modelRange: data.modelRange, modelCursor: data.modelCursor };\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertChildren\n\t */\n\t_convertChildren( viewItem, modelCursor ) {\n\t\tconst modelRange = new ModelRange( modelCursor );\n\t\tlet nextModelCursor = modelCursor;\n\n\t\tfor ( const viewChild of Array.from( viewItem.getChildren() ) ) {\n\t\t\tconst result = this._convertItem( viewChild, nextModelCursor );\n\n\t\t\tif ( result.modelRange instanceof ModelRange ) {\n\t\t\t\tmodelRange.end = result.modelRange.end;\n\t\t\t\tnextModelCursor = result.modelCursor;\n\t\t\t}\n\t\t}\n\n\t\treturn { modelRange, modelCursor: nextModelCursor };\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#splitToAllowedParent\n\t */\n\t_splitToAllowedParent( node, modelCursor ) {\n\t\t// Try to find allowed parent.\n\t\tconst allowedParent = this.conversionApi.schema.findAllowedParent( modelCursor, node );\n\n\t\t// When there is no parent that allows to insert node then return `null`.\n\t\tif ( !allowedParent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// When current position parent allows to insert node then return this position.\n\t\tif ( allowedParent === modelCursor.parent ) {\n\t\t\treturn { position: modelCursor };\n\t\t}\n\n\t\t// When allowed parent is in context tree.\n\t\tif ( this._modelCursor.parent.getAncestors().includes( allowedParent ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Split element to allowed parent.\n\t\tconst splitResult = this.conversionApi.writer.split( modelCursor, allowedParent );\n\n\t\t// Using the range returned by `model.Writer#split`, we will pair original elements with their split parts.\n\t\t//\n\t\t// The range returned from the writer spans \"over the split\" or, precisely saying, from the end of the original element (the one\n\t\t// that got split) to the beginning of the other part of that element:\n\t\t//\n\t\t// <limit><a><b><c>X[]Y</c></b><a></limit> ->\n\t\t// <limit><a><b><c>X[</c></b></a><a><b><c>]Y</c></b></a>\n\t\t//\n\t\t// After the split there cannot be any full node between the positions in `splitRange`. The positions are touching.\n\t\t// Also, because of how splitting works, it is easy to notice, that \"closing tags\" are in the reverse order than \"opening tags\".\n\t\t// Also, since we split all those elements, each of them has to have the other part.\n\t\t//\n\t\t// With those observations in mind, we will pair the original elements with their split parts by saving \"closing tags\" and matching\n\t\t// them with \"opening tags\" in the reverse order. For that we can use a stack.\n\t\tconst stack = [];\n\n\t\tfor ( const treeWalkerValue of splitResult.range.getWalker() ) {\n\t\t\tif ( treeWalkerValue.type == 'elementEnd' ) {\n\t\t\t\tstack.push( treeWalkerValue.item );\n\t\t\t} else {\n\t\t\t\t// There should not be any text nodes after the element is split, so the only other value is `elementStart`.\n\t\t\t\tconst originalPart = stack.pop();\n\t\t\t\tconst splitPart = treeWalkerValue.item;\n\n\t\t\t\tthis._registerSplitPair( originalPart, splitPart );\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tposition: splitResult.position,\n\t\t\tcursorParent: splitResult.range.end.parent\n\t\t};\n\t}\n\n\t/**\n\t * Registers that `splitPart` element is a split part of the `originalPart` element.\n\t *\n\t * Data set by this method is used by {@link #_getSplitParts} and {@link #_removeEmptyElements}.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} originalPart\n\t * @param {module:engine/model/element~Element} splitPart\n\t */\n\t_registerSplitPair( originalPart, splitPart ) {\n\t\tif ( !this._splitParts.has( originalPart ) ) {\n\t\t\tthis._splitParts.set( originalPart, [ originalPart ] );\n\t\t}\n\n\t\tconst list = this._splitParts.get( originalPart );\n\n\t\tthis._splitParts.set( splitPart, list );\n\t\tlist.push( splitPart );\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#getSplitParts\n\t */\n\t_getSplitParts( element ) {\n\t\tlet parts;\n\n\t\tif ( !this._splitParts.has( element ) ) {\n\t\t\tparts = [ element ];\n\t\t} else {\n\t\t\tparts = this._splitParts.get( element );\n\t\t}\n\n\t\treturn parts;\n\t}\n\n\t/**\n\t * Checks if there are any empty elements created while splitting and removes them.\n\t *\n\t * This method works recursively to re-check empty elements again after at least one element was removed in the initial call,\n\t * as some elements might have become empty after other empty elements were removed from them.\n\t *\n\t * @private\n\t */\n\t_removeEmptyElements() {\n\t\tlet anyRemoved = false;\n\n\t\tfor ( const element of this._splitParts.keys() ) {\n\t\t\tif ( element.isEmpty ) {\n\t\t\t\tthis.conversionApi.writer.remove( element );\n\t\t\t\tthis._splitParts.delete( element );\n\n\t\t\t\tanyRemoved = true;\n\t\t\t}\n\t\t}\n\n\t\tif ( anyRemoved ) {\n\t\t\tthis._removeEmptyElements();\n\t\t}\n\t}\n\n\t/**\n\t * Fired before the first conversion event, at the beginning of upcast (view to model conversion) process.\n\t *\n\t * @event viewCleanup\n\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element}\n\t * viewItem Part of the view to be converted.\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/element~Element} is converted.\n\t *\n\t * `element` is a namespace event for a class of events. Names of actually called events follow this pattern:\n\t * `element:<elementName>` where `elementName` is the name of converted element. This way listeners may listen to\n\t * all elements conversion or to conversion of specific elements.\n\t *\n\t * @event element\n\t * @param {Object} data Conversion data. Keep in mind that this object is shared by reference between all\n\t * callbacks that will be called. This means that callbacks can override values if needed, and those values will\n\t * be available in other callbacks.\n\t * @param {module:engine/view/item~Item} data.viewItem Converted item.\n\t * @param {module:engine/model/position~Position} data.modelCursor Position where a converter should start changes.\n\t * Change this value for the next converter to tell where the conversion should continue.\n\t * @param {module:engine/model/range~Range} data.modelRange The current state of conversion result. Every change to\n\t * converted element should be reflected by setting or modifying this property.\n\t * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion utilities to be used by callback.\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/text~Text} is converted.\n\t *\n\t * @event text\n\t * @see #event:element\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/documentfragment~DocumentFragment} is converted.\n\t *\n\t * @event documentFragment\n\t * @see #event:element\n\t */\n}\n\nmix( UpcastDispatcher, EmitterMixin );\n\n// Traverses given model item and searches elements which marks marker range. Found element is removed from\n// DocumentFragment but path of this element is stored in a Map which is then returned.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/node~Node} modelItem Fragment of model.\n// @returns {Map<String, module:engine/model/range~Range>} List of static markers.\nfunction extractMarkersFromModelFragment( modelItem, writer ) {\n\tconst markerElements = new Set();\n\tconst markers = new Map();\n\n\t// Create ModelTreeWalker.\n\tconst range = ModelRange._createIn( modelItem ).getItems();\n\n\t// Walk through DocumentFragment and collect marker elements.\n\tfor ( const item of range ) {\n\t\t// Check if current element is a marker.\n\t\tif ( item.name == '$marker' ) {\n\t\t\tmarkerElements.add( item );\n\t\t}\n\t}\n\n\t// Walk through collected marker elements store its path and remove its from the DocumentFragment.\n\tfor ( const markerElement of markerElements ) {\n\t\tconst markerName = markerElement.getAttribute( 'data-name' );\n\t\tconst currentPosition = writer.createPositionBefore( markerElement );\n\n\t\t// When marker of given name is not stored it means that we have found the beginning of the range.\n\t\tif ( !markers.has( markerName ) ) {\n\t\t\tmarkers.set( markerName, new ModelRange( currentPosition.clone() ) );\n\t\t// Otherwise is means that we have found end of the marker range.\n\t\t} else {\n\t\t\tmarkers.get( markerName ).end = currentPosition.clone();\n\t\t}\n\n\t\t// Remove marker element from DocumentFragment.\n\t\twriter.remove( markerElement );\n\t}\n\n\treturn markers;\n}\n\n// Creates model fragment according to given context and returns position in the bottom (the deepest) element.\nfunction createContextTree( contextDefinition, writer ) {\n\tlet position;\n\n\tfor ( const item of new SchemaContext( contextDefinition ) ) {\n\t\tconst attributes = {};\n\n\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\tattributes[ key ] = item.getAttribute( key );\n\t\t}\n\n\t\tconst current = writer.createElement( item.name, attributes );\n\n\t\tif ( position ) {\n\t\t\twriter.append( current, position );\n\t\t}\n\n\t\tposition = ModelPosition._createAt( current, 0 );\n\t}\n\n\treturn position;\n}\n\n/**\n * Conversion interface that is registered for given {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n * and is passed as one of parameters when {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher dispatcher}\n * fires it's events.\n *\n * @interface module:engine/conversion/upcastdispatcher~UpcastConversionApi\n */\n\n/**\n * Starts conversion of given item by firing an appropriate event.\n *\n * Every fired event is passed (as first parameter) an object with `modelRange` property. Every event may set and/or\n * modify that property. When all callbacks are done, the final value of `modelRange` property is returned by this method.\n * The `modelRange` must be {@link module:engine/model/range~Range model range} or `null` (as set by default).\n *\n * @method #convertItem\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Item to convert.\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\n * @returns {Object} result Conversion result.\n * @returns {module:engine/model/range~Range|null} result.modelRange Model range containing result of item conversion,\n * created and modified by callbacks attached to fired event, or `null` if the conversion result was incorrect.\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\n */\n\n/**\n * Starts conversion of all children of given item by firing appropriate events for all those children.\n *\n * @method #convertChildren\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Element which children should be converted.\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\n * @returns {Object} result Conversion result.\n * @returns {module:engine/model/range~Range} result.modelRange Model range containing results of conversion of all children of given item.\n * When no children was converted then range is collapsed.\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\n */\n\n/**\n * Checks {@link module:engine/model/schema~Schema schema} to find allowed parent for element that we are going to insert\n * starting from given position. If current parent does not allow to insert element but one of the ancestors does then\n * split nodes to allowed parent.\n *\n * If schema allows to insert node in given position, nothing is split and object with that position is returned.\n *\n * If it was not possible to find allowed parent, `null` is returned, nothing is split.\n *\n * Otherwise, ancestors are split and object with position and the copy of the split element is returned.\n *\n * For instance, if `<image>` is not allowed in `<paragraph>` but is allowed in `$root`:\n *\n *\t\t<paragraph>foo[]bar</paragraph>\n *\n *  \t-> split for `<image>` ->\n *\n *  \t<paragraph>foo</paragraph>[]<paragraph>bar</paragraph>\n *\n * In the sample above position between `<paragraph>` elements will be returned as `position` and the second `paragraph`\n * as `cursorParent`.\n *\n * @method #splitToAllowedParent\n * @param {module:engine/model/position~Position} position Position on which element is going to be inserted.\n * @param {module:engine/model/node~Node} node Node to insert.\n * @returns {Object|null} Split result. If it was not possible to find allowed position `null` is returned.\n * @returns {module:engine/model/position~Position} position between split elements.\n * @returns {module:engine/model/element~Element} [cursorParent] Element inside which cursor should be placed to\n * continue conversion. When element is not defined it means that there was no split.\n */\n\n/**\n * Returns all the split parts of given `element` that were created during upcasting through using {@link #splitToAllowedParent}.\n * It enables you to easily track those elements and continue processing them after they are split during their children conversion.\n *\n *\t\t<paragraph>Foo<image />bar<image />baz</paragraph> ->\n *\t\t<paragraph>Foo</paragraph><image /><paragraph>bar</paragraph><image /><paragraph>baz</paragraph>\n *\n * For a reference to any of above paragraphs, the function will return all three paragraphs (the original element included),\n * sorted in the order of their creation (the original element is the first one).\n *\n * If given `element` was not split, an array with single element is returned.\n *\n * Example of a usage in a converter code:\n *\n *\t\tconst myElement = conversionApi.writer.createElement( 'myElement' );\n *\n *\t\t// Children conversion may split `myElement`.\n *\t\tconversionApi.convertChildren( myElement, modelCursor );\n *\n *\t\tconst splitParts = conversionApi.getSplitParts( myElement );\n *\t\tconst lastSplitPart = splitParts[ splitParts.length - 1 ];\n *\n *\t\t// Setting `data.modelRange` basing on split parts:\n *\t\tdata.modelRange = conversionApi.writer.createRange(\n *\t\t\tconversionApi.writer.createPositionBefore( myElement ),\n *\t\t\tconversionApi.writer.createPositionAfter( lastSplitPart )\n *\t\t);\n *\n *\t\t// Setting `data.modelCursor` to continue after the last split element:\n *\t\tdata.modelCursor = conversionApi.writer.createPositionAfter( lastSplitPart );\n *\n * **Tip:** if you are unable to get a reference to the original element (for example because the code is split into multiple converters\n * or even classes) but it was already converted, you might want to check first element in `data.modelRange`. This is a common situation\n * if an attribute converter is separated from an element converter.\n *\n * @method #getSplitParts\n * @param {module:engine/model/element~Element} element\n * @returns {Array.<module:engine/model/element~Element>}\n */\n\n/**\n * Stores information about what parts of processed view item are still waiting to be handled. After a piece of view item\n * was converted, appropriate consumable value should be {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consumed}.\n *\n * @member {module:engine/conversion/viewconsumable~ViewConsumable} #consumable\n */\n\n/**\n * Custom data stored by converters for conversion process. Custom properties of this object can be defined and use to\n * pass parameters between converters.\n *\n * The difference between this property and `data` parameter of\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element} is that `data` parameters allows you\n * to pass parameters within a single event and `store` within the whole conversion.\n *\n * @member {Object} #store\n */\n\n/**\n * The model's schema instance.\n *\n * @member {module:engine/model/schema~Schema} #schema\n */\n\n/**\n * The {@link module:engine/model/writer~Writer} instance used to manipulate data during conversion.\n *\n * @member {module:engine/model/writer~Writer} #writer\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/controller/datacontroller\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nimport Mapper from '../conversion/mapper';\n\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { insertText } from '../conversion/downcasthelpers';\n\nimport UpcastDispatcher from '../conversion/upcastdispatcher';\nimport { convertText, convertToModelFragment } from '../conversion/upcasthelpers';\n\nimport ViewDocumentFragment from '../view/documentfragment';\nimport ViewDocument from '../view/document';\nimport ViewDowncastWriter from '../view/downcastwriter';\n\nimport ModelRange from '../model/range';\n\n/**\n * Controller for the data pipeline. The data pipeline controls how data is retrieved from the document\n * and set inside it. Hence, the controller features two methods which allow to {@link ~DataController#get get}\n * and {@link ~DataController#set set} data of the {@link ~DataController#model model}\n * using given:\n *\n * * {@link module:engine/dataprocessor/dataprocessor~DataProcessor data processor},\n * * downcast converters,\n * * upcast converters.\n *\n * An instance of the data controller is always available in the {@link module:core/editor/editor~Editor#data `editor.data`}\n * property:\n *\n *\t\teditor.data.get( { rootName: 'customRoot' } ); // -> '<p>Hello!</p>'\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class DataController {\n\t/**\n\t * Creates a data controller instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Data model.\n\t * @param {module:engine/dataprocessor/dataprocessor~DataProcessor} [dataProcessor] Data processor that should be used\n\t * by the controller.\n\t */\n\tconstructor( model, dataProcessor ) {\n\t\t/**\n\t\t * Data model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Data processor used during the conversion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/dataprocessor/dataprocessor~DataProcessor}\n\t\t */\n\t\tthis.processor = dataProcessor;\n\n\t\t/**\n\t\t * Mapper used for the conversion. It has no permanent bindings, because they are created when getting data and\n\t\t * cleared directly after the data are converted. However, the mapper is defined as a class property, because\n\t\t * it needs to be passed to the `DowncastDispatcher` as a conversion API.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/mapper~Mapper}\n\t\t */\n\t\tthis.mapper = new Mapper();\n\n\t\t/**\n\t\t * Downcast dispatcher used by the {@link #get get method}. Downcast converters should be attached to it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n\t\t */\n\t\tthis.downcastDispatcher = new DowncastDispatcher( {\n\t\t\tmapper: this.mapper\n\t\t} );\n\t\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\n\n\t\t/**\n\t\t * Upcast dispatcher used by the {@link #set set method}. Upcast converters should be attached to it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n\t\t */\n\t\tthis.upcastDispatcher = new UpcastDispatcher( {\n\t\t\tschema: model.schema\n\t\t} );\n\n\t\t// Define default converters for text and elements.\n\t\t//\n\t\t// Note that if there is no default converter for the element it will be skipped, for instance `<b>foo</b>` will be\n\t\t// converted to nothing. We add `convertToModelFragment` as a last converter so it converts children of that\n\t\t// element to the document fragment so `<b>foo</b>` will be converted to `foo` if there is no converter for `<b>`.\n\t\tthis.upcastDispatcher.on( 'text', convertText(), { priority: 'lowest' } );\n\t\tthis.upcastDispatcher.on( 'element', convertToModelFragment(), { priority: 'lowest' } );\n\t\tthis.upcastDispatcher.on( 'documentFragment', convertToModelFragment(), { priority: 'lowest' } );\n\n\t\tthis.decorate( 'init' );\n\n\t\t// Fire `ready` event when initialisation has completed. Such low level listener gives possibility\n\t\t// to plug into initialisation pipeline without interrupting the initialisation flow.\n\t\tthis.on( 'init', () => {\n\t\t\tthis.fire( 'ready' );\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Returns the model's data converted by downcast dispatchers attached to {@link #downcastDispatcher} and\n\t * formatted by the {@link #processor data processor}.\n\t *\n\t * @param {Object} [options]\n\t * @param {String} [options.rootName='main'] Root name.\n\t * @param {String} [options.trim='empty'] Whether returned data should be trimmed. This option is set to `empty` by default,\n\t * which means whenever editor content is considered empty, an empty string will be returned. To turn off trimming completely\n\t * use `'none'`. In such cases exact content will be returned (for example `<p>&nbsp;</p>` for an empty editor).\n\t * @returns {String} Output data.\n\t */\n\tget( options ) {\n\t\tconst { rootName = 'main', trim = 'empty' } = options || {};\n\n\t\tif ( !this._checkIfRootsExists( [ rootName ] ) ) {\n\t\t\t/**\n\t\t\t * Cannot get data from a non-existing root. This error is thrown when {@link #get DataController#get() method}\n\t\t\t * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n\t\t\t * calling {@link #get} like:\n\t\t\t *\n\t\t\t *\t\tdata.get( { rootName: 'root2' } );\n\t\t\t *\n\t\t\t * will throw this error.\n\t\t\t *\n\t\t\t * @error datacontroller-get-non-existent-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-get-non-existent-root: Attempting to get data from a non-existing root.', this );\n\t\t}\n\n\t\tconst root = this.model.document.getRoot( rootName );\n\n\t\tif ( trim === 'empty' && !this.model.hasContent( root, { ignoreWhitespaces: true } ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn this.stringify( root );\n\t}\n\n\t/**\n\t * Returns the content of the given {@link module:engine/model/element~Element model's element} or\n\t * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast converters\n\t * attached to {@link #downcastDispatcher} and formatted by the {@link #processor data processor}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\n\t * Element whose content will be stringified.\n\t * @returns {String} Output data.\n\t */\n\tstringify( modelElementOrFragment ) {\n\t\t// Model -> view.\n\t\tconst viewDocumentFragment = this.toView( modelElementOrFragment );\n\n\t\t// View -> data.\n\t\treturn this.processor.toData( viewDocumentFragment );\n\t}\n\n\t/**\n\t * Returns the content of the given {@link module:engine/model/element~Element model element} or\n\t * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast\n\t * converters attached to {@link #downcastDispatcher} to a\n\t * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\n\t * Element or document fragment whose content will be converted.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} Output view DocumentFragment.\n\t */\n\ttoView( modelElementOrFragment ) {\n\t\t// Clear bindings so the call to this method gives correct results.\n\t\tthis.mapper.clearBindings();\n\n\t\t// First, convert elements.\n\t\tconst modelRange = ModelRange._createIn( modelElementOrFragment );\n\n\t\tconst viewDocumentFragment = new ViewDocumentFragment();\n\n\t\t// Create separate ViewDowncastWriter just for data conversion purposes.\n\t\t// We have no view controller and rendering do DOM in DataController so view.change() block is not used here.\n\t\tconst viewWriter = new ViewDowncastWriter( new ViewDocument() );\n\t\tthis.mapper.bindElements( modelElementOrFragment, viewDocumentFragment );\n\n\t\tthis.downcastDispatcher.convertInsert( modelRange, viewWriter );\n\n\t\tif ( !modelElementOrFragment.is( 'documentFragment' ) ) {\n\t\t\t// Then, if a document element is converted, convert markers.\n\t\t\t// From all document markers, get those, which \"intersect\" with the converter element.\n\t\t\tconst markers = _getMarkersRelativeToElement( modelElementOrFragment );\n\n\t\t\tfor ( const [ name, range ] of markers ) {\n\t\t\t\tthis.downcastDispatcher.convertMarkerAdd( name, range, viewWriter );\n\t\t\t}\n\t\t}\n\n\t\treturn viewDocumentFragment;\n\t}\n\n\t/**\n\t * Sets initial input data parsed by the {@link #processor data processor} and\n\t * converted by the {@link #upcastDispatcher view-to-model converters}.\n\t * Initial data can be set only to document that {@link module:engine/model/document~Document#version} is equal 0.\n\t *\n\t * **Note** This method is {@link module:utils/observablemixin~ObservableMixin#decorate decorated} which is\n\t * used by e.g. collaborative editing plugin that syncs remote data on init.\n\t *\n\t * When data is passed as a string it is initialized on a default `main` root:\n\t *\n\t *\t\tdataController.init( '<p>Foo</p>' ); // Initializes data on the `main` root.\n\t *\n\t * To initialize data on a different root or multiple roots at once, object containing `rootName` - `data` pairs should be passed:\n\t *\n\t *\t\tdataController.init( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Initializes data on the `main` and `title` roots.\n\t *\n\t * @fires init\n\t * @param {String|Object.<String,String>} data Input data as a string or an object containing `rootName` - `data`\n\t * pairs to initialize data on multiple roots at once.\n\t * @returns {Promise} Promise that is resolved after the data is set on the editor.\n\t */\n\tinit( data ) {\n\t\tif ( this.model.document.version ) {\n\t\t\t/**\n\t\t\t * Cannot set initial data to not empty {@link module:engine/model/document~Document}.\n\t\t\t * Initial data should be set once, during {@link module:core/editor/editor~Editor} initialization,\n\t\t\t * when the {@link module:engine/model/document~Document#version} is equal 0.\n\t\t\t *\n\t\t\t * @error datacontroller-init-document-not-empty\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-init-document-not-empty: Trying to set initial data to not empty document.', this );\n\t\t}\n\n\t\tlet initialData = {};\n\t\tif ( typeof data === 'string' ) {\n\t\t\tinitialData.main = data; // Default root is 'main'. To initiate data on a different root, object should be passed.\n\t\t} else {\n\t\t\tinitialData = data;\n\t\t}\n\n\t\tif ( !this._checkIfRootsExists( Object.keys( initialData ) ) ) {\n\t\t\t/**\n\t\t\t * Cannot init data on a non-existing root. This error is thrown when {@link #init DataController#init() method}\n\t\t\t * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n\t\t\t * calling {@link #init} like:\n\t\t\t *\n\t\t\t * \t\tdata.init( { main: '<p>Foo</p>', root2: '<p>Bar</p>' } );\n\t\t\t *\n\t\t\t * will throw this error.\n\t\t\t *\n\t\t\t * @error datacontroller-init-non-existent-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-init-non-existent-root: Attempting to init data on a non-existing root.', this );\n\t\t}\n\n\t\tthis.model.enqueueChange( 'transparent', writer => {\n\t\t\tfor ( const rootName of Object.keys( initialData ) ) {\n\t\t\t\tconst modelRoot = this.model.document.getRoot( rootName );\n\t\t\t\twriter.insert( this.parse( initialData[ rootName ], modelRoot ), modelRoot, 0 );\n\t\t\t}\n\t\t} );\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Sets input data parsed by the {@link #processor data processor} and\n\t * converted by the {@link #upcastDispatcher view-to-model converters}.\n\t * This method can be used any time to replace existing editor data by the new one without clearing the\n\t * {@link module:engine/model/document~Document#history document history}.\n\t *\n\t * This method also creates a batch with all the changes applied. If all you need is to parse data, use\n\t * the {@link #parse} method.\n\t *\n\t * When data is passed as a string it is set on a default `main` root:\n\t *\n\t *\t\tdataController.set( '<p>Foo</p>' ); // Sets data on the `main` root.\n\t *\n\t * To set data on a different root or multiple roots at once, object containing `rootName` - `data` pairs should be passed:\n\t *\n\t *\t\tdataController.set( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Sets data on the `main` and `title` roots.\n\t *\n\t * @param {String|Object.<String,String>} data Input data as a string or an object containing `rootName` - `data`\n\t * pairs to set data on multiple roots at once.\n\t */\n\tset( data ) {\n\t\tlet newData = {};\n\n\t\tif ( typeof data === 'string' ) {\n\t\t\tnewData.main = data; // Default root is 'main'. To set data on a different root, object should be passed.\n\t\t} else {\n\t\t\tnewData = data;\n\t\t}\n\n\t\tif ( !this._checkIfRootsExists( Object.keys( newData ) ) ) {\n\t\t\t/**\n\t\t\t * Cannot set data on a non-existing root. This error is thrown when {@link #set DataController#set() method}\n\t\t\t * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n\t\t\t * calling {@link #set} like:\n\t\t\t *\n\t\t\t * \t\tdata.set( { main: '<p>Foo</p>', root2: '<p>Bar</p>' } );\n\t\t\t *\n\t\t\t * will throw this error.\n\t\t\t *\n\t\t\t * @error datacontroller-set-non-existent-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-set-non-existent-root: Attempting to set data on a non-existing root.', this );\n\t\t}\n\n\t\tthis.model.enqueueChange( 'transparent', writer => {\n\t\t\twriter.setSelection( null );\n\t\t\twriter.removeSelectionAttribute( this.model.document.selection.getAttributeKeys() );\n\n\t\t\tfor ( const rootName of Object.keys( newData ) ) {\n\t\t\t\t// Save to model.\n\t\t\t\tconst modelRoot = this.model.document.getRoot( rootName );\n\n\t\t\t\twriter.remove( writer.createRangeIn( modelRoot ) );\n\t\t\t\twriter.insert( this.parse( newData[ rootName ], modelRoot ), modelRoot, 0 );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the data parsed by the {@link #processor data processor} and then converted by upcast converters\n\t * attached to the {@link #upcastDispatcher}.\n\t *\n\t * @see #set\n\t * @param {String} data Data to parse.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\n\t * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Parsed data.\n\t */\n\tparse( data, context = '$root' ) {\n\t\t// data -> view\n\t\tconst viewDocumentFragment = this.processor.toView( data );\n\n\t\t// view -> model\n\t\treturn this.toModel( viewDocumentFragment, context );\n\t}\n\n\t/**\n\t * Returns the result of the given {@link module:engine/view/element~Element view element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment view document fragment} converted by the\n\t * {@link #upcastDispatcher view-to-model converters}, wrapped by {@link module:engine/model/documentfragment~DocumentFragment}.\n\t *\n\t * When marker elements were converted during the conversion process, it will be set as a document fragment's\n\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElementOrFragment\n\t * Element or document fragment whose content will be converted.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\n\t * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Output document fragment.\n\t */\n\ttoModel( viewElementOrFragment, context = '$root' ) {\n\t\treturn this.model.change( writer => {\n\t\t\treturn this.upcastDispatcher.convert( viewElementOrFragment, writer, context );\n\t\t} );\n\t}\n\n\t/**\n\t * Removes all event listeners set by the DataController.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Checks if all provided root names are existing editor roots.\n\t *\n\t * @private\n\t * @param {Array.<String>} rootNames Root names to check.\n\t * @returns {Boolean} Whether all provided root names are existing editor roots.\n\t */\n\t_checkIfRootsExists( rootNames ) {\n\t\tfor ( const rootName of rootNames ) {\n\t\t\tif ( !this.model.document.getRootNames().includes( rootName ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Event fired once data initialisation has finished.\n\t *\n\t * @event ready\n\t */\n\n\t/**\n\t * Event fired after {@link #init init() method} has been run. It can be {@link #listenTo listened to} to adjust/modify\n\t * the initialisation flow. However, if the `init` event is stopped or prevented, the {@link #event:ready ready event}\n\t * should be fired manually.\n\t *\n\t * The `init` event is fired by decorated {@link #init} method.\n\t * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n\t *\n\t * @event init\n\t */\n}\n\nmix( DataController, ObservableMixin );\n\n// Helper function for downcast conversion.\n//\n// Takes a document element (element that is added to a model document) and checks which markers are inside it\n// and which markers are containing it. If the marker is intersecting with element, the intersection is returned.\nfunction _getMarkersRelativeToElement( element ) {\n\tconst result = [];\n\tconst doc = element.root.document;\n\n\tif ( !doc ) {\n\t\treturn [];\n\t}\n\n\tconst elementRange = ModelRange._createIn( element );\n\n\tfor ( const marker of doc.model.markers ) {\n\t\tconst intersection = elementRange.getIntersection( marker.getRange() );\n\n\t\tif ( intersection ) {\n\t\t\tresult.push( [ marker.name, intersection ] );\n\t\t}\n\t}\n\n\treturn result;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/conversion\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport UpcastHelpers from './upcasthelpers';\nimport DowncastHelpers from './downcasthelpers';\n\n/**\n * A utility class that helps add converters to upcast and downcast dispatchers.\n *\n * We recommend reading the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide first to\n * understand the core concepts of the conversion mechanisms.\n *\n * An instance of the conversion manager is available in the\n * {@link module:core/editor/editor~Editor#conversion `editor.conversion`} property\n * and by default has the following groups of dispatchers (i.e. directions of conversion):\n *\n * * `downcast` (editing and data downcasts)\n * * `editingDowncast`\n * * `dataDowncast`\n * * `upcast`\n *\n * # One-way converters\n *\n * To add a converter to a specific group, use the {@link module:engine/conversion/conversion~Conversion#for `for()`}\n * method:\n *\n *\t\t// Add a converter to editing downcast and data downcast.\n *\t\teditor.conversion.for( 'downcast' ).elementToElement( config ) );\n *\n *\t\t// Add a converter to the data pipepline only:\n *\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( dataConversionConfig ) );\n *\n *\t\t// And a slightly different one for the editing pipeline:\n *\t\teditor.conversion.for( 'editingDowncast' ).elementToElement( editingConversionConfig ) );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for `for()`} method documentation to learn more about\n * available conversion helpers and how to use your custom ones.\n *\n * # Two-way converters\n *\n * Besides using one-way converters via the `for()` method, you can also use other methods available in this\n * class to add two-way converters (upcast and downcast):\n *\n * * {@link module:engine/conversion/conversion~Conversion#elementToElement `elementToElement()`} &ndash;\n * Model element to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement()`} &ndash;\n * Model attribute to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `attributeToAttribute()`} &ndash;\n * Model attribute to view element and vice versa.\n */\nexport default class Conversion {\n\t/**\n\t * Creates a new conversion instance.\n\t *\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher>} downcastDispatchers\n\t * @param {module:engine/conversion/upcastdispatcher~UpcastDispatcher|\n\t * Array.<module:engine/conversion/upcastdispatcher~UpcastDispatcher>} upcastDispatchers\n\t */\n\tconstructor( downcastDispatchers, upcastDispatchers ) {\n\t\t/**\n\t\t * Maps dispatchers group name to ConversionHelpers instances.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<String,module:engine/conversion/conversionhelpers~ConversionHelpers>}\n\t\t */\n\t\tthis._helpers = new Map();\n\n\t\t// Define default 'downcast' & 'upcast' dispatchers groups. Those groups are always available as two-way converters needs them.\n\t\tthis._downcast = Array.isArray( downcastDispatchers ) ? downcastDispatchers : [ downcastDispatchers ];\n\t\tthis._createConversionHelpers( { name: 'downcast', dispatchers: this._downcast, isDowncast: true } );\n\n\t\tthis._upcast = Array.isArray( upcastDispatchers ) ? upcastDispatchers : [ upcastDispatchers ];\n\t\tthis._createConversionHelpers( { name: 'upcast', dispatchers: this._upcast, isDowncast: false } );\n\t}\n\n\t/**\n\t * Define an alias for registered dispatcher.\n\t *\n\t *\t\tconst conversion = new Conversion(\n\t *\t\t\t[ dataDowncastDispatcher, editingDowncastDispatcher ],\n\t *\t\t\tupcastDispatcher\n\t *\t\t);\n\t *\n\t *\t\tconversion.addAlias( 'dataDowncast', dataDowncastDispatcher );\n\t *\n\t * @param {String} alias An alias of a dispatcher.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher} dispatcher Dispatcher which should have an alias.\n\t */\n\taddAlias( alias, dispatcher ) {\n\t\tconst isDowncast = this._downcast.includes( dispatcher );\n\t\tconst isUpcast = this._upcast.includes( dispatcher );\n\n\t\tif ( !isUpcast && !isDowncast ) {\n\t\t\t/**\n\t\t\t * Trying to register and alias for a dispatcher that nas not been registered.\n\t\t\t *\n\t\t\t * @error conversion-add-alias-dispatcher-not-registered\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'conversion-add-alias-dispatcher-not-registered: ' +\n\t\t\t\t'Trying to register and alias for a dispatcher that nas not been registered.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tthis._createConversionHelpers( { name: alias, dispatchers: [ dispatcher ], isDowncast } );\n\t}\n\n\t/**\n\t * Provides a chainable API to assign converters to conversion dispatchers group.\n\t *\n\t * If the given group name has not been registered, the\n\t * {@link module:utils/ckeditorerror~CKEditorError `conversion-for-unknown-group` error} is thrown.\n\t *\n\t * You can use conversion helpers available directly in the `for()` chain or your custom ones via\n\t * the {@link module:engine/conversion/conversionhelpers~ConversionHelpers#add `add()`} method.\n\t *\n\t * # Using bulit-in conversion helpers\n\t *\n\t * The `for()` chain comes with a set of conversion helpers which you can use like this:\n\t *\n\t *\t\teditor.conversion.for( 'downcast' )\n\t *\t\t\t.elementToElement( config1 )        // Adds an element-to-element downcast converter.\n\t *\t\t\t.attributeToElement( config2 );     // Adds an attribute-to-element downcast converter.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' )\n\t *\t\t\t.elementToAttribute( config3 );     // Adds an element-to-attribute upcast converter.\n\t *\n\t * Refer to the documentation of built-in conversion helpers to learn about their configuration options.\n\t *\n\t * * downcast (model-to-view) conversion helpers:\n\t *\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`},\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement `attributeToElement()`},\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToAttribute `attributeToAttribute()`}.\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToElement `markerToElement()`}.\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToHighlight `markerToHighlight()`}.\n\t *\n\t * * upcast (view-to-model) conversion helpers:\n\t *\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToElement `elementToElement()`},\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute `elementToAttribute()`},\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute `attributeToAttribute()`}.\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToMarker `elementToMarker()`}.\n\t *\n\t * # Using custom conversion helpers\n\t *\n\t * If you need to implement a nontypical converter, you can do so by calling:\n\t *\n\t *\t\teditor.conversion.for( direction ).add( customHelper );\n\t *\n\t * The `.add()` method takes exactly one parameter, which is a function. This function should accept one parameter that\n\t * is a dispatcher instance. The function should add an actual converter to the passed dispatcher instance.\n\t *\n\t * Example:\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).add( dispatcher => {\n\t *\t\t\tdispatcher.on( 'element:a',  ( evt, data, conversionApi ) => {\n\t *\t\t\t\t// Do something with a view <a> element.\n\t *\t\t\t} );\n\t *\t\t} );\n\t *\n\t * Refer to the documentation of {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n\t * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} to learn how to write\n\t * custom converters.\n\t *\n\t * @param {String} groupName The name of dispatchers group to add the converters to.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers|module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\tfor( groupName ) {\n\t\tif ( !this._helpers.has( groupName ) ) {\n\t\t\t/**\n\t\t\t * Trying to add a converter to an unknown dispatchers group.\n\t\t\t *\n\t\t\t * @error conversion-for-unknown-group\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'conversion-for-unknown-group: Trying to add a converter to an unknown dispatchers group.', this );\n\t\t}\n\n\t\treturn this._helpers.get( groupName );\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model element to a view element (and vice versa).\n\t * For example, the model `<paragraph>Foo</paragraph>` is `<p>Foo</p>` in the view.\n\t *\n\t *\t\t// A simple conversion from the `paragraph` model element to the `<p>` view element (and vice versa).\n\t *\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\t *\n\t *\t\t// Override other converters by specifying a converter definition with a higher priority.\n\t *\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'div', converterPriority: 'high' } );\n\t *\n\t *\t\t// View specified as an object instead of a string.\n\t *\t\teditor.conversion.elementToElement( {\n\t *\t\t\tmodel: 'fancyParagraph',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'fancy'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to a `paragraph` element.\n\t *\t\teditor.conversion.elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'p',\n\t *\t\t\tupcastAlso: [\n\t *\t\t\t\t'div',\n\t *\t\t\t\t{\n\t *\t\t\t\t\t// Any element with the `display: block` style.\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\tdisplay: 'block'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n\t *\t\teditor.conversion.elementToElement( {\n\t *\t\t\tmodel: 'heading',\n\t *\t\t\tview: 'h2',\n\t *\t\t\t// Convert \"headling-like\" paragraphs to headings.\n\t *\t\t\tupcastAlso: viewElement => {\n\t *\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\tif ( size > 26 ) {\n\t *\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * `definition.model` is a `String` with a model element name to convert from or to.\n\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n\t *\n\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n\t */\n\telementToElement( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).elementToElement( definition );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' )\n\t\t\t\t.elementToElement( {\n\t\t\t\t\tmodel,\n\t\t\t\t\tview,\n\t\t\t\t\tconverterPriority: definition.converterPriority\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model attribute to a view element (and vice versa).\n\t * For example, a model text node with `\"Foo\"` as data and the `bold` attribute is `<strong>Foo</strong>` in the view.\n\t *\n\t *\t\t// A simple conversion from the `bold=true` attribute to the `<strong>` view element (and vice versa).\n\t *\t\teditor.conversion.attributeToElement( { model: 'bold', view: 'strong' } );\n\t *\n\t *\t\t// Override other converters by specifying a converter definition with a higher priority.\n\t *\t\teditor.conversion.attributeToElement( { model: 'bold', view: 'b', converterPriority: 'high' } );\n\t *\n\t *\t\t// View specified as an object instead of a string.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: 'bold'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `config.model.name` to define the conversion only from a given node type, `$text` in this case.\n\t *\t\t// The same attribute on different elements may then be handled by a different converter.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'textDecoration',\n\t *\t\t\t\tvalues: [ 'underline', 'lineThrough' ],\n\t *\t\t\t\tname: '$text'\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tunderline: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-decoration': 'underline'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tlineThrough: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-decoration': 'line-through'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `bold` attribute.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'strong',\n\t *\t\t\tupcastAlso: [\n\t *\t\t\t\t'b',\n\t *\t\t\t\t{\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tclasses: 'bold'\n\t *\t\t\t\t},\n\t *\t\t\t\t{\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-weight': 'bold'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tviewElement => {\n\t *\t\t\t\t\tconst fontWeight = viewElement.getStyle( 'font-weight' );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && fontWeight && /\\d+/.test() && Number( fontWeight ) > 500 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn {\n\t *\t\t\t\t\t\t\tname: true,\n\t *\t\t\t\t\t\t\tstyles: [ 'font-weight' ]\n\t *\t\t\t\t\t\t};\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Conversion from and to a model attribute key whose value is an enum (`fontSize=big|small`).\n\t *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalues: [ 'big', 'small' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tbig: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '1.2em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '0.8em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tupcastAlso: {\n\t *\t\t\t\tbig: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && size > 10 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && size < 10 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * The `definition.model` parameter specifies which model attribute should be converted from or to. It can be a `{ key, value }` object\n\t * describing the attribute key and value to convert or a `String` specifying just the attribute key (then `value` is set to `true`).\n\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n\t *\n\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n\t */\n\tattributeToElement( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).attributeToElement( definition );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' )\n\t\t\t\t.elementToAttribute( {\n\t\t\t\t\tview,\n\t\t\t\t\tmodel,\n\t\t\t\t\tconverterPriority: definition.converterPriority\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model attribute to a view attribute (and vice versa).\n\t * For example, `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>` (the same attribute key and value).\n\t * This type of converters is intended to be used with {@link module:engine/model/element~Element model element} nodes.\n\t * To convert text attributes {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement converter`}\n\t * should be set up.\n\t *\n\t *\t\t// A simple conversion from the `source` model attribute to the `src` view attribute (and vice versa).\n\t *\t\teditor.conversion.attributeToAttribute( { model: 'source', view: 'src' } );\n\t *\n\t *\t\t// Attribute values are strictly specified.\n\t *\t\teditor.conversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'aside',\n\t *\t\t\t\tvalues: [ 'aside' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\taside: {\n\t *\t\t\t\t\tname: 'img',\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'aside', 'half-size' ]\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Set the style attribute.\n\t *\t\teditor.conversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'aside',\n\t *\t\t\t\tvalues: [ 'aside' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\taside: {\n\t *\t\t\t\t\tname: 'img',\n\t *\t\t\t\t\tkey: 'style',\n\t *\t\t\t\t\tvalue: {\n\t *\t\t\t\t\t\tfloat: 'right',\n\t *\t\t\t\t\t\twidth: '50%',\n\t *\t\t\t\t\t\tmargin: '5px'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Conversion from and to a model attribute key whose value is an enum (`align=right|center`).\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `align=right` attribute.\n\t *\t\teditor.conversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'align',\n\t *\t\t\t\tvalues: [ 'right', 'center' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tright: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: 'align-right'\n\t *\t\t\t\t},\n\t *\t\t\t\tcenter: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: 'align-center'\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tupcastAlso: {\n\t *\t\t\t\tright: {\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-align': 'right'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tcenter: {\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-align': 'center'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * The `definition.model` parameter specifies which model attribute should be converted from and to.\n\t * It can be a `{ key, [ values ], [ name ] }` object or a `String`, which will be treated like `{ key: definition.model }`.\n\t * The `key` property is the model attribute key to convert from and to.\n\t * The `values` are the possible model attribute values. If `values` is not set, the model attribute value will be the same as the\n\t * view attribute value.\n\t * If `name` is set, the conversion will be set up only for model elements with the given name.\n\t *\n\t * The `definition.view` parameter specifies which view attribute should be converted from and to.\n\t * It can be a `{ key, value, [ name ] }` object or a `String`, which will be treated like `{ key: definition.view }`.\n\t * The `key` property is the view attribute key to convert from and to.\n\t * The `value` is the view attribute value to convert from and to. If `definition.value` is not set, the view attribute value will be\n\t * the same as the model attribute value.\n\t * If `key` is `'class'`, `value` can be a `String` or an array of `String`s.\n\t * If `key` is `'style'`, `value` is an object with key-value pairs.\n\t * In other cases, `value` is a `String`.\n\t * If `name` is set, the conversion will be set up only for model elements with the given name.\n\t * If `definition.model.values` is set, `definition.view` is an object that assigns values from `definition.model.values`\n\t * to `{ key, value, [ name ] }` objects.\n\t *\n\t * `definition.upcastAlso` specifies which other matching view elements should also be upcast to the given model configuration.\n\t * If `definition.model.values` is set, `definition.upcastAlso` should be an object assigning values from `definition.model.values`\n\t * to {@link module:engine/view/matcher~MatcherPattern}s or arrays of {@link module:engine/view/matcher~MatcherPattern}s.\n\t *\n\t * **Note:** `definition.model` and `definition.view` form should be mirrored, so the same types of parameters should\n\t * be given in both parameters.\n\t *\n\t * @param {Object} definition The converter definition.\n\t * @param {String|Object} definition.model The model attribute to convert from and to.\n\t * @param {String|Object} definition.view The view attribute to convert from and to.\n\t * @param {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [definition.upcastAlso]\n\t * Any view element matching `definition.upcastAlso` will also be converted to the given model attribute. `definition.upcastAlso`\n\t * is used only if `config.model.values` is specified.\n\t */\n\tattributeToAttribute( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).attributeToAttribute( definition );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' )\n\t\t\t\t.attributeToAttribute( {\n\t\t\t\t\tview,\n\t\t\t\t\tmodel\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Creates and caches conversion helpers for given dispatchers group.\n\t *\n\t * @private\n\t * @param {Object} options\n\t * @param {String} options.name Group name.\n\t * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} options.dispatchers\n\t * @param {Boolean} options.isDowncast\n\t */\n\t_createConversionHelpers( { name, dispatchers, isDowncast } ) {\n\t\tif ( this._helpers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Trying to register a group name that has already been registered.\n\t\t\t *\n\t\t\t * @error conversion-group-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'conversion-group-exists: Trying to register a group name that has already been registered.', this );\n\t\t}\n\n\t\tconst helpers = isDowncast ? new DowncastHelpers( dispatchers ) : new UpcastHelpers( dispatchers );\n\n\t\tthis._helpers.set( name, helpers );\n\t}\n}\n\n/**\n * Defines how the model should be converted from and to the view.\n *\n * @typedef {Object} module:engine/conversion/conversion~ConverterDefinition\n *\n * @property {*} [model] The model conversion definition. Describes the model element or model attribute to convert. This parameter differs\n * for different functions that accept `ConverterDefinition`. See the description of the function to learn how to set it.\n * @property {module:engine/view/elementdefinition~ElementDefinition|Object} view The definition of the view element to convert from and\n * to. If `model` describes multiple values, `view` is an object that assigns these values (`view` object keys) to view element definitions\n * (`view` object values).\n * @property {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [upcastAlso]\n * Any view element matching `upcastAlso` will also be converted to the model. If `model` describes multiple values, `upcastAlso`\n * is an object that assigns these values (`upcastAlso` object keys) to {@link module:engine/view/matcher~MatcherPattern}s\n * (`upcastAlso` object values).\n * @property {module:utils/priorities~PriorityString} [converterPriority] The converter priority.\n */\n\n// Helper function that creates a joint array out of an item passed in `definition.view` and items passed in\n// `definition.upcastAlso`.\n//\n// @param {module:engine/conversion/conversion~ConverterDefinition} definition\n// @returns {Array} Array containing view definitions.\nfunction* _getAllUpcastDefinitions( definition ) {\n\tif ( definition.model.values ) {\n\t\tfor ( const value of definition.model.values ) {\n\t\t\tconst model = { key: definition.model.key, value };\n\t\t\tconst view = definition.view[ value ];\n\t\t\tconst upcastAlso = definition.upcastAlso ? definition.upcastAlso[ value ] : undefined;\n\n\t\t\tyield* _getUpcastDefinition( model, view, upcastAlso );\n\t\t}\n\t} else {\n\t\tyield* _getUpcastDefinition( definition.model, definition.view, definition.upcastAlso );\n\t}\n}\n\nfunction* _getUpcastDefinition( model, view, upcastAlso ) {\n\tyield { model, view };\n\n\tif ( upcastAlso ) {\n\t\tupcastAlso = Array.isArray( upcastAlso ) ? upcastAlso : [ upcastAlso ];\n\n\t\tfor ( const upcastAlsoItem of upcastAlso ) {\n\t\t\tyield { model, view: upcastAlsoItem };\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/batch\n */\n\n/**\n * A batch instance groups model changes ({@link module:engine/model/operation/operation~Operation operations}). All operations\n * grouped in a single batch can be reverted together, so you can also think about a batch as of a single undo step. If you want\n * to extend a given undo step, you can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n *\t\tmodel.enqueueChange( batch, writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\nexport default class Batch {\n\t/**\n\t * Creates a batch instance.\n\t *\n\t * @see module:engine/model/model~Model#enqueueChange\n\t * @see module:engine/model/model~Model#change\n\t * @param {'transparent'|'default'} [type='default'] The type of the batch.\n\t */\n\tconstructor( type = 'default' ) {\n\t\t/**\n\t\t * An array of operations that compose this batch.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Array.<module:engine/model/operation/operation~Operation>}\n\t\t */\n\t\tthis.operations = [];\n\n\t\t/**\n\t\t * The type of the batch.\n\t\t *\n\t\t * It can be one of the following values:\n\t\t * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n\t\t * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n\t\t * changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {'transparent'|'default'}\n\t\t */\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.\n\t * If there are no operations in the batch or neither operation has the base version set, it returns `null`.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget baseVersion() {\n\t\tfor ( const op of this.operations ) {\n\t\t\tif ( op.baseVersion !== null ) {\n\t\t\t\treturn op.baseVersion;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Adds an operation to the batch instance.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation An operation to add.\n\t * @returns {module:engine/model/operation/operation~Operation} The added operation.\n\t */\n\taddOperation( operation ) {\n\t\toperation.batch = this;\n\t\tthis.operations.push( operation );\n\n\t\treturn operation;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/detachoperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\nimport { _remove } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to permanently remove node from detached root.\n * Note this operation is only a local operation and won't be send to the other clients.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class DetachOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition\n\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n\t * `sourcePosition` with offset shifted by `howMany`.\n\t */\n\tconstructor( sourcePosition, howMany ) {\n\t\tsuper( null );\n\n\t\t/**\n\t\t * Position before the first {@link module:engine/model/item~Item model item} to detach.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} #sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\n\t\t/**\n\t\t * Offset size of moved range.\n\t\t *\n\t\t * @member {Number} #howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'detach';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = this.sourcePosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( this.sourcePosition.root.document ) {\n\t\t\t/**\n\t\t\t * Cannot detach document node.\n\t\t\t *\n\t\t\t * @error detach-operation-on-document-node\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'detach-operation-on-document-node: Cannot detach document node.', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t_remove( Range._createFromPositionAndShift( this.sourcePosition, this.howMany ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'DetachOperation';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/rootelement\n */\n\nimport Element from './element';\n\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n * @extends module:engine/model/element~Element\n */\nexport default class RootElement extends Element {\n\t/**\n\t * Creates root element.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document that is an owner of this root.\n\t * @param {String} name Node name.\n\t * @param {String} [rootName='main'] Unique root name used to identify this root\n\t * element by {@link module:engine/model/document~Document}.\n\t */\n\tconstructor( doc, name, rootName = 'main' ) {\n\t\tsuper( name );\n\n\t\t/**\n\t\t * Document that is an owner of this root.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/document~Document}\n\t\t */\n\t\tthis._doc = doc;\n\n\t\t/**\n\t\t * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.rootName = rootName;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns this root element.\n\t *\n\t * In contrary, to {@link module:engine/model/node~Node node}, root element always have a `document`.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this._doc;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\trootElement.is( 'rootElement' ); // -> true\n\t *\t\trootElement.is( 'element' ); // -> true\n\t *\t\trootElement.is( 'node' ); // -> true\n\t *\t\trootElement.is( 'model:rootElement' ); // -> true\n\t *\t\trootElement.is( 'model:element' ); // -> true\n\t *\t\trootElement.is( 'model:node' ); // -> true\n\t *\n\t *\t\trootElement.is( 'view:element' ); // -> false\n\t *\t\trootElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/model/element~Element#name name}:\n\t *\n\t *\t\trootElement.is( '$root' ); // -> true if this is a $root element\n\t *\t\trootElement.is( 'rootElement', '$root' ); // -> same as above\n\t *\t\ttext.is( '$root' ); -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name ) {\n\t\tconst cutType = type.replace( 'model:', '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'rootElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'rootElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Converts `RootElement` instance to `String` containing it's name.\n\t *\n\t * @returns {String} `RootElement` instance converted to `String`.\n\t */\n\ttoJSON() {\n\t\treturn this.rootName;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/writer\n */\n\nimport AttributeOperation from './operation/attributeoperation';\nimport DetachOperation from './operation/detachoperation';\nimport InsertOperation from './operation/insertoperation';\nimport MarkerOperation from './operation/markeroperation';\nimport MoveOperation from './operation/moveoperation';\nimport RenameOperation from './operation/renameoperation';\nimport RootAttributeOperation from './operation/rootattributeoperation';\nimport SplitOperation from './operation/splitoperation';\nimport MergeOperation from './operation/mergeoperation';\n\nimport DocumentFragment from './documentfragment';\nimport Text from './text';\nimport Element from './element';\nimport RootElement from './rootelement';\nimport Position from './position';\nimport Range from './range.js';\nimport DocumentSelection from './documentselection';\n\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The model can only be modified by using the writer. It should be used whenever you want to create a node, modify\n * child nodes, attributes or text, set the selection's position and its attributes.\n *\n * The instance of the writer is only available in the {@link module:engine/model/model~Model#change `change()`} or\n * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`}.\n *\n *\t\tmodel.change( writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * Note that the writer should never be stored and used outside of the `change()` and\n * `enqueueChange()` blocks.\n *\n * Note that writer's methods do not check the {@link module:engine/model/schema~Schema}. It is possible\n * to create incorrect model structures by using the writer. Read more about in\n * {@glink framework/guides/deep-dive/schema#who-checks-the-schema \"Who checks the schema?\"}.\n *\n * @see module:engine/model/model~Model#change\n * @see module:engine/model/model~Model#enqueueChange\n */\nexport default class Writer {\n\t/**\n\t * Creates a writer instance.\n\t *\n\t * **Note:** It is not recommended to use it directly. Use {@link module:engine/model/model~Model#change `Model#change()`} or\n\t * {@link module:engine/model/model~Model#enqueueChange `Model#enqueueChange()`} instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/model~Model} model\n\t * @param {module:engine/model/batch~Batch} batch\n\t */\n\tconstructor( model, batch ) {\n\t\t/**\n\t\t * Instance of the model on which this writer operates.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The batch to which this writer will add changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/batch~Batch}\n\t\t */\n\t\tthis.batch = batch;\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\t\twriter.createText( 'foo', { bold: true } );\n\t *\n\t * @param {String} data Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @returns {module:engine/model/text~Text} Created text node.\n\t */\n\tcreateText( data, attributes ) {\n\t\treturn new Text( data, attributes );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/element~Element element}.\n\t *\n\t *\t\twriter.createElement( 'paragraph' );\n\t *\t\twriter.createElement( 'paragraph', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/model/element~Element} Created element.\n\t */\n\tcreateElement( name, attributes ) {\n\t\treturn new Element( name, attributes );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Created document fragment.\n\t */\n\tcreateDocumentFragment() {\n\t\treturn new DocumentFragment();\n\t}\n\n\t/**\n\t * Inserts item on given position.\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.insert( paragraph, position );\n\t *\n\t * Instead of using position you can use parent and offset:\n\t *\n\t *\t\tconst text = writer.createText( 'foo' );\n\t *\t\twriter.insert( text, paragraph, 5 );\n\t *\n\t * You can also use `end` instead of the offset to insert at the end:\n\t *\n\t *\t\tconst text = writer.createText( 'foo' );\n\t *\t\twriter.insert( text, paragraph, 'end' );\n\t *\n\t * Or insert before or after another element:\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.insert( paragraph, anotherParagraph, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * Note that if the item already has parent it will be removed from the previous parent.\n\t *\n\t * Note that you cannot re-insert a node from a document to a different document or a document fragment. In this case,\n\t * `model-writer-insert-forbidden-move` is thrown.\n\t *\n\t * If you want to move {@link module:engine/model/range~Range range} instead of an\n\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n\t *\n\t * **Note:** For a paste-like content insertion mechanism see\n\t * {@link module:engine/model/model~Model#insertContent `model.insertContent()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment} item Item or document\n\t * fragment to insert.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * second parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsert( item, itemOrPosition, offset = 0 ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( item instanceof Text && item.data == '' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = Position._createAt( itemOrPosition, offset );\n\n\t\t// If item has a parent already.\n\t\tif ( item.parent ) {\n\t\t\t// We need to check if item is going to be inserted within the same document.\n\t\t\tif ( isSameTree( item.root, position.root ) ) {\n\t\t\t\t// If it's we just need to move it.\n\t\t\t\tthis.move( Range._createOn( item ), position );\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If it isn't the same root.\n\t\t\telse {\n\t\t\t\tif ( item.root.document ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Cannot move a node from a document to a different tree.\n\t\t\t\t\t * It is forbidden to move a node that was already in a document outside of it.\n\t\t\t\t\t *\n\t\t\t\t\t * @error model-writer-insert-forbidden-move\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'model-writer-insert-forbidden-move: ' +\n\t\t\t\t\t\t'Cannot move a node from a document to a different tree. ' +\n\t\t\t\t\t\t'It is forbidden to move a node that was already in a document outside of it.',\n\t\t\t\t\t\tthis\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Move between two different document fragments or from document fragment to a document is possible.\n\t\t\t\t\t// In that case, remove the item from it's original parent.\n\t\t\t\t\tthis.remove( item );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst version = position.root.document ? position.root.document.version : null;\n\n\t\tconst insert = new InsertOperation( position, item, version );\n\n\t\tif ( item instanceof Text ) {\n\t\t\tinsert.shouldReceiveAttributes = true;\n\t\t}\n\n\t\tthis.batch.addOperation( insert );\n\t\tthis.model.applyOperation( insert );\n\n\t\t// When element is a DocumentFragment we need to move its markers to Document#markers.\n\t\tif ( item instanceof DocumentFragment ) {\n\t\t\tfor ( const [ markerName, markerRange ] of item.markers ) {\n\t\t\t\t// We need to migrate marker range from DocumentFragment to Document.\n\t\t\t\tconst rangeRootPosition = Position._createAt( markerRange.root, 0 );\n\t\t\t\tconst range = new Range(\n\t\t\t\t\tmarkerRange.start._getCombined( rangeRootPosition, position ),\n\t\t\t\t\tmarkerRange.end._getCombined( rangeRootPosition, position )\n\t\t\t\t);\n\n\t\t\t\tconst options = { range, usingOperation: true, affectsData: true };\n\n\t\t\t\tif ( this.model.markers.has( markerName ) ) {\n\t\t\t\t\tthis.updateMarker( markerName, options );\n\t\t\t\t} else {\n\t\t\t\t\tthis.addMarker( markerName, options );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates and inserts text on given position. You can optionally set text attributes:\n\t *\n\t *\t\twriter.insertText( 'foo', position );\n\t *\t\twriter.insertText( 'foo', { bold: true }, position );\n\t *\n\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\n\t * or before or after other node:\n\t *\n\t *\t\t// Inserts 'foo' in paragraph, at offset 5:\n\t *\t\twriter.insertText( 'foo', paragraph, 5 );\n\t *\t\t// Inserts 'foo' at the end of a paragraph:\n\t *\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t// Inserts 'foo' after an image:\n\t *\t\twriter.insertText( 'foo', image, 'after' );\n\t *\n\t * These parameters work in the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * @param {String} data Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * third parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsertText( text, attributes, itemOrPosition, offset ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\n\t\t\tthis.insert( this.createText( text ), attributes, itemOrPosition );\n\t\t} else {\n\t\t\tthis.insert( this.createText( text, attributes ), itemOrPosition, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates and inserts element on given position. You can optionally set attributes:\n\t *\n\t *\t\twriter.insertElement( 'paragraph', position );\n\t *\t\twriter.insertElement( 'paragraph', { alignment: 'center' }, position );\n\t *\n\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\n\t * or before or after other node:\n\t *\n\t *\t\t// Inserts paragraph in the root at offset 5:\n\t *\t\twriter.insertElement( 'paragraph', root, 5 );\n\t *\t\t// Inserts paragraph at the end of a blockquote:\n\t *\t\twriter.insertElement( 'paragraph', blockquote, 'end' );\n\t *\t\t// Inserts after an image:\n\t *\t\twriter.insertElement( 'paragraph', image, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * third parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsertElement( name, attributes, itemOrPosition, offset ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\n\t\t\tthis.insert( this.createElement( name ), attributes, itemOrPosition );\n\t\t} else {\n\t\t\tthis.insert( this.createElement( name, attributes ), itemOrPosition, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts item at the end of the given parent.\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.append( paragraph, root );\n\t *\n\t * Note that if the item already has parent it will be removed from the previous parent.\n\t *\n\t * If you want to move {@link module:engine/model/range~Range range} instead of an\n\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment}\n\t * item Item or document fragment to insert.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappend( item, parent ) {\n\t\tthis.insert( item, parent, 'end' );\n\t}\n\n\t/**\n\t * Creates text node and inserts it at the end of the parent. You can optionally set text attributes:\n\t *\n\t *\t\twriter.appendText( 'foo', paragraph );\n\t *\t\twriter.appendText( 'foo', { bold: true }, paragraph );\n\t *\n\t * @param {String} text Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappendText( text, attributes, parent ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\n\t\t\tthis.insert( this.createText( text ), attributes, 'end' );\n\t\t} else {\n\t\t\tthis.insert( this.createText( text, attributes ), parent, 'end' );\n\t\t}\n\t}\n\n\t/**\n\t * Creates element and inserts it at the end of the parent. You can optionally set attributes:\n\t *\n\t *\t\twriter.appendElement( 'paragraph', root );\n\t *\t\twriter.appendElement( 'paragraph', { alignment: 'center' }, root );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappendElement( name, attributes, parent ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\n\t\t\tthis.insert( this.createElement( name ), attributes, 'end' );\n\t\t} else {\n\t\t\tthis.insert( this.createElement( name, attributes ), parent, 'end' );\n\t\t}\n\t}\n\n\t/**\n\t * Sets value of the attribute with given key on a {@link module:engine/model/item~Item model item}\n\t * or on a {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {*} value Attribute new value.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range on which the attribute will be set.\n\t */\n\tsetAttribute( key, value, itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\tconst ranges = itemOrRange.getMinimalFlatRanges();\n\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tsetAttributeOnRange( this, key, value, range );\n\t\t\t}\n\t\t} else {\n\t\t\tsetAttributeOnItem( this, key, value, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Sets values of attributes on a {@link module:engine/model/item~Item model item}\n\t * or on a {@link module:engine/model/range~Range range}.\n\t *\n\t *\t\twriter.setAttributes( {\n\t *\t\t\tbold: true,\n\t *\t\t\titalic: true\n\t *\t\t}, range );\n\t *\n\t * @param {Object} attributes Attributes keys and values.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range on which the attributes will be set.\n\t */\n\tsetAttributes( attributes, itemOrRange ) {\n\t\tfor ( const [ key, val ] of toMap( attributes ) ) {\n\t\t\tthis.setAttribute( key, val, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Removes an attribute with given key from a {@link module:engine/model/item~Item model item}\n\t * or from a {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range from which the attribute will be removed.\n\t */\n\tremoveAttribute( key, itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\tconst ranges = itemOrRange.getMinimalFlatRanges();\n\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tsetAttributeOnRange( this, key, null, range );\n\t\t\t}\n\t\t} else {\n\t\t\tsetAttributeOnItem( this, key, null, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Removes all attributes from all elements in the range or from the given item.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range from which all attributes will be removed.\n\t */\n\tclearAttributes( itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst removeAttributesFromItem = item => {\n\t\t\tfor ( const attribute of item.getAttributeKeys() ) {\n\t\t\t\tthis.removeAttribute( attribute, item );\n\t\t\t}\n\t\t};\n\n\t\tif ( !( itemOrRange instanceof Range ) ) {\n\t\t\tremoveAttributesFromItem( itemOrRange );\n\t\t} else {\n\t\t\tfor ( const item of itemOrRange.getItems() ) {\n\t\t\t\tremoveAttributesFromItem( item );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves all items in the source range to the target position.\n\t *\n\t *\t\twriter.move( sourceRange, targetPosition );\n\t *\n\t * Instead of the target position you can use parent and offset or define that range should be moved to the end\n\t * or before or after chosen item:\n\t *\n\t *\t\t// Moves all items in the range to the paragraph at offset 5:\n\t *\t\twriter.move( sourceRange, paragraph, 5 );\n\t *\t\t// Moves all items in the range to the end of a blockquote:\n\t *\t\twriter.move( sourceRange, blockquote, 'end' );\n\t *\t\t// Moves all items in the range to a position after an image:\n\t *\t\twriter.move( sourceRange, image, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * Note that items can be moved only within the same tree. It means that you can move items within the same root\n\t * (element or document fragment) or between {@link module:engine/model/document~Document#roots documents roots},\n\t * but you can not move items from document fragment to the document or from one detached element to another. Use\n\t * {@link module:engine/model/writer~Writer#insert} in such cases.\n\t *\n\t * @param {module:engine/model/range~Range} range Source range.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * second parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tmove( range, itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !( range instanceof Range ) ) {\n\t\t\t/**\n\t\t\t * Invalid range to move.\n\t\t\t *\n\t\t\t * @error writer-move-invalid-range\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-invalid-range: Invalid range to move.', this );\n\t\t}\n\n\t\tif ( !range.isFlat ) {\n\t\t\t/**\n\t\t\t * Range to move is not flat.\n\t\t\t *\n\t\t\t * @error writer-move-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-range-not-flat: Range to move is not flat.', this );\n\t\t}\n\n\t\tconst position = Position._createAt( itemOrPosition, offset );\n\n\t\t// Do not move anything if the move target is same as moved range start.\n\t\tif ( position.isEqual( range.start ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If part of the marker is removed, create additional marker operation for undo purposes.\n\t\tthis._addOperationForAffectedMarkers( 'move', range );\n\n\t\tif ( !isSameTree( range.root, position.root ) ) {\n\t\t\t/**\n\t\t\t * Range is going to be moved within not the same document. Please use\n\t\t\t * {@link module:engine/model/writer~Writer#insert insert} instead.\n\t\t\t *\n\t\t\t * @error writer-move-different-document\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-different-document: Range is going to be moved between different documents.', this );\n\t\t}\n\n\t\tconst version = range.root.document ? range.root.document.version : null;\n\t\tconst operation = new MoveOperation( range.start, range.end.offset - range.start.offset, position, version );\n\n\t\tthis.batch.addOperation( operation );\n\t\tthis.model.applyOperation( operation );\n\t}\n\n\t/**\n\t * Removes given model {@link module:engine/model/item~Item item} or {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange Model item or range to remove.\n\t */\n\tremove( itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst rangeToRemove = itemOrRange instanceof Range ? itemOrRange : Range._createOn( itemOrRange );\n\t\tconst ranges = rangeToRemove.getMinimalFlatRanges().reverse();\n\n\t\tfor ( const flat of ranges ) {\n\t\t\t// If part of the marker is removed, create additional marker operation for undo purposes.\n\t\t\tthis._addOperationForAffectedMarkers( 'move', flat );\n\n\t\t\tapplyRemoveOperation( flat.start, flat.end.offset - flat.start.offset, this.batch, this.model );\n\t\t}\n\t}\n\n\t/**\n\t * Merges two siblings at the given position.\n\t *\n\t * Node before and after the position have to be an element. Otherwise `writer-merge-no-element-before` or\n\t * `writer-merge-no-element-after` error will be thrown.\n\t *\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\tmerge( position ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst nodeBefore = position.nodeBefore;\n\t\tconst nodeAfter = position.nodeAfter;\n\n\t\t// If part of the marker is removed, create additional marker operation for undo purposes.\n\t\tthis._addOperationForAffectedMarkers( 'merge', position );\n\n\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Node before merge position must be an element.\n\t\t\t *\n\t\t\t * @error writer-merge-no-element-before\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-merge-no-element-before: Node before merge position must be an element.', this );\n\t\t}\n\n\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Node after merge position must be an element.\n\t\t\t *\n\t\t\t * @error writer-merge-no-element-after\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-merge-no-element-after: Node after merge position must be an element.', this );\n\t\t}\n\n\t\tif ( !position.root.document ) {\n\t\t\tthis._mergeDetached( position );\n\t\t} else {\n\t\t\tthis._merge( position );\n\t\t}\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionFromPath `Model#createPositionFromPath()`}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionFromPath( root, path, stickiness ) {\n\t\treturn this.model.createPositionFromPath( root, path, stickiness );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn this.model.createPositionAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionAfter `Model#createPositionAfter()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn this.model.createPositionAfter( item );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionBefore `Model#createPositionBefore()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn this.model.createPositionBefore( item );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRange `Model#createRange()`}.\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn this.model.createRange( start, end );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRangeIn `Model#createRangeIn()`}.\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn this.model.createRangeIn( element );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRangeOn `Model#createRangeOn()`}.\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeOn( element ) {\n\t\treturn this.model.createRangeOn( element );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createSelection `Model#createSelection()`}.\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @returns {module:engine/model/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn this.model.createSelection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Performs merge action in a detached tree.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\t_mergeDetached( position ) {\n\t\tconst nodeBefore = position.nodeBefore;\n\t\tconst nodeAfter = position.nodeAfter;\n\n\t\tthis.move( Range._createIn( nodeAfter ), Position._createAt( nodeBefore, 'end' ) );\n\t\tthis.remove( nodeAfter );\n\t}\n\n\t/**\n\t * Performs merge action in a non-detached tree.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\t_merge( position ) {\n\t\tconst targetPosition = Position._createAt( position.nodeBefore, 'end' );\n\t\tconst sourcePosition = Position._createAt( position.nodeAfter, 0 );\n\n\t\tconst graveyard = position.root.document.graveyard;\n\t\tconst graveyardPosition = new Position( graveyard, [ 0 ] );\n\n\t\tconst version = position.root.document.version;\n\n\t\tconst merge = new MergeOperation( sourcePosition, position.nodeAfter.maxOffset, targetPosition, graveyardPosition, version );\n\n\t\tthis.batch.addOperation( merge );\n\t\tthis.model.applyOperation( merge );\n\t}\n\n\t/**\n\t * Renames the given element.\n\t *\n\t * @param {module:engine/model/element~Element} element The element to rename.\n\t * @param {String} newName New element name.\n\t */\n\trename( element, newName ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !( element instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Trying to rename an object which is not an instance of Element.\n\t\t\t *\n\t\t\t * @error writer-rename-not-element-instance\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-rename-not-element-instance: Trying to rename an object which is not an instance of Element.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst version = element.root.document ? element.root.document.version : null;\n\t\tconst renameOperation = new RenameOperation( Position._createBefore( element ), element.name, newName, version );\n\n\t\tthis.batch.addOperation( renameOperation );\n\t\tthis.model.applyOperation( renameOperation );\n\t}\n\n\t/**\n\t * Splits elements starting from the given position and going to the top of the model tree as long as given\n\t * `limitElement` is reached. When `limitElement` is not defined then only the parent of the given position will be split.\n\t *\n\t * The element needs to have a parent. It cannot be a root element nor a document fragment.\n\t * The `writer-split-element-no-parent` error will be thrown if you try to split an element with no parent.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of split.\n\t * @param {module:engine/model/node~Node} [limitElement] Stop splitting when this element will be reached.\n\t * @returns {Object} result Split result.\n\t * @returns {module:engine/model/position~Position} result.position Position between split elements.\n\t * @returns {module:engine/model/range~Range} result.range Range that stars from the end of the first split element and ends\n\t * at the beginning of the first copy element.\n\t */\n\tsplit( position, limitElement ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tlet splitElement = position.parent;\n\n\t\tif ( !splitElement.parent ) {\n\t\t\t/**\n\t\t\t * Element with no parent can not be split.\n\t\t\t *\n\t\t\t * @error writer-split-element-no-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-split-element-no-parent: Element with no parent can not be split.', this );\n\t\t}\n\n\t\t// When limit element is not defined lets set splitElement parent as limit.\n\t\tif ( !limitElement ) {\n\t\t\tlimitElement = splitElement.parent;\n\t\t}\n\n\t\tif ( !position.parent.getAncestors( { includeSelf: true } ).includes( limitElement ) ) {\n\t\t\tthrow new CKEditorError( 'writer-split-invalid-limit-element: Limit element is not a position ancestor.', this );\n\t\t}\n\n\t\t// We need to cache elements that will be created as a result of the first split because\n\t\t// we need to create a range from the end of the first split element to the beginning of the\n\t\t// first copy element. This should be handled by LiveRange but it doesn't work on detached nodes.\n\t\tlet firstSplitElement, firstCopyElement;\n\n\t\tdo {\n\t\t\tconst version = splitElement.root.document ? splitElement.root.document.version : null;\n\t\t\tconst howMany = splitElement.maxOffset - position.offset;\n\t\t\tconst split = new SplitOperation( position, howMany, null, version );\n\n\t\t\tthis.batch.addOperation( split );\n\t\t\tthis.model.applyOperation( split );\n\n\t\t\t// Cache result of the first split.\n\t\t\tif ( !firstSplitElement && !firstCopyElement ) {\n\t\t\t\tfirstSplitElement = splitElement;\n\t\t\t\tfirstCopyElement = position.parent.nextSibling;\n\t\t\t}\n\n\t\t\tposition = this.createPositionAfter( position.parent );\n\t\t\tsplitElement = position.parent;\n\t\t} while ( splitElement !== limitElement );\n\n\t\treturn {\n\t\t\tposition,\n\t\t\trange: new Range( Position._createAt( firstSplitElement, 'end' ), Position._createAt( firstCopyElement, 0 ) )\n\t\t};\n\t}\n\n\t/**\n\t * Wraps the given range with the given element or with a new element (if a string was passed).\n\t *\n\t * **Note:** range to wrap should be a \"flat range\" (see {@link module:engine/model/range~Range#isFlat `Range#isFlat`}).\n\t * If not, an error will be thrown.\n\t *\n\t * @param {module:engine/model/range~Range} range Range to wrap.\n\t * @param {module:engine/model/element~Element|String} elementOrString Element or name of element to wrap the range with.\n\t */\n\twrap( range, elementOrString ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !range.isFlat ) {\n\t\t\t/**\n\t\t\t * Range to wrap is not flat.\n\t\t\t *\n\t\t\t * @error writer-wrap-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-range-not-flat: Range to wrap is not flat.', this );\n\t\t}\n\n\t\tconst element = elementOrString instanceof Element ? elementOrString : new Element( elementOrString );\n\n\t\tif ( element.childCount > 0 ) {\n\t\t\t/**\n\t\t\t * Element to wrap with is not empty.\n\t\t\t *\n\t\t\t * @error writer-wrap-element-not-empty\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-element-not-empty: Element to wrap with is not empty.', this );\n\t\t}\n\n\t\tif ( element.parent !== null ) {\n\t\t\t/**\n\t\t\t * Element to wrap with is already attached to a tree model.\n\t\t\t *\n\t\t\t * @error writer-wrap-element-attached\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-element-attached: Element to wrap with is already attached to tree model.', this );\n\t\t}\n\n\t\tthis.insert( element, range.start );\n\n\t\t// Shift the range-to-wrap because we just inserted an element before that range.\n\t\tconst shiftedRange = new Range( range.start.getShiftedBy( 1 ), range.end.getShiftedBy( 1 ) );\n\n\t\tthis.move( shiftedRange, Position._createAt( element, 0 ) );\n\t}\n\n\t/**\n\t * Unwraps children of the given element – all its children are moved before it and then the element is removed.\n\t * Throws error if you try to unwrap an element which does not have a parent.\n\t *\n\t * @param {module:engine/model/element~Element} element Element to unwrap.\n\t */\n\tunwrap( element ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( element.parent === null ) {\n\t\t\t/**\n\t\t\t * Trying to unwrap an element which has no parent.\n\t\t\t *\n\t\t\t * @error writer-unwrap-element-no-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-unwrap-element-no-parent: Trying to unwrap an element which has no parent.', this );\n\t\t}\n\n\t\tthis.move( Range._createIn( element ), this.createPositionAfter( element ) );\n\t\tthis.remove( element );\n\t}\n\n\t/**\n\t * Adds a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n\t * changes in the document and updates its range automatically, when model tree changes.\n\t *\n\t * As the first parameter you can set marker name.\n\t *\n\t * The required `options.usingOperation` parameter lets you decide if the marker should be managed by operations or not. See\n\t * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n\t * markers managed by operations and not-managed by operations.\n\t *\n\t * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n\t * `true` when the marker change changes the data returned by the\n\t * {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n\t * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n\t * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n\t *\n\t * Create marker directly base on marker's name:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: false } );\n\t *\n\t * Create marker using operation:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: true } );\n\t *\n\t * Create marker that affects the editor data:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: false, affectsData: true } );\n\t *\n\t * Note: For efficiency reasons, it's best to create and keep as little markers as possible.\n\t *\n\t * @see module:engine/model/markercollection~Marker\n\t * @param {String} name Name of a marker to create - must be unique.\n\t * @param {Object} options\n\t * @param {Boolean} options.usingOperation Flag indicating that the marker should be added by MarkerOperation.\n\t * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n\t * @param {module:engine/model/range~Range} options.range Marker range.\n\t * @param {Boolean} [options.affectsData=false] Flag indicating that the marker changes the editor data.\n\t * @returns {module:engine/model/markercollection~Marker} Marker that was set.\n\t */\n\taddMarker( name, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !options || typeof options.usingOperation != 'boolean' ) {\n\t\t\t/**\n\t\t\t * The `options.usingOperation` parameter is required when adding a new marker.\n\t\t\t *\n\t\t\t * @error writer-addMarker-no-usingOperation\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-addMarker-no-usingOperation: The options.usingOperation parameter is required when adding a new marker.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst usingOperation = options.usingOperation;\n\t\tconst range = options.range;\n\t\tconst affectsData = options.affectsData === undefined ? false : options.affectsData;\n\n\t\tif ( this.model.markers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Marker with provided name already exists.\n\t\t\t *\n\t\t\t * @error writer-addMarker-marker-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-addMarker-marker-exists: Marker with provided name already exists.', this );\n\t\t}\n\n\t\tif ( !range ) {\n\t\t\t/**\n\t\t\t * Range parameter is required when adding a new marker.\n\t\t\t *\n\t\t\t * @error writer-addMarker-no-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-addMarker-no-range: Range parameter is required when adding a new marker.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tif ( !usingOperation ) {\n\t\t\treturn this.model.markers._set( name, range, usingOperation, affectsData );\n\t\t}\n\n\t\tapplyMarkerOperation( this, name, null, range, affectsData );\n\n\t\treturn this.model.markers.get( name );\n\t}\n\n\t/**\n\t * Adds, updates or refreshes a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n\t * changes in the document and updates its range automatically, when model tree changes. Still, it is possible to change the\n\t * marker's range directly using this method.\n\t *\n\t * As the first parameter you can set marker name or instance. If none of them is provided, new marker, with a unique\n\t * name is created and returned.\n\t *\n\t * As the second parameter you can set the new marker data or leave this parameter as empty which will just refresh\n\t * the marker by triggering downcast conversion for it. Refreshing the marker is useful when you want to change\n\t * the marker {@link module:engine/view/element~Element view element} without changing any marker data.\n\t *\n\t * \t\tlet isCommentActive = false;\n\t *\n\t * \t\tmodel.conversion.markerToHighlight( {\n\t * \t\t\tmodel: 'comment',\n\t *\t\t\tview: data => {\n\t *\t\t\t\tconst classes = [ 'comment-marker' ];\n\t *\n\t *\t\t\t\tif ( isCommentActive ) {\n\t *\t\t\t\t\tclasses.push( 'comment-marker--active' );\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\treturn { classes };\n\t *\t\t\t}\n\t * \t\t} );\n\t *\n\t * \t\t// Change the property that indicates if marker is displayed as active or not.\n\t * \t\tisCommentActive = true;\n\t *\n\t * \t\t// And refresh the marker to convert it with additional class.\n\t * \t\tmodel.change( writer => writer.updateMarker( 'comment' ) );\n\t *\n\t * The `options.usingOperation` parameter lets you change if the marker should be managed by operations or not. See\n\t * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n\t * markers managed by operations and not-managed by operations. It is possible to change this option for an existing marker.\n\t *\n\t * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n\t * `true` when the marker change changes the data returned by\n\t * the {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n\t * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n\t * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n\t *\n\t * Update marker directly base on marker's name:\n\t *\n\t *\t\tupdateMarker( markerName, { range } );\n\t *\n\t * Update marker using operation:\n\t *\n\t *\t\tupdateMarker( marker, { range, usingOperation: true } );\n\t *\t\tupdateMarker( markerName, { range, usingOperation: true } );\n\t *\n\t * Change marker's option (start using operations to manage it):\n\t *\n\t *\t\tupdateMarker( marker, { usingOperation: true } );\n\t *\n\t * Change marker's option (inform the engine, that the marker does not affect the data anymore):\n\t *\n\t *\t\tupdateMarker( markerName, { affectsData: false } );\n\t *\n\t * @see module:engine/model/markercollection~Marker\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of a marker to update, or a marker instance.\n\t * @param {Object} [options] If options object is not defined then marker will be refreshed by triggering\n\t * downcast conversion for this marker with the same data.\n\t * @param {module:engine/model/range~Range} [options.range] Marker range to update.\n\t * @param {Boolean} [options.usingOperation] Flag indicated whether the marker should be added by MarkerOperation.\n\t * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n\t * @param {Boolean} [options.affectsData] Flag indicating that the marker changes the editor data.\n\t */\n\tupdateMarker( markerOrName, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\t\tconst currentMarker = this.model.markers.get( markerName );\n\n\t\tif ( !currentMarker ) {\n\t\t\t/**\n\t\t\t * Marker with provided name does not exists.\n\t\t\t *\n\t\t\t * @error writer-updateMarker-marker-not-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-updateMarker-marker-not-exists: Marker with provided name does not exists.', this );\n\t\t}\n\n\t\tif ( !options ) {\n\t\t\tthis.model.markers._refresh( currentMarker );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst hasUsingOperationDefined = typeof options.usingOperation == 'boolean';\n\t\tconst affectsDataDefined = typeof options.affectsData == 'boolean';\n\n\t\t// Use previously defined marker's affectsData if the property is not provided.\n\t\tconst affectsData = affectsDataDefined ? options.affectsData : currentMarker.affectsData;\n\n\t\tif ( !hasUsingOperationDefined && !options.range && !affectsDataDefined ) {\n\t\t\t/**\n\t\t\t * One of the options is required - provide range, usingOperations or affectsData.\n\t\t\t *\n\t\t\t * @error writer-updateMarker-wrong-options\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-updateMarker-wrong-options: One of the options is required - provide range, usingOperations or affectsData.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tconst currentRange = currentMarker.getRange();\n\t\tconst updatedRange = options.range ? options.range : currentRange;\n\n\t\tif ( hasUsingOperationDefined && options.usingOperation !== currentMarker.managedUsingOperations ) {\n\t\t\t// The marker type is changed so it's necessary to create proper operations.\n\t\t\tif ( options.usingOperation ) {\n\t\t\t\t// If marker changes to a managed one treat this as synchronizing existing marker.\n\t\t\t\t// Create `MarkerOperation` with `oldRange` set to `null`, so reverse operation will remove the marker.\n\t\t\t\tapplyMarkerOperation( this, markerName, null, updatedRange, affectsData );\n\t\t\t} else {\n\t\t\t\t// If marker changes to a marker that do not use operations then we need to create additional operation\n\t\t\t\t// that removes that marker first.\n\t\t\t\tapplyMarkerOperation( this, markerName, currentRange, null, affectsData );\n\n\t\t\t\t// Although not managed the marker itself should stay in model and its range should be preserver or changed to passed range.\n\t\t\t\tthis.model.markers._set( markerName, updatedRange, undefined, affectsData );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Marker's type doesn't change so update it accordingly.\n\t\tif ( currentMarker.managedUsingOperations ) {\n\t\t\tapplyMarkerOperation( this, markerName, currentRange, updatedRange, affectsData );\n\t\t} else {\n\t\t\tthis.model.markers._set( markerName, updatedRange, undefined, affectsData );\n\t\t}\n\t}\n\n\t/**\n\t * Removes given {@link module:engine/model/markercollection~Marker marker} or marker with given name.\n\t * The marker is removed accordingly to how it has been created, so if the marker was created using operation,\n\t * it will be destroyed using operation.\n\t *\n\t * @param {module:engine/model/markercollection~Marker|String} markerOrName Marker or marker name to remove.\n\t */\n\tremoveMarker( markerOrName ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst name = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\n\t\tif ( !this.model.markers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Trying to remove marker which does not exist.\n\t\t\t *\n\t\t\t * @error writer-removeMarker-no-marker\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-removeMarker-no-marker: Trying to remove marker which does not exist.', this );\n\t\t}\n\n\t\tconst marker = this.model.markers.get( name );\n\n\t\tif ( !marker.managedUsingOperations ) {\n\t\t\tthis.model.markers._remove( name );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldRange = marker.getRange();\n\n\t\tapplyMarkerOperation( this, name, oldRange, null, marker.affectsData );\n\t}\n\n\t/**\n\t * Sets the document's selection (ranges and direction) to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable} or creates an empty selection if no arguments were passed.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t *\t\t// Sets selection to the given document selection.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\twriter.setSelection( documentSelection );\n\t *\n\t *\t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPosition( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t *\t\t// Sets collapsed selection at the position of the given node and an offset.\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'on' );\n\t *\n\t *\t\t// Removes all selection's ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * `Writer#setSelection()` allow passing additional options (`backward`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\twriter.setSelection( range, { backward: true } );\n\t *\n\t * Throws `writer-incorrect-use` error when the writer is used outside the `change()` block.\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tsetSelection( selectable, placeOrOffset, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tthis.model.document.selection._setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link #createPositionAt `writer.createPositionAt()`} parameters.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tthis.model.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets attribute(s) on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * Using key and value pair:\n\t *\n\t * \twriter.setSelectionAttribute( 'italic', true );\n\t *\n\t * Using key-value object:\n\t *\n\t * \twriter.setSelectionAttribute( { italic: true, bold: false } );\n\t *\n\t * Using iterable object:\n\t *\n\t * \twriter.setSelectionAttribute( new Map( [ [ 'italic', true ] ] ) );\n\t *\n\t * @param {String|Object|Iterable.<*>} keyOrObjectOrIterable Key of the attribute to set\n\t * or object / iterable of key => value attribute pairs.\n\t * @param {*} [value] Attribute value.\n\t */\n\tsetSelectionAttribute( keyOrObjectOrIterable, value ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( typeof keyOrObjectOrIterable === 'string' ) {\n\t\t\tthis._setSelectionAttribute( keyOrObjectOrIterable, value );\n\t\t} else {\n\t\t\tfor ( const [ key, value ] of toMap( keyOrObjectOrIterable ) ) {\n\t\t\t\tthis._setSelectionAttribute( key, value );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute(s) with given key(s) from the selection.\n\t *\n\t * Remove one attribute:\n\t *\n\t *\t\twriter.removeSelectionAttribute( 'italic' );\n\t *\n\t * Remove multiple attributes:\n\t *\n\t *\t\twriter.removeSelectionAttribute( [ 'italic', 'bold' ] );\n\t *\n\t * @param {String|Iterable.<String>} keyOrIterableOfKeys Key of the attribute to remove or an iterable of attribute keys to remove.\n\t */\n\tremoveSelectionAttribute( keyOrIterableOfKeys ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( typeof keyOrIterableOfKeys === 'string' ) {\n\t\t\tthis._removeSelectionAttribute( keyOrIterableOfKeys );\n\t\t} else {\n\t\t\tfor ( const key of keyOrIterableOfKeys ) {\n\t\t\t\tthis._removeSelectionAttribute( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Temporarily changes the {@link module:engine/model/documentselection~DocumentSelection#isGravityOverridden gravity}\n\t * of the selection from left to right.\n\t *\n\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left gravity,\n\t * then the selection (after being moved by the user) inherits attributes from its left-hand side.\n\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\n\t *\n\t * For the following model fragment:\n\t *\n\t *\t\t<$text bold=\"true\" linkHref=\"url\">bar[]</$text><$text bold=\"true\">biz</$text>\n\t *\n\t * * Default gravity: selection will have the `bold` and `linkHref` attributes.\n\t * * Overridden gravity: selection will have `bold` attribute.\n\t *\n\t * **Note**: It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n\t * of the process.\n\t *\n\t * @returns {String} The unique id which allows restoring the gravity.\n\t */\n\toverrideSelectionGravity() {\n\t\treturn this.model.document.selection._overrideGravity();\n\t}\n\n\t/**\n\t * Restores {@link ~Writer#overrideSelectionGravity} gravity to default.\n\t *\n\t * Restoring the gravity is only possible using the unique identifier returned by\n\t * {@link ~Writer#overrideSelectionGravity}. Note that the gravity remains overridden as long as won't be restored\n\t * the same number of times it was overridden.\n\t *\n\t * @param {String} uid The unique id returned by {@link ~Writer#overrideSelectionGravity}.\n\t */\n\trestoreSelectionGravity( uid ) {\n\t\tthis.model.document.selection._restoreGravity( uid );\n\t}\n\n\t/**\n\t * @private\n\t * @param {String} key Key of the attribute to remove.\n\t * @param {*} value Attribute value.\n\t */\n\t_setSelectionAttribute( key, value ) {\n\t\tconst selection = this.model.document.selection;\n\n\t\t// Store attribute in parent element if the selection is collapsed in an empty node.\n\t\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\n\t\t\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\n\n\t\t\tthis.setAttribute( storeKey, value, selection.anchor.parent );\n\t\t}\n\n\t\tselection._setAttribute( key, value );\n\t}\n\n\t/**\n\t * @private\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeSelectionAttribute( key ) {\n\t\tconst selection = this.model.document.selection;\n\n\t\t// Remove stored attribute from parent element if the selection is collapsed in an empty node.\n\t\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\n\t\t\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\n\n\t\t\tthis.removeAttribute( storeKey, selection.anchor.parent );\n\t\t}\n\n\t\tselection._removeAttribute( key );\n\t}\n\n\t/**\n\t * Throws `writer-detached-writer-tries-to-modify-model` error when the writer is used outside of the `change()` block.\n\t *\n\t * @private\n\t */\n\t_assertWriterUsedCorrectly() {\n\t\t/**\n\t\t * Trying to use a writer outside a {@link module:engine/model/model~Model#change `change()`} or\n\t\t * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`} blocks.\n\t\t *\n\t\t * The writer can only be used inside these blocks which ensures that the model\n\t\t * can only be changed during such \"sessions\".\n\t\t *\n\t\t * @error writer-incorrect-use\n\t\t */\n\t\tif ( this.model._currentWriter !== this ) {\n\t\t\tthrow new CKEditorError( 'writer-incorrect-use: Trying to use a writer outside the change() block.', this );\n\t\t}\n\t}\n\n\t/**\n\t * For given action `type` and `positionOrRange` where the action happens, this function finds all affected markers\n\t * and applies a marker operation with the new marker range equal to the current range. Thanks to this, the marker range\n\t * can be later correctly processed during undo.\n\t *\n\t * @private\n\t * @param {'move'|'merge'} type Writer action type.\n\t * @param {module:engine/model/position~Position|module:engine/model/range~Range} positionOrRange Position or range\n\t * where the writer action happens.\n\t */\n\t_addOperationForAffectedMarkers( type, positionOrRange ) {\n\t\tfor ( const marker of this.model.markers ) {\n\t\t\tif ( !marker.managedUsingOperations ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst markerRange = marker.getRange();\n\t\t\tlet isAffected = false;\n\n\t\t\tif ( type == 'move' ) {\n\t\t\t\tisAffected =\n\t\t\t\t\tpositionOrRange.containsPosition( markerRange.start ) ||\n\t\t\t\t\tpositionOrRange.start.isEqual( markerRange.start ) ||\n\t\t\t\t\tpositionOrRange.containsPosition( markerRange.end ) ||\n\t\t\t\t\tpositionOrRange.end.isEqual( markerRange.end );\n\t\t\t} else {\n\t\t\t\t// if type == 'merge'.\n\t\t\t\tconst elementBefore = positionOrRange.nodeBefore;\n\t\t\t\tconst elementAfter = positionOrRange.nodeAfter;\n\n\t\t\t\t//               Start:  <p>Foo[</p><p>Bar]</p>\n\t\t\t\t//         After merge:  <p>Foo[Bar]</p>\n\t\t\t\t// After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedInLeftElement = markerRange.start.parent == elementBefore && markerRange.start.isAtEnd;\n\n\t\t\t\t//               Start:  <p>[Foo</p><p>]Bar</p>\n\t\t\t\t//         After merge:  <p>[Foo]Bar</p>\n\t\t\t\t// After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedInRightElement = markerRange.end.parent == elementAfter && markerRange.end.offset == 0;\n\n\t\t\t\t//               Start:  <p>[Foo</p>]<p>Bar</p>\n\t\t\t\t//         After merge:  <p>[Foo]Bar</p>\n\t\t\t\t// After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedAfterLeftElement = markerRange.end.nodeAfter == elementAfter;\n\n\t\t\t\t//               Start:  <p>Foo</p>[<p>Bar]</p>\n\t\t\t\t//         After merge:  <p>Foo[Bar]</p>\n\t\t\t\t// After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n\t\t\t\t//\n\t\t\t\tconst affectedBeforeRightElement = markerRange.start.nodeAfter == elementAfter;\n\n\t\t\t\tisAffected = affectedInLeftElement || affectedInRightElement || affectedAfterLeftElement || affectedBeforeRightElement;\n\t\t\t}\n\n\t\t\tif ( isAffected ) {\n\t\t\t\tthis.updateMarker( marker.name, { range: markerRange } );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Sets given attribute to each node in given range. When attribute value is null then attribute will be removed.\n//\n// Because attribute operation needs to have the same attribute value on the whole range, this function splits\n// the range into smaller parts.\n//\n// Given `range` must be flat.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/range~Range} range Model range on which the attribute will be set.\nfunction setAttributeOnRange( writer, key, value, range ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\n\t// Position of the last split, the beginning of the new range.\n\tlet lastSplitPosition = range.start;\n\n\t// Currently position in the scanning range. Because we need value after the position, it is not a current\n\t// position of the iterator but the previous one (we need to iterate one more time to get the value after).\n\tlet position;\n\n\t// Value before the currently position.\n\tlet valueBefore;\n\n\t// Value after the currently position.\n\tlet valueAfter;\n\n\tfor ( const val of range.getWalker( { shallow: true } ) ) {\n\t\tvalueAfter = val.item.getAttribute( key );\n\n\t\t// At the first run of the iterator the position in undefined. We also do not have a valueBefore, but\n\t\t// because valueAfter may be null, valueBefore may be equal valueAfter ( undefined == null ).\n\t\tif ( position && valueBefore != valueAfter ) {\n\t\t\t// if valueBefore == value there is nothing to change, so we add operation only if these values are different.\n\t\t\tif ( valueBefore != value ) {\n\t\t\t\taddOperation();\n\t\t\t}\n\n\t\t\tlastSplitPosition = position;\n\t\t}\n\n\t\tposition = val.nextPosition;\n\t\tvalueBefore = valueAfter;\n\t}\n\n\t// Because position in the loop is not the iterator position (see let position comment), the last position in\n\t// the while loop will be last but one position in the range. We need to check the last position manually.\n\tif ( position instanceof Position && position != lastSplitPosition && valueBefore != value ) {\n\t\taddOperation();\n\t}\n\n\tfunction addOperation() {\n\t\tconst range = new Range( lastSplitPosition, position );\n\t\tconst version = range.root.document ? doc.version : null;\n\t\tconst operation = new AttributeOperation( range, key, valueBefore, value, version );\n\n\t\twriter.batch.addOperation( operation );\n\t\tmodel.applyOperation( operation );\n\t}\n}\n\n// Sets given attribute to the given node. When attribute value is null then attribute will be removed.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\nfunction setAttributeOnItem( writer, key, value, item ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\tconst previousValue = item.getAttribute( key );\n\tlet range, operation;\n\n\tif ( previousValue != value ) {\n\t\tconst isRootChanged = item.root === item;\n\n\t\tif ( isRootChanged ) {\n\t\t\t// If we change attributes of root element, we have to use `RootAttributeOperation`.\n\t\t\tconst version = item.document ? doc.version : null;\n\n\t\t\toperation = new RootAttributeOperation( item, key, previousValue, value, version );\n\t\t} else {\n\t\t\trange = new Range( Position._createBefore( item ), writer.createPositionAfter( item ) );\n\n\t\t\tconst version = range.root.document ? doc.version : null;\n\n\t\t\toperation = new AttributeOperation( range, key, previousValue, value, version );\n\t\t}\n\n\t\twriter.batch.addOperation( operation );\n\t\tmodel.applyOperation( operation );\n\t}\n}\n\n// Creates and applies marker operation to {@link module:engine/model/operation/operation~Operation operation}.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} name Marker name.\n// @param {module:engine/model/range~Range} oldRange Marker range before the change.\n// @param {module:engine/model/range~Range} newRange Marker range after the change.\n// @param {Boolean} affectsData\nfunction applyMarkerOperation( writer, name, oldRange, newRange, affectsData ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\n\tconst operation = new MarkerOperation( name, oldRange, newRange, model.markers, affectsData, doc.version );\n\n\twriter.batch.addOperation( operation );\n\tmodel.applyOperation( operation );\n}\n\n// Creates `MoveOperation` or `DetachOperation` that removes `howMany` nodes starting from `position`.\n// The operation will be applied on given model instance and added to given operation instance.\n//\n// @private\n// @param {module:engine/model/position~Position} position Position from which nodes are removed.\n// @param {Number} howMany Number of nodes to remove.\n// @param {Batch} batch Batch to which the operation will be added.\n// @param {module:engine/model/model~Model} model Model instance on which operation will be applied.\nfunction applyRemoveOperation( position, howMany, batch, model ) {\n\tlet operation;\n\n\tif ( position.root.document ) {\n\t\tconst doc = model.document;\n\t\tconst graveyardPosition = new Position( doc.graveyard, [ 0 ] );\n\n\t\toperation = new MoveOperation( position, howMany, graveyardPosition, doc.version );\n\t} else {\n\t\toperation = new DetachOperation( position, howMany );\n\t}\n\n\tbatch.addOperation( operation );\n\tmodel.applyOperation( operation );\n}\n\n// Returns `true` if both root elements are the same element or both are documents root elements.\n//\n// Elements in the same tree can be moved (for instance you can move element form one documents root to another, or\n// within the same document fragment), but when element supposed to be moved from document fragment to the document, or\n// to another document it should be removed and inserted to avoid problems with OT. This is because features like undo or\n// collaboration may track changes on the document but ignore changes on detached fragments and should not get\n// unexpected `move` operation.\nfunction isSameTree( rootA, rootB ) {\n\t// If it is the same root this is the same tree.\n\tif ( rootA === rootB ) {\n\t\treturn true;\n\t}\n\n\t// If both roots are documents root it is operation within the document what we still treat as the same tree.\n\tif ( rootA instanceof RootElement && rootB instanceof RootElement ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/differ\n */\n\nimport Position from './position';\nimport Range from './range';\n\n/**\n * Calculates the difference between two model states.\n *\n * Receives operations that are to be applied on the model document. Marks parts of the model document tree which\n * are changed and saves the state of these elements before the change. Then, it compares saved elements with the\n * changed elements, after all changes are applied on the model document. Calculates the diff between saved\n * elements and new ones and returns a change set.\n */\nexport default class Differ {\n\t/**\n\t * Creates a `Differ` instance.\n\t *\n\t * @param {module:engine/model/markercollection~MarkerCollection} markerCollection Model's marker collection.\n\t */\n\tconstructor( markerCollection ) {\n\t\t/**\n\t\t * Reference to the model's marker collection.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis._markerCollection = markerCollection;\n\n\t\t/**\n\t\t * A map that stores changes that happened in a given element.\n\t\t *\n\t\t * The keys of the map are references to the model elements.\n\t\t * The values of the map are arrays with changes that were done on this element.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._changesInElement = new Map();\n\n\t\t/**\n\t\t * A map that stores \"element's children snapshots\". A snapshot is representing children of a given element before\n\t\t * the first change was applied on that element. Snapshot items are objects with two properties: `name`,\n\t\t * containing the element name (or `'$text'` for a text node) and `attributes` which is a map of the node's attributes.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._elementSnapshots = new Map();\n\n\t\t/**\n\t\t * A map that stores all changed markers.\n\t\t *\n\t\t * The keys of the map are marker names.\n\t\t * The values of the map are objects with the `oldRange` and `newRange` properties. They store the marker range\n\t\t * state before and after the change.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._changedMarkers = new Map();\n\n\t\t/**\n\t\t * Stores the number of changes that were processed. Used to order the changes chronologically. It is important\n\t\t * when changes are sorted.\n\t\t *\n\t\t * @private\n\t\t * @type {Number}\n\t\t */\n\t\tthis._changeCount = 0;\n\n\t\t/**\n\t\t * For efficiency purposes, `Differ` stores the change set returned by the differ after {@link #getChanges} call.\n\t\t * Cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n\t\t * return the cached value instead of calculating it again.\n\t\t *\n\t\t * This property stores those changes that did not take place in graveyard root.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Object>|null}\n\t\t */\n\t\tthis._cachedChanges = null;\n\n\t\t/**\n\t\t * For efficiency purposes, `Differ` stores the change set returned by the differ after the {@link #getChanges} call.\n\t\t * The cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n\t\t * return the cached value instead of calculating it again.\n\t\t *\n\t\t * This property stores all changes evaluated by `Differ`, including those that took place in the graveyard.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Object>|null}\n\t\t */\n\t\tthis._cachedChangesWithGraveyard = null;\n\t}\n\n\t/**\n\t * Informs whether there are any changes buffered in `Differ`.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._changesInElement.size == 0 && this._changedMarkers.size == 0;\n\t}\n\n\t/**\n\t * Marks given `item` in differ to be \"refreshed\". It means that the item will be marked as removed and inserted in the differ changes\n\t * set, so it will be effectively re-converted when differ changes will be handled by a dispatcher.\n\t *\n\t * @param {module:engine/model/item~Item} item Item to refresh.\n\t */\n\trefreshItem( item ) {\n\t\tif ( this._isInInsertedElement( item.parent ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._markRemove( item.parent, item.startOffset, item.offsetSize );\n\t\tthis._markInsert( item.parent, item.startOffset, item.offsetSize );\n\n\t\tconst range = Range._createOn( item );\n\n\t\tfor ( const marker of this._markerCollection.getMarkersIntersectingRange( range ) ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tthis.bufferMarkerChange( marker.name, markerRange, markerRange, marker.affectsData );\n\t\t}\n\n\t\t// Clear cache after each buffered operation as it is no longer valid.\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Buffers the given operation. An operation has to be buffered before it is executed.\n\t *\n\t * Operation type is checked and it is checked which nodes it will affect. These nodes are then stored in `Differ`\n\t * in the state before the operation is executed.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation An operation to buffer.\n\t */\n\tbufferOperation( operation ) {\n\t\t// Below we take an operation, check its type, then use its parameters in marking (private) methods.\n\t\t// The general rule is to not mark elements inside inserted element. All inserted elements are re-rendered.\n\t\t// Marking changes in them would cause a \"double\" changing then.\n\t\t//\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert': {\n\t\t\t\tif ( this._isInInsertedElement( operation.position.parent ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._markInsert( operation.position.parent, operation.position.offset, operation.nodes.maxOffset );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'addAttribute':\n\t\t\tcase 'removeAttribute':\n\t\t\tcase 'changeAttribute': {\n\t\t\t\tfor ( const item of operation.range.getItems( { shallow: true } ) ) {\n\t\t\t\t\tif ( this._isInInsertedElement( item.parent ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._markAttribute( item );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'remove':\n\t\t\tcase 'move':\n\t\t\tcase 'reinsert': {\n\t\t\t\t// When range is moved to the same position then not mark it as a change.\n\t\t\t\t// See: https://github.com/ckeditor/ckeditor5-engine/issues/1664.\n\t\t\t\tif (\n\t\t\t\t\toperation.sourcePosition.isEqual( operation.targetPosition ) ||\n\t\t\t\t\toperation.sourcePosition.getShiftedBy( operation.howMany ).isEqual( operation.targetPosition )\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceParentInserted = this._isInInsertedElement( operation.sourcePosition.parent );\n\t\t\t\tconst targetParentInserted = this._isInInsertedElement( operation.targetPosition.parent );\n\n\t\t\t\tif ( !sourceParentInserted ) {\n\t\t\t\t\tthis._markRemove( operation.sourcePosition.parent, operation.sourcePosition.offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\tif ( !targetParentInserted ) {\n\t\t\t\t\tthis._markInsert( operation.targetPosition.parent, operation.getMovedRangeStart().offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'rename': {\n\t\t\t\tif ( this._isInInsertedElement( operation.position.parent ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._markRemove( operation.position.parent, operation.position.offset, 1 );\n\t\t\t\tthis._markInsert( operation.position.parent, operation.position.offset, 1 );\n\n\t\t\t\tconst range = Range._createFromPositionAndShift( operation.position, 1 );\n\n\t\t\t\tfor ( const marker of this._markerCollection.getMarkersIntersectingRange( range ) ) {\n\t\t\t\t\tconst markerRange = marker.getRange();\n\n\t\t\t\t\tthis.bufferMarkerChange( marker.name, markerRange, markerRange, marker.affectsData );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'split': {\n\t\t\t\tconst splitElement = operation.splitPosition.parent;\n\n\t\t\t\t// Mark that children of the split element were removed.\n\t\t\t\tif ( !this._isInInsertedElement( splitElement ) ) {\n\t\t\t\t\tthis._markRemove( splitElement, operation.splitPosition.offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\t// Mark that the new element (split copy) was inserted.\n\t\t\t\tif ( !this._isInInsertedElement( operation.insertionPosition.parent ) ) {\n\t\t\t\t\tthis._markInsert( operation.insertionPosition.parent, operation.insertionPosition.offset, 1 );\n\t\t\t\t}\n\n\t\t\t\t// If the split took the element from the graveyard, mark that the element from the graveyard was removed.\n\t\t\t\tif ( operation.graveyardPosition ) {\n\t\t\t\t\tthis._markRemove( operation.graveyardPosition.parent, operation.graveyardPosition.offset, 1 );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'merge': {\n\t\t\t\t// Mark that the merged element was removed.\n\t\t\t\tconst mergedElement = operation.sourcePosition.parent;\n\n\t\t\t\tif ( !this._isInInsertedElement( mergedElement.parent ) ) {\n\t\t\t\t\tthis._markRemove( mergedElement.parent, mergedElement.startOffset, 1 );\n\t\t\t\t}\n\n\t\t\t\t// Mark that the merged element was inserted into graveyard.\n\t\t\t\tconst graveyardParent = operation.graveyardPosition.parent;\n\n\t\t\t\tthis._markInsert( graveyardParent, operation.graveyardPosition.offset, 1 );\n\n\t\t\t\t// Mark that children of merged element were inserted at new parent.\n\t\t\t\tconst mergedIntoElement = operation.targetPosition.parent;\n\n\t\t\t\tif ( !this._isInInsertedElement( mergedIntoElement ) ) {\n\t\t\t\t\tthis._markInsert( mergedIntoElement, operation.targetPosition.offset, mergedElement.maxOffset );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Clear cache after each buffered operation as it is no longer valid.\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Buffers a marker change.\n\t *\n\t * @param {String} markerName The name of the marker that changed.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the change or `null` if the marker has just\n\t * been created.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after the change or `null` if the marker was removed.\n\t * @param {Boolean} affectsData Flag indicating whether marker affects the editor data.\n\t */\n\tbufferMarkerChange( markerName, oldRange, newRange, affectsData ) {\n\t\tconst buffered = this._changedMarkers.get( markerName );\n\n\t\tif ( !buffered ) {\n\t\t\tthis._changedMarkers.set( markerName, {\n\t\t\t\toldRange,\n\t\t\t\tnewRange,\n\t\t\t\taffectsData\n\t\t\t} );\n\t\t} else {\n\t\t\tbuffered.newRange = newRange;\n\t\t\tbuffered.affectsData = affectsData;\n\n\t\t\tif ( buffered.oldRange == null && buffered.newRange == null ) {\n\t\t\t\t// The marker is going to be removed (`newRange == null`) but it did not exist before the first buffered change\n\t\t\t\t// (`buffered.oldRange == null`). In this case, do not keep the marker in buffer at all.\n\t\t\t\tthis._changedMarkers.delete( markerName );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns all markers that should be removed as a result of buffered changes.\n\t *\n\t * @returns {Array.<Object>} Markers to remove. Each array item is an object containing the `name` and `range` properties.\n\t */\n\tgetMarkersToRemove() {\n\t\tconst result = [];\n\n\t\tfor ( const [ name, change ] of this._changedMarkers ) {\n\t\t\tif ( change.oldRange != null ) {\n\t\t\t\tresult.push( { name, range: change.oldRange } );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns all markers which should be added as a result of buffered changes.\n\t *\n\t * @returns {Array.<Object>} Markers to add. Each array item is an object containing the `name` and `range` properties.\n\t */\n\tgetMarkersToAdd() {\n\t\tconst result = [];\n\n\t\tfor ( const [ name, change ] of this._changedMarkers ) {\n\t\t\tif ( change.newRange != null ) {\n\t\t\t\tresult.push( { name, range: change.newRange } );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns all markers which changed.\n\t *\n\t * @returns {Array.<Object>}\n\t */\n\tgetChangedMarkers() {\n\t\treturn Array.from( this._changedMarkers ).map( item => (\n\t\t\t{\n\t\t\t\tname: item[ 0 ],\n\t\t\t\tdata: {\n\t\t\t\t\toldRange: item[ 1 ].oldRange,\n\t\t\t\t\tnewRange: item[ 1 ].newRange\n\t\t\t\t}\n\t\t\t}\n\t\t) );\n\t}\n\n\t/**\n\t * Checks whether some of the buffered changes affect the editor data.\n\t *\n\t * Types of changes which affect the editor data:\n\t *\n\t * * model structure changes,\n\t * * attribute changes,\n\t * * changes of markers which were defined as `affectingData`.\n\t *\n\t * @returns {Boolean}\n\t */\n\thasDataChanges() {\n\t\tfor ( const [ , change ] of this._changedMarkers ) {\n\t\t\tif ( change.affectsData ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// If markers do not affect the data, check whether there are some changes in elements.\n\t\treturn this._changesInElement.size > 0;\n\t}\n\n\t/**\n\t * Calculates the diff between the old model tree state (the state before the first buffered operations since the last {@link #reset}\n\t * call) and the new model tree state (actual one). It should be called after all buffered operations are executed.\n\t *\n\t * The diff set is returned as an array of diff items, each describing a change done on the model. The items are sorted by\n\t * the position on which the change happened. If a position {@link module:engine/model/position~Position#isBefore is before}\n\t * another one, it will be on an earlier index in the diff set.\n\t *\n\t * Because calculating the diff is a costly operation, the result is cached. If no new operation was buffered since the\n\t * previous {@link #getChanges} call, the next call will return the cached value.\n\t *\n\t * @param {Object} options Additional options.\n\t * @param {Boolean} [options.includeChangesInGraveyard=false] If set to `true`, also changes that happened\n\t * in the graveyard root will be returned. By default, changes in the graveyard root are not returned.\n\t * @returns {Array.<Object>} Diff between the old and the new model tree state.\n\t */\n\tgetChanges( options = { includeChangesInGraveyard: false } ) {\n\t\t// If there are cached changes, just return them instead of calculating changes again.\n\t\tif ( this._cachedChanges ) {\n\t\t\tif ( options.includeChangesInGraveyard ) {\n\t\t\t\treturn this._cachedChangesWithGraveyard.slice();\n\t\t\t} else {\n\t\t\t\treturn this._cachedChanges.slice();\n\t\t\t}\n\t\t}\n\n\t\t// Will contain returned results.\n\t\tconst diffSet = [];\n\n\t\t// Check all changed elements.\n\t\tfor ( const element of this._changesInElement.keys() ) {\n\t\t\t// Get changes for this element and sort them.\n\t\t\tconst changes = this._changesInElement.get( element ).sort( ( a, b ) => {\n\t\t\t\tif ( a.offset === b.offset ) {\n\t\t\t\t\tif ( a.type != b.type ) {\n\t\t\t\t\t\t// If there are multiple changes at the same position, \"remove\" change should be first.\n\t\t\t\t\t\t// If the order is different, for example, we would first add some nodes and then removed them\n\t\t\t\t\t\t// (instead of the nodes that we should remove).\n\t\t\t\t\t\treturn a.type == 'remove' ? -1 : 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn a.offset < b.offset ? -1 : 1;\n\t\t\t} );\n\n\t\t\t// Get children of this element before any change was applied on it.\n\t\t\tconst snapshotChildren = this._elementSnapshots.get( element );\n\t\t\t// Get snapshot of current element's children.\n\t\t\tconst elementChildren = _getChildrenSnapshot( element.getChildren() );\n\n\t\t\t// Generate actions basing on changes done on element.\n\t\t\tconst actions = _generateActionsFromChanges( snapshotChildren.length, changes );\n\n\t\t\tlet i = 0; // Iterator in `elementChildren` array -- iterates through current children of element.\n\t\t\tlet j = 0; // Iterator in `snapshotChildren` array -- iterates through old children of element.\n\n\t\t\t// Process every action.\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action === 'i' ) {\n\t\t\t\t\t// Generate diff item for this element and insert it into the diff set.\n\t\t\t\t\tdiffSet.push( this._getInsertDiff( element, i, elementChildren[ i ].name ) );\n\n\t\t\t\t\ti++;\n\t\t\t\t} else if ( action === 'r' ) {\n\t\t\t\t\t// Generate diff item for this element and insert it into the diff set.\n\t\t\t\t\tdiffSet.push( this._getRemoveDiff( element, i, snapshotChildren[ j ].name ) );\n\n\t\t\t\t\tj++;\n\t\t\t\t} else if ( action === 'a' ) {\n\t\t\t\t\t// Take attributes from saved and current children.\n\t\t\t\t\tconst elementAttributes = elementChildren[ i ].attributes;\n\t\t\t\t\tconst snapshotAttributes = snapshotChildren[ j ].attributes;\n\t\t\t\t\tlet range;\n\n\t\t\t\t\tif ( elementChildren[ i ].name == '$text' ) {\n\t\t\t\t\t\trange = new Range( Position._createAt( element, i ), Position._createAt( element, i + 1 ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst index = element.offsetToIndex( i );\n\t\t\t\t\t\trange = new Range( Position._createAt( element, i ), Position._createAt( element.getChild( index ), 0 ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Generate diff items for this change (there might be multiple attributes changed and\n\t\t\t\t\t// there is a single diff for each of them) and insert them into the diff set.\n\t\t\t\t\tdiffSet.push( ...this._getAttributesDiff( range, snapshotAttributes, elementAttributes ) );\n\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\t// `action` is 'equal'. Child not changed.\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Then, sort the changes by the position (change at position before other changes is first).\n\t\tdiffSet.sort( ( a, b ) => {\n\t\t\t// If the change is in different root, we don't care much, but we'd like to have all changes in given\n\t\t\t// root \"together\" in the array. So let's just sort them by the root name. It does not matter which root\n\t\t\t// will be processed first.\n\t\t\tif ( a.position.root != b.position.root ) {\n\t\t\t\treturn a.position.root.rootName < b.position.root.rootName ? -1 : 1;\n\t\t\t}\n\n\t\t\t// If change happens at the same position...\n\t\t\tif ( a.position.isEqual( b.position ) ) {\n\t\t\t\t// Keep chronological order of operations.\n\t\t\t\treturn a.changeCount - b.changeCount;\n\t\t\t}\n\n\t\t\t// If positions differ, position \"on the left\" should be earlier in the result.\n\t\t\treturn a.position.isBefore( b.position ) ? -1 : 1;\n\t\t} );\n\n\t\t// Glue together multiple changes (mostly on text nodes).\n\t\tfor ( let i = 1; i < diffSet.length; i++ ) {\n\t\t\tconst prevDiff = diffSet[ i - 1 ];\n\t\t\tconst thisDiff = diffSet[ i ];\n\n\t\t\t// Glue remove changes if they happen on text on same position.\n\t\t\tconst isConsecutiveTextRemove =\n\t\t\t\tprevDiff.type == 'remove' && thisDiff.type == 'remove' &&\n\t\t\t\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\n\t\t\t\tprevDiff.position.isEqual( thisDiff.position );\n\n\t\t\t// Glue insert changes if they happen on text on consecutive fragments.\n\t\t\tconst isConsecutiveTextAdd =\n\t\t\t\tprevDiff.type == 'insert' && thisDiff.type == 'insert' &&\n\t\t\t\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\n\t\t\t\tprevDiff.position.parent == thisDiff.position.parent &&\n\t\t\t\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset;\n\n\t\t\t// Glue attribute changes if they happen on consecutive fragments and have same key, old value and new value.\n\t\t\tconst isConsecutiveAttributeChange =\n\t\t\t\tprevDiff.type == 'attribute' && thisDiff.type == 'attribute' &&\n\t\t\t\tprevDiff.position.parent == thisDiff.position.parent &&\n\t\t\t\tprevDiff.range.isFlat && thisDiff.range.isFlat &&\n\t\t\t\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset &&\n\t\t\t\tprevDiff.attributeKey == thisDiff.attributeKey &&\n\t\t\t\tprevDiff.attributeOldValue == thisDiff.attributeOldValue &&\n\t\t\t\tprevDiff.attributeNewValue == thisDiff.attributeNewValue;\n\n\t\t\tif ( isConsecutiveTextRemove || isConsecutiveTextAdd || isConsecutiveAttributeChange ) {\n\t\t\t\tdiffSet[ i - 1 ].length++;\n\n\t\t\t\tif ( isConsecutiveAttributeChange ) {\n\t\t\t\t\tdiffSet[ i - 1 ].range.end = diffSet[ i - 1 ].range.end.getShiftedBy( 1 );\n\t\t\t\t}\n\n\t\t\t\tdiffSet.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\n\t\t// Remove `changeCount` property from diff items. It is used only for sorting and is internal thing.\n\t\tfor ( const item of diffSet ) {\n\t\t\tdelete item.changeCount;\n\n\t\t\tif ( item.type == 'attribute' ) {\n\t\t\t\tdelete item.position;\n\t\t\t\tdelete item.length;\n\t\t\t}\n\t\t}\n\n\t\tthis._changeCount = 0;\n\n\t\t// Cache changes.\n\t\tthis._cachedChangesWithGraveyard = diffSet.slice();\n\t\tthis._cachedChanges = diffSet.slice().filter( _changesInGraveyardFilter );\n\n\t\tif ( options.includeChangesInGraveyard ) {\n\t\t\treturn this._cachedChangesWithGraveyard;\n\t\t} else {\n\t\t\treturn this._cachedChanges;\n\t\t}\n\t}\n\n\t/**\n\t * Resets `Differ`. Removes all buffered changes.\n\t */\n\treset() {\n\t\tthis._changesInElement.clear();\n\t\tthis._elementSnapshots.clear();\n\t\tthis._changedMarkers.clear();\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Saves and handles an insert change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_markInsert( parent, offset, howMany ) {\n\t\tconst changeItem = { type: 'insert', offset, howMany, count: this._changeCount++ };\n\n\t\tthis._markChange( parent, changeItem );\n\t}\n\n\t/**\n\t * Saves and handles a remove change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_markRemove( parent, offset, howMany ) {\n\t\tconst changeItem = { type: 'remove', offset, howMany, count: this._changeCount++ };\n\n\t\tthis._markChange( parent, changeItem );\n\n\t\tthis._removeAllNestedChanges( parent, offset, howMany );\n\t}\n\n\t/**\n\t * Saves and handles an attribute change.\n\t *\n\t * @private\n\t * @param {module:engine/model/item~Item} item\n\t */\n\t_markAttribute( item ) {\n\t\tconst changeItem = { type: 'attribute', offset: item.startOffset, howMany: item.offsetSize, count: this._changeCount++ };\n\n\t\tthis._markChange( item.parent, changeItem );\n\t}\n\n\t/**\n\t * Saves and handles a model change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Object} changeItem\n\t */\n\t_markChange( parent, changeItem ) {\n\t\t// First, make a snapshot of this parent's children (it will be made only if it was not made before).\n\t\tthis._makeSnapshot( parent );\n\n\t\t// Then, get all changes that already were done on the element (empty array if this is the first change).\n\t\tconst changes = this._getChangesForElement( parent );\n\n\t\t// Then, look through all the changes, and transform them or the new change.\n\t\tthis._handleChange( changeItem, changes );\n\n\t\t// Add the new change.\n\t\tchanges.push( changeItem );\n\n\t\t// Remove incorrect changes. During transformation some change might be, for example, included in another.\n\t\t// In that case, the change will have `howMany` property set to `0` or less. We need to remove those changes.\n\t\tfor ( let i = 0; i < changes.length; i++ ) {\n\t\t\tif ( changes[ i ].howMany < 1 ) {\n\t\t\t\tchanges.splice( i, 1 );\n\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets an array of changes that have already been saved for a given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {Array.<Object>}\n\t */\n\t_getChangesForElement( element ) {\n\t\tlet changes;\n\n\t\tif ( this._changesInElement.has( element ) ) {\n\t\t\tchanges = this._changesInElement.get( element );\n\t\t} else {\n\t\t\tchanges = [];\n\n\t\t\tthis._changesInElement.set( element, changes );\n\t\t}\n\n\t\treturn changes;\n\t}\n\n\t/**\n\t * Saves a children snapshot for a given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t */\n\t_makeSnapshot( element ) {\n\t\tif ( !this._elementSnapshots.has( element ) ) {\n\t\t\tthis._elementSnapshots.set( element, _getChildrenSnapshot( element.getChildren() ) );\n\t\t}\n\t}\n\n\t/**\n\t * For a given newly saved change, compares it with a change already done on the element and modifies the incoming\n\t * change and/or the old change.\n\t *\n\t * @private\n\t * @param {Object} inc Incoming (new) change.\n\t * @param {Array.<Object>} changes An array containing all the changes done on that element.\n\t */\n\t_handleChange( inc, changes ) {\n\t\t// We need a helper variable that will store how many nodes are to be still handled for this change item.\n\t\t// `nodesToHandle` (how many nodes still need to be handled) and `howMany` (how many nodes were affected)\n\t\t// needs to be differentiated.\n\t\t//\n\t\t// This comes up when there are multiple changes that are affected by `inc` change item.\n\t\t//\n\t\t// For example: assume two insert changes: `{ offset: 2, howMany: 1 }` and `{ offset: 5, howMany: 1 }`.\n\t\t// Assume that `inc` change is remove `{ offset: 2, howMany: 2, nodesToHandle: 2 }`.\n\t\t//\n\t\t// Then, we:\n\t\t// - \"forget\" about first insert change (it is \"eaten\" by remove),\n\t\t// - because of that, at the end we will want to remove only one node (`nodesToHandle = 1`),\n\t\t// - but still we have to change offset of the second insert change from `5` to `3`!\n\t\t//\n\t\t// So, `howMany` does not change throughout items transformation and keeps information about how many nodes were affected,\n\t\t// while `nodesToHandle` means how many nodes need to be handled after the change item is transformed by other changes.\n\t\tinc.nodesToHandle = inc.howMany;\n\n\t\tfor ( const old of changes ) {\n\t\t\tconst incEnd = inc.offset + inc.howMany;\n\t\t\tconst oldEnd = old.offset + old.howMany;\n\n\t\t\tif ( inc.type == 'insert' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\told.howMany += inc.nodesToHandle;\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\tif ( inc.offset < old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\t// This case is more complicated, because attribute change has to be split into two.\n\t\t\t\t\t\t// Example (assume that uppercase and lowercase letters mean different attributes):\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// initial state:\t\tabcxyz\n\t\t\t\t\t\t// attribute change:\taBCXYz\n\t\t\t\t\t\t// incoming insert:\t\taBCfooXYz\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Change ranges cannot intersect because each item has to be described exactly (it was either\n\t\t\t\t\t\t// not changed, inserted, removed, or its attribute was changed). That's why old attribute\n\t\t\t\t\t\t// change has to be split and both parts has to be handled separately from now on.\n\t\t\t\t\t\tconst howMany = old.howMany;\n\n\t\t\t\t\t\told.howMany = inc.offset - old.offset;\n\n\t\t\t\t\t\t// Add the second part of attribute change to the beginning of processed array so it won't\n\t\t\t\t\t\t// be processed again in this loop.\n\t\t\t\t\t\tchanges.unshift( {\n\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\toffset: incEnd,\n\t\t\t\t\t\t\thowMany: howMany - old.howMany,\n\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( inc.type == 'remove' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( incEnd <= oldEnd ) {\n\t\t\t\t\t\tif ( inc.offset < old.offset ) {\n\t\t\t\t\t\t\tconst intersectionLength = incEnd - old.offset;\n\n\t\t\t\t\t\t\told.offset = inc.offset;\n\n\t\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t\t\tinc.nodesToHandle -= intersectionLength;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\told.howMany -= inc.nodesToHandle;\n\t\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\t\tinc.nodesToHandle -= old.howMany;\n\t\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\t\tconst intersectionLength = oldEnd - inc.offset;\n\n\t\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t\t\tinc.nodesToHandle -= intersectionLength;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < old.offset ) {\n\t\t\t\t\t\tinc.nodesToHandle += old.howMany;\n\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < old.offset ) {\n\t\t\t\t\t\tconst intersectionLength = incEnd - old.offset;\n\n\t\t\t\t\t\told.offset = inc.offset;\n\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\tif ( incEnd <= oldEnd ) {\n\t\t\t\t\t\t\t// On first sight in this case we don't need to split attribute operation into two.\n\t\t\t\t\t\t\t// However the changes set is later converted to actions (see `_generateActionsFromChanges`).\n\t\t\t\t\t\t\t// For that reason, no two changes may intersect.\n\t\t\t\t\t\t\t// So we cannot have an attribute change that \"contains\" remove change.\n\t\t\t\t\t\t\t// Attribute change needs to be split.\n\t\t\t\t\t\t\tconst howMany = old.howMany;\n\n\t\t\t\t\t\t\told.howMany = inc.offset - old.offset;\n\n\t\t\t\t\t\t\tconst howManyAfter = howMany - old.howMany - inc.nodesToHandle;\n\n\t\t\t\t\t\t\t// Add the second part of attribute change to the beginning of processed array so it won't\n\t\t\t\t\t\t\t// be processed again in this loop.\n\t\t\t\t\t\t\tchanges.unshift( {\n\t\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\t\toffset: inc.offset,\n\t\t\t\t\t\t\t\thowMany: howManyAfter,\n\t\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\told.howMany -= oldEnd - inc.offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( inc.type == 'attribute' ) {\n\t\t\t\t// In case of attribute change, `howMany` should be kept same as `nodesToHandle`. It's not an error.\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( inc.offset < old.offset && incEnd > old.offset ) {\n\t\t\t\t\t\tif ( incEnd > oldEnd ) {\n\t\t\t\t\t\t\t// This case is similar to a case described when incoming change was insert and old change was attribute.\n\t\t\t\t\t\t\t// See comment above.\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// This time incoming change is attribute. We need to split incoming change in this case too.\n\t\t\t\t\t\t\t// However this time, the second part of the attribute change needs to be processed further\n\t\t\t\t\t\t\t// because there might be other changes that it collides with.\n\t\t\t\t\t\t\tconst attributePart = {\n\t\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\t\toffset: oldEnd,\n\t\t\t\t\t\t\t\thowMany: incEnd - oldEnd,\n\t\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tthis._handleChange( attributePart, changes );\n\n\t\t\t\t\t\t\tchanges.push( attributePart );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tinc.nodesToHandle = old.offset - inc.offset;\n\t\t\t\t\t\tinc.howMany = inc.nodesToHandle;\n\t\t\t\t\t} else if ( inc.offset >= old.offset && inc.offset < oldEnd ) {\n\t\t\t\t\t\tif ( incEnd > oldEnd ) {\n\t\t\t\t\t\t\tinc.nodesToHandle = incEnd - oldEnd;\n\t\t\t\t\t\t\tinc.offset = oldEnd;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\t// This is a case when attribute change \"contains\" remove change.\n\t\t\t\t\t// The attribute change needs to be split into two because changes cannot intersect.\n\t\t\t\t\tif ( inc.offset < old.offset && incEnd > old.offset ) {\n\t\t\t\t\t\tconst attributePart = {\n\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\toffset: old.offset,\n\t\t\t\t\t\t\thowMany: incEnd - old.offset,\n\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis._handleChange( attributePart, changes );\n\n\t\t\t\t\t\tchanges.push( attributePart );\n\n\t\t\t\t\t\tinc.nodesToHandle = old.offset - inc.offset;\n\t\t\t\t\t\tinc.howMany = inc.nodesToHandle;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\t// There are only two conflicting scenarios possible here:\n\t\t\t\t\tif ( inc.offset >= old.offset && incEnd <= oldEnd ) {\n\t\t\t\t\t\t// `old` change includes `inc` change, or they are the same.\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\tinc.howMany = 0;\n\t\t\t\t\t\tinc.offset = 0;\n\t\t\t\t\t} else if ( inc.offset <= old.offset && incEnd >= oldEnd ) {\n\t\t\t\t\t\t// `inc` change includes `old` change.\n\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinc.howMany = inc.nodesToHandle;\n\t\tdelete inc.nodesToHandle;\n\t}\n\n\t/**\n\t * Returns an object with a single insert change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent The element in which the change happened.\n\t * @param {Number} offset The offset at which change happened.\n\t * @param {String} name The name of the removed element or `'$text'` for a character.\n\t * @returns {Object} The diff item.\n\t */\n\t_getInsertDiff( parent, offset, name ) {\n\t\treturn {\n\t\t\ttype: 'insert',\n\t\t\tposition: Position._createAt( parent, offset ),\n\t\t\tname,\n\t\t\tlength: 1,\n\t\t\tchangeCount: this._changeCount++\n\t\t};\n\t}\n\n\t/**\n\t * Returns an object with a single remove change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent The element in which change happened.\n\t * @param {Number} offset The offset at which change happened.\n\t * @param {String} name The name of the removed element or `'$text'` for a character.\n\t * @returns {Object} The diff item.\n\t */\n\t_getRemoveDiff( parent, offset, name ) {\n\t\treturn {\n\t\t\ttype: 'remove',\n\t\t\tposition: Position._createAt( parent, offset ),\n\t\t\tname,\n\t\t\tlength: 1,\n\t\t\tchangeCount: this._changeCount++\n\t\t};\n\t}\n\n\t/**\n\t * Returns an array of objects where each one is a single attribute change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range The range where the change happened.\n\t * @param {Map} oldAttributes A map, map iterator or compatible object that contains attributes before the change.\n\t * @param {Map} newAttributes A map, map iterator or compatible object that contains attributes after the change.\n\t * @returns {Array.<Object>} An array containing one or more diff items.\n\t */\n\t_getAttributesDiff( range, oldAttributes, newAttributes ) {\n\t\t// Results holder.\n\t\tconst diffs = [];\n\n\t\t// Clone new attributes as we will be performing changes on this object.\n\t\tnewAttributes = new Map( newAttributes );\n\n\t\t// Look through old attributes.\n\t\tfor ( const [ key, oldValue ] of oldAttributes ) {\n\t\t\t// Check what is the new value of the attribute (or if it was removed).\n\t\t\tconst newValue = newAttributes.has( key ) ? newAttributes.get( key ) : null;\n\n\t\t\t// If values are different (or attribute was removed)...\n\t\t\tif ( newValue !== oldValue ) {\n\t\t\t\t// Add diff item.\n\t\t\t\tdiffs.push( {\n\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\tposition: range.start,\n\t\t\t\t\trange: range.clone(),\n\t\t\t\t\tlength: 1,\n\t\t\t\t\tattributeKey: key,\n\t\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\t\tattributeNewValue: newValue,\n\t\t\t\t\tchangeCount: this._changeCount++\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Prevent returning two diff items for the same change.\n\t\t\tnewAttributes.delete( key );\n\t\t}\n\n\t\t// Look through new attributes that weren't handled above.\n\t\tfor ( const [ key, newValue ] of newAttributes ) {\n\t\t\t// Each of them is a new attribute. Add diff item.\n\t\t\tdiffs.push( {\n\t\t\t\ttype: 'attribute',\n\t\t\t\tposition: range.start,\n\t\t\t\trange: range.clone(),\n\t\t\t\tlength: 1,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: newValue,\n\t\t\t\tchangeCount: this._changeCount++\n\t\t\t} );\n\t\t}\n\n\t\treturn diffs;\n\t}\n\n\t/**\n\t * Checks whether given element or any of its parents is an element that is buffered as an inserted element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element Element to check.\n\t * @returns {Boolean}\n\t */\n\t_isInInsertedElement( element ) {\n\t\tconst parent = element.parent;\n\n\t\tif ( !parent ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst changes = this._changesInElement.get( parent );\n\t\tconst offset = element.startOffset;\n\n\t\tif ( changes ) {\n\t\t\tfor ( const change of changes ) {\n\t\t\t\tif ( change.type == 'insert' && offset >= change.offset && offset < change.offset + change.howMany ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._isInInsertedElement( parent );\n\t}\n\n\t/**\n\t * Removes deeply all buffered changes that are registered in elements from range specified by `parent`, `offset`\n\t * and `howMany`.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_removeAllNestedChanges( parent, offset, howMany ) {\n\t\tconst range = new Range( Position._createAt( parent, offset ), Position._createAt( parent, offset + howMany ) );\n\n\t\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\tthis._elementSnapshots.delete( item );\n\t\t\t\tthis._changesInElement.delete( item );\n\n\t\t\t\tthis._removeAllNestedChanges( item, 0, item.maxOffset );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Returns an array that is a copy of passed child list with the exception that text nodes are split to one or more\n// objects, each representing one character and attributes set on that character.\nfunction _getChildrenSnapshot( children ) {\n\tconst snapshot = [];\n\n\tfor ( const child of children ) {\n\t\tif ( child.is( 'text' ) ) {\n\t\t\tfor ( let i = 0; i < child.data.length; i++ ) {\n\t\t\t\tsnapshot.push( {\n\t\t\t\t\tname: '$text',\n\t\t\t\t\tattributes: new Map( child.getAttributes() )\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\t\t\tsnapshot.push( {\n\t\t\t\tname: child.name,\n\t\t\t\tattributes: new Map( child.getAttributes() )\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn snapshot;\n}\n\n// Generates array of actions for given changes set.\n// It simulates what `diff` function does.\n// Generated actions are:\n// - 'e' for 'equal' - when item at that position did not change,\n// - 'i' for 'insert' - when item at that position was inserted,\n// - 'r' for 'remove' - when item at that position was removed,\n// - 'a' for 'attribute' - when item at that position has it attributes changed.\n//\n// Example (assume that uppercase letters have bold attribute, compare with function code):\n//\n// children before:\tfooBAR\n// children after:\tfoxybAR\n//\n// changes: type: remove, offset: 1, howMany: 1\n//\t\t\ttype: insert, offset: 2, howMany: 2\n//\t\t\ttype: attribute, offset: 4, howMany: 1\n//\n// expected actions: equal (f), remove (o), equal (o), insert (x), insert (y), attribute (b), equal (A), equal (R)\n//\n// steps taken by th script:\n//\n// 1. change = \"type: remove, offset: 1, howMany: 1\"; offset = 0; oldChildrenHandled = 0\n//    1.1 between this change and the beginning is one not-changed node, fill with one equal action, one old child has been handled\n//    1.2 this change removes one node, add one remove action\n//    1.3 change last visited `offset` to 1\n//    1.4 since an old child has been removed, one more old child has been handled\n//    1.5 actions at this point are: equal, remove\n//\n// 2. change = \"type: insert, offset: 2, howMany: 2\"; offset = 1; oldChildrenHandled = 2\n//    2.1 between this change and previous change is one not-changed node, add equal action, another one old children has been handled\n//    2.2 this change inserts two nodes, add two insert actions\n//    2.3 change last visited offset to the end of the inserted range, that is 4\n//    2.4 actions at this point are: equal, remove, equal, insert, insert\n//\n// 3. change = \"type: attribute, offset: 4, howMany: 1\"; offset = 4, oldChildrenHandled = 3\n//    3.1 between this change and previous change are no not-changed nodes\n//    3.2 this change changes one node, add one attribute action\n//    3.3 change last visited `offset` to the end of change range, that is 5\n//    3.4 since an old child has been changed, one more old child has been handled\n//    3.5 actions at this point are: equal, remove, equal, insert, insert, attribute\n//\n// 4. after loop oldChildrenHandled = 4, oldChildrenLength = 6 (fooBAR is 6 characters)\n//    4.1 fill up with two equal actions\n//\n// The result actions are: equal, remove, equal, insert, insert, attribute, equal, equal.\nfunction _generateActionsFromChanges( oldChildrenLength, changes ) {\n\tconst actions = [];\n\n\tlet offset = 0;\n\tlet oldChildrenHandled = 0;\n\n\t// Go through all buffered changes.\n\tfor ( const change of changes ) {\n\t\t// First, fill \"holes\" between changes with \"equal\" actions.\n\t\tif ( change.offset > offset ) {\n\t\t\tfor ( let i = 0; i < change.offset - offset; i++ ) {\n\t\t\t\tactions.push( 'e' );\n\t\t\t}\n\n\t\t\toldChildrenHandled += change.offset - offset;\n\t\t}\n\n\t\t// Then, fill up actions accordingly to change type.\n\t\tif ( change.type == 'insert' ) {\n\t\t\tfor ( let i = 0; i < change.howMany; i++ ) {\n\t\t\t\tactions.push( 'i' );\n\t\t\t}\n\n\t\t\t// The last handled offset is after inserted range.\n\t\t\toffset = change.offset + change.howMany;\n\t\t} else if ( change.type == 'remove' ) {\n\t\t\tfor ( let i = 0; i < change.howMany; i++ ) {\n\t\t\t\tactions.push( 'r' );\n\t\t\t}\n\n\t\t\t// The last handled offset is at the position where the nodes were removed.\n\t\t\toffset = change.offset;\n\t\t\t// We removed `howMany` old nodes, update `oldChildrenHandled`.\n\t\t\toldChildrenHandled += change.howMany;\n\t\t} else {\n\t\t\tactions.push( ...'a'.repeat( change.howMany ).split( '' ) );\n\n\t\t\t// The last handled offset is at the position after the changed range.\n\t\t\toffset = change.offset + change.howMany;\n\t\t\t// We changed `howMany` old nodes, update `oldChildrenHandled`.\n\t\t\toldChildrenHandled += change.howMany;\n\t\t}\n\t}\n\n\t// Fill \"equal\" actions at the end of actions set. Use `oldChildrenHandled` to see how many children\n\t// has not been changed / removed at the end of their parent.\n\tif ( oldChildrenHandled < oldChildrenLength ) {\n\t\tfor ( let i = 0; i < oldChildrenLength - oldChildrenHandled - offset; i++ ) {\n\t\t\tactions.push( 'e' );\n\t\t}\n\t}\n\n\treturn actions;\n}\n\n// Filter callback for Array.filter that filters out change entries that are in graveyard.\nfunction _changesInGraveyardFilter( entry ) {\n\tconst posInGy = entry.position && entry.position.root.rootName == '$graveyard';\n\tconst rangeInGy = entry.range && entry.range.root.rootName == '$graveyard';\n\n\treturn !posInGy && !rangeInGy;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/history\n */\n\n/**\n * `History` keeps the track of all the operations applied to the {@link module:engine/model/document~Document document}.\n */\nexport default class History {\n\t/**\n\t * Creates an empty History instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Operations added to the history.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/model/operation/operation~Operation>} module:engine/model/history~History#_operations\n\t\t */\n\t\tthis._operations = [];\n\n\t\t/**\n\t\t * Holds an information which {@link module:engine/model/operation/operation~Operation operation} undoes which\n\t\t * {@link module:engine/model/operation/operation~Operation operation}.\n\t\t *\n\t\t * Keys of the map are \"undoing operations\", that is operations that undone some other operations. For each key, the\n\t\t * value is an operation that has been undone by the \"undoing operation\".\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/model/history~History#_undoPairs\n\t\t */\n\t\tthis._undoPairs = new Map();\n\n\t\t/**\n\t\t * Holds all undone operations.\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<module:engine/model/operation/operation~Operation>} module:engine/model/history~History#_undoneOperations\n\t\t */\n\t\tthis._undoneOperations = new Set();\n\t}\n\n\t/**\n\t * Adds an operation to the history.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to add.\n\t */\n\taddOperation( operation ) {\n\t\tif ( this._operations.includes( operation ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._operations.push( operation );\n\t}\n\n\t/**\n\t * Returns operations added to the history.\n\t *\n\t * @param {Number} [from=0] Base version from which operations should be returned (inclusive). Defaults to `0`, which means\n\t * that operations from the first one will be returned.\n\t * @param {Number} [to=Number.POSITIVE_INFINITY] Base version up to which operations should be returned (exclusive).\n\t * Defaults to `Number.POSITIVE_INFINITY` which means that operations up to the last one will be returned.\n\t * @returns {Iterable.<module:engine/model/operation/operation~Operation>} Operations added to the history.\n\t */\n\tgetOperations( from = 0, to = Number.POSITIVE_INFINITY ) {\n\t\tif ( from < 0 ) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn this._operations.slice( from, to );\n\t}\n\n\t/**\n\t * Returns operation from the history that bases on given `baseVersion`.\n\t *\n\t * @param {Number} baseVersion Base version of the operation to get.\n\t * @returns {module:engine/model/operation/operation~Operation|null} Operation with given base version or `null` if\n\t * there is no such operation in history.\n\t */\n\tgetOperation( baseVersion ) {\n\t\treturn this._operations[ baseVersion ];\n\t}\n\n\t/**\n\t * Marks in history that one operation is an operation that is undoing the other operation. By marking operation this way,\n\t * history is keeping more context information about operations, which helps in operational transformation.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} undoneOperation Operation which is undone by `undoingOperation`.\n\t * @param {module:engine/model/operation/operation~Operation} undoingOperation Operation which undoes `undoneOperation`.\n\t */\n\tsetOperationAsUndone( undoneOperation, undoingOperation ) {\n\t\tthis._undoPairs.set( undoingOperation, undoneOperation );\n\t\tthis._undoneOperations.add( undoneOperation );\n\t}\n\n\t/**\n\t * Checks whether given `operation` is undoing any other operation.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to check.\n\t * @returns {Boolean} `true` if given `operation` is undoing any other operation, `false` otherwise.\n\t */\n\tisUndoingOperation( operation ) {\n\t\treturn this._undoPairs.has( operation );\n\t}\n\n\t/**\n\t * Checks whether given `operation` has been undone by any other operation.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to check.\n\t * @returns {Boolean} `true` if given `operation` has been undone any other operation, `false` otherwise.\n\t */\n\tisUndoneOperation( operation ) {\n\t\treturn this._undoneOperations.has( operation );\n\t}\n\n\t/**\n\t * For given `undoingOperation`, returns the operation which has been undone by it.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} undoingOperation\n\t * @returns {module:engine/model/operation/operation~Operation|undefined} Operation that has been undone by given\n\t * `undoingOperation` or `undefined` if given `undoingOperation` is not undoing any other operation.\n\t */\n\tgetUndoneOperation( undoingOperation ) {\n\t\treturn this._undoPairs.get( undoingOperation );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils to handle unicode characters.\n *\n * @module utils/unicode\n */\n\n/**\n * Checks whether given `character` is a combining mark.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isCombiningMark( character ) {\n\treturn !!character && character.length == 1 && /[\\u0300-\\u036f\\u1ab0-\\u1aff\\u1dc0-\\u1dff\\u20d0-\\u20ff\\ufe20-\\ufe2f]/.test( character );\n}\n\n/**\n * Checks whether given `character` is a high half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isHighSurrogateHalf( character ) {\n\treturn !!character && character.length == 1 && /[\\ud800-\\udbff]/.test( character );\n}\n\n/**\n * Checks whether given `character` is a low half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isLowSurrogateHalf( character ) {\n\treturn !!character && character.length == 1 && /[\\udc00-\\udfff]/.test( character );\n}\n\n/**\n * Checks whether given offset in a string is inside a surrogate pair (between two surrogate halves).\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideSurrogatePair( string, offset ) {\n\treturn isHighSurrogateHalf( string.charAt( offset - 1 ) ) && isLowSurrogateHalf( string.charAt( offset ) );\n}\n\n/**\n * Checks whether given offset in a string is between base character and combining mark or between two combining marks.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideCombinedSymbol( string, offset ) {\n\treturn isCombiningMark( string.charAt( offset ) );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/document\n */\n\nimport Differ from './differ';\nimport RootElement from './rootelement';\nimport History from './history';\nimport DocumentSelection from './documentselection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\nimport { clone } from 'lodash-es';\n\nconst graveyardName = '$graveyard';\n\n/**\n * Data model's document. It contains the model's structure, its selection and the history of changes.\n *\n * Read more about working with the model in\n * {@glink framework/guides/architecture/editing-engine#model introduction to the the editing engine's architecture}.\n *\n * Usually, the document contains just one {@link module:engine/model/document~Document#roots root element}, so\n * you can retrieve it by just calling {@link module:engine/model/document~Document#getRoot} without specifying its name:\n *\n *\t\tmodel.document.getRoot(); // -> returns the main root\n *\n * However, the document may contain multiple roots – e.g. when the editor has multiple editable areas\n * (e.g. a title and a body of a message).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Document {\n\t/**\n\t * Creates an empty document instance with no {@link #roots} (other than\n\t * the {@link #graveyard graveyard root}).\n\t */\n\tconstructor( model ) {\n\t\t/**\n\t\t * The {@link module:engine/model/model~Model model} that the document is a part of.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The document version. It starts from `0` and every operation increases the version number. It is used to ensure that\n\t\t * operations are applied on a proper document version.\n\t\t *\n\t\t * If the {@link module:engine/model/operation/operation~Operation#baseVersion base version} does not match the document version,\n\t\t * a {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Number}\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * The document's history.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/history~History}\n\t\t */\n\t\tthis.history = new History( this );\n\n\t\t/**\n\t\t * The selection in this document.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/documentselection~DocumentSelection}\n\t\t */\n\t\tthis.selection = new DocumentSelection( this );\n\n\t\t/**\n\t\t * A list of roots that are owned and managed by this document. Use {@link #createRoot} and\n\t\t * {@link #getRoot} to manipulate it.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils/collection~Collection}\n\t\t */\n\t\tthis.roots = new Collection( { idProperty: 'rootName' } );\n\n\t\t/**\n\t\t * The model differ object. Its role is to buffer changes done on the model document and then calculate a diff of those changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/differ~Differ}\n\t\t */\n\t\tthis.differ = new Differ( model.markers );\n\n\t\t/**\n\t\t * Post-fixer callbacks registered to the model document.\n\t\t *\n\t\t * @private\n\t\t * @type {Set.<Function>}\n\t\t */\n\t\tthis._postFixers = new Set();\n\n\t\t/**\n\t\t * A boolean indicates whether the selection has changed until\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._hasSelectionChangedFromTheLastChangeBlock = false;\n\n\t\t// Graveyard tree root. Document always have a graveyard root, which stores removed nodes.\n\t\tthis.createRoot( '$root', graveyardName );\n\n\t\t// First, if the operation is a document operation check if it's base version is correct.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation && operation.baseVersion !== this.version ) {\n\t\t\t\t/**\n\t\t\t\t * Only operations with matching versions can be applied.\n\t\t\t\t *\n\t\t\t\t * @error document-applyOperation-wrong-version\n\t\t\t\t * @param {module:engine/model/operation/operation~Operation} operation\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-document-applyOperation-wrong-version: Only operations with matching versions can be applied.',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ operation }\n\t\t\t\t);\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\t// Then, still before an operation is applied on model, buffer the change in differ.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation ) {\n\t\t\t\tthis.differ.bufferOperation( operation );\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// After the operation is applied, bump document's version and add the operation to the history.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation ) {\n\t\t\t\tthis.version++;\n\t\t\t\tthis.history.addOperation( operation );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Listen to selection changes. If selection changed, mark it.\n\t\tthis.listenTo( this.selection, 'change', () => {\n\t\t\tthis._hasSelectionChangedFromTheLastChangeBlock = true;\n\t\t} );\n\n\t\t// Buffer marker changes.\n\t\t// This is not covered in buffering operations because markers may change outside of them (when they\n\t\t// are modified using `model.markers` collection, not through `MarkerOperation`).\n\t\tthis.listenTo( model.markers, 'update', ( evt, marker, oldRange, newRange ) => {\n\t\t\t// Whenever marker is updated, buffer that change.\n\t\t\tthis.differ.bufferMarkerChange( marker.name, oldRange, newRange, marker.affectsData );\n\n\t\t\tif ( oldRange === null ) {\n\t\t\t\t// If this is a new marker, add a listener that will buffer change whenever marker changes.\n\t\t\t\tmarker.on( 'change', ( evt, oldRange ) => {\n\t\t\t\t\tthis.differ.bufferMarkerChange( marker.name, oldRange, marker.getRange(), marker.affectsData );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * The graveyard tree root. A document always has a graveyard root that stores removed nodes.\n\t *\n\t * @readonly\n\t * @member {module:engine/model/rootelement~RootElement}\n\t */\n\tget graveyard() {\n\t\treturn this.getRoot( graveyardName );\n\t}\n\n\t/**\n\t * Creates a new root.\n\t *\n\t * @param {String} [elementName='$root'] The element name. Defaults to `'$root'` which also has some basic schema defined\n\t * (`$block`s are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.\n\t * @param {String} [rootName='main'] A unique root name.\n\t * @returns {module:engine/model/rootelement~RootElement} The created root.\n\t */\n\tcreateRoot( elementName = '$root', rootName = 'main' ) {\n\t\tif ( this.roots.get( rootName ) ) {\n\t\t\t/**\n\t\t\t * A root with the specified name already exists.\n\t\t\t *\n\t\t\t * @error model-document-createRoot-name-exists\n\t\t\t * @param {module:engine/model/document~Document} doc\n\t\t\t * @param {String} name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-document-createRoot-name-exists: Root with specified name already exists.',\n\t\t\t\tthis,\n\t\t\t\t{ name: rootName }\n\t\t\t);\n\t\t}\n\n\t\tconst root = new RootElement( this, elementName, rootName );\n\t\tthis.roots.add( root );\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * Removes all event listeners set by the document instance.\n\t */\n\tdestroy() {\n\t\tthis.selection.destroy();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Returns a root by its name.\n\t *\n\t * @param {String} [name='main'] A unique root name.\n\t * @returns {module:engine/model/rootelement~RootElement|null} The root registered under a given name or `null` when\n\t * there is no root with the given name.\n\t */\n\tgetRoot( name = 'main' ) {\n\t\treturn this.roots.get( name );\n\t}\n\n\t/**\n\t * Returns an array with names of all roots (without the {@link #graveyard}) added to the document.\n\t *\n\t * @returns {Array.<String>} Roots names.\n\t */\n\tgetRootNames() {\n\t\treturn Array.from( this.roots, root => root.rootName ).filter( name => name != graveyardName );\n\t}\n\n\t/**\n\t * Used to register a post-fixer callback. A post-fixer mechanism guarantees that the features\n\t * will operate on a correct model state.\n\t *\n\t * An execution of a feature may lead to an incorrect document tree state. The callbacks are used to fix the document tree after\n\t * it has changed. Post-fixers are fired just after all changes from the outermost change block were applied but\n\t * before the {@link module:engine/model/document~Document#event:change change event} is fired. If a post-fixer callback made\n\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n\t * not be fixed in the new document tree state.\n\t *\n\t * As a parameter, a post-fixer callback receives a {@link module:engine/model/writer~Writer writer} instance connected with the\n\t * executed changes block. Thanks to that, all changes done by the callback will be added to the same\n\t * {@link module:engine/model/batch~Batch batch} (and undo step) as the original changes. This makes post-fixer changes transparent\n\t * for the user.\n\t *\n\t * An example of a post-fixer is a callback that checks if all the data were removed from the editor. If so, the\n\t * callback should add an empty paragraph so that the editor is never empty:\n\t *\n\t *\t\tdocument.registerPostFixer( writer => {\n\t *\t\t\tconst changes = document.differ.getChanges();\n\t *\n\t *\t\t\t// Check if the changes lead to an empty root in the editor.\n\t *\t\t\tfor ( const entry of changes ) {\n\t *\t\t\t\tif ( entry.type == 'remove' && entry.position.root.isEmpty ) {\n\t *\t\t\t\t\twriter.insertElement( 'paragraph', entry.position.root, 0 );\n\t *\n\t *\t\t\t\t\t// It is fine to return early, even if multiple roots would need to be fixed.\n\t *\t\t\t\t\t// All post-fixers will be fired again, so if there are more empty roots, those will be fixed, too.\n\t *\t\t\t\t\treturn true;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @param {Function} postFixer\n\t */\n\tregisterPostFixer( postFixer ) {\n\t\tthis._postFixers.add( postFixer );\n\t}\n\n\t/**\n\t * A custom `toJSON()` method to solve child-parent circular dependencies.\n\t *\n\t * @returns {Object} A clone of this object with the document property changed to a string.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\t// Due to circular references we need to remove parent reference.\n\t\tjson.selection = '[engine.model.DocumentSelection]';\n\t\tjson.model = '[engine.model.Model]';\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Check if there were any changes done on document, and if so, call post-fixers,\n\t * fire `change` event for features and conversion and then reset the differ.\n\t * Fire `change:data` event when at least one operation or buffered marker changes the data.\n\t *\n\t * @protected\n\t * @fires change\n\t * @fires change:data\n\t * @param {module:engine/model/writer~Writer} writer The writer on which post-fixers will be called.\n\t */\n\t_handleChangeBlock( writer ) {\n\t\tif ( this._hasDocumentChangedFromTheLastChangeBlock() ) {\n\t\t\tthis._callPostFixers( writer );\n\n\t\t\t// Refresh selection attributes according to the final position in the model after the change.\n\t\t\tthis.selection.refresh();\n\n\t\t\tif ( this.differ.hasDataChanges() ) {\n\t\t\t\tthis.fire( 'change:data', writer.batch );\n\t\t\t} else {\n\t\t\t\tthis.fire( 'change', writer.batch );\n\t\t\t}\n\n\t\t\t// Theoretically, it is not necessary to refresh selection after change event because\n\t\t\t// post-fixers are the last who should change the model, but just in case...\n\t\t\tthis.selection.refresh();\n\n\t\t\tthis.differ.reset();\n\t\t}\n\n\t\tthis._hasSelectionChangedFromTheLastChangeBlock = false;\n\t}\n\n\t/**\n\t * Returns whether there is a buffered change or if the selection has changed from the last\n\t * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()` block}\n\t * or {@link module:engine/model/model~Model#change `change()` block}.\n\t *\n\t * @protected\n\t * @returns {Boolean} Returns `true` if document has changed from the last `change()` or `enqueueChange()` block.\n\t */\n\t_hasDocumentChangedFromTheLastChangeBlock() {\n\t\treturn !this.differ.isEmpty || this._hasSelectionChangedFromTheLastChangeBlock;\n\t}\n\n\t/**\n\t * Returns the default root for this document which is either the first root that was added to the document using\n\t * {@link #createRoot} or the {@link #graveyard graveyard root} if no other roots were created.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/rootelement~RootElement} The default root for this document.\n\t */\n\t_getDefaultRoot() {\n\t\tfor ( const root of this.roots ) {\n\t\t\tif ( root !== this.graveyard ) {\n\t\t\t\treturn root;\n\t\t\t}\n\t\t}\n\n\t\treturn this.graveyard;\n\t}\n\n\t/**\n\t * Returns the default range for this selection. The default range is a collapsed range that starts and ends\n\t * at the beginning of this selection's document {@link #_getDefaultRoot default root}.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getDefaultRange() {\n\t\tconst defaultRoot = this._getDefaultRoot();\n\t\tconst model = this.model;\n\t\tconst schema = model.schema;\n\n\t\t// Find the first position where the selection can be put.\n\t\tconst position = model.createPositionFromPath( defaultRoot, [ 0 ] );\n\t\tconst nearestRange = schema.getNearestSelectionRange( position );\n\n\t\t// If valid selection range is not found - return range collapsed at the beginning of the root.\n\t\treturn nearestRange || model.createRange( position );\n\t}\n\n\t/**\n\t * Checks whether a given {@link module:engine/model/range~Range range} is a valid range for\n\t * the {@link #selection document's selection}.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range A range to check.\n\t * @returns {Boolean} `true` if `range` is valid, `false` otherwise.\n\t */\n\t_validateSelectionRange( range ) {\n\t\treturn validateTextNodePosition( range.start ) && validateTextNodePosition( range.end );\n\t}\n\n\t/**\n\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer The writer on which post-fixer callbacks will be called.\n\t */\n\t_callPostFixers( writer ) {\n\t\tlet wasFixed = false;\n\n\t\tdo {\n\t\t\tfor ( const callback of this._postFixers ) {\n\t\t\t\t// Ensure selection attributes are up to date before each post-fixer.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/1673.\n\t\t\t\t//\n\t\t\t\t// It might be good to refresh the selection after each operation but at the moment it leads\n\t\t\t\t// to losing attributes for composition or and spell checking\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-typing/issues/188\n\t\t\t\tthis.selection.refresh();\n\n\t\t\t\twasFixed = callback( writer );\n\n\t\t\t\tif ( wasFixed ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while ( wasFixed );\n\t}\n\n\t/**\n\t * Fired after each {@link module:engine/model/model~Model#enqueueChange `enqueueChange()` block} or the outermost\n\t * {@link module:engine/model/model~Model#change `change()` block} was executed and the document was changed\n\t * during that block's execution.\n\t *\n\t * The changes which this event will cover include:\n\t *\n\t * * document structure changes,\n\t * * selection changes,\n\t * * marker changes.\n\t *\n\t * If you want to be notified about all these changes, then simply listen to this event like this:\n\t *\n\t *\t\tmodel.document.on( 'change', () => {\n\t *\t\t\tconsole.log( 'The document has changed!' );\n\t *\t\t} );\n\t *\n\t * If, however, you only want to be notified about the data changes, then use the\n\t * {@link module:engine/model/document~Document#event:change:data change:data} event,\n\t * which is fired for document structure changes and marker changes (which affects the data).\n\t *\n\t *\t\tmodel.document.on( 'change:data', () => {\n\t *\t\t\tconsole.log( 'The data has changed!' );\n\t *\t\t} );\n\t *\n\t * @event change\n\t * @param {module:engine/model/batch~Batch} batch The batch that was used in the executed changes block.\n\t */\n\n\t/**\n\t * It is a narrower version of the {@link #event:change} event. It is fired for changes which\n\t * affect the editor data. This is:\n\t *\n\t * * document structure changes,\n\t * * marker changes (which affects the data).\n\t *\n\t * If you want to be notified about the data changes, then listen to this event:\n\t *\n\t *\t\tmodel.document.on( 'change:data', () => {\n\t *\t\t\tconsole.log( 'The data has changed!' );\n\t *\t\t} );\n\t *\n\t * If you would like to listen to all document changes, then check out the\n\t * {@link module:engine/model/document~Document#event:change change} event.\n\t *\n\t * @event change:data\n\t * @param {module:engine/model/batch~Batch} batch The batch that was used in the executed changes block.\n\t */\n}\n\nmix( Document, EmitterMixin );\n\n// Checks whether given range boundary position is valid for document selection, meaning that is not between\n// unicode surrogate pairs or base character and combining marks.\nfunction validateTextNodePosition( rangeBoundary ) {\n\tconst textNode = rangeBoundary.textNode;\n\n\tif ( textNode ) {\n\t\tconst data = textNode.data;\n\t\tconst offset = rangeBoundary.offset - textNode.startOffset;\n\n\t\treturn !isInsideSurrogatePair( data, offset ) && !isInsideCombinedSymbol( data, offset );\n\t}\n\n\treturn true;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/markercollection\n */\n\nimport LiveRange from './liverange';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The collection of all {@link module:engine/model/markercollection~Marker markers} attached to the document.\n * It lets you {@link module:engine/model/markercollection~MarkerCollection#get get} markers or track them using\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} event.\n *\n * To create, change or remove makers use {@link module:engine/model/writer~Writer model writers'} methods:\n * {@link module:engine/model/writer~Writer#addMarker} or {@link module:engine/model/writer~Writer#removeMarker}. Since\n * the writer is the only proper way to change the data model it is not possible to change markers directly using this\n * collection. All markers created by the writer will be automatically added to this collection.\n *\n * By default there is one marker collection available as {@link module:engine/model/model~Model#markers model property}.\n *\n * @see module:engine/model/markercollection~Marker\n */\nexport default class MarkerCollection {\n\t/**\n\t * Creates a markers collection.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Stores {@link ~Marker markers} added to the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} #_markers\n\t\t */\n\t\tthis._markers = new Map();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link ~Marker markers} added to the collection.\n\t *\n\t * @returns {Iterable}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._markers.values();\n\t}\n\n\t/**\n\t * Checks if marker with given `markerName` is in the collection.\n\t *\n\t * @param {String} markerName Marker name.\n\t * @returns {Boolean} `true` if marker with given `markerName` is in the collection, `false` otherwise.\n\t */\n\thas( markerName ) {\n\t\treturn this._markers.has( markerName );\n\t}\n\n\t/**\n\t * Returns {@link ~Marker marker} with given `markerName`.\n\t *\n\t * @param {String} markerName Name of marker to get.\n\t * @returns {module:engine/model/markercollection~Marker|null} Marker with given name or `null` if such marker was\n\t * not added to the collection.\n\t */\n\tget( markerName ) {\n\t\treturn this._markers.get( markerName ) || null;\n\t}\n\n\t/**\n\t * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given\n\t * {@link module:engine/model/range~Range range}.\n\t *\n\t * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in\n\t * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired\n\t * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}\n\t * flag has changed.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of marker to set or marker instance to update.\n\t * @param {module:engine/model/range~Range} range Marker range.\n\t * @param {Boolean} [managedUsingOperations=false] Specifies whether the marker is managed using operations.\n\t * @param {Boolean} [affectsData=false] Specifies whether the marker affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t * @returns {module:engine/model/markercollection~Marker} `Marker` instance which was added or updated.\n\t */\n\t_set( markerOrName, range, managedUsingOperations = false, affectsData = false ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tconst oldRange = oldMarker.getRange();\n\t\t\tlet hasChanged = false;\n\n\t\t\tif ( !oldRange.isEqual( range ) ) {\n\t\t\t\toldMarker._attachLiveRange( LiveRange.fromRange( range ) );\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( managedUsingOperations != oldMarker.managedUsingOperations ) {\n\t\t\t\toldMarker._managedUsingOperations = managedUsingOperations;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( typeof affectsData === 'boolean' && affectsData != oldMarker.affectsData ) {\n\t\t\t\toldMarker._affectsData = affectsData;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( hasChanged ) {\n\t\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldRange, range );\n\t\t\t}\n\n\t\t\treturn oldMarker;\n\t\t}\n\n\t\tconst liveRange = LiveRange.fromRange( range );\n\t\tconst marker = new Marker( markerName, liveRange, managedUsingOperations, affectsData );\n\n\t\tthis._markers.set( markerName, marker );\n\t\tthis.fire( 'update:' + markerName, marker, null, range );\n\n\t\treturn marker;\n\t}\n\n\t/**\n\t * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String} markerOrName Marker or name of a marker to remove.\n\t * @returns {Boolean} `true` if marker was found and removed, `false` otherwise.\n\t */\n\t_remove( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tthis._markers.delete( markerName );\n\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldMarker.getRange(), null );\n\n\t\t\tthis._destroyMarker( oldMarker );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Fires an {@link module:engine/model/markercollection~MarkerCollection#event:update} event for the given {@link ~Marker marker}\n\t * but does not change the marker. Useful to force {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast\n\t * conversion} for the marker.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String} markerOrName Marker or name of a marker to refresh.\n\t */\n\t_refresh( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst marker = this._markers.get( markerName );\n\n\t\tif ( !marker ) {\n\t\t\tthrow new CKEditorError( 'markercollection-refresh-marker-not-exists: Marker with provided name does not exists.', this );\n\t\t}\n\n\t\tconst range = marker.getRange();\n\n\t\tthis.fire( 'update:' + markerName, marker, range, range, marker.managedUsingOperations, marker.affectsData );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersAtPosition( position ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().containsPosition( position ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which intersects with given {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {module:engine/model/range~Range} range\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersIntersectingRange( range ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().getIntersection( range ) !== null ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys marker collection and all markers inside it.\n\t */\n\tdestroy() {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tthis._destroyMarker( marker );\n\t\t}\n\n\t\tthis._markers = null;\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Iterates over all markers that starts with given `prefix`.\n\t *\n\t *\t\tconst markerFooA = markersCollection.set( 'foo:a', rangeFooA );\n\t *\t\tconst markerFooB = markersCollection.set( 'foo:b', rangeFooB );\n\t *\t\tconst markerBarA = markersCollection.set( 'bar:a', rangeBarA );\n\t *\t\tconst markerFooBarA = markersCollection.set( 'foobar:a', rangeFooBarA );\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'a' ) ); // []\n\t *\n\t * @param prefix\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersGroup( prefix ) {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tif ( marker.name.startsWith( prefix + ':' ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the marker.\n\t *\n\t * @private\n\t * @param {module:engine/model/markercollection~Marker} marker Marker to destroy.\n\t */\n\t_destroyMarker( marker ) {\n\t\tmarker.stopListening();\n\t\tmarker._detachLiveRange();\n\t}\n\n\t/**\n\t * Fired whenever marker is added, updated or removed from `MarkerCollection`.\n\t *\n\t * @event update\n\t * @param {module:engine/model/markercollection~Marker} marker Updated Marker.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the update. When is not defined it\n\t * means that marker is just added.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after update. When is not defined it\n\t * means that marker is just removed.\n\t */\n}\n\nmix( MarkerCollection, EmitterMixin );\n\n/**\n * `Marker` is a continuous parts of model (like a range), is named and represent some kind of information about marked\n * part of model document. In contrary to {@link module:engine/model/node~Node nodes}, which are building blocks of\n * model document tree, markers are not stored directly in document tree but in\n * {@link module:engine/model/model~Model#markers model markers' collection}. Still, they are document data, by giving\n * additional meaning to the part of a model document between marker start and marker end.\n *\n * In this sense, markers are similar to adding and converting attributes on nodes. The difference is that attribute is\n * connected with a given node (e.g. a character is bold no matter if it gets moved or content around it changes).\n * Markers on the other hand are continuous ranges and are characterized by their start and end position. This means that\n * any character in the marker is marked by the marker. For example, if a character is moved outside of marker it stops being\n * \"special\" and the marker is shrunk. Similarly, when a character is moved into the marker from other place in document\n * model, it starts being \"special\" and the marker is enlarged.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * Markers are built from a name and a range.\n *\n * Range of the marker is updated automatically when document changes, using\n * {@link module:engine/model/liverange~LiveRange live range} mechanism.\n *\n * Name is used to group and identify markers. Names have to be unique, but markers can be grouped by\n * using common prefixes, separated with `:`, for example: `user:john` or `search:3`. That's useful in term of creating\n * namespaces for custom elements (e.g. comments, highlights). You can use this prefixes in\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} listeners to listen on changes in a group of markers.\n * For instance: `model.markers.on( 'set:user', callback );` will be called whenever any `user:*` markers changes.\n *\n * There are two types of markers.\n *\n * 1. Markers managed directly, without using operations. They are added directly by {@link module:engine/model/writer~Writer}\n * to the {@link module:engine/model/markercollection~MarkerCollection} without any additional mechanism. They can be used\n * as bookmarks or visual markers. They are great for showing results of the find, or select link when the focus is in the input.\n *\n * 1. Markers managed using operations. These markers are also stored in {@link module:engine/model/markercollection~MarkerCollection}\n * but changes in these markers is managed the same way all other changes in the model structure - using operations.\n * Therefore, they are handled in the undo stack and synchronized between clients if the collaboration plugin is enabled.\n * This type of markers is useful for solutions like spell checking or comments.\n *\n * Both type of them should be added / updated by {@link module:engine/model/writer~Writer#addMarker}\n * and removed by {@link module:engine/model/writer~Writer#removeMarker} methods.\n *\n *\t\tmodel.change( ( writer ) => {\n * \t\t\tconst marker = writer.addMarker( name, { range, usingOperation: true } );\n *\n * \t\t\t// ...\n *\n * \t\t\twriter.removeMarker( marker );\n *\t\t} );\n *\n * See {@link module:engine/model/writer~Writer} to find more examples.\n *\n * Since markers need to track change in the document, for efficiency reasons, it is best to create and keep as little\n * markers as possible and remove them as soon as they are not needed anymore.\n *\n * Markers can be downcasted and upcasted.\n *\n * Markers downcast happens on {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} and\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} events.\n * Use {@link module:engine/conversion/downcasthelpers downcast converters} or attach a custom converter to mentioned events.\n * For {@link module:engine/controller/datacontroller~DataController data pipeline}, marker should be downcasted to an element.\n * Then, it can be upcasted back to a marker. Again, use {@link module:engine/conversion/upcasthelpers upcast converters} or\n * attach a custom converter to {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element}.\n *\n * `Marker` instances are created and destroyed only by {@link ~MarkerCollection MarkerCollection}.\n */\nclass Marker {\n\t/**\n\t * Creates a marker instance.\n\t *\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Range marked by the marker.\n\t * @param {Boolean} managedUsingOperations Specifies whether the marker is managed using operations.\n\t * @param {Boolean} affectsData Specifies whether the marker affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t */\n\tconstructor( name, liveRange, managedUsingOperations, affectsData ) {\n\t\t/**\n\t\t * Marker's name.\n\t\t *\n\t\t * @readonly\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Range marked by the marker.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/model/liverange~LiveRange}\n\t\t */\n\t\tthis._liveRange = this._attachLiveRange( liveRange );\n\n\t\t/**\n\t\t * Flag indicates if the marker is managed using operations or not.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._managedUsingOperations = managedUsingOperations;\n\n\t\t/**\n\t\t * Specifies whether the marker affects the data produced by the data pipeline\n\t\t * (is persisted in the editor's data).\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._affectsData = affectsData;\n\t}\n\n\t/**\n\t * A value indicating if the marker is managed using operations.\n\t * See {@link ~Marker marker class description} to learn more about marker types.\n\t * See {@link module:engine/model/writer~Writer#addMarker}.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget managedUsingOperations() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._managedUsingOperations;\n\t}\n\n\t/**\n\t * A value indicating if the marker changes the data.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget affectsData() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._affectsData;\n\t}\n\n\t/**\n\t * Returns current marker start position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetStart() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._liveRange.start.clone();\n\t}\n\n\t/**\n\t * Returns current marker end position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetEnd() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._liveRange.end.clone();\n\t}\n\n\t/**\n\t * Returns a range that represents the current state of the marker.\n\t *\n\t * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a\n\t * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only\n\t * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}\n\t * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every\n\t * time there is a need to read marker properties. This will guarantee that the marker has not been removed and\n\t * that it's data is up-to-date.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tgetRange() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.', this );\n\t\t}\n\n\t\treturn this._liveRange.toRange();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tmarker.is( 'marker' ); // -> true\n\t *\t\tmarker.is( 'model:marker' ); // -> true\n\t *\n\t *\t\tmarker.is( 'view:element' ); // -> false\n\t *\t\tmarker.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'marker' || type == 'model:marker';\n\t}\n\n\t/**\n\t * Binds new live range to the marker and detach the old one if is attached.\n\t *\n\t * @protected\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Live range to attach\n\t * @returns {module:engine/model/liverange~LiveRange} Attached live range.\n\t */\n\t_attachLiveRange( liveRange ) {\n\t\tif ( this._liveRange ) {\n\t\t\tthis._detachLiveRange();\n\t\t}\n\n\t\t// Delegating does not work with namespaces. Alternatively, we could delegate all events (using `*`).\n\t\tliveRange.delegate( 'change:range' ).to( this );\n\t\tliveRange.delegate( 'change:content' ).to( this );\n\n\t\tthis._liveRange = liveRange;\n\n\t\treturn liveRange;\n\t}\n\n\t/**\n\t * Unbinds and destroys currently attached live range.\n\t *\n\t * @protected\n\t */\n\t_detachLiveRange() {\n\t\tthis._liveRange.stopDelegating( 'change:range', this );\n\t\tthis._liveRange.stopDelegating( 'change:content', this );\n\t\tthis._liveRange.detach();\n\t\tthis._liveRange = null;\n\t}\n\n\t/**\n\t * Fired whenever {@link ~Marker#_liveRange marker range} is changed due to changes on {@link module:engine/model/document~Document}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:range LiveRange change:range event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:range\n\t * @event change:range\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n\n\t/**\n\t * Fired whenever change on {@link module:engine/model/document~Document} is done inside {@link ~Marker#_liveRange marker range}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:content LiveRange change:content event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:content\n\t * @event change:content\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n}\n\nmix( Marker, EmitterMixin );\n\n/**\n * Cannot use a {@link module:engine/model/markercollection~MarkerCollection#destroy destroyed marker} instance.\n *\n * @error marker-destroyed\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/insertcontent\n */\n\nimport Position from '../position';\nimport LivePosition from '../liveposition';\nimport Element from '../element';\nimport Range from '../range';\nimport DocumentSelection from '../documentselection';\nimport Selection from '../selection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Inserts content into the editor (specified selection) as one would expect the paste\n * functionality to work.\n *\n * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable` it will be modified\n * to the insertion selection (equal to a range to be selected after insertion).\n *\n * If `selectable` is not passed, the content will be inserted using the current selection of the model document.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertContent} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n * @param {module:engine/model/selection~Selectable} [selectable=model.document.selection]\n * Selection into which the content should be inserted.\n * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n * @returns {module:engine/model/range~Range} Range which contains all the performed changes. This is a range that, if removed,\n * would return the model to the state before the insertion. If no changes were preformed by `insertContent`, returns a range collapsed\n * at the insertion position.\n */\nexport default function insertContent( model, content, selectable, placeOrOffset ) {\n\treturn model.change( writer => {\n\t\tlet selection;\n\n\t\tif ( !selectable ) {\n\t\t\tselection = model.document.selection;\n\t\t} else if ( selectable instanceof Selection || selectable instanceof DocumentSelection ) {\n\t\t\tselection = selectable;\n\t\t} else {\n\t\t\tselection = writer.createSelection( selectable, placeOrOffset );\n\t\t}\n\n\t\tconst insertionPosition = selection.getFirstPosition();\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\tmodel.deleteContent( selection, { doNotAutoparagraph: true } );\n\t\t}\n\n\t\tconst insertion = new Insertion( model, writer, insertionPosition );\n\n\t\tlet nodesToInsert;\n\n\t\tif ( content.is( 'documentFragment' ) ) {\n\t\t\tnodesToInsert = content.getChildren();\n\t\t} else {\n\t\t\tnodesToInsert = [ content ];\n\t\t}\n\n\t\tinsertion.handleNodes( nodesToInsert, {\n\t\t\t// The set of children being inserted is the only set in this context\n\t\t\t// so it's the first and last (it's a hack ;)).\n\t\t\tisFirst: true,\n\t\t\tisLast: true\n\t\t} );\n\n\t\tconst newRange = insertion.getSelectionRange();\n\n\t\t/* istanbul ignore else */\n\t\tif ( newRange ) {\n\t\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\t\twriter.setSelection( newRange );\n\t\t\t} else {\n\t\t\t\tselection.setTo( newRange );\n\t\t\t}\n\t\t} else {\n\t\t\t// We are not testing else because it's a safe check for unpredictable edge cases:\n\t\t\t// an insertion without proper range to select.\n\t\t\t//\n\t\t\t// @if CK_DEBUG // console.warn( 'Cannot determine a proper selection range after insertion.' );\n\t\t}\n\n\t\tconst affectedRange = insertion.getAffectedRange() || model.createRange( insertionPosition );\n\n\t\tinsertion.destroy();\n\n\t\treturn affectedRange;\n\t} );\n}\n\n/**\n * Utility class for performing content insertion.\n *\n * @private\n */\nclass Insertion {\n\tconstructor( model, writer, position ) {\n\t\t/**\n\t\t * The model in context of which the insertion should be performed.\n\t\t *\n\t\t * @member {module:engine/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Batch to which operations will be added.\n\t\t *\n\t\t * @member {module:engine/controller/writer~Batch} #writer\n\t\t */\n\t\tthis.writer = writer;\n\n\t\t/**\n\t\t * The position at which (or near which) the next node will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} #position\n\t\t */\n\t\tthis.position = position;\n\n\t\t/**\n\t\t * Elements with which the inserted elements can be merged.\n\t\t *\n\t\t *\t\t<p>x^</p><p>y</p> + <p>z</p> (can merge to <p>x</p>)\n\t\t *\t\t<p>x</p><p>^y</p> + <p>z</p> (can merge to <p>y</p>)\n\t\t *\t\t<p>x^y</p> + <p>z</p> (can merge to <p>xy</p> which will be split during the action,\n\t\t *\t\t\t\t\t\t\t\tso both its pieces will be added to this set)\n\t\t *\n\t\t *\n\t\t * @member {Set} #canMergeWith\n\t\t */\n\t\tthis.canMergeWith = new Set( [ this.position.parent ] );\n\n\t\t/**\n\t\t * Schema of the model.\n\t\t *\n\t\t * @member {module:engine/model/schema~Schema} #schema\n\t\t */\n\t\tthis.schema = model.schema;\n\n\t\tthis._filterAttributesOf = [];\n\n\t\t/**\n\t\t * Beginning of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/liveposition~LivePosition|null} #_affectedStart\n\t\t */\n\t\tthis._affectedStart = null;\n\n\t\t/**\n\t\t * End of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/liveposition~LivePosition|null} #_affectedEnd\n\t\t */\n\t\tthis._affectedEnd = null;\n\t}\n\n\t/**\n\t * Handles insertion of a set of nodes.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to insert.\n\t * @param {Object} parentContext Context in which parent of these nodes was supposed to be inserted.\n\t * If the parent context is passed it means that the parent element was stripped (was not allowed).\n\t */\n\thandleNodes( nodes, parentContext ) {\n\t\tnodes = Array.from( nodes );\n\n\t\tfor ( let i = 0; i < nodes.length; i++ ) {\n\t\t\tconst node = nodes[ i ];\n\n\t\t\tthis._handleNode( node, {\n\t\t\t\tisFirst: i === 0 && parentContext.isFirst,\n\t\t\t\tisLast: ( i === ( nodes.length - 1 ) ) && parentContext.isLast\n\t\t\t} );\n\t\t}\n\n\t\t// TMP this will become a post-fixer.\n\t\tthis.schema.removeDisallowedAttributes( this._filterAttributesOf, this.writer );\n\t\tthis._filterAttributesOf = [];\n\t}\n\n\t/**\n\t * Returns range to be selected after insertion.\n\t * Returns `null` if there is no valid range to select after insertion.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetSelectionRange() {\n\t\tif ( this.nodeToSelect ) {\n\t\t\treturn Range._createOn( this.nodeToSelect );\n\t\t}\n\n\t\treturn this.model.schema.getNearestSelectionRange( this.position );\n\t}\n\n\t/**\n\t * Returns a range which contains all the performed changes. This is a range that, if removed, would return the model to the state\n\t * before the insertion. Returns `null` if no changes were done.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetAffectedRange() {\n\t\tif ( !this._affectedStart ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn new Range( this._affectedStart, this._affectedEnd );\n\t}\n\n\t/**\n\t * Destroys `Insertion` instance.\n\t */\n\tdestroy() {\n\t\tif ( this._affectedStart ) {\n\t\t\tthis._affectedStart.detach();\n\t\t}\n\n\t\tif ( this._affectedEnd ) {\n\t\t\tthis._affectedEnd.detach();\n\t\t}\n\t}\n\n\t/**\n\t * Handles insertion of a single node.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node\n\t * @param {Object} context\n\t * @param {Boolean} context.isFirst Whether the given node is the first one in the content to be inserted.\n\t * @param {Boolean} context.isLast Whether the given node is the last one in the content to be inserted.\n\t */\n\t_handleNode( node, context ) {\n\t\t// Let's handle object in a special way.\n\t\t// * They should never be merged with other elements.\n\t\t// * If they are not allowed in any of the selection ancestors, they could be either autoparagraphed or totally removed.\n\t\tif ( this.schema.isObject( node ) ) {\n\t\t\tthis._handleObject( node, context );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Try to find a place for the given node.\n\t\t// Split the position.parent's branch up to a point where the node can be inserted.\n\t\t// If it isn't allowed in the whole branch, then of course don't split anything.\n\t\tconst isAllowed = this._checkAndSplitToAllowedPosition( node, context );\n\n\t\tif ( !isAllowed ) {\n\t\t\tthis._handleDisallowedNode( node, context );\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._insert( node );\n\n\t\t// After the node was inserted we may try to merge it with its siblings.\n\t\t// This should happen only if it was the first and/or last of the nodes (so only with boundary nodes)\n\t\t// and only if the selection was in those elements initially.\n\t\t//\n\t\t// E.g.:\n\t\t// <p>x^</p> + <p>y</p> => <p>x</p><p>y</p> => <p>xy[]</p>\n\t\t// and:\n\t\t// <p>x^y</p> + <p>z</p> => <p>x</p>^<p>y</p> + <p>z</p> => <p>x</p><p>z</p><p>y</p> => <p>xz[]y</p>\n\t\t// but:\n\t\t// <p>x</p><p>^</p><p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging)\n\t\t// <p>x</p>[<img>]<p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging, note: after running deleteContents\n\t\t//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t it's exactly the same case as above)\n\t\tthis._mergeSiblingsOf( node, context );\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/element~Element} node The object element.\n\t * @param {Object} context\n\t */\n\t_handleObject( node, context ) {\n\t\t// Try finding it a place in the tree.\n\t\tif ( this._checkAndSplitToAllowedPosition( node ) ) {\n\t\t\tthis._insert( node );\n\t\t}\n\t\t// Try autoparagraphing.\n\t\telse {\n\t\t\tthis._tryAutoparagraphing( node, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The disallowed node which needs to be handled.\n\t * @param {Object} context\n\t */\n\t_handleDisallowedNode( node, context ) {\n\t\t// If the node is an element, try inserting its children (strip the parent).\n\t\tif ( node.is( 'element' ) ) {\n\t\t\tthis.handleNodes( node.getChildren(), context );\n\t\t}\n\t\t// If text is not allowed, try autoparagraphing it.\n\t\telse {\n\t\t\tthis._tryAutoparagraphing( node, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node to insert.\n\t */\n\t_insert( node ) {\n\t\t/* istanbul ignore if */\n\t\tif ( !this.schema.checkChild( this.position, node ) ) {\n\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t// Note that it would often be a silent issue if we insert node in a place where it's not allowed.\n\n\t\t\t/**\n\t\t\t * Given node cannot be inserted on the given position.\n\t\t\t *\n\t\t\t * @error insertcontent-wrong-position\n\t\t\t * @param {module:engine/model/node~Node} node Node to insert.\n\t\t\t * @param {module:engine/model/position~Position} position Position to insert the node at.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insertcontent-wrong-position: Given node cannot be inserted on the given position.',\n\t\t\t\tthis,\n\t\t\t\t{ node, position: this.position }\n\t\t\t);\n\t\t}\n\n\t\tconst livePos = LivePosition.fromPosition( this.position, 'toNext' );\n\n\t\tthis._setAffectedBoundaries( this.position );\n\t\tthis.writer.insert( node, this.position );\n\n\t\tthis.position = livePos.toPosition();\n\t\tlivePos.detach();\n\n\t\t// The last inserted object should be selected because we can't put a collapsed selection after it.\n\t\tif ( this.schema.isObject( node ) && !this.schema.checkChild( this.position, '$text' ) ) {\n\t\t\tthis.nodeToSelect = node;\n\t\t} else {\n\t\t\tthis.nodeToSelect = null;\n\t\t}\n\n\t\tthis._filterAttributesOf.push( node );\n\t}\n\n\t/**\n\t * Sets `_affectedStart` and `_affectedEnd` to the given `position`. Should be used before a change is done during insertion process to\n\t * mark the affected range.\n\t *\n\t * This method is used before inserting a node or splitting a parent node. `_affectedStart` and `_affectedEnd` are also changed\n\t * during merging, but the logic there is more complicated so it is left out of this function.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position\n\t */\n\t_setAffectedBoundaries( position ) {\n\t\t// Set affected boundaries stickiness so that those position will \"expand\" when something is inserted in between them:\n\t\t// <paragraph>Foo][bar</paragraph> -> <paragraph>Foo]xx[bar</paragraph>\n\t\t// This is why it cannot be a range but two separate positions.\n\t\tif ( !this._affectedStart ) {\n\t\t\tthis._affectedStart = LivePosition.fromPosition( position, 'toPrevious' );\n\t\t}\n\n\t\t// If `_affectedEnd` is before the new boundary position, expand `_affectedEnd`. This can happen if first inserted node was\n\t\t// inserted into the parent but the next node is moved-out of that parent:\n\t\t// (1) <paragraph>Foo][</paragraph> -> <paragraph>Foo]xx[</paragraph>\n\t\t// (2) <paragraph>Foo]xx[</paragraph> -> <paragraph>Foo]xx</paragraph><widget></widget>[\n\t\tif ( !this._affectedEnd || this._affectedEnd.isBefore( position ) ) {\n\t\t\tif ( this._affectedEnd ) {\n\t\t\t\tthis._affectedEnd.detach();\n\t\t\t}\n\n\t\t\tthis._affectedEnd = LivePosition.fromPosition( position, 'toNext' );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t */\n\t_mergeSiblingsOf( node, context ) {\n\t\tif ( !( node instanceof Element ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mergeLeft = this._canMergeLeft( node, context );\n\t\tconst mergeRight = this._canMergeRight( node, context );\n\t\tconst mergePosLeft = LivePosition._createBefore( node );\n\t\tmergePosLeft.stickiness = 'toNext';\n\t\tconst mergePosRight = LivePosition._createAfter( node );\n\t\tmergePosRight.stickiness = 'toNext';\n\n\t\tif ( mergeLeft ) {\n\t\t\tconst livePosition = LivePosition.fromPosition( this.position );\n\t\t\tlivePosition.stickiness = 'toNext';\n\n\t\t\t// If `_affectedStart` is sames as merge position, it means that the element \"marked\" by `_affectedStart` is going to be\n\t\t\t// removed and its contents will be moved. This won't transform `LivePosition` so `_affectedStart` needs to be moved\n\t\t\t// by hand to properly reflect affected range. (Due to `_affectedStart` and `_affectedEnd` stickiness, the \"range\" is\n\t\t\t// shown as `][`).\n\t\t\t//\n\t\t\t// Example - insert `<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>` at the end of `<paragraph>Foo^</paragraph>`:\n\t\t\t//\n\t\t\t// <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo]Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>\n\t\t\t//\n\t\t\t// Note, that if we are here then something must have been inserted, so `_affectedStart` and `_affectedEnd` have to be set.\n\t\t\tif ( this._affectedStart.isEqual( mergePosLeft ) ) {\n\t\t\t\tthis._affectedStart.detach();\n\t\t\t\tthis._affectedStart = LivePosition._createAt( mergePosLeft.nodeBefore, 'end', 'toPrevious' );\n\t\t\t}\n\n\t\t\tthis.writer.merge( mergePosLeft );\n\n\t\t\t// If only one element (the merged one) is in the \"affected range\", also move the affected range end appropriately.\n\t\t\t//\n\t\t\t// Example - insert `<paragraph>Abc</paragraph>` at the of `<paragraph>Foo^</paragraph>`:\n\t\t\t//\n\t\t\t// <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo]Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n\t\t\t// <paragraph>Foo]Abc[</paragraph><paragraph>Bar</paragraph>\n\t\t\tif ( mergePosLeft.isEqual( this._affectedEnd ) && context.isLast ) {\n\t\t\t\tthis._affectedEnd.detach();\n\t\t\t\tthis._affectedEnd = LivePosition._createAt( mergePosLeft.nodeBefore, 'end', 'toNext' );\n\t\t\t}\n\n\t\t\tthis.position = livePosition.toPosition();\n\t\t\tlivePosition.detach();\n\t\t}\n\n\t\tif ( mergeRight ) {\n\t\t\t/* istanbul ignore if */\n\t\t\tif ( !this.position.isEqual( mergePosRight ) ) {\n\t\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t\t// At this point the insertion position should be after the node we'll merge. If it isn't,\n\t\t\t\t// it should need to be secured as in the left merge case.\n\t\t\t\t/**\n\t\t\t\t * An internal error occured during merging insertion content with siblings.\n\t\t\t\t * The insertion position should equal to the merge position.\n\t\t\t\t *\n\t\t\t\t * @error insertcontent-invalid-insertion-position\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'insertcontent-invalid-insertion-position', this );\n\t\t\t}\n\n\t\t\t// Move the position to the previous node, so it isn't moved to the graveyard on merge.\n\t\t\t// <p>x</p>[]<p>y</p> => <p>x[]</p><p>y</p>\n\t\t\tthis.position = Position._createAt( mergePosRight.nodeBefore, 'end' );\n\n\t\t\t// OK:  <p>xx[]</p> + <p>yy</p> => <p>xx[]yy</p> (when sticks to previous)\n\t\t\t// NOK: <p>xx[]</p> + <p>yy</p> => <p>xxyy[]</p> (when sticks to next)\n\t\t\tconst livePosition = LivePosition.fromPosition( this.position, 'toPrevious' );\n\n\t\t\t// See comment above on moving `_affectedStart`.\n\t\t\tif ( this._affectedEnd.isEqual( mergePosRight ) ) {\n\t\t\t\tthis._affectedEnd.detach();\n\t\t\t\tthis._affectedEnd = LivePosition._createAt( mergePosRight.nodeBefore, 'end', 'toNext' );\n\t\t\t}\n\n\t\t\tthis.writer.merge( mergePosRight );\n\n\t\t\t// See comment above on moving `_affectedStart`.\n\t\t\tif ( mergePosRight.getShiftedBy( -1 ).isEqual( this._affectedStart ) && context.isFirst ) {\n\t\t\t\tthis._affectedStart.detach();\n\t\t\t\tthis._affectedStart = LivePosition._createAt( mergePosRight.nodeBefore, 0, 'toPrevious' );\n\t\t\t}\n\n\t\t\tthis.position = livePosition.toPosition();\n\t\t\tlivePosition.detach();\n\t\t}\n\n\t\tif ( mergeLeft || mergeRight ) {\n\t\t\t// After merge elements that were marked by _insert() to be filtered might be gone so\n\t\t\t// we need to mark the new container.\n\t\t\tthis._filterAttributesOf.push( this.position.parent );\n\t\t}\n\n\t\tmergePosLeft.detach();\n\t\tmergePosRight.detach();\n\t}\n\n\t/**\n\t * Checks whether specified node can be merged with previous sibling element.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t * @returns {Boolean}\n\t */\n\t_canMergeLeft( node, context ) {\n\t\tconst previousSibling = node.previousSibling;\n\n\t\treturn context.isFirst &&\n\t\t\t( previousSibling instanceof Element ) &&\n\t\t\tthis.canMergeWith.has( previousSibling ) &&\n\t\t\tthis.model.schema.checkMerge( previousSibling, node );\n\t}\n\n\t/**\n\t * Checks whether specified node can be merged with next sibling element.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t * @returns {Boolean}\n\t */\n\t_canMergeRight( node, context ) {\n\t\tconst nextSibling = node.nextSibling;\n\n\t\treturn context.isLast &&\n\t\t\t( nextSibling instanceof Element ) &&\n\t\t\tthis.canMergeWith.has( nextSibling ) &&\n\t\t\tthis.model.schema.checkMerge( node, nextSibling );\n\t}\n\n\t/**\n\t * Tries wrapping the node in a new paragraph and inserting it this way.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which needs to be autoparagraphed.\n\t * @param {Object} context\n\t */\n\t_tryAutoparagraphing( node, context ) {\n\t\tconst paragraph = this.writer.createElement( 'paragraph' );\n\n\t\t// Do not autoparagraph if the paragraph won't be allowed there,\n\t\t// cause that would lead to an infinite loop. The paragraph would be rejected in\n\t\t// the next _handleNode() call and we'd be here again.\n\t\tif ( this._getAllowedIn( paragraph, this.position.parent ) && this.schema.checkChild( paragraph, node ) ) {\n\t\t\tparagraph._appendChild( node );\n\t\t\tthis._handleNode( paragraph, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node\n\t * @returns {Boolean} Whether an allowed position was found.\n\t * `false` is returned if the node isn't allowed at any position up in the tree, `true` if was.\n\t */\n\t_checkAndSplitToAllowedPosition( node ) {\n\t\tconst allowedIn = this._getAllowedIn( node, this.position.parent );\n\n\t\tif ( !allowedIn ) {\n\t\t\treturn false;\n\t\t}\n\n\t\twhile ( allowedIn != this.position.parent ) {\n\t\t\t// If a parent which we'd need to leave is a limit element, break.\n\t\t\tif ( this.schema.isLimit( this.position.parent ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( this.position.isAtStart ) {\n\t\t\t\t// If insertion position is at the beginning of the parent, move it out instead of splitting.\n\t\t\t\t// <p>^Foo</p> -> ^<p>Foo</p>\n\t\t\t\tconst parent = this.position.parent;\n\n\t\t\t\tthis.position = this.writer.createPositionBefore( parent );\n\n\t\t\t\t// Special case – parent is empty (<p>^</p>).\n\t\t\t\t//\n\t\t\t\t// 1. parent.isEmpty\n\t\t\t\t// We can remove the element after moving insertion position out of it.\n\t\t\t\t//\n\t\t\t\t// 2. parent.parent === allowedIn\n\t\t\t\t// However parent should remain in place when allowed element is above limit element in document tree.\n\t\t\t\t// For example there shouldn't be allowed to remove empty paragraph from tableCell, when is pasted\n\t\t\t\t// content allowed in $root.\n\t\t\t\tif ( parent.isEmpty && parent.parent === allowedIn ) {\n\t\t\t\t\tthis.writer.remove( parent );\n\t\t\t\t}\n\t\t\t} else if ( this.position.isAtEnd ) {\n\t\t\t\t// If insertion position is at the end of the parent, move it out instead of splitting.\n\t\t\t\t// <p>Foo^</p> -> <p>Foo</p>^\n\t\t\t\tthis.position = this.writer.createPositionAfter( this.position.parent );\n\t\t\t} else {\n\t\t\t\tconst tempPos = this.writer.createPositionAfter( this.position.parent );\n\n\t\t\t\tthis._setAffectedBoundaries( this.position );\n\t\t\t\tthis.writer.split( this.position );\n\n\t\t\t\tthis.position = tempPos;\n\n\t\t\t\tthis.canMergeWith.add( this.position.nodeAfter );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the element in which the given node is allowed. It checks the passed element and all its ancestors.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node to check.\n\t * @param {module:engine/model/element~Element} element The element in which the node's correctness should be checked.\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\t_getAllowedIn( node, element ) {\n\t\tif ( this.schema.checkChild( element, node ) ) {\n\t\t\treturn element;\n\t\t}\n\n\t\tif ( element.parent ) {\n\t\t\treturn this._getAllowedIn( node, element.parent );\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/deletecontent\n */\n\nimport LivePosition from '../liveposition';\nimport Range from '../range';\nimport DocumentSelection from '../documentselection';\n\n/**\n * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n *\n * **Note:** Use {@link module:engine/model/model~Model#deleteContent} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#deleteContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * Selection of which the content should be deleted.\n * @param {module:engine/model/batch~Batch} batch Batch to which the operations will be added.\n * @param {Object} [options]\n * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\n *\n * For example `<heading>x[x</heading><paragraph>y]y</paragraph>` will become:\n *\n * * `<heading>x^y</heading>` with the option disabled (`leaveUnmerged == false`)\n * * `<heading>x^</heading><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n *\n * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n * elements will not be merged.\n *\n * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\n * paragraph when the entire content was selected.\n *\n * For example `<heading>[x</heading><paragraph>y]</paragraph>` will become:\n *\n * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n * * `<heading>^</heading>` with enabled (`doNotResetEntireContent == true`).\n *\n * @param {Boolean} [options.doNotAutoparagraph=false] Whether to create a paragraph if after content deletion selection is moved\n * to a place where text cannot be inserted.\n *\n * For example `<paragraph>x</paragraph>[<image src=\"foo.jpg\"></image>]` will become:\n *\n * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n * * `<paragraph>x[]</paragraph>` with the option enabled (`doNotAutoparagraph == true`).\n *\n * **Note:** if there is no valid position for the selection, the paragraph will always be created:\n *\n * `[<image src=\"foo.jpg\"></image>]` -> `<paragraph>[]</paragraph>`.\n */\nexport default function deleteContent( model, selection, options = {} ) {\n\tif ( selection.isCollapsed ) {\n\t\treturn;\n\t}\n\n\tconst selRange = selection.getFirstRange();\n\n\t// If the selection is already removed, don't do anything.\n\tif ( selRange.root.rootName == '$graveyard' ) {\n\t\treturn;\n\t}\n\n\tconst schema = model.schema;\n\n\tmodel.change( writer => {\n\t\t// 1. Replace the entire content with paragraph.\n\t\t// See: https://github.com/ckeditor/ckeditor5-engine/issues/1012#issuecomment-315017594.\n\t\tif ( !options.doNotResetEntireContent && shouldEntireContentBeReplacedWithParagraph( schema, selection ) ) {\n\t\t\treplaceEntireContentWithParagraph( writer, selection, schema );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst startPos = selRange.start;\n\t\tconst endPos = LivePosition.fromPosition( selRange.end, 'toNext' );\n\n\t\t// 2. Remove the content if there is any.\n\t\tif ( !selRange.start.isTouching( selRange.end ) ) {\n\t\t\twriter.remove( selRange );\n\t\t}\n\n\t\t// 3. Merge elements in the right branch to the elements in the left branch.\n\t\t// The only reasonable (in terms of data and selection correctness) case in which we need to do that is:\n\t\t//\n\t\t// <heading type=1>Fo[</heading><paragraph>]ar</paragraph> => <heading type=1>Fo^ar</heading>\n\t\t//\n\t\t// However, the algorithm supports also merging deeper structures (up to the depth of the shallower branch),\n\t\t// as it's hard to imagine what should actually be the default behavior. Usually, specific features will\n\t\t// want to override that behavior anyway.\n\t\tif ( !options.leaveUnmerged ) {\n\t\t\tmergeBranches( writer, startPos, endPos );\n\n\t\t\t// TMP this will be replaced with a postfixer.\n\t\t\t// We need to check and strip disallowed attributes in all nested nodes because after merge\n\t\t\t// some attributes could end up in a path where are disallowed.\n\t\t\t//\n\t\t\t// e.g. bold is disallowed for <H1>\n\t\t\t// <h1>Fo{o</h1><p>b}a<b>r</b><p> -> <h1>Fo{}a<b>r</b><h1> -> <h1>Fo{}ar<h1>.\n\t\t\tschema.removeDisallowedAttributes( startPos.parent.getChildren(), writer );\n\t\t}\n\n\t\tcollapseSelectionAt( writer, selection, startPos );\n\n\t\t// 4. Add a paragraph to set selection in it.\n\t\t// Check if a text is allowed in the new container. If not, try to create a new paragraph (if it's allowed here).\n\t\tif ( shouldAutoparagraph( schema, startPos ) ) {\n\t\t\t// If auto-paragraphing is off, find the closest valid selection range and collapse the selection there.\n\t\t\t// If there is no valid selection range, create paragraph anyway and set selection there.\n\t\t\tconst validSelectionRange = schema.getNearestSelectionRange( startPos );\n\n\t\t\tif ( options.doNotAutoparagraph && validSelectionRange ) {\n\t\t\t\tcollapseSelectionAt( writer, selection, validSelectionRange );\n\t\t\t} else {\n\t\t\t\tinsertParagraph( writer, startPos, selection );\n\t\t\t}\n\t\t}\n\n\t\tendPos.detach();\n\t} );\n}\n\n// This function is a result of reaching the Ballmer's peak for just the right amount of time.\n// Even I had troubles documenting it after a while and after reading it again I couldn't believe that it really works.\nfunction mergeBranches( writer, startPos, endPos ) {\n\tconst startParent = startPos.parent;\n\tconst endParent = endPos.parent;\n\n\t// If both positions ended up in the same parent, then there's nothing more to merge:\n\t// <$root><p>x[]</p><p>{}y</p></$root> => <$root><p>xy</p>[]{}</$root>\n\tif ( startParent == endParent ) {\n\t\treturn;\n\t}\n\n\t// If one of the positions is a limit element, then there's nothing to merge because we don't want to cross the limit boundaries.\n\tif ( writer.model.schema.isLimit( startParent ) || writer.model.schema.isLimit( endParent ) ) {\n\t\treturn;\n\t}\n\n\t// Check if operations we'll need to do won't need to cross object or limit boundaries.\n\t// E.g., we can't merge endParent into startParent in this case:\n\t// <limit><startParent>x[]</startParent></limit><endParent>{}</endParent>\n\tif ( !checkCanBeMerged( startPos, endPos, writer.model.schema ) ) {\n\t\treturn;\n\t}\n\n\t// Remember next positions to merge. For example:\n\t// <a><b>x[]</b></a><c><d>{}y</d></c>\n\t// will become:\n\t// <a><b>xy</b>[]</a><c>{}</c>\n\tstartPos = writer.createPositionAfter( startParent );\n\tendPos = writer.createPositionBefore( endParent );\n\n\tif ( !endPos.isEqual( startPos ) ) {\n\t\t// In this case, before we merge, we need to move `endParent` to the `startPos`:\n\t\t// <a><b>x[]</b></a><c><d>{}y</d></c>\n\t\t// becomes:\n\t\t// <a><b>x</b>[]<d>y</d></a><c>{}</c>\n\t\twriter.insert( endParent, startPos );\n\t}\n\n\t// Merge two siblings:\n\t// <a>x</a>[]<b>y</b> -> <a>xy</a> (the usual case)\n\t// <a><b>x</b>[]<d>y</d></a><c></c> -> <a><b>xy</b>[]</a><c></c> (this is the \"move parent\" case shown above)\n\twriter.merge( startPos );\n\n\t// Remove empty end ancestors:\n\t// <a>fo[o</a><b><a><c>bar]</c></a></b>\n\t// becomes:\n\t// <a>fo[]</a><b><a>{}</a></b>\n\t// So we can remove <a> and <b>.\n\twhile ( endPos.parent.isEmpty ) {\n\t\tconst parentToRemove = endPos.parent;\n\n\t\tendPos = writer.createPositionBefore( parentToRemove );\n\n\t\twriter.remove( parentToRemove );\n\t}\n\n\t// Continue merging next level.\n\tmergeBranches( writer, startPos, endPos );\n}\n\nfunction shouldAutoparagraph( schema, position ) {\n\tconst isTextAllowed = schema.checkChild( position, '$text' );\n\tconst isParagraphAllowed = schema.checkChild( position, 'paragraph' );\n\n\treturn !isTextAllowed && isParagraphAllowed;\n}\n\n// Check if parents of two positions can be merged by checking if there are no limit/object\n// boundaries between those two positions.\n//\n// E.g. in <bQ><p>x[]</p></bQ><widget><caption>{}</caption></widget>\n// we'll check <p>, <bQ>, <widget> and <caption>.\n// Usually, widget and caption are marked as objects/limits in the schema, so in this case merging will be blocked.\nfunction checkCanBeMerged( leftPos, rightPos, schema ) {\n\tconst rangeToCheck = new Range( leftPos, rightPos );\n\n\tfor ( const value of rangeToCheck.getWalker() ) {\n\t\tif ( schema.isLimit( value.item ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction insertParagraph( writer, position, selection ) {\n\tconst paragraph = writer.createElement( 'paragraph' );\n\n\twriter.insert( paragraph, position );\n\n\tcollapseSelectionAt( writer, selection, writer.createPositionAt( paragraph, 0 ) );\n}\n\nfunction replaceEntireContentWithParagraph( writer, selection ) {\n\tconst limitElement = writer.model.schema.getLimitElement( selection );\n\n\twriter.remove( writer.createRangeIn( limitElement ) );\n\tinsertParagraph( writer, writer.createPositionAt( limitElement, 0 ), selection );\n}\n\n// We want to replace the entire content with a paragraph when:\n// * the entire content is selected,\n// * selection contains at least two elements,\n// * whether the paragraph is allowed in schema in the common ancestor.\nfunction shouldEntireContentBeReplacedWithParagraph( schema, selection ) {\n\tconst limitElement = schema.getLimitElement( selection );\n\n\tif ( !selection.containsEntireContent( limitElement ) ) {\n\t\treturn false;\n\t}\n\n\tconst range = selection.getFirstRange();\n\n\tif ( range.start.parent == range.end.parent ) {\n\t\treturn false;\n\t}\n\n\treturn schema.checkChild( limitElement, 'paragraph' );\n}\n\n// Helper function that sets the selection. Depending whether given `selection` is a document selection or not,\n// uses a different method to set it.\nfunction collapseSelectionAt( writer, selection, positionOrRange ) {\n\tif ( selection instanceof DocumentSelection ) {\n\t\twriter.setSelection( positionOrRange );\n\t} else {\n\t\tselection.setTo( positionOrRange );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/modifyselection\n */\n\nimport Position from '../position';\nimport TreeWalker from '../treewalker';\nimport Range from '../range';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\nimport DocumentSelection from '../documentselection';\n\nconst wordBoundaryCharacters = ' ,.?!:;\"-()';\n\n/**\n * Modifies the selection. Currently, the supported modifications are:\n *\n * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n * Possible values for `unit` are:\n *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n *  why `'character'` value is most natural and common method of modifying selection.\n *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n *  extension will include whole \"surrogate pair\".\n *  * `'word'` - moves selection by a whole word.\n *\n * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n *\n * **Note:** Use {@link module:engine/model/model~Model#modifySelection} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#modifySelection}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which\n * the selection modification should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection to modify.\n * @param {Object} [options]\n * @param {'forward'|'backward'} [options.direction='forward'] The direction in which the selection should be modified.\n * @param {'character'|'codePoint'|'word'} [options.unit='character'] The unit by which selection should be modified.\n */\nexport default function modifySelection( model, selection, options = {} ) {\n\tconst schema = model.schema;\n\tconst isForward = options.direction != 'backward';\n\tconst unit = options.unit ? options.unit : 'character';\n\n\tconst focus = selection.focus;\n\n\tconst walker = new TreeWalker( {\n\t\tboundaries: getSearchRange( focus, isForward ),\n\t\tsingleCharacters: true,\n\t\tdirection: isForward ? 'forward' : 'backward'\n\t} );\n\n\tconst data = { walker, schema, isForward, unit };\n\n\tlet next;\n\n\twhile ( ( next = walker.next() ) ) {\n\t\tif ( next.done ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = tryExtendingTo( data, next.value );\n\n\t\tif ( position ) {\n\t\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelectionFocus( position );\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tselection.setFocus( position );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n// Checks whether the selection can be extended to the the walker's next value (next position).\n// @param {{ walker, unit, isForward, schema }} data\n// @param {module:engine/view/treewalker~TreeWalkerValue} value\nfunction tryExtendingTo( data, value ) {\n\t// If found text, we can certainly put the focus in it. Let's just find a correct position\n\t// based on the unit.\n\tif ( value.type == 'text' ) {\n\t\tif ( data.unit === 'word' ) {\n\t\t\treturn getCorrectWordBreakPosition( data.walker, data.isForward );\n\t\t}\n\n\t\treturn getCorrectPosition( data.walker, data.unit, data.isForward );\n\t}\n\n\t// Entering an element.\n\tif ( value.type == ( data.isForward ? 'elementStart' : 'elementEnd' ) ) {\n\t\t// If it's an object, we can select it now.\n\t\tif ( data.schema.isObject( value.item ) ) {\n\t\t\treturn Position._createAt( value.item, data.isForward ? 'after' : 'before' );\n\t\t}\n\n\t\t// If text allowed on this position, extend to this place.\n\t\tif ( data.schema.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\treturn value.nextPosition;\n\t\t}\n\t}\n\t// Leaving an element.\n\telse {\n\t\t// If leaving a limit element, stop.\n\t\tif ( data.schema.isLimit( value.item ) ) {\n\t\t\t// NOTE: Fast-forward the walker until the end.\n\t\t\tdata.walker.skip( () => true );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If text allowed on this position, extend to this place.\n\t\tif ( data.schema.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\treturn value.nextPosition;\n\t\t}\n\t}\n}\n\n// Finds a correct position by walking in a text node and checking whether selection can be extended to given position\n// or should be extended further.\n//\n// @param {module:engine/model/treewalker~TreeWalker} walker\n// @param {String} unit The unit by which selection should be modified.\nfunction getCorrectPosition( walker, unit ) {\n\tconst textNode = walker.position.textNode;\n\n\tif ( textNode ) {\n\t\tconst data = textNode.data;\n\t\tlet offset = walker.position.offset - textNode.startOffset;\n\n\t\twhile ( isInsideSurrogatePair( data, offset ) || ( unit == 'character' && isInsideCombinedSymbol( data, offset ) ) ) {\n\t\t\twalker.next();\n\n\t\t\toffset = walker.position.offset - textNode.startOffset;\n\t\t}\n\t}\n\n\treturn walker.position;\n}\n\n// Finds a correct position of a word break by walking in a text node and checking whether selection can be extended to given position\n// or should be extended further.\n//\n// @param {module:engine/model/treewalker~TreeWalker} walker\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction getCorrectWordBreakPosition( walker, isForward ) {\n\tlet textNode = walker.position.textNode;\n\n\tif ( textNode ) {\n\t\tlet offset = walker.position.offset - textNode.startOffset;\n\n\t\twhile ( !isAtWordBoundary( textNode.data, offset, isForward ) && !isAtNodeBoundary( textNode, offset, isForward ) ) {\n\t\t\twalker.next();\n\n\t\t\t// Check of adjacent text nodes with different attributes (like BOLD).\n\t\t\t// Example          : 'foofoo []bar<$text bold=\"true\">bar</$text> bazbaz'\n\t\t\t// should expand to : 'foofoo [bar<$text bold=\"true\">bar</$text>] bazbaz'.\n\t\t\tconst nextNode = isForward ? walker.position.nodeAfter : walker.position.nodeBefore;\n\n\t\t\t// Scan only text nodes. Ignore inline elements (like `<softBreak>`).\n\t\t\tif ( nextNode && nextNode.is( 'text' ) ) {\n\t\t\t\t// Check boundary char of an adjacent text node.\n\t\t\t\tconst boundaryChar = nextNode.data.charAt( isForward ? 0 : nextNode.data.length - 1 );\n\n\t\t\t\t// Go to the next node if the character at the boundary of that node belongs to the same word.\n\t\t\t\tif ( !wordBoundaryCharacters.includes( boundaryChar ) ) {\n\t\t\t\t\t// If adjacent text node belongs to the same word go to it & reset values.\n\t\t\t\t\twalker.next();\n\n\t\t\t\t\ttextNode = walker.position.textNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toffset = walker.position.offset - textNode.startOffset;\n\t\t}\n\t}\n\n\treturn walker.position;\n}\n\nfunction getSearchRange( start, isForward ) {\n\tconst root = start.root;\n\tconst searchEnd = Position._createAt( root, isForward ? 'end' : 0 );\n\n\tif ( isForward ) {\n\t\treturn new Range( start, searchEnd );\n\t} else {\n\t\treturn new Range( searchEnd, start );\n\t}\n}\n\n// Checks if selection is on word boundary.\n//\n// @param {String} data The text node value to investigate.\n// @param {Number} offset Position offset.\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction isAtWordBoundary( data, offset, isForward ) {\n\t// The offset to check depends on direction.\n\tconst offsetToCheck = offset + ( isForward ? 0 : -1 );\n\n\treturn wordBoundaryCharacters.includes( data.charAt( offsetToCheck ) );\n}\n\n// Checks if selection is on node boundary.\n//\n// @param {module:engine/model/text~Text} textNode The text node to investigate.\n// @param {Number} offset Position offset.\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction isAtNodeBoundary( textNode, offset, isForward ) {\n\treturn offset === ( isForward ? textNode.endOffset : 0 );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/getselectedcontent\n */\n\n/**\n * Gets a clone of the selected content.\n *\n * For example, for the following selection:\n *\n * ```html\n * <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n * ```\n *\n * It will return a document fragment with such a content:\n *\n * ```html\n * <quote><h>st</h></quote><p>se</p>\n * ```\n *\n * @param {module:engine/model/model~Model} model The model in context of which\n * the selection modification should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection of which content will be returned.\n * @returns {module:engine/model/documentfragment~DocumentFragment}\n */\nexport default function getSelectedContent( model, selection ) {\n\treturn model.change( writer => {\n\t\tconst frag = writer.createDocumentFragment();\n\t\tconst range = selection.getFirstRange();\n\n\t\tif ( !range || range.isCollapsed ) {\n\t\t\treturn frag;\n\t\t}\n\n\t\tconst root = range.start.root;\n\t\tconst commonPath = range.start.getCommonPath( range.end );\n\t\tconst commonParent = root.getNodeByPath( commonPath );\n\n\t\t// ## 1st step\n\t\t//\n\t\t// First, we'll clone a fragment represented by a minimal flat range\n\t\t// containing the original range to be cloned.\n\t\t// E.g. let's consider such a range:\n\t\t//\n\t\t// <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n\t\t//\n\t\t// A minimal flat range containing this one is:\n\t\t//\n\t\t// <p>x</p>[<quote><p>y</p><h>first</h></quote><p>second</p>]<p>z</p>\n\t\t//\n\t\t// We can easily clone this structure, preserving e.g. the <quote> element.\n\t\tlet flatSubtreeRange;\n\n\t\tif ( range.start.parent == range.end.parent ) {\n\t\t\t// The original range is flat, so take it.\n\t\t\tflatSubtreeRange = range;\n\t\t} else {\n\t\t\tflatSubtreeRange = writer.createRange(\n\t\t\t\twriter.createPositionAt( commonParent, range.start.path[ commonPath.length ] ),\n\t\t\t\twriter.createPositionAt( commonParent, range.end.path[ commonPath.length ] + 1 )\n\t\t\t);\n\t\t}\n\n\t\tconst howMany = flatSubtreeRange.end.offset - flatSubtreeRange.start.offset;\n\n\t\t// Clone the whole contents.\n\t\tfor ( const item of flatSubtreeRange.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\t\twriter.appendText( item.data, item.getAttributes(), frag );\n\t\t\t} else {\n\t\t\t\twriter.append( item._clone( true ), frag );\n\t\t\t}\n\t\t}\n\n\t\t// ## 2nd step\n\t\t//\n\t\t// If the original range wasn't flat, then we need to remove the excess nodes from the both ends of the cloned fragment.\n\t\t//\n\t\t// For example, for the range shown in the 1st step comment, we need to remove these pieces:\n\t\t//\n\t\t// <quote>[<p>y</p>]<h>[fir]st</h></quote><p>se[cond]</p>\n\t\t//\n\t\t// So this will be the final copied content:\n\t\t//\n\t\t// <quote><h>st</h></quote><p>se</p>\n\t\t//\n\t\t// In order to do that, we remove content from these two ranges:\n\t\t//\n\t\t// [<quote><p>y</p><h>fir]st</h></quote><p>se[cond</p>]\n\t\tif ( flatSubtreeRange != range ) {\n\t\t\t// Find the position of the original range in the cloned fragment.\n\t\t\tconst newRange = range._getTransformedByMove( flatSubtreeRange.start, writer.createPositionAt( frag, 0 ), howMany )[ 0 ];\n\n\t\t\tconst leftExcessRange = writer.createRange( writer.createPositionAt( frag, 0 ), newRange.start );\n\t\t\tconst rightExcessRange = writer.createRange( newRange.end, writer.createPositionAt( frag, 'end' ) );\n\n\t\t\tremoveRangeContent( rightExcessRange, writer );\n\t\t\tremoveRangeContent( leftExcessRange, writer );\n\t\t}\n\n\t\treturn frag;\n\t} );\n}\n\n// After https://github.com/ckeditor/ckeditor5-engine/issues/690 is fixed,\n// this function will, most likely, be able to rewritten using getMinimalFlatRanges().\nfunction removeRangeContent( range, writer ) {\n\tconst parentsToCheck = [];\n\n\tArray.from( range.getItems( { direction: 'backward' } ) )\n\t\t// We should better store ranges because text proxies will lose integrity\n\t\t// with the text nodes when we'll start removing content.\n\t\t.map( item => writer.createRangeOn( item ) )\n\t\t// Filter only these items which are fully contained in the passed range.\n\t\t//\n\t\t// E.g. for the following range: [<quote><p>y</p><h>fir]st</h>\n\t\t// the walker will return the entire <h> element, when only the \"fir\" item inside it is fully contained.\n\t\t.filter( itemRange => {\n\t\t\t// We should be able to use Range.containsRange, but https://github.com/ckeditor/ckeditor5-engine/issues/691.\n\t\t\tconst contained =\n\t\t\t\t( itemRange.start.isAfter( range.start ) || itemRange.start.isEqual( range.start ) ) &&\n\t\t\t\t( itemRange.end.isBefore( range.end ) || itemRange.end.isEqual( range.end ) );\n\n\t\t\treturn contained;\n\t\t} )\n\t\t.forEach( itemRange => {\n\t\t\tparentsToCheck.push( itemRange.start.parent );\n\n\t\t\twriter.remove( itemRange );\n\t\t} );\n\n\t// Remove ancestors of the removed items if they turned to be empty now\n\t// (their whole content was contained in the range).\n\tparentsToCheck.forEach( parentToCheck => {\n\t\tlet parent = parentToCheck;\n\n\t\twhile ( parent.parent && parent.isEmpty ) {\n\t\t\tconst removeRange = writer.createRangeOn( parent );\n\n\t\t\tparent = parent.parent;\n\n\t\t\twriter.remove( removeRange );\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/selection-post-fixer\n */\n\nimport Range from '../range';\nimport Position from '../position';\n\n/**\n * Injects selection post-fixer to the model.\n *\n * The role of the selection post-fixer is to ensure that the selection is in a correct place\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct position means that:\n *\n * * All collapsed selection ranges are in a place where the {@link module:engine/model/schema~Schema}\n * allows a `$text`.\n * * None of the selection's non-collapsed ranges crosses a {@link module:engine/model/schema~Schema#isLimit limit element}\n * boundary (a range must be rooted within one limit element).\n * * Only {@link module:engine/model/schema~Schema#isObject object elements} can be selected from the outside\n * (e.g. `[<paragraph>foo</paragraph>]` is invalid). This rule applies independently to both selection ends, so this\n * selection is correct: `<paragraph>f[oo</paragraph><image></image>]`.\n *\n * If the position is not correct, the post-fixer will automatically correct it.\n *\n * ## Fixing a non-collapsed selection\n *\n * See as an example a selection that starts in a P1 element and ends inside the text of a TD element\n * (`[` and `]` are range boundaries and `(l)` denotes an element defined as `isLimit=true`):\n *\n *\t\troot\n *\t\t |- element P1\n *\t\t |   |- \"foo\"                                      root\n *\t\t |- element TABLE (l)                   P1         TABLE             P2\n *\t\t |   |- element TR (l)                 f o[o     TR      TR         b a r\n *\t\t |   |   |- element TD (l)                       TD      TD\n *\t\t |   |       |- \"aaa\"                          a]a a    b b b\n *\t\t |   |- element TR (l)\n *\t\t |   |   |- element TD (l)                           ||\n *\t\t |   |       |- \"bbb\"                                ||\n *\t\t |- element P2                                       VV\n *\t\t |   |- \"bar\"\n *\t\t                                                   root\n *\t\t                                        P1         TABLE]            P2\n *\t\t                                       f o[o     TR      TR         b a r\n *\t\t                                                 TD      TD\n *\t\t                                               a a a    b b b\n *\n * In the example above, the TABLE, TR and TD are defined as `isLimit=true` in the schema. The range which is not contained within\n * a single limit element must be expanded to select the outermost limit element. The range end is inside the text node of the TD element.\n * As the TD element is a child of the TR and TABLE elements, where both are defined as `isLimit=true` in the schema, the range must be\n * expanded to select the whole TABLE element.\n *\n * **Note** If the selection contains multiple ranges, the method returns a minimal set of ranges that are not intersecting after expanding\n * them to select `isLimit=true` elements.\n *\n * @param {module:engine/model/model~Model} model\n */\nexport function injectSelectionPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => selectionPostFixer( writer, model ) );\n}\n\n// The selection post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction selectionPostFixer( writer, model ) {\n\tconst selection = model.document.selection;\n\tconst schema = model.schema;\n\n\tconst ranges = [];\n\n\tlet wasFixed = false;\n\n\tfor ( const modelRange of selection.getRanges() ) {\n\t\t// Go through all ranges in selection and try fixing each of them.\n\t\t// Those ranges might overlap but will be corrected later.\n\t\tconst correctedRange = tryFixingRange( modelRange, schema );\n\n\t\tif ( correctedRange ) {\n\t\t\tranges.push( correctedRange );\n\t\t\twasFixed = true;\n\t\t} else {\n\t\t\tranges.push( modelRange );\n\t\t}\n\t}\n\n\t// If any of ranges were corrected update the selection.\n\tif ( wasFixed ) {\n\t\t// The above algorithm might create ranges that intersects each other when selection contains more then one range.\n\t\t// This is case happens mostly on Firefox which creates multiple ranges for selected table.\n\t\tlet fixedRanges = ranges;\n\n\t\t// Fixing selection with many ranges usually breaks the selection in Firefox. As only Firefox supports multiple selection ranges\n\t\t// we simply create one continuous range from fixed selection ranges (even if they are not adjacent).\n\t\tif ( ranges.length > 1 ) {\n\t\t\tconst selectionStart = ranges[ 0 ].start;\n\t\t\tconst selectionEnd = ranges[ ranges.length - 1 ].end;\n\n\t\t\tfixedRanges = [ new Range( selectionStart, selectionEnd ) ];\n\t\t}\n\n\t\twriter.setSelection( fixedRanges, { backward: selection.isBackward } );\n\t}\n}\n\n// Tries fixing a range if it's incorrect.\n//\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingRange( range, schema ) {\n\tif ( range.isCollapsed ) {\n\t\treturn tryFixingCollapsedRange( range, schema );\n\t}\n\n\treturn tryFixingNonCollapsedRage( range, schema );\n}\n\n// Tries to fix collapsed ranges.\n//\n// * Fixes situation when a range is in a place where $text is not allowed\n//\n// @param {module:engine/model/range~Range} range Collapsed range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingCollapsedRange( range, schema ) {\n\tconst originalPosition = range.start;\n\n\tconst nearestSelectionRange = schema.getNearestSelectionRange( originalPosition );\n\n\t// This might be null ie when editor data is empty.\n\t// In such cases there is no need to fix the selection range.\n\tif ( !nearestSelectionRange ) {\n\t\treturn null;\n\t}\n\n\tconst fixedPosition = nearestSelectionRange.start;\n\n\t// Fixed position is the same as original - no need to return corrected range.\n\tif ( originalPosition.isEqual( fixedPosition ) ) {\n\t\treturn null;\n\t}\n\n\t// Check single node selection (happens in tables).\n\tif ( fixedPosition.nodeAfter && schema.isLimit( fixedPosition.nodeAfter ) ) {\n\t\treturn new Range( fixedPosition, Position._createAfter( fixedPosition.nodeAfter ) );\n\t}\n\n\treturn new Range( fixedPosition );\n}\n\n// Tries to fix an expanded range.\n//\n// @param {module:engine/model/range~Range} range Expanded range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingNonCollapsedRage( range, schema ) {\n\tconst start = range.start;\n\tconst end = range.end;\n\n\tconst isTextAllowedOnStart = schema.checkChild( start, '$text' );\n\tconst isTextAllowedOnEnd = schema.checkChild( end, '$text' );\n\n\tconst startLimitElement = schema.getLimitElement( start );\n\tconst endLimitElement = schema.getLimitElement( end );\n\n\t// Ranges which both end are inside the same limit element (or root) might needs only minor fix.\n\tif ( startLimitElement === endLimitElement ) {\n\t\t// Range is valid when both position allows to place a text:\n\t\t// - <block>f[oobarba]z</block>\n\t\t// This would be \"fixed\" by a next check but as it will be the same it's better to return null so the selection stays the same.\n\t\tif ( isTextAllowedOnStart && isTextAllowedOnEnd ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Range that is on non-limit element (or is partially) must be fixed so it is placed inside the block around $text:\n\t\t// - [<block>foo</block>]    ->    <block>[foo]</block>\n\t\t// - [<block>foo]</block>    ->    <block>[foo]</block>\n\t\t// - <block>f[oo</block>]    ->    <block>f[oo]</block>\n\t\t// - [<block>foo</block><object></object>]    ->    <block>[foo</block><object></object>]\n\t\tif ( checkSelectionOnNonLimitElements( start, end, schema ) ) {\n\t\t\tconst isStartObject = start.nodeAfter && schema.isObject( start.nodeAfter );\n\t\t\tconst fixedStart = isStartObject ? null : schema.getNearestSelectionRange( start, 'forward' );\n\n\t\t\tconst isEndObject = end.nodeBefore && schema.isObject( end.nodeBefore );\n\t\t\tconst fixedEnd = isEndObject ? null : schema.getNearestSelectionRange( end, 'backward' );\n\n\t\t\t// The schema.getNearestSelectionRange might return null - if that happens use original position.\n\t\t\tconst rangeStart = fixedStart ? fixedStart.start : start;\n\t\t\tconst rangeEnd = fixedEnd ? fixedEnd.start : end;\n\n\t\t\treturn new Range( rangeStart, rangeEnd );\n\t\t}\n\t}\n\n\tconst isStartInLimit = startLimitElement && !startLimitElement.is( 'rootElement' );\n\tconst isEndInLimit = endLimitElement && !endLimitElement.is( 'rootElement' );\n\n\t// At this point we eliminated valid positions on text nodes so if one of range positions is placed inside a limit element\n\t// then the range crossed limit element boundaries and needs to be fixed.\n\tif ( isStartInLimit || isEndInLimit ) {\n\t\tconst bothInSameParent = ( start.nodeAfter && end.nodeBefore ) && start.nodeAfter.parent === end.nodeBefore.parent;\n\n\t\tconst expandStart = isStartInLimit && ( !bothInSameParent || !isInObject( start.nodeAfter, schema ) );\n\t\tconst expandEnd = isEndInLimit && ( !bothInSameParent || !isInObject( end.nodeBefore, schema ) );\n\n\t\t// Although we've already found limit element on start/end positions we must find the outer-most limit element.\n\t\t// as limit elements might be nested directly inside (ie table > tableRow > tableCell).\n\t\tlet fixedStart = start;\n\t\tlet fixedEnd = end;\n\n\t\tif ( expandStart ) {\n\t\t\tfixedStart = Position._createBefore( findOutermostLimitAncestor( startLimitElement, schema ) );\n\t\t}\n\n\t\tif ( expandEnd ) {\n\t\t\tfixedEnd = Position._createAfter( findOutermostLimitAncestor( endLimitElement, schema ) );\n\t\t}\n\n\t\treturn new Range( fixedStart, fixedEnd );\n\t}\n\n\t// Range was not fixed at this point so it is valid - ie it was placed around limit element already.\n\treturn null;\n}\n\n// Finds the outer-most ancestor.\n//\n// @param {module:engine/model/node~Node} startingNode\n// @param {module:engine/model/schema~Schema} schema\n// @param {String} expandToDirection Direction of expansion - either 'start' or 'end' of the range.\n// @returns {module:engine/model/node~Node}\nfunction findOutermostLimitAncestor( startingNode, schema ) {\n\tlet isLimitNode = startingNode;\n\tlet parent = isLimitNode;\n\n\t// Find outer most isLimit block as such blocks might be nested (ie. in tables).\n\twhile ( schema.isLimit( parent ) && parent.parent ) {\n\t\tisLimitNode = parent;\n\t\tparent = parent.parent;\n\t}\n\n\treturn isLimitNode;\n}\n\n// Checks whether any of range boundaries is placed around non-limit elements.\n//\n// @param {module:engine/model/position~Position} start\n// @param {module:engine/model/position~Position} end\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction checkSelectionOnNonLimitElements( start, end, schema ) {\n\tconst startIsOnBlock = ( start.nodeAfter && !schema.isLimit( start.nodeAfter ) ) || schema.checkChild( start, '$text' );\n\tconst endIsOnBlock = ( end.nodeBefore && !schema.isLimit( end.nodeBefore ) ) || schema.checkChild( end, '$text' );\n\n\t// We should fix such selection when one of those nodes needs fixing.\n\treturn startIsOnBlock || endIsOnBlock;\n}\n\n// Checks if node exists and if it's an object.\n//\n// @param {module:engine/model/node~Node} node\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction isInObject( node, schema ) {\n\treturn node && schema.isObject( node );\n}\n\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/model\n */\n\nimport Batch from './batch';\nimport Writer from './writer';\nimport Schema from './schema';\nimport Document from './document';\nimport MarkerCollection from './markercollection';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ModelElement from './element';\nimport ModelRange from './range';\nimport ModelPosition from './position';\nimport ModelSelection from './selection';\n\nimport insertContent from './utils/insertcontent';\nimport deleteContent from './utils/deletecontent';\nimport modifySelection from './utils/modifyselection';\nimport getSelectedContent from './utils/getselectedcontent';\nimport { injectSelectionPostFixer } from './utils/selection-post-fixer';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Editor's data model. Read about the model in the\n * {@glink framework/guides/architecture/editing-engine engine architecture guide}.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Model {\n\tconstructor() {\n\t\t/**\n\t\t * Model's marker collection.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis.markers = new MarkerCollection();\n\n\t\t/**\n\t\t * Model's document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/document~Document}\n\t\t */\n\t\tthis.document = new Document( this );\n\n\t\t/**\n\t\t * Model's schema.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/schema~Schema}\n\t\t */\n\t\tthis.schema = new Schema();\n\n\t\t/**\n\t\t * All callbacks added by {@link module:engine/model/model~Model#change} or\n\t\t * {@link module:engine/model/model~Model#enqueueChange} methods waiting to be executed.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Function>}\n\t\t */\n\t\tthis._pendingChanges = [];\n\n\t\t/**\n\t\t * The last created and currently used writer instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/writer~Writer}\n\t\t */\n\t\tthis._currentWriter = null;\n\n\t\t[ 'insertContent', 'deleteContent', 'modifySelection', 'getSelectedContent', 'applyOperation' ]\n\t\t\t.forEach( methodName => this.decorate( methodName ) );\n\n\t\t// Adding operation validation with `highest` priority, so it is called before any other feature would like\n\t\t// to do anything with the operation. If the operation has incorrect parameters it should throw on the earliest occasion.\n\t\tthis.on( 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\toperation._validate();\n\t\t}, { priority: 'highest' } );\n\n\t\t// Register some default abstract entities.\n\t\tthis.schema.register( '$root', {\n\t\t\tisLimit: true\n\t\t} );\n\t\tthis.schema.register( '$block', {\n\t\t\tallowIn: '$root',\n\t\t\tisBlock: true\n\t\t} );\n\t\tthis.schema.register( '$text', {\n\t\t\tallowIn: '$block',\n\t\t\tisInline: true\n\t\t} );\n\t\tthis.schema.register( '$clipboardHolder', {\n\t\t\tallowContentOf: '$root',\n\t\t\tisLimit: true\n\t\t} );\n\t\tthis.schema.extend( '$text', { allowIn: '$clipboardHolder' } );\n\n\t\t// An element needed by the `upcastElementToMarker` converter.\n\t\t// This element temporarily represents a marker boundary during the conversion process and is removed\n\t\t// at the end of the conversion. `UpcastDispatcher` or at least `Conversion` class looks like a\n\t\t// better place for this registration but both know nothing about `Schema`.\n\t\tthis.schema.register( '$marker' );\n\t\tthis.schema.addChildCheck( ( context, childDefinition ) => {\n\t\t\tif ( childDefinition.name === '$marker' ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} );\n\n\t\tinjectSelectionPostFixer( this );\n\t}\n\n\t/**\n\t * The `change()` method is the primary way of changing the model. You should use it to modify all document nodes\n\t * (including detached nodes – i.e. nodes not added to the {@link module:engine/model/model~Model#document model document}),\n\t * the {@link module:engine/model/document~Document#selection document's selection}, and\n\t * {@link module:engine/model/model~Model#markers model markers}.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t} );\n\t *\n\t * All changes inside the change block use the same {@link module:engine/model/batch~Batch} so they are combined\n\t * into a single undo step.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' ); // foo.\n\t *\n\t *\t\t\tmodel.change( writer => {\n\t *\t\t\t\twriter.insertText( 'bar', paragraph, 'end' ); // foobar.\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.insertText( 'bom', paragraph, 'end' ); // foobarbom.\n\t *\t\t} );\n\t *\n\t * The callback of the `change()` block is executed synchronously.\n\t *\n\t * You can also return a value from the change block.\n\t *\n\t *\t\tconst img = model.change( writer => {\n\t *\t\t\treturn writer.createElement( 'img' );\n\t *\t\t} );\n\t *\n\t * @see #enqueueChange\n\t * @param {Function} callback Callback function which may modify the model.\n\t * @returns {*} Value returned by the callback.\n\t */\n\tchange( callback ) {\n\t\ttry {\n\t\t\tif ( this._pendingChanges.length === 0 ) {\n\t\t\t\t// If this is the outermost block, create a new batch and start `_runPendingChanges` execution flow.\n\t\t\t\tthis._pendingChanges.push( { batch: new Batch(), callback } );\n\n\t\t\t\treturn this._runPendingChanges()[ 0 ];\n\t\t\t} else {\n\t\t\t\t// If this is not the outermost block, just execute the callback.\n\t\t\t\treturn callback( this._currentWriter );\n\t\t\t}\n\t\t} catch ( err ) {\n\t\t\tCKEditorError.rethrowUnexpectedError( err, this );\n\t\t}\n\t}\n\n\t/**\n\t * The `enqueueChange()` method performs similar task as the {@link #change `change()` method}, with two major differences.\n\t *\n\t * First, the callback of `enqueueChange()` is executed when all other enqueued changes are done. It might be executed\n\t * immediately if it is not nested in any other change block, but if it is nested in another (enqueue)change block,\n\t * it will be delayed and executed after the outermost block.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconsole.log( 1 );\n\t *\n\t *\t\t\tmodel.enqueueChange( writer => {\n\t *\t\t\t\tconsole.log( 2 );\n\t *\t\t\t} );\n\t *\n\t * \t\t\tconsole.log( 3 );\n\t *\t\t} ); // Will log: 1, 3, 2.\n\t *\n\t * Second, it lets you define the {@link module:engine/model/batch~Batch} into which you want to add your changes.\n\t * By default, a new batch is created. In the sample above, `change` and `enqueueChange` blocks use a different\n\t * batch (and different {@link module:engine/model/writer~Writer} since each of them operates on the separate batch).\n\t *\n\t * When using the `enqueueChange()` block you can also add some changes to the batch you used before.\n\t *\n\t *\t\tmodel.enqueueChange( batch, writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t} );\n\t *\n\t * The batch instance can be obtained from {@link module:engine/model/writer~Writer#batch the writer}.\n\t *\n\t * @param {module:engine/model/batch~Batch|'transparent'|'default'} batchOrType Batch or batch type should be used in the callback.\n\t * If not defined, a new batch will be created.\n\t * @param {Function} callback Callback function which may modify the model.\n\t */\n\tenqueueChange( batchOrType, callback ) {\n\t\ttry {\n\t\t\tif ( typeof batchOrType === 'string' ) {\n\t\t\t\tbatchOrType = new Batch( batchOrType );\n\t\t\t} else if ( typeof batchOrType == 'function' ) {\n\t\t\t\tcallback = batchOrType;\n\t\t\t\tbatchOrType = new Batch();\n\t\t\t}\n\n\t\t\tthis._pendingChanges.push( { batch: batchOrType, callback } );\n\n\t\t\tif ( this._pendingChanges.length == 1 ) {\n\t\t\t\tthis._runPendingChanges();\n\t\t\t}\n\t\t} catch ( err ) {\n\t\t\tCKEditorError.rethrowUnexpectedError( err, this );\n\t\t}\n\t}\n\n\t/**\n\t * {@link module:utils/observablemixin~ObservableMixin#decorate Decorated} function for applying\n\t * {@link module:engine/model/operation/operation~Operation operations} to the model.\n\t *\n\t * This is a low-level way of changing the model. It is exposed for very specific use cases (like the undo feature).\n\t * Normally, to modify the model, you will want to use {@link module:engine/model/writer~Writer `Writer`}.\n\t * See also {@glink framework/guides/architecture/editing-engine#changing-the-model Changing the model} section\n\t * of the {@glink framework/guides/architecture/editing-engine Editing architecture} guide.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation The operation to apply.\n\t */\n\tapplyOperation( operation ) {\n\t\toperation._execute();\n\t}\n\n\t/**\n\t * Inserts content at the position in the editor specified by the selection, as one would expect the paste\n\t * functionality to work.\n\t *\n\t * This is a high-level method. It takes the {@link #schema schema} into consideration when inserting\n\t * the content, clears the given selection's content before inserting nodes and moves the selection\n\t * to its target position at the end of the process.\n\t * It can split elements, merge them, wrap bare text nodes with paragraphs, etc. &mdash; just like the\n\t * pasting feature should do.\n\t *\n\t * For lower-level methods see {@link module:engine/model/writer~Writer `Writer`}.\n\t *\n\t * This method, unlike {@link module:engine/model/writer~Writer `Writer`}'s methods, does not have to be used\n\t * inside a {@link #change `change()` block}.\n\t *\n\t * # Conversion and schema\n\t *\n\t * Inserting elements and text nodes into the model is not enough to make CKEditor 5 render that content\n\t * to the user. CKEditor 5 implements a model-view-controller architecture and what `model.insertContent()` does\n\t * is only adding nodes to the model. Additionally, you need to define\n\t * {@glink framework/guides/architecture/editing-engine#conversion converters} between the model and view\n\t * and define those nodes in the {@glink framework/guides/architecture/editing-engine#schema schema}.\n\t *\n\t * So, while this method may seem similar to CKEditor 4 `editor.insertHtml()` (in fact, both methods\n\t * are used for paste-like content insertion), the CKEditor 5 method cannot be use to insert arbitrary HTML\n\t * unless converters are defined for all elements and attributes in that HTML.\n\t *\n\t * # Examples\n\t *\n\t * Using `insertContent()` with a manually created model structure:\n\t *\n\t *\t\t// Let's create a document fragment containing such content as:\n\t *\t\t//\n\t *\t\t// <paragrap>foo</paragraph>\n\t *\t\t// <blockQuote>\n\t *\t\t//    <paragraph>bar</paragraph>\n\t *\t\t// </blockQuote>\n\t *\t\tconst docFrag = editor.model.change( writer => {\n\t *\t\t\tconst p1 = writer.createElement( 'paragraph' );\n\t *\t\t\tconst p2 = writer.createElement( 'paragraph' );\n\t *\t\t\tconst blockQuote = writer.createElement( 'blockQuote' );\n\t *\t\t\tconst docFrag = writer.createDocumentFragment();\n\t *\n\t *\t\t\twriter.append( p1, docFrag );\n\t *\t\t\twriter.append( blockQuote, docFrag );\n\t *\t\t\twriter.append( p2, blockQuote );\n\t *\t\t\twriter.insertText( 'foo', p1 );\n\t *\t\t\twriter.insertText( 'bar', p2 );\n\t *\n\t *\t\t\treturn docFrag;\n\t *\t\t} );\n\t *\n\t *\t\t// insertContent() does not have to be used in a change() block. It can, though,\n\t *\t\t// so this code could be moved to the callback defined above.\n\t *\t\teditor.model.insertContent( docFrag );\n\t *\n\t * Using `insertContent()` with an HTML string converted to a model document fragment (similar to the pasting mechanism):\n\t *\n\t *\t\t// You can create your own HtmlDataProcessor instance or use editor.data.processor\n\t *\t\t// if you have not overridden the default one (which is the HtmlDataProcessor instance).\n\t *\t\tconst htmlDP = new HtmlDataProcessor();\n\t *\n\t *\t\t// Convert an HTML string to a view document fragment:\n\t *\t\tconst viewFragment = htmlDP.toView( htmlString );\n\t *\n\t *\t\t// Convert the view document fragment to a model document fragment\n\t *\t\t// in the context of $root. This conversion takes the schema into\n\t *\t\t// account so if, for example, the view document fragment contained a bare text node,\n\t *\t\t// this text node cannot be a child of $root, so it will be automatically\n\t *\t\t// wrapped with a <paragraph>. You can define the context yourself (in the second parameter),\n\t *\t\t// and e.g. convert the content like it would happen in a <paragraph>.\n\t *\t\t// Note: The clipboard feature uses a custom context called $clipboardHolder\n\t *\t\t// which has a loosened schema.\n\t *\t\tconst modelFragment = editor.data.toModel( viewFragment );\n\t *\n\t *\t\teditor.model.insertContent( modelFragment );\n\t *\n\t * By default this method will use the document selection but it can also be used with a position, range or selection instance.\n\t *\n\t *\t\t// Insert text at the current document selection position.\n\t *\t\teditor.model.change( writer => {\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ) );\n\t *\t\t} );\n\t *\n\t *\t\t// Insert text at a given position - the document selection will not be modified.\n\t *\t\teditor.model.change( writer => {\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ), doc.getRoot(), 2 );\n\t *\n\t *\t\t\t// Which is a shorthand for:\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ), writer.createPositionAt( doc.getRoot(), 2 ) );\n\t *\t\t} );\n\t *\n\t * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable`\n\t * it will be moved to the target position (where the document selection should be moved after the insertion).\n\t *\n\t *\t\teditor.model.change( writer => {\n\t *\t\t\t// Insert text replacing the given selection instance.\n\t *\t\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ), selection );\n\t *\n\t *\t\t\t// insertContent() modifies the passed selection instance so it can be used to set the document selection.\n\t *\t\t\t// Note: This is not necessary when you passed the document selection to insertContent().\n\t *\t\t\twriter.setSelection( selection );\n\t *\t\t} );\n\t *\n\t * @fires insertContent\n\t * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n\t * @param {module:engine/model/selection~Selectable} [selectable=model.document.selection]\n\t * The selection into which the content should be inserted. If not provided the current model document selection will be used.\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] To be used when a model item was passed as `selectable`.\n\t * This param defines a position in relation to that item.\n\t * @returns {module:engine/model/range~Range} Range which contains all the performed changes. This is a range that, if removed,\n\t * would return the model to the state before the insertion. If no changes were preformed by `insertContent`, returns a range collapsed\n\t * at the insertion position.\n\t */\n\tinsertContent( content, selectable, placeOrOffset ) {\n\t\treturn insertContent( this, content, selectable, placeOrOffset );\n\t}\n\n\t/**\n\t * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n\t *\n\t * **Note:** For the sake of predictability, the resulting selection should always be collapsed.\n\t * In cases where a feature wants to modify deleting behavior so selection isn't collapsed\n\t * (e.g. a table feature may want to keep row selection after pressing <kbd>Backspace</kbd>),\n\t * then that behavior should be implemented in the view's listener. At the same time, the table feature\n\t * will need to modify this method's behavior too, e.g. to \"delete contents and then collapse\n\t * the selection inside the last selected cell\" or \"delete the row and collapse selection somewhere near\".\n\t * That needs to be done in order to ensure that other features which use `deleteContent()` will work well with tables.\n\t *\n\t * @fires deleteContent\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * Selection of which the content should be deleted.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\n\t *\n\t * For example `<heading1>x[x</heading1><paragraph>y]y</paragraph>` will become:\n\t *\n\t * * `<heading1>x^y</heading1>` with the option disabled (`leaveUnmerged == false`)\n\t * * `<heading1>x^</heading1><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n\t *\n\t * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n\t * elements will not be merged.\n\t *\n\t * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\n\t * paragraph when the entire content was selected.\n\t *\n\t * For example `<heading1>[x</heading1><paragraph>y]</paragraph>` will become:\n\t *\n\t * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n\t * * `<heading1>^</heading1>` with enabled (`doNotResetEntireContent == true`)\n\t *\n\t * @param {Boolean} [options.doNotAutoparagraph=false] Whether to create a paragraph if after content deletion selection is moved\n\t * to a place where text cannot be inserted.\n\t *\n\t * For example `<paragraph>x</paragraph>[<image src=\"foo.jpg\"></image>]` will become:\n\t *\n\t * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n\t * * `<paragraph>x[]</paragraph>` with the option enabled (`doNotAutoparagraph == true`).\n\t *\n\t * **Note:** if there is no valid position for the selection, the paragraph will always be created:\n\t *\n\t * `[<image src=\"foo.jpg\"></image>]` -> `<paragraph>[]</paragraph>`.\n\t */\n\tdeleteContent( selection, options ) {\n\t\tdeleteContent( this, selection, options );\n\t}\n\n\t/**\n\t * Modifies the selection. Currently, the supported modifications are:\n\t *\n\t * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n\t * Possible values for `unit` are:\n\t *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n\t *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n\t *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n\t *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n\t *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n\t *  why `'character'` value is most natural and common method of modifying selection.\n\t *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n\t *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n\t *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n\t *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n\t *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n\t *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n\t *  extension will include whole \"surrogate pair\".\n\t *  * `'word'` - moves selection by a whole word.\n\t *\n\t * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n\t *\n\t * @fires modifySelection\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * The selection to modify.\n\t * @param {Object} [options]\n\t * @param {'forward'|'backward'} [options.direction='forward'] The direction in which the selection should be modified.\n\t * @param {'character'|'codePoint'|'word'} [options.unit='character'] The unit by which selection should be modified.\n\t */\n\tmodifySelection( selection, options ) {\n\t\tmodifySelection( this, selection, options );\n\t}\n\n\t/**\n\t * Gets a clone of the selected content.\n\t *\n\t * For example, for the following selection:\n\t *\n\t * ```html\n\t * <paragraph>x</paragraph>\n\t * <blockQuote>\n\t *\t<paragraph>y</paragraph>\n\t *\t<heading1>fir[st</heading1>\n\t * </blockQuote>\n\t * <paragraph>se]cond</paragraph>\n\t * <paragraph>z</paragraph>\n\t * ```\n\t *\n\t * It will return a document fragment with such a content:\n\t *\n\t * ```html\n\t * <blockQuote>\n\t *\t<heading1>st</heading1>\n\t * </blockQuote>\n\t * <paragraph>se</paragraph>\n\t * ```\n\t *\n\t * @fires getSelectedContent\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * The selection of which content will be returned.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tgetSelectedContent( selection ) {\n\t\treturn getSelectedContent( this, selection );\n\t}\n\n\t/**\n\t * Checks whether the given {@link module:engine/model/range~Range range} or\n\t * {@link module:engine/model/element~Element element} has any meaningful content.\n\t *\n\t * Meaningful content is:\n\t *\n\t * * any text node (`options.ignoreWhitespaces` allows controlling whether this text node must also contain\n\t * any non-whitespace characters),\n\t * * or any {@link module:engine/model/schema~Schema#isObject object element},\n\t * * or any {@link module:engine/model/markercollection~Marker marker} which\n\t * {@link module:engine/model/markercollection~Marker#_affectsData affects data}.\n\t *\n\t * This means that a range containing an empty `<paragraph></paragraph>` is not considered to have a meaningful content.\n\t * However, a range containing an `<image></image>` (which would normally be marked in the schema as an object element)\n\t * is considered non-empty.\n\t *\n\t * @param {module:engine/model/range~Range|module:engine/model/element~Element} rangeOrElement Range or element to check.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.ignoreWhitespaces] Whether text node with whitespaces only should be considered empty.\n\t * @returns {Boolean}\n\t */\n\thasContent( rangeOrElement, options ) {\n\t\tconst range = rangeOrElement instanceof ModelElement ? ModelRange._createIn( rangeOrElement ) : rangeOrElement;\n\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if there are any markers which affects data in this given range.\n\t\tfor ( const intersectingMarker of this.markers.getMarkersIntersectingRange( range ) ) {\n\t\t\tif ( intersectingMarker.affectsData ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst { ignoreWhitespaces = false } = options || {};\n\n\t\tfor ( const item of range.getItems() ) {\n\t\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\t\tif ( !ignoreWhitespaces ) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if ( item.data.search( /\\S/ ) !== -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else if ( this.schema.isObject( item ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Creates a position from the given root and path in that root.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionFromPath `Writer#createPositionFromPath()`}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionFromPath( root, path, stickiness ) {\n\t\treturn new ModelPosition( root, path, stickiness );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/model/position~Position position},\n\t * * a parent element and offset in that element,\n\t * * a parent element and `'end'` (the position will be set at the end of that element),\n\t * * a {@link module:engine/model/item~Item model item} and `'before'` or `'after'`\n\t * (the position will be set before or after the given model item).\n\t *\n\t * This method is a shortcut to other factory methods such as:\n\t *\n\t * * {@link module:engine/model/model~Model#createPositionBefore `createPositionBefore()`},\n\t * * {@link module:engine/model/model~Model#createPositionAfter `createPositionAfter()`}.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionAt `Writer#createPositionAt()`},\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn ModelPosition._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionAfter `Writer#createPositionAfter()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn ModelPosition._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionBefore `Writer#createPositionBefore()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn ModelPosition._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from the `start` position to the `end` position.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createRange `Writer#createRange()`}:\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconst range = writer.createRange( start, end );\n\t *\t\t} );\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, the range will be collapsed\n\t * to the `start` position.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new ModelRange( start, end );\n\t}\n\n\t/**\n\t * Creates a range inside the given element which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createRangeIn `Writer#createRangeIn()`}:\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconst range = writer.createRangeIn( paragraph );\n\t *\t\t} );\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn ModelRange._createIn( element );\n\t}\n\n\t/**\n\t * Creates a range that starts before the given {@link module:engine/model/item~Item model item} and ends after it.\n\t *\n\t * Note: This method is also available on `writer` instance as\n\t * {@link module:engine/model/writer~Writer#createRangeOn `Writer.createRangeOn()`}:\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconst range = writer.createRangeOn( paragraph );\n\t *\t\t} );\n\t *\n\t * @param {module:engine/model/item~Item} item\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn ModelRange._createOn( item );\n\t}\n\n\t/**\n\t * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n\t * or creates an empty selection if no arguments were passed.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createSelection `Writer#createSelection()`}.\n\t *\n\t *\t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\tconst selection = writer.createSelection( documentSelection );\n\t *\n\t *\t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates selection at the given offset in the given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t *\t\t// Additional options (`'backward'`) can be specified as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @returns {module:engine/model/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new ModelSelection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/batch~Batch} instance.\n\t *\n\t * **Note:** In most cases creating a batch instance is not necessary as they are created when using:\n\t *\n\t * * {@link #change `change()`},\n\t * * {@link #enqueueChange `enqueueChange()`}.\n\t *\n\t * @param {'transparent'|'default'} [type='default'] The type of the batch.\n\t * @returns {module:engine/model/batch~Batch}\n\t */\n\tcreateBatch( type ) {\n\t\treturn new Batch( type );\n\t}\n\n\t/**\n\t * Removes all events listeners set by model instance and destroys {@link module:engine/model/document~Document}.\n\t */\n\tdestroy() {\n\t\tthis.document.destroy();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Common part of {@link module:engine/model/model~Model#change} and {@link module:engine/model/model~Model#enqueueChange}\n\t * which calls callbacks and returns array of values returned by these callbacks.\n\t *\n\t * @private\n\t * @returns {Array.<*>} Array of values returned by callbacks.\n\t */\n\t_runPendingChanges() {\n\t\tconst ret = [];\n\n\t\tthis.fire( '_beforeChanges' );\n\n\t\twhile ( this._pendingChanges.length ) {\n\t\t\t// Create a new writer using batch instance created for this chain of changes.\n\t\t\tconst currentBatch = this._pendingChanges[ 0 ].batch;\n\t\t\tthis._currentWriter = new Writer( this, currentBatch );\n\n\t\t\t// Execute changes callback and gather the returned value.\n\t\t\tconst callbackReturnValue = this._pendingChanges[ 0 ].callback( this._currentWriter );\n\t\t\tret.push( callbackReturnValue );\n\n\t\t\tthis.document._handleChangeBlock( this._currentWriter );\n\n\t\t\tthis._pendingChanges.shift();\n\t\t\tthis._currentWriter = null;\n\t\t}\n\n\t\tthis.fire( '_afterChanges' );\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Fired when entering the outermost {@link module:engine/model/model~Model#enqueueChange} or\n\t * {@link module:engine/model/model~Model#change} block.\n\t *\n\t * @protected\n\t * @event _beforeChanges\n\t */\n\n\t/**\n\t * Fired when leaving the outermost {@link module:engine/model/model~Model#enqueueChange} or\n\t * {@link module:engine/model/model~Model#change} block.\n\t *\n\t * @protected\n\t * @event _afterChanges\n\t */\n\n\t/**\n\t * Fired every time any {@link module:engine/model/operation/operation~Operation operation} is applied on the model\n\t * using {@link #applyOperation}.\n\t *\n\t * Note that this event is suitable only for very specific use-cases. Use it if you need to listen to every single operation\n\t * applied on the document. However, in most cases {@link module:engine/model/document~Document#event:change} should\n\t * be used.\n\t *\n\t * A few callbacks are already added to this event by engine internal classes:\n\t *\n\t * * with `highest` priority operation is validated,\n\t * * with `normal` priority operation is executed,\n\t * * with `low` priority the {@link module:engine/model/document~Document} updates its version,\n\t * * with `low` priority {@link module:engine/model/liveposition~LivePosition} and {@link module:engine/model/liverange~LiveRange}\n\t * update themselves.\n\t *\n\t * @event applyOperation\n\t * @param {Array} args Arguments of the `applyOperation` which is an array with a single element - applied\n\t * {@link module:engine/model/operation/operation~Operation operation}.\n\t */\n\n\t/**\n\t * Event fired when {@link #insertContent} method is called.\n\t *\n\t * The {@link #insertContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * **Note** The `selectable` parameter for the {@link #insertContent} is optional. When `undefined` value is passed the method uses\n\t * `model.document.selection`.\n\t *\n\t * @event insertContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #deleteContent} method is called.\n\t *\n\t * The {@link #deleteContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event deleteContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #modifySelection} method is called.\n\t *\n\t * The {@link #modifySelection default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event modifySelection\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #getSelectedContent} method is called.\n\t *\n\t * The {@link #getSelectedContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event getSelectedContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n}\n\nmix( Model, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editingkeystrokehandler\n */\n\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+Z', 'undo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Y', 'redo' );\n *\n * @extends module:utils/keystrokehandler~KeystrokeHandler\n */\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * The handler can be specified as a command name or a callback.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function|String} callback If a string is passed, then the keystroke will\n\t * {@link module:core/editor/editor~Editor#execute execute a command}.\n\t * If a function, then it will be called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tif ( typeof callback == 'string' ) {\n\t\t\tconst commandName = callback;\n\n\t\t\tcallback = ( evtData, cancel ) => {\n\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\tcancel();\n\t\t\t};\n\t\t}\n\n\t\tsuper.set( keystroke, callback, options );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/editor\n */\n\nimport Config from '@ckeditor/ckeditor5-utils/src/config';\nimport EditingController from '@ckeditor/ckeditor5-engine/src/controller/editingcontroller';\nimport PluginCollection from '../plugincollection';\nimport CommandCollection from '../commandcollection';\nimport Locale from '@ckeditor/ckeditor5-utils/src/locale';\nimport DataController from '@ckeditor/ckeditor5-engine/src/controller/datacontroller';\nimport Conversion from '@ckeditor/ckeditor5-engine/src/conversion/conversion';\nimport Model from '@ckeditor/ckeditor5-engine/src/model/model';\nimport EditingKeystrokeHandler from '../editingkeystrokehandler';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Class representing a basic, generic editor.\n *\n * Check out the list of its subclasses to learn about specific editor implementations.\n *\n * All editor implementations (like {@link module:editor-classic/classiceditor~ClassicEditor} or\n * {@link module:editor-inline/inlineeditor~InlineEditor}) should extend this class. They can add their\n * own methods and properties.\n *\n * When you are implementing a plugin, then this editor represents the API\n * which your plugin can expect to get when using its {@link module:core/plugin~Plugin#editor} property.\n *\n * This API should be sufficient in order to implement the \"editing\" part of your feature\n * (schema definition, conversion, commands, keystrokes, etc.).\n * It does not define the editor UI, which is available only if the\n * the specific editor implements also the {@link module:core/editor/editorwithui~EditorWithUI} interface\n * (as most editor implementations do).\n *\n * @abstract\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Editor {\n\t/**\n\t * Creates a new instance of the Editor class.\n\t *\n\t * Usually, not to be used directly. See the static {@link module:core/editor/editor~Editor.create `create()`} method.\n\t *\n\t * @param {Object} [config] The editor config.\n\t */\n\tconstructor( config ) {\n\t\tconst availablePlugins = this.constructor.builtinPlugins;\n\n\t\t/**\n\t\t * Holds all configurations specific to this editor instance.\n\t\t *\n\t\t *\t\teditor.config.get( 'image.toolbar' );\n\t\t *\t\t// -> [ 'imageStyle:full', 'imageStyle:side', '|', 'imageTextAlternative' ]\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/config~Config}\n\t\t */\n\t\tthis.config = new Config( config, this.constructor.defaultConfig );\n\n\t\tthis.config.define( 'plugins', availablePlugins );\n\n\t\t/**\n\t\t * The plugins loaded and in use by this editor instance.\n\t\t *\n\t\t *\t\teditor.plugins.get( 'Clipboard' ); // -> instance of the Clipboard plugin.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/plugincollection~PluginCollection}\n\t\t */\n\t\tthis.plugins = new PluginCollection( this, availablePlugins );\n\n\t\t/**\n\t\t * Commands registered to the editor.\n\t\t *\n\t\t * Use the shorthand {@link #execute `editor.execute()`} method to execute commands:\n\t\t *\n\t\t *\t\t// Execute the bold command:\n\t\t *\t\teditor.execute( 'bold' );\n\t\t *\n\t\t *\t\t// Check the state of the bold command:\n\t\t *\t\teditor.commands.get( 'bold' ).value;\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/commandcollection~CommandCollection}\n\t\t */\n\t\tthis.commands = new CommandCollection();\n\n\t\tconst languageConfig = this.config.get( 'language' ) || {};\n\n\t\t/**\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = new Locale( {\n\t\t\tuiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n\t\t\tcontentLanguage: this.config.get( 'language.content' )\n\t\t} );\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method #t\n\t\t */\n\t\tthis.t = this.locale.t;\n\n\t\t/**\n\t\t * Indicates the editor life-cycle state.\n\t\t *\n\t\t * The editor is in one of the following states:\n\t\t *\n\t\t * * `initializing` - during the editor initialization (before {@link module:core/editor/editor~Editor.create `Editor.create()`})\n\t\t * finished its job,\n\t\t * * `ready` - after the promise returned by the {@link module:core/editor/editor~Editor.create `Editor.create()`}\n\t\t * method is resolved,\n\t\t * * `destroyed` - once the {@link #destroy `editor.destroy()`} method was called.\n\t\t *\n\t\t * @observable\n\t\t * @member {'initializing'|'ready'|'destroyed'} #state\n\t\t */\n\t\tthis.set( 'state', 'initializing' );\n\t\tthis.once( 'ready', () => ( this.state = 'ready' ), { priority: 'high' } );\n\t\tthis.once( 'destroy', () => ( this.state = 'destroyed' ), { priority: 'high' } );\n\n\t\t/**\n\t\t * Defines whether this editor is in read-only mode.\n\t\t *\n\t\t * In read-only mode the editor {@link #commands commands} are disabled so it is not possible\n\t\t * to modify the document by using them. Also, the editable element(s) become non-editable.\n\t\t *\n\t\t * In order to make the editor read-only, you can set this value directly:\n\t\t *\n\t\t *\t\teditor.isReadOnly = true;\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * The editor's model.\n\t\t *\n\t\t * The central point of the editor's abstract data model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = new Model();\n\n\t\t/**\n\t\t * The {@link module:engine/controller/datacontroller~DataController data controller}.\n\t\t * Used e.g. for setting and retrieving editor data.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/datacontroller~DataController}\n\t\t */\n\t\tthis.data = new DataController( this.model );\n\n\t\t/**\n\t\t * The {@link module:engine/controller/editingcontroller~EditingController editing controller}.\n\t\t * Controls user input and rendering the content for editing.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/editingcontroller~EditingController}\n\t\t */\n\t\tthis.editing = new EditingController( this.model );\n\t\tthis.editing.view.document.bind( 'isReadOnly' ).to( this );\n\n\t\t/**\n\t\t * Conversion manager through which you can register model to view and view to model converters.\n\t\t *\n\t\t * See {@link module:engine/conversion/conversion~Conversion}'s documentation to learn how to add converters.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/conversion~Conversion}\n\t\t */\n\t\tthis.conversion = new Conversion( [ this.editing.downcastDispatcher, this.data.downcastDispatcher ], this.data.upcastDispatcher );\n\t\tthis.conversion.addAlias( 'dataDowncast', this.data.downcastDispatcher );\n\t\tthis.conversion.addAlias( 'editingDowncast', this.editing.downcastDispatcher );\n\n\t\t/**\n\t\t * Instance of the {@link module:core/editingkeystrokehandler~EditingKeystrokeHandler}.\n\t\t *\n\t\t * It allows setting simple keystrokes:\n\t\t *\n\t\t *\t\t// Execute the bold command on Ctrl+E:\n\t\t *\t\teditor.keystrokes.set( 'Ctrl+E', 'bold' );\n\t\t *\n\t\t *\t\t// Execute your own callback:\n\t\t *\t\teditor.keystrokes.set( 'Ctrl+E', ( data, cancel ) => {\n\t\t *\t\t\tconsole.log( data.keyCode );\n\t\t *\n\t\t *\t\t\t// Prevent default (native) action and stop the underlying keydown event\n\t\t *\t\t\t// so no other editor feature will interfere.\n\t\t *\t\t\tcancel();\n\t\t *\t\t} );\n\t\t *\n\t\t * Note: Certain, typing oriented keystrokes (like <kbd>Backspace</kbd> or <kbd>Enter</kbd>) are handled\n\t\t * by low level mechanism and trying to listen to them via the keystroke handler will not work reliably.\n\t\t * To handle those specific keystrokes see the events fired by the\n\t\t * {@link module:engine/view/document~Document editing view document} (`editor.editing.view.document`).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editingkeystrokehandler~EditingKeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new EditingKeystrokeHandler( this );\n\t\tthis.keystrokes.listenTo( this.editing.view.document );\n\t}\n\n\t/**\n\t * Loads and initializes plugins specified in the config.\n\t *\n\t * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which resolves\n\t * once the initialization is completed providing an array of loaded plugins.\n\t */\n\tinitPlugins() {\n\t\tconst config = this.config;\n\t\tconst plugins = config.get( 'plugins' ) || [];\n\t\tconst removePlugins = config.get( 'removePlugins' ) || [];\n\t\tconst extraPlugins = config.get( 'extraPlugins' ) || [];\n\n\t\treturn this.plugins.init( plugins.concat( extraPlugins ), removePlugins );\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * **Note** The editor cannot be destroyed during the initialization phase so if it is called\n\t * while the editor {@link #state is being initialized}, it will wait for the editor initialization before destroying it.\n\t *\n\t * @fires destroy\n\t * @returns {Promise} A promise that resolves once the editor instance is fully destroyed.\n\t */\n\tdestroy() {\n\t\tlet readyPromise = Promise.resolve();\n\n\t\tif ( this.state == 'initializing' ) {\n\t\t\treadyPromise = new Promise( resolve => this.once( 'ready', resolve ) );\n\t\t}\n\n\t\treturn readyPromise\n\t\t\t.then( () => {\n\t\t\t\tthis.fire( 'destroy' );\n\t\t\t\tthis.stopListening();\n\t\t\t\tthis.commands.destroy();\n\t\t\t} )\n\t\t\t.then( () => this.plugins.destroy() )\n\t\t\t.then( () => {\n\t\t\t\tthis.model.destroy();\n\t\t\t\tthis.data.destroy();\n\t\t\t\tthis.editing.destroy();\n\t\t\t\tthis.keystrokes.destroy();\n\t\t\t} );\n\t}\n\n\t/**\n\t * Executes specified command with given parameters.\n\t *\n\t * Shorthand for:\n\t *\n\t *\t\teditor.commands.get( commandName ).execute( ... );\n\t *\n\t * @param {String} commandName Name of command to execute.\n\t * @param {*} [...commandParams] Command parameters.\n\t */\n\texecute( ...args ) {\n\t\ttry {\n\t\t\tthis.commands.execute( ...args );\n\t\t} catch ( err ) {\n\t\t\tCKEditorError.rethrowUnexpectedError( err, this );\n\t\t}\n\t}\n\n\t/**\n\t * Creates and initializes a new editor instance.\n\t *\n\t * This is an abstract method. Every editor type needs to implement its own initialization logic.\n\t *\n\t * See the `create()` methods of the existing editor types to learn how to use them:\n\t *\n\t * * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}\n\t * * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}\n\t * * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}\n\t * * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`}\n\t *\n\t * @abstract\n\t * @method module:core/editor/editor~Editor.create\n\t */\n}\n\nmix( Editor, ObservableMixin );\n\n/**\n * Fired when {@link module:engine/controller/datacontroller~DataController#event:ready data} and all additional\n * editor components are ready.\n *\n * Note: This event is most useful for plugin developers. When integrating the editor with your website or\n * application you do not have to listen to `editor#ready` because when the promise returned by the static\n * {@link module:core/editor/editor~Editor.create `Editor.create()`} event is resolved, the editor is already ready.\n * In fact, since the first moment when the editor instance is available to you is inside `then()`'s callback,\n * you cannot even add a listener to the `editor#ready` event.\n *\n * See also the {@link #state `editor.state`} property.\n *\n * @event ready\n */\n\n/**\n * Fired when this editor instance is destroyed. The editor at this point is not usable and this event should be used to\n * perform the clean-up in any plugin.\n *\n *\n * See also the {@link #state `editor.state`} property.\n *\n * @event destroy\n */\n\n/**\n * This error is thrown when a user tries to use a `<textarea>` element to create a non-classic editor in it.\n *\n * Textarea element represents a plain-text and cannot be used as a editable root element with included CKEditor5.\n * Content of an editor should be nicely present to the user and show him how it's going to looks like. Textarea element\n * doesn't support such behavior.\n *\n * Only {@glink builds/guides/overview#classic-editor Classic Editor} has implemented a special system, which\n * **replace** DOM element and load data from it\n * ({@link module:editor-classic/classiceditor~ClassicEditor.create more information}). All other editors\n * use an existing element, load data from it and make this element editable. Details about behaviour of each editor\n * might be found in an associated description of a `create` method of each editor.\n *\n * @error editor-wrong-element\n */\n\n/**\n * An array of plugins built into this editor class.\n * It is used in CKEditor 5 builds to provide a list of plugins which are later automatically initialized\n * during the editor initialization.\n *\n * They will be automatically initialized by the editor, unless listed in `config.removePlugins` and\n * unless `config.plugins` is passed.\n *\n *\t\t// Build some plugins into the editor class first.\n *\t\tClassicEditor.builtinPlugins = [ FooPlugin, BarPlugin ];\n *\n *\t\t// Normally, you need to define config.plugins, but since ClassicEditor.builtinPlugins was\n *\t\t// defined, now you can call create() without any configuration.\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> instance of the Foo plugin\n *\t\t\t\teditor.plugins.get( BarPlugin ); // -> instance of the Bar plugin\n *\t\t\t} );\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, {\n *\t\t\t\t// Don't initialize this plugins (note: it's defined by a string):\n *\t\t\t\tremovePlugins: [ 'Foo' ]\n *\t\t\t} )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> undefined\n *\t\t\t\teditor.config.get( BarPlugin ); // -> instance of the Bar plugin\n *\t\t\t} );\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, {\n *\t\t\t\t// Load only this plugin. Can also be define by a string if\n *\t\t\t\t// this plugin was built into the editor class.\n *\t\t\t\tplugins: [ FooPlugin ]\n *\t\t\t} )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> instance of the Foo plugin\n *\t\t\t\teditor.config.get( BarPlugin ); // -> undefined\n *\t\t\t} );\n *\n * See also {@link module:core/editor/editor~Editor.defaultConfig}.\n *\n * @static\n * @member {Array.<Function>} module:core/editor/editor~Editor.builtinPlugins\n */\n\n/**\n * The default config which is built into the editor class.\n * It is used in CKEditor 5 builds to provide the default config options which are later used during editor initialization.\n *\n *\t\tClassicEditor.defaultConfig = {\n *\t\t\tfoo: 1,\n *\t\t\tbar: 2\n *\t\t};\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.config.get( 'foo' ); // -> 1\n *\t\t\t\teditor.config.get( 'bar' ); // -> 2\n *\t\t\t} );\n *\n *\t\t// The default options can be overridden by the config passed to create().\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, { bar: 3 } )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.config.get( 'foo' ); // -> 1\n *\t\t\t\teditor.config.get( 'bar' ); // -> 3\n *\t\t\t} );\n *\n * See also {@link module:core/editor/editor~Editor.builtinPlugins}.\n *\n * @static\n * @member {Object} module:core/editor/editor~Editor.defaultConfig\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/editableui/editableuiview\n */\n\nimport View from '../view';\n\n/**\n * The editable UI view class.\n *\n * @extends module:ui/view~View\n */\nexport default class EditableUIView extends View {\n\t/**\n\t * Creates an instance of EditableUIView class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t * @param {module:engine/view/view~View} editingView The editing view instance the editable is related to.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, this view\n\t * should create it. Otherwise, the existing element should be used.\n\t */\n\tconstructor( locale, editingView, editableElement ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-content',\n\t\t\t\t\t'ck-editor__editable',\n\t\t\t\t\t'ck-rounded-corners'\n\t\t\t\t],\n\t\t\t\tlang: locale.contentLanguage,\n\t\t\t\tdir: locale.contentLanguageDirection\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The name of the editable UI view.\n\t\t *\n\t\t * @member {String} #name\n\t\t */\n\t\tthis.name = null;\n\n\t\t/**\n\t\t * Controls whether the editable is focused, i.e. the user is typing in it.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The element which is the main editable element (usually the one with `contentEditable=\"true\"`).\n\t\t *\n\t\t * @private\n\t\t * @member {HTMLElement} #_editableElement\n\t\t */\n\t\tthis._editableElement = editableElement;\n\n\t\t/**\n\t\t * Whether an external {@link #_editableElement} was passed into the constructor, which also means\n\t\t * the view will not render its {@link #template}.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean} #_hasExternalElement\n\t\t */\n\t\tthis._hasExternalElement = !!this._editableElement;\n\n\t\t/**\n\t\t * The editing view instance the editable is related to. Editable uses the editing\n\t\t * view to dynamically modify its certain DOM attributes after {@link #render rendering}.\n\t\t *\n\t\t * **Note**: The DOM attributes are performed by the editing view and not UI\n\t\t * {@link module:ui/view~View#bindTemplate template bindings} because once rendered,\n\t\t * the editable DOM element must remain under the full control of the engine to work properly.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/view/view~View} #isFocused\n\t\t */\n\t\tthis._editingView = editingView;\n\t}\n\n\t/**\n\t * Renders the view by either applying the {@link #template} to the existing\n\t * {@link #_editableElement} or assigning {@link #element} as {@link #_editableElement}.\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tif ( this._hasExternalElement ) {\n\t\t\tthis.template.apply( this.element = this._editableElement );\n\t\t} else {\n\t\t\tthis._editableElement = this.element;\n\t\t}\n\n\t\tthis.on( 'change:isFocused', () => this._updateIsFocusedClasses() );\n\t\tthis._updateIsFocusedClasses();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tif ( this._hasExternalElement ) {\n\t\t\tthis.template.revert( this._editableElement );\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Updates the `ck-focused` and `ck-blurred` CSS classes on the {@link #element} according to\n\t * the {@link #isFocused} property value using the {@link #_editingView editing view} API.\n\t *\n\t * @private\n\t */\n\t_updateIsFocusedClasses() {\n\t\tconst editingView = this._editingView;\n\n\t\tif ( editingView.isRenderingInProgress ) {\n\t\t\tupdateAfterRender( this );\n\t\t} else {\n\t\t\tupdate( this );\n\t\t}\n\n\t\tfunction update( view ) {\n\t\t\teditingView.change( writer => {\n\t\t\t\tconst viewRoot = editingView.document.getRoot( view.name );\n\n\t\t\t\twriter.addClass( view.isFocused ? 'ck-focused' : 'ck-blurred', viewRoot );\n\t\t\t\twriter.removeClass( view.isFocused ? 'ck-blurred' : 'ck-focused', viewRoot );\n\t\t\t} );\n\t\t}\n\n\t\t// In a case of a multi-root editor, a callback will be attached more than once (one callback for each root).\n\t\t// While executing one callback the `isRenderingInProgress` observable is changing what causes executing another\n\t\t// callback and render is called inside the already pending render.\n\t\t// We need to be sure that callback is executed only when the value has changed from `true` to `false`.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1676.\n\t\tfunction updateAfterRender( view ) {\n\t\t\teditingView.once( 'change:isRenderingInProgress', ( evt, name, value ) => {\n\t\t\t\tif ( !value ) {\n\t\t\t\t\tupdate( view );\n\t\t\t\t} else {\n\t\t\t\t\tupdateAfterRender( view );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editableui/inline/inlineeditableuiview\n */\nimport EditableUIView from '../../editableui/editableuiview';\n/**\n * The inline editable UI class implementing an inline {@link module:ui/editableui/editableuiview~EditableUIView}.\n *\n * @extends module:ui/editableui/editableuiview~EditableUIView\n */\nexport default class InlineEditableUIView extends EditableUIView {\n    /**\n\t * Creates an instance of the InlineEditableUIView class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t * @param {module:engine/view/view~View} editingView The editing view instance the editable is related to.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, the\n\t * {@link module:ui/editableui/editableuiview~EditableUIView}\n\t * will create it. Otherwise, the existing element will be used.\n\t */\n    constructor(locale, editingView, editableElement) {\n        super(locale, editingView, editableElement);\n        this.extendTemplate({\n            attributes: {\n                role: 'textbox',\n                class: 'ck-editor__editable_inline'\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        const editingView = this._editingView;\n        const t = this.t;\n        editingView.change(writer => {\n            const viewRoot = editingView.document.getRoot(this.name);\n            writer.setAttribute('aria-label', t('Rich Text Editor, %0', [this.name]), viewRoot);\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/componentfactory\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * A helper class implementing the UI component ({@link module:ui/view~View view}) factory.\n *\n * It allows functions producing specific UI components to be registered under their unique names\n * in the factory. A registered component can be then instantiated by providing its name.\n * Note that names are case insensitive.\n *\n *\t\t// The editor provides localization tools for the factory.\n *\t\tconst factory = new ComponentFactory( editor );\n *\n *\t\tfactory.add( 'foo', locale => new FooView( locale ) );\n *\t\tfactory.add( 'bar', locale => new BarView( locale ) );\n *\n *\t\t// An instance of FooView.\n *\t\tconst fooInstance = factory.create( 'foo' );\n *\n *\t\t// Names are case insensitive so this is also allowed:\n *\t\tconst barInstance = factory.create( 'Bar' );\n *\n * The {@link module:core/editor/editor~Editor#locale editor locale} is passed to the factory\n * function when {@link module:ui/componentfactory~ComponentFactory#create} is called.\n */\nexport default class ComponentFactory {\n\t/**\n\t * Creates an instance of the factory.\n\t *\n\t * @constructor\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor instance that the factory belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * Registered component factories.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._components = new Map();\n\t}\n\n\t/**\n\t * Returns an iterator of registered component names. Names are returned in lower case.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* names() {\n\t\tfor ( const value of this._components.values() ) {\n\t\t\tyield value.originalName;\n\t\t}\n\t}\n\n\t/**\n\t * Registers a component factory function that will be used by the\n\t * {@link #create create} method and called with the\n\t * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,\n\t * allowing localization of the {@link module:ui/view~View view}.\n\t *\n\t * @param {String} name The name of the component.\n\t * @param {Function} callback The callback that returns the component.\n\t */\n\tadd( name, callback ) {\n\t\tif ( this.has( name ) ) {\n\t\t\t/**\n\t\t\t * The item already exists in the component factory.\n\t\t\t *\n\t\t\t * @error componentfactory-item-exists\n\t\t\t * @param {String} name The name of the component.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'componentfactory-item-exists: The item already exists in the component factory.',\n\t\t\t\tthis,\n\t\t\t\t{ name }\n\t\t\t);\n\t\t}\n\n\t\tthis._components.set( getNormalized( name ), { callback, originalName: name } );\n\t}\n\n\t/**\n\t * Creates an instance of a component registered in the factory under a specific name.\n\t *\n\t * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to\n\t * the previously {@link #add added} factory function, allowing localization of the\n\t * {@link module:ui/view~View view}.\n\t *\n\t * @param {String} name The name of the component.\n\t * @returns {module:ui/view~View} The instantiated component view.\n\t */\n\tcreate( name ) {\n\t\tif ( !this.has( name ) ) {\n\t\t\t/**\n\t\t\t * The required component is not registered in the component factory. Please make sure\n\t\t\t * the provided name is correct and the component has been correctly\n\t\t\t * {@link #add added} to the factory.\n\t\t\t *\n\t\t\t * @error componentfactory-item-missing\n\t\t\t * @param {String} name The name of the missing component.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'componentfactory-item-missing: The required component is not registered in the factory.',\n\t\t\t\tthis,\n\t\t\t\t{ name }\n\t\t\t);\n\t\t}\n\n\t\treturn this._components.get( getNormalized( name ) ).callback( this.editor.locale );\n\t}\n\n\t/**\n\t * Checks if a component of a given name is registered in the factory.\n\t *\n\t * @param {String} name The name of the component.\n\t * @returns {Boolean}\n\t */\n\thas( name ) {\n\t\treturn this._components.has( getNormalized( name ) );\n\t}\n}\n\n//\n// Ensures that the component name used as the key in the internal map is in lower case.\n//\n// @private\n// @param {String} name\n// @returns {String}\nfunction getNormalized( name ) {\n\treturn String( name ).toLowerCase();\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/editorui\n */\n\n/* globals console */\n\nimport ComponentFactory from '@ckeditor/ckeditor5-ui/src/componentfactory';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * A class providing the minimal interface that is required to successfully bootstrap any editor UI.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class EditorUI {\n\t/**\n\t * Creates an instance of the editor UI class.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor that the UI belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * An instance of the {@link module:ui/componentfactory~ComponentFactory}, a registry used by plugins\n\t\t * to register factories of specific UI components.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/componentfactory~ComponentFactory} #componentFactory\n\t\t */\n\t\tthis.componentFactory = new ComponentFactory( editor );\n\n\t\t/**\n\t\t * Stores the information about the editor UI focus and propagates it so various plugins and components\n\t\t * are unified as a focus group.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Stores all editable elements used by the editor instance.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<String,HTMLElement>}\n\t\t */\n\t\tthis._editableElementsMap = new Map();\n\n\t\t// Informs UI components that should be refreshed after layout change.\n\t\tthis.listenTo( editor.editing.view.document, 'layoutChanged', () => this.update() );\n\t}\n\n\t/**\n\t * The main (outermost) DOM element of the editor UI.\n\t *\n\t * For example, in {@link module:editor-classic/classiceditor~ClassicEditor} it is a `<div>` which\n\t * wraps the editable element and the toolbar. In {@link module:editor-inline/inlineeditor~InlineEditor}\n\t * it is the editable element itself (as there is no other wrapper). However, in\n\t * {@link module:editor-decoupled/decouplededitor~DecoupledEditor} it is set to `null` because this editor does not\n\t * come with a single \"main\" HTML element (its editable element and toolbar are separate).\n\t *\n\t * This property can be understood as a shorthand for retrieving the element that a specific editor integration\n\t * considers to be its main DOM element.\n\t *\n\t * @readonly\n\t * @member {HTMLElement|null} #element\n\t */\n\tget element() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Fires the {@link module:core/editor/editorui~EditorUI#event:update `update`} event.\n\t *\n\t * This method should be called when the editor UI (e.g. positions of its balloons) needs to be updated due to\n\t * some environmental change which CKEditor 5 is not aware of (e.g. resize of a container in which it is used).\n\t */\n\tupdate() {\n\t\tthis.fire( 'update' );\n\t}\n\n\t/**\n\t * Destroys the UI.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\n\t\tthis.focusTracker.destroy();\n\n\t\t// Clean–up the references to the CKEditor instance stored in the native editable DOM elements.\n\t\tfor ( const domElement of this._editableElementsMap.values() ) {\n\t\t\tdomElement.ckeditorInstance = null;\n\t\t}\n\n\t\tthis._editableElementsMap = new Map();\n\t}\n\n\t/**\n\t * Store the native DOM editable element used by the editor under\n\t * a unique name.\n\t *\n\t * @param {String} rootName The unique name of the editable element.\n\t * @param {HTMLElement} domElement The native DOM editable element.\n\t */\n\tsetEditableElement( rootName, domElement ) {\n\t\tthis._editableElementsMap.set( rootName, domElement );\n\n\t\t// Put a reference to the CKEditor instance in the editable native DOM element.\n\t\t// It helps 3rd–party software (browser extensions, other libraries) access and recognize\n\t\t// CKEditor 5 instances (editing roots) and use their API (there is no global editor\n\t\t// instance registry).\n\t\tif ( !domElement.ckeditorInstance ) {\n\t\t\tdomElement.ckeditorInstance = this.editor;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the editable editor element with the given name or null if editable does not exist.\n\t *\n\t * @param {String} [rootName=main] The editable name.\n\t * @returns {HTMLElement|undefined}\n\t */\n\tgetEditableElement( rootName = 'main' ) {\n\t\treturn this._editableElementsMap.get( rootName );\n\t}\n\n\t/**\n\t * Returns array of names of all editor editable elements.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetEditableElementsNames() {\n\t\treturn this._editableElementsMap.keys();\n\t}\n\n\t/**\n\t * Stores all editable elements used by the editor instance.\n\t *\n\t * @protected\n\t * @deprecated\n\t * @member {Map.<String,HTMLElement>}\n\t */\n\tget _editableElements() {\n\t\t/**\n\t\t * The {@link module:core/editor/editorui~EditorUI#_editableElements `EditorUI#_editableElements`} property has been\n\t\t * deprecated and will be removed in the near future. Please use {@link #setEditableElement `setEditableElement()`} and\n\t\t * {@link #getEditableElement `getEditableElement()`} methods instead.\n\t\t *\n\t\t * @error editor-ui-deprecated-editable-elements\n\t\t * @param {module:core/editor/editorui~EditorUI} editorUI Editor UI instance the deprecated property belongs to.\n\t\t */\n\t\tconsole.warn(\n\t\t\t'editor-ui-deprecated-editable-elements: ' +\n\t\t\t'The EditorUI#_editableElements property has been deprecated and will be removed in the near future.',\n\t\t\t{ editorUI: this } );\n\n\t\treturn this._editableElementsMap;\n\t}\n\n\t/**\n\t * Fired when the editor UI is ready.\n\t *\n\t * Fired before {@link module:engine/controller/datacontroller~DataController#event:ready}.\n\t *\n\t * @event ready\n\t */\n\n\t/**\n\t * Fired whenever the UI (all related components) should be refreshed.\n\t *\n\t * **Note:**: The event is fired after each {@link module:engine/view/document~Document#event:layoutChanged}.\n\t * It can also be fired manually via the {@link module:core/editor/editorui~EditorUI#update} method.\n\t *\n\t * @event update\n\t */\n}\n\nmix( EditorUI, EmitterMixin );\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/list/listview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\nimport '../../theme/components/list/list.css';\n\n/**\n * The list view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ListView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Collection of the child list views.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * Helps cycling over focusable {@link #items} in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.items,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate list items backwards using the arrowup key.\n\t\t\t\tfocusPrevious: 'arrowup',\n\n\t\t\t\t// Navigate toolbar items forwards using the arrowdown key.\n\t\t\t\tfocusNext: 'arrowdown',\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'ul',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-reset',\n\t\t\t\t\t'ck-list'\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.items\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Items added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #items}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #items}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/list/listitemview\n */\n\nimport View from '../view';\n\n/**\n * The list item view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ListItemView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Collection of the child views inside of the list item {@link #element}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'li',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-list__item'\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the list item.\n\t */\n\tfocus() {\n\t\tthis.children.first.focus();\n\t}\n}\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import root from './_root.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nexport default cloneBuffer;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/bold/boldediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\n\nconst BOLD = 'bold';\n\n/**\n * The bold editing feature.\n *\n * It registers the `'bold'` command and introduces the `bold` attribute in the model which renders to the view\n * as a `<strong>` element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BoldEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'BoldEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\t// Allow bold attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: BOLD } );\n\t\teditor.model.schema.setAttributeProperties( BOLD, {\n\t\t\tisFormatting: true,\n\t\t\tcopyOnEnter: true\n\t\t} );\n\n\t\t// Build converter from model to view for data and editing pipelines.\n\t\teditor.conversion.attributeToElement( {\n\t\t\tmodel: BOLD,\n\t\t\tview: 'strong',\n\t\t\tupcastAlso: [\n\t\t\t\t'b',\n\t\t\t\tviewElement => {\n\t\t\t\t\tconst fontWeight = viewElement.getStyle( 'font-weight' );\n\n\t\t\t\t\tif ( !fontWeight ) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Value of the `font-weight` attribute can be defined as a string or a number.\n\t\t\t\t\tif ( fontWeight == 'bold' || Number( fontWeight ) >= 600 ) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: true,\n\t\t\t\t\t\t\tstyles: [ 'font-weight' ]\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\t// Create bold command.\n\t\teditor.commands.add( BOLD, new AttributeCommand( editor, BOLD ) );\n\n\t\t// Set the Ctrl+B keystroke.\n\t\teditor.keystrokes.set( 'CTRL+B', BOLD );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/italic/italicediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\n\nconst ITALIC = 'italic';\n\n/**\n * The italic editing feature.\n *\n * It registers the `'italic'` command, the <kbd>Ctrl+I</kbd> keystroke and introduces the `italic` attribute in the model\n * which renders to the view as an `<i>` element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ItalicEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ItalicEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Allow italic attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: ITALIC } );\n\t\teditor.model.schema.setAttributeProperties( ITALIC, {\n\t\t\tisFormatting: true,\n\t\t\tcopyOnEnter: true\n\t\t} );\n\n\t\teditor.conversion.attributeToElement( {\n\t\t\tmodel: ITALIC,\n\t\t\tview: 'i',\n\t\t\tupcastAlso: [\n\t\t\t\t'em',\n\t\t\t\t{\n\t\t\t\t\tstyles: {\n\t\t\t\t\t\t'font-style': 'italic'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\t// Create italic command.\n\t\teditor.commands.add( ITALIC, new AttributeCommand( editor, ITALIC ) );\n\n\t\t// Set the Ctrl+I keystroke.\n\t\teditor.keystrokes.set( 'CTRL+I', ITALIC );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/changebuffer\n */\n\n/**\n * Change buffer allows to group atomic changes (like characters that have been typed) into\n * {@link module:engine/model/batch~Batch batches}.\n *\n * Batches represent single undo steps, hence changes added to one single batch are undone together.\n *\n * The buffer has a configurable limit of atomic changes that it can accommodate. After the limit was\n * exceeded (see {@link ~ChangeBuffer#input}), a new batch is created in {@link ~ChangeBuffer#batch}.\n *\n * To use the change buffer you need to let it know about the number of changes that were added to the batch:\n *\n *\t\tconst buffer = new ChangeBuffer( model, LIMIT );\n *\n *\t\t// Later on in your feature:\n *\t\tbuffer.batch.insert( pos, insertedCharacters );\n *\t\tbuffer.input( insertedCharacters.length );\n *\n */\nexport default class ChangeBuffer {\n\t/**\n\t * Creates a new instance of the change buffer.\n\t *\n\t * @param {module:engine/model/model~Model} model\n\t * @param {Number} [limit=20] The maximum number of atomic changes which can be contained in one batch.\n\t */\n\tconstructor( model, limit = 20 ) {\n\t\t/**\n\t\t * The model instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},\n\t\t * the {@link #batch batch} is set to a new one.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #size\n\t\t */\n\t\tthis.size = 0;\n\n\t\t/**\n\t\t * The maximum number of atomic changes which can be contained in one batch.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #limit\n\t\t */\n\t\tthis.limit = limit;\n\n\t\t/**\n\t\t * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isLocked\n\t\t */\n\t\tthis.isLocked = false;\n\n\t\t// The function to be called in order to notify the buffer about batches which appeared in the document.\n\t\t// The callback will check whether it is a new batch and in that case the buffer will be flushed.\n\t\t//\n\t\t// The reason why the buffer needs to be flushed whenever a new batch appears is that the changes added afterwards\n\t\t// should be added to a new batch. For instance, when the  user types, then inserts an image, and then types again,\n\t\t// the characters typed after inserting the image should be added to a different batch than the characters typed before.\n\t\tthis._changeCallback = ( evt, batch ) => {\n\t\t\tif ( batch.type != 'transparent' && batch !== this._batch ) {\n\t\t\t\tthis._reset( true );\n\t\t\t}\n\t\t};\n\n\t\tthis._selectionChangeCallback = () => {\n\t\t\tthis._reset();\n\t\t};\n\n\t\tthis.model.document.on( 'change', this._changeCallback );\n\n\t\tthis.model.document.selection.on( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.on( 'change:attribute', this._selectionChangeCallback );\n\n\t\t/**\n\t\t * The current batch instance.\n\t\t *\n\t\t * @private\n\t\t * @member #_batch\n\t\t */\n\n\t\t/**\n\t\t * The callback to document the change event which later needs to be removed.\n\t\t *\n\t\t * @private\n\t\t * @member #_changeCallback\n\t\t */\n\n\t\t/**\n\t\t * The callback to document selection `change:attribute` and `change:range` events which resets the buffer.\n\t\t *\n\t\t * @private\n\t\t * @member #_selectionChangeCallback\n\t\t */\n\t}\n\n\t/**\n\t * The current batch to which a feature should add its operations. Once the {@link #size}\n\t * is reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @type {module:engine/model/batch~Batch}\n\t */\n\tget batch() {\n\t\tif ( !this._batch ) {\n\t\t\tthis._batch = this.model.createBatch();\n\t\t}\n\n\t\treturn this._batch;\n\t}\n\n\t/**\n\t * The input number of changes into the buffer. Once the {@link #size} is\n\t * reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @param {Number} changeCount The number of atomic changes to input.\n\t */\n\tinput( changeCount ) {\n\t\tthis.size += changeCount;\n\n\t\tif ( this.size >= this.limit ) {\n\t\t\tthis._reset( true );\n\t\t}\n\t}\n\n\t/**\n\t * Locks the buffer.\n\t */\n\tlock() {\n\t\tthis.isLocked = true;\n\t}\n\n\t/**\n\t * Unlocks the buffer.\n\t */\n\tunlock() {\n\t\tthis.isLocked = false;\n\t}\n\n\t/**\n\t * Destroys the buffer.\n\t */\n\tdestroy() {\n\t\tthis.model.document.off( 'change', this._changeCallback );\n\t\tthis.model.document.selection.off( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.off( 'change:attribute', this._selectionChangeCallback );\n\t}\n\n\t/**\n\t * Resets the change buffer.\n\t *\n\t * @private\n\t * @param {Boolean} [ignoreLock] Whether internal lock {@link #isLocked} should be ignored.\n\t */\n\t_reset( ignoreLock ) {\n\t\tif ( !this.isLocked || ignoreLock ) {\n\t\t\tthis._batch = null;\n\t\t\tthis.size = 0;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/inputcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport ChangeBuffer from './utils/changebuffer';\n\n/**\n * The input command. Used by the {@link module:typing/input~Input input feature} to handle typing.\n *\n * @extends module:core/command~Command\n */\nexport default class InputCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Number} undoStepSize The maximum number of atomic changes\n\t * which can be contained in one batch in the command buffer.\n\t */\n\tconstructor( editor, undoStepSize ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Typing's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {module:typing/utils/changebuffer~ChangeBuffer} #_buffer\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, undoStepSize );\n\n\t\t/**\n\t\t * Stores batches created by the input command. The batches are used to differentiate input batches from other batches using\n\t\t * {@link module:typing/input~Input#isInput} method.\n\t\t *\n\t\t * @type {WeakSet<module:engine/model/batch~Batch>}\n\t\t * @protected\n\t\t */\n\t\tthis._batches = new WeakSet();\n\t}\n\n\t/**\n\t * The current change buffer.\n\t *\n\t * @type {module:typing/utils/changebuffer~ChangeBuffer}\n\t */\n\tget buffer() {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._buffer.destroy();\n\t}\n\n\t/**\n\t * Executes the input command. It replaces the content within the given range with the given text.\n\t * Replacing is a two step process, first the content within the range is removed and then the new text is inserted\n\t * at the beginning of the range (which after the removal is a collapsed range).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {String} [options.text=''] The text to be inserted.\n\t * @param {module:engine/model/range~Range} [options.range] The range in which the text is inserted. Defaults\n\t * to the first range in the current selection.\n\t * @param {module:engine/model/range~Range} [options.resultRange] The range where the selection\n\t * should be placed after the insertion. If not specified, the selection will be placed right after\n\t * the inserted text.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst text = options.text || '';\n\t\tconst textInsertions = text.length;\n\t\tconst range = options.range || doc.selection.getFirstRange();\n\t\tconst resultRange = options.resultRange;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tconst isCollapsedRange = range.isCollapsed;\n\n\t\t\tthis._buffer.lock();\n\n\t\t\tmodel.deleteContent( model.createSelection( range ) );\n\n\t\t\tif ( text ) {\n\t\t\t\tmodel.insertContent( writer.createText( text, doc.selection.getAttributes() ), range.start );\n\t\t\t}\n\n\t\t\tif ( resultRange ) {\n\t\t\t\twriter.setSelection( resultRange );\n\t\t\t} else if ( isCollapsedRange ) {\n\t\t\t\t// If range was collapsed just shift the selection by the number of inserted characters.\n\t\t\t\twriter.setSelection( range.start.getShiftedBy( textInsertions ) );\n\t\t\t}\n\n\t\t\tthis._buffer.unlock();\n\n\t\t\tthis._buffer.input( textInsertions );\n\n\t\t\t// Store the batch as an 'input' batch for the Input.isInput( batch ) check.\n\t\t\tthis._batches.add( this._buffer.batch );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/injectunsafekeystrokeshandling\n */\n\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Handles keystrokes which are unsafe for typing. This handler's logic is explained\n * in https://github.com/ckeditor/ckeditor5-typing/issues/83#issuecomment-398690251.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport default function injectUnsafeKeystrokesHandling( editor ) {\n\tlet latestCompositionSelection = null;\n\n\tconst model = editor.model;\n\tconst view = editor.editing.view;\n\tconst inputCommand = editor.commands.get( 'input' );\n\n\t// For Android, we want to handle keystrokes on `beforeinput` to be sure that code in `DeleteObserver` already had a chance to be fired.\n\tif ( env.isAndroid ) {\n\t\tview.document.on( 'beforeinput', ( evt, evtData ) => handleUnsafeKeystroke( evtData ), { priority: 'lowest' } );\n\t} else {\n\t\tview.document.on( 'keydown', ( evt, evtData ) => handleUnsafeKeystroke( evtData ), { priority: 'lowest' } );\n\t}\n\n\tview.document.on( 'compositionstart', handleCompositionStart, { priority: 'lowest' } );\n\n\tview.document.on( 'compositionend', () => {\n\t\tlatestCompositionSelection = model.createSelection( model.document.selection );\n\t}, { priority: 'lowest' } );\n\n\t// Handles the keydown event. We need to guess whether such keystroke is going to result\n\t// in typing. If so, then before character insertion happens, any selected content needs\n\t// to be deleted. Otherwise the default browser deletion mechanism would be\n\t// triggered, resulting in:\n\t//\n\t// * Hundreds of mutations which could not be handled.\n\t// * But most importantly, loss of control over how the content is being deleted.\n\t//\n\t// The method is used in a low-priority listener, hence allowing other listeners (e.g. delete or enter features)\n\t// to handle the event.\n\t//\n\t// @param {module:engine/view/observer/keyobserver~KeyEventData} evtData\n\tfunction handleUnsafeKeystroke( evtData ) {\n\t\tconst doc = model.document;\n\t\tconst isComposing = view.document.isComposing;\n\t\tconst isSelectionUnchanged = latestCompositionSelection && latestCompositionSelection.isEqual( doc.selection );\n\n\t\t// Reset stored composition selection.\n\t\tlatestCompositionSelection = null;\n\n\t\t// By relying on the state of the input command we allow disabling the entire input easily\n\t\t// by just disabling the input command. We could’ve used here the delete command but that\n\t\t// would mean requiring the delete feature which would block loading one without the other.\n\t\t// We could also check the editor.isReadOnly property, but that wouldn't allow to block\n\t\t// the input without blocking other features.\n\t\tif ( !inputCommand.isEnabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isSafeKeystroke( evtData ) || doc.selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If during composition, deletion should be prevented as it may remove composed sequence (#83).\n\t\tif ( isComposing && evtData.keyCode === 229 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there is a `keydown` event fired with '229' keycode it might be related\n\t\t// to recent composition. Check if selection is the same as upon ending recent composition,\n\t\t// if so do not remove selected content as it will remove composed sequence (#83).\n\t\tif ( !isComposing && evtData.keyCode === 229 && isSelectionUnchanged ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeleteSelectionContent();\n\t}\n\n\t// Handles the `compositionstart` event. It is used only in special cases to remove the contents\n\t// of a non-collapsed selection so composition itself does not result in complex mutations.\n\t//\n\t// The special case mentioned above is a situation in which the `keydown` event is fired after\n\t// `compositionstart` event. In such cases {@link #handleKeydown} cannot clear current selection\n\t// contents (because it is too late and will break the composition) so the composition handler takes care of it.\n\tfunction handleCompositionStart() {\n\t\tconst doc = model.document;\n\t\tconst isFlatSelection = doc.selection.rangeCount === 1 ? doc.selection.getFirstRange().isFlat : true;\n\n\t\t// If on `compositionstart` there is a non-collapsed selection which start and end have different parents\n\t\t// it means the `handleKeydown()` method did not remove its contents. It happens usually because\n\t\t// of different order of events (`compositionstart` before `keydown` - in Safari). In such cases\n\t\t// we need to remove selection contents on composition start (#83).\n\t\tif ( doc.selection.isCollapsed || isFlatSelection ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeleteSelectionContent();\n\t}\n\n\tfunction deleteSelectionContent() {\n\t\tconst buffer = inputCommand.buffer;\n\n\t\tbuffer.lock();\n\n\t\tmodel.enqueueChange( buffer.batch, () => {\n\t\t\tmodel.deleteContent( model.document.selection );\n\t\t} );\n\n\t\tbuffer.unlock();\n\t}\n}\n\nconst safeKeycodes = [\n\tgetCode( 'arrowUp' ),\n\tgetCode( 'arrowRight' ),\n\tgetCode( 'arrowDown' ),\n\tgetCode( 'arrowLeft' ),\n\t9, // Tab\n\t16, // Shift\n\t17, // Ctrl\n\t18, // Alt\n\t19, // Pause\n\t20, // CapsLock\n\t27, // Escape\n\t33, // PageUp\n\t34, // PageDown\n\t35, // Home\n\t36, // End,\n\t45, // Insert,\n\t91, // Windows,\n\t93, // Menu key,\n\t144, // NumLock\n\t145, // ScrollLock,\n\t173, // Mute/Unmute\n\t174, // Volume up\n\t175, // Volume down,\n\t176, // Next song,\n\t177, // Previous song,\n\t178, // Stop,\n\t179, // Play/Pause,\n\t255 // Display brightness (increase and decrease)\n];\n\n// Function keys.\nfor ( let code = 112; code <= 135; code++ ) {\n\tsafeKeycodes.push( code );\n}\n\n// Returns `true` if a keystroke should not cause any content change caused by \"typing\".\n//\n// Note: This implementation is very simple and will need to be refined with time.\n//\n// @private\n// @param {engine.view.observer.keyObserver.KeyEventData} keyData\n// @returns {Boolean}\nfunction isSafeKeystroke( keyData ) {\n\t// Keystrokes which contain Ctrl don't represent typing.\n\tif ( keyData.ctrlKey ) {\n\t\treturn true;\n\t}\n\n\treturn safeKeycodes.includes( keyData.keyCode );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/utils\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\n\n/**\n * Returns true if container children have mutated or more than a single text node was changed.\n *\n * @private\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n * @returns {Boolean}\n */\nexport function containerChildrenMutated( mutations ) {\n\tif ( mutations.length == 0 ) {\n\t\treturn false;\n\t}\n\n\t// Check if there is any mutation of `children` type or any mutation that changes more than one text node.\n\tfor ( const mutation of mutations ) {\n\t\tif ( mutation.type === 'children' && !getSingleTextNodeChange( mutation ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns change made to a single text node.\n *\n * @private\n * @param {module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren} mutation\n * @returns {Object|undefined} Change object (see {@link module:utils/difftochanges~diffToChanges} output)\n * or undefined if more than a single text node was changed.\n */\nexport function getSingleTextNodeChange( mutation ) {\n\t// One new node.\n\tif ( mutation.newChildren.length - mutation.oldChildren.length != 1 ) {\n\t\treturn;\n\t}\n\n\t// Which is text.\n\tconst diffResult = diff( mutation.oldChildren, mutation.newChildren, compareChildNodes );\n\tconst changes = diffToChanges( diffResult, mutation.newChildren );\n\n\t// In case of [ delete, insert, insert ] the previous check will not exit.\n\tif ( changes.length > 1 ) {\n\t\treturn;\n\t}\n\n\tconst change = changes[ 0 ];\n\n\t// Which is text.\n\tif ( !( !!change.values[ 0 ] && change.values[ 0 ].is( 'text' ) ) ) {\n\t\treturn;\n\t}\n\n\treturn change;\n}\n\n/**\n * Checks whether two view nodes are identical, which means they are the same object\n * or contain exactly same data (in case of text nodes).\n *\n * @private\n * @param {module:engine/view/node~Node} oldChild\n * @param {module:engine/view/node~Node} newChild\n * @returns {Boolean}\n */\nexport function compareChildNodes( oldChild, newChild ) {\n\tif ( !!oldChild && oldChild.is( 'text' ) && !!newChild && newChild.is( 'text' ) ) {\n\t\treturn oldChild.data === newChild.data;\n\t} else {\n\t\treturn oldChild === newChild;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/difftochanges\n */\n\n/**\n * Creates a set of changes which need to be applied to the input in order to transform\n * it into the output. This function can be used with strings or arrays.\n *\n *\t\tconst input = Array.from( 'abc' );\n *\t\tconst output = Array.from( 'xaby' );\n *\t\tconst changes = diffToChanges( diff( input, output ), output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput.splice( change.index, 0, ...change.values );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput.splice( change.index, change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\tinput.join( '' ) == output.join( '' ); // -> true\n *\n * @param {Array.<'equal'|'insert'|'delete'>} diff Result of {@link module:utils/diff~diff}.\n * @param {String|Array} output The string or array which was passed as diff's output.\n * @returns {Array.<Object>} Set of changes (insert or delete) which need to be applied to the input\n * in order to transform it into the output.\n */\nexport default function diffToChanges( diff, output ) {\n\tconst changes = [];\n\tlet index = 0;\n\tlet lastOperation;\n\n\tdiff.forEach( change => {\n\t\tif ( change == 'equal' ) {\n\t\t\tpushLast();\n\n\t\t\tindex++;\n\t\t} else if ( change == 'insert' ) {\n\t\t\tif ( isContinuationOf( 'insert' ) ) {\n\t\t\t\tlastOperation.values.push( output[ index ] );\n\t\t\t} else {\n\t\t\t\tpushLast();\n\n\t\t\t\tlastOperation = {\n\t\t\t\t\ttype: 'insert',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalues: [ output[ index ] ]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tindex++;\n\t\t} else /* if ( change == 'delete' ) */ {\n\t\t\tif ( isContinuationOf( 'delete' ) ) {\n\t\t\t\tlastOperation.howMany++;\n\t\t\t} else {\n\t\t\t\tpushLast();\n\n\t\t\t\tlastOperation = {\n\t\t\t\t\ttype: 'delete',\n\t\t\t\t\tindex,\n\t\t\t\t\thowMany: 1\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} );\n\n\tpushLast();\n\n\treturn changes;\n\n\tfunction pushLast() {\n\t\tif ( lastOperation ) {\n\t\t\tchanges.push( lastOperation );\n\t\t\tlastOperation = null;\n\t\t}\n\t}\n\n\tfunction isContinuationOf( expected ) {\n\t\treturn lastOperation && lastOperation.type == expected;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/injecttypingmutationshandling\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\n\nimport { getSingleTextNodeChange, containerChildrenMutated } from './utils';\n\n/**\n * Handles mutations caused by normal typing.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport default function injectTypingMutationsHandling( editor ) {\n\teditor.editing.view.document.on( 'mutations', ( evt, mutations, viewSelection ) => {\n\t\tnew MutationHandler( editor ).handle( mutations, viewSelection );\n\t} );\n}\n\n/**\n * Helper class for translating DOM mutations into model changes.\n *\n * @private\n */\nclass MutationHandler {\n\t/**\n\t * Creates an instance of the mutation handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * Editor instance for which mutations are handled.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The editing controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/editingcontroller~EditingController} #editing\n\t\t */\n\t\tthis.editing = this.editor.editing;\n\t}\n\n\t/**\n\t * Handles given mutations.\n\t *\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\thandle( mutations, viewSelection ) {\n\t\tif ( containerChildrenMutated( mutations ) ) {\n\t\t\tthis._handleContainerChildrenMutations( mutations, viewSelection );\n\t\t} else {\n\t\t\tfor ( const mutation of mutations ) {\n\t\t\t\t// Fortunately it will never be both.\n\t\t\t\tthis._handleTextMutation( mutation, viewSelection );\n\t\t\t\tthis._handleTextNodeInsertion( mutation );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles situations when container's children mutated during input. This can happen when\n\t * the browser is trying to \"fix\" DOM in certain situations. For example, when the user starts to type\n\t * in `<p><a href=\"\"><i>Link{}</i></a></p>`, the browser might change the order of elements\n\t * to `<p><i><a href=\"\">Link</a>x{}</i></p>`. A similar situation happens when the spell checker\n\t * replaces a word wrapped with `<strong>` with a word wrapped with a `<b>` element.\n\t *\n\t * To handle such situations, the common DOM ancestor of all mutations is converted to the model representation\n\t * and then compared with the current model to calculate the proper text change.\n\t *\n\t * Note: Single text node insertion is handled in {@link #_handleTextNodeInsertion} and text node mutation is handled\n\t * in {@link #_handleTextMutation}).\n\t *\n\t * @private\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\t_handleContainerChildrenMutations( mutations, viewSelection ) {\n\t\t// Get common ancestor of all mutations.\n\t\tconst mutationsCommonAncestor = getMutationsContainer( mutations );\n\n\t\t// Quit if there is no common ancestor.\n\t\tif ( !mutationsCommonAncestor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domConverter = this.editor.editing.view.domConverter;\n\n\t\t// Get common ancestor in DOM.\n\t\tconst domMutationCommonAncestor = domConverter.mapViewToDom( mutationsCommonAncestor );\n\n\t\t// Create fresh DomConverter so it will not use existing mapping and convert current DOM to model.\n\t\t// This wouldn't be needed if DomConverter would allow to create fresh view without checking any mappings.\n\t\tconst freshDomConverter = new DomConverter();\n\t\tconst modelFromCurrentDom = this.editor.data.toModel(\n\t\t\tfreshDomConverter.domToView( domMutationCommonAncestor )\n\t\t).getChild( 0 );\n\n\t\t// Current model.\n\t\tconst currentModel = this.editor.editing.mapper.toModelElement( mutationsCommonAncestor );\n\n\t\t// If common ancestor is not mapped, do not do anything. It probably is a parent of another view element.\n\t\t// That means that we would need to diff model elements (see `if` below). Better return early instead of\n\t\t// trying to get a reasonable model ancestor. It will fell into the `if` below anyway.\n\t\t// This situation happens for example for lists. If `<ul>` is a common ancestor, `currentModel` is `undefined`\n\t\t// because `<ul>` is not mapped (`<li>`s are).\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/718.\n\t\tif ( !currentModel ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get children from both ancestors.\n\t\tconst modelFromDomChildren = Array.from( modelFromCurrentDom.getChildren() );\n\t\tconst currentModelChildren = Array.from( currentModel.getChildren() );\n\n\t\t// Remove the last `<softBreak>` from the end of `modelFromDomChildren` if there is no `<softBreak>` in current model.\n\t\t// If the described scenario happened, it means that this is a bogus `<br />` added by a browser.\n\t\tconst lastDomChild = modelFromDomChildren[ modelFromDomChildren.length - 1 ];\n\t\tconst lastCurrentChild = currentModelChildren[ currentModelChildren.length - 1 ];\n\n\t\tif ( lastDomChild && lastDomChild.is( 'softBreak' ) && lastCurrentChild && !lastCurrentChild.is( 'softBreak' ) ) {\n\t\t\tmodelFromDomChildren.pop();\n\t\t}\n\n\t\tconst schema = this.editor.model.schema;\n\n\t\t// Skip situations when common ancestor has any container elements.\n\t\tif ( !isSafeForTextMutation( modelFromDomChildren, schema ) || !isSafeForTextMutation( currentModelChildren, schema ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace &nbsp; inserted by the browser with normal space. See comment in `_handleTextMutation`.\n\t\t// Replace non-texts with any character. This is potentially dangerous but passes in manual tests. The thing is\n\t\t// that we need to take care of proper indexes so we cannot simply remove non-text elements from the content.\n\t\t// By inserting a character we keep all the real texts on their indexes.\n\t\tconst newText = modelFromDomChildren.map( item => item.is( 'text' ) ? item.data : '@' ).join( '' ).replace( /\\u00A0/g, ' ' );\n\t\tconst oldText = currentModelChildren.map( item => item.is( 'text' ) ? item.data : '@' ).join( '' ).replace( /\\u00A0/g, ' ' );\n\n\t\t// Do nothing if mutations created same text.\n\t\tif ( oldText === newText ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst diffResult = diff( oldText, newText );\n\n\t\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\n\n\t\t// Try setting new model selection according to passed view selection.\n\t\tlet modelSelectionRange = null;\n\n\t\tif ( viewSelection ) {\n\t\t\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\n\t\t}\n\n\t\tconst insertText = newText.substr( firstChangeAt, insertions );\n\t\tconst removeRange = this.editor.model.createRange(\n\t\t\tthis.editor.model.createPositionAt( currentModel, firstChangeAt ),\n\t\t\tthis.editor.model.createPositionAt( currentModel, firstChangeAt + deletions )\n\t\t);\n\n\t\tthis.editor.execute( 'input', {\n\t\t\ttext: insertText,\n\t\t\trange: removeRange,\n\t\t\tresultRange: modelSelectionRange\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTextMutation( mutation, viewSelection ) {\n\t\tif ( mutation.type != 'text' ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t// We want only normal spaces in the model and in the view. Renderer and DOM Converter will be then responsible\n\t\t// for rendering consecutive spaces using &nbsp;, but the model and the view has to be clear.\n\t\t// Other feature may introduce inserting non-breakable space on specific key stroke (for example shift + space).\n\t\t// However then it will be handled outside of mutations, like enter key is.\n\t\t// The replacing is here because it has to be done before `diff` and `diffToChanges` functions, as they\n\t\t// take `newText` and compare it to (cleaned up) view.\n\t\t// It could also be done in mutation observer too, however if any outside plugin would like to\n\t\t// introduce additional events for mutations, they would get already cleaned up version (this may be good or not).\n\t\tconst newText = mutation.newText.replace( /\\u00A0/g, ' ' );\n\t\t// To have correct `diffResult`, we also compare view node text data with &nbsp; replaced by space.\n\t\tconst oldText = mutation.oldText.replace( /\\u00A0/g, ' ' );\n\n\t\t// Do nothing if mutations created same text.\n\t\tif ( oldText === newText ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst diffResult = diff( oldText, newText );\n\n\t\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\n\n\t\t// Try setting new model selection according to passed view selection.\n\t\tlet modelSelectionRange = null;\n\n\t\tif ( viewSelection ) {\n\t\t\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\n\t\t}\n\n\t\t// Get the position in view and model where the changes will happen.\n\t\tconst viewPos = this.editing.view.createPositionAt( mutation.node, firstChangeAt );\n\t\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\n\t\tconst removeRange = this.editor.model.createRange( modelPos, modelPos.getShiftedBy( deletions ) );\n\t\tconst insertText = newText.substr( firstChangeAt, insertions );\n\n\t\tthis.editor.execute( 'input', {\n\t\t\ttext: insertText,\n\t\t\trange: removeRange,\n\t\t\tresultRange: modelSelectionRange\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTextNodeInsertion( mutation ) {\n\t\tif ( mutation.type != 'children' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst change = getSingleTextNodeChange( mutation );\n\t\tconst viewPos = this.editing.view.createPositionAt( mutation.node, change.index );\n\t\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\n\t\tconst insertedText = change.values[ 0 ].data;\n\n\t\tthis.editor.execute( 'input', {\n\t\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t\t// See comment in `_handleTextMutation`.\n\t\t\t// In this case we don't need to do this before `diff` because we diff whole nodes.\n\t\t\t// Just change &nbsp; in case there are some.\n\t\t\ttext: insertedText.replace( /\\u00A0/g, ' ' ),\n\t\t\trange: this.editor.model.createRange( modelPos )\n\t\t} );\n\t}\n}\n\n// Returns first common ancestor of all mutations that is either {@link module:engine/view/containerelement~ContainerElement}\n// or {@link module:engine/view/rootelement~RootElement}.\n//\n// @private\n// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n// @returns {module:engine/view/containerelement~ContainerElement|engine/view/rootelement~RootElement|undefined}\nfunction getMutationsContainer( mutations ) {\n\tconst lca = mutations\n\t\t.map( mutation => mutation.node )\n\t\t.reduce( ( commonAncestor, node ) => {\n\t\t\treturn commonAncestor.getCommonAncestor( node, { includeSelf: true } );\n\t\t} );\n\n\tif ( !lca ) {\n\t\treturn;\n\t}\n\n\t// We need to look for container and root elements only, so check all LCA's\n\t// ancestors (starting from itself).\n\treturn lca.getAncestors( { includeSelf: true, parentFirst: true } )\n\t\t.find( element => element.is( 'containerElement' ) || element.is( 'rootElement' ) );\n}\n\n// Returns true if provided array contains content that won't be problematic during diffing and text mutation handling.\n//\n// @param {Array.<module:engine/model/node~Node>} children\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction isSafeForTextMutation( children, schema ) {\n\treturn children.every( child => schema.isInline( child ) );\n}\n\n// Calculates first change index and number of characters that should be inserted and deleted starting from that index.\n//\n// @private\n// @param diffResult\n// @returns {{insertions: number, deletions: number, firstChangeAt: *}}\nfunction calculateChanges( diffResult ) {\n\t// Index where the first change happens. Used to set the position from which nodes will be removed and where will be inserted.\n\tlet firstChangeAt = null;\n\t// Index where the last change happens. Used to properly count how many characters have to be removed and inserted.\n\tlet lastChangeAt = null;\n\n\t// Get `firstChangeAt` and `lastChangeAt`.\n\tfor ( let i = 0; i < diffResult.length; i++ ) {\n\t\tconst change = diffResult[ i ];\n\n\t\tif ( change != 'equal' ) {\n\t\t\tfirstChangeAt = firstChangeAt === null ? i : firstChangeAt;\n\t\t\tlastChangeAt = i;\n\t\t}\n\t}\n\n\t// How many characters, starting from `firstChangeAt`, should be removed.\n\tlet deletions = 0;\n\t// How many characters, starting from `firstChangeAt`, should be inserted.\n\tlet insertions = 0;\n\n\tfor ( let i = firstChangeAt; i <= lastChangeAt; i++ ) {\n\t\t// If there is no change (equal) or delete, the character is existing in `oldText`. We count it for removing.\n\t\tif ( diffResult[ i ] != 'insert' ) {\n\t\t\tdeletions++;\n\t\t}\n\n\t\t// If there is no change (equal) or insert, the character is existing in `newText`. We count it for inserting.\n\t\tif ( diffResult[ i ] != 'delete' ) {\n\t\t\tinsertions++;\n\t\t}\n\t}\n\n\treturn { insertions, deletions, firstChangeAt };\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/input\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport InputCommand from './inputcommand';\n\nimport injectUnsafeKeystrokesHandling from './utils/injectunsafekeystrokeshandling';\nimport injectTypingMutationsHandling from './utils/injecttypingmutationshandling';\n\n/**\n * Handles text input coming from the keyboard or other input methods.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Input extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Input';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// TODO The above default configuration value should be defined using editor.config.define() once it's fixed.\n\t\tconst inputCommand = new InputCommand( editor, editor.config.get( 'typing.undoStep' ) || 20 );\n\n\t\teditor.commands.add( 'input', inputCommand );\n\n\t\tinjectUnsafeKeystrokesHandling( editor );\n\t\tinjectTypingMutationsHandling( editor );\n\t}\n\n\t/**\n\t * Checks batch if it is a result of user input - e.g. typing.\n\t *\n\t *\t\tconst input = editor.plugins.get( 'Input' );\n\t *\n\t *\t\teditor.model.document.on( 'change:data', ( evt, batch ) => {\n\t *\t\t\tif ( input.isTyping( batch ) ) {\n\t *\t\t\t\tconsole.log( 'The user typed something...' );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** This method checks if the batch was created using {@link module:typing/inputcommand~InputCommand 'input'}\n\t * command as typing changes coming from user input are inserted to the document using that command.\n\t *\n\t * @param {module:engine/model/batch~Batch} batch A batch to check.\n\t * @returns {Boolean}\n\t */\n\tisInput( batch ) {\n\t\tconst inputCommand = this.editor.commands.get( 'input' );\n\n\t\treturn inputCommand._batches.has( batch );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/deletecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\n\nimport ChangeBuffer from './utils/changebuffer';\n\n/**\n * The delete command. Used by the {@link module:typing/delete~Delete delete feature} to handle the <kbd>Delete</kbd> and\n * <kbd>Backspace</kbd> keys.\n *\n * @extends module:core/command~Command\n */\nexport default class DeleteCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {'forward'|'backward'} direction The directionality of the delete describing in what direction it\n\t * should consume the content when the selection is collapsed.\n\t */\n\tconstructor( editor, direction ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The directionality of the delete describing in what direction it should\n\t\t * consume the content when the selection is collapsed.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'forward'|'backward'} #direction\n\t\t */\n\t\tthis.direction = direction;\n\n\t\t/**\n\t\t * Delete's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {typing.ChangeBuffer} #buffer\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, editor.config.get( 'typing.undoStep' ) );\n\t}\n\n\t/**\n\t * The current change buffer.\n\t *\n\t * @type {module:typing/utils/changebuffer~ChangeBuffer}\n\t */\n\tget buffer() {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * Executes the delete command. Depending on whether the selection is collapsed or not, deletes its content\n\t * or a piece of content in the {@link #direction defined direction}.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {'character'} [options.unit='character'] See {@link module:engine/model/utils/modifyselection~modifySelection}'s options.\n\t * @param {Number} [options.sequence=1] A number describing which subsequent delete event it is without the key being released.\n\t * See the {@link module:engine/view/document~Document#event:delete} event data.\n\t * @param {module:engine/model/selection~Selection} [options.selection] Selection to remove. If not set, current model selection\n\t * will be used.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tthis._buffer.lock();\n\n\t\t\tconst selection = writer.createSelection( options.selection || doc.selection );\n\n\t\t\t// Do not replace the whole selected content if selection was collapsed.\n\t\t\t// This prevents such situation:\n\t\t\t//\n\t\t\t// <h1></h1><p>[]</p>\t-->  <h1>[</h1><p>]</p> \t\t-->  <p></p>\n\t\t\t// starting content\t\t-->   after `modifySelection`\t-->  after `deleteContent`.\n\t\t\tconst doNotResetEntireContent = selection.isCollapsed;\n\n\t\t\t// Try to extend the selection in the specified direction.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tmodel.modifySelection( selection, { direction: this.direction, unit: options.unit } );\n\t\t\t}\n\n\t\t\t// Check if deleting in an empty editor. See #61.\n\t\t\tif ( this._shouldEntireContentBeReplacedWithParagraph( options.sequence || 1 ) ) {\n\t\t\t\tthis._replaceEntireContentWithParagraph( writer );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If selection is still collapsed, then there's nothing to delete.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet changeCount = 0;\n\n\t\t\tselection.getFirstRange().getMinimalFlatRanges().forEach( range => {\n\t\t\t\tchangeCount += count(\n\t\t\t\t\trange.getWalker( { singleCharacters: true, ignoreElementEnd: true, shallow: true } )\n\t\t\t\t);\n\t\t\t} );\n\n\t\t\tmodel.deleteContent( selection, { doNotResetEntireContent } );\n\t\t\tthis._buffer.input( changeCount );\n\n\t\t\twriter.setSelection( selection );\n\n\t\t\tthis._buffer.unlock();\n\t\t} );\n\t}\n\n\t/**\n\t * If the user keeps <kbd>Backspace</kbd> or <kbd>Delete</kbd> key pressed, the content of the current\n\t * editable will be cleared. However, this will not yet lead to resetting the remaining block to a paragraph\n\t * (which happens e.g. when the user does <kbd>Ctrl</kbd> + <kbd>A</kbd>, <kbd>Backspace</kbd>).\n\t *\n\t * But, if the user pressed the key in an empty editable for the first time,\n\t * we want to replace the entire content with a paragraph if:\n\t *\n\t * * the current limit element is empty,\n\t * * the paragraph is allowed in the limit element,\n\t * * the limit doesn't already have a paragraph inside.\n\t *\n\t * See https://github.com/ckeditor/ckeditor5-typing/issues/61.\n\t *\n\t * @private\n\t * @param {Number} sequence A number describing which subsequent delete event it is without the key being released.\n\t * @returns {Boolean}\n\t */\n\t_shouldEntireContentBeReplacedWithParagraph( sequence ) {\n\t\t// Does nothing if user pressed and held the \"Backspace\" or \"Delete\" key.\n\t\tif ( sequence > 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst limitElement = model.schema.getLimitElement( selection );\n\n\t\t// If a collapsed selection contains the whole content it means that the content is empty\n\t\t// (from the user perspective).\n\t\tconst limitElementIsEmpty = selection.isCollapsed && selection.containsEntireContent( limitElement );\n\n\t\tif ( !limitElementIsEmpty ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !model.schema.checkChild( limitElement, 'paragraph' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst limitElementFirstChild = limitElement.getChild( 0 );\n\n\t\t// Does nothing if the limit element already contains only a paragraph.\n\t\t// We ignore the case when paragraph might have some inline elements (<p><inlineWidget>[]</inlineWidget></p>)\n\t\t// because we don't support such cases yet and it's unclear whether inlineWidget shouldn't be a limit itself.\n\t\tif ( limitElementFirstChild && limitElementFirstChild.name === 'paragraph' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * The entire content is replaced with the paragraph. Selection is moved inside the paragraph.\n\t *\n\t * @private\n\t */\n\t_replaceEntireContentWithParagraph( writer ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst limitElement = model.schema.getLimitElement( selection );\n\t\tconst paragraph = writer.createElement( 'paragraph' );\n\n\t\twriter.remove( writer.createRangeIn( limitElement ) );\n\t\twriter.insert( paragraph, limitElement );\n\n\t\twriter.setSelection( paragraph, 0 );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/deleteobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Delete observer introduces the {@link module:engine/view/document~Document#event:delete} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DeleteObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst document = view.document;\n\t\tlet sequence = 0;\n\n\t\tdocument.on( 'keyup', ( evt, data ) => {\n\t\t\tif ( data.keyCode == keyCodes.delete || data.keyCode == keyCodes.backspace ) {\n\t\t\t\tsequence = 0;\n\t\t\t}\n\t\t} );\n\n\t\tdocument.on( 'keydown', ( evt, data ) => {\n\t\t\tconst deleteData = {};\n\n\t\t\tif ( data.keyCode == keyCodes.delete ) {\n\t\t\t\tdeleteData.direction = 'forward';\n\t\t\t\tdeleteData.unit = 'character';\n\t\t\t} else if ( data.keyCode == keyCodes.backspace ) {\n\t\t\t\tdeleteData.direction = 'backward';\n\t\t\t\tdeleteData.unit = 'codePoint';\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasWordModifier = env.isMac ? data.altKey : data.ctrlKey;\n\t\t\tdeleteData.unit = hasWordModifier ? 'word' : deleteData.unit;\n\t\t\tdeleteData.sequence = ++sequence;\n\n\t\t\tfireViewDeleteEvent( evt, data.domEvent, deleteData );\n\t\t} );\n\n\t\t// `beforeinput` is handled only for Android devices. Desktop Chrome and iOS are skipped because they are working fine now.\n\t\tif ( env.isAndroid ) {\n\t\t\tdocument.on( 'beforeinput', ( evt, data ) => {\n\t\t\t\t// If event type is other than `deleteContentBackward` then this is not deleting.\n\t\t\t\tif ( data.domEvent.inputType != 'deleteContentBackward' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst deleteData = {\n\t\t\t\t\tunit: 'codepoint',\n\t\t\t\t\tdirection: 'backward',\n\t\t\t\t\tsequence: 1\n\t\t\t\t};\n\n\t\t\t\t// Android IMEs may change the DOM selection on `beforeinput` event so that the selection contains all the text\n\t\t\t\t// that the IME wants to remove. We will pass this information to `delete` event so proper part of the content is removed.\n\t\t\t\t//\n\t\t\t\t// Sometimes it is only expanding by a one character (in case of collapsed selection). In this case we don't need to\n\t\t\t\t// set a different selection to remove, it will work just fine.\n\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\tif ( domSelection.anchorNode == domSelection.focusNode && domSelection.anchorOffset + 1 != domSelection.focusOffset ) {\n\t\t\t\t\tdeleteData.selectionToRemove = view.domConverter.domSelectionToView( domSelection );\n\t\t\t\t}\n\n\t\t\t\tfireViewDeleteEvent( evt, data.domEvent, deleteData );\n\t\t\t} );\n\t\t}\n\n\t\tfunction fireViewDeleteEvent( originalEvent, domEvent, deleteData ) {\n\t\t\t// Save the event object to check later if it was stopped or not.\n\t\t\tlet event;\n\t\t\tdocument.once( 'delete', evt => ( event = evt ), { priority: Number.POSITIVE_INFINITY } );\n\n\t\t\tdocument.fire( 'delete', new DomEventData( document, domEvent, deleteData ) );\n\n\t\t\t// Stop the original event if `delete` event was stopped.\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\tif ( event && event.stop.called ) {\n\t\t\t\toriginalEvent.stop();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user tries to delete content (e.g. presses <kbd>Delete</kbd> or <kbd>Backspace</kbd>).\n *\n * Note: This event is fired by the {@link module:typing/deleteobserver~DeleteObserver observer}\n * (usually registered by the {@link module:typing/delete~Delete delete feature}).\n *\n * @event module:engine/view/document~Document#event:delete\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {'forward'|'delete'} data.direction The direction in which the deletion should happen.\n * @param {'character'|'word'} data.unit The \"amount\" of content that should be deleted.\n * @param {Number} data.sequence A number describing which subsequent delete event it is without the key being released.\n * If it's 2 or more it means that the key was pressed and hold.\n * @param {module:engine/view/selection~Selection} [data.selectionToRemove] View selection which content should be removed. If not set,\n * current selection should be used.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/delete\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport DeleteCommand from './deletecommand';\nimport DeleteObserver from './deleteobserver';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * The delete and backspace feature. Handles the <kbd>Delete</kbd> and <kbd>Backspace</kbd> keys in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Delete extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Delete';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tview.addObserver( DeleteObserver );\n\n\t\teditor.commands.add( 'forwardDelete', new DeleteCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'delete', new DeleteCommand( editor, 'backward' ) );\n\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tconst deleteCommandParams = { unit: data.unit, sequence: data.sequence };\n\n\t\t\t// If a specific (view) selection to remove was set, convert it to a model selection and set as a parameter for `DeleteCommand`.\n\t\t\tif ( data.selectionToRemove ) {\n\t\t\t\tconst modelSelection = editor.model.createSelection();\n\t\t\t\tconst ranges = [];\n\n\t\t\t\tfor ( const viewRange of data.selectionToRemove.getRanges() ) {\n\t\t\t\t\tranges.push( editor.editing.mapper.toModelRange( viewRange ) );\n\t\t\t\t}\n\n\t\t\t\tmodelSelection.setTo( ranges );\n\n\t\t\t\tdeleteCommandParams.selection = modelSelection;\n\t\t\t}\n\n\t\t\teditor.execute( data.direction == 'forward' ? 'forwardDelete' : 'delete', deleteCommandParams );\n\n\t\t\tdata.preventDefault();\n\n\t\t\tview.scrollToTheSelection();\n\t\t} );\n\n\t\t// Android IMEs have a quirk - they change DOM selection after the input changes were performed by the browser.\n\t\t// This happens on `keyup` event. Android doesn't know anything about our deletion and selection handling. Even if the selection\n\t\t// was changed during input events, IME remembers the position where the selection \"should\" be placed and moves it there.\n\t\t//\n\t\t// To prevent incorrect selection, we save the selection after deleting here and then re-set it on `keyup`. This has to be done\n\t\t// on DOM selection level, because on `keyup` the model selection is still the same as it was just after deletion, so it\n\t\t// wouldn't be changed and the fix would do nothing.\n\t\t//\n\t\tif ( env.isAndroid ) {\n\t\t\tlet domSelectionAfterDeletion = null;\n\n\t\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\tdomSelectionAfterDeletion = {\n\t\t\t\t\tanchorNode: domSelection.anchorNode,\n\t\t\t\t\tanchorOffset: domSelection.anchorOffset,\n\t\t\t\t\tfocusNode: domSelection.focusNode,\n\t\t\t\t\tfocusOffset: domSelection.focusOffset\n\t\t\t\t};\n\t\t\t}, { priority: 'lowest' } );\n\n\t\t\tthis.listenTo( viewDocument, 'keyup', ( evt, data ) => {\n\t\t\t\tif ( domSelectionAfterDeletion ) {\n\t\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\t\tdomSelection.collapse( domSelectionAfterDeletion.anchorNode, domSelectionAfterDeletion.anchorOffset );\n\t\t\t\t\tdomSelection.extend( domSelectionAfterDeletion.focusNode, domSelectionAfterDeletion.focusOffset );\n\n\t\t\t\t\tdomSelectionAfterDeletion = null;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/typing\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Input from './input';\nimport Delete from './delete';\n\n/**\n * The typing feature. It handles typing.\n *\n * This is a \"glue\" plugin which loads the {@link module:typing/input~Input} and {@link module:typing/delete~Delete}\n * plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Typing extends Plugin {\n\tstatic get requires() {\n\t\treturn [ Input, Delete ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Typing';\n\t}\n}\n\n/**\n * The configuration of the typing features. Used by the features from the `@ckeditor/ckeditor5-typing` package.\n *\n * Read more in {@link module:typing/typing~TypingConfig}.\n *\n * @member {module:typing/typing~TypingConfig} module:core/editor/editorconfig~EditorConfig#typing\n */\n\n/**\n * The configuration of the typing features. Used by the typing features in `@ckeditor/ckeditor5-typing` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\ttyping: ... // Typing feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface TypingConfig\n */\n\n/**\n * The granularity of undo/redo for typing and deleting. The value `20` means (more or less) that a new undo step\n * is created every 20 characters are inserted or deleted.\n *\n * @member {Number} [module:typing/typing~TypingConfig#undoStep=20]\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/nooperation\n */\n\nimport Operation from './operation';\n\n/**\n * Operation which is doing nothing (\"empty operation\", \"do-nothing operation\", \"noop\"). This is an operation,\n * which when executed does not change the tree model. It still has some parameters defined for transformation purposes.\n *\n * In most cases this operation is a result of transforming operations. When transformation returns\n * {@link module:engine/model/operation/nooperation~NoOperation} it means that changes done by the transformed operation\n * have already been applied.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class NoOperation extends Operation {\n\tget type() {\n\t\treturn 'noop';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/nooperation~NoOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new NoOperation( this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/nooperation~NoOperation}\n\t */\n\tgetReversed() {\n\t\treturn new NoOperation( this.baseVersion + 1 );\n\t}\n\n\t_execute() {\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'NoOperation';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport InsertOperation from './insertoperation';\nimport AttributeOperation from './attributeoperation';\nimport RenameOperation from './renameoperation';\nimport MarkerOperation from './markeroperation';\nimport MoveOperation from './moveoperation';\nimport RootAttributeOperation from './rootattributeoperation';\nimport MergeOperation from './mergeoperation';\nimport SplitOperation from './splitoperation';\nimport NoOperation from './nooperation';\nimport Range from '../range';\nimport Position from '../position';\n\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\nconst transformations = new Map();\n\n/**\n * @module engine/model/operation/transform\n */\n\n/**\n * Sets a transformation function to be be used to transform instances of class `OperationA` by instances of class `OperationB`.\n *\n * The `transformationFunction` is passed three parameters:\n *\n * * `a` - operation to be transformed, an instance of `OperationA`,\n * * `b` - operation to be transformed by, an instance of `OperationB`,\n * * {@link module:engine/model/operation/transform~TransformationContext `context`} - object with additional information about\n * transformation context.\n *\n * The `transformationFunction` should return transformation result, which is an array with one or multiple\n * {@link module:engine/model/operation/operation~Operation operation} instances.\n *\n * @protected\n * @param {Function} OperationA\n * @param {Function} OperationB\n * @param {Function} transformationFunction Function to use for transforming.\n */\nfunction setTransformation( OperationA, OperationB, transformationFunction ) {\n\tlet aGroup = transformations.get( OperationA );\n\n\tif ( !aGroup ) {\n\t\taGroup = new Map();\n\t\ttransformations.set( OperationA, aGroup );\n\t}\n\n\taGroup.set( OperationB, transformationFunction );\n}\n\n/**\n * Returns a previously set transformation function for transforming an instance of `OperationA` by an instance of `OperationB`.\n *\n * If no transformation was set for given pair of operations, {@link module:engine/model/operation/transform~noUpdateTransformation}\n * is returned. This means that if no transformation was set, the `OperationA` instance will not change when transformed\n * by the `OperationB` instance.\n *\n * @private\n * @param {Function} OperationA\n * @param {Function} OperationB\n * @returns {Function} Function set to transform an instance of `OperationA` by an instance of `OperationB`.\n */\nfunction getTransformation( OperationA, OperationB ) {\n\tconst aGroup = transformations.get( OperationA );\n\n\tif ( aGroup && aGroup.has( OperationB ) ) {\n\t\treturn aGroup.get( OperationB );\n\t}\n\n\treturn noUpdateTransformation;\n}\n\n/**\n * A transformation function that only clones operation to transform, without changing it.\n *\n * @private\n * @param {module:engine/model/operation/operation~Operation} a Operation to transform.\n * @returns {Array.<module:engine/model/operation/operation~Operation>}\n */\nfunction noUpdateTransformation( a ) {\n\treturn [ a ];\n}\n\n/**\n * Transforms operation `a` by operation `b`.\n *\n * @param {module:engine/model/operation/operation~Operation} a Operation to be transformed.\n * @param {module:engine/model/operation/operation~Operation} b Operation to transform by.\n * @param {module:engine/model/operation/transform~TransformationContext} context Transformation context for this transformation.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} Transformation result.\n */\nexport function transform( a, b, context = {} ) {\n\tconst transformationFunction = getTransformation( a.constructor, b.constructor );\n\n\ttry {\n\t\ta = a.clone();\n\n\t\treturn transformationFunction( a, b, context );\n\t} catch ( e ) {\n\t\t// @if CK_DEBUG // console.warn( 'Error during operation transformation!', e.message );\n\t\t// @if CK_DEBUG // console.warn( 'Transformed operation', a );\n\t\t// @if CK_DEBUG // console.warn( 'Operation transformed by', b );\n\t\t// @if CK_DEBUG // console.warn( 'context.aIsStrong', context.aIsStrong );\n\t\t// @if CK_DEBUG // console.warn( 'context.aWasUndone', context.aWasUndone );\n\t\t// @if CK_DEBUG // console.warn( 'context.bWasUndone', context.bWasUndone );\n\t\t// @if CK_DEBUG // console.warn( 'context.abRelation', context.abRelation );\n\t\t// @if CK_DEBUG // console.warn( 'context.baRelation', context.baRelation );\n\n\t\tthrow e;\n\t}\n}\n\n/**\n * Performs a transformation of two sets of operations - `operationsA` and `operationsB`. The transformation is two-way -\n * both transformed `operationsA` and transformed `operationsB` are returned.\n *\n * Note, that the first operation in each set should base on the same document state (\n * {@link module:engine/model/document~Document#version document version}).\n *\n * It is assumed that `operationsA` are \"more important\" during conflict resolution between two operations.\n *\n * New copies of both passed arrays and operations inside them are returned. Passed arguments are not altered.\n *\n * Base versions of the transformed operations sets are updated accordingly. For example, assume that base versions are `4`\n * and there are `3` operations in `operationsA` and `5` operations in `operationsB`. Then:\n *\n * * transformed `operationsA` will start from base version `9` (`4` base version + `5` operations B),\n * * transformed `operationsB` will start from base version `7` (`4` base version + `3` operations A).\n *\n * If no operation was broken into two during transformation, then both sets will end up with an operation that bases on version `11`:\n *\n * * transformed `operationsA` start from `9` and there are `3` of them, so the last will have `baseVersion` equal to `11`,\n * * transformed `operationsB` start from `7` and there are `5` of them, so the last will have `baseVersion` equal to `11`.\n *\n * @param {Array.<module:engine/model/operation/operation~Operation>} operationsA\n * @param {Array.<module:engine/model/operation/operation~Operation>} operationsB\n * @param {Object} options Additional transformation options.\n * @param {module:engine/model/document~Document|null} options.document Document which the operations change.\n * @param {Boolean} [options.useRelations=false] Whether during transformation relations should be used (used during undo for\n * better conflict resolution).\n * @param {Boolean} [options.padWithNoOps=false] Whether additional {@link module:engine/model/operation/nooperation~NoOperation}s\n * should be added to the transformation results to force the same last base version for both transformed sets (in case\n * if some operations got broken into multiple operations during transformation).\n * @returns {Object} Transformation result.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} return.operationsA Transformed `operationsA`.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} return.operationsB Transformed `operationsB`.\n * @returns {Map} return.originalOperations A map that links transformed operations to original operations. The keys are the transformed\n * operations and the values are the original operations from the input (`operationsA` and `operationsB`).\n */\nexport function transformSets( operationsA, operationsB, options ) {\n\t// Create new arrays so the originally passed arguments are not changed.\n\t// No need to clone operations, they are cloned as they are transformed.\n\toperationsA = operationsA.slice();\n\toperationsB = operationsB.slice();\n\n\tconst contextFactory = new ContextFactory( options.document, options.useRelations, options.forceWeakRemove );\n\tcontextFactory.setOriginalOperations( operationsA );\n\tcontextFactory.setOriginalOperations( operationsB );\n\n\tconst originalOperations = contextFactory.originalOperations;\n\n\t// If one of sets is empty there is simply nothing to transform, so return sets as they are.\n\tif ( operationsA.length == 0 || operationsB.length == 0 ) {\n\t\treturn { operationsA, operationsB, originalOperations };\n\t}\n\t//\n\t// Following is a description of transformation process:\n\t//\n\t// There are `operationsA` and `operationsB` to be transformed, both by both.\n\t//\n\t// So, suppose we have sets of two operations each: `operationsA` = `[ a1, a2 ]`, `operationsB` = `[ b1, b2 ]`.\n\t//\n\t// Remember, that we can only transform operations that base on the same context. We assert that `a1` and `b1` base on\n\t// the same context and we transform them. Then, we get `a1'` and `b1'`. `a2` bases on a context with `a1` -- `a2`\n\t// is an operation that followed `a1`. Similarly, `b2` bases on a context with `b1`.\n\t//\n\t// However, since `a1'` is a result of transformation by `b1`, `a1'` now also has a context with `b1`. This means that\n\t// we can safely transform `a1'` by `b2`. As we finish transforming `a1`, we also transformed all `operationsB`.\n\t// All `operationsB` also have context including `a1`. Now, we can properly transform `a2` by those operations.\n\t//\n\t// The transformation process can be visualized on a transformation diagram (\"diamond diagram\"):\n\t//\n\t//          [the initial state]\n\t//         [common for a1 and b1]\n\t//\n\t//                   *\n\t//                  / \\\n\t//                 /   \\\n\t//               b1     a1\n\t//               /       \\\n\t//              /         \\\n\t//             *           *\n\t//            / \\         / \\\n\t//           /   \\       /   \\\n\t//         b2    a1'   b1'    a2\n\t//         /       \\   /       \\\n\t//        /         \\ /         \\\n\t//       *           *           *\n\t//        \\         / \\         /\n\t//         \\       /   \\       /\n\t//        a1''   b2'   a2'   b1''\n\t//           \\   /       \\   /\n\t//            \\ /         \\ /\n\t//             *           *\n\t//              \\         /\n\t//               \\       /\n\t//              a2''   b2''\n\t//                 \\   /\n\t//                  \\ /\n\t//                   *\n\t//\n\t//           [the final state]\n\t//\n\t// The final state can be reached from the initial state by applying `a1`, `a2`, `b1''` and `b2''`, as well as by\n\t// applying `b1`, `b2`, `a1''`, `a2''`. Note how the operations get to a proper common state before each pair is\n\t// transformed.\n\t//\n\t// Another thing to consider is that an operation during transformation can be broken into multiple operations.\n\t// Suppose that `a1` * `b1` = `[ a11', a12' ]` (instead of `a1'` that we considered previously).\n\t//\n\t// In that case, we leave `a12'` for later and we continue transforming `a11'` until it is transformed by all `operationsB`\n\t// (in our case it is just `b2`). At this point, `b1` is transformed by \"whole\" `a1`, while `b2` is only transformed\n\t// by `a11'`. Similarly, `a12'` is only transformed by `b1`. This leads to a conclusion that we need to start transforming `a12'`\n\t// from the moment just after it was broken. So, `a12'` is transformed by `b2`. Now, \"the whole\" `a1` is transformed\n\t// by `operationsB`, while all `operationsB` are transformed by \"the whole\" `a1`. This means that we can continue with\n\t// following `operationsA` (in our case it is just `a2`).\n\t//\n\t// Of course, also `operationsB` can be broken. However, since we focus on transforming operation `a` to the end,\n\t// the only thing to do is to store both pieces of operation `b`, so that the next transformed operation `a` will\n\t// be transformed by both of them.\n\t//\n\t//                       *\n\t//                      / \\\n\t//                     /   \\\n\t//                    /     \\\n\t//                  b1       a1\n\t//                  /         \\\n\t//                 /           \\\n\t//                /             \\\n\t//               *               *\n\t//              / \\             / \\\n\t//             /  a11'         /   \\\n\t//            /     \\         /     \\\n\t//          b2       *      b1'      a2\n\t//          /       / \\     /         \\\n\t//         /       /  a12' /           \\\n\t//        /       /     \\ /             \\\n\t//       *       b2'     *               *\n\t//        \\     /       / \\             /\n\t//       a11'' /     b21'' \\           /\n\t//          \\ /       /     \\         /\n\t//           *       *      a2'     b1''\n\t//            \\     / \\       \\     /\n\t//          a12'' b22''\\       \\   /\n\t//              \\ /     \\       \\ /\n\t//               *      a2''     *\n\t//                \\       \\     /\n\t//                 \\       \\  b21'''\n\t//                  \\       \\ /\n\t//                a2'''      *\n\t//                    \\     /\n\t//                     \\  b22'''\n\t//                      \\ /\n\t//                       *\n\t//\n\t// Note, how `a1` is broken and transformed into `a11'` and `a12'`, while `b2'` got broken and transformed into `b21''` and `b22''`.\n\t//\n\t// Having all that on mind, here is an outline for the transformation process algorithm:\n\t//\n\t// 1. We have `operationsA` and `operationsB` array, which we dynamically update as the transformation process goes.\n\t//\n\t// 2. We take next (or first) operation from `operationsA` and check from which operation `b` we need to start transforming it.\n\t// All original `operationsA` are set to be transformed starting from the first operation `b`.\n\t//\n\t// 3. We take operations from `operationsB`, one by one, starting from the correct one, and transform operation `a`\n\t// by operation `b` (and vice versa). We update `operationsA` and `operationsB` by replacing the original operations\n\t// with the transformation results.\n\t//\n\t// 4. If operation is broken into multiple operations, we save all the new operations in the place of the\n\t// original operation.\n\t//\n\t// 5. Additionally, if operation `a` was broken, for the \"new\" operation, we remember from which operation `b` it should\n\t// be transformed by.\n\t//\n\t// 6. We continue transforming \"current\" operation `a` until it is transformed by all `operationsB`. Then, go to 2.\n\t// unless the last operation `a` was transformed.\n\t//\n\t// The actual implementation of the above algorithm is slightly different, as only one loop (while) is used.\n\t// The difference is that we have \"current\" `a` operation to transform and we store the index of the next `b` operation\n\t// to transform by. Each loop operates on two indexes then: index pointing to currently processed `a` operation and\n\t// index pointing to next `b` operation. Each loop is just one `a * b` + `b * a` transformation. After each loop\n\t// operation `b` index is updated. If all `b` operations were visited for the current `a` operation, we change\n\t// current `a` operation index to the next one.\n\t//\n\n\t// For each operation `a`, keeps information what is the index in `operationsB` from which the transformation should start.\n\tconst nextTransformIndex = new WeakMap();\n\n\t// For all the original `operationsA`, set that they should be transformed starting from the first of `operationsB`.\n\tfor ( const op of operationsA ) {\n\t\tnextTransformIndex.set( op, 0 );\n\t}\n\n\t// Additional data that is used for some postprocessing after the main transformation process is done.\n\tconst data = {\n\t\tnextBaseVersionA: operationsA[ operationsA.length - 1 ].baseVersion + 1,\n\t\tnextBaseVersionB: operationsB[ operationsB.length - 1 ].baseVersion + 1,\n\t\toriginalOperationsACount: operationsA.length,\n\t\toriginalOperationsBCount: operationsB.length\n\t};\n\n\t// Index of currently transformed operation `a`.\n\tlet i = 0;\n\n\t// While not all `operationsA` are transformed...\n\twhile ( i < operationsA.length ) {\n\t\t// Get \"current\" operation `a`.\n\t\tconst opA = operationsA[ i ];\n\n\t\t// For the \"current\" operation `a`, get the index of the next operation `b` to transform by.\n\t\tconst indexB = nextTransformIndex.get( opA );\n\n\t\t// If operation `a` was already transformed by every operation `b`, change \"current\" operation `a` to the next one.\n\t\tif ( indexB == operationsB.length ) {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst opB = operationsB[ indexB ];\n\n\t\t// Transform `a` by `b` and `b` by `a`.\n\t\tconst newOpsA = transform( opA, opB, contextFactory.getContext( opA, opB, true ) );\n\t\tconst newOpsB = transform( opB, opA, contextFactory.getContext( opB, opA, false ) );\n\t\t// As a result we get one or more `newOpsA` and one or more `newOpsB` operations.\n\n\t\t// Update contextual information about operations.\n\t\tcontextFactory.updateRelation( opA, opB );\n\n\t\tcontextFactory.setOriginalOperations( newOpsA, opA );\n\t\tcontextFactory.setOriginalOperations( newOpsB, opB );\n\n\t\t// For new `a` operations, update their index of the next operation `b` to transform them by.\n\t\t//\n\t\t// This is needed even if there was only one result (`a` was not broken) because that information is used\n\t\t// at the beginning of this loop every time.\n\t\tfor ( const newOpA of newOpsA ) {\n\t\t\t// Acknowledge, that operation `b` also might be broken into multiple operations.\n\t\t\t//\n\t\t\t// This is why we raise `indexB` not just by 1. If `newOpsB` are multiple operations, they will be\n\t\t\t// spliced in the place of `opB`. So we need to change `transformBy` accordingly, so that an operation won't\n\t\t\t// be transformed by the same operation (part of it) again.\n\t\t\tnextTransformIndex.set( newOpA, indexB + newOpsB.length );\n\t\t}\n\n\t\t// Update `operationsA` and `operationsB` with the transformed versions.\n\t\toperationsA.splice( i, 1, ...newOpsA );\n\t\toperationsB.splice( indexB, 1, ...newOpsB );\n\t}\n\n\tif ( options.padWithNoOps ) {\n\t\t// If no-operations padding is enabled, count how many extra `a` and `b` operations were generated.\n\t\tconst brokenOperationsACount = operationsA.length - data.originalOperationsACount;\n\t\tconst brokenOperationsBCount = operationsB.length - data.originalOperationsBCount;\n\n\t\t// Then, if that number is not the same, pad `operationsA` or `operationsB` with correct number of no-ops so\n\t\t// that the base versions are equalled.\n\t\t//\n\t\t// Note that only one array will be updated, as only one of those subtractions can be greater than zero.\n\t\tpadWithNoOps( operationsA, brokenOperationsBCount - brokenOperationsACount );\n\t\tpadWithNoOps( operationsB, brokenOperationsACount - brokenOperationsBCount );\n\t}\n\n\t// Finally, update base versions of transformed operations.\n\tupdateBaseVersions( operationsA, data.nextBaseVersionB );\n\tupdateBaseVersions( operationsB, data.nextBaseVersionA );\n\n\treturn { operationsA, operationsB, originalOperations };\n}\n\n// Gathers additional data about operations processed during transformation. Can be used to obtain contextual information\n// about two operations that are about to be transformed. This contextual information can be used for better conflict resolution.\nclass ContextFactory {\n\t// Creates `ContextFactory` instance.\n\t//\n\t// @param {module:engine/model/document~Document} document Document which the operations change.\n\t// @param {Boolean} useRelations Whether during transformation relations should be used (used during undo for\n\t// better conflict resolution).\n\t// @param {Boolean} [forceWeakRemove=false] If set to `false`, remove operation will be always stronger than move operation,\n\t// so the removed nodes won't end up back in the document root. When set to `true`, context data will be used.\n\tconstructor( document, useRelations, forceWeakRemove = false ) {\n\t\t// For each operation that is created during transformation process, we keep a reference to the original operation\n\t\t// which it comes from. The original operation works as a kind of \"identifier\". Every contextual information\n\t\t// gathered during transformation that we want to save for given operation, is actually saved for the original operation.\n\t\t// This way no matter if operation `a` is cloned, then transformed, even breaks, we still have access to the previously\n\t\t// gathered data through original operation reference.\n\t\tthis.originalOperations = new Map();\n\n\t\t// `model.History` instance which information about undone operations will be taken from.\n\t\tthis._history = document.history;\n\n\t\t// Whether additional context should be used.\n\t\tthis._useRelations = useRelations;\n\n\t\tthis._forceWeakRemove = !!forceWeakRemove;\n\n\t\t// Relations is a double-map structure (maps in map) where for two operations we store how those operations were related\n\t\t// to each other. Those relations are evaluated during transformation process. For every transformated pair of operations\n\t\t// we keep relations between them.\n\t\tthis._relations = new Map();\n\t}\n\n\t// Sets \"original operation\" for given operations.\n\t//\n\t// During transformation process, operations are cloned, then changed, then processed again, sometimes broken into two\n\t// or multiple operations. When gathering additional data it is important that all operations can be somehow linked\n\t// so a cloned and transformed \"version\" still kept track of the data assigned earlier to it.\n\t//\n\t// The original operation object will be used as such an universal linking id. Throughout the transformation process\n\t// all cloned operations will refer to \"the original operation\" when storing and reading additional data.\n\t//\n\t// If `takeFrom` is not set, each operation from `operations` array will be assigned itself as \"the original operation\".\n\t// This should be used as an initialization step.\n\t//\n\t// If `takeFrom` is set, each operation from `operations` will be assigned the same original operation as assigned\n\t// for `takeFrom` operation. This should be used to update original operations. It should be used in a way that\n\t// `operations` are the result of `takeFrom` transformation to ensure proper \"original operation propagation\".\n\t//\n\t// @param {Array.<module:engine/model/operation/operation~Operation>} operations\n\t// @param {module:engine/model/operation/operation~Operation|null} [takeFrom=null]\n\tsetOriginalOperations( operations, takeFrom = null ) {\n\t\tconst originalOperation = takeFrom ? this.originalOperations.get( takeFrom ) : null;\n\n\t\tfor ( const operation of operations ) {\n\t\t\tthis.originalOperations.set( operation, originalOperation || operation );\n\t\t}\n\t}\n\n\t// Saves a relation between operations `opA` and `opB`.\n\t//\n\t// Relations are then later used to help solve conflicts when operations are transformed.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\tupdateRelation( opA, opB ) {\n\t\t// The use of relations is described in a bigger detail in transformation functions.\n\t\t//\n\t\t// In brief, this function, for specified pairs of operation types, checks how positions defined in those operations relate.\n\t\t// Then those relations are saved. For example, for two move operations, it is saved if one of those operations target\n\t\t// position is before the other operation source position. This kind of information gives contextual information when\n\t\t// transformation is used during undo. Similar checks are done for other pairs of operations.\n\t\t//\n\t\tswitch ( opA.constructor ) {\n\t\t\tcase MoveOperation: {\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tif ( opA.targetPosition.isEqual( opB.sourcePosition ) || opB.movedRange.containsPosition( opA.targetPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertAtSource' );\n\t\t\t\t\t\t} else if ( opA.targetPosition.isEqual( opB.deletionPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertBetween' );\n\t\t\t\t\t\t} else if ( opA.targetPosition.isAfter( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'moveTargetAfter' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase MoveOperation: {\n\t\t\t\t\t\tif ( opA.targetPosition.isEqual( opB.sourcePosition ) || opA.targetPosition.isBefore( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertBefore' );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertAfter' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase SplitOperation: {\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tif ( opA.splitPosition.isBefore( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'splitBefore' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase MoveOperation: {\n\t\t\t\t\t\tif ( opA.splitPosition.isEqual( opB.sourcePosition ) || opA.splitPosition.isBefore( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'splitBefore' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase MergeOperation: {\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tif ( !opA.targetPosition.isEqual( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'mergeTargetNotMoved' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( opA.sourcePosition.isEqual( opB.targetPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'mergeSourceNotMoved' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( opA.sourcePosition.isEqual( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'mergeSameElement' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase SplitOperation: {\n\t\t\t\t\t\tif ( opA.sourcePosition.isEqual( opB.splitPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'splitAtSource' );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase MarkerOperation: {\n\t\t\t\tconst markerRange = opA.newRange;\n\n\t\t\t\tif ( !markerRange ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MoveOperation: {\n\t\t\t\t\t\tconst movedRange = Range._createFromPositionAndShift( opB.sourcePosition, opB.howMany );\n\n\t\t\t\t\t\tconst affectedLeft = movedRange.containsPosition( markerRange.start ) ||\n\t\t\t\t\t\t\tmovedRange.start.isEqual( markerRange.start );\n\n\t\t\t\t\t\tconst affectedRight = movedRange.containsPosition( markerRange.end ) ||\n\t\t\t\t\t\t\tmovedRange.end.isEqual( markerRange.end );\n\n\t\t\t\t\t\tif ( ( affectedLeft || affectedRight ) && !movedRange.containsRange( markerRange ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, {\n\t\t\t\t\t\t\t\tside: affectedLeft ? 'left' : 'right',\n\t\t\t\t\t\t\t\tpath: affectedLeft ? markerRange.start.path.slice() : markerRange.end.path.slice()\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tconst wasInLeftElement = markerRange.start.isEqual( opB.targetPosition );\n\t\t\t\t\t\tconst wasStartBeforeMergedElement = markerRange.start.isEqual( opB.deletionPosition );\n\t\t\t\t\t\tconst wasEndBeforeMergedElement = markerRange.end.isEqual( opB.deletionPosition );\n\t\t\t\t\t\tconst wasInRightElement = markerRange.end.isEqual( opB.sourcePosition );\n\n\t\t\t\t\t\tif ( wasInLeftElement || wasStartBeforeMergedElement || wasEndBeforeMergedElement || wasInRightElement ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, {\n\t\t\t\t\t\t\t\twasInLeftElement,\n\t\t\t\t\t\t\t\twasStartBeforeMergedElement,\n\t\t\t\t\t\t\t\twasEndBeforeMergedElement,\n\t\t\t\t\t\t\t\twasInRightElement\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Evaluates and returns contextual information about two given operations `opA` and `opB` which are about to be transformed.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\t// @returns {module:engine/model/operation/transform~TransformationContext}\n\tgetContext( opA, opB, aIsStrong ) {\n\t\treturn {\n\t\t\taIsStrong,\n\t\t\taWasUndone: this._wasUndone( opA ),\n\t\t\tbWasUndone: this._wasUndone( opB ),\n\t\t\tabRelation: this._useRelations ? this._getRelation( opA, opB ) : null,\n\t\t\tbaRelation: this._useRelations ? this._getRelation( opB, opA ) : null,\n\t\t\tforceWeakRemove: this._forceWeakRemove\n\t\t};\n\t}\n\n\t// Returns whether given operation `op` has already been undone.\n\t//\n\t// Information whether an operation was undone gives more context when making a decision when two operations are in conflict.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} op\n\t// @returns {Boolean}\n\t_wasUndone( op ) {\n\t\t// For `op`, get its original operation. After all, if `op` is a clone (or even transformed clone) of another\n\t\t// operation, literally `op` couldn't be undone. It was just generated. If anything, it was the operation it origins\n\t\t// from which was undone. So get that original operation.\n\t\tconst originalOp = this.originalOperations.get( op );\n\n\t\t// And check with the document if the original operation was undone.\n\t\treturn originalOp.wasUndone || this._history.isUndoneOperation( originalOp );\n\t}\n\n\t// Returns a relation between `opA` and an operation which is undone by `opB`. This can be `String` value if a relation\n\t// was set earlier or `null` if there was no relation between those operations.\n\t//\n\t// This is a little tricky to understand, so let's compare it to `ContextFactory#_wasUndone`.\n\t//\n\t// When `wasUndone( opB )` is used, we check if the `opB` has already been undone. It is obvious, that the\n\t// undoing operation must happen after the undone operation. So, essentially, we have `opB`, we take document history,\n\t// we look forward in the future and ask if in that future `opB` was undone.\n\t//\n\t// Relations is a backward process to `wasUndone()`.\n\t//\n\t// Long story short - using relations is asking what happened in the past. Looking back. This time we have an undoing\n\t// operation `opB` which has undone some other operation. When there is a transformation `opA` x `opB` and there is\n\t// a conflict to solve and `opB` is an undoing operation, we can look back in the history and see what was a relation\n\t// between `opA` and the operation which `opB` undone. Basing on that relation from the past, we can now make\n\t// a better decision when resolving a conflict between two operations, because we know more about the context of\n\t// those two operations.\n\t//\n\t// This is why this function does not return a relation directly between `opA` and `opB` because we need to look\n\t// back to search for a meaningful contextual information.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\t// @returns {String|null}\n\t_getRelation( opA, opB ) {\n\t\t// Get the original operation. Similarly as in `wasUndone()` it is used as an universal identifier for stored data.\n\t\tconst origB = this.originalOperations.get( opB );\n\t\tconst undoneB = this._history.getUndoneOperation( origB );\n\n\t\t// If `opB` is not undoing any operation, there is no relation.\n\t\tif ( !undoneB ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst origA = this.originalOperations.get( opA );\n\t\tconst relationsA = this._relations.get( origA );\n\n\t\t// Get all relations for `opA`, and check if there is a relation with `opB`-undone-counterpart. If so, return it.\n\t\tif ( relationsA ) {\n\t\t\treturn relationsA.get( undoneB ) || null;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// Helper function for `ContextFactory#updateRelations`.\n\t//\n\t// @private\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\t// @param {String} relation\n\t_setRelation( opA, opB, relation ) {\n\t\t// As always, setting is for original operations, not the clones/transformed operations.\n\t\tconst origA = this.originalOperations.get( opA );\n\t\tconst origB = this.originalOperations.get( opB );\n\n\t\tlet relationsA = this._relations.get( origA );\n\n\t\tif ( !relationsA ) {\n\t\t\trelationsA = new Map();\n\t\t\tthis._relations.set( origA, relationsA );\n\t\t}\n\n\t\trelationsA.set( origB, relation );\n\t}\n}\n\n/**\n * Holds additional contextual information about a transformed pair of operations (`a` and `b`). Those information\n * can be used for better conflict resolving.\n *\n * @typedef {Object} module:engine/model/operation/transform~TransformationContext\n *\n * @property {Boolean} aIsStrong Whether `a` is strong operation in this transformation, or weak.\n * @property {Boolean} aWasUndone Whether `a` operation was undone.\n * @property {Boolean} bWasUndone Whether `b` operation was undone.\n * @property {String|null} abRelation The relation between `a` operation and an operation undone by `b` operation.\n * @property {String|null} baRelation The relation between `b` operation and an operation undone by `a` operation.\n */\n\n/**\n * An utility function that updates {@link module:engine/model/operation/operation~Operation#baseVersion base versions}\n * of passed operations.\n *\n * The function simply sets `baseVersion` as a base version of the first passed operation and then increments it for\n * each following operation in `operations`.\n *\n * @private\n * @param {Array.<module:engine/model/operation/operation~Operation>} operations Operations to update.\n * @param {Number} baseVersion Base version to set for the first operation in `operations`.\n */\nfunction updateBaseVersions( operations, baseVersion ) {\n\tfor ( const operation of operations ) {\n\t\toperation.baseVersion = baseVersion++;\n\t}\n}\n\n/**\n * Adds `howMany` instances of {@link module:engine/model/operation/nooperation~NoOperation} to `operations` set.\n *\n * @private\n * @param {Array.<module:engine/model/operation/operation~Operation>} operations\n * @param {Number} howMany\n */\nfunction padWithNoOps( operations, howMany ) {\n\tfor ( let i = 0; i < howMany; i++ ) {\n\t\toperations.push( new NoOperation( 0 ) );\n\t}\n}\n\n// -----------------------\n\nsetTransformation( AttributeOperation, AttributeOperation, ( a, b, context ) => {\n\tif ( a.key === b.key ) {\n\t\t// If operations attributes are in conflict, check if their ranges intersect and manage them properly.\n\n\t\t// First, we want to apply change to the part of a range that has not been changed by the other operation.\n\t\tconst operations = a.range.getDifference( b.range ).map( range => {\n\t\t\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, 0 );\n\t\t} );\n\n\t\t// Then we take care of the common part of ranges.\n\t\tconst common = a.range.getIntersection( b.range );\n\n\t\tif ( common ) {\n\t\t\t// If this operation is more important, we also want to apply change to the part of the\n\t\t\t// original range that has already been changed by the other operation. Since that range\n\t\t\t// got changed we also have to update `oldValue`.\n\t\t\tif ( context.aIsStrong ) {\n\t\t\t\toperations.push( new AttributeOperation( common, b.key, b.newValue, a.newValue, 0 ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( operations.length == 0 ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\n\t\treturn operations;\n\t} else {\n\t\t// If operations don't conflict, simply return an array containing just a clone of this operation.\n\t\treturn [ a ];\n\t}\n} );\n\nsetTransformation( AttributeOperation, InsertOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// The attribute operation range includes the position where nodes were inserted.\n\t// There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n\t// the inserted nodes were elements and they should not receive attributes.\n\t//\n\tif ( a.range.start.hasSameParentAs( b.position ) && a.range.containsPosition( b.position ) ) {\n\t\t// If new nodes should not receive attributes, two separated ranges will be returned.\n\t\t// Otherwise, one expanded range will be returned.\n\t\tconst range = a.range._getTransformedByInsertion( b.position, b.howMany, !b.shouldReceiveAttributes );\n\t\tconst result = range.map( r => {\n\t\t\treturn new AttributeOperation( r, a.key, a.oldValue, a.newValue, a.baseVersion );\n\t\t} );\n\n\t\tif ( b.shouldReceiveAttributes ) {\n\t\t\t// `AttributeOperation#range` includes some newly inserted text.\n\t\t\t// The operation should also change the attribute of that text. An example:\n\t\t\t//\n\t\t\t// Bold should be applied on the following range:\n\t\t\t// <p>Fo[zb]ar</p>\n\t\t\t//\n\t\t\t// In meantime, new text is typed:\n\t\t\t// <p>Fozxxbar</p>\n\t\t\t//\n\t\t\t// Bold should be applied also on the new text:\n\t\t\t// <p>Fo[zxxb]ar</p>\n\t\t\t// <p>Fo<$text bold=\"true\">zxxb</$text>ar</p>\n\t\t\t//\n\t\t\t// There is a special case to consider here to consider.\n\t\t\t//\n\t\t\t// Consider setting an attribute with multiple possible values, for example `highlight`. The inserted text might\n\t\t\t// have already an attribute value applied and the `oldValue` property of the attribute operation might be wrong:\n\t\t\t//\n\t\t\t// Attribute `highlight=\"yellow\"` should be applied on the following range:\n\t\t\t// <p>Fo[zb]ar<p>\n\t\t\t//\n\t\t\t// In meantime, character `x` with `highlight=\"red\"` is typed:\n\t\t\t// <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>\n\t\t\t//\n\t\t\t// In this case we cannot simply apply operation changing the attribute value from `null` to `\"yellow\"` for the whole range\n\t\t\t// because that would lead to an exception (`oldValue` is incorrect for `x`).\n\t\t\t//\n\t\t\t// We also cannot break the original range as this would mess up a scenario when there are multiple following\n\t\t\t// insert operations, because then only the first inserted character is included in those ranges:\n\t\t\t// <p>Fo[z][x][b]ar</p>   -->   <p>Fo[z][x]x[b]ar</p>   -->   <p>Fo[z][x]xx[b]ar</p>\n\t\t\t//\n\t\t\t// So, the attribute range needs be expanded, no matter what attributes are set on the inserted nodes:\n\t\t\t//\n\t\t\t// <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>      <--- Change from `null` to `yellow`, throwing an exception.\n\t\t\t//\n\t\t\t// But before that operation would be applied, we will add an additional attribute operation that will change\n\t\t\t// attributes on the inserted nodes in a way which would make the original operation correct:\n\t\t\t//\n\t\t\t// <p>Fo[z{<$text highlight=\"red\">}x</$text>b]ar</p>    <--- Change range `{}` from `red` to `null`.\n\t\t\t// <p>Fo[zxb]ar</p>                                     <--- Now change from `null` to `yellow` is completely fine.\n\t\t\t//\n\n\t\t\t// Generate complementary attribute operation. Be sure to add it before the original operation.\n\t\t\tconst op = _getComplementaryAttributeOperations( b, a.key, a.oldValue );\n\n\t\t\tif ( op ) {\n\t\t\t\tresult.unshift( op );\n\t\t\t}\n\t\t}\n\n\t\t// If nodes should not receive new attribute, we are done here.\n\t\treturn result;\n\t}\n\n\t// If insert operation is not expanding the attribute operation range, simply transform the range.\n\ta.range = a.range._getTransformedByInsertion( b.position, b.howMany, false )[ 0 ];\n\n\treturn [ a ];\n} );\n\n/**\n * Helper function for `AttributeOperation` x `InsertOperation` (and reverse) transformation.\n *\n * For given `insertOperation` it checks the inserted node if it has an attribute `key` set to a value different\n * than `newValue`. If so, it generates an `AttributeOperation` which changes the value of `key` attribute to `newValue`.\n *\n * @private\n * @param {module:engine/model/operation/insertoperation~InsertOperation} insertOperation\n * @param {String} key\n * @param {*} newValue\n * @returns {module:engine/model/operation/attributeoperation~AttributeOperation|null}\n */\nfunction _getComplementaryAttributeOperations( insertOperation, key, newValue ) {\n\tconst nodes = insertOperation.nodes;\n\n\t// At the beginning we store the attribute value from the first node.\n\tconst insertValue = nodes.getNode( 0 ).getAttribute( key );\n\n\tif ( insertValue == newValue ) {\n\t\treturn null;\n\t}\n\n\tconst range = new Range( insertOperation.position, insertOperation.position.getShiftedBy( insertOperation.howMany ) );\n\n\treturn new AttributeOperation( range, key, insertValue, newValue, 0 );\n}\n\nsetTransformation( AttributeOperation, MergeOperation, ( a, b ) => {\n\tconst ranges = [];\n\n\t// Case 1:\n\t//\n\t// Attribute change on the merged element. In this case, the merged element was moved to the graveyard.\n\t// An additional attribute operation that will change the (re)moved element needs to be generated.\n\t//\n\tif ( a.range.start.hasSameParentAs( b.deletionPosition ) ) {\n\t\tif ( a.range.containsPosition( b.deletionPosition ) || a.range.start.isEqual( b.deletionPosition ) ) {\n\t\t\tranges.push( Range._createFromPositionAndShift( b.graveyardPosition, 1 ) );\n\t\t}\n\t}\n\n\tconst range = a.range._getTransformedByMergeOperation( b );\n\n\t// Do not add empty (collapsed) ranges to the result. `range` may be collapsed if it contained only the merged element.\n\tif ( !range.isCollapsed ) {\n\t\tranges.push( range );\n\t}\n\n\t// Create `AttributeOperation`s out of the ranges.\n\treturn ranges.map( range => {\n\t\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion );\n\t} );\n} );\n\nsetTransformation( AttributeOperation, MoveOperation, ( a, b ) => {\n\tconst ranges = _breakRangeByMoveOperation( a.range, b );\n\n\t// Create `AttributeOperation`s out of the ranges.\n\treturn ranges.map( range => new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion ) );\n} );\n\n// Helper function for `AttributeOperation` x `MoveOperation` transformation.\n//\n// Takes the passed `range` and transforms it by move operation `moveOp` in a specific way. Only top-level nodes of `range`\n// are considered to be in the range. If move operation moves nodes deep from inside of the range, those nodes won't\n// be included in the result. In other words, top-level nodes of the ranges from the result are exactly the same as\n// top-level nodes of the original `range`.\n//\n// This is important for `AttributeOperation` because, for its range, it changes only the top-level nodes. So we need to\n// track only how those nodes have been affected by `MoveOperation`.\n//\n// @private\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/operation/moveoperation~MoveOperation} moveOp\n// @returns {Array.<module:engine/model/range~Range>}\nfunction _breakRangeByMoveOperation( range, moveOp ) {\n\tconst moveRange = Range._createFromPositionAndShift( moveOp.sourcePosition, moveOp.howMany );\n\n\t// We are transforming `range` (original range) by `moveRange` (range moved by move operation). As usual when it comes to\n\t// transforming a ranges, we may have a common part of the ranges and we may have a difference part (zero to two ranges).\n\tlet common = null;\n\tlet difference = [];\n\n\t// Let's compare the ranges.\n\tif ( moveRange.containsRange( range, true ) ) {\n\t\t// If the whole original range is moved, treat it whole as a common part. There's also no difference part.\n\t\tcommon = range;\n\t} else if ( range.start.hasSameParentAs( moveRange.start ) ) {\n\t\t// If the ranges are \"on the same level\" (in the same parent) then move operation may move exactly those nodes\n\t\t// that are changed by the attribute operation. In this case we get common part and difference part in the usual way.\n\t\tdifference = range.getDifference( moveRange );\n\t\tcommon = range.getIntersection( moveRange );\n\t} else {\n\t\t// In any other situation we assume that original range is different than move range, that is that move operation\n\t\t// moves other nodes that attribute operation change. Even if the moved range is deep inside in the original range.\n\t\t//\n\t\t// Note that this is different than in `.getIntersection` (we would get a common part in that case) and different\n\t\t// than `.getDifference` (we would get two ranges).\n\t\tdifference = [ range ];\n\t}\n\n\tconst result = [];\n\n\t// The default behaviour of `_getTransformedByMove` might get wrong results for difference part, though, so\n\t// we do it by hand.\n\tfor ( let diff of difference ) {\n\t\t// First, transform the range by removing moved nodes. Since this is a difference, this is safe, `null` won't be returned\n\t\t// as the range is different than the moved range.\n\t\tdiff = diff._getTransformedByDeletion( moveOp.sourcePosition, moveOp.howMany );\n\n\t\t// Transform also `targetPosition`.\n\t\tconst targetPosition = moveOp.getMovedRangeStart();\n\n\t\t// Spread the range only if moved nodes are inserted only between the top-level nodes of the `diff` range.\n\t\tconst spread = diff.start.hasSameParentAs( targetPosition );\n\n\t\t// Transform by insertion of moved nodes.\n\t\tdiff = diff._getTransformedByInsertion( targetPosition, moveOp.howMany, spread );\n\n\t\tresult.push( ...diff );\n\t}\n\n\t// Common part can be simply transformed by the move operation. This is because move operation will not target to\n\t// that common part (the operation would have to target inside its own moved range).\n\tif ( common ) {\n\t\tresult.push(\n\t\t\tcommon._getTransformedByMove( moveOp.sourcePosition, moveOp.targetPosition, moveOp.howMany, false )[ 0 ]\n\t\t);\n\t}\n\n\treturn result;\n}\n\nsetTransformation( AttributeOperation, SplitOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// Split node is the last node in `AttributeOperation#range`.\n\t// `AttributeOperation#range` needs to be expanded to include the new (split) node.\n\t//\n\t// Attribute `type` to be changed to `numbered` but the `listItem` is split.\n\t// <listItem type=\"bulleted\">foobar</listItem>\n\t//\n\t// After split:\n\t// <listItem type=\"bulleted\">foo</listItem><listItem type=\"bulleted\">bar</listItem>\n\t//\n\t// After attribute change:\n\t// <listItem type=\"numbered\">foo</listItem><listItem type=\"numbered\">foo</listItem>\n\t//\n\tif ( a.range.end.isEqual( b.insertionPosition ) ) {\n\t\tif ( !b.graveyardPosition ) {\n\t\t\ta.range.end.offset++;\n\t\t}\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 2:\n\t//\n\t// Split position is inside `AttributeOperation#range`, at the same level, so the nodes to change are\n\t// not going to make a flat range.\n\t//\n\t// Content with range-to-change and split position:\n\t// <p>Fo[zb^a]r</p>\n\t//\n\t// After split:\n\t// <p>Fozb</p><p>ar</p>\n\t//\n\t// Make two separate ranges containing all nodes to change:\n\t// <p>Fo[zb]</p><p>[a]r</p>\n\t//\n\tif ( a.range.start.hasSameParentAs( b.splitPosition ) && a.range.containsPosition( b.splitPosition ) ) {\n\t\tconst secondPart = a.clone();\n\n\t\tsecondPart.range = new Range(\n\t\t\tb.moveTargetPosition.clone(),\n\t\t\ta.range.end._getCombined( b.splitPosition, b.moveTargetPosition )\n\t\t);\n\n\t\ta.range.end = b.splitPosition.clone();\n\t\ta.range.end.stickiness = 'toPrevious';\n\n\t\treturn [ a, secondPart ];\n\t}\n\n\t// The default case.\n\t//\n\ta.range = a.range._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, AttributeOperation, ( a, b ) => {\n\tconst result = [ a ];\n\n\t// Case 1:\n\t//\n\t// The attribute operation range includes the position where nodes were inserted.\n\t// There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n\t// the inserted nodes were elements and they should not receive attributes.\n\t//\n\t// This is a mirror scenario to the one described in `AttributeOperation` x `InsertOperation` transformation,\n\t// although this case is a little less complicated. In this case we simply need to change attributes of the\n\t// inserted nodes and that's it.\n\t//\n\tif ( a.shouldReceiveAttributes && a.position.hasSameParentAs( b.range.start ) && b.range.containsPosition( a.position ) ) {\n\t\tconst op = _getComplementaryAttributeOperations( a, b.key, b.newValue );\n\n\t\tif ( op ) {\n\t\t\tresult.push( op );\n\t\t}\n\t}\n\n\t// The default case is: do nothing.\n\t// `AttributeOperation` does not change the model tree structure so `InsertOperation` does not need to be changed.\n\t//\n\treturn result;\n} );\n\nsetTransformation( InsertOperation, InsertOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Two insert operations insert nodes at the same position. Since they are the same, it needs to be decided\n\t// what will be the order of inserted nodes. However, there is no additional information to help in that\n\t// decision. Also, when `b` will be transformed by `a`, the same order must be maintained.\n\t//\n\t// To achieve that, we will check if the operation is strong.\n\t// If it is, it won't get transformed. If it is not, it will be moved.\n\t//\n\tif ( a.position.isEqual( b.position ) && context.aIsStrong ) {\n\t\treturn [ a ];\n\t}\n\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedByInsertOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, MoveOperation, ( a, b ) => {\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedByMoveOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, SplitOperation, ( a, b ) => {\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, MergeOperation, ( a, b ) => {\n\ta.position = a.position._getTransformedByMergeOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( MarkerOperation, InsertOperation, ( a, b ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = a.oldRange._getTransformedByInsertOperation( b )[ 0 ];\n\t}\n\n\tif ( a.newRange ) {\n\t\ta.newRange = a.newRange._getTransformedByInsertOperation( b )[ 0 ];\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, MarkerOperation, ( a, b, context ) => {\n\tif ( a.name == b.name ) {\n\t\tif ( context.aIsStrong ) {\n\t\t\ta.oldRange = b.newRange ? b.newRange.clone() : null;\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, MergeOperation, ( a, b ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = a.oldRange._getTransformedByMergeOperation( b );\n\t}\n\n\tif ( a.newRange ) {\n\t\ta.newRange = a.newRange._getTransformedByMergeOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, MoveOperation, ( a, b, context ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = Range._createFromRanges( a.oldRange._getTransformedByMoveOperation( b ) );\n\t}\n\n\tif ( a.newRange ) {\n\t\tif ( context.abRelation ) {\n\t\t\tconst aNewRange = Range._createFromRanges( a.newRange._getTransformedByMoveOperation( b ) );\n\n\t\t\tif ( context.abRelation.side == 'left' && b.targetPosition.isEqual( a.newRange.start ) ) {\n\t\t\t\ta.newRange.start.path = context.abRelation.path;\n\t\t\t\ta.newRange.end = aNewRange.end;\n\n\t\t\t\treturn [ a ];\n\t\t\t} else if ( context.abRelation.side == 'right' && b.targetPosition.isEqual( a.newRange.end ) ) {\n\t\t\t\ta.newRange.start = aNewRange.start;\n\t\t\t\ta.newRange.end.path = context.abRelation.path;\n\n\t\t\t\treturn [ a ];\n\t\t\t}\n\t\t}\n\n\t\ta.newRange = Range._createFromRanges( a.newRange._getTransformedByMoveOperation( b ) );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, SplitOperation, ( a, b, context ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = a.oldRange._getTransformedBySplitOperation( b );\n\t}\n\n\tif ( a.newRange ) {\n\t\tif ( context.abRelation ) {\n\t\t\tconst aNewRange = a.newRange._getTransformedBySplitOperation( b );\n\n\t\t\tif ( a.newRange.start.isEqual( b.splitPosition ) && context.abRelation.wasStartBeforeMergedElement ) {\n\t\t\t\ta.newRange.start = Position._createAt( b.insertionPosition );\n\t\t\t} else if ( a.newRange.start.isEqual( b.splitPosition ) && !context.abRelation.wasInLeftElement ) {\n\t\t\t\ta.newRange.start = Position._createAt( b.moveTargetPosition );\n\t\t\t}\n\n\t\t\tif ( a.newRange.end.isEqual( b.splitPosition ) && context.abRelation.wasInRightElement ) {\n\t\t\t\ta.newRange.end = Position._createAt( b.moveTargetPosition );\n\t\t\t} else if ( a.newRange.end.isEqual( b.splitPosition ) && context.abRelation.wasEndBeforeMergedElement ) {\n\t\t\t\ta.newRange.end = Position._createAt( b.insertionPosition );\n\t\t\t} else {\n\t\t\t\ta.newRange.end = aNewRange.end;\n\t\t\t}\n\n\t\t\treturn [ a ];\n\t\t}\n\n\t\ta.newRange = a.newRange._getTransformedBySplitOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( MergeOperation, InsertOperation, ( a, b ) => {\n\tif ( a.sourcePosition.hasSameParentAs( b.position ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedByInsertOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedByInsertOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( MergeOperation, MergeOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Same merge operations.\n\t//\n\t// Both operations have same source and target positions. So the element already got merged and there is\n\t// theoretically nothing to do.\n\t//\n\tif ( a.sourcePosition.isEqual( b.sourcePosition ) && a.targetPosition.isEqual( b.targetPosition ) ) {\n\t\t// There are two ways that we can provide a do-nothing operation.\n\t\t//\n\t\t// First is simply a NoOperation instance. We will use it if `b` operation was not undone.\n\t\t//\n\t\t// Second is a merge operation that has the source operation in the merged element - in the graveyard -\n\t\t// same target position and `howMany` equal to `0`. So it is basically merging an empty element from graveyard\n\t\t// which is almost the same as NoOperation.\n\t\t//\n\t\t// This way the merge operation can be later transformed by split operation\n\t\t// to provide correct undo. This will be used if `b` operation was undone (only then it is correct).\n\t\t//\n\t\tif ( !context.bWasUndone ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t} else {\n\t\t\tconst path = b.graveyardPosition.path.slice();\n\t\t\tpath.push( 0 );\n\n\t\t\ta.sourcePosition = new Position( b.graveyardPosition.root, path );\n\t\t\ta.howMany = 0;\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// Case 2:\n\t//\n\t// Same merge source position but different target position.\n\t//\n\t// This can happen during collaboration. For example, if one client merged a paragraph to the previous paragraph\n\t// and the other person removed that paragraph and merged the same paragraph to something before:\n\t//\n\t// Client A:\n\t// <p>Foo</p><p>Bar</p><p>[]Xyz</p>\n\t// <p>Foo</p><p>BarXyz</p>\n\t//\n\t// Client B:\n\t// <p>Foo</p>[<p>Bar</p>]<p>Xyz</p>\n\t// <p>Foo</p><p>[]Xyz</p>\n\t// <p>FooXyz</p>\n\t//\n\t// In this case we need to decide where finally \"Xyz\" will land:\n\t//\n\t// <p>FooXyz</p>               graveyard: <p>Bar</p>\n\t// <p>Foo</p>                  graveyard: <p>BarXyz</p>\n\t//\n\t// Let's move it in a way so that a merge operation that does not target to graveyard is more important so that\n\t// nodes does not end up in the graveyard. It makes sense. Both for Client A and for Client B \"Xyz\" finally did not\n\t// end up in the graveyard (see above).\n\t//\n\t// If neither or both operations point to graveyard, then let `aIsStrong` decide.\n\t//\n\tif (\n\t\ta.sourcePosition.isEqual( b.sourcePosition ) && !a.targetPosition.isEqual( b.targetPosition ) &&\n\t\t!context.bWasUndone && context.abRelation != 'splitAtSource'\n\t) {\n\t\tconst aToGraveyard = a.targetPosition.root.rootName == '$graveyard';\n\t\tconst bToGraveyard = b.targetPosition.root.rootName == '$graveyard';\n\n\t\t// If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n\t\tconst aIsWeak = aToGraveyard && !bToGraveyard;\n\n\t\t// If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n\t\tconst bIsWeak = bToGraveyard && !aToGraveyard;\n\n\t\t// Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n\t\tconst forceMove = bIsWeak || ( !aIsWeak && context.aIsStrong );\n\n\t\tif ( forceMove ) {\n\t\t\tconst sourcePosition = b.targetPosition._getTransformedByMergeOperation( b );\n\t\t\tconst targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\t\t\treturn [ new MoveOperation( sourcePosition, a.howMany, targetPosition, 0 ) ];\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.sourcePosition.hasSameParentAs( b.targetPosition ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedByMergeOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\t// Handle positions in graveyard.\n\t// If graveyard positions are same and `a` operation is strong - do not transform.\n\tif ( !a.graveyardPosition.isEqual( b.graveyardPosition ) || !context.aIsStrong ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MergeOperation, MoveOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// The element to merge got removed.\n\t//\n\t// Merge operation does support merging elements which are not siblings. So it would not be a problem\n\t// from technical point of view. However, if the element was removed, the intention of the user deleting it\n\t// was to have it all deleted, together with its children. From user experience point of view, moving back the\n\t// removed nodes might be unexpected. This means that in this scenario we will block the merging.\n\t//\n\t// The exception of this rule would be if the remove operation was later undone.\n\t//\n\tconst removedRange = Range._createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\tif ( b.type == 'remove' && !context.bWasUndone && !context.forceWeakRemove ) {\n\t\tif ( a.deletionPosition.hasSameParentAs( b.sourcePosition ) && removedRange.containsPosition( a.sourcePosition ) ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.sourcePosition.hasSameParentAs( b.targetPosition ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\tif ( a.sourcePosition.hasSameParentAs( b.sourcePosition ) ) {\n\t\ta.howMany -= b.howMany;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedByMoveOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedByMoveOperation( b );\n\n\t// `MergeOperation` graveyard position is like `MoveOperation` target position. It is a position where element(s) will\n\t// be moved. Like in other similar cases, we need to consider the scenario when those positions are same.\n\t// Here, we will treat `MergeOperation` like it is always strong (see `InsertOperation` x `InsertOperation` for comparison).\n\t// This means that we won't transform graveyard position if it is equal to move operation target position.\n\tif ( !a.graveyardPosition.isEqual( b.targetPosition ) ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MergeOperation, SplitOperation, ( a, b, context ) => {\n\tif ( b.graveyardPosition ) {\n\t\t// If `b` operation defines graveyard position, a node from graveyard will be moved. This means that we need to\n\t\t// transform `a.graveyardPosition` accordingly.\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByDeletion( b.graveyardPosition, 1 );\n\n\t\t// This is a scenario foreseen in `MergeOperation` x `MergeOperation`, with two identical merge operations.\n\t\t//\n\t\t// So, there was `MergeOperation` x `MergeOperation` transformation earlier. Now, `a` is a merge operation which\n\t\t// source position is in graveyard. Interestingly, split operation wants to use the node to be merged by `a`. This\n\t\t// means that `b` is undoing that merge operation from earlier, which caused `a` to be in graveyard.\n\t\t//\n\t\t// If that's the case, at this point, we will only \"fix\" `a.howMany`. It was earlier set to `0` in\n\t\t// `MergeOperation` x `MergeOperation` transformation. Later transformations in this function will change other\n\t\t// properties.\n\t\t//\n\t\tif ( a.deletionPosition.isEqual( b.graveyardPosition ) ) {\n\t\t\ta.howMany = b.howMany;\n\t\t}\n\t}\n\n\t// Case 1:\n\t//\n\t// Merge operation moves nodes to the place where split happens.\n\t// This is a classic situation when there are two paragraphs, and there is a split (enter) after the first\n\t// paragraph and there is a merge (delete) at the beginning of the second paragraph:\n\t//\n\t// <p>Foo{}</p><p>[]Bar</p>.\n\t//\n\t// Split is after `Foo`, while merge is from `Bar` to the end of `Foo`.\n\t//\n\t// State after split:\n\t// <p>Foo</p><p></p><p>Bar</p>\n\t//\n\t// Now, `Bar` should be merged to the new paragraph:\n\t// <p>Foo</p><p>Bar</p>\n\t//\n\t// Instead of merging it to the original paragraph:\n\t// <p>FooBar</p><p></p>\n\t//\n\t// This means that `targetPosition` needs to be transformed. This is the default case though.\n\t// For example, if the split would be after `F`, `targetPosition` should also be transformed.\n\t//\n\t// There are three exceptions, though, when we want to keep `targetPosition` as it was.\n\t//\n\t// First exception is when the merge target position is inside an element (not at the end, as usual). This\n\t// happens when the merge operation earlier was transformed by \"the same\" merge operation. If merge operation\n\t// targets inside the element we want to keep the original target position (and not transform it) because\n\t// we have additional context telling us that we want to merge to the original element. We can check if the\n\t// merge operation points inside element by checking what is `SplitOperation#howMany`. Since merge target position\n\t// is same as split position, if `howMany` is non-zero, it means that the merge target position is inside an element.\n\t//\n\t// Second exception is when the element to merge is in the graveyard and split operation uses it. In that case\n\t// if target position would be transformed, the merge operation would target at the source position:\n\t//\n\t// root: <p>Foo</p>\t\t\t\tgraveyard: <p></p>\n\t//\n\t// SplitOperation: root [ 0, 3 ] using graveyard [ 0 ] (howMany = 0)\n\t// MergeOperation: graveyard [ 0, 0 ] -> root [ 0, 3 ] (howMany = 0)\n\t//\n\t// Since split operation moves the graveyard node back to the root, the merge operation source position changes.\n\t// We would like to merge from the empty <p> to the \"Foo\" <p>:\n\t//\n\t// root: <p>Foo</p><p></p>\t\t\tgraveyard:\n\t//\n\t// MergeOperation#sourcePosition = root [ 1, 0 ]\n\t//\n\t// If `targetPosition` is transformed, it would become root [ 1, 0 ] as well. It has to be kept as it was.\n\t//\n\t// Third exception is connected with relations. If this happens during undo and we have explicit information\n\t// that target position has not been affected by the operation which is undone by this split then this split should\n\t// not move the target position either.\n\t//\n\tif ( a.targetPosition.isEqual( b.splitPosition ) ) {\n\t\tconst mergeInside = b.howMany != 0;\n\t\tconst mergeSplittingElement = b.graveyardPosition && a.deletionPosition.isEqual( b.graveyardPosition );\n\n\t\tif ( mergeInside || mergeSplittingElement || context.abRelation == 'mergeTargetNotMoved' ) {\n\t\t\ta.sourcePosition = a.sourcePosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// Case 2:\n\t//\n\t// Merge source is at the same position as split position. This sometimes happen, mostly during undo.\n\t// The decision here is mostly to choose whether merge source position should stay where it is (so it will be at the end of the\n\t// split element) or should be move to the beginning of the new element.\n\t//\n\tif ( a.sourcePosition.isEqual( b.splitPosition ) ) {\n\t\t// Use context to check if `SplitOperation` is not undoing a merge operation, that didn't change the `a` operation.\n\t\t// This scenario happens the undone merge operation moved nodes at the source position of `a` operation.\n\t\t// In that case `a` operation source position should stay where it is.\n\t\tif ( context.abRelation == 'mergeSourceNotMoved' ) {\n\t\t\ta.howMany = 0;\n\t\t\ta.targetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\n\t\t// This merge operation might have been earlier transformed by a merge operation which both merged the same element.\n\t\t// See that case in `MergeOperation` x `MergeOperation` transformation. In that scenario, if the merge operation has been undone,\n\t\t// the special case is not applied.\n\t\t//\n\t\t// Now, the merge operation is transformed by the split which has undone that previous merge operation.\n\t\t// So now we are fixing situation which was skipped in `MergeOperation` x `MergeOperation` case.\n\t\t//\n\t\tif ( context.abRelation == 'mergeSameElement' || a.sourcePosition.offset > 0 ) {\n\t\t\ta.sourcePosition = b.moveTargetPosition.clone();\n\t\t\ta.targetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.sourcePosition.hasSameParentAs( b.splitPosition ) ) {\n\t\ta.howMany = b.splitPosition.offset;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedBySplitOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( MoveOperation, InsertOperation, ( a, b ) => {\n\tconst moveRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\tconst transformed = moveRange._getTransformedByInsertOperation( b, false )[ 0 ];\n\n\ta.sourcePosition = transformed.start;\n\ta.howMany = transformed.end.offset - transformed.start.offset;\n\n\t// See `InsertOperation` x `MoveOperation` transformation for details on this case.\n\t//\n\t// In summary, both operations point to the same place, so the order of nodes needs to be decided.\n\t// `MoveOperation` is considered weaker, so it is always transformed, unless there was a certain relation\n\t// between operations.\n\t//\n\tif ( !a.targetPosition.isEqual( b.position ) ) {\n\t\ta.targetPosition = a.targetPosition._getTransformedByInsertOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MoveOperation, MoveOperation, ( a, b, context ) => {\n\t//\n\t// Setting and evaluating some variables that will be used in special cases and default algorithm.\n\t//\n\t// Create ranges from `MoveOperations` properties.\n\tconst rangeA = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\tconst rangeB = Range._createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\t// Assign `context.aIsStrong` to a different variable, because the value may change during execution of\n\t// this algorithm and we do not want to override original `context.aIsStrong` that will be used in later transformations.\n\tlet aIsStrong = context.aIsStrong;\n\n\t// This will be used to decide the order of nodes if both operations target at the same position.\n\t// By default, use strong/weak operation mechanism.\n\tlet insertBefore = !context.aIsStrong;\n\n\t// If the relation is set, then use it to decide nodes order.\n\tif ( context.abRelation == 'insertBefore' || context.baRelation == 'insertAfter' ) {\n\t\tinsertBefore = true;\n\t} else if ( context.abRelation == 'insertAfter' || context.baRelation == 'insertBefore' ) {\n\t\tinsertBefore = false;\n\t}\n\n\t// `a.targetPosition` could be affected by the `b` operation. We will transform it.\n\tlet newTargetPosition;\n\n\tif ( a.targetPosition.isEqual( b.targetPosition ) && insertBefore ) {\n\t\tnewTargetPosition = a.targetPosition._getTransformedByDeletion(\n\t\t\tb.sourcePosition,\n\t\t\tb.howMany\n\t\t);\n\t} else {\n\t\tnewTargetPosition = a.targetPosition._getTransformedByMove(\n\t\t\tb.sourcePosition,\n\t\t\tb.targetPosition,\n\t\t\tb.howMany\n\t\t);\n\t}\n\n\t//\n\t// Special case #1 + mirror.\n\t//\n\t// Special case when both move operations' target positions are inside nodes that are\n\t// being moved by the other move operation. So in other words, we move ranges into inside of each other.\n\t// This case can't be solved reasonably (on the other hand, it should not happen often).\n\tif ( _moveTargetIntoMovedRange( a, b ) && _moveTargetIntoMovedRange( b, a ) ) {\n\t\t// Instead of transforming operation, we return a reverse of the operation that we transform by.\n\t\t// So when the results of this \"transformation\" will be applied, `b` MoveOperation will get reversed.\n\t\treturn [ b.getReversed() ];\n\t}\n\t//\n\t// End of special case #1.\n\t//\n\n\t//\n\t// Special case #2.\n\t//\n\t// Check if `b` operation targets inside `rangeA`.\n\tconst bTargetsToA = rangeA.containsPosition( b.targetPosition );\n\n\t// If `b` targets to `rangeA` and `rangeA` contains `rangeB`, `b` operation has no influence on `a` operation.\n\t// You might say that operation `b` is captured inside operation `a`.\n\tif ( bTargetsToA && rangeA.containsRange( rangeB, true ) ) {\n\t\t// There is a mini-special case here, where `rangeB` is on other level than `rangeA`. That's why\n\t\t// we need to transform `a` operation anyway.\n\t\trangeA.start = rangeA.start._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\t\trangeA.end = rangeA.end._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\n\t\treturn _makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition );\n\t}\n\n\t//\n\t// Special case #2 mirror.\n\t//\n\tconst aTargetsToB = rangeB.containsPosition( a.targetPosition );\n\n\tif ( aTargetsToB && rangeB.containsRange( rangeA, true ) ) {\n\t\t// `a` operation is \"moved together\" with `b` operation.\n\t\t// Here, just move `rangeA` \"inside\" `rangeB`.\n\t\trangeA.start = rangeA.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\t\trangeA.end = rangeA.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\n\t\treturn _makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition );\n\t}\n\t//\n\t// End of special case #2.\n\t//\n\n\t//\n\t// Special case #3 + mirror.\n\t//\n\t// `rangeA` has a node which is an ancestor of `rangeB`. In other words, `rangeB` is inside `rangeA`\n\t// but not on the same tree level. In such case ranges have common part but we have to treat it\n\t// differently, because in such case those ranges are not really conflicting and should be treated like\n\t// two separate ranges. Also we have to discard two difference parts.\n\tconst aCompB = compareArrays( a.sourcePosition.getParentPath(), b.sourcePosition.getParentPath() );\n\n\tif ( aCompB == 'prefix' || aCompB == 'extension' ) {\n\t\t// Transform `rangeA` by `b` operation and make operation out of it, and that's all.\n\t\t// Note that this is a simplified version of default case, but here we treat the common part (whole `rangeA`)\n\t\t// like a one difference part.\n\t\trangeA.start = rangeA.start._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\t\trangeA.end = rangeA.end._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\n\t\treturn _makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition );\n\t}\n\t//\n\t// End of special case #3.\n\t//\n\n\t//\n\t// Default case - ranges are on the same level or are not connected with each other.\n\t//\n\t// Modifier for default case.\n\t// Modifies `aIsStrong` flag in certain conditions.\n\t//\n\t// If only one of operations is a remove operation, we force remove operation to be the \"stronger\" one\n\t// to provide more expected results.\n\tif ( a.type == 'remove' && b.type != 'remove' && !context.aWasUndone && !context.forceWeakRemove ) {\n\t\taIsStrong = true;\n\t} else if ( a.type != 'remove' && b.type == 'remove' && !context.bWasUndone && !context.forceWeakRemove ) {\n\t\taIsStrong = false;\n\t}\n\n\t// Handle operation's source ranges - check how `rangeA` is affected by `b` operation.\n\t// This will aggregate transformed ranges.\n\tconst ranges = [];\n\n\t// Get the \"difference part\" of `a` operation source range.\n\t// This is an array with one or two ranges. Two ranges if `rangeB` is inside `rangeA`.\n\tconst difference = rangeA.getDifference( rangeB );\n\n\tfor ( const range of difference ) {\n\t\t// Transform those ranges by `b` operation. For example if `b` moved range from before those ranges, fix those ranges.\n\t\trange.start = range.start._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\t\trange.end = range.end._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\n\t\t// If `b` operation targets into `rangeA` on the same level, spread `rangeA` into two ranges.\n\t\tconst shouldSpread = compareArrays( range.start.getParentPath(), b.getMovedRangeStart().getParentPath() ) == 'same';\n\t\tconst newRanges = range._getTransformedByInsertion( b.getMovedRangeStart(), b.howMany, shouldSpread );\n\n\t\tranges.push( ...newRanges );\n\t}\n\n\t// Then, we have to manage the \"common part\" of both move ranges.\n\tconst common = rangeA.getIntersection( rangeB );\n\n\tif ( common !== null && aIsStrong ) {\n\t\t// Calculate the new position of that part of original range.\n\t\tcommon.start = common.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\t\tcommon.end = common.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\n\t\t// Take care of proper range order.\n\t\t//\n\t\t// Put `common` at appropriate place. Keep in mind that we are interested in original order.\n\t\t// Basically there are only three cases: there is zero, one or two difference ranges.\n\t\t//\n\t\t// If there is zero difference ranges, just push `common` in the array.\n\t\tif ( ranges.length === 0 ) {\n\t\t\tranges.push( common );\n\t\t}\n\t\t// If there is one difference range, we need to check whether common part was before it or after it.\n\t\telse if ( ranges.length == 1 ) {\n\t\t\tif ( rangeB.start.isBefore( rangeA.start ) || rangeB.start.isEqual( rangeA.start ) ) {\n\t\t\t\tranges.unshift( common );\n\t\t\t} else {\n\t\t\t\tranges.push( common );\n\t\t\t}\n\t\t}\n\t\t// If there are more ranges (which means two), put common part between them. This is the only scenario\n\t\t// where there could be two difference ranges so we don't have to make any comparisons.\n\t\telse {\n\t\t\tranges.splice( 1, 0, common );\n\t\t}\n\t}\n\n\tif ( ranges.length === 0 ) {\n\t\t// If there are no \"source ranges\", nothing should be changed.\n\t\t// Note that this can happen only if `aIsStrong == false` and `rangeA.isEqual( rangeB )`.\n\t\treturn [ new NoOperation( a.baseVersion ) ];\n\t}\n\n\treturn _makeMoveOperationsFromRanges( ranges, newTargetPosition );\n} );\n\nsetTransformation( MoveOperation, SplitOperation, ( a, b, context ) => {\n\tlet newTargetPosition = a.targetPosition.clone();\n\n\t// Do not transform if target position is same as split insertion position and this split comes from undo.\n\t// This should be done on relations but it is too much work for now as it would require relations working in collaboration.\n\t// We need to make a decision how we will resolve such conflict and this is less harmful way.\n\tif ( !a.targetPosition.isEqual( b.insertionPosition ) || !b.graveyardPosition || context.abRelation == 'moveTargetAfter' ) {\n\t\tnewTargetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\t}\n\n\t// Case 1:\n\t//\n\t// Last element in the moved range got split.\n\t//\n\t// In this case the default range transformation will not work correctly as the element created by\n\t// split operation would be outside the range. The range to move needs to be fixed manually.\n\t//\n\tconst moveRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\n\tif ( moveRange.end.isEqual( b.insertionPosition ) ) {\n\t\t// Do it only if this is a \"natural\" split, not a one that comes from undo.\n\t\t// If this is undo split, only `targetPosition` needs to be changed (if the move is a remove).\n\t\tif ( !b.graveyardPosition ) {\n\t\t\ta.howMany++;\n\t\t}\n\n\t\ta.targetPosition = newTargetPosition;\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 2:\n\t//\n\t// Split happened between the moved nodes. In this case two ranges to move need to be generated.\n\t//\n\t// Characters `ozba` are moved to the end of paragraph `Xyz` but split happened.\n\t// <p>F[oz|ba]r</p><p>Xyz</p>\n\t//\n\t// After split:\n\t// <p>F[oz</p><p>ba]r</p><p>Xyz</p>\n\t//\n\t// Correct ranges:\n\t// <p>F[oz]</p><p>[ba]r</p><p>Xyz</p>\n\t//\n\t// After move:\n\t// <p>F</p><p>r</p><p>Xyzozba</p>\n\t//\n\tif ( moveRange.start.hasSameParentAs( b.splitPosition ) && moveRange.containsPosition( b.splitPosition ) ) {\n\t\tlet rightRange = new Range( b.splitPosition, moveRange.end );\n\t\trightRange = rightRange._getTransformedBySplitOperation( b );\n\n\t\tconst ranges = [\n\t\t\tnew Range( moveRange.start, b.splitPosition ),\n\t\t\trightRange\n\t\t];\n\n\t\treturn _makeMoveOperationsFromRanges( ranges, newTargetPosition );\n\t}\n\n\t// Case 3:\n\t//\n\t// Move operation targets at the split position. We need to decide if the nodes should be inserted\n\t// at the end of the split element or at the beginning of the new element.\n\t//\n\tif ( a.targetPosition.isEqual( b.splitPosition ) && context.abRelation == 'insertAtSource' ) {\n\t\tnewTargetPosition = b.moveTargetPosition;\n\t}\n\n\t// Case 4:\n\t//\n\t// Move operation targets just after the split element. We need to decide if the nodes should be inserted\n\t// between two parts of split element, or after the new element.\n\t//\n\t// Split at `|`, while move operation moves `<p>Xyz</p>` and targets at `^`:\n\t// <p>Foo|bar</p>^<p>baz</p>\n\t// <p>Foo</p>^<p>bar</p><p>baz</p> or <p>Foo</p><p>bar</p>^<p>baz</p>?\n\t//\n\t// If there is no contextual information between operations (for example, they come from collaborative\n\t// editing), we don't want to put some unrelated content (move) between parts of related content (split parts).\n\t// However, if the split is from undo, in the past, the moved content might be targeting between the\n\t// split parts, meaning that was exactly user's intention:\n\t//\n\t// <p>Foo</p>^<p>bar</p>\t\t<--- original situation, in \"past\".\n\t// <p>Foobar</p>^\t\t\t\t<--- after merge target position is transformed.\n\t// <p>Foo|bar</p>^\t\t\t\t<--- then the merge is undone, and split happens, which leads us to current situation.\n\t//\n\t// In this case it is pretty clear that the intention was to put new paragraph between those nodes,\n\t// so we need to transform accordingly. We can detect this scenario thanks to relations.\n\t//\n\tif ( a.targetPosition.isEqual( b.insertionPosition ) && context.abRelation == 'insertBetween' ) {\n\t\tnewTargetPosition = a.targetPosition;\n\t}\n\n\t// The default case.\n\t//\n\tconst transformed = moveRange._getTransformedBySplitOperation( b );\n\tconst ranges = [ transformed ];\n\n\t// Case 5:\n\t//\n\t// Moved range contains graveyard element used by split operation. Add extra move operation to the result.\n\t//\n\tif ( b.graveyardPosition ) {\n\t\tconst movesGraveyardElement = moveRange.start.isEqual( b.graveyardPosition ) || moveRange.containsPosition( b.graveyardPosition );\n\n\t\tif ( a.howMany > 1 && movesGraveyardElement && !context.aWasUndone ) {\n\t\t\tranges.push( Range._createFromPositionAndShift( b.insertionPosition, 1 ) );\n\t\t}\n\t}\n\n\treturn _makeMoveOperationsFromRanges( ranges, newTargetPosition );\n} );\n\nsetTransformation( MoveOperation, MergeOperation, ( a, b, context ) => {\n\tconst movedRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\n\tif ( b.deletionPosition.hasSameParentAs( a.sourcePosition ) && movedRange.containsPosition( b.sourcePosition ) ) {\n\t\tif ( a.type == 'remove' && !context.forceWeakRemove ) {\n\t\t\t// Case 1:\n\t\t\t//\n\t\t\t// The element to remove got merged.\n\t\t\t//\n\t\t\t// Merge operation does support merging elements which are not siblings. So it would not be a problem\n\t\t\t// from technical point of view. However, if the element was removed, the intention of the user\n\t\t\t// deleting it was to have it all deleted. From user experience point of view, moving back the\n\t\t\t// removed nodes might be unexpected. This means that in this scenario we will reverse merging and remove the element.\n\t\t\t//\n\t\t\tif ( !context.aWasUndone ) {\n\t\t\t\tconst results = [];\n\n\t\t\t\tlet gyMoveSource = b.graveyardPosition.clone();\n\t\t\t\tlet splitNodesMoveSource = b.targetPosition._getTransformedByMergeOperation( b );\n\n\t\t\t\tif ( a.howMany > 1 ) {\n\t\t\t\t\tresults.push( new MoveOperation( a.sourcePosition, a.howMany - 1, a.targetPosition, 0 ) );\n\n\t\t\t\t\tgyMoveSource = gyMoveSource._getTransformedByMove( a.sourcePosition, a.targetPosition, a.howMany - 1 );\n\t\t\t\t\tsplitNodesMoveSource = splitNodesMoveSource._getTransformedByMove( a.sourcePosition, a.targetPosition, a.howMany - 1 );\n\t\t\t\t}\n\n\t\t\t\tconst gyMoveTarget = b.deletionPosition._getCombined( a.sourcePosition, a.targetPosition );\n\t\t\t\tconst gyMove = new MoveOperation( gyMoveSource, 1, gyMoveTarget, 0 );\n\n\t\t\t\tconst splitNodesMoveTargetPath = gyMove.getMovedRangeStart().path.slice();\n\t\t\t\tsplitNodesMoveTargetPath.push( 0 );\n\n\t\t\t\tconst splitNodesMoveTarget = new Position( gyMove.targetPosition.root, splitNodesMoveTargetPath );\n\t\t\t\tsplitNodesMoveSource = splitNodesMoveSource._getTransformedByMove( gyMoveSource, gyMoveTarget, 1 );\n\t\t\t\tconst splitNodesMove = new MoveOperation( splitNodesMoveSource, b.howMany, splitNodesMoveTarget, 0 );\n\n\t\t\t\tresults.push( gyMove );\n\t\t\t\tresults.push( splitNodesMove );\n\n\t\t\t\treturn results;\n\t\t\t}\n\t\t} else {\n\t\t\t// Case 2:\n\t\t\t//\n\t\t\t// The element to move got merged and it was the only element to move.\n\t\t\t// In this case just don't do anything, leave the node in the graveyard. Without special case\n\t\t\t// it would be a move operation that moves 0 nodes, so maybe it is better just to return no-op.\n\t\t\t//\n\t\t\tif ( a.howMany == 1 ) {\n\t\t\t\tif ( !context.bWasUndone ) {\n\t\t\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t\t\t} else {\n\t\t\t\t\ta.sourcePosition = b.graveyardPosition.clone();\n\t\t\t\t\ta.targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\t\t\t\t\treturn [ a ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tconst moveRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\tconst transformed = moveRange._getTransformedByMergeOperation( b );\n\n\ta.sourcePosition = transformed.start;\n\ta.howMany = transformed.end.offset - transformed.start.offset;\n\ta.targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( RenameOperation, InsertOperation, ( a, b ) => {\n\ta.position = a.position._getTransformedByInsertOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, MergeOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// Element to rename got merged, so it was moved to `b.graveyardPosition`.\n\t//\n\tif ( a.position.isEqual( b.deletionPosition ) ) {\n\t\ta.position = b.graveyardPosition.clone();\n\t\ta.position.stickiness = 'toNext';\n\n\t\treturn [ a ];\n\t}\n\n\ta.position = a.position._getTransformedByMergeOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, MoveOperation, ( a, b ) => {\n\ta.position = a.position._getTransformedByMoveOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, RenameOperation, ( a, b, context ) => {\n\tif ( a.position.isEqual( b.position ) ) {\n\t\tif ( context.aIsStrong ) {\n\t\t\ta.oldName = b.newName;\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, SplitOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// The element to rename has been split. In this case, the new element should be also renamed.\n\t//\n\t// User decides to change the paragraph to a list item:\n\t// <paragraph>Foobar</paragraph>\n\t//\n\t// However, in meantime, split happens:\n\t// <paragraph>Foo</paragraph><paragraph>bar</paragraph>\n\t//\n\t// As a result, rename both elements:\n\t// <listItem>Foo</listItem><listItem>bar</listItem>\n\t//\n\tconst renamePath = a.position.path;\n\tconst splitPath = b.splitPosition.getParentPath();\n\n\tif ( compareArrays( renamePath, splitPath ) == 'same' && !b.graveyardPosition ) {\n\t\tconst extraRename = new RenameOperation( a.position.getShiftedBy( 1 ), a.oldName, a.newName, 0 );\n\n\t\treturn [ a, extraRename ];\n\t}\n\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( RootAttributeOperation, RootAttributeOperation, ( a, b, context ) => {\n\tif ( a.root === b.root && a.key === b.key ) {\n\t\tif ( !context.aIsStrong || a.newValue === b.newValue ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t} else {\n\t\t\ta.oldValue = b.newValue;\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( SplitOperation, InsertOperation, ( a, b ) => {\n\t// The default case.\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.position ) && a.splitPosition.offset < b.position.offset ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.splitPosition = a.splitPosition._getTransformedByInsertOperation( b );\n\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\treturn [ a ];\n} );\n\nsetTransformation( SplitOperation, MergeOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Split element got merged. If two different elements were merged, clients will have different content.\n\t//\n\t// Example. Merge at `{}`, split at `[]`:\n\t// <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n\t//\n\t// On merge side it will look like this:\n\t// <heading>FooB[]ar</heading>\n\t// <heading>FooB</heading><heading>ar</heading>\n\t//\n\t// On split side it will look like this:\n\t// <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n\t// <heading>FooB</heading><paragraph>ar</paragraph>\n\t//\n\t// Clearly, the second element is different for both clients.\n\t//\n\t// We could use the removed merge element from graveyard as a split element but then clients would have a different\n\t// model state (in graveyard), because the split side client would still have an element in graveyard (removed by merge).\n\t//\n\t// To overcome this, in `SplitOperation` x `MergeOperation` transformation we will add additional `SplitOperation`\n\t// in the graveyard, which will actually clone the merged-and-deleted element. Then, that cloned element will be\n\t// used for splitting. Example below.\n\t//\n\t// Original state:\n\t// <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n\t//\n\t// Merge side client:\n\t//\n\t// After merge:\n\t// <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph>\n\t//\n\t// Extra split:\n\t// <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph><paragraph></paragraph>\n\t//\n\t// Use the \"cloned\" element from graveyard:\n\t// <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n\t//\n\t// Split side client:\n\t//\n\t// After split:\n\t// <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n\t//\n\t// After merge:\n\t// <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n\t//\n\t// This special case scenario only applies if the original split operation clones the split element.\n\t// If the original split operation has `graveyardPosition` set, it all doesn't have sense because split operation\n\t// knows exactly which element it should use. So there would be no original problem with different contents.\n\t//\n\t// Additionally, the special case applies only if the merge wasn't already undone.\n\t//\n\tif ( !a.graveyardPosition && !context.bWasUndone && a.splitPosition.hasSameParentAs( b.sourcePosition ) ) {\n\t\tconst splitPath = b.graveyardPosition.path.slice();\n\t\tsplitPath.push( 0 );\n\n\t\tconst splitPosition = new Position( b.graveyardPosition.root, splitPath );\n\t\tconst insertionPosition = SplitOperation.getInsertionPosition( new Position( b.graveyardPosition.root, splitPath ) );\n\n\t\tconst additionalSplit = new SplitOperation( splitPosition, 0, null, 0 );\n\t\tadditionalSplit.insertionPosition = insertionPosition;\n\n\t\ta.splitPosition = a.splitPosition._getTransformedByMergeOperation( b );\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\t\ta.graveyardPosition = additionalSplit.insertionPosition.clone();\n\t\ta.graveyardPosition.stickiness = 'toNext';\n\n\t\treturn [ additionalSplit, a ];\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.deletionPosition ) && !a.splitPosition.isAfter( b.deletionPosition ) ) {\n\t\ta.howMany--;\n\t}\n\n\tif ( a.splitPosition.hasSameParentAs( b.targetPosition ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.splitPosition = a.splitPosition._getTransformedByMergeOperation( b );\n\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\tif ( a.graveyardPosition ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( SplitOperation, MoveOperation, ( a, b, context ) => {\n\tconst rangeToMove = Range._createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\tif ( a.graveyardPosition ) {\n\t\t// Case 1:\n\t\t//\n\t\t// Split operation graveyard node was moved. In this case move operation is stronger. Since graveyard element\n\t\t// is already moved to the correct position, we need to only move the nodes after the split position.\n\t\t// This will be done by `MoveOperation` instead of `SplitOperation`.\n\t\t//\n\t\tconst gyElementMoved = rangeToMove.start.isEqual( a.graveyardPosition ) || rangeToMove.containsPosition( a.graveyardPosition );\n\n\t\tif ( !context.bWasUndone && gyElementMoved ) {\n\t\t\tconst sourcePosition = a.splitPosition._getTransformedByMoveOperation( b );\n\n\t\t\tconst newParentPosition = a.graveyardPosition._getTransformedByMoveOperation( b );\n\t\t\tconst newTargetPath = newParentPosition.path.slice();\n\t\t\tnewTargetPath.push( 0 );\n\n\t\t\tconst newTargetPosition = new Position( newParentPosition.root, newTargetPath );\n\t\t\tconst moveOp = new MoveOperation( sourcePosition, a.howMany, newTargetPosition, 0 );\n\n\t\t\treturn [ moveOp ];\n\t\t}\n\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation( b );\n\t}\n\n\t// Case 2:\n\t//\n\t// If the split position is inside the moved range, we need to shift the split position to a proper place.\n\t// The position cannot be moved together with moved range because that would result in splitting of an incorrect element.\n\t//\n\t// Characters `bc` should be moved to the second paragraph while split position is between them:\n\t// <paragraph>A[b|c]d</paragraph><paragraph>Xyz</paragraph>\n\t//\n\t// After move, new split position is incorrect:\n\t// <paragraph>Ad</paragraph><paragraph>Xb|cyz</paragraph>\n\t//\n\t// Correct split position:\n\t// <paragraph>A|d</paragraph><paragraph>Xbcyz</paragraph>\n\t//\n\t// After split:\n\t// <paragraph>A</paragraph><paragraph>d</paragraph><paragraph>Xbcyz</paragraph>\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.sourcePosition ) && rangeToMove.containsPosition( a.splitPosition ) ) {\n\t\tconst howManyRemoved = b.howMany - ( a.splitPosition.offset - b.sourcePosition.offset );\n\t\ta.howMany -= howManyRemoved;\n\n\t\tif ( a.splitPosition.hasSameParentAs( b.targetPosition ) && a.splitPosition.offset < b.targetPosition.offset ) {\n\t\t\ta.howMany += b.howMany;\n\t\t}\n\n\t\ta.splitPosition = b.sourcePosition.clone();\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 3:\n\t//\n\t// Split is at a position where nodes were moved.\n\t//\n\t// This is a scenario described in `MoveOperation` x `SplitOperation` transformation but from the\n\t// \"split operation point of view\".\n\t//\n\tconst splitAtTarget = a.splitPosition.isEqual( b.targetPosition );\n\n\tif ( splitAtTarget && ( context.baRelation == 'insertAtSource' || context.abRelation == 'splitBefore' ) ) {\n\t\ta.howMany += b.howMany;\n\t\ta.splitPosition = a.splitPosition._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\t\treturn [ a ];\n\t}\n\n\t// The default case.\n\t// Don't change `howMany` if move operation does not really move anything.\n\t//\n\tif ( !b.sourcePosition.isEqual( b.targetPosition ) ) {\n\t\tif ( a.splitPosition.hasSameParentAs( b.sourcePosition ) && a.splitPosition.offset <= b.sourcePosition.offset ) {\n\t\t\ta.howMany -= b.howMany;\n\t\t}\n\n\t\tif ( a.splitPosition.hasSameParentAs( b.targetPosition ) && a.splitPosition.offset < b.targetPosition.offset ) {\n\t\t\ta.howMany += b.howMany;\n\t\t}\n\t}\n\n\t// Change position stickiness to force a correct transformation.\n\ta.splitPosition.stickiness = 'toNone';\n\ta.splitPosition = a.splitPosition._getTransformedByMoveOperation( b );\n\ta.splitPosition.stickiness = 'toNext';\n\n\tif ( a.graveyardPosition ) {\n\t\ta.insertionPosition = a.insertionPosition._getTransformedByMoveOperation( b );\n\t} else {\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( SplitOperation, SplitOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Split at the same position.\n\t//\n\t// If there already was a split at the same position as in `a` operation, it means that the intention\n\t// conveyed by `a` operation has already been fulfilled and `a` should not do anything (to avoid double split).\n\t//\n\t// However, there is a difference if these are new splits or splits created by undo. These have different\n\t// intentions. Also splits moving back different elements from graveyard have different intentions. They\n\t// are just different operations.\n\t//\n\t// So we cancel split operation only if it was really identical.\n\t//\n\t// Also, there is additional case, where split operations aren't identical and should not be cancelled, however the\n\t// default transformation is incorrect too.\n\t//\n\tif ( a.splitPosition.isEqual( b.splitPosition ) ) {\n\t\tif ( !a.graveyardPosition && !b.graveyardPosition ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\n\t\tif ( a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual( b.graveyardPosition ) ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\n\t\t// Use context to know that the `a.splitPosition` should stay where it is.\n\t\t// This happens during undo when first a merge operation moved nodes to `a.splitPosition` and now `b` operation undoes that merge.\n\t\tif ( context.abRelation == 'splitBefore' ) {\n\t\t\t// Since split is at the same position, there are no nodes left to split.\n\t\t\ta.howMany = 0;\n\n\t\t\t// Note: there was `if ( a.graveyardPosition )` here but it was uncovered in tests and I couldn't find any scenarios for now.\n\t\t\t// That would have to be a `SplitOperation` that didn't come from undo but is transformed by operations that were undone.\n\t\t\t// It could happen if `context` is enabled in collaboration.\n\t\t\ta.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// Case 2:\n\t//\n\t// Same node is using to split different elements. This happens in undo when previously same element was merged to\n\t// two different elements. This is described in `MergeOperation` x `MergeOperation` transformation.\n\t//\n\t// In this case we will follow the same logic. We will assume that `insertionPosition` is same for both\n\t// split operations. This might not always be true but in the real cases that were experienced it was. After all,\n\t// if these splits are reverses of merge operations that were merging the same element, then the `insertionPosition`\n\t// should be same for both of those splits.\n\t//\n\t// Again, we will decide which operation is stronger by checking if split happens in graveyard or in non-graveyard root.\n\t//\n\tif ( a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual( b.graveyardPosition ) ) {\n\t\tconst aInGraveyard = a.splitPosition.root.rootName == '$graveyard';\n\t\tconst bInGraveyard = b.splitPosition.root.rootName == '$graveyard';\n\n\t\t// If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n\t\tconst aIsWeak = aInGraveyard && !bInGraveyard;\n\n\t\t// If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n\t\tconst bIsWeak = bInGraveyard && !aInGraveyard;\n\n\t\t// Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n\t\tconst forceMove = bIsWeak || ( !aIsWeak && context.aIsStrong );\n\n\t\tif ( forceMove ) {\n\t\t\tconst result = [];\n\n\t\t\t// First we need to move any nodes split by `b` back to where they were.\n\t\t\t// Do it only if `b` actually moved something.\n\t\t\tif ( b.howMany ) {\n\t\t\t\tresult.push( new MoveOperation( b.moveTargetPosition, b.howMany, b.splitPosition, 0 ) );\n\t\t\t}\n\n\t\t\t// Then we need to move nodes from `a` split position to their new element.\n\t\t\t// Do it only if `a` actually should move something.\n\t\t\tif ( a.howMany ) {\n\t\t\t\tresult.push( new MoveOperation( a.splitPosition, a.howMany, a.moveTargetPosition, 0 ) );\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\tif ( a.graveyardPosition ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation( b );\n\t}\n\n\t// Case 3:\n\t//\n\t// Position where operation `b` inserted a new node after split is the same as the operation `a` split position.\n\t// As in similar cases, there is ambiguity if the split should be before the new node (created by `b`) or after.\n\t//\n\tif ( a.splitPosition.isEqual( b.insertionPosition ) && context.abRelation == 'splitBefore' ) {\n\t\ta.howMany++;\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 4:\n\t//\n\t// This is a mirror to the case 2. above.\n\t//\n\tif ( b.splitPosition.isEqual( a.insertionPosition ) && context.baRelation == 'splitBefore' ) {\n\t\tconst newPositionPath = b.insertionPosition.path.slice();\n\t\tnewPositionPath.push( 0 );\n\n\t\tconst newPosition = new Position( b.insertionPosition.root, newPositionPath );\n\t\tconst moveOp = new MoveOperation( a.insertionPosition, 1, newPosition, 0 );\n\n\t\treturn [ a, moveOp ];\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.splitPosition ) && a.splitPosition.offset < b.splitPosition.offset ) {\n\t\ta.howMany -= b.howMany;\n\t}\n\n\ta.splitPosition = a.splitPosition._getTransformedBySplitOperation( b );\n\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\treturn [ a ];\n} );\n\n// Checks whether `MoveOperation` `targetPosition` is inside a node from the moved range of the other `MoveOperation`.\n//\n// @private\n// @param {module:engine/model/operation/moveoperation~MoveOperation} a\n// @param {module:engine/model/operation/moveoperation~MoveOperation} b\n// @returns {Boolean}\nfunction _moveTargetIntoMovedRange( a, b ) {\n\treturn a.targetPosition._getTransformedByDeletion( b.sourcePosition, b.howMany ) === null;\n}\n\n// Helper function for `MoveOperation` x `MoveOperation` transformation. Converts given ranges and target position to\n// move operations and returns them.\n//\n// Ranges and target position will be transformed on-the-fly when generating operations.\n//\n// Given `ranges` should be in the order of how they were in the original transformed operation.\n//\n// Given `targetPosition` is the target position of the first range from `ranges`.\n//\n// @private\n// @param {Array.<module:engine/model/range~Range>} ranges\n// @param {module:engine/model/position~Position} targetPosition\n// @returns {Array.<module:engine/model/operation/moveoperation~MoveOperation>}\nfunction _makeMoveOperationsFromRanges( ranges, targetPosition ) {\n\t// At this moment we have some ranges and a target position, to which those ranges should be moved.\n\t// Order in `ranges` array is the go-to order of after transformation.\n\t//\n\t// We are almost done. We have `ranges` and `targetPosition` to make operations from.\n\t// Unfortunately, those operations may affect each other. Precisely, first operation after move\n\t// may affect source range and target position of second and third operation. Same with second\n\t// operation affecting third.\n\t//\n\t// We need to fix those source ranges and target positions once again, before converting `ranges` to operations.\n\tconst operations = [];\n\n\t// Keep in mind that nothing will be transformed if there is just one range in `ranges`.\n\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t// Create new operation out of a range and target position.\n\t\tconst range = ranges[ i ];\n\t\tconst op = new MoveOperation(\n\t\t\trange.start,\n\t\t\trange.end.offset - range.start.offset,\n\t\t\ttargetPosition,\n\t\t\t0\n\t\t);\n\n\t\toperations.push( op );\n\n\t\t// Transform other ranges by the generated operation.\n\t\tfor ( let j = i + 1; j < ranges.length; j++ ) {\n\t\t\t// All ranges in `ranges` array should be:\n\t\t\t//\n\t\t\t// * non-intersecting (these are part of original operation source range), and\n\t\t\t// * `targetPosition` does not target into them (opposite would mean that transformed operation targets \"inside itself\").\n\t\t\t//\n\t\t\t// This means that the transformation will be \"clean\" and always return one result.\n\t\t\tranges[ j ] = ranges[ j ]._getTransformedByMove( op.sourcePosition, op.targetPosition, op.howMany )[ 0 ];\n\t\t}\n\n\t\ttargetPosition = targetPosition._getTransformedByMove( op.sourcePosition, op.targetPosition, op.howMany );\n\t}\n\n\treturn operations;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/basecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { transformSets } from '@ckeditor/ckeditor5-engine/src/model/operation/transform';\n\n/**\n * Base class for undo feature commands: {@link module:undo/undocommand~UndoCommand} and {@link module:undo/redocommand~RedoCommand}.\n *\n * @protected\n * @extends module:core/command~Command\n */\nexport default class BaseCommand extends Command {\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Stack of items stored by the command. These are pairs of:\n\t\t *\n\t\t * * {@link module:engine/model/batch~Batch batch} saved by the command,\n\t\t * * {@link module:engine/model/selection~Selection selection} state at the moment of saving the batch.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array} #_stack\n\t\t */\n\t\tthis._stack = [];\n\n\t\t/**\n\t\t * Stores all batches that were created by this command.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakSet.<module:engine/model/batch~Batch>} #_createdBatches\n\t\t */\n\t\tthis._createdBatches = new WeakSet();\n\n\t\t// Refresh state, so the command is inactive right after initialization.\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._stack.length > 0;\n\t}\n\n\t/**\n\t * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}\n\t * created by the editor which this command is registered to.\n\t *\n\t * @param {module:engine/model/batch~Batch} batch The batch to add.\n\t */\n\taddBatch( batch ) {\n\t\tconst docSelection = this.editor.model.document.selection;\n\n\t\tconst selection = {\n\t\t\tranges: docSelection.hasOwnRange ? Array.from( docSelection.getRanges() ) : [],\n\t\t\tisBackward: docSelection.isBackward\n\t\t};\n\n\t\tthis._stack.push( { batch, selection } );\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * Removes all items from the stack.\n\t */\n\tclearStack() {\n\t\tthis._stack = [];\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.\n\t *\n\t * @protected\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be restored.\n\t * @param {Boolean} isBackward A flag describing whether the restored range was selected forward or backward.\n\t * @param {Array.<module:engine/model/operation/operation~Operation>} operations Operations which has been applied\n\t * since selection has been stored.\n\t */\n\t_restoreSelection( ranges, isBackward, operations ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// This will keep the transformed selection ranges.\n\t\tconst selectionRanges = [];\n\n\t\t// Transform all ranges from the restored selection.\n\t\tfor ( const range of ranges ) {\n\t\t\tconst transformed = transformSelectionRange( range, operations );\n\n\t\t\t// For each `range` from `ranges`, we take only one transformed range.\n\t\t\t// This is because we want to prevent situation where single-range selection\n\t\t\t// got transformed to multi-range selection. We will take the first range that\n\t\t\t// is not in the graveyard.\n\t\t\tconst newRange = transformed.find(\n\t\t\t\trange => range.start.root != document.graveyard\n\t\t\t);\n\n\t\t\t// `transformedRange` might be `undefined` if transformed range ended up in graveyard.\n\t\t\tif ( newRange ) {\n\t\t\t\tselectionRanges.push( newRange );\n\t\t\t}\n\t\t}\n\n\t\t// `selectionRanges` may be empty if all ranges ended up in graveyard. If that is the case, do not restore selection.\n\t\tif ( selectionRanges.length ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( selectionRanges, { backward: isBackward } );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.\n\t * This is a helper method for {@link #execute}.\n\t *\n\t * @protected\n\t * @param {module:engine/model/batch~Batch} batchToUndo The batch to be undone.\n\t * @param {module:engine/model/batch~Batch} undoingBatch The batch that will contain undoing changes.\n\t */\n\t_undo( batchToUndo, undoingBatch ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// All changes done by the command execution will be saved as one batch.\n\t\tthis._createdBatches.add( undoingBatch );\n\n\t\tconst operationsToUndo = batchToUndo.operations.slice().filter( operation => operation.isDocumentOperation );\n\t\toperationsToUndo.reverse();\n\n\t\t// We will process each operation from `batchToUndo`, in reverse order. If there were operations A, B and C in undone batch,\n\t\t// we need to revert them in reverse order, so first C' (reversed C), then B', then A'.\n\t\tfor ( const operationToUndo of operationsToUndo ) {\n\t\t\tconst nextBaseVersion = operationToUndo.baseVersion + 1;\n\t\t\tconst historyOperations = Array.from( document.history.getOperations( nextBaseVersion ) );\n\n\t\t\tconst transformedSets = transformSets(\n\t\t\t\t[ operationToUndo.getReversed() ],\n\t\t\t\thistoryOperations,\n\t\t\t\t{\n\t\t\t\t\tuseRelations: true,\n\t\t\t\t\tdocument: this.editor.model.document,\n\t\t\t\t\tpadWithNoOps: false,\n\t\t\t\t\tforceWeakRemove: true\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst reversedOperations = transformedSets.operationsA;\n\n\t\t\t// After reversed operation has been transformed by all history operations, apply it.\n\t\t\tfor ( const operation of reversedOperations ) {\n\t\t\t\t// Before applying, add the operation to the `undoingBatch`.\n\t\t\t\tundoingBatch.addOperation( operation );\n\t\t\t\tmodel.applyOperation( operation );\n\n\t\t\t\tdocument.history.setOperationAsUndone( operationToUndo, operation );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Transforms given range `range` by given `operations`.\n// Returns an array containing one or more ranges, which are result of the transformation.\nfunction transformSelectionRange( range, operations ) {\n\tconst transformed = range.getTransformedByOperations( operations );\n\n\t// After `range` got transformed, we have an array of ranges. Some of those\n\t// ranges may be \"touching\" -- they can be next to each other and could be merged.\n\t// First, we have to sort those ranges to assure that they are in order.\n\ttransformed.sort( ( a, b ) => a.start.isBefore( b.start ) ? -1 : 1 );\n\n\t// Then, we check if two consecutive ranges are touching.\n\tfor ( let i = 1; i < transformed.length; i++ ) {\n\t\tconst a = transformed[ i - 1 ];\n\t\tconst b = transformed[ i ];\n\n\t\tif ( a.end.isTouching( b.start ) ) {\n\t\t\t// And join them together if they are.\n\t\t\ta.end = b.end;\n\t\t\ttransformed.splice( i, 1 );\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn transformed;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undocommand\n */\n\nimport BaseCommand from './basecommand';\n\n/**\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\n *\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\nexport default class UndoCommand extends BaseCommand {\n\t/**\n\t * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\n\t * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t * @fires revert\n\t * @param {module:engine/model/batch~Batch} [batch] A batch that should be undone. If not set, the last added batch will be undone.\n\t */\n\texecute( batch = null ) {\n\t\t// If batch is not given, set `batchIndex` to the last index in command stack.\n\t\tconst batchIndex = batch ? this._stack.findIndex( a => a.batch == batch ) : this._stack.length - 1;\n\n\t\tconst item = this._stack.splice( batchIndex, 1 )[ 0 ];\n\t\tconst undoingBatch = this.editor.model.createBatch( 'transparent' );\n\n\t\t// All changes has to be done in one `enqueueChange` callback so other listeners will not\n\t\t// step between consecutive operations, or won't do changes to the document before selection is properly restored.\n\t\tthis.editor.model.enqueueChange( undoingBatch, () => {\n\t\t\tthis._undo( item.batch, undoingBatch );\n\n\t\t\tconst operations = this.editor.model.document.history.getOperations( item.batch.baseVersion );\n\t\t\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, operations );\n\n\t\t\tthis.fire( 'revert', item.batch, undoingBatch );\n\t\t} );\n\n\t\tthis.refresh();\n\t}\n}\n\n/**\n * Fired when execution of the command reverts some batch.\n *\n * @event revert\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/redocommand\n */\n\nimport BaseCommand from './basecommand';\n\n/**\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\n *\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\nexport default class RedoCommand extends BaseCommand {\n\t/**\n\t * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\n\t * the command's stack, applies the reverted and transformed version on the\n\t * {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst item = this._stack.pop();\n\t\tconst redoingBatch = this.editor.model.createBatch( 'transparent' );\n\n\t\t// All changes have to be done in one `enqueueChange` callback so other listeners will not step between consecutive\n\t\t// operations, or won't do changes to the document before selection is properly restored.\n\t\tthis.editor.model.enqueueChange( redoingBatch, () => {\n\t\t\tconst lastOperation = item.batch.operations[ item.batch.operations.length - 1 ];\n\t\t\tconst nextBaseVersion = lastOperation.baseVersion + 1;\n\t\t\tconst operations = this.editor.model.document.history.getOperations( nextBaseVersion );\n\n\t\t\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, operations );\n\t\t\tthis._undo( item.batch, redoingBatch );\n\t\t} );\n\n\t\tthis.refresh();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undoediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoCommand from './undocommand';\nimport RedoCommand from './redocommand';\n\n/**\n * The undo engine feature.\n *\n * It introduces the `'undo'` and `'redo'` commands to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UndoEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'UndoEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The command that manages undo {@link module:engine/model/batch~Batch batches} stack (history).\n\t\t * Created and registered during the {@link #init feature initialization}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:undo/undocommand~UndoCommand} #_undoCommand\n\t\t */\n\n\t\t/**\n\t\t * The command that manages redo {@link module:engine/model/batch~Batch batches} stack (history).\n\t\t * Created and registered during the {@link #init feature initialization}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:undo/undocommand~UndoCommand} #_redoCommand\n\t\t */\n\n\t\t/**\n\t\t * Keeps track of which batches were registered in undo.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakSet.<module:engine/model/batch~Batch>}\n\t\t */\n\t\tthis._batchRegistry = new WeakSet();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Create commands.\n\t\tthis._undoCommand = new UndoCommand( editor );\n\t\tthis._redoCommand = new RedoCommand( editor );\n\n\t\t// Register command to the editor.\n\t\teditor.commands.add( 'undo', this._undoCommand );\n\t\teditor.commands.add( 'redo', this._redoCommand );\n\n\t\tthis.listenTo( editor.model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\t// Do not register batch if the operation is not a document operation.\n\t\t\t// This prevents from creating empty undo steps, where all operations where non-document operations.\n\t\t\t// Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n\t\t\t// Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n\t\t\t// Such operations should not be reversed.\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst batch = operation.batch;\n\n\t\t\tconst isRedoBatch = this._redoCommand._createdBatches.has( batch );\n\t\t\tconst isUndoBatch = this._undoCommand._createdBatches.has( batch );\n\t\t\tconst isRegisteredBatch = this._batchRegistry.has( batch );\n\n\t\t\t// If changes are not a part of a batch or this is not a new batch, omit those changes.\n\t\t\tif ( isRegisteredBatch || ( batch.type == 'transparent' && !isRedoBatch && !isUndoBatch ) ) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tif ( isRedoBatch ) {\n\t\t\t\t\t// If this batch comes from `redoCommand`, add it to `undoCommand` stack.\n\t\t\t\t\tthis._undoCommand.addBatch( batch );\n\t\t\t\t} else if ( !isUndoBatch ) {\n\t\t\t\t\t// A default batch - these are new changes in the document, not introduced by undo feature.\n\t\t\t\t\t// Add them to `undoCommand` stack and clear `redoCommand` stack.\n\t\t\t\t\tthis._undoCommand.addBatch( batch );\n\t\t\t\t\tthis._redoCommand.clearStack();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the batch to the registry so it will not be processed again.\n\t\t\tthis._batchRegistry.add( batch );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( this._undoCommand, 'revert', ( evt, undoneBatch, undoingBatch ) => {\n\t\t\tthis._redoCommand.addBatch( undoingBatch );\n\t\t} );\n\n\t\teditor.keystrokes.set( 'CTRL+Z', 'undo' );\n\t\teditor.keystrokes.set( 'CTRL+Y', 'redo' );\n\t\teditor.keystrokes.set( 'CTRL+SHIFT+Z', 'redo' );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/entercommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { getCopyOnEnterAttributes } from './utils';\n\n/**\n * Enter command. It is used by the {@link module:enter/enter~Enter Enter feature} to handle the <kbd>Enter</kbd> key.\n *\n * @extends module:core/command~Command\n */\nexport default class EnterCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tenterBlock( this.editor.model, writer, doc.selection, model.schema );\n\t\t\tthis.fire( 'afterExecute', { writer } );\n\t\t} );\n\t}\n}\n\n// Creates a new block in the way that the <kbd>Enter</kbd> key is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// Selection on which the action should be performed.\n// @param {module:engine/model/schema~Schema} schema\nfunction enterBlock( model, writer, selection, schema ) {\n\tconst isSelectionEmpty = selection.isCollapsed;\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\n\t// Don't touch the roots and other limit elements.\n\tif ( schema.isLimit( startElement ) || schema.isLimit( endElement ) ) {\n\t\t// Delete the selected content but only if inside a single limit element.\n\t\t// Abort, when crossing limit elements boundary (e.g. <limit1>x[x</limit1>donttouchme<limit2>y]y</limit2>).\n\t\t// This is an edge case and it's hard to tell what should actually happen because such a selection\n\t\t// is not entirely valid.\n\t\tif ( !isSelectionEmpty && startElement == endElement ) {\n\t\t\tmodel.deleteContent( selection );\n\t\t}\n\n\t\treturn;\n\t}\n\n\tif ( isSelectionEmpty ) {\n\t\tconst attributesToCopy = getCopyOnEnterAttributes( writer.model.schema, selection.getAttributes() );\n\t\tsplitBlock( writer, range.start );\n\t\twriter.setSelectionAttribute( attributesToCopy );\n\t} else {\n\t\tconst leaveUnmerged = !( range.start.isAtStart && range.end.isAtEnd );\n\t\tconst isContainedWithinOneElement = ( startElement == endElement );\n\n\t\tmodel.deleteContent( selection, { leaveUnmerged } );\n\n\t\tif ( leaveUnmerged ) {\n\t\t\t// Partially selected elements.\n\t\t\t//\n\t\t\t// <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x</h><h>^x</h>\n\t\t\tif ( isContainedWithinOneElement ) {\n\t\t\t\tsplitBlock( writer, selection.focus );\n\t\t\t}\n\t\t\t// Selection over multiple elements.\n\t\t\t//\n\t\t\t// <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n\t\t\telse {\n\t\t\t\twriter.setSelection( endElement, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction splitBlock( writer, splitPos ) {\n\twriter.split( splitPos );\n\twriter.setSelection( splitPos.parent.nextSibling, 0 );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/enter\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport EnterCommand from './entercommand';\nimport EnterObserver from './enterobserver';\n\n/**\n * This plugin handles the <kbd>Enter</kbd> key (hard line break) in the editor.\n *\n * See also the {@link module:enter/shiftenter~ShiftEnter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Enter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Enter';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tview.addObserver( EnterObserver );\n\n\t\teditor.commands.add( 'enter', new EnterCommand( editor ) );\n\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tdata.preventDefault();\n\n\t\t\t// The soft enter key is handled by the ShiftEnter plugin.\n\t\t\tif ( data.isSoft ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.execute( 'enter' );\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/enabletoolbarkeyboardfocus\n */\n\n/**\n * Enables focus/blur toolbar navigation using `Alt+F10` and `Esc` keystrokes.\n *\n * @param {Object} options Options of the utility.\n * @param {*} options.origin A view to which the focus will return when `Esc` is pressed and\n * `options.toolbar` is focused.\n * @param {module:utils/keystrokehandler~KeystrokeHandler} options.originKeystrokeHandler A keystroke\n * handler to register `Alt+F10` keystroke.\n * @param {module:utils/focustracker~FocusTracker} options.originFocusTracker A focus tracker\n * for `options.origin`.\n * @param {module:ui/toolbar/toolbarview~ToolbarView} options.toolbar A toolbar which is to gain\n * focus when `Alt+F10` is pressed.\n * @param {Function} [options.beforeFocus] A callback executed before the `options.toolbar` gains focus\n * upon the `Alt+F10` keystroke.\n * @param {Function} [options.afterBlur] A callback executed after `options.toolbar` loses focus upon\n * `Esc` keystroke but before the focus goes back to `options.origin`.\n */\nexport default function enableToolbarKeyboardFocus( {\n\torigin,\n\toriginKeystrokeHandler,\n\toriginFocusTracker,\n\ttoolbar,\n\tbeforeFocus,\n\tafterBlur\n} ) {\n\t// Because toolbar items can get focus, the overall state of the toolbar must\n\t// also be tracked.\n\toriginFocusTracker.add( toolbar.element );\n\n\t// Focus the toolbar on the keystroke, if not already focused.\n\toriginKeystrokeHandler.set( 'Alt+F10', ( data, cancel ) => {\n\t\tif ( originFocusTracker.isFocused && !toolbar.focusTracker.isFocused ) {\n\t\t\tif ( beforeFocus ) {\n\t\t\t\tbeforeFocus();\n\t\t\t}\n\n\t\t\ttoolbar.focus();\n\n\t\t\tcancel();\n\t\t}\n\t} );\n\n\t// Blur the toolbar and bring the focus back to origin.\n\ttoolbar.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\tif ( toolbar.focusTracker.isFocused ) {\n\t\t\torigin.focus();\n\n\t\t\tif ( afterBlur ) {\n\t\t\t\tafterBlur();\n\t\t\t}\n\n\t\t\tcancel();\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/normalizetoolbarconfig\n */\n\n/**\n * Normalizes the toolbar configuration (`config.toolbar`), which:\n *\n * * may be defined as an `Array`:\n *\n * \t\ttoolbar: [ 'heading', 'bold', 'italic', 'link', ... ]\n *\n * * or an `Object`:\n *\n *\t\ttoolbar: {\n *\t\t\titems: [ 'heading', 'bold', 'italic', 'link', ... ],\n *\t\t\t...\n *\t\t}\n *\n * * or may not be defined at all (`undefined`)\n *\n * and returns it in the object form.\n *\n * @param {Array|Object|undefined} config The value of `config.toolbar`.\n * @returns {Object} A normalized toolbar config object.\n */\nexport default function normalizeToolbarConfig( config ) {\n\tif ( Array.isArray( config ) ) {\n\t\treturn {\n\t\t\titems: config\n\t\t};\n\t}\n\n\tif ( !config ) {\n\t\treturn {\n\t\t\titems: []\n\t\t};\n\t}\n\n\treturn Object.assign( {\n\t\titems: []\n\t}, config );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/shiftentercommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { getCopyOnEnterAttributes } from './utils';\n\n/**\n * ShiftEnter command. It is used by the {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature} to handle\n * the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke.\n *\n * @extends module:core/command~Command\n */\nexport default class ShiftEnterCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tsoftBreakAction( model, writer, doc.selection );\n\t\t\tthis.fire( 'afterExecute', { writer } );\n\t\t} );\n\t}\n\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.isEnabled = isEnabled( model.schema, doc.selection );\n\t}\n}\n\n// Checks whether the ShiftEnter command should be enabled in the specified selection.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\nfunction isEnabled( schema, selection ) {\n\t// At this moment it is okay to support single range selections only.\n\t// But in the future we may need to change that.\n\tif ( selection.rangeCount > 1 ) {\n\t\treturn false;\n\t}\n\n\tconst anchorPos = selection.anchor;\n\n\t// Check whether the break element can be inserted in the current selection anchor.\n\tif ( !anchorPos || !schema.checkChild( anchorPos, 'softBreak' ) ) {\n\t\treturn false;\n\t}\n\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\n\t// Do not modify the content if selection is cross-limit elements.\n\tif ( ( isInsideLimitElement( startElement, schema ) || isInsideLimitElement( endElement, schema ) ) && startElement !== endElement ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// Creates a break in the way that the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// Selection on which the action should be performed.\nfunction softBreakAction( model, writer, selection ) {\n\tconst isSelectionEmpty = selection.isCollapsed;\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\tconst isContainedWithinOneElement = ( startElement == endElement );\n\n\tif ( isSelectionEmpty ) {\n\t\tconst attributesToCopy = getCopyOnEnterAttributes( model.schema, selection.getAttributes() );\n\t\tinsertBreak( writer, range.end );\n\n\t\twriter.removeSelectionAttribute( selection.getAttributeKeys() );\n\t\twriter.setSelectionAttribute( attributesToCopy );\n\t} else {\n\t\tconst leaveUnmerged = !( range.start.isAtStart && range.end.isAtEnd );\n\t\tmodel.deleteContent( selection, { leaveUnmerged } );\n\n\t\t// Selection within one element:\n\t\t//\n\t\t// <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x<br>^x</h>\n\t\tif ( isContainedWithinOneElement ) {\n\t\t\tinsertBreak( writer, selection.focus );\n\t\t}\n\t\t// Selection over multiple elements.\n\t\t//\n\t\t// <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n\t\t//\n\t\t// We chose not to insert a line break in this case because:\n\t\t//\n\t\t// * it's not a very common scenario,\n\t\t// * it actually surprised me when I saw the \"expected behavior\" in real life.\n\t\t//\n\t\t// It's ok if the user will need to be more specific where they want the <br> to be inserted.\n\t\telse {\n\t\t\t// Move the selection to the 2nd element (last step of the example above).\n\t\t\tif ( leaveUnmerged ) {\n\t\t\t\twriter.setSelection( endElement, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction insertBreak( writer, position ) {\n\tconst breakLineElement = writer.createElement( 'softBreak' );\n\n\twriter.insert( breakLineElement, position );\n\twriter.setSelection( breakLineElement, 'after' );\n}\n\n// Checks whether the specified `element` is a child of the limit element.\n//\n// Checking whether the `<p>` element is inside a limit element:\n//   - <$root><p>Text.</p></$root> => false\n//   - <$root><limitElement><p>Text</p></limitElement></$root> => true\n//\n// @param {module:engine/model/element~Element} element\n// @param {module:engine/schema~Schema} schema\n// @returns {Boolean}\nfunction isInsideLimitElement( element, schema ) {\n\t// `$root` is a limit element but in this case is an invalid element.\n\tif ( element.is( 'rootElement' ) ) {\n\t\treturn false;\n\t}\n\n\treturn schema.isLimit( element ) || isInsideLimitElement( element.parent, schema );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/shiftenter\n */\n\nimport ShiftEnterCommand from './shiftentercommand';\nimport EnterObserver from './enterobserver';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * This plugin handles the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke (soft line break) in the editor.\n *\n * See also the {@link module:enter/enter~Enter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ShiftEnter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ShiftEnter';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t// Configure the schema.\n\t\tschema.register( 'softBreak', {\n\t\t\tallowWhere: '$text',\n\t\t\tisInline: true\n\t\t} );\n\n\t\t// Configure converters.\n\t\tconversion.for( 'upcast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'softBreak',\n\t\t\t\tview: 'br'\n\t\t\t} );\n\n\t\tconversion.for( 'downcast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'softBreak',\n\t\t\t\tview: ( modelElement, viewWriter ) => viewWriter.createEmptyElement( 'br' )\n\t\t\t} );\n\n\t\tview.addObserver( EnterObserver );\n\n\t\teditor.commands.add( 'shiftEnter', new ShiftEnterCommand( editor ) );\n\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tdata.preventDefault();\n\n\t\t\t// The hard enter key is handled by the Enter plugin.\n\t\t\tif ( !data.isSoft ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.execute( 'shiftEnter' );\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module essentials/essentials\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport Clipboard from '@ckeditor/ckeditor5-clipboard/src/clipboard';\nimport Enter from '@ckeditor/ckeditor5-enter/src/enter';\nimport ShiftEnter from '@ckeditor/ckeditor5-enter/src/shiftenter';\nimport Typing from '@ckeditor/ckeditor5-typing/src/typing';\nimport Undo from '@ckeditor/ckeditor5-undo/src/undo';\n\n/**\n * A plugin including all essential editing features. It represents a set of features that enables similar functionalities\n * to a `<textarea>` element.\n *\n * It includes:\n *\n * * {@link module:clipboard/clipboard~Clipboard},\n * * {@link module:enter/enter~Enter},\n * * {@link module:enter/shiftenter~ShiftEnter},\n * * {@link module:typing/typing~Typing},\n * * {@link module:undo/undo~Undo}.\n *\n * This plugin set does not define any block-level containers (such as {@link module:paragraph/paragraph~Paragraph}).\n * If your editor is supposed to handle block content, make sure to include it.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Essentials extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Clipboard, Enter, ShiftEnter, Typing, Undo ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Essentials';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The heading command. It is used by the {@link module:heading/heading~Heading heading feature} to apply headings.\n *\n * @extends module:core/command~Command\n */\nexport default class HeadingCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor instance.\n\t * @param {Array.<String>} modelElements Names of the element which this command can apply in the model.\n\t */\n\tconstructor( editor, modelElements ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * If the selection starts in a heading (which {@link #modelElements is supported by this command})\n\t\t * the value is set to the name of that heading model element.\n\t\t * It is  set to `false` otherwise.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean|String} #value\n\t\t */\n\n\t\t/**\n\t\t * Set of defined model's elements names that this command support.\n\t\t * See {@link module:heading/heading~HeadingOption}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>}\n\t\t */\n\t\tthis.modelElements = modelElements;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst block = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\tthis.value = !!block && this.modelElements.includes( block.name ) && block.name;\n\t\tthis.isEnabled = !!block && this.modelElements.some( heading => checkCanBecomeHeading( block, heading, this.editor.model.schema ) );\n\t}\n\n\t/**\n\t * Executes the command. Applies the heading to the selected blocks or, if the first selected\n\t * block is a heading already, turns selected headings (of this level only) to paragraphs.\n\t *\n\t * @param {Object} options\n\t * @param {String} options.value Name of the element which this command will apply in the model.\n\t * @fires execute\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tconst modelElement = options.value;\n\n\t\tmodel.change( writer => {\n\t\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t\t.filter( block => {\n\t\t\t\t\treturn checkCanBecomeHeading( block, modelElement, model.schema );\n\t\t\t\t} );\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tif ( !block.is( modelElement ) ) {\n\t\t\t\t\twriter.rename( block, modelElement );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks whether the given block can be replaced by a specific heading.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:heading/headingcommand~HeadingCommand#modelElement} heading Command element name in the model.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeHeading( block, heading, schema ) {\n\treturn schema.checkChild( block.parent, heading ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\nimport HeadingCommand from './headingcommand';\n\nimport priorities from '@ckeditor/ckeditor5-utils/src/priorities';\n\nconst defaultModelElement = 'paragraph';\n\n/**\n * The headings engine feature. It handles switching between block formats &ndash; headings and paragraph.\n * This class represents the engine part of the heading feature. See also {@link module:heading/heading~Heading}.\n * It introduces `heading1`-`headingN` commands which allow to convert paragraphs into headings.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'HeadingEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'heading', {\n\t\t\toptions: [\n\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n\t\t\t\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n\t\t\t\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n\t\t\t\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Paragraph ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst options = editor.config.get( 'heading.options' );\n\n\t\tconst modelElements = [];\n\n\t\tfor ( const option of options ) {\n\t\t\t// Skip paragraph - it is defined in required Paragraph feature.\n\t\t\tif ( option.model !== defaultModelElement ) {\n\t\t\t\t// Schema.\n\t\t\t\teditor.model.schema.register( option.model, {\n\t\t\t\t\tinheritAllFrom: '$block'\n\t\t\t\t} );\n\n\t\t\t\teditor.conversion.elementToElement( option );\n\n\t\t\t\tmodelElements.push( option.model );\n\t\t\t}\n\t\t}\n\n\t\tthis._addDefaultH1Conversion( editor );\n\n\t\t// Register the heading command for this option.\n\t\teditor.commands.add( 'heading', new HeadingCommand( editor, modelElements ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\t// If the enter command is added to the editor, alter its behavior.\n\t\t// Enter at the end of a heading element should create a paragraph.\n\t\tconst editor = this.editor;\n\t\tconst enterCommand = editor.commands.get( 'enter' );\n\t\tconst options = editor.config.get( 'heading.options' );\n\n\t\tif ( enterCommand ) {\n\t\t\tthis.listenTo( enterCommand, 'afterExecute', ( evt, data ) => {\n\t\t\t\tconst positionParent = editor.model.document.selection.getFirstPosition().parent;\n\t\t\t\tconst isHeading = options.some( option => positionParent.is( option.model ) );\n\n\t\t\t\tif ( isHeading && !positionParent.is( defaultModelElement ) && positionParent.childCount === 0 ) {\n\t\t\t\t\tdata.writer.rename( positionParent, defaultModelElement );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds default conversion for `h1` -> `heading1` with a low priority.\n\t *\n\t * @private\n\t * @param {module:core/editor/editor~Editor} editor Editor instance on which to add the `h1` conversion.\n\t */\n\t_addDefaultH1Conversion( editor ) {\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: 'heading1',\n\t\t\tview: 'h1',\n\t\t\t// With a `low` priority, `paragraph` plugin autoparagraphing mechanism is executed. Make sure\n\t\t\t// this listener is called before it. If not, `h1` will be transformed into a paragraph.\n\t\t\tconverterPriority: priorities.get( 'low' ) + 1\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport setDataInElement from '@ckeditor/ckeditor5-utils/src/dom/setdatainelement';\n\n/**\n * @module core/editor/utils/elementapimixin\n */\n\n/**\n * Implementation of the {@link module:core/editor/utils/elementapimixin~ElementApi}.\n *\n * @mixin ElementApiMixin\n * @implements module:core/editor/utils/elementapimixin~ElementApi\n */\nconst ElementApiMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tupdateSourceElement() {\n\t\tif ( !this.sourceElement ) {\n\t\t\t/**\n\t\t\t * Cannot update the source element of a detached editor.\n\t\t\t *\n\t\t\t * The {@link ~ElementApi#updateSourceElement `updateSourceElement()`} method cannot be called if you did not\n\t\t\t * pass an element to `Editor.create()`.\n\t\t\t *\n\t\t\t * @error editor-missing-sourceelement\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'editor-missing-sourceelement: Cannot update the source element of a detached editor.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tsetDataInElement( this.sourceElement, this.data.get() );\n\t}\n};\n\nexport default ElementApiMixin;\n\n/**\n * Interface describing an editor that replaced a DOM element (was \"initialized on an element\").\n *\n * Such an editor should provide a method to\n * {@link module:core/editor/utils/elementapimixin~ElementApi#updateSourceElement update the replaced element with the current data}.\n *\n * @interface ElementApi\n */\n\n/**\n * The element on which the editor has been initialized.\n *\n * @readonly\n * @member {HTMLElement} #sourceElement\n */\n\n/**\n * Updates the {@link #sourceElement editor source element}'s content with the data.\n *\n * @method #updateSourceElement\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport { isFunction } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * @module core/editor/utils/attachtoform\n */\n\n/**\n * Checks if the editor is initialized on a `<textarea>` element that belongs to a form. If yes, it updates the editor's element\n * content before submitting the form.\n *\n * This helper requires the {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface}.\n *\n * @param {module:core/editor/editor~Editor} editor Editor instance.\n */\nexport default function attachToForm( editor ) {\n\tif ( !isFunction( editor.updateSourceElement ) ) {\n\t\t/**\n\t\t * The editor passed to `attachToForm()` must implement the\n\t\t * {@link module:core/editor/utils/elementapimixin~ElementApi} interface.\n\t\t *\n\t\t * @error attachtoform-missing-elementapi-interface\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'attachtoform-missing-elementapi-interface: Editor passed to attachToForm() must implement ElementApi.',\n\t\t\teditor\n\t\t);\n\t}\n\n\tconst sourceElement = editor.sourceElement;\n\n\t// Only when replacing a textarea which is inside of a form element.\n\tif ( sourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.form ) {\n\t\tlet originalSubmit;\n\t\tconst form = sourceElement.form;\n\t\tconst onSubmit = () => editor.updateSourceElement();\n\n\t\t// Replace the original form#submit() to call a custom submit function first.\n\t\t// Check if #submit is a function because the form might have an input named \"submit\".\n\t\tif ( isFunction( form.submit ) ) {\n\t\t\toriginalSubmit = form.submit;\n\n\t\t\tform.submit = () => {\n\t\t\t\tonSubmit();\n\t\t\t\toriginalSubmit.apply( form );\n\t\t\t};\n\t\t}\n\n\t\t// Update the replaced textarea with data before each form#submit event.\n\t\tform.addEventListener( 'submit', onSubmit );\n\n\t\t// Remove the submit listener and revert the original submit method on\n\t\t// editor#destroy.\n\t\teditor.on( 'destroy', () => {\n\t\t\tform.removeEventListener( 'submit', onSubmit );\n\n\t\t\tif ( originalSubmit ) {\n\t\t\t\tform.submit = originalSubmit;\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/utils\n */\n/**\n * Returns heading options as defined in `config.heading.options` but processed to consider\n * the editor localization, i.e. to display {@link module:heading/heading~HeadingOption}\n * in the correct language.\n *\n * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n * when the user configuration is defined because the editor does not exist yet.\n *\n * @param {module:core/editor/editor~Editor} editor\n * @returns {Array.<module:heading/heading~HeadingOption>}.\n */\nexport function getLocalizedOptions(editor) {\n    const t = editor.t;\n    const localizedTitles = {\n        Paragraph: t('Paragraph'),\n        'Heading 1': t('Heading 1'),\n        'Heading 2': t('Heading 2'),\n        'Heading 3': t('Heading 3'),\n        'Heading 4': t('Heading 4'),\n        'Heading 5': t('Heading 5'),\n        'Heading 6': t('Heading 6')\n    };\n    return editor.config.get('heading.options').map(option => {\n        const title = localizedTitles[option.title];\n        if (title && title != option.title) {\n            option.title = title;\n        }\n        return option;\n    });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/headingui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport {\n    createDropdown,\n    addListToDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport { getLocalizedOptions } from './utils';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport '../theme/heading.css';\n/**\n * The headings UI feature. It introduces the `headings` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = getLocalizedOptions(editor);\n        const defaultTitle = t('Choose heading');\n        const dropdownTooltip = t('Heading');\n        // Register UI component.\n        editor.ui.componentFactory.add('heading', locale => {\n            const titles = {};\n            const itemDefinitions = new Collection();\n            const headingCommand = editor.commands.get('heading');\n            const paragraphCommand = editor.commands.get('paragraph');\n            const commands = [headingCommand];\n            for (const option of options) {\n                const def = {\n                    type: 'button',\n                    model: new Model({\n                        label: option.title,\n                        class: option.class,\n                        withText: true\n                    })\n                };\n                if (option.model === 'paragraph') {\n                    def.model.bind('isOn').to(paragraphCommand, 'value');\n                    def.model.set('commandName', 'paragraph');\n                    commands.push(paragraphCommand);\n                } else {\n                    def.model.bind('isOn').to(headingCommand, 'value', value => value === option.model);\n                    def.model.set({\n                        commandName: 'heading',\n                        commandValue: option.model\n                    });\n                }\n                // Add the option to the collection.\n                itemDefinitions.add(def);\n                titles[option.model] = option.title;\n            }\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, itemDefinitions);\n            dropdownView.buttonView.set({\n                isOn: false,\n                withText: true,\n                tooltip: dropdownTooltip\n            });\n            dropdownView.extendTemplate({ attributes: { class: ['ck-heading-dropdown'] } });\n            dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n                return areEnabled.some(isEnabled => isEnabled);\n            });\n            dropdownView.buttonView.bind('label').to(headingCommand, 'value', paragraphCommand, 'value', (value, para) => {\n                const whichModel = value || para && 'paragraph';\n                // If none of the commands is active, display default title.\n                return titles[whichModel] ? titles[whichModel] : defaultTitle;\n            });\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', evt => {\n                editor.execute(evt.source.commandName, evt.source.commandValue ? { value: evt.source.commandValue } : undefined);\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/heading\n */\n\nimport HeadingEditing from './headingediting';\nimport HeadingUI from './headingui';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport '../theme/heading.css';\n\n/**\n * The headings feature.\n *\n * For a detailed overview, check the {@glink features/headings Headings feature documentation}\n * and the {@glink api/heading package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:heading/headingediting~HeadingEditing heading editing feature}\n * and {@link module:heading/headingui~HeadingUI heading UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Heading extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ HeadingEditing, HeadingUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Heading';\n\t}\n}\n\n/**\n * The configuration of the heading feature. Introduced by the {@link module:heading/headingediting~HeadingEditing} feature.\n *\n * Read more in {@link module:heading/heading~HeadingConfig}.\n *\n * @member {module:heading/heading~HeadingConfig} module:core/editor/editorconfig~EditorConfig#heading\n */\n\n/**\n * The configuration of the heading feature.\n * The option is used by the {@link module:heading/headingediting~HeadingEditing} feature.\n *\n *\t\tClassicEditor\n *\t\t\t.create( {\n * \t\t\t\theading: ... // Heading feature config.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface HeadingConfig\n */\n\n/**\n * The available heading options.\n *\n * The default value is:\n *\n *\t\tconst headingConfig = {\n *\t\t\toptions: [\n *\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n *\t\t\t\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n *\t\t\t\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n *\t\t\t\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n *\t\t\t]\n *\t\t};\n *\n * It defines 3 levels of headings. In the editor model they will use `heading1`, `heading2`, and `heading3` elements.\n * Their respective view elements (so the elements output by the editor) will be: `h2`, `h3`, and `h4`. This means that\n * if you choose \"Heading 1\" in the headings dropdown the editor will turn the current block to `<heading1>` in the model\n * which will result in rendering (and outputting to data) the `<h2>` element.\n *\n * The `title` and `class` properties will be used by the `headings` dropdown to render available options.\n * Usually, the first option in the headings dropdown is the \"Paragraph\" option, hence it's also defined on the list.\n * However, you don't need to define its view representation because it's handled by\n * the {@link module:paragraph/paragraph~Paragraph} feature (which is required by\n * the {@link module:heading/headingediting~HeadingEditing} feature).\n *\n * You can **read more** about configuring heading levels and **see more examples** in\n * the {@glink features/headings Headings} guide.\n *\n * Note: In the model you should always start from `heading1`, regardless of how the headings are represented in the view.\n * That's assumption is used by features like {@link module:autoformat/autoformat~Autoformat} to know which element\n * they should use when applying the first level heading.\n *\n * The defined headings are also available as values passed to the `'heading'` command under their model names.\n * For example, the below code will apply `<heading1>` to the current selection:\n *\n *\t\teditor.execute( 'heading', { value: 'heading1' } );\n *\n * @member {Array.<module:heading/heading~HeadingOption>} module:heading/heading~HeadingConfig#options\n */\n\n/**\n * Heading option descriptor.\n *\n * @typedef {Object} module:heading/heading~HeadingOption\n * @property {String} model Name of the model element to convert.\n * @property {module:engine/view/elementdefinition~ElementDefinition} view Definition of a view element to convert from/to.\n * @property {String} title The user-readable title of the option.\n * @property {String} class The class which will be added to the dropdown item representing this option.\n * @property {String} [icon] Icon used by {@link module:heading/headingbuttonsui~HeadingButtonsUI}. It can be omitted when using\n * the default configuration.\n * @extends module:engine/conversion/conversion~ConverterDefinition\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* eslint-env browser */\n\n'use strict';\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nconst BASE64_HEADER_REG_EXP = /^data:(\\S*?);base64,/;\n\n/**\n * FileUploader class used to upload single file.\n */\nexport default class FileUploader {\n\t/**\n\t * Creates `FileUploader` instance.\n\t *\n\t * @param {Blob|String} fileOrData A blob object or a data string encoded with Base64.\n\t * @param {Token} token Token used for authentication.\n\t * @param {String} apiAddress API address.\n\t */\n\tconstructor( fileOrData, token, apiAddress ) {\n\t\tif ( !fileOrData ) {\n\t\t\t/**\n\t\t\t * File must be provided as the first argument.\n\t\t\t *\n\t\t\t * @error fileuploader-missing-file\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'fileuploader-missing-file: File must be provided as the first argument', null );\n\t\t}\n\n\t\tif ( !token ) {\n\t\t\t/**\n\t\t\t * Token must be provided as the second argument.\n\t\t\t *\n\t\t\t * @error fileuploader-missing-token\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'fileuploader-missing-token: Token must be provided as the second argument.', null );\n\t\t}\n\n\t\tif ( !apiAddress ) {\n\t\t\t/**\n\t\t\t * Api address must be provided as the third argument.\n\t\t\t *\n\t\t\t * @error fileuploader-missing-api-address\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'fileuploader-missing-api-address: Api address must be provided as the third argument.', null );\n\t\t}\n\n\t\t/**\n\t\t * A file that is being uploaded.\n\t\t *\n\t\t * @type {Blob}\n\t\t */\n\t\tthis.file = _isBase64( fileOrData ) ? _base64ToBlob( fileOrData ) : fileOrData;\n\n\t\t/**\n\t\t * CKEditor Cloud Services access token.\n\t\t *\n\t\t * @type {Token}\n\t\t * @private\n\t\t */\n\t\tthis._token = token;\n\n\t\t/**\n\t\t * CKEditor Cloud Services API address.\n\t\t *\n\t\t * @type {String}\n\t\t * @private\n\t\t */\n\t\tthis._apiAddress = apiAddress;\n\t}\n\n\t/**\n\t * Registers callback on `progress` event.\n\t *\n\t * @chainable\n\t * @param {Function} callback\n\t * @returns {FileUploader}\n\t */\n\tonProgress( callback ) {\n\t\tthis.on( 'progress', ( event, data ) => callback( data ) );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Registers callback on `error` event. Event is called once when error occurs.\n\t *\n\t * @chainable\n\t * @param {Function} callback\n\t * @returns {FileUploader}\n\t */\n\tonError( callback ) {\n\t\tthis.once( 'error', ( event, data ) => callback( data ) );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Aborts upload process.\n\t */\n\tabort() {\n\t\tthis.xhr.abort();\n\t}\n\n\t/**\n\t * Sends XHR request to API.\n\t *\n\t * @chainable\n\t * @returns {Promise.<Object>}\n\t */\n\tsend() {\n\t\tthis._prepareRequest();\n\t\tthis._attachXHRListeners();\n\n\t\treturn this._sendRequest();\n\t}\n\n\t/**\n\t * Prepares XHR request.\n\t *\n\t * @private\n\t */\n\t_prepareRequest() {\n\t\tconst xhr = new XMLHttpRequest();\n\n\t\txhr.open( 'POST', this._apiAddress );\n\t\txhr.setRequestHeader( 'Authorization', this._token.value );\n\t\txhr.responseType = 'json';\n\n\t\tthis.xhr = xhr;\n\t}\n\n\t/**\n\t * Attaches listeners to the XHR.\n\t *\n\t * @private\n\t */\n\t_attachXHRListeners() {\n\t\tconst that = this;\n\t\tconst xhr = this.xhr;\n\n\t\txhr.addEventListener( 'error', onError( 'Network Error' ) );\n\t\txhr.addEventListener( 'abort', onError( 'Abort' ) );\n\n\t\t/* istanbul ignore else */\n\t\tif ( xhr.upload ) {\n\t\t\txhr.upload.addEventListener( 'progress', event => {\n\t\t\t\tif ( event.lengthComputable ) {\n\t\t\t\t\tthis.fire( 'progress', {\n\t\t\t\t\t\ttotal: event.total,\n\t\t\t\t\t\tuploaded: event.loaded\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\txhr.addEventListener( 'load', () => {\n\t\t\tconst statusCode = xhr.status;\n\t\t\tconst xhrResponse = xhr.response;\n\n\t\t\tif ( statusCode < 200 || statusCode > 299 ) {\n\t\t\t\treturn this.fire( 'error', xhrResponse.message || xhrResponse.error );\n\t\t\t}\n\t\t} );\n\n\t\tfunction onError( message ) {\n\t\t\treturn () => that.fire( 'error', message );\n\t\t}\n\t}\n\n\t/**\n\t * Sends XHR request.\n\t *\n\t * @private\n\t */\n\t_sendRequest() {\n\t\tconst formData = new FormData();\n\t\tconst xhr = this.xhr;\n\n\t\tformData.append( 'file', this.file );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\txhr.addEventListener( 'load', () => {\n\t\t\t\tconst statusCode = xhr.status;\n\t\t\t\tconst xhrResponse = xhr.response;\n\n\t\t\t\tif ( statusCode < 200 || statusCode > 299 ) {\n\t\t\t\t\tif ( xhrResponse.message ) {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Uploading file failed.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @error fileuploader-uploading-data-failed\n\t\t\t\t\t\t */\n\t\t\t\t\t\treturn reject( new CKEditorError(\n\t\t\t\t\t\t\t'fileuploader-uploading-data-failed: Uploading file failed.',\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t{ message: xhrResponse.message }\n\t\t\t\t\t\t) );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn reject( xhrResponse.error );\n\t\t\t\t}\n\n\t\t\t\treturn resolve( xhrResponse );\n\t\t\t} );\n\n\t\t\txhr.addEventListener( 'error', () => reject( new Error( 'Network Error' ) ) );\n\t\t\txhr.addEventListener( 'abort', () => reject( new Error( 'Abort' ) ) );\n\n\t\t\txhr.send( formData );\n\t\t} );\n\t}\n\n\t/**\n\t * Fired when error occurs.\n\t *\n\t * @event error\n\t * @param {String} error Error message\n\t */\n\n\t/**\n\t * Fired on upload progress.\n\t *\n\t * @event progress\n\t * @param {Object} status Total and uploaded status\n\t */\n}\n\nmix( FileUploader, EmitterMixin );\n\n/**\n * Transforms Base64 string data into file.\n *\n * @param {String} base64 String data.\n * @param {Number} [sliceSize=512]\n * @returns {Blob}\n * @private\n */\nfunction _base64ToBlob( base64, sliceSize = 512 ) {\n\ttry {\n\t\tconst contentType = base64.match( BASE64_HEADER_REG_EXP )[ 1 ];\n\t\tconst base64Data = atob( base64.replace( BASE64_HEADER_REG_EXP, '' ) );\n\n\t\tconst byteArrays = [];\n\n\t\tfor ( let offset = 0; offset < base64Data.length; offset += sliceSize ) {\n\t\t\tconst slice = base64Data.slice( offset, offset + sliceSize );\n\t\t\tconst byteNumbers = new Array( slice.length );\n\n\t\t\tfor ( let i = 0; i < slice.length; i++ ) {\n\t\t\t\tbyteNumbers[ i ] = slice.charCodeAt( i );\n\t\t\t}\n\n\t\t\tbyteArrays.push( new Uint8Array( byteNumbers ) );\n\t\t}\n\n\t\treturn new Blob( byteArrays, { type: contentType } );\n\t} catch ( error ) {\n\t\t/**\n\t\t * Problem with decoding Base64 image data.\n\t\t *\n\t\t * @error fileuploader-decoding-image-data-error\n\t\t */\n\t\tthrow new CKEditorError( 'fileuploader-decoding-image-data-error: Problem with decoding Base64 image data.', null );\n\t}\n}\n\n/**\n * Checks that string is Base64.\n *\n * @param {String} string\n * @returns {Boolean}\n * @private\n */\nfunction _isBase64( string ) {\n\tif ( typeof string !== 'string' ) {\n\t\treturn false;\n\t}\n\n\tconst match = string.match( BASE64_HEADER_REG_EXP );\n\treturn !!( match && match.length );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* eslint-env browser */\n\n'use strict';\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nconst DEFAULT_OPTIONS = { refreshInterval: 3600000, autoRefresh: true };\n\n/**\n * Class representing the token used for communication with CKEditor Cloud Services.\n * Value of the token is retrieving from the specified URL and is refreshed every 1 hour by default.\n *\n * @mixes ObservableMixin\n */\nclass Token {\n\t/**\n\t * Creates `Token` instance.\n\t * Method `init` should be called after using the constructor or use `create` method instead.\n\t *\n\t * @param {String|Function} tokenUrlOrRefreshToken Endpoint address to download the token or a callback that provides the token. If the\n\t * value is a function it has to match the {@link ~refreshToken} interface.\n\t * @param {Object} options\n\t * @param {String} [options.initValue] Initial value of the token.\n\t * @param {Number} [options.refreshInterval=3600000] Delay between refreshes. Default 1 hour.\n\t * @param {Boolean} [options.autoRefresh=true] Specifies whether to start the refresh automatically.\n\t */\n\tconstructor( tokenUrlOrRefreshToken, options = DEFAULT_OPTIONS ) {\n\t\tif ( !tokenUrlOrRefreshToken ) {\n\t\t\t/**\n\t\t\t * A `tokenUrl` must be provided as the first constructor argument.\n\t\t\t *\n\t\t\t * @error token-missing-token-url\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'token-missing-token-url: A `tokenUrl` must be provided as the first constructor argument.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Value of the token.\n\t\t * The value of the token is null if `initValue` is not provided or `init` method was not called.\n\t\t * `create` method creates token with initialized value from url.\n\t\t *\n\t\t * @name value\n\t\t * @member {String} #value\n\t\t * @observable\n\t\t * @readonly\n\t\t */\n\t\tthis.set( 'value', options.initValue );\n\n\t\t/**\n\t\t * Base refreshing function.\n\t\t *\n\t\t * @private\n\t\t * @member {String|Function} #_refresh\n\t\t */\n\t\tif ( typeof tokenUrlOrRefreshToken === 'function' ) {\n\t\t\tthis._refresh = tokenUrlOrRefreshToken;\n\t\t} else {\n\t\t\tthis._refresh = () => defaultRefreshToken( tokenUrlOrRefreshToken );\n\t\t}\n\n\t\t/**\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._options = Object.assign( {}, DEFAULT_OPTIONS, options );\n\t}\n\n\t/**\n\t * Initializes the token.\n\t *\n\t * @returns {Promise.<Token>}\n\t */\n\tinit() {\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\tif ( this._options.autoRefresh ) {\n\t\t\t\tthis._startRefreshing();\n\t\t\t}\n\n\t\t\tif ( !this.value ) {\n\t\t\t\tthis._refreshToken()\n\t\t\t\t\t.then( resolve )\n\t\t\t\t\t.catch( reject );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolve( this );\n\t\t} );\n\t}\n\n\t/**\n\t * Refresh token method. Useful in a method form as it can be override in tests.\n\t *\n\t * @protected\n\t */\n\t_refreshToken() {\n\t\treturn this._refresh()\n\t\t\t.then( value => this.set( 'value', value ) )\n\t\t\t.then( () => this );\n\t}\n\n\t/**\n\t * Destroys token instance. Stops refreshing.\n\t */\n\tdestroy() {\n\t\tthis._stopRefreshing();\n\t}\n\n\t/**\n\t * Starts value refreshing every `refreshInterval` time.\n\t *\n\t * @protected\n\t */\n\t_startRefreshing() {\n\t\tthis._refreshInterval = setInterval( () => this._refreshToken(), this._options.refreshInterval );\n\t}\n\n\t/**\n\t * Stops value refreshing.\n\t *\n\t * @protected\n\t */\n\t_stopRefreshing() {\n\t\tclearInterval( this._refreshInterval );\n\t}\n\n\t/**\n\t * Creates a initialized {@link Token} instance.\n\t *\n\t * @param {String|Function} tokenUrlOrRefreshToken Endpoint address to download the token or a callback that provides the token. If the\n\t * value is a function it has to match the {@link ~refreshToken} interface.\n\t * @param {Object} options\n\t * @param {String} [options.initValue] Initial value of the token.\n\t * @param {Number} [options.refreshInterval=3600000] Delay between refreshes. Default 1 hour.\n\t * @param {Boolean} [options.autoRefresh=true] Specifies whether to start the refresh automatically.\n\t * @returns {Promise.<Token>}\n\t */\n\tstatic create( tokenUrlOrRefreshToken, options = DEFAULT_OPTIONS ) {\n\t\tconst token = new Token( tokenUrlOrRefreshToken, options );\n\n\t\treturn token.init();\n\t}\n}\n\nmix( Token, ObservableMixin );\n\n/**\n * This function is called in a defined interval by the {@link ~Token} class.\n * It should return a promise, which resolves with the new token value.\n * If any error occurs it should return a rejected promise with an error message.\n *\n * @function refreshToken\n * @returns {Promise.<String>}\n */\n\n/**\n * @private\n * @param {String} tokenUrl\n */\nfunction defaultRefreshToken( tokenUrl ) {\n\treturn new Promise( ( resolve, reject ) => {\n\t\tconst xhr = new XMLHttpRequest();\n\n\t\txhr.open( 'GET', tokenUrl );\n\n\t\txhr.addEventListener( 'load', () => {\n\t\t\tconst statusCode = xhr.status;\n\t\t\tconst xhrResponse = xhr.response;\n\n\t\t\tif ( statusCode < 200 || statusCode > 299 ) {\n\t\t\t\t/**\n\t\t\t\t * Cannot download new token from the provided url.\n\t\t\t\t *\n\t\t\t\t * @error token-cannot-download-new-token\n\t\t\t\t */\n\t\t\t\treturn reject( new CKEditorError( 'token-cannot-download-new-token: Cannot download new token from the provided url.', null ) );\n\t\t\t}\n\n\t\t\treturn resolve( xhrResponse );\n\t\t} );\n\n\t\txhr.addEventListener( 'error', () => reject( new Error( 'Network Error' ) ) );\n\t\txhr.addEventListener( 'abort', () => reject( new Error( 'Abort' ) ) );\n\n\t\txhr.send();\n\t} );\n}\n\nexport default Token;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module cloud-services/cloudservices\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Token from '@ckeditor/ckeditor-cloud-services-core/src/token/token';\n\n/**\n * Plugin introducing integration between CKEditor 5 and CKEditor Cloud Services .\n *\n * It initializes the token provider based on\n * the {@link module:cloud-services/cloudservices~CloudServicesConfig `config.cloudService`}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CloudServices extends Plugin {\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'CloudServices';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst config = editor.config;\n\n\t\tconst options = config.get( 'cloudServices' ) || {};\n\n\t\tfor ( const optionName in options ) {\n\t\t\tthis[ optionName ] = options[ optionName ];\n\t\t}\n\n\t\t/**\n\t\t * The authentication token URL for CKEditor Cloud Services or a callback to the token value promise. See the\n\t\t * {@link module:cloud-services/cloudservices~CloudServicesConfig#tokenUrl} for more details.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String|Function|undefined} #tokenUrl\n\t\t */\n\n\t\t/**\n\t\t * The URL to which the files should be uploaded.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #uploadUrl\n\t\t */\n\n\t\t/**\n\t\t * Other plugins use this token for the authorization process. It handles token requesting and refreshing.\n\t\t * Its value is `null` when {@link module:cloud-services/cloudservices~CloudServicesConfig#tokenUrl} is not provided.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object|null} #token\n\t\t */\n\n\t\tif ( !this.tokenUrl ) {\n\t\t\tthis.token = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.token = new CloudServices.Token( this.tokenUrl );\n\n\t\treturn this.token.init();\n\t}\n}\n\nCloudServices.Token = Token;\n\n/**\n * The configuration of CKEditor Cloud Services. Introduced by the {@link module:cloud-services/cloudservices~CloudServices} plugin.\n *\n * Read more in {@link module:cloud-services/cloudservices~CloudServicesConfig}.\n *\n * @member {module:cloud-services/cloudservices~CloudServicesConfig} module:core/editor/editorconfig~EditorConfig#cloudServices\n */\n\n/**\n * The configuration for all plugins using CKEditor Cloud Services.\n *\n *\t\tClassicEditor\n *\t\t\t.create( document.querySelector( '#editor' ), {\n *\t\t\t\tcloudServices: {\n *\t\t\t\t\ttokenUrl: 'https://example.com/cs-token-endpoint',\n *\t\t\t\t\tuploadUrl: 'https://your-organization-id.cke-cs.com/easyimage/upload/'\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface CloudServicesConfig\n */\n\n/**\n * A token URL or a token request function.\n *\n * As a string, it should be a URL to the security token endpoint in your application. The role of this endpoint is to securely authorize\n * the end users of your application to use [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services) only\n * if they should have access e.g. to upload files with {@glink @cs guides/easy-image/quick-start Easy Image} or to use the\n * {@glink @cs guides/collaboration/quick-start Collaboration} service.\n *\n *\t\tClassicEditor\n *\t\t\t.create( document.querySelector( '#editor' ), {\n *\t\t\t\tcloudServices: {\n *\t\t\t\t\ttokenUrl: 'https://example.com/cs-token-endpoint',\n *\t\t\t\t\t...\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * As a function, it should provide a promise to the token value, so you can highly customize the token and provide your token URL endpoint.\n * By using this approach you can set your own headers for the request.\n *\n * \t\tClassicEditor\n *\t\t\t.create( document.querySelector( '#editor' ), {\n *\t\t\t\tcloudServices: {\n *\t\t\t\t\ttokenUrl: () => new Promise( ( resolve, reject ) => {\n *\t\t\t\t\t\tconst xhr = new XMLHttpRequest();\n *\n *\t\t\t\t\t\txhr.open( 'GET', 'https://example.com/cs-token-endpoint' );\n *\n *\t\t\t\t\t\txhr.addEventListener( 'load', () => {\n *\t\t\t\t\t\t\tconst statusCode = xhr.status;\n *\t\t\t\t\t\t\tconst xhrResponse = xhr.response;\n *\n *\t\t\t\t\t\t\tif ( statusCode < 200 || statusCode > 299 ) {\n *\t\t\t\t\t\t\t\treturn reject( new Error( 'Cannot download new token!' ) );\n *\t\t\t\t\t\t\t}\n *\n *\t\t\t\t\t\t\treturn resolve( xhrResponse );\n *\t\t\t\t\t\t} );\n *\n *\t\t\t\t\t\txhr.addEventListener( 'error', () => reject( new Error( 'Network Error' ) ) );\n *\t\t\t\t\t\txhr.addEventListener( 'abort', () => reject( new Error( 'Abort' ) ) );\n *\n *\t\t\t\t\t\txhr.setRequestHeader( customHeader, customValue );\n *\n *\t\t\t\t\t\txhr.send();\n *\t\t\t\t\t} ),\n *\t\t\t\t\t...\n *\t\t\t\t}\n *\t\t\t} )\n *\n * You can find more information about token endpoints in the\n * {@glink @cs guides/easy-image/quick-start#create-token-endpoint Cloud Services - Quick start}\n * and {@glink @cs guides/security/token-endpoint Cloud Services - Token endpoint} documentation.\n *\n * Without a properly working token endpoint (token URL) CKEditor plugins will not be able to connect to CKEditor Cloud Services.\n *\n * @member {String|Function} module:cloud-services/cloudservices~CloudServicesConfig#tokenUrl\n */\n\n/**\n * The endpoint URL for [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services) uploads.\n * This option must be set for Easy Image to work correctly.\n *\n * The upload URL is unique for each customer and can be found in the\n * [CKEditor Ecosystem customer dashboard](https://dashboard.ckeditor.com) after subscribing to the Easy Image service.\n * To learn how to start using Easy Image, check the {@glink @cs guides/easy-image/quick-start Easy Image - Quick start} documentation.\n *\n * Note: Make sure to also set the {@link module:cloud-services/cloudservices~CloudServicesConfig#tokenUrl} configuration option.\n *\n * @member {String} module:cloud-services/cloudservices~CloudServicesConfig#uploadUrl\n */\n\n/**\n * The URL for web socket communication, used by the `RealTimeCollaborativeEditing` plugin. Every customer (organization in the CKEditor\n * Ecosystem dashboard) has their own, unique URLs to communicate with CKEditor Cloud Services. The URL can be found in the\n * CKEditor Ecosystem customer dashboard.\n *\n * Note: Unlike most plugins, `RealTimeCollaborativeEditing` is not included in any CKEditor 5 build and needs to be installed manually.\n * Check [Collaboration overview](https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/overview.html) for more details.\n *\n * @member {String} module:cloud-services/cloudservices~CloudServicesConfig#webSocketUrl\n */\n\n/**\n * Document ID, used by the `RealTimeCollaborativeEditing` plugin. All editor instances created with the same document ID will collaborate.\n * It means that each document needs a different document ID if you do not want to start collaboration between these documents.\n * The ID is usually a primary key of the document in the database, but you are free to provide whatever identifier fits your scenario.\n *\n * Note: Unlike most plugins, `RealTimeCollaborativeEditing` is not included in any CKEditor 5 build and needs to be installed manually.\n * Check [Collaboration overview](https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/overview.html) for more details.\n *\n * @member {String} module:cloud-services/cloudservices~CloudServicesConfig#documentId\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n* @module easy-image/cloudservicesuploadadapter\n*/\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport UploadGateway from '@ckeditor/ckeditor-cloud-services-core/src/uploadgateway/uploadgateway';\nimport CloudServices from '@ckeditor/ckeditor5-cloud-services/src/cloudservices';\n\n/**\n * A plugin that enables upload to [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services/).\n *\n * It is mainly used by the {@link module:easy-image/easyimage~EasyImage} feature.\n *\n * After enabling this adapter you need to configure the CKEditor Cloud Services integration through\n * {@link module:cloud-services/cloudservices~CloudServicesConfig `config.cloudServices`}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CloudServicesUploadAdapter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ FileRepository, CloudServices ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\tconst cloudServices = editor.plugins.get( CloudServices );\n\n\t\tconst token = cloudServices.token;\n\t\tconst uploadUrl = cloudServices.uploadUrl;\n\n\t\tif ( !token ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._uploadGateway = new CloudServicesUploadAdapter._UploadGateway( token, uploadUrl );\n\n\t\teditor.plugins.get( FileRepository ).createUploadAdapter = loader => {\n\t\t\treturn new Adapter( this._uploadGateway, loader );\n\t\t};\n\t}\n}\n\n/**\n * @private\n */\nclass Adapter {\n\tconstructor( uploadGateway, loader ) {\n\t\tthis.uploadGateway = uploadGateway;\n\n\t\tthis.loader = loader;\n\t}\n\n\tupload() {\n\t\treturn this.loader.file.then( file => {\n\t\t\tthis.fileUploader = this.uploadGateway.upload( file );\n\n\t\t\tthis.fileUploader.on( 'progress', ( evt, data ) => {\n\t\t\t\tthis.loader.uploadTotal = data.total;\n\t\t\t\tthis.loader.uploaded = data.uploaded;\n\t\t\t} );\n\n\t\t\treturn this.fileUploader.send();\n\t\t} );\n\t}\n\n\tabort() {\n\t\tthis.fileUploader.abort();\n\t}\n}\n\n// Store the API in static property to easily overwrite it in tests.\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\nCloudServicesUploadAdapter._UploadGateway = UploadGateway;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n'use strict';\n\nimport FileUploader from './fileuploader';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * UploadGateway abstracts file uploads to CKEditor Cloud Services.\n */\nexport default class UploadGateway {\n\t/**\n\t * Creates `UploadGateway` instance.\n\t *\n\t * @param {Token} token Token used for authentication.\n\t * @param {String} apiAddress API address.\n\t */\n\tconstructor( token, apiAddress ) {\n\t\tif ( !token ) {\n\t\t\t/**\n\t\t\t * Token must be provided.\n\t\t\t *\n\t\t\t * @error uploadgateway-missing-token\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'uploadgateway-missing-token: Token must be provided.', null );\n\t\t}\n\n\t\tif ( !apiAddress ) {\n\t\t\t/**\n\t\t\t * Api address must be provided.\n\t\t\t *\n\t\t\t * @error uploadgateway-missing-api-address\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'uploadgateway-missing-api-address: Api address must be provided.', null );\n\t\t}\n\n\t\t/**\n\t\t * CKEditor Cloud Services access token.\n\t\t *\n\t\t * @type {Token}\n\t\t * @private\n\t\t */\n\t\tthis._token = token;\n\n\t\t/**\n\t\t * CKEditor Cloud Services API address.\n\t\t *\n\t\t * @type {String}\n\t\t * @private\n\t\t */\n\t\tthis._apiAddress = apiAddress;\n\t}\n\n\t/**\n\t * Creates a {@link FileUploader} instance that wraps file upload process.\n\t * The file is being sent at a time when the method {@link FileUploader#then then} is called\n\t * or when {@link FileUploader#send send} method is called.\n\t *\n\t *     const token = await Token.create( 'https://token-endpoint' );\n\t *     new UploadGateway( token, 'https://example.org' )\n\t *        .upload( 'FILE' )\n\t *        .onProgress( ( data ) => console.log( data ) )\n\t *        .send()\n\t *        .then( ( response ) => console.log( response ) );\n\t *\n\t *     // OR\n\t *\n\t *     const token = await Token.create( 'https://token-endpoint' );\n\t *     new UploadGateway( token, 'https://example.org' )\n\t *         .upload( 'FILE' )\n\t *         .onProgress( ( data ) => console.log( data ) )\n\t *         .send()\n\t *         .then( ( response ) => console.log( response ) );\n\t *\n\t * @param {Blob/String} fileOrData A blob object or a data string encoded with Base64.\n\t * @returns {FileUploader} Returns `FileUploader` instance.\n\t */\n\tupload( fileOrData ) {\n\t\treturn new FileUploader( fileOrData, this._token, this._apiAddress );\n\t}\n}\n\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module easy-image/easyimage\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport CloudServicesUploadAdapter from './cloudservicesuploadadapter';\nimport Image from '@ckeditor/ckeditor5-image/src/image';\nimport ImageUpload from '@ckeditor/ckeditor5-image/src/imageupload';\n\n/**\n * The Easy Image feature, which makes the image upload in CKEditor 5 possible with virtually zero\n * server setup. A part of the [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services/)\n * family.\n *\n * This is a \"glue\" plugin which enables:\n *\n * * {@link module:image/image~Image},\n * * {@link module:image/imageupload~ImageUpload},\n * * {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter}.\n *\n * See the {@glink features/image-upload/easy-image \"Easy Image integration\" guide} to learn how to configure\n * and use this feature.\n *\n * Check out the {@glink features/image-upload/image-upload comprehensive \"Image upload\" guide} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * **Note**: After enabling the Easy Image plugin you need to configure the\n * [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services/)\n * integration through {@link module:cloud-services/cloudservices~CloudServicesConfig `config.cloudServices`}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class EasyImage extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [\n\t\t\tCloudServicesUploadAdapter,\n\t\t\tImage,\n\t\t\tImageUpload\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'EasyImage';\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM3.5 3v5H2V3.7H1v-1h2.5V3zM.343 17.857l2.59-3.257H2.92a.6.6 0 1 0-1.04 0H.302a2 2 0 1 1 3.995 0h-.001c-.048.405-.16.734-.333.988-.175.254-.59.692-1.244 1.312H4.3v1h-4l.043-.043zM7 14.75a.75.75 0 0 1 .75-.75h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0C1 4.784 1.777 4 2.75 4c.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75C1.784 7.5 1 6.723 1 5.75zm6 9c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0c0-.966.777-1.75 1.75-1.75.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75-.966 0-1.75-.777-1.75-1.75z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module list/listui\n */\nimport { createUIComponent } from './utils';\nimport numberedListIcon from '../theme/icons/numberedlist.svg';\nimport bulletedListIcon from '../theme/icons/bulletedlist.svg';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n/**\n * The list UI feature. It introduces the `'numberedList'` and `'bulletedList'` buttons that\n * allow to convert paragraphs to and from list items and indent or outdent them.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ListUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const t = this.editor.t;\n        // Create two buttons and link them with numberedList and bulletedList commands.\n        createUIComponent(this.editor, 'numberedList', t('Numbered List'), numberedListIcon);\n        createUIComponent(this.editor, 'bulletedList', t('Bulleted List'), bulletedListIcon);\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/list\n */\n\nimport ListEditing from './listediting';\nimport ListUI from './listui';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/listediting~ListEditing list editing feature}\n * and {@link module:list/listui~ListUI list UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class List extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ListEditing, ListUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'List';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/indentcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The list indent command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class IndentCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {'forward'|'backward'} indentDirection The direction of indent. If it is equal to `backward`, the command\n\t * will outdent a list item.\n\t */\n\tconstructor( editor, indentDirection ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Determines by how much the command will change the list item's indent attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {Number}\n\t\t */\n\t\tthis._indentBy = indentDirection == 'forward' ? 1 : -1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tlet itemsToChange = Array.from( doc.selection.getSelectedBlocks() );\n\n\t\tmodel.change( writer => {\n\t\t\tconst lastItem = itemsToChange[ itemsToChange.length - 1 ];\n\n\t\t\t// Indenting a list item should also indent all the items that are already sub-items of indented item.\n\t\t\tlet next = lastItem.nextSibling;\n\n\t\t\t// Check all items after last indented item, as long as their indent is bigger than indent of that item.\n\t\t\twhile ( next && next.name == 'listItem' && next.getAttribute( 'listIndent' ) > lastItem.getAttribute( 'listIndent' ) ) {\n\t\t\t\titemsToChange.push( next );\n\n\t\t\t\tnext = next.nextSibling;\n\t\t\t}\n\n\t\t\t// We need to be sure to keep model in correct state after each small change, because converters\n\t\t\t// bases on that state and assumes that model is correct.\n\t\t\t// Because of that, if the command outdents items, we will outdent them starting from the last item, as\n\t\t\t// it is safer.\n\t\t\tif ( this._indentBy < 0 ) {\n\t\t\t\titemsToChange = itemsToChange.reverse();\n\t\t\t}\n\n\t\t\tfor ( const item of itemsToChange ) {\n\t\t\t\tconst indent = item.getAttribute( 'listIndent' ) + this._indentBy;\n\n\t\t\t\t// If indent is lower than 0, it means that the item got outdented when it was not indented.\n\t\t\t\t// This means that we need to convert that list item to paragraph.\n\t\t\t\tif ( indent < 0 ) {\n\t\t\t\t\t// To keep the model as correct as possible, first rename listItem, then remove attributes,\n\t\t\t\t\t// as listItem without attributes is very incorrect and will cause problems in converters.\n\t\t\t\t\t// No need to remove attributes, will be removed by post fixer.\n\t\t\t\t\twriter.rename( item, 'paragraph' );\n\t\t\t\t}\n\t\t\t\t// If indent is >= 0, change the attribute value.\n\t\t\t\telse {\n\t\t\t\t\twriter.setAttribute( 'listIndent', indent, item );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\t// Check whether any of position's ancestor is a list item.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\t// If selection is not in a list item, the command is disabled.\n\t\tif ( !listItem || !listItem.is( 'listItem' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this._indentBy > 0 ) {\n\t\t\t// Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\n\t\t\t// To be in the same list, the item has to have same attributes and cannot be \"split\" by an item with lower indent.\n\t\t\tconst indent = listItem.getAttribute( 'listIndent' );\n\t\t\tconst type = listItem.getAttribute( 'listType' );\n\n\t\t\tlet prev = listItem.previousSibling;\n\n\t\t\twhile ( prev && prev.is( 'listItem' ) && prev.getAttribute( 'listIndent' ) >= indent ) {\n\t\t\t\tif ( prev.getAttribute( 'listIndent' ) == indent ) {\n\t\t\t\t\t// The item is on the same level.\n\t\t\t\t\t// If it has same type, it means that we found a preceding sibling from the same list.\n\t\t\t\t\t// If it does not have same type, it means that `listItem` is on different list (this can happen only\n\t\t\t\t\t// on top level lists, though).\n\t\t\t\t\treturn prev.getAttribute( 'listType' ) == type;\n\t\t\t\t}\n\n\t\t\t\tprev = prev.previousSibling;\n\t\t\t}\n\n\t\t\t// Could not find similar list item, this means that `listItem` is first in its list.\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/converters\n */\n\nimport {\n\tgenerateLiInUl,\n\tinjectViewList,\n\tmergeViewLists,\n\tgetSiblingListItem,\n\tpositionAfterUiElements\n} from './utils';\nimport TreeWalker from '@ckeditor/ckeditor5-engine/src/model/treewalker';\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It creates a `<ul><li></li><ul>` (or `<ol>`) view structure out of a `listItem` model element, inserts it at the correct\n * position, and merges the list with surrounding lists (if available).\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelViewInsertion( model ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst consumable = conversionApi.consumable;\n\n\t\tif ( !consumable.test( data.item, 'insert' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listType' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listIndent' )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsumable.consume( data.item, 'insert' );\n\t\tconsumable.consume( data.item, 'attribute:listType' );\n\t\tconsumable.consume( data.item, 'attribute:listIndent' );\n\n\t\tconst modelItem = data.item;\n\t\tconst viewItem = generateLiInUl( modelItem, conversionApi );\n\n\t\tinjectViewList( modelItem, viewItem, conversionApi, model );\n\t};\n}\n\n/**\n * A model-to-view converter for the `listItem` model element removal.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelViewRemove( model ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewStart = conversionApi.mapper.toViewPosition( data.position ).getLastMatchingPosition( value => !value.item.is( 'li' ) );\n\t\tconst viewItem = viewStart.nodeAfter;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// 1. Break the container after and before the list item.\n\t\t// This will create a view list with one view list item - the one to remove.\n\t\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t\t// 2. Remove the list with the item to remove.\n\t\tconst viewList = viewItem.parent;\n\t\tconst viewListPrev = viewList.previousSibling;\n\t\tconst removeRange = viewWriter.createRangeOn( viewList );\n\t\tconst removed = viewWriter.remove( removeRange );\n\n\t\t// 3. Merge the whole created by breaking and removing the list.\n\t\tif ( viewListPrev && viewListPrev.nextSibling ) {\n\t\t\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\n\t\t}\n\n\t\t// 4. Bring back nested list that was in the removed <li>.\n\t\tconst modelItem = conversionApi.mapper.toModelElement( viewItem );\n\n\t\thoistNestedLists( modelItem.getAttribute( 'listIndent' ) + 1, data.position, removeRange.start, viewItem, conversionApi, model );\n\n\t\t// 5. Unbind removed view item and all children.\n\t\tfor ( const child of viewWriter.createRangeIn( removed ).getItems() ) {\n\t\t\tconversionApi.mapper.unbindViewElement( child );\n\t\t}\n\n\t\tevt.stop();\n\t};\n}\n\n/**\n * A model-to-view converter for the `type` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes from `<ul>` to `<ol>` (or vice versa). This is accomplished\n * by breaking view elements and changing their name. The next {@link module:list/converters~modelViewMergeAfterChangeType}\n * converter will attempt to merge split nodes.\n *\n * Splitting this conversion into 2 steps makes it possible to add an additional conversion in the middle.\n * Check {@link module:list/todolistconverters~modelViewChangeType} to see an example of it.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface.\n */\nexport function modelViewChangeType( evt, data, conversionApi ) {\n\tif ( !conversionApi.consumable.consume( data.item, 'attribute:listType' ) ) {\n\t\treturn;\n\t}\n\n\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\n\tconst viewWriter = conversionApi.writer;\n\n\t// Break the container after and before the list item.\n\t// This will create a view list with one view list item -- the one that changed type.\n\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t// Change name of the view list that holds the changed view item.\n\t// We cannot just change name property, because that would not render properly.\n\tconst viewList = viewItem.parent;\n\tconst listName = data.attributeNewValue == 'numbered' ? 'ol' : 'ul';\n\n\tviewWriter.rename( listName, viewList );\n}\n\n/**\n * A model-to-view converter that attempts to merge nodes split by {@link module:list/converters~modelViewChangeType}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface.\n */\nexport function modelViewMergeAfterChangeType( evt, data, conversionApi ) {\n\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\n\tconst viewList = viewItem.parent;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Merge the changed view list with other lists, if possible.\n\tmergeViewLists( viewWriter, viewList, viewList.nextSibling );\n\tmergeViewLists( viewWriter, viewList.previousSibling, viewList );\n\n\t// Consumable insertion of children inside the item. They are already handled by re-building the item in view.\n\tfor ( const child of data.item.getChildren() ) {\n\t\tconversionApi.consumable.consume( child, 'insert' );\n\t}\n}\n\n/**\n * A model-to-view converter for the `listIndent` attribute change on the `listItem` model element.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelViewChangeIndent( model ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, 'attribute:listIndent' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// 1. Break the container after and before the list item.\n\t\t// This will create a view list with one view list item -- the one that changed type.\n\t\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t\t// 2. Extract view list with changed view list item and merge \"hole\" possibly created by breaking and removing elements.\n\t\tconst viewList = viewItem.parent;\n\t\tconst viewListPrev = viewList.previousSibling;\n\t\tconst removeRange = viewWriter.createRangeOn( viewList );\n\t\tviewWriter.remove( removeRange );\n\n\t\tif ( viewListPrev && viewListPrev.nextSibling ) {\n\t\t\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\n\t\t}\n\n\t\t// 3. Bring back nested list that was in the removed <li>.\n\t\thoistNestedLists( data.attributeOldValue + 1, data.range.start, removeRange.start, viewItem, conversionApi, model );\n\n\t\t// 4. Inject view list like it is newly inserted.\n\t\tinjectViewList( data.item, viewItem, conversionApi, model );\n\n\t\t// 5. Consume insertion of children inside the item. They are already handled by re-building the item in view.\n\t\tfor ( const child of data.item.getChildren() ) {\n\t\t\tconversionApi.consumable.consume( child, 'insert' );\n\t\t}\n\t};\n}\n\n/**\n * A special model-to-view converter introduced by the {@link module:list/list~List list feature}. This converter is fired for\n * insert change of every model item, and should be fired before the actual converter. The converter checks whether the inserted\n * model item is a non-`listItem` element. If it is, and it is inserted inside a view list, the converter breaks the\n * list so the model element is inserted to the view parent element corresponding to its model parent element.\n *\n * The converter prevents such situations:\n *\n *\t\t// Model:                        // View:\n *\t\t<listItem>foo</listItem>         <ul>\n *\t\t<listItem>bar</listItem>             <li>foo</li>\n *\t\t                                     <li>bar</li>\n *\t\t                                 </ul>\n *\n *\t\t// After change:                 // Correct view guaranteed by this converter:\n *\t\t<listItem>foo</listItem>         <ul><li>foo</li></ul><p>xxx</p><ul><li>bar</li></ul>\n *\t\t<paragraph>xxx</paragraph>       // Instead of this wrong view state:\n *\t\t<listItem>bar</listItem>         <ul><li>foo</li><p>xxx</p><li>bar</li></ul>\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface.\n */\nexport function modelViewSplitOnInsert( evt, data, conversionApi ) {\n\tif ( data.item.name != 'listItem' ) {\n\t\tlet viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst lists = [];\n\n\t\t// Break multiple ULs/OLs if there are.\n\t\t//\n\t\t// Imagine following list:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//     1.1.2 --------\n\t\t//     1.1.3 --------\n\t\t//       1.1.3.1 --------\n\t\t//   1.2 --------\n\t\t//     1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\t// Insert paragraph after item 1.1.1:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//\n\t\t// Lorem ipsum.\n\t\t//\n\t\t//     1.1.2 --------\n\t\t//     1.1.3 --------\n\t\t//       1.1.3.1 --------\n\t\t//   1.2 --------\n\t\t//     1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\t// In this case 1.1.2 has to become beginning of a new list.\n\t\t// We need to break list before 1.1.2 (obvious), then we need to break list also before 1.2.\n\t\t// Then we need to move those broken pieces one after another and merge:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//\n\t\t// Lorem ipsum.\n\t\t//\n\t\t// 1.1.2 --------\n\t\t//   1.1.3 --------\n\t\t//     1.1.3.1 --------\n\t\t// 1.2 --------\n\t\t//   1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\twhile ( viewPosition.parent.name == 'ul' || viewPosition.parent.name == 'ol' ) {\n\t\t\tviewPosition = viewWriter.breakContainer( viewPosition );\n\n\t\t\tif ( viewPosition.parent.name != 'li' ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Remove lists that are after inserted element.\n\t\t\t// They will be brought back later, below the inserted element.\n\t\t\tconst removeStart = viewPosition;\n\t\t\tconst removeEnd = viewWriter.createPositionAt( viewPosition.parent, 'end' );\n\n\t\t\t// Don't remove if there is nothing to remove.\n\t\t\tif ( !removeStart.isEqual( removeEnd ) ) {\n\t\t\t\tconst removed = viewWriter.remove( viewWriter.createRange( removeStart, removeEnd ) );\n\t\t\t\tlists.push( removed );\n\t\t\t}\n\n\t\t\tviewPosition = viewWriter.createPositionAfter( viewPosition.parent );\n\t\t}\n\n\t\t// Bring back removed lists.\n\t\tif ( lists.length > 0 ) {\n\t\t\tfor ( let i = 0; i < lists.length; i++ ) {\n\t\t\t\tconst previousList = viewPosition.nodeBefore;\n\t\t\t\tconst insertedRange = viewWriter.insert( viewPosition, lists[ i ] );\n\t\t\t\tviewPosition = insertedRange.end;\n\n\t\t\t\t// Don't merge first list! We want a split in that place (this is why this converter is introduced).\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tconst mergePos = mergeViewLists( viewWriter, previousList, previousList.nextSibling );\n\n\t\t\t\t\t// If `mergePos` is in `previousList` it means that the lists got merged.\n\t\t\t\t\t// In this case, we need to fix insert position.\n\t\t\t\t\tif ( mergePos && mergePos.parent == previousList ) {\n\t\t\t\t\t\tviewPosition.offset--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Merge last inserted list with element after it.\n\t\t\tmergeViewLists( viewWriter, viewPosition.nodeBefore, viewPosition.nodeAfter );\n\t\t}\n\t}\n}\n\n/**\n * A special model-to-view converter introduced by the {@link module:list/list~List list feature}. This converter takes care of\n * merging view lists after something is removed or moved from near them.\n *\n * Example:\n *\n *\t\t// Model:                        // View:\n *\t\t<listItem>foo</listItem>         <ul><li>foo</li></ul>\n *\t\t<paragraph>xxx</paragraph>       <p>xxx</p>\n *\t\t<listItem>bar</listItem>         <ul><li>bar</li></ul>\n *\n *\t\t// After change:                 // Correct view guaranteed by this converter:\n *\t\t<listItem>foo</listItem>         <ul>\n *\t\t<listItem>bar</listItem>             <li>foo</li>\n *\t\t                                     <li>bar</li>\n *\t\t                                 </ul>\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface.\n */\nexport function modelViewMergeAfter( evt, data, conversionApi ) {\n\tconst viewPosition = conversionApi.mapper.toViewPosition( data.position );\n\tconst viewItemPrev = viewPosition.nodeBefore;\n\tconst viewItemNext = viewPosition.nodeAfter;\n\n\t// Merge lists if something (remove, move) was done from inside of list.\n\t// Merging will be done only if both items are view lists of the same type.\n\t// The check is done inside the helper function.\n\tmergeViewLists( conversionApi.writer, viewItemPrev, viewItemNext );\n}\n\n/**\n * A view-to-model converter that converts the `<li>` view elements into the `listItem` model elements.\n *\n * To set correct values of the `listType` and `listIndent` attributes the converter:\n * * checks `<li>`'s parent,\n * * stores and increases the `conversionApi.store.indent` value when `<li>`'s sub-items are converted.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n */\nexport function viewModelConverter( evt, data, conversionApi ) {\n\tif ( conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\n\t\tconst writer = conversionApi.writer;\n\n\t\t// 1. Create `listItem` model element.\n\t\tconst listItem = writer.createElement( 'listItem' );\n\n\t\t// 2. Handle `listItem` model element attributes.\n\t\tconst indent = getIndent( data.viewItem );\n\n\t\twriter.setAttribute( 'listIndent', indent, listItem );\n\n\t\t// Set 'bulleted' as default. If this item is pasted into a context,\n\t\tconst type = data.viewItem.parent && data.viewItem.parent.name == 'ol' ? 'numbered' : 'bulleted';\n\t\twriter.setAttribute( 'listType', type, listItem );\n\n\t\t// Try to find allowed parent for list item.\n\t\tconst splitResult = conversionApi.splitToAllowedParent( listItem, data.modelCursor );\n\n\t\t// When there is no allowed parent it means that list item cannot be converted at current model position\n\t\t// and in any of position ancestors.\n\t\tif ( !splitResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\twriter.insert( listItem, splitResult.position );\n\n\t\tconst nextPosition = viewToModelListItemChildrenConverter( listItem, data.viewItem.getChildren(), conversionApi );\n\n\t\t// Result range starts before the first item and ends after the last.\n\t\tdata.modelRange = writer.createRange( data.modelCursor, nextPosition );\n\n\t\t// When `data.modelCursor` parent had to be split to insert list item...\n\t\tif ( splitResult.cursorParent ) {\n\t\t\t// Continue conversion in the split element.\n\t\t\tdata.modelCursor = writer.createPositionAt( splitResult.cursorParent, 0 );\n\t\t} else {\n\t\t\t// Otherwise continue conversion after the last list item.\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t}\n\t}\n}\n\n/**\n * A view-to-model converter for the `<ul>` and `<ol>` view elements that cleans the input view of garbage.\n * This is mostly to clean whitespaces from between the `<li>` view elements inside the view list element, however, also\n * incorrect data can be cleared if the view was incorrect.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n */\nexport function cleanList( evt, data, conversionApi ) {\n\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\t// Caching children because when we start removing them iterating fails.\n\t\tconst children = Array.from( data.viewItem.getChildren() );\n\n\t\tfor ( const child of children ) {\n\t\t\tconst isWrongElement = !( child.is( 'li' ) || isList( child ) );\n\n\t\t\tif ( isWrongElement ) {\n\t\t\t\tchild._remove();\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A view-to-model converter for the `<li>` elements that cleans whitespace formatting from the input view.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n */\nexport function cleanListItem( evt, data, conversionApi ) {\n\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\tif ( data.viewItem.childCount === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst children = [ ...data.viewItem.getChildren() ];\n\n\t\tlet foundList = false;\n\t\tlet firstNode = true;\n\n\t\tfor ( const child of children ) {\n\t\t\tif ( foundList && !isList( child ) ) {\n\t\t\t\tchild._remove();\n\t\t\t}\n\n\t\t\tif ( child.is( 'text' ) ) {\n\t\t\t\t// If this is the first node and it's a text node, left-trim it.\n\t\t\t\tif ( firstNode ) {\n\t\t\t\t\tchild._data = child.data.replace( /^\\s+/, '' );\n\t\t\t\t}\n\n\t\t\t\t// If this is the last text node before <ul> or <ol>, right-trim it.\n\t\t\t\tif ( !child.nextSibling || isList( child.nextSibling ) ) {\n\t\t\t\t\tchild._data = child.data.replace( /\\s+$/, '' );\n\t\t\t\t}\n\t\t\t} else if ( isList( child ) ) {\n\t\t\t\t// If this is a <ul> or <ol>, do not process it, just mark that we already visited list element.\n\t\t\t\tfoundList = true;\n\t\t\t}\n\n\t\t\tfirstNode = false;\n\t\t}\n\t}\n}\n\n/**\n * Returns a callback for model position to view position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `listItem` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n *\n * @see module:engine/conversion/mapper~Mapper#event:modelToViewPosition\n * @param {module:engine/view/view~View} view A view instance.\n * @returns {Function}\n */\nexport function modelToViewPosition( view ) {\n\treturn ( evt, data ) => {\n\t\tif ( data.isPhantom ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelItem = data.modelPosition.nodeBefore;\n\n\t\tif ( modelItem && modelItem.is( 'listItem' ) ) {\n\t\t\tconst viewItem = data.mapper.toViewElement( modelItem );\n\t\t\tconst topmostViewList = viewItem.getAncestors().find( isList );\n\t\t\tconst walker = view.createPositionAt( viewItem, 0 ).getWalker();\n\n\t\t\tfor ( const value of walker ) {\n\t\t\t\tif ( value.type == 'elementStart' && value.item.is( 'li' ) ) {\n\t\t\t\t\tdata.viewPosition = value.previousPosition;\n\n\t\t\t\t\tbreak;\n\t\t\t\t} else if ( value.type == 'elementEnd' && value.item == topmostViewList ) {\n\t\t\t\t\tdata.viewPosition = value.nextPosition;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * The callback for view position to model position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `<li>` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n *\n * @see module:engine/conversion/mapper~Mapper#event:viewToModelPosition\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function viewToModelPosition( model ) {\n\treturn ( evt, data ) => {\n\t\tconst viewPos = data.viewPosition;\n\t\tconst viewParent = viewPos.parent;\n\t\tconst mapper = data.mapper;\n\n\t\tif ( viewParent.name == 'ul' || viewParent.name == 'ol' ) {\n\t\t\t// Position is directly in <ul> or <ol>.\n\t\t\tif ( !viewPos.isAtEnd ) {\n\t\t\t\t// If position is not at the end, it must be before <li>.\n\t\t\t\t// Get that <li>, map it to `listItem` and set model position before that `listItem`.\n\t\t\t\tconst modelNode = mapper.toModelElement( viewPos.nodeAfter );\n\n\t\t\t\tdata.modelPosition = model.createPositionBefore( modelNode );\n\t\t\t} else {\n\t\t\t\t// Position is at the end of <ul> or <ol>, so there is no <li> after it to be mapped.\n\t\t\t\t// There is <li> before the position, but we cannot just map it to `listItem` and set model position after it,\n\t\t\t\t// because that <li> may contain nested items.\n\t\t\t\t// We will check \"model length\" of that <li>, in other words - how many `listItem`s are in that <li>.\n\t\t\t\tconst modelNode = mapper.toModelElement( viewPos.nodeBefore );\n\t\t\t\tconst modelLength = mapper.getModelLength( viewPos.nodeBefore );\n\n\t\t\t\t// Then we get model position before mapped `listItem` and shift it accordingly.\n\t\t\t\tdata.modelPosition = model.createPositionBefore( modelNode ).getShiftedBy( modelLength );\n\t\t\t}\n\n\t\t\tevt.stop();\n\t\t} else if (\n\t\t\tviewParent.name == 'li' &&\n\t\t\tviewPos.nodeBefore &&\n\t\t\t( viewPos.nodeBefore.name == 'ul' || viewPos.nodeBefore.name == 'ol' )\n\t\t) {\n\t\t\t// In most cases when view position is in <li> it is in text and this is a correct position.\n\t\t\t// However, if position is after <ul> or <ol> we have to fix it -- because in model <ul>/<ol> are not in the `listItem`.\n\t\t\tconst modelNode = mapper.toModelElement( viewParent );\n\n\t\t\t// Check all <ul>s and <ol>s that are in the <li> but before mapped position.\n\t\t\t// Get model length of those elements and then add it to the offset of `listItem` mapped to the original <li>.\n\t\t\tlet modelLength = 1; // Starts from 1 because the original <li> has to be counted in too.\n\t\t\tlet viewList = viewPos.nodeBefore;\n\n\t\t\twhile ( viewList && isList( viewList ) ) {\n\t\t\t\tmodelLength += mapper.getModelLength( viewList );\n\n\t\t\t\tviewList = viewList.previousSibling;\n\t\t\t}\n\n\t\t\tdata.modelPosition = model.createPositionBefore( modelNode ).getShiftedBy( modelLength );\n\n\t\t\tevt.stop();\n\t\t}\n\t};\n}\n\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states.\n *\n * In the example below, there is a correct list structure.\n * Then the middle element is removed so the list structure will become incorrect:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>Item 2</listItem>   <--- this is removed.\n *\t\t<listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n *\n * The list structure after the middle element is removed:\n *\n * \t\t<listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n *\n * Should become:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>Item 3</listItem>   <--- note that indent got post-fixed.\n *\n * @param {module:engine/model/model~Model} model The data model.\n * @param {module:engine/model/writer~Writer} writer The writer to do changes with.\n * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n */\nexport function modelChangePostFixer( model, writer ) {\n\tconst changes = model.document.differ.getChanges();\n\tconst itemToListHead = new Map();\n\n\tlet applied = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name == 'listItem' ) {\n\t\t\t_addListToFix( entry.position );\n\t\t} else if ( entry.type == 'insert' && entry.name != 'listItem' ) {\n\t\t\tif ( entry.name != '$text' ) {\n\t\t\t\t// In case of renamed element.\n\t\t\t\tconst item = entry.position.nodeAfter;\n\n\t\t\t\tif ( item.hasAttribute( 'listIndent' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listIndent', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tif ( item.hasAttribute( 'listType' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listType', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tfor ( const innerItem of Array.from( model.createRangeIn( item ) ).filter( e => e.item.is( 'listItem' ) ) ) {\n\t\t\t\t\t_addListToFix( innerItem.previousPosition );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst posAfter = entry.position.getShiftedBy( entry.length );\n\n\t\t\t_addListToFix( posAfter );\n\t\t} else if ( entry.type == 'remove' && entry.name == 'listItem' ) {\n\t\t\t_addListToFix( entry.position );\n\t\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'listIndent' ) {\n\t\t\t_addListToFix( entry.range.start );\n\t\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'listType' ) {\n\t\t\t_addListToFix( entry.range.start );\n\t\t}\n\t}\n\n\tfor ( const listHead of itemToListHead.values() ) {\n\t\t_fixListIndents( listHead );\n\t\t_fixListTypes( listHead );\n\t}\n\n\treturn applied;\n\n\tfunction _addListToFix( position ) {\n\t\tconst prev = position.nodeBefore;\n\n\t\tif ( !prev || !prev.is( 'listItem' ) ) {\n\t\t\tconst item = position.nodeAfter;\n\n\t\t\tif ( item && item.is( 'listItem' ) ) {\n\t\t\t\titemToListHead.set( item, item );\n\t\t\t}\n\t\t} else {\n\t\t\tlet listHead = prev;\n\n\t\t\tif ( itemToListHead.has( listHead ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twhile ( listHead.previousSibling && listHead.previousSibling.is( 'listItem' ) ) {\n\t\t\t\tlistHead = listHead.previousSibling;\n\n\t\t\t\tif ( itemToListHead.has( listHead ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titemToListHead.set( position.nodeBefore, listHead );\n\t\t}\n\t}\n\n\tfunction _fixListIndents( item ) {\n\t\tlet maxIndent = 0;\n\t\tlet fixBy = null;\n\n\t\twhile ( item && item.is( 'listItem' ) ) {\n\t\t\tconst itemIndent = item.getAttribute( 'listIndent' );\n\n\t\t\tif ( itemIndent > maxIndent ) {\n\t\t\t\tlet newIndent;\n\n\t\t\t\tif ( fixBy === null ) {\n\t\t\t\t\tfixBy = itemIndent - maxIndent;\n\t\t\t\t\tnewIndent = maxIndent;\n\t\t\t\t} else {\n\t\t\t\t\tif ( fixBy > itemIndent ) {\n\t\t\t\t\t\tfixBy = itemIndent;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewIndent = itemIndent - fixBy;\n\t\t\t\t}\n\n\t\t\t\twriter.setAttribute( 'listIndent', newIndent, item );\n\n\t\t\t\tapplied = true;\n\t\t\t} else {\n\t\t\t\tfixBy = null;\n\t\t\t\tmaxIndent = item.getAttribute( 'listIndent' ) + 1;\n\t\t\t}\n\n\t\t\titem = item.nextSibling;\n\t\t}\n\t}\n\n\tfunction _fixListTypes( item ) {\n\t\tlet typesStack = [];\n\t\tlet prev = null;\n\n\t\twhile ( item && item.is( 'listItem' ) ) {\n\t\t\tconst itemIndent = item.getAttribute( 'listIndent' );\n\n\t\t\tif ( prev && prev.getAttribute( 'listIndent' ) > itemIndent ) {\n\t\t\t\ttypesStack = typesStack.slice( 0, itemIndent + 1 );\n\t\t\t}\n\n\t\t\tif ( itemIndent != 0 ) {\n\t\t\t\tif ( typesStack[ itemIndent ] ) {\n\t\t\t\t\tconst type = typesStack[ itemIndent ];\n\n\t\t\t\t\tif ( item.getAttribute( 'listType' ) != type ) {\n\t\t\t\t\t\twriter.setAttribute( 'listType', type, item );\n\n\t\t\t\t\t\tapplied = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttypesStack[ itemIndent ] = item.getAttribute( 'listType' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprev = item;\n\t\t\titem = item.nextSibling;\n\t\t}\n\t}\n}\n\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>A</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>B^</listItem>\n *\t\t// At ^ paste:  <listItem listType=\"bulleted\" listIndent=4>X</listItem>\n *\t\t//              <listItem listType=\"bulleted\" listIndent=5>Y</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>C</listItem>\n *\n * Should become:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>A</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>BX</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>Y/listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>C</listItem>\n *\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Array} args Arguments of {@link module:engine/model/model~Model#insertContent}.\n */\nexport function modelIndentPasteFixer( evt, [ content, selectable ] ) {\n\t// Check whether inserted content starts from a `listItem`. If it does not, it means that there are some other\n\t// elements before it and there is no need to fix indents, because even if we insert that content into a list,\n\t// that list will be broken.\n\t// Note: we also need to handle singular elements because inserting item with indent 0 into 0,1,[],2\n\t// would create incorrect model.\n\tlet item = content.is( 'documentFragment' ) ? content.getChild( 0 ) : content;\n\n\tlet selection;\n\n\tif ( !selectable ) {\n\t\tselection = this.document.selection;\n\t} else {\n\t\tselection = this.createSelection( selectable );\n\t}\n\n\tif ( item && item.is( 'listItem' ) ) {\n\t\t// Get a reference list item. Inserted list items will be fixed according to that item.\n\t\tconst pos = selection.getFirstPosition();\n\t\tlet refItem = null;\n\n\t\tif ( pos.parent.is( 'listItem' ) ) {\n\t\t\trefItem = pos.parent;\n\t\t} else if ( pos.nodeBefore && pos.nodeBefore.is( 'listItem' ) ) {\n\t\t\trefItem = pos.nodeBefore;\n\t\t}\n\n\t\t// If there is `refItem` it means that we do insert list items into an existing list.\n\t\tif ( refItem ) {\n\t\t\t// First list item in `data` has indent equal to 0 (it is a first list item). It should have indent equal\n\t\t\t// to the indent of reference item. We have to fix the first item and all of it's children and following siblings.\n\t\t\t// Indent of all those items has to be adjusted to reference item.\n\t\t\tconst indentChange = refItem.getAttribute( 'listIndent' );\n\n\t\t\t// Fix only if there is anything to fix.\n\t\t\tif ( indentChange > 0 ) {\n\t\t\t\t// Adjust indent of all \"first\" list items in inserted data.\n\t\t\t\twhile ( item && item.is( 'listItem' ) ) {\n\t\t\t\t\titem._setAttribute( 'listIndent', item.getAttribute( 'listIndent' ) + indentChange );\n\n\t\t\t\t\titem = item.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Helper function that converts children of a given `<li>` view element into corresponding model elements.\n// The function maintains proper order of elements if model `listItem` is split during the conversion\n// due to block children conversion.\n//\n// @param {module:engine/model/element~Element} listItemModel List item model element to which converted children will be inserted.\n// @param {Iterable.<module:engine/view/node~Node>} viewChildren View elements which will be converted.\n// @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n// @returns {module:engine/model/position~Position} Position on which next elements should be inserted after children conversion.\nfunction viewToModelListItemChildrenConverter( listItemModel, viewChildren, conversionApi ) {\n\tconst { writer, schema } = conversionApi;\n\n\t// A position after the last inserted `listItem`.\n\tlet nextPosition = writer.createPositionAfter( listItemModel );\n\n\t// Check all children of the converted `<li>`. At this point we assume there are no \"whitespace\" view text nodes\n\t// in view list, between view list items. This should be handled by `<ul>` and `<ol>` converters.\n\tfor ( const child of viewChildren ) {\n\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t\t\t// If the children is a list, we will insert its conversion result after currently handled `listItem`.\n\t\t\t// Then, next insertion position will be set after all the new list items (and maybe other elements if\n\t\t\t// something split list item).\n\t\t\t//\n\t\t\t// If this is a list, we expect that some `listItem`s and possibly other blocks will be inserted, however `.modelCursor`\n\t\t\t// should be set after last `listItem` (or block). This is why it feels safe to use it as `nextPosition`\n\t\t\tnextPosition = conversionApi.convertItem( child, nextPosition ).modelCursor;\n\t\t} else {\n\t\t\t// If this is not a list, try inserting content at the end of the currently handled `listItem`.\n\t\t\tconst result = conversionApi.convertItem( child, writer.createPositionAt( listItemModel, 'end' ) );\n\n\t\t\t// It may end up that the current `listItem` becomes split (if that content cannot be inside `listItem`). For example:\n\t\t\t//\n\t\t\t// <li><p>Foo</p></li>\n\t\t\t//\n\t\t\t// will be converted to:\n\t\t\t//\n\t\t\t// <listItem></listItem><paragraph>Foo</paragraph><listItem></listItem>\n\t\t\t//\n\t\t\tconst convertedChild = result.modelRange.start.nodeAfter;\n\t\t\tconst wasSplit = convertedChild && convertedChild.is( 'element' ) && !schema.checkChild( listItemModel, convertedChild.name );\n\n\t\t\tif ( wasSplit ) {\n\t\t\t\t// As `lastListItem` got split, we need to update it to the second part of the split `listItem` element.\n\t\t\t\t//\n\t\t\t\t// `modelCursor` should be set to a position where the conversion should continue. There are multiple possible scenarios\n\t\t\t\t// that may happen. Usually, `modelCursor` (marked as `#` below) would point to the second list item after conversion:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><p>Foo</p></li>` -> `<listItem></listItem><paragraph>Foo</paragraph><listItem>#</listItem>`\n\t\t\t\t//\n\t\t\t\t// However, in some cases, like auto-paragraphing, the position is placed at the end of the block element:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><div>Foo</div></li>` -> `<listItem></listItem><paragraph>Foo#</paragraph><listItem></listItem>`\n\t\t\t\t//\n\t\t\t\t// or after an element if another element broken auto-paragraphed element:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><div><h2>Foo</h2></div></li>` -> `<listItem></listItem><heading1>Foo</heading1>#<listItem></listItem>`\n\t\t\t\t//\n\t\t\t\t// We need to check for such cases and use proper list item and position based on it.\n\t\t\t\t//\n\t\t\t\tif ( result.modelCursor.parent.is( 'listItem' ) ) {\n\t\t\t\t\t// (1).\n\t\t\t\t\tlistItemModel = result.modelCursor.parent;\n\t\t\t\t} else {\n\t\t\t\t\t// (2), (3).\n\t\t\t\t\tlistItemModel = findNextListItem( result.modelCursor );\n\t\t\t\t}\n\n\t\t\t\tnextPosition = writer.createPositionAfter( listItemModel );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nextPosition;\n}\n\n// Helper function that seeks for a next list item starting from given `startPosition`.\nfunction findNextListItem( startPosition ) {\n\tconst treeWalker = new TreeWalker( { startPosition } );\n\n\tlet value;\n\n\tdo {\n\t\tvalue = treeWalker.next();\n\t} while ( !value.value.item.is( 'listItem' ) );\n\n\treturn value.value.item;\n}\n\n// Helper function that takes all children of given `viewRemovedItem` and moves them in a correct place, according\n// to other given parameters.\nfunction hoistNestedLists( nextIndent, modelRemoveStartPosition, viewRemoveStartPosition, viewRemovedItem, conversionApi, model ) {\n\t// Find correct previous model list item element.\n\t// The element has to have either same or smaller indent than given reference indent.\n\t// This will be the model element which will get nested items (if it has smaller indent) or sibling items (if it has same indent).\n\t// Keep in mind that such element might not be found, if removed item was the first item.\n\tconst prevModelItem = getSiblingListItem( modelRemoveStartPosition.nodeBefore, {\n\t\tsameIndent: true,\n\t\tsmallerIndent: true,\n\t\tlistIndent: nextIndent,\n\t\tfoo: 'b'\n\t} );\n\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Indent of found element or `null` if the element has not been found.\n\tconst prevIndent = prevModelItem ? prevModelItem.getAttribute( 'listIndent' ) : null;\n\n\tlet insertPosition;\n\n\tif ( !prevModelItem ) {\n\t\t// If element has not been found, simply insert lists at the position where the removed item was:\n\t\t//\n\t\t// Lorem ipsum.\n\t\t// 1 --------           <--- this is removed, no previous list item, put nested items in place of removed item.\n\t\t//   1.1 --------       <--- this is reference indent.\n\t\t//     1.1.1 --------\n\t\t//     1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// Lorem ipsum.\n\t\t// 1.1 --------\n\t\t//   1.1.1 --------\n\t\t//   1.1.2 --------\n\t\t// 1.2 --------\n\t\tinsertPosition = viewRemoveStartPosition;\n\t} else if ( prevIndent == nextIndent ) {\n\t\t// If element has been found and has same indent as reference indent it means that nested items should\n\t\t// become siblings of found element:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//   1.2 --------       <--- this is `prevModelItem`.\n\t\t// 2 --------           <--- this is removed, previous list item has indent same as reference indent.\n\t\t//   2.1 --------       <--- this is reference indent, this and 2.2 should become siblings of 1.2.\n\t\t//   2.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//   1.2 --------\n\t\t//   2.1 --------\n\t\t//   2.2 --------\n\t\tconst prevViewList = mapper.toViewElement( prevModelItem ).parent;\n\t\tinsertPosition = viewWriter.createPositionAfter( prevViewList );\n\t} else {\n\t\t// If element has been found and has smaller indent as reference indent it means that nested items\n\t\t// should become nested items of found item:\n\t\t//\n\t\t// 1 --------           <--- this is `prevModelItem`.\n\t\t//   1.1 --------       <--- this is removed, previous list item has indent smaller than reference indent.\n\t\t//     1.1.1 --------   <--- this is reference indent, this and 1.1.1 should become nested items of 1.\n\t\t//     1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1.1 --------\n\t\t//   1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Note: in this case 1.1.1 have indent 2 while 1 have indent 0. In model that should not be possible,\n\t\t// because following item may have indent bigger only by one. But this is fixed by postfixer.\n\t\tconst modelPosition = model.createPositionAt( prevModelItem, 'end' );\n\t\tinsertPosition = mapper.toViewPosition( modelPosition );\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Handle multiple lists. This happens if list item has nested numbered and bulleted lists. Following lists\n\t// are inserted after the first list (no need to recalculate insertion position for them).\n\tfor ( const child of [ ...viewRemovedItem.getChildren() ] ) {\n\t\tif ( isList( child ) ) {\n\t\t\tinsertPosition = viewWriter.move( viewWriter.createRangeOn( child ), insertPosition ).end;\n\n\t\t\tmergeViewLists( viewWriter, child, child.nextSibling );\n\t\t\tmergeViewLists( viewWriter, child.previousSibling, child );\n\t\t}\n\t}\n}\n\n// Checks if view element is a list type (ul or ol).\n//\n// @param {module:engine/view/element~Element} viewElement\n// @returns {Boolean}\nfunction isList( viewElement ) {\n\treturn viewElement.is( 'ol' ) || viewElement.is( 'ul' );\n}\n\n// Calculates the indent value for a list item. Handles HTML compliant and non-compliant lists.\n//\n// Also, fixes non HTML compliant lists indents:\n//\n//\t\tbefore:                                     fixed list:\n//\t\tOL                                          OL\n//\t\t|-> LI (parent LIs: 0)                      |-> LI     (indent: 0)\n//\t\t    |-> OL                                  |-> OL\n//\t\t        |-> OL                                  |\n//\t\t        |   |-> OL                              |\n//\t\t        |       |-> OL                          |\n//\t\t        |           |-> LI (parent LIs: 1)      |-> LI (indent: 1)\n//\t\t        |-> LI (parent LIs: 1)                  |-> LI (indent: 1)\n//\n//\t\tbefore:                                     fixed list:\n//\t\tOL                                          OL\n//\t\t|-> OL                                      |\n//\t\t    |-> OL                                  |\n//\t\t         |-> OL                             |\n//\t\t             |-> LI (parent LIs: 0)         |-> LI        (indent: 0)\n//\n//\t\tbefore:                                     fixed list:\n//\t\tOL                                          OL\n//\t\t|-> LI (parent LIs: 0)                      |-> LI         (indent: 0)\n//\t\t|-> OL                                          |-> OL\n//\t\t    |-> LI (parent LIs: 0)                          |-> LI (indent: 1)\n//\n// @param {module:engine/view/element~Element} listItem\n// @param {Object} conversionStore\n// @returns {Number}\nfunction getIndent( listItem ) {\n\tlet indent = 0;\n\n\tlet parent = listItem.parent;\n\n\twhile ( parent ) {\n\t\t// Each LI in the tree will result in an increased indent for HTML compliant lists.\n\t\tif ( parent.is( 'li' ) ) {\n\t\t\tindent++;\n\t\t} else {\n\t\t\t// If however the list is nested in other list we should check previous sibling of any of the list elements...\n\t\t\tconst previousSibling = parent.previousSibling;\n\n\t\t\t// ...because the we might need increase its indent:\n\t\t\t//\t\tbefore:                           fixed list:\n\t\t\t//\t\tOL                                OL\n\t\t\t//\t\t|-> LI (parent LIs: 0)            |-> LI         (indent: 0)\n\t\t\t//\t\t|-> OL                                |-> OL\n\t\t\t//\t\t    |-> LI (parent LIs: 0)                |-> LI (indent: 1)\n\t\t\tif ( previousSibling && previousSibling.is( 'li' ) ) {\n\t\t\t\tindent++;\n\t\t\t}\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n\n\treturn indent;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/listediting\n */\n\nimport ListCommand from './listcommand';\nimport IndentCommand from './indentcommand';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\nimport {\n\tcleanList,\n\tcleanListItem,\n\tmodelViewInsertion,\n\tmodelViewChangeType,\n\tmodelViewMergeAfterChangeType,\n\tmodelViewMergeAfter,\n\tmodelViewRemove,\n\tmodelViewSplitOnInsert,\n\tmodelViewChangeIndent,\n\tmodelChangePostFixer,\n\tmodelIndentPasteFixer,\n\tviewModelConverter,\n\tmodelToViewPosition,\n\tviewToModelPosition\n} from './converters';\n\n/**\n * The engine of the list feature. It handles creating, editing and removing lists and list items.\n *\n * It registers the `'numberedList'`, `'bulletedList'`, `'indentList'` and `'outdentList'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ListEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ListEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Paragraph ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Schema.\n\t\t// Note: in case `$block` will ever be allowed in `listItem`, keep in mind that this feature\n\t\t// uses `Selection#getSelectedBlocks()` without any additional processing to obtain all selected list items.\n\t\t// If there are blocks allowed inside list item, algorithms using `getSelectedBlocks()` will have to be modified.\n\t\teditor.model.schema.register( 'listItem', {\n\t\t\tinheritAllFrom: '$block',\n\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n\t\t} );\n\n\t\t// Converters.\n\t\tconst data = editor.data;\n\t\tconst editing = editor.editing;\n\n\t\teditor.model.document.registerPostFixer( writer => modelChangePostFixer( editor.model, writer ) );\n\n\t\tediting.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t\tdata.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\n\t\tediting.mapper.on( 'modelToViewPosition', modelToViewPosition( editing.view ) );\n\t\tediting.mapper.on( 'viewToModelPosition', viewToModelPosition( editor.model ) );\n\t\tdata.mapper.on( 'modelToViewPosition', modelToViewPosition( editing.view ) );\n\n\t\tediting.downcastDispatcher.on( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\tediting.downcastDispatcher.on( 'insert:listItem', modelViewInsertion( editor.model ) );\n\t\tdata.downcastDispatcher.on( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\tdata.downcastDispatcher.on( 'insert:listItem', modelViewInsertion( editor.model ) );\n\n\t\tediting.downcastDispatcher.on( 'attribute:listType:listItem', modelViewChangeType, { priority: 'high' } );\n\t\tediting.downcastDispatcher.on( 'attribute:listType:listItem', modelViewMergeAfterChangeType, { priority: 'low' } );\n\t\tediting.downcastDispatcher.on( 'attribute:listIndent:listItem', modelViewChangeIndent( editor.model ) );\n\n\t\tediting.downcastDispatcher.on( 'remove:listItem', modelViewRemove( editor.model ) );\n\t\tediting.downcastDispatcher.on( 'remove', modelViewMergeAfter, { priority: 'low' } );\n\n\t\tdata.upcastDispatcher.on( 'element:ul', cleanList, { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:ol', cleanList, { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:li', cleanListItem, { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:li', viewModelConverter );\n\n\t\t// Fix indentation of pasted items.\n\t\teditor.model.on( 'insertContent', modelIndentPasteFixer, { priority: 'high' } );\n\n\t\t// Register commands for numbered and bulleted list.\n\t\teditor.commands.add( 'numberedList', new ListCommand( editor, 'numbered' ) );\n\t\teditor.commands.add( 'bulletedList', new ListCommand( editor, 'bulleted' ) );\n\n\t\t// Register commands for indenting.\n\t\teditor.commands.add( 'indentList', new IndentCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'outdentList', new IndentCommand( editor, 'backward' ) );\n\n\t\tconst viewDocument = editing.view.document;\n\n\t\t// Overwrite default Enter key behavior.\n\t\t// If Enter key is pressed with selection collapsed in empty list item, outdent it instead of breaking it.\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tconst doc = this.editor.model.document;\n\t\t\tconst positionParent = doc.selection.getLastPosition().parent;\n\n\t\t\tif ( doc.selection.isCollapsed && positionParent.name == 'listItem' && positionParent.isEmpty ) {\n\t\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\n\t\t// Overwrite default Backspace key behavior.\n\t\t// If Backspace key is pressed with selection collapsed on first position in first list item, outdent it. #83\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t// Check conditions from those that require less computations like those immediately available.\n\t\t\tif ( data.direction !== 'backward' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selection = this.editor.model.document.selection;\n\n\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\t\tif ( !firstPosition.isAtStart ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst positionParent = firstPosition.parent;\n\n\t\t\tif ( positionParent.name !== 'listItem' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst previousIsAListItem = positionParent.previousSibling && positionParent.previousSibling.name === 'listItem';\n\n\t\t\tif ( previousIsAListItem ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\tdata.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { priority: 'high' } );\n\n\t\tconst getCommandExecuter = commandName => {\n\t\t\treturn ( data, cancel ) => {\n\t\t\t\tconst command = this.editor.commands.get( commandName );\n\n\t\t\t\tif ( command.isEnabled ) {\n\t\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\t\tcancel();\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\teditor.keystrokes.set( 'Tab', getCommandExecuter( 'indentList' ) );\n\t\teditor.keystrokes.set( 'Shift+Tab', getCommandExecuter( 'outdentList' ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst commands = this.editor.commands;\n\n\t\tconst indent = commands.get( 'indent' );\n\t\tconst outdent = commands.get( 'outdent' );\n\n\t\tif ( indent ) {\n\t\t\tindent.registerChildCommand( commands.get( 'indentList' ) );\n\t\t}\n\n\t\tif ( outdent ) {\n\t\t\toutdent.registerChildCommand( commands.get( 'outdentList' ) );\n\t\t}\n\t}\n}\n\nfunction getViewListItemLength( element ) {\n\tlet length = 1;\n\n\tfor ( const child of element.getChildren() ) {\n\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t\t\tfor ( const item of child.getChildren() ) {\n\t\t\t\tlength += getViewListItemLength( item );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn length;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tabletoolbar\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport {\n    getSelectedTableWidget,\n    getTableWidgetAncestor\n} from './utils';\nimport WidgetToolbarRepository from '@ckeditor/ckeditor5-widget/src/widgettoolbarrepository';\n/**\n * The table toolbar class. It creates toolbars for the table feature and its content (for now only for a table cell content).\n *\n * Table toolbar shows up when a table widget is selected. Its components (e.g. buttons) are created based on the\n * {@link module:table/table~TableConfig#tableToolbar `table.tableToolbar` configuration option}.\n *\n * Table content toolbar shows up when the selection is inside the content of a table. It creates its component based on the\n * {@link module:table/table~TableConfig#contentToolbar `table.contentToolbar` configuration option}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableToolbar extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [WidgetToolbarRepository];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'TableToolbar';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    afterInit() {\n        const editor = this.editor;\n        const t = editor.t;\n        const widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n        const tableContentToolbarItems = editor.config.get('table.contentToolbar');\n        const tableToolbarItems = editor.config.get('table.tableToolbar');\n        if (tableContentToolbarItems) {\n            widgetToolbarRepository.register('tableContent', {\n                ariaLabel: t('Table toolbar'),\n                items: tableContentToolbarItems,\n                getRelatedElement: getTableWidgetAncestor\n            });\n        }\n        if (tableToolbarItems) {\n            widgetToolbarRepository.register('table', {\n                ariaLabel: t('Table toolbar'),\n                items: tableToolbarItems,\n                getRelatedElement: getSelectedTableWidget\n            });\n        }\n    }\n}    /**\n * Items to be placed in the table content toolbar.\n * The {@link module:table/tabletoolbar~TableToolbar} plugin is required to make this toolbar working.\n *\n * Assuming that you use the {@link module:table/tableui~TableUI} feature, the following toolbar items will be available\n * in {@link module:ui/componentfactory~ComponentFactory}:\n *\n * * `'tableRow'`,\n * * `'tableColumn'`,\n * * `'mergeTableCells'`.\n *\n * You can thus configure the toolbar like this:\n *\n *\t\tconst tableConfig = {\n *\t\t\tcontentToolbar: [ 'tableRow', 'tableColumn', 'mergeTableCells' ]\n *\t\t};\n *\n * Of course, the same buttons can also be used in the\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:table/table~TableConfig#contentToolbar\n */\n     /**\n * Items to be placed in the table toolbar.\n * The {@link module:table/tabletoolbar~TableToolbar} plugin is required to make this toolbar working.\n *\n * You can thus configure the toolbar like this:\n *\n *\t\tconst tableConfig = {\n *\t\t\ttableToolbar: [ 'blockQuote' ]\n *\t\t};\n *\n * Of course, the same buttons can also be used in the\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:table/table~TableConfig#tableToolbar\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/upcasttable\n */\n\nimport { createEmptyTableCell } from '../commands/utils';\n\n/**\n * View table element to model table element conversion helper.\n *\n * This conversion helper converts the table element as well as table rows.\n *\n * @returns {Function} Conversion helper.\n */\nexport default function upcastTable() {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'element:table', ( evt, data, conversionApi ) => {\n\t\t\tconst viewTable = data.viewItem;\n\n\t\t\t// When element was already consumed then skip it.\n\t\t\tif ( !conversionApi.consumable.test( viewTable, { name: true } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { rows, headingRows, headingColumns } = scanTable( viewTable );\n\n\t\t\t// Only set attributes if values is greater then 0.\n\t\t\tconst attributes = {};\n\n\t\t\tif ( headingColumns ) {\n\t\t\t\tattributes.headingColumns = headingColumns;\n\t\t\t}\n\n\t\t\tif ( headingRows ) {\n\t\t\t\tattributes.headingRows = headingRows;\n\t\t\t}\n\n\t\t\tconst table = conversionApi.writer.createElement( 'table', attributes );\n\n\t\t\t// Insert element on allowed position.\n\t\t\tconst splitResult = conversionApi.splitToAllowedParent( table, data.modelCursor );\n\n\t\t\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\t\t\tif ( !splitResult ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.writer.insert( table, splitResult.position );\n\t\t\tconversionApi.consumable.consume( viewTable, { name: true } );\n\n\t\t\tif ( rows.length ) {\n\t\t\t\t// Upcast table rows in proper order (heading rows first).\n\t\t\t\trows.forEach( row => conversionApi.convertItem( row, conversionApi.writer.createPositionAt( table, 'end' ) ) );\n\t\t\t} else {\n\t\t\t\t// Create one row and one table cell for empty table.\n\t\t\t\tconst row = conversionApi.writer.createElement( 'tableRow' );\n\t\t\t\tconversionApi.writer.insert( row, conversionApi.writer.createPositionAt( table, 'end' ) );\n\n\t\t\t\tcreateEmptyTableCell( conversionApi.writer, conversionApi.writer.createPositionAt( row, 'end' ) );\n\t\t\t}\n\n\t\t\t// Set conversion result range.\n\t\t\tdata.modelRange = conversionApi.writer.createRange(\n\t\t\t\t// Range should start before inserted element\n\t\t\t\tconversionApi.writer.createPositionBefore( table ),\n\t\t\t\t// Should end after but we need to take into consideration that children could split our\n\t\t\t\t// element, so we need to move range after parent of the last converted child.\n\t\t\t\t// before: <allowed>[]</allowed>\n\t\t\t\t// after: <allowed>[<converted><child></child></converted><child></child><converted>]</converted></allowed>\n\t\t\t\tconversionApi.writer.createPositionAfter( table )\n\t\t\t);\n\n\t\t\t// Now we need to check where the modelCursor should be.\n\t\t\t// If we had to split parent to insert our element then we want to continue conversion inside split parent.\n\t\t\t//\n\t\t\t// before: <allowed><notAllowed>[]</notAllowed></allowed>\n\t\t\t// after:  <allowed><notAllowed></notAllowed><converted></converted><notAllowed>[]</notAllowed></allowed>\n\t\t\tif ( splitResult.cursorParent ) {\n\t\t\t\tdata.modelCursor = conversionApi.writer.createPositionAt( splitResult.cursorParent, 0 );\n\n\t\t\t\t// Otherwise just continue after inserted element.\n\t\t\t} else {\n\t\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t\t}\n\t\t} );\n\t};\n}\n\nexport function upcastTableCell( elementName ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( `element:${ elementName }`, ( evt, data, conversionApi ) => {\n\t\t\tconst viewTableCell = data.viewItem;\n\n\t\t\t// When element was already consumed then skip it.\n\t\t\tif ( !conversionApi.consumable.test( viewTableCell, { name: true } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tableCell = conversionApi.writer.createElement( 'tableCell' );\n\n\t\t\t// Insert element on allowed position.\n\t\t\tconst splitResult = conversionApi.splitToAllowedParent( tableCell, data.modelCursor );\n\n\t\t\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\t\t\tif ( !splitResult ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.writer.insert( tableCell, splitResult.position );\n\t\t\tconversionApi.consumable.consume( viewTableCell, { name: true } );\n\n\t\t\tconst modelCursor = conversionApi.writer.createPositionAt( tableCell, 0 );\n\t\t\tconversionApi.convertChildren( viewTableCell, modelCursor );\n\n\t\t\t// Ensure a paragraph in the model for empty table cells.\n\t\t\tif ( !tableCell.childCount ) {\n\t\t\t\tconversionApi.writer.insertElement( 'paragraph', modelCursor );\n\t\t\t}\n\n\t\t\t// Set conversion result range.\n\t\t\tdata.modelRange = conversionApi.writer.createRange(\n\t\t\t\t// Range should start before inserted element\n\t\t\t\tconversionApi.writer.createPositionBefore( tableCell ),\n\t\t\t\t// Should end after but we need to take into consideration that children could split our\n\t\t\t\t// element, so we need to move range after parent of the last converted child.\n\t\t\t\t// before: <allowed>[]</allowed>\n\t\t\t\t// after: <allowed>[<converted><child></child></converted><child></child><converted>]</converted></allowed>\n\t\t\t\tconversionApi.writer.createPositionAfter( tableCell )\n\t\t\t);\n\n\t\t\t// Continue after inserted element.\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t} );\n\t};\n}\n\n// Scans table rows and extracts required metadata from the table:\n//\n// headingRows    - the number of rows that goes as table header.\n// headingColumns - max number of row headings.\n// rows           - sorted `<tr>`s as they should go into the model - ie. if `<thead>` is inserted after `<tbody>` in the view.\n//\n// @param {module:engine/view/element~Element} viewTable\n// @returns {{headingRows, headingColumns, rows}}\nfunction scanTable( viewTable ) {\n\tconst tableMeta = {\n\t\theadingRows: 0,\n\t\theadingColumns: 0\n\t};\n\n\t// The `<tbody>` and <thead> sections in the DOM do not have to be in order `<thead>` -> `<tbody>` and there might be more then one of\n\t// them.\n\t// As the model does not have those sections, rows from different sections must be sorted.\n\t// For example, below is a valid HTML table:\n\t//\n\t//\t\t<table>\n\t//\t\t\t<tbody><tr><td>2</td></tr></tbody>\n\t//\t\t\t<thead><tr><td>1</td></tr></thead>\n\t//\t\t\t<tbody><tr><td>3</td></tr></tbody>\n\t//\t\t</table>\n\t//\n\t// But browsers will render rows in order as: 1 as heading and 2 and 3 as (body).\n\tconst headRows = [];\n\tconst bodyRows = [];\n\n\t// Currently the editor does not support more then one <thead> section.\n\t// Only the first <thead> from the view will be used as heading rows and others will be converted to body rows.\n\tlet firstTheadElement;\n\n\tfor ( const tableChild of Array.from( viewTable.getChildren() ) ) {\n\t\t// Only <thead>, <tbody> & <tfoot> from allowed table children can have <tr>s.\n\t\t// The else is for future purposes (mainly <caption>).\n\t\tif ( tableChild.name === 'tbody' || tableChild.name === 'thead' || tableChild.name === 'tfoot' ) {\n\t\t\t// Save the first <thead> in the table as table header - all other ones will be converted to table body rows.\n\t\t\tif ( tableChild.name === 'thead' && !firstTheadElement ) {\n\t\t\t\tfirstTheadElement = tableChild;\n\t\t\t}\n\n\t\t\t// There might be some extra empty text nodes between the `tr`s.\n\t\t\t// Make sure further code operates on `tr`s only. (#145)\n\t\t\tconst trs = Array.from( tableChild.getChildren() ).filter( el => el.is( 'element', 'tr' ) );\n\n\t\t\tfor ( const tr of trs ) {\n\t\t\t\t// This <tr> is a child of a first <thead> element.\n\t\t\t\tif ( tr.parent.name === 'thead' && tr.parent === firstTheadElement ) {\n\t\t\t\t\ttableMeta.headingRows++;\n\t\t\t\t\theadRows.push( tr );\n\t\t\t\t} else {\n\t\t\t\t\tbodyRows.push( tr );\n\t\t\t\t\t// For other rows check how many column headings this row has.\n\n\t\t\t\t\tconst headingCols = scanRowForHeadingColumns( tr, tableMeta, firstTheadElement );\n\n\t\t\t\t\tif ( headingCols > tableMeta.headingColumns ) {\n\t\t\t\t\t\ttableMeta.headingColumns = headingCols;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\ttableMeta.rows = [ ...headRows, ...bodyRows ];\n\n\treturn tableMeta;\n}\n\n// Scans `<tr>` and its children for metadata:\n// - For heading row:\n//     - either adds this row to heading or body rows.\n//     - updates number of heading rows.\n// - For body rows:\n//     - calculates the number of column headings.\n//\n// @param {module:engine/view/element~Element} tr\n// @returns {Number}\nfunction scanRowForHeadingColumns( tr ) {\n\tlet headingColumns = 0;\n\tlet index = 0;\n\n\t// Filter out empty text nodes from tr children.\n\tconst children = Array.from( tr.getChildren() )\n\t\t.filter( child => child.name === 'th' || child.name === 'td' );\n\n\t// Count starting adjacent <th> elements of a <tr>.\n\twhile ( index < children.length && children[ index ].name === 'th' ) {\n\t\tconst th = children[ index ];\n\n\t\t// Adjust columns calculation by the number of spanned columns.\n\t\tconst colspan = parseInt( th.getAttribute( 'colspan' ) || 1 );\n\n\t\theadingColumns = headingColumns + colspan;\n\t\tindex++;\n\t}\n\n\treturn headingColumns;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tablewalker\n */\n\n/**\n * Table iterator class. It allows to iterate over table cells. For each cell the iterator yields\n * {@link module:table/tablewalker~TableWalkerValue} with proper table cell attributes.\n */\nexport default class TableWalker {\n\t/**\n\t * Creates an instance of the table walker.\n\t *\n\t * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n\t * It walks row by row and column by column in order to output values defined in the constructor.\n\t * By default it will output only those locations that are occupied by a cell. To include also spanned rows and columns,\n\t * pass the `includeSpanned` option to the constructor.\n\t *\n\t * The most important values of the iterator are column and row indexes of a cell.\n\t *\n\t * See {@link module:table/tablewalker~TableWalkerValue} what values are returned by the table walker.\n\t *\n\t * To iterate over a given row:\n\t *\n\t *\t\tconst tableWalker = new TableWalker( table, { startRow: 1, endRow: 2 } );\n\t *\n\t *\t\tfor ( const cellInfo of tableWalker ) {\n\t *\t\t\tconsole.log( 'A cell at row ' + cellInfo.row + ' and column ' + cellInfo.column );\n\t *\t\t}\n\t *\n\t * For instance the code above for the following table:\n\t *\n\t *\t\t+----+----+----+----+----+----+\n\t *\t\t| 00      | 02 | 03 | 04 | 05 |\n\t *\t\t|         +----+----+----+----+\n\t *\t\t|         | 12      | 14 | 15 |\n\t *\t\t|         +----+----+----+    +\n\t *\t\t|         | 22           |    |\n\t *\t\t|----+----+----+----+----+    +\n\t *\t\t| 30 | 31 | 32 | 33 | 34 |    |\n\t *\t\t+----+----+----+----+----+----+\n\t *\n\t * will log in the console:\n\t *\n\t *\t\t'A cell at row 1 and column 2'\n\t *\t\t'A cell at row 1 and column 4'\n\t *\t\t'A cell at row 1 and column 5'\n\t *\t\t'A cell at row 2 and column 2'\n\t *\n\t * To also iterate over spanned cells:\n\t *\n\t *\t\tconst tableWalker = new TableWalker( table, { startRow: 1, endRow: 1, includeSpanned: true } );\n\t *\n\t *\t\tfor ( const value of tableWalker ) {\n\t *\t\t\tconsole.log( 'Cell at ' + value.row + ' x ' + value.column + ' : ' + ( value.isSpanned ? 'is spanned' : 'has data' ) );\n\t *\t\t}\n\t *\n\t * will log in the console for the table from previous example:\n\t *\n\t *\t\t'Cell at 1 x 0 : is spanned'\n\t *\t\t'Cell at 1 x 1 : is spanned'\n\t *\t\t'Cell at 1 x 2 : has data'\n\t *\t\t'Cell at 1 x 3 : is spanned'\n\t *\t\t'Cell at 1 x 4 : has data'\n\t *\t\t'Cell at 1 x 5 : has data'\n\t *\n\t * @constructor\n\t * @param {module:engine/model/element~Element} table A table over which the walker iterates.\n\t * @param {Object} [options={}] An object with configuration.\n\t * @param {Number} [options.column] A column index for which this iterator will output cells.\n\t * @param {Number} [options.startRow=0] A row index for which this iterator should start.\n\t * @param {Number} [options.endRow] A row index for which this iterator should end.\n\t * @param {Boolean} [options.includeSpanned=false] Also return values for spanned cells.\n\t */\n\tconstructor( table, options = {} ) {\n\t\t/**\n\t\t * The walker's table element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element}\n\t\t */\n\t\tthis.table = table;\n\n\t\t/**\n\t\t * A row index on which this iterator will start.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.startRow = options.startRow || 0;\n\n\t\t/**\n\t\t * A row index on which this iterator will end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.endRow = typeof options.endRow == 'number' ? options.endRow : undefined;\n\n\t\t/**\n\t\t * Enables output of spanned cells that are normally not yielded.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.includeSpanned = !!options.includeSpanned;\n\n\t\t/**\n\t\t * If set, the table walker will only output cells of a given column or cells that overlap it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.column = typeof options.column == 'number' ? options.column : undefined;\n\n\t\t/**\n\t\t * Row indexes to skip from the iteration.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set<Number>}\n\t\t * @private\n\t\t */\n\t\tthis._skipRows = new Set();\n\n\t\t/**\n\t\t * The current row index.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t * @private\n\t\t */\n\t\tthis._row = 0;\n\n\t\t/**\n\t\t * The current column index.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t * @private\n\t\t */\n\t\tthis._column = 0;\n\n\t\t/**\n\t\t * The cell index in a parent row. For spanned cells when {@link #includeSpanned} is set to `true`,\n\t\t * this represents the index of the next table cell.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t * @private\n\t\t */\n\t\tthis._cellIndex = 0;\n\n\t\t/**\n\t\t * Holds a map of spanned cells in a table.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Map<Number, Map.<Number, module:engine/model/element~Element>>}\n\t\t * @private\n\t\t */\n\t\tthis._spannedCells = new Map();\n\n\t\tthis._nextCellAtColumn = -1;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:table/tablewalker~TableWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the next table walker's value.\n\t *\n\t * @returns {module:table/tablewalker~TableWalkerValue} The next table walker's value.\n\t */\n\tnext() {\n\t\tconst row = this.table.getChild( this._row );\n\n\t\t// Iterator is done when there's no row (table ended) or the row is after `endRow` limit.\n\t\tif ( !row || this._isOverEndRow() ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\tlet cell, skipCurrentValue, outValue;\n\n\t\tif ( this._isSpanned( this._row, this._column ) ) {\n\t\t\tcell = this._getSpanned( this._row, this._column );\n\n\t\t\tskipCurrentValue = !this.includeSpanned || this._shouldSkipRow() || this._shouldSkipColumn();\n\t\t\toutValue = this._formatOutValue( cell, this._column, true );\n\t\t} else {\n\t\t\tcell = row.getChild( this._cellIndex );\n\n\t\t\tif ( !cell ) {\n\t\t\t\t// If there are no more cells left in row advance to the next row.\n\t\t\t\tthis._row++;\n\t\t\t\tthis._column = 0;\n\t\t\t\tthis._cellIndex = 0;\n\t\t\t\tthis._nextCellAtColumn = -1;\n\n\t\t\t\treturn this.next();\n\t\t\t}\n\n\t\t\tconst colspan = parseInt( cell.getAttribute( 'colspan' ) || 1 );\n\t\t\tconst rowspan = parseInt( cell.getAttribute( 'rowspan' ) || 1 );\n\n\t\t\t// Record this cell spans if it's not 1x1 cell.\n\t\t\tif ( colspan > 1 || rowspan > 1 ) {\n\t\t\t\tthis._recordSpans( this._row, this._column, rowspan, colspan, cell );\n\t\t\t}\n\n\t\t\tthis._nextCellAtColumn = this._column + colspan;\n\n\t\t\tskipCurrentValue = this._shouldSkipRow() || this._shouldSkipColumn();\n\t\t\toutValue = this._formatOutValue( cell, this._column, false, rowspan, colspan );\n\t\t}\n\n\t\t// Advance to the next column before returning value.\n\t\tthis._column++;\n\n\t\tif ( this._column == this._nextCellAtColumn ) {\n\t\t\tthis._cellIndex++;\n\t\t}\n\n\t\t// The current value will be returned only if current row and column are not skipped.\n\t\treturn skipCurrentValue ? this.next() : outValue;\n\t}\n\n\t/**\n\t * Marks a row to skip in the next iteration. It will also skip cells from the current row if there are any cells from the current row\n\t * to output.\n\t *\n\t * @param {Number} row Row index to skip.\n\t */\n\tskipRow( row ) {\n\t\tthis._skipRows.add( row );\n\t}\n\n\t/**\n\t * Checks if the current row is over {@link #endRow}.\n\t *\n\t * @private\n\t * @returns {Boolean}\n\t */\n\t_isOverEndRow() {\n\t\t// If {@link #endRow) is defined skip all rows above it.\n\t\treturn this.endRow !== undefined && this._row > this.endRow;\n\t}\n\n\t/**\n\t * A common method for formatting the iterator's output value.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} cell The table cell to output.\n\t * @param {Number} column Column index (use the cached value).\n\t * @param {Boolean} isSpanned Whether the value is returned for a spanned cell location or actual cell.\n\t * @param {Number} rowspan Rowspan of the current cell.\n\t * @param {Number} colspan Colspan of the current cell.\n\t * @returns {{done: boolean, value: {cell: *, row: Number, column: *, rowspan: *, colspan: *, cellIndex: Number}}}\n\t */\n\t_formatOutValue( cell, column, isSpanned, rowspan = 1, colspan = 1 ) {\n\t\treturn {\n\t\t\tdone: false,\n\t\t\tvalue: {\n\t\t\t\tcell,\n\t\t\t\trow: this._row,\n\t\t\t\tcolumn,\n\t\t\t\tisSpanned,\n\t\t\t\trowspan,\n\t\t\t\tcolspan,\n\t\t\t\tcellIndex: this._cellIndex\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Checks if the current row should be skipped.\n\t *\n\t * @private\n\t * @returns {Boolean}\n\t */\n\t_shouldSkipRow() {\n\t\tconst rowIsBelowStartRow = this._row < this.startRow;\n\t\tconst rowIsMarkedAsSkipped = this._skipRows.has( this._row );\n\n\t\treturn rowIsBelowStartRow || rowIsMarkedAsSkipped;\n\t}\n\n\t/**\n\t * Checks if the current column should be skipped.\n\t *\n\t * @private\n\t * @returns {Boolean}\n\t */\n\t_shouldSkipColumn() {\n\t\tif ( this.column === undefined ) {\n\t\t\t// The {@link #column} is not defined so output all columns.\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.column != this._column;\n\t}\n\n\t/**\n\t * Checks if the current cell location (row x column) is spanned by another cell.\n\t *\n\t * @private\n\t * @param {Number} row Row index of a cell location to check.\n\t * @param {Number} column Column index of a cell location to check.\n\t * @returns {Boolean}\n\t */\n\t_isSpanned( row, column ) {\n\t\tif ( !this._spannedCells.has( row ) ) {\n\t\t\t// No spans for given row.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst rowSpans = this._spannedCells.get( row );\n\n\t\t// If spans for given rows has entry for column it means that this location if spanned by other cell.\n\t\treturn rowSpans.has( column );\n\t}\n\n\t/**\n\t * Returns the cell element that is spanned over `row` x `column` location.\n\t *\n\t * @private\n\t * @param {Number} row Row index of the cell location.\n\t * @param {Number} column Column index of the cell location.\n\t * @returns {module:engine/model/element~Element}\n\t */\n\t_getSpanned( row, column ) {\n\t\treturn this._spannedCells.get( row ).get( column );\n\t}\n\n\t/**\n\t * Updates spanned cells map relative to the current cell location and its span dimensions.\n\t *\n\t * @private\n\t * @param {Number} row Row index of a cell.\n\t * @param {Number} column Column index of a cell.\n\t * @param {Number} rowspan Cell height.\n\t * @param {Number} colspan Cell width.\n\t * @param {module:engine/model/element~Element} cell Cell that is spanned.\n\t */\n\t_recordSpans( row, column, rowspan, colspan, cell ) {\n\t\t// This will update all cell locations after current column - ie a cell has colspan set.\n\t\tfor ( let columnToUpdate = column + 1; columnToUpdate <= column + colspan - 1; columnToUpdate++ ) {\n\t\t\tthis._markSpannedCell( row, columnToUpdate, cell );\n\t\t}\n\n\t\t// This will update all rows below current up to row's height.\n\t\tfor ( let rowToUpdate = row + 1; rowToUpdate < row + rowspan; rowToUpdate++ ) {\n\t\t\tfor ( let columnToUpdate = column; columnToUpdate <= column + colspan - 1; columnToUpdate++ ) {\n\t\t\t\tthis._markSpannedCell( rowToUpdate, columnToUpdate, cell );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Marks the cell location as spanned by another cell.\n\t *\n\t * @private\n\t * @param {Number} row Row index of the cell location.\n\t * @param {Number} column Column index of the cell location.\n\t * @param {module:engine/model/element~Element} cell Cell that is spanned.\n\t */\n\t_markSpannedCell( row, column, cell ) {\n\t\tif ( !this._spannedCells.has( row ) ) {\n\t\t\tthis._spannedCells.set( row, new Map() );\n\t\t}\n\n\t\tconst rowSpans = this._spannedCells.get( row );\n\n\t\trowSpans.set( column, cell );\n\t}\n}\n\n/**\n * An object returned by {@link module:table/tablewalker~TableWalker} when traversing table cells.\n *\n * @typedef {Object} module:table/tablewalker~TableWalkerValue\n * @property {module:engine/model/element~Element} cell The current table cell.\n * @property {Number} row The row index of a cell.\n * @property {Number} column The column index of a cell. Column index is adjusted to widths and heights of previous cells.\n * @param {Boolean} isSpanned Whether the value is returned for a spanned cell location or actual cell.\n * @property {Number} colspan The `colspan` attribute of a cell. It the model attribute is not present, it is set to `1`. For spanned\n * table locations, it is set to `1`.\n * @property {Number} rowspan The `rowspan` attribute of a cell. It the model attribute is not present, it is set to `1`. For spanned\n * table locations, it is set to `1`.\n * @property {Number} cellIndex The index of the current cell in a parent row.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/downcast\n */\n\nimport TableWalker from './../tablewalker';\nimport { toWidgetEditable } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { toTableWidget } from '../utils';\n\n/**\n * Model table element to view table element conversion helper.\n *\n * This conversion helper creates the whole table element with child elements.\n *\n * @param {Object} options\n * @param {Boolean} options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns {Function} Conversion helper.\n */\nexport function downcastInsertTable( options = {} ) {\n\treturn dispatcher => dispatcher.on( 'insert:table', ( evt, data, conversionApi ) => {\n\t\tconst table = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( table, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Consume attributes if present to not fire attribute change downcast\n\t\tconversionApi.consumable.consume( table, 'attribute:headingRows:table' );\n\t\tconversionApi.consumable.consume( table, 'attribute:headingColumns:table' );\n\n\t\tconst asWidget = options && options.asWidget;\n\n\t\tconst figureElement = conversionApi.writer.createContainerElement( 'figure', { class: 'table' } );\n\t\tconst tableElement = conversionApi.writer.createContainerElement( 'table' );\n\t\tconversionApi.writer.insert( conversionApi.writer.createPositionAt( figureElement, 0 ), tableElement );\n\n\t\tlet tableWidget;\n\n\t\tif ( asWidget ) {\n\t\t\ttableWidget = toTableWidget( figureElement, conversionApi.writer );\n\t\t}\n\n\t\tconst tableWalker = new TableWalker( table );\n\n\t\tconst tableAttributes = {\n\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t};\n\n\t\t// Cache for created table rows.\n\t\tconst viewRows = new Map();\n\n\t\tfor ( const tableWalkerValue of tableWalker ) {\n\t\t\tconst { row, cell } = tableWalkerValue;\n\n\t\t\tconst tableSection = getOrCreateTableSection( getSectionName( row, tableAttributes ), tableElement, conversionApi );\n\t\t\tconst tableRow = table.getChild( row );\n\n\t\t\tconst trElement = viewRows.get( row ) || createTr( tableRow, row, tableSection, conversionApi );\n\t\t\tviewRows.set( row, trElement );\n\n\t\t\t// Consume table cell - it will be always consumed as we convert whole table at once.\n\t\t\tconversionApi.consumable.consume( cell, 'insert' );\n\n\t\t\tconst insertPosition = conversionApi.writer.createPositionAt( trElement, 'end' );\n\n\t\t\tcreateViewTableCellElement( tableWalkerValue, tableAttributes, insertPosition, conversionApi, options );\n\t\t}\n\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconversionApi.mapper.bindElements( table, asWidget ? tableWidget : figureElement );\n\t\tconversionApi.writer.insert( viewPosition, asWidget ? tableWidget : figureElement );\n\t} );\n}\n\n/**\n * Model row element to view `<tr>` element conversion helper.\n *\n * This conversion helper creates the whole `<tr>` element with child elements.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastInsertRow( options = {} ) {\n\treturn dispatcher => dispatcher.on( 'insert:tableRow', ( evt, data, conversionApi ) => {\n\t\tconst tableRow = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( tableRow, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst table = tableRow.parent;\n\n\t\tconst figureElement = conversionApi.mapper.toViewElement( table );\n\t\tconst tableElement = getViewTable( figureElement );\n\n\t\tconst row = table.getChildIndex( tableRow );\n\n\t\tconst tableWalker = new TableWalker( table, { startRow: row, endRow: row } );\n\n\t\tconst tableAttributes = {\n\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t};\n\n\t\t// Cache for created table rows.\n\t\tconst viewRows = new Map();\n\n\t\tfor ( const tableWalkerValue of tableWalker ) {\n\t\t\tconst tableSection = getOrCreateTableSection( getSectionName( row, tableAttributes ), tableElement, conversionApi );\n\n\t\t\tconst trElement = viewRows.get( row ) || createTr( tableRow, row, tableSection, conversionApi );\n\t\t\tviewRows.set( row, trElement );\n\n\t\t\t// Consume table cell - it will be always consumed as we convert whole row at once.\n\t\t\tconversionApi.consumable.consume( tableWalkerValue.cell, 'insert' );\n\n\t\t\tconst insertPosition = conversionApi.writer.createPositionAt( trElement, 'end' );\n\n\t\t\tcreateViewTableCellElement( tableWalkerValue, tableAttributes, insertPosition, conversionApi, options );\n\t\t}\n\t} );\n}\n\n/**\n * Model table cell element to view `<td>` or `<th>` element conversion helper.\n *\n * This conversion helper will create proper `<th>` elements for table cells that are in the heading section (heading row or column)\n * and `<td>` otherwise.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastInsertCell( options = {} ) {\n\treturn dispatcher => dispatcher.on( 'insert:tableCell', ( evt, data, conversionApi ) => {\n\t\tconst tableCell = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( tableCell, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\t\tconst rowIndex = table.getChildIndex( tableRow );\n\n\t\tconst tableWalker = new TableWalker( table, { startRow: rowIndex, endRow: rowIndex } );\n\n\t\tconst tableAttributes = {\n\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t};\n\n\t\t// We need to iterate over a table in order to get proper row & column values from a walker\n\t\tfor ( const tableWalkerValue of tableWalker ) {\n\t\t\tif ( tableWalkerValue.cell === tableCell ) {\n\t\t\t\tconst trElement = conversionApi.mapper.toViewElement( tableRow );\n\t\t\t\tconst insertPosition = conversionApi.writer.createPositionAt( trElement, tableRow.getChildIndex( tableCell ) );\n\n\t\t\t\tcreateViewTableCellElement( tableWalkerValue, tableAttributes, insertPosition, conversionApi, options );\n\n\t\t\t\t// No need to iterate further.\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t} );\n}\n\n/**\n * Conversion helper that acts on heading rows table attribute change.\n *\n * This converter will:\n *\n * * Rename `<td>` to `<th>` elements or vice versa depending on headings.\n * * Create `<thead>` or `<tbody>` elements if needed.\n * * Remove empty `<thead>` or `<tbody>` if needed.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastTableHeadingRowsChange( options = {} ) {\n\tconst asWidget = !!options.asWidget;\n\n\treturn dispatcher => dispatcher.on( 'attribute:headingRows:table', ( evt, data, conversionApi ) => {\n\t\tconst table = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst figureElement = conversionApi.mapper.toViewElement( table );\n\t\tconst viewTable = getViewTable( figureElement );\n\n\t\tconst oldRows = data.attributeOldValue;\n\t\tconst newRows = data.attributeNewValue;\n\n\t\t// The head section has grown so move rows from <tbody> to <thead>.\n\t\tif ( newRows > oldRows ) {\n\t\t\t// Filter out only those rows that are in wrong section.\n\t\t\tconst rowsToMove = Array.from( table.getChildren() ).filter( ( { index } ) => isBetween( index, oldRows - 1, newRows ) );\n\n\t\t\tconst viewTableHead = getOrCreateTableSection( 'thead', viewTable, conversionApi );\n\t\t\tmoveViewRowsToTableSection( rowsToMove, viewTableHead, conversionApi, 'end' );\n\n\t\t\t// Rename all table cells from moved rows to 'th' as they lands in <thead>.\n\t\t\tfor ( const tableRow of rowsToMove ) {\n\t\t\t\tfor ( const tableCell of tableRow.getChildren() ) {\n\t\t\t\t\trenameViewTableCell( tableCell, 'th', conversionApi, asWidget );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Cleanup: this will remove any empty section from the view which may happen when moving all rows from a table section.\n\t\t\tremoveTableSectionIfEmpty( 'tbody', viewTable, conversionApi );\n\t\t}\n\t\t// The head section has shrunk so move rows from <thead> to <tbody>.\n\t\telse {\n\t\t\t// Filter out only those rows that are in wrong section.\n\t\t\tconst rowsToMove = Array.from( table.getChildren() )\n\t\t\t\t.filter( ( { index } ) => isBetween( index, newRows - 1, oldRows ) )\n\t\t\t\t.reverse(); // The rows will be moved from <thead> to <tbody> in reverse order at the beginning of a <tbody>.\n\n\t\t\tconst viewTableBody = getOrCreateTableSection( 'tbody', viewTable, conversionApi );\n\t\t\tmoveViewRowsToTableSection( rowsToMove, viewTableBody, conversionApi, 0 );\n\n\t\t\t// Check if cells moved from <thead> to <tbody> requires renaming to <td> as this depends on current heading columns attribute.\n\t\t\tconst tableWalker = new TableWalker( table, { startRow: newRows ? newRows - 1 : newRows, endRow: oldRows - 1 } );\n\n\t\t\tconst tableAttributes = {\n\t\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t\t};\n\n\t\t\tfor ( const tableWalkerValue of tableWalker ) {\n\t\t\t\trenameViewTableCellIfRequired( tableWalkerValue, tableAttributes, conversionApi, asWidget );\n\t\t\t}\n\n\t\t\t// Cleanup: this will remove any empty section from the view which may happen when moving all rows from a table section.\n\t\t\tremoveTableSectionIfEmpty( 'thead', viewTable, conversionApi );\n\t\t}\n\n\t\tfunction isBetween( index, lower, upper ) {\n\t\t\treturn index > lower && index < upper;\n\t\t}\n\t} );\n}\n\n/**\n * Conversion helper that acts on heading columns table attribute change.\n *\n * Depending on changed attributes this converter will rename `<td` to `<th>` elements or vice versa depending of the cell column index.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastTableHeadingColumnsChange( options = {} ) {\n\tconst asWidget = !!options.asWidget;\n\n\treturn dispatcher => dispatcher.on( 'attribute:headingColumns:table', ( evt, data, conversionApi ) => {\n\t\tconst table = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableAttributes = {\n\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t};\n\n\t\tconst oldColumns = data.attributeOldValue;\n\t\tconst newColumns = data.attributeNewValue;\n\n\t\tconst lastColumnToCheck = ( oldColumns > newColumns ? oldColumns : newColumns ) - 1;\n\n\t\tfor ( const tableWalkerValue of new TableWalker( table ) ) {\n\t\t\t// Skip cells that were not in heading section before and after the change.\n\t\t\tif ( tableWalkerValue.column > lastColumnToCheck ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trenameViewTableCellIfRequired( tableWalkerValue, tableAttributes, conversionApi, asWidget );\n\t\t}\n\t} );\n}\n\n/**\n * Conversion helper that acts on a removed row.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastRemoveRow() {\n\treturn dispatcher => dispatcher.on( 'remove:tableRow', ( evt, data, conversionApi ) => {\n\t\t// Prevent default remove converter.\n\t\tevt.stop();\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst mapper = conversionApi.mapper;\n\n\t\tconst viewStart = mapper.toViewPosition( data.position ).getLastMatchingPosition( value => !value.item.is( 'tr' ) );\n\t\tconst viewItem = viewStart.nodeAfter;\n\t\tconst tableSection = viewItem.parent;\n\n\t\t// Remove associated <tr> from the view.\n\t\tconst removeRange = viewWriter.createRangeOn( viewItem );\n\t\tconst removed = viewWriter.remove( removeRange );\n\n\t\tfor ( const child of viewWriter.createRangeIn( removed ).getItems() ) {\n\t\t\tmapper.unbindViewElement( child );\n\t\t}\n\n\t\t// Check if table section has any children left - if not remove it from the view.\n\t\tif ( !tableSection.childCount ) {\n\t\t\t// No need to unbind anything as table section is not represented in the model.\n\t\t\tviewWriter.remove( viewWriter.createRangeOn( tableSection ) );\n\t\t}\n\t}, { priority: 'higher' } );\n}\n\n// Renames an existing table cell in the view to a given element name.\n//\n// **Note** This method will not do anything if a view table cell was not yet converted.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} desiredCellElementName\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @param {Boolean} asWidget\nfunction renameViewTableCell( tableCell, desiredCellElementName, conversionApi, asWidget ) {\n\tconst viewWriter = conversionApi.writer;\n\tconst viewCell = conversionApi.mapper.toViewElement( tableCell );\n\n\t// View cell might be not yet converted - skip it as it will be properly created by cell converter later on.\n\tif ( !viewCell ) {\n\t\treturn;\n\t}\n\n\tlet renamedCell;\n\n\tif ( asWidget ) {\n\t\tconst editable = viewWriter.createEditableElement( desiredCellElementName, viewCell.getAttributes() );\n\t\trenamedCell = toWidgetEditable( editable, viewWriter );\n\n\t\tviewWriter.insert( viewWriter.createPositionAfter( viewCell ), renamedCell );\n\t\tviewWriter.move( viewWriter.createRangeIn( viewCell ), viewWriter.createPositionAt( renamedCell, 0 ) );\n\t\tviewWriter.remove( viewWriter.createRangeOn( viewCell ) );\n\t} else {\n\t\trenamedCell = viewWriter.rename( desiredCellElementName, viewCell );\n\t}\n\n\tconversionApi.mapper.unbindViewElement( viewCell );\n\tconversionApi.mapper.bindElements( tableCell, renamedCell );\n}\n\n// Renames a table cell element in the view according to its location in the table.\n//\n// @param {module:table/tablewalker~TableWalkerValue} tableWalkerValue\n// @param {{headingColumns, headingRows}} tableAttributes\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @param {Boolean} asWidget\nfunction renameViewTableCellIfRequired( tableWalkerValue, tableAttributes, conversionApi, asWidget ) {\n\tconst { cell } = tableWalkerValue;\n\n\t// Check whether current columnIndex is overlapped by table cells from previous rows.\n\tconst desiredCellElementName = getCellElementName( tableWalkerValue, tableAttributes );\n\n\tconst viewCell = conversionApi.mapper.toViewElement( cell );\n\n\t// If in single change we're converting attribute changes and inserting cell the table cell might not be inserted into view\n\t// because of child conversion is done after parent.\n\tif ( viewCell && viewCell.name !== desiredCellElementName ) {\n\t\trenameViewTableCell( cell, desiredCellElementName, conversionApi, asWidget );\n\t}\n}\n\n// Creates a table cell element in the view.\n//\n// @param {module:table/tablewalker~TableWalkerValue} tableWalkerValue\n// @param {module:engine/view/position~Position} insertPosition\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\nfunction createViewTableCellElement( tableWalkerValue, tableAttributes, insertPosition, conversionApi, options ) {\n\tconst asWidget = options && options.asWidget;\n\tconst cellElementName = getCellElementName( tableWalkerValue, tableAttributes );\n\n\tconst cellElement = asWidget ?\n\t\ttoWidgetEditable( conversionApi.writer.createEditableElement( cellElementName ), conversionApi.writer ) :\n\t\tconversionApi.writer.createContainerElement( cellElementName );\n\n\tconst tableCell = tableWalkerValue.cell;\n\n\tconst firstChild = tableCell.getChild( 0 );\n\tconst isSingleParagraph = tableCell.childCount === 1 && firstChild.name === 'paragraph';\n\n\tconversionApi.writer.insert( insertPosition, cellElement );\n\n\tif ( isSingleParagraph && !hasAnyAttribute( firstChild ) ) {\n\t\tconst innerParagraph = tableCell.getChild( 0 );\n\t\tconst paragraphInsertPosition = conversionApi.writer.createPositionAt( cellElement, 'end' );\n\n\t\tconversionApi.consumable.consume( innerParagraph, 'insert' );\n\n\t\tif ( options.asWidget ) {\n\t\t\tconst fakeParagraph = conversionApi.writer.createContainerElement( 'span' );\n\n\t\t\tconversionApi.mapper.bindElements( innerParagraph, fakeParagraph );\n\t\t\tconversionApi.writer.insert( paragraphInsertPosition, fakeParagraph );\n\n\t\t\tconversionApi.mapper.bindElements( tableCell, cellElement );\n\t\t} else {\n\t\t\tconversionApi.mapper.bindElements( tableCell, cellElement );\n\t\t\tconversionApi.mapper.bindElements( innerParagraph, cellElement );\n\t\t}\n\t} else {\n\t\tconversionApi.mapper.bindElements( tableCell, cellElement );\n\t}\n}\n\n// Creates `<tr>` view element.\n//\n// @param {module:engine/view/element~Element} tableRow\n// @param {Number} rowIndex\n// @param {module:engine/view/element~Element} tableSection\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @returns {module:engine/view/element~Element}\nfunction createTr( tableRow, rowIndex, tableSection, conversionApi ) {\n\t// Will always consume since we're converting <tableRow> element from a parent <table>.\n\tconversionApi.consumable.consume( tableRow, 'insert' );\n\n\tconst trElement = conversionApi.writer.createContainerElement( 'tr' );\n\tconversionApi.mapper.bindElements( tableRow, trElement );\n\n\tconst headingRows = tableRow.parent.getAttribute( 'headingRows' ) || 0;\n\tconst offset = headingRows > 0 && rowIndex >= headingRows ? rowIndex - headingRows : rowIndex;\n\n\tconst position = conversionApi.writer.createPositionAt( tableSection, offset );\n\tconversionApi.writer.insert( position, trElement );\n\n\treturn trElement;\n}\n\n// Returns `th` for heading cells and `td` for other cells for the current table walker value.\n//\n// @param {module:table/tablewalker~TableWalkerValue} tableWalkerValue\n// @param {{headingColumns, headingRows}} tableAttributes\n// @returns {String}\nfunction getCellElementName( tableWalkerValue, tableAttributes ) {\n\tconst { row, column } = tableWalkerValue;\n\tconst { headingColumns, headingRows } = tableAttributes;\n\n\t// Column heading are all tableCells in the first `columnHeading` rows.\n\tconst isColumnHeading = headingRows && headingRows > row;\n\n\t// So a whole row gets <th> element.\n\tif ( isColumnHeading ) {\n\t\treturn 'th';\n\t}\n\n\t// Row heading are tableCells which columnIndex is lower then headingColumns.\n\tconst isRowHeading = headingColumns && headingColumns > column;\n\n\treturn isRowHeading ? 'th' : 'td';\n}\n\n// Returns the table section name for the current table walker value.\n//\n// @param {Number} row\n// @param {{headingColumns, headingRows}} tableAttributes\n// @returns {String}\nfunction getSectionName( row, tableAttributes ) {\n\treturn row < tableAttributes.headingRows ? 'thead' : 'tbody';\n}\n\n// Creates or returns an existing `<tbody>` or `<thead>` element witch caching.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} viewTable\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @param {Object} cachedTableSection An object that stores cached elements.\n// @returns {module:engine/view/containerelement~ContainerElement}\nfunction getOrCreateTableSection( sectionName, viewTable, conversionApi ) {\n\tconst viewTableSection = getExistingTableSectionElement( sectionName, viewTable );\n\n\treturn viewTableSection ? viewTableSection : createTableSection( sectionName, viewTable, conversionApi );\n}\n\n// Finds an existing `<tbody>` or `<thead>` element or returns undefined.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} tableElement\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\nfunction getExistingTableSectionElement( sectionName, tableElement ) {\n\tfor ( const tableSection of tableElement.getChildren() ) {\n\t\tif ( tableSection.name == sectionName ) {\n\t\t\treturn tableSection;\n\t\t}\n\t}\n}\n\n// Creates a table section at the end of the table.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} tableElement\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @returns {module:engine/view/containerelement~ContainerElement}\nfunction createTableSection( sectionName, tableElement, conversionApi ) {\n\tconst tableChildElement = conversionApi.writer.createContainerElement( sectionName );\n\n\tconst insertPosition = conversionApi.writer.createPositionAt( tableElement, sectionName == 'tbody' ? 'end' : 0 );\n\n\tconversionApi.writer.insert( insertPosition, tableChildElement );\n\n\treturn tableChildElement;\n}\n\n// Removes an existing `<tbody>` or `<thead>` element if it is empty.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} tableElement\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\nfunction removeTableSectionIfEmpty( sectionName, tableElement, conversionApi ) {\n\tconst tableSection = getExistingTableSectionElement( sectionName, tableElement );\n\n\tif ( tableSection && tableSection.childCount === 0 ) {\n\t\tconversionApi.writer.remove( conversionApi.writer.createRangeOn( tableSection ) );\n\t}\n}\n\n// Moves view table rows associated with passed model rows to the provided table section element.\n//\n// **Note** This method will skip not converted table rows.\n//\n// @param {Array.<module:engine/model/element~Element>} rowsToMove\n// @param {module:engine/view/element~Element} viewTableSection\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @param {Number|'end'|'before'|'after'} offset Offset or one of the flags.\nfunction moveViewRowsToTableSection( rowsToMove, viewTableSection, conversionApi, offset ) {\n\tfor ( const tableRow of rowsToMove ) {\n\t\tconst viewTableRow = conversionApi.mapper.toViewElement( tableRow );\n\n\t\t// View table row might be not yet converted - skip it as it will be properly created by cell converter later on.\n\t\tif ( viewTableRow ) {\n\t\t\tconversionApi.writer.move(\n\t\t\t\tconversionApi.writer.createRangeOn( viewTableRow ),\n\t\t\t\tconversionApi.writer.createPositionAt( viewTableSection, offset )\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Properly finds '<table>' element inside `<figure>` widget.\n//\n// @param {module:engine/view/element~Element} viewFigure\nfunction getViewTable( viewFigure ) {\n\tfor ( const child of viewFigure.getChildren() ) {\n\t\tif ( child.name === 'table' ) {\n\t\t\treturn child;\n\t\t}\n\t}\n}\n\n// Checks if element has any attribute set.\n//\n// @param {module:engine/model/element~Element element\n// @returns {Boolean}\nfunction hasAnyAttribute( element ) {\n\treturn !![ ...element.getAttributeKeys() ].length;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/inserttablecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findOptimalInsertionPosition } from '@ckeditor/ckeditor5-widget/src/utils';\n\n/**\n * The insert table command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTable'` editor command.\n *\n * To insert a table at the current selection, execute the command and specify the dimensions:\n *\n *\t\teditor.execute( 'insertTable', { rows: 20, columns: 5 } );\n *\n * @extends module:core/command~Command\n */\nexport default class InsertTableCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst schema = model.schema;\n\n\t\tconst validParent = getInsertTableParent( selection.getFirstPosition() );\n\n\t\tthis.isEnabled = schema.checkChild( validParent, 'table' );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Inserts a table with the given number of rows and columns into the editor.\n\t *\n\t * @param {Object} options\n\t * @param {Number} [options.rows=2] The number of rows to create in the inserted table.\n\t * @param {Number} [options.columns=2] The number of columns to create in the inserted table.\n\t * @fires execute\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst rows = parseInt( options.rows ) || 2;\n\t\tconst columns = parseInt( options.columns ) || 2;\n\n\t\tconst insertPosition = findOptimalInsertionPosition( selection, model );\n\n\t\tmodel.change( writer => {\n\t\t\tconst table = tableUtils.createTable( writer, rows, columns );\n\n\t\t\tmodel.insertContent( table, insertPosition );\n\n\t\t\twriter.setSelection( writer.createPositionAt( table.getNodeByPath( [ 0, 0, 0 ] ), 0 ) );\n\t\t} );\n\t}\n}\n\n// Returns valid parent to insert table\n//\n// @param {module:engine/model/position} position\nfunction getInsertTableParent( position ) {\n\tconst parent = position.parent;\n\n\treturn parent === parent.root ? parent : parent.parent;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/insertrowcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor } from './utils';\n\n/**\n * The insert row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTableRowBelow'` and\n * `'insertTableRowAbove'` editor commands.\n *\n * To insert a row below the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableRowBelow' );\n *\n * To insert a row above the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableRowAbove' );\n *\n * @extends module:core/command~Command\n */\nexport default class InsertRowCommand extends Command {\n\t/**\n\t * Creates a new `InsertRowCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} [options.order=\"below\"] The order of insertion relative to the row in which the caret is located.\n\t * Possible values: `\"above\"` and `\"below\"`.\n\t */\n\tconstructor( editor, options = {} ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The order of insertion relative to the row in which the caret is located.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:table/commands/insertrowcommand~InsertRowCommand#order\n\t\t */\n\t\tthis.order = options.order || 'below';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst selection = this.editor.model.document.selection;\n\n\t\tconst tableParent = findAncestor( 'table', selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableParent;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a row `'below'` or `'above'` the row in which selection is set.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils = editor.plugins.get( 'TableUtils' );\n\n\t\tconst tableCell = findAncestor( 'tableCell', selection.getFirstPosition() );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst row = table.getChildIndex( tableRow );\n\t\tconst insertAt = this.order === 'below' ? row + 1 : row;\n\n\t\ttableUtils.insertRows( table, { rows: 1, at: insertAt } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/insertcolumncommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor } from './utils';\n\n/**\n * The insert column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTableColumnLeft'` and\n * `'insertTableColumnRight'` editor commands.\n *\n * To insert a column to the left of the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableColumnLeft' );\n *\n * To insert a column to the right of the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableColumnRight' );\n *\n * @extends module:core/command~Command\n */\nexport default class InsertColumnCommand extends Command {\n\t/**\n\t * Creates a new `InsertColumnCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor An editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} [options.order=\"right\"] The order of insertion relative to the column in which the caret is located.\n\t * Possible values: `\"left\"` and `\"right\"`.\n\t */\n\tconstructor( editor, options = {} ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The order of insertion relative to the column in which the caret is located.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:table/commands/insertcolumncommand~InsertColumnCommand#order\n\t\t */\n\t\tthis.order = options.order || 'right';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst selection = this.editor.model.document.selection;\n\n\t\tconst tableParent = findAncestor( 'table', selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableParent;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a column to the `'left'` or `'right'` of the column\n\t * in which the selection is set.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils = editor.plugins.get( 'TableUtils' );\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\t\tconst table = tableCell.parent.parent;\n\n\t\tconst { column } = tableUtils.getCellLocation( tableCell );\n\t\tconst insertAt = this.order === 'right' ? column + 1 : column;\n\n\t\ttableUtils.insertColumns( table, { columns: 1, at: insertAt } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/splitcellcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor } from './utils';\n\n/**\n * The split cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'splitTableCellVertically'`\n * and `'splitTableCellHorizontally'`  editor commands.\n *\n * You can split any cell vertically or horizontally by executing this command. For example, to split the selected table cell vertically:\n *\n *\t\teditor.execute( 'splitTableCellVertically' );\n *\n * @extends module:core/command~Command\n */\nexport default class SplitCellCommand extends Command {\n\t/**\n\t * Creates a new `SplitCellCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} options.direction Indicates whether the command should split cells `'horizontally'` or `'vertically'`.\n\t */\n\tconstructor( editor, options = {} ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The direction that indicates which cell will be split.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #direction\n\t\t */\n\t\tthis.direction = options.direction || 'horizontally';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableCell;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst selection = document.selection;\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\n\t\tconst isHorizontally = this.direction === 'horizontally';\n\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tif ( isHorizontally ) {\n\t\t\ttableUtils.splitCellHorizontally( tableCell, 2 );\n\t\t} else {\n\t\t\ttableUtils.splitCellVertically( tableCell, 2 );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/mergecellcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The merge cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'mergeTableCellRight'`, `'mergeTableCellLeft'`,\n * `'mergeTableCellUp'` and `'mergeTableCellDown'` editor commands.\n *\n * To merge a table cell at the current selection with another cell, execute the command corresponding with the preferred direction.\n *\n * For example, to merge with a cell to the right:\n *\n *\t\teditor.execute( 'mergeTableCellRight' );\n *\n * **Note**: If a table cell has a different [`rowspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-rowspan)\n * (for `'mergeTableCellRight'` and `'mergeTableCellLeft'`) or [`colspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-colspan)\n * (for `'mergeTableCellUp'` and `'mergeTableCellDown'`), the command will be disabled.\n *\n * @extends module:core/command~Command\n */\nexport default class MergeCellCommand extends Command {\n\t/**\n\t * Creates a new `MergeCellCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} options.direction Indicates which cell to merge with the currently selected one.\n\t * Possible values are: `'left'`, `'right'`, `'up'` and `'down'`.\n\t */\n\tconstructor( editor, options ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The direction that indicates which cell will be merged with the currently selected one.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #direction\n\t\t */\n\t\tthis.direction = options.direction;\n\n\t\t/**\n\t\t * Whether the merge is horizontal (left/right) or vertical (up/down).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isHorizontal\n\t\t */\n\t\tthis.isHorizontal = this.direction == 'right' || this.direction == 'left';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst cellToMerge = this._getMergeableCell();\n\n\t\tthis.value = cellToMerge;\n\t\tthis.isEnabled = !!cellToMerge;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #direction} value, it will merge the cell that is to the `'left'`, `'right'`, `'up'` or `'down'`.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\t\tconst cellToMerge = this.value;\n\t\tconst direction = this.direction;\n\n\t\tmodel.change( writer => {\n\t\t\tconst isMergeNext = direction == 'right' || direction == 'down';\n\n\t\t\t// The merge mechanism is always the same so sort cells to be merged.\n\t\t\tconst cellToExpand = isMergeNext ? tableCell : cellToMerge;\n\t\t\tconst cellToRemove = isMergeNext ? cellToMerge : tableCell;\n\n\t\t\t// Cache the parent of cell to remove for later check.\n\t\t\tconst removedTableCellRow = cellToRemove.parent;\n\n\t\t\tmergeTableCells( cellToRemove, cellToExpand, writer );\n\n\t\t\tconst spanAttribute = this.isHorizontal ? 'colspan' : 'rowspan';\n\t\t\tconst cellSpan = parseInt( tableCell.getAttribute( spanAttribute ) || 1 );\n\t\t\tconst cellToMergeSpan = parseInt( cellToMerge.getAttribute( spanAttribute ) || 1 );\n\n\t\t\t// Update table cell span attribute and merge set selection on merged contents.\n\t\t\twriter.setAttribute( spanAttribute, cellSpan + cellToMergeSpan, cellToExpand );\n\t\t\twriter.setSelection( writer.createRangeIn( cellToExpand ) );\n\n\t\t\t// Remove empty row after merging.\n\t\t\tif ( !removedTableCellRow.childCount ) {\n\t\t\t\tremoveEmptyRow( removedTableCellRow, writer );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns a cell that can be merged with the current cell depending on the command's direction.\n\t *\n\t * @returns {module:engine/model/element~Element|undefined}\n\t * @private\n\t */\n\t_getMergeableCell() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\t// First get the cell on proper direction.\n\t\tconst cellToMerge = this.isHorizontal ?\n\t\t\tgetHorizontalCell( tableCell, this.direction, tableUtils ) :\n\t\t\tgetVerticalCell( tableCell, this.direction );\n\n\t\tif ( !cellToMerge ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If found check if the span perpendicular to merge direction is equal on both cells.\n\t\tconst spanAttribute = this.isHorizontal ? 'rowspan' : 'colspan';\n\t\tconst span = parseInt( tableCell.getAttribute( spanAttribute ) || 1 );\n\n\t\tconst cellToMergeSpan = parseInt( cellToMerge.getAttribute( spanAttribute ) || 1 );\n\n\t\tif ( cellToMergeSpan === span ) {\n\t\t\treturn cellToMerge;\n\t\t}\n\t}\n}\n\n// Returns the cell that can be merged horizontally.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} direction\n// @returns {module:engine/model/node~Node|null}\nfunction getHorizontalCell( tableCell, direction, tableUtils ) {\n\tconst horizontalCell = direction == 'right' ? tableCell.nextSibling : tableCell.previousSibling;\n\n\tif ( !horizontalCell ) {\n\t\treturn;\n\t}\n\n\t// Sort cells:\n\tconst cellOnLeft = direction == 'right' ? tableCell : horizontalCell;\n\tconst cellOnRight = direction == 'right' ? horizontalCell : tableCell;\n\n\t// Get their column indexes:\n\tconst { column: leftCellColumn } = tableUtils.getCellLocation( cellOnLeft );\n\tconst { column: rightCellColumn } = tableUtils.getCellLocation( cellOnRight );\n\n\tconst leftCellSpan = parseInt( cellOnLeft.getAttribute( 'colspan' ) || 1 );\n\n\t// The cell on the right must have index that is distant to the cell on the left by the left cell's width (colspan).\n\tconst cellsAreTouching = leftCellColumn + leftCellSpan === rightCellColumn;\n\n\t// If the right cell's column index is different it means that there are rowspanned cells between them.\n\treturn cellsAreTouching ? horizontalCell : undefined;\n}\n\n// Returns the cell that can be merged vertically.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} direction\n// @returns {module:engine/model/node~Node|null}\nfunction getVerticalCell( tableCell, direction ) {\n\tconst tableRow = tableCell.parent;\n\tconst table = tableRow.parent;\n\n\tconst rowIndex = table.getChildIndex( tableRow );\n\n\t// Don't search for mergeable cell if direction points out of the table.\n\tif ( ( direction == 'down' && rowIndex === table.childCount - 1 ) || ( direction == 'up' && rowIndex === 0 ) ) {\n\t\treturn;\n\t}\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\tconst isMergeWithBodyCell = direction == 'down' && ( rowIndex + rowspan ) === headingRows;\n\tconst isMergeWithHeadCell = direction == 'up' && rowIndex === headingRows;\n\n\t// Don't search for mergeable cell if direction points out of the current table section.\n\tif ( headingRows && ( isMergeWithBodyCell || isMergeWithHeadCell ) ) {\n\t\treturn;\n\t}\n\n\tconst currentCellRowSpan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\tconst rowOfCellToMerge = direction == 'down' ? rowIndex + currentCellRowSpan : rowIndex;\n\n\tconst tableMap = [ ...new TableWalker( table, { endRow: rowOfCellToMerge } ) ];\n\n\tconst currentCellData = tableMap.find( value => value.cell === tableCell );\n\tconst mergeColumn = currentCellData.column;\n\n\tconst cellToMergeData = tableMap.find( ( { row, rowspan, column } ) => {\n\t\tif ( column !== mergeColumn ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( direction == 'down' ) {\n\t\t\t// If merging a cell below the mergeRow is already calculated.\n\t\t\treturn row === rowOfCellToMerge;\n\t\t} else {\n\t\t\t// If merging a cell above calculate if it spans to mergeRow.\n\t\t\treturn rowOfCellToMerge === row + rowspan;\n\t\t}\n\t} );\n\n\treturn cellToMergeData && cellToMergeData.cell;\n}\n\n// Properly removes empty row from a table. Will update `rowspan` attribute of cells that overlaps removed row.\n//\n// @param {module:engine/model/element~Element} removedTableCellRow\n// @param {module:engine/model/writer~Writer} writer\nfunction removeEmptyRow( removedTableCellRow, writer ) {\n\tconst table = removedTableCellRow.parent;\n\n\tconst removedRowIndex = table.getChildIndex( removedTableCellRow );\n\n\tfor ( const { cell, row, rowspan } of new TableWalker( table, { endRow: removedRowIndex } ) ) {\n\t\tconst overlapsRemovedRow = row + rowspan - 1 >= removedRowIndex;\n\n\t\tif ( overlapsRemovedRow ) {\n\t\t\tupdateNumericAttribute( 'rowspan', rowspan - 1, cell, writer );\n\t\t}\n\t}\n\n\twriter.remove( removedTableCellRow );\n}\n\n// Merges two table cells - will ensure that after merging cells with empty paragraph the result table cell will only have one paragraph.\n// If one of the merged table cell is empty the merged table cell will have contents of the non-empty table cell.\n// If both are empty the merged table cell will have only one empty paragraph.\n//\n// @param {module:engine/model/element~Element} cellToRemove\n// @param {module:engine/model/element~Element} cellToExpand\n// @param {module:engine/model/writer~Writer} writer\nfunction mergeTableCells( cellToRemove, cellToExpand, writer ) {\n\tif ( !isEmpty( cellToRemove ) ) {\n\t\tif ( isEmpty( cellToExpand ) ) {\n\t\t\twriter.remove( writer.createRangeIn( cellToExpand ) );\n\t\t}\n\n\t\twriter.move( writer.createRangeIn( cellToRemove ), writer.createPositionAt( cellToExpand, 'end' ) );\n\t}\n\n\t// Remove merged table cell.\n\twriter.remove( cellToRemove );\n}\n\n// Checks if passed table cell contains empty paragraph.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @returns {Boolean}\nfunction isEmpty( tableCell ) {\n\treturn tableCell.childCount == 1 && tableCell.getChild( 0 ).is( 'paragraph' ) && tableCell.getChild( 0 ).isEmpty;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/removerowcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n *\t\teditor.execute( 'removeTableRow' );\n *\n * @extends module:core/command~Command\n */\nexport default class RemoveRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableCell && tableCell.parent.parent.childCount > 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst currentRow = table.getChildIndex( tableRow );\n\t\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingRows && currentRow <= headingRows ) {\n\t\t\t\tupdateNumericAttribute( 'headingRows', headingRows - 1, table, writer, 0 );\n\t\t\t}\n\n\t\t\tconst tableMap = [ ...new TableWalker( table, { endRow: currentRow } ) ];\n\n\t\t\tconst cellsToMove = new Map();\n\n\t\t\t// Get cells from removed row that are spanned over multiple rows.\n\t\t\ttableMap\n\t\t\t\t.filter( ( { row, rowspan } ) => row === currentRow && rowspan > 1 )\n\t\t\t\t.forEach( ( { column, cell, rowspan } ) => cellsToMove.set( column, { cell, rowspanToSet: rowspan - 1 } ) );\n\n\t\t\t// Reduce rowspan on cells that are above removed row and overlaps removed row.\n\t\t\ttableMap\n\t\t\t\t.filter( ( { row, rowspan } ) => row <= currentRow - 1 && row + rowspan > currentRow )\n\t\t\t\t.forEach( ( { cell, rowspan } ) => updateNumericAttribute( 'rowspan', rowspan - 1, cell, writer ) );\n\n\t\t\t// Move cells to another row.\n\t\t\tconst targetRow = currentRow + 1;\n\t\t\tconst tableWalker = new TableWalker( table, { includeSpanned: true, startRow: targetRow, endRow: targetRow } );\n\n\t\t\tlet previousCell;\n\n\t\t\tfor ( const { row, column, cell } of [ ...tableWalker ] ) {\n\t\t\t\tif ( cellsToMove.has( column ) ) {\n\t\t\t\t\tconst { cell: cellToMove, rowspanToSet } = cellsToMove.get( column );\n\t\t\t\t\tconst targetPosition = previousCell ?\n\t\t\t\t\t\twriter.createPositionAfter( previousCell ) :\n\t\t\t\t\t\twriter.createPositionAt( table.getChild( row ), 0 );\n\n\t\t\t\t\twriter.move( writer.createRangeOn( cellToMove ), targetPosition );\n\t\t\t\t\tupdateNumericAttribute( 'rowspan', rowspanToSet, cellToMove, writer );\n\n\t\t\t\t\tpreviousCell = cellToMove;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousCell = cell;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriter.remove( tableRow );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/removecolumncommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The remove column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'removeTableColumn'` editor command.\n *\n * To remove the column containing the selected cell, execute the command:\n *\n *\t\teditor.execute( 'removeTableColumn' );\n *\n * @extends module:core/command~Command\n */\nexport default class RemoveColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils = editor.plugins.get( 'TableUtils' );\n\n\t\tconst tableCell = findAncestor( 'tableCell', selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableCell && tableUtils.getColumns( tableCell.parent.parent ) > 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) || 0;\n\t\tconst row = table.getChildIndex( tableRow );\n\n\t\t// Cache the table before removing or updating colspans.\n\t\tconst tableMap = [ ...new TableWalker( table ) ];\n\n\t\t// Get column index of removed column.\n\t\tconst cellData = tableMap.find( value => value.cell === tableCell );\n\t\tconst removedColumn = cellData.column;\n\n\t\tmodel.change( writer => {\n\t\t\t// Update heading columns attribute if removing a row from head section.\n\t\t\tif ( headingColumns && row <= headingColumns ) {\n\t\t\t\twriter.setAttribute( 'headingColumns', headingColumns - 1, table );\n\t\t\t}\n\n\t\t\tfor ( const { cell, column, colspan } of tableMap ) {\n\t\t\t\t// If colspaned cell overlaps removed column decrease it's span.\n\t\t\t\tif ( column <= removedColumn && colspan > 1 && column + colspan > removedColumn ) {\n\t\t\t\t\tupdateNumericAttribute( 'colspan', colspan - 1, cell, writer );\n\t\t\t\t} else if ( column === removedColumn ) {\n\t\t\t\t\t// The cell in removed column has colspan of 1.\n\t\t\t\t\twriter.remove( cell );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/setheaderrowcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport { createEmptyTableCell, findAncestor, updateNumericAttribute } from './utils';\nimport TableWalker from '../tablewalker';\n\n/**\n * The header row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'setTableColumnHeader'` editor command.\n *\n * You can make the row containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element) by executing:\n *\n *\t\teditor.execute( 'setTableRowHeader' );\n *\n * **Note:** All preceding rows will also become headers. If the current row is already a header, executing this command\n * will make it a regular row back again (including the following rows).\n *\n * @extends module:core/command~Command\n */\nexport default class SetHeaderRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position );\n\t\tconst isInTable = !!tableCell;\n\n\t\tthis.isEnabled = isInTable;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection} is in a header row.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t\tthis.value = isInTable && this._isInHeading( tableCell, tableCell.parent.parent );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header row, the command will set the `headingRows` table attribute to cover that row.\n\t *\n\t * When the selection is already in a header row, it will set `headingRows` so the heading section will end before that row.\n\t *\n\t * @fires execute\n\t * @param {Object} options\n\t * @param {Boolean} [options.forceValue] If set, the command will set (`true`) or unset (`false`) header rows according to `forceValue`\n\t * parameter instead of the current model state.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst currentHeadingRows = table.getAttribute( 'headingRows' ) || 0;\n\t\tconst selectionRow = tableRow.index;\n\n\t\tif ( options.forceValue === this.value ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst headingRowsToSet = this.value ? selectionRow : selectionRow + 1;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingRowsToSet ) {\n\t\t\t\t// Changing heading rows requires to check if any of a heading cell is overlapping vertically the table head.\n\t\t\t\t// Any table cell that has a rowspan attribute > 1 will not exceed the table head so we need to fix it in rows below.\n\t\t\t\tconst cellsToSplit = getOverlappingCells( table, headingRowsToSet, currentHeadingRows );\n\n\t\t\t\tfor ( const cell of cellsToSplit ) {\n\t\t\t\t\tsplitHorizontally( cell, headingRowsToSet, writer );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateNumericAttribute( 'headingRows', headingRowsToSet, table, writer, 0 );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if a table cell is in the heading section.\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {module:engine/model/element~Element} table\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isInHeading( tableCell, table ) {\n\t\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) || 0 );\n\n\t\treturn !!headingRows && tableCell.parent.index < headingRows;\n\t}\n}\n\n// Returns cells that span beyond the new heading section.\n//\n// @param {module:engine/model/element~Element} table The table to check.\n// @param {Number} headingRowsToSet New heading rows attribute.\n// @param {Number} currentHeadingRows Current heading rows attribute.\n// @returns {Array.<module:engine/model/element~Element>}\nfunction getOverlappingCells( table, headingRowsToSet, currentHeadingRows ) {\n\tconst cellsToSplit = [];\n\n\tconst startAnalysisRow = headingRowsToSet > currentHeadingRows ? currentHeadingRows : 0;\n\t// We're analyzing only when headingRowsToSet > 0.\n\tconst endAnalysisRow = headingRowsToSet - 1;\n\n\tconst tableWalker = new TableWalker( table, { startRow: startAnalysisRow, endRow: endAnalysisRow } );\n\n\tfor ( const { row, rowspan, cell } of tableWalker ) {\n\t\tif ( rowspan > 1 && row + rowspan > headingRowsToSet ) {\n\t\t\tcellsToSplit.push( cell );\n\t\t}\n\t}\n\n\treturn cellsToSplit;\n}\n\n// Splits the table cell horizontally.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {Number} headingRows\n// @param {module:engine/model/writer~Writer} writer\nfunction splitHorizontally( tableCell, headingRows, writer ) {\n\tconst tableRow = tableCell.parent;\n\tconst table = tableRow.parent;\n\tconst rowIndex = tableRow.index;\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) );\n\tconst newRowspan = headingRows - rowIndex;\n\n\tconst attributes = {};\n\n\tconst spanToSet = rowspan - newRowspan;\n\n\tif ( spanToSet > 1 ) {\n\t\tattributes.rowspan = spanToSet;\n\t}\n\n\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) || 1 );\n\n\tif ( colspan > 1 ) {\n\t\tattributes.colspan = colspan;\n\t}\n\n\tconst startRow = table.getChildIndex( tableRow );\n\tconst endRow = startRow + newRowspan;\n\tconst tableMap = [ ...new TableWalker( table, { startRow, endRow, includeSpanned: true } ) ];\n\n\tlet columnIndex;\n\n\tfor ( const { row, column, cell, cellIndex } of tableMap ) {\n\t\tif ( cell === tableCell && columnIndex === undefined ) {\n\t\t\tcolumnIndex = column;\n\t\t}\n\n\t\tif ( columnIndex !== undefined && columnIndex === column && row === endRow ) {\n\t\t\tconst tableRow = table.getChild( row );\n\t\t\tconst tableCellPosition = writer.createPositionAt( tableRow, cellIndex );\n\n\t\t\tcreateEmptyTableCell( writer, tableCellPosition, attributes );\n\t\t}\n\t}\n\n\t// Update the rowspan attribute after updating table.\n\tupdateNumericAttribute( 'rowspan', newRowspan, tableCell, writer );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/setheadercolumncommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n *\t\teditor.execute( 'setTableColumnHeader' );\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n *\n * @extends module:core/command~Command\n */\nexport default class SetHeaderColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position );\n\n\t\tconst isInTable = !!tableCell;\n\n\t\tthis.isEnabled = isInTable;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection} is in a header column.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t\tthis.value = isInTable && this._isInHeading( tableCell, tableCell.parent.parent );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n\t *\n\t * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n\t *\n\t * @fires execute\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.forceValue] If set, the command will set (`true`) or unset (`false`) header columns according to\n\t * `forceValue` parameter instead of the current model state.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst { column: selectionColumn } = tableUtils.getCellLocation( tableCell );\n\n\t\tif ( options.forceValue === this.value ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst headingColumnsToSet = this.value ? selectionColumn : selectionColumn + 1;\n\n\t\tmodel.change( writer => {\n\t\t\tupdateNumericAttribute( 'headingColumns', headingColumnsToSet, table, writer, 0 );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if a table cell is in the heading section.\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {module:engine/model/element~Element} table\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isInHeading( tableCell, table ) {\n\t\tconst headingColumns = parseInt( table.getAttribute( 'headingColumns' ) || 0 );\n\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst { column } = tableUtils.getCellLocation( tableCell );\n\n\t\treturn !!headingColumns && column < headingColumns;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableutils\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport TableWalker from './tablewalker';\nimport { createEmptyTableCell, updateNumericAttribute } from './commands/utils';\n\n/**\n * The table utilities plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableUtils extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TableUtils';\n\t}\n\n\t/**\n\t * Returns the table cell location as an object with table row and table column indexes.\n\t *\n\t * For instance in the table below:\n\t *\n\t *\t\t    0   1   2   3\n\t *\t\t  +---+---+---+---+\n\t *\t\t0 | a     | b | c |\n\t *\t\t  +       +   +---+\n\t *\t\t1 |       |   | d |\n\t *\t\t  +---+---+   +---+\n\t *\t\t2 | e     |   | f |\n\t *\t\t  +---+---+---+---+\n\t *\n\t * the method will return:\n\t *\n\t *\t\tconst cellA = table.getNodeByPath( [ 0, 0 ] );\n\t *\t\teditor.plugins.get( 'TableUtils' ).getCellLocation( cellA );\n\t *\t\t// will return { row: 0, column: 0 }\n\t *\n\t *\t\tconst cellD = table.getNodeByPath( [ 1, 0 ] );\n\t *\t\teditor.plugins.get( 'TableUtils' ).getCellLocation( cellD );\n\t *\t\t// will return { row: 1, column: 3 }\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @returns {Object} Returns a `{row, column}` object.\n\t */\n\tgetCellLocation( tableCell ) {\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst rowIndex = table.getChildIndex( tableRow );\n\n\t\tconst tableWalker = new TableWalker( table, { startRow: rowIndex, endRow: rowIndex } );\n\n\t\tfor ( const { cell, row, column } of tableWalker ) {\n\t\t\tif ( cell === tableCell ) {\n\t\t\t\treturn { row, column };\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates an empty table with proper structure. The table needs to be inserted into the model,\n\t * ie. using {@link module:engine/model/model~Model#insertContent} function.\n\t *\n\t *\t\tmodel.change( ( writer ) => {\n\t *\t\t\t// Create a table of 2 rows and 7 columns:\n\t *\t\t\tconst table = tableUtils.createTable( writer, 2, 7);\n\t *\n\t *\t\t\t// Insert table to the model at the best position taking current selection:\n\t *\t\t\tmodel.insertContent( table );\n\t *\t\t}\n\t *\n\t * @param {module:engine/model/writer~Writer} writer The model writer.\n\t * @param {Number} rows The number of rows to create.\n\t * @param {Number} columns The number of columns to create.\n\t * @returns {module:engine/model/element~Element} The created table element.\n\t */\n\tcreateTable( writer, rows, columns ) {\n\t\tconst table = writer.createElement( 'table' );\n\n\t\tcreateEmptyRows( writer, table, 0, rows, columns );\n\n\t\treturn table;\n\t}\n\n\t/**\n\t * Inserts rows into a table.\n\t *\n\t *\t\teditor.plugins.get( 'TableUtils' ).insertRows( table, { at: 1, rows: 2 } );\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *\t\trow index\n\t *\t\t  0 +---+---+---+       `at` = 1,      +---+---+---+ 0\n\t *\t\t    | a | b | c |       `rows` = 2,    | a | b | c |\n\t *\t\t  1 +   +---+---+   <-- insert here    +   +---+---+ 1\n\t *\t\t    |   | d | e |                      |   |   |   |\n\t *\t\t  2 +   +---+---+       will give:     +   +---+---+ 2\n\t *\t\t    |   | f | g |                      |   |   |   |\n\t *\t\t  3 +---+---+---+                      +   +---+---+ 3\n\t *\t\t                                       |   | d | e |\n\t *\t\t                                       +---+---+---+ 4\n\t *\t\t                                       +   + f | g |\n\t *\t\t                                       +---+---+---+ 5\n\t *\n\t * @param {module:engine/model/element~Element} table The table model element where the rows will be inserted.\n\t * @param {Object} options\n\t * @param {Number} [options.at=0] Row index at which the rows will be inserted.\n\t * @param {Number} [options.rows=1] The number of rows to insert.\n\t */\n\tinsertRows( table, options = {} ) {\n\t\tconst model = this.editor.model;\n\n\t\tconst insertAt = options.at || 0;\n\t\tconst rowsToInsert = options.rows || 1;\n\n\t\tmodel.change( writer => {\n\t\t\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\t\t\t// Inserting rows inside heading section requires to update `headingRows` attribute as the heading section will grow.\n\t\t\tif ( headingRows > insertAt ) {\n\t\t\t\twriter.setAttribute( 'headingRows', headingRows + rowsToInsert, table );\n\t\t\t}\n\n\t\t\t// Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n\t\t\tif ( insertAt === 0 || insertAt === table.childCount ) {\n\t\t\t\tcreateEmptyRows( writer, table, insertAt, rowsToInsert, this.getColumns( table ) );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iterate over all rows above inserted rows in order to check for rowspanned cells.\n\t\t\tconst tableIterator = new TableWalker( table, { endRow: insertAt } );\n\n\t\t\t// Will hold number of cells needed to insert in created rows.\n\t\t\t// The number might be different then table cell width when there are rowspanned cells.\n\t\t\tlet cellsToInsert = 0;\n\n\t\t\tfor ( const { row, rowspan, colspan, cell } of tableIterator ) {\n\t\t\t\tconst isBeforeInsertedRow = row < insertAt;\n\t\t\t\tconst overlapsInsertedRow = row + rowspan > insertAt;\n\n\t\t\t\tif ( isBeforeInsertedRow && overlapsInsertedRow ) {\n\t\t\t\t\t// This cell overlaps inserted rows so we need to expand it further.\n\t\t\t\t\twriter.setAttribute( 'rowspan', rowspan + rowsToInsert, cell );\n\t\t\t\t}\n\n\t\t\t\t// Calculate how many cells to insert based on the width of cells in a row at insert position.\n\t\t\t\t// It might be lower then table width as some cells might overlaps inserted row.\n\t\t\t\t// In the table above the cell 'a' overlaps inserted row so only two empty cells are need to be created.\n\t\t\t\tif ( row === insertAt ) {\n\t\t\t\t\tcellsToInsert += colspan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcreateEmptyRows( writer, table, insertAt, rowsToInsert, cellsToInsert );\n\t\t} );\n\t}\n\n\t/**\n\t * Inserts columns into a table.\n\t *\n\t *\t\teditor.plugins.get( 'TableUtils' ).insertColumns( table, { at: 1, columns: 2 } );\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *\t\t0   1   2   3                   0   1   2   3   4   5\n\t *\t\t+---+---+---+                   +---+---+---+---+---+\n\t *\t\t| a     | b |                   | a             | b |\n\t *\t\t+       +---+                   +               +---+\n\t *\t\t|       | c |                   |               | c |\n\t *\t\t+---+---+---+     will give:    +---+---+---+---+---+\n\t *\t\t| d | e | f |                   | d |   |   | e | f |\n\t *\t\t+---+   +---+                   +---+---+---+   +---+\n\t *\t\t| g |   | h |                   | g |   |   |   | h |\n\t *\t\t+---+---+---+                   +---+---+---+---+---+\n\t *\t\t| i         |                   | i                 |\n\t *\t\t+---+---+---+                   +---+---+---+---+---+\n\t *\t\t    ^---- insert here, `at` = 1, `columns` = 2\n\t *\n\t * @param {module:engine/model/element~Element} table The table model element where the columns will be inserted.\n\t * @param {Object} options\n\t * @param {Number} [options.at=0] Column index at which the columns will be inserted.\n\t * @param {Number} [options.columns=1] The number of columns to insert.\n\t */\n\tinsertColumns( table, options = {} ) {\n\t\tconst model = this.editor.model;\n\n\t\tconst insertAt = options.at || 0;\n\t\tconst columnsToInsert = options.columns || 1;\n\n\t\tmodel.change( writer => {\n\t\t\tconst headingColumns = table.getAttribute( 'headingColumns' );\n\n\t\t\t// Inserting columns inside heading section requires to update `headingColumns` attribute as the heading section will grow.\n\t\t\tif ( insertAt < headingColumns ) {\n\t\t\t\twriter.setAttribute( 'headingColumns', headingColumns + columnsToInsert, table );\n\t\t\t}\n\n\t\t\tconst tableColumns = this.getColumns( table );\n\n\t\t\t// Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n\t\t\tif ( insertAt === 0 || tableColumns === insertAt ) {\n\t\t\t\tfor ( const tableRow of table.getChildren() ) {\n\t\t\t\t\tcreateCells( columnsToInsert, writer, writer.createPositionAt( tableRow, insertAt ? 'end' : 0 ) );\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tableWalker = new TableWalker( table, { column: insertAt, includeSpanned: true } );\n\n\t\t\tfor ( const { row, cell, cellIndex } of tableWalker ) {\n\t\t\t\t// When iterating over column the table walker outputs either:\n\t\t\t\t// - cells at given column index (cell \"e\" from method docs),\n\t\t\t\t// - spanned columns (spanned cell from row between cells \"g\" and \"h\" - spanned by \"e\", only if `includeSpanned: true`),\n\t\t\t\t// - or a cell from the same row which spans over this column (cell \"a\").\n\n\t\t\t\tconst rowspan = parseInt( cell.getAttribute( 'rowspan' ) || 1 );\n\t\t\t\tconst colspan = parseInt( cell.getAttribute( 'colspan' ) || 1 );\n\n\t\t\t\tif ( cell.index !== insertAt && colspan > 1 ) {\n\t\t\t\t\t// If column is different than `insertAt`, it is a cell that spans over an inserted column (cell \"a\" & \"i\").\n\t\t\t\t\t// For such cells expand them by a number of columns inserted.\n\t\t\t\t\twriter.setAttribute( 'colspan', colspan + columnsToInsert, cell );\n\n\t\t\t\t\t// The `includeSpanned` option will output the \"empty\"/spanned column so skip this row already.\n\t\t\t\t\ttableWalker.skipRow( row );\n\n\t\t\t\t\t// This cell will overlap cells in rows below so skip them also (because of `includeSpanned` option) - (cell \"a\")\n\t\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\t\tfor ( let i = row + 1; i < row + rowspan; i++ ) {\n\t\t\t\t\t\t\ttableWalker.skipRow( i );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// It's either cell at this column index or spanned cell by a rowspanned cell from row above.\n\t\t\t\t\t// In table above it's cell \"e\" and a spanned position from row below (empty cell between cells \"g\" and \"h\")\n\t\t\t\t\tconst insertPosition = writer.createPositionAt( table.getChild( row ), cellIndex );\n\n\t\t\t\t\tcreateCells( columnsToInsert, writer, insertPosition );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Divides a table cell vertically into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating colspans of other cells in a column\n\t * and inserting cells (columns) after that cell.\n\t *\n\t * In the table below, if cell \"a\" is split to 3 cells:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+---+---+---+\n\t *\t\t| d | e | f |\n\t *\t\t+---+---+---+\n\t *\n\t * it will result in the table below:\n\t *\n\t *\t\t+---+---+---+---+---+\n\t *\t\t| a |   |   | b | c |\n\t *\t\t+---+---+---+---+---+\n\t *\t\t| d         | e | f |\n\t *\t\t+---+---+---+---+---+\n\t *\n\t * So cell \"d\" will get its `colspan` updated to `3` and 2 cells will be added (2 columns will be created).\n\t *\n\t * Splitting a cell that already has a `colspan` attribute set will distribute the cell `colspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a         |\n\t *\t\t+---+---+---+\n\t *\t\t| b | c | d |\n\t *\t\t+---+---+---+\n\t *\n\t * Splitting cell \"a\" with `colspan=3` to 2 cells will create 1 cell with a `colspan=a` and cell \"a\" that will have `colspan=2`:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a     |   |\n\t *\t\t+---+---+---+\n\t *\t\t| b | c | d |\n\t *\t\t+---+---+---+\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {Number} numberOfCells\n\t */\n\tsplitCellVertically( tableCell, numberOfCells = 2 ) {\n\t\tconst model = this.editor.model;\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\t\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) || 1 );\n\n\t\tmodel.change( writer => {\n\t\t\t// First check - the cell spans over multiple rows so before doing anything else just split this cell.\n\t\t\tif ( colspan > 1 ) {\n\t\t\t\t// Get spans of new (inserted) cells and span to update of split cell.\n\t\t\t\tconst { newCellsSpan, updatedSpan } = breakSpanEvenly( colspan, numberOfCells );\n\n\t\t\t\tupdateNumericAttribute( 'colspan', updatedSpan, tableCell, writer );\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes = {};\n\n\t\t\t\t// Do not store default value in the model.\n\t\t\t\tif ( newCellsSpan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = newCellsSpan;\n\t\t\t\t}\n\n\t\t\t\t// Copy rowspan of split cell.\n\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = rowspan;\n\t\t\t\t}\n\n\t\t\t\tconst cellsToInsert = colspan > numberOfCells ? numberOfCells - 1 : colspan - 1;\n\t\t\t\tcreateCells( cellsToInsert, writer, writer.createPositionAfter( tableCell ), newCellsAttributes );\n\t\t\t}\n\n\t\t\t// Second check - the cell has colspan of 1 or we need to create more cells then the currently one spans over.\n\t\t\tif ( colspan < numberOfCells ) {\n\t\t\t\tconst cellsToInsert = numberOfCells - colspan;\n\n\t\t\t\t// First step: expand cells on the same column as split cell.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table ) ];\n\n\t\t\t\t// Get the column index of split cell.\n\t\t\t\tconst { column: splitCellColumn } = tableMap.find( ( { cell } ) => cell === tableCell );\n\n\t\t\t\t// Find cells which needs to be expanded vertically - those on the same column or those that spans over split cell's column.\n\t\t\t\tconst cellsToUpdate = tableMap.filter( ( { cell, colspan, column } ) => {\n\t\t\t\t\tconst isOnSameColumn = cell !== tableCell && column === splitCellColumn;\n\t\t\t\t\tconst spansOverColumn = ( column < splitCellColumn && column + colspan > splitCellColumn );\n\n\t\t\t\t\treturn isOnSameColumn || spansOverColumn;\n\t\t\t\t} );\n\n\t\t\t\t// Expand cells vertically.\n\t\t\t\tfor ( const { cell, colspan } of cellsToUpdate ) {\n\t\t\t\t\twriter.setAttribute( 'colspan', colspan + cellsToInsert, cell );\n\t\t\t\t}\n\n\t\t\t\t// Second step: create columns after split cell.\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes = {};\n\n\t\t\t\t// Do not store default value in the model.\n\n\t\t\t\t// Copy rowspan of split cell.\n\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = rowspan;\n\t\t\t\t}\n\n\t\t\t\tcreateCells( cellsToInsert, writer, writer.createPositionAfter( tableCell ), newCellsAttributes );\n\n\t\t\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) || 0;\n\n\t\t\t\t// Update heading section if split cell is in heading section.\n\t\t\t\tif ( headingColumns > splitCellColumn ) {\n\t\t\t\t\tupdateNumericAttribute( 'headingColumns', headingColumns + cellsToInsert, table, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Divides a table cell horizontally into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating rowspans of other cells in the row and inserting rows with a single cell\n\t * below.\n\t *\n\t * If in the table below cell \"b\" is split to 3 cells:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+---+---+---+\n\t *\t\t| d | e | f |\n\t *\t\t+---+---+---+\n\t *\n\t * It will result in the table below:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+   +---+   +\n\t *\t\t|   |   |   |\n\t *\t\t+   +---+   +\n\t *\t\t|   |   |   |\n\t *\t\t+---+---+---+\n\t *\t\t| d | e | f |\n\t *\t\t+---+---+---+\n\t *\n\t * So cells \"a\" and \"b\" will get their `rowspan` updated to `3` and 2 rows with a single cell will be added.\n\t *\n\t * Splitting a cell that already has a `rowspan` attribute set will distribute the cell `rowspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+   +---+---+\n\t *\t\t|   | d | e |\n\t *\t\t+   +---+---+\n\t *\t\t|   | f | g |\n\t *\t\t+   +---+---+\n\t *\t\t|   | h | i |\n\t *\t\t+---+---+---+\n\t *\n\t * Splitting cell \"a\" with `rowspan=4` to 3 cells will create 2 cells with a `rowspan=1` and cell \"a\" will have `rowspan=2`:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+   +---+---+\n\t *\t\t|   | d | e |\n\t *\t\t+---+---+---+\n\t *\t\t|   | f | g |\n\t *\t\t+---+---+---+\n\t *\t\t|   | h | i |\n\t *\t\t+---+---+---+\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {Number} numberOfCells\n\t */\n\tsplitCellHorizontally( tableCell, numberOfCells = 2 ) {\n\t\tconst model = this.editor.model;\n\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\t\tconst splitCellRow = table.getChildIndex( tableRow );\n\n\t\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\t\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) || 1 );\n\n\t\tmodel.change( writer => {\n\t\t\t// First check - the cell spans over multiple rows so before doing anything else just split this cell.\n\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t// Cache table map before updating table.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table, {\n\t\t\t\t\tstartRow: splitCellRow,\n\t\t\t\t\tendRow: splitCellRow + rowspan - 1,\n\t\t\t\t\tincludeSpanned: true\n\t\t\t\t} ) ];\n\n\t\t\t\t// Get spans of new (inserted) cells and span to update of split cell.\n\t\t\t\tconst { newCellsSpan, updatedSpan } = breakSpanEvenly( rowspan, numberOfCells );\n\n\t\t\t\tupdateNumericAttribute( 'rowspan', updatedSpan, tableCell, writer );\n\n\t\t\t\tconst { column: cellColumn } = tableMap.find( ( { cell } ) => cell === tableCell );\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes = {};\n\n\t\t\t\t// Do not store default value in the model.\n\t\t\t\tif ( newCellsSpan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = newCellsSpan;\n\t\t\t\t}\n\n\t\t\t\t// Copy colspan of split cell.\n\t\t\t\tif ( colspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = colspan;\n\t\t\t\t}\n\n\t\t\t\tfor ( const { column, row, cellIndex } of tableMap ) {\n\t\t\t\t\t// As both newly created cells and the split cell might have rowspan,\n\t\t\t\t\t// the insertion of new cells must go to appropriate rows:\n\t\t\t\t\t//\n\t\t\t\t\t// 1. It's a row after split cell + it's height.\n\t\t\t\t\tconst isAfterSplitCell = row >= splitCellRow + updatedSpan;\n\t\t\t\t\t// 2. Is on the same column.\n\t\t\t\t\tconst isOnSameColumn = column === cellColumn;\n\t\t\t\t\t// 3. And it's row index is after previous cell height.\n\t\t\t\t\tconst isInEvenlySplitRow = ( row + splitCellRow + updatedSpan ) % newCellsSpan === 0;\n\n\t\t\t\t\tif ( isAfterSplitCell && isOnSameColumn && isInEvenlySplitRow ) {\n\t\t\t\t\t\tconst position = writer.createPositionAt( table.getChild( row ), cellIndex );\n\n\t\t\t\t\t\tcreateCells( 1, writer, position, newCellsAttributes );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Second check - the cell has rowspan of 1 or we need to create more cells than the current cell spans over.\n\t\t\tif ( rowspan < numberOfCells ) {\n\t\t\t\t// We already split the cell in check one so here we split to the remaining number of cells only.\n\t\t\t\tconst cellsToInsert = numberOfCells - rowspan;\n\n\t\t\t\t// This check is needed since we need to check if there are any cells from previous rows than spans over this cell's row.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table, { startRow: 0, endRow: splitCellRow } ) ];\n\n\t\t\t\t// First step: expand cells.\n\t\t\t\tfor ( const { cell, rowspan, row } of tableMap ) {\n\t\t\t\t\t// Expand rowspan of cells that are either:\n\t\t\t\t\t// - on the same row as current cell,\n\t\t\t\t\t// - or are below split cell row and overlaps that row.\n\t\t\t\t\tif ( cell !== tableCell && row + rowspan > splitCellRow ) {\n\t\t\t\t\t\tconst rowspanToSet = rowspan + cellsToInsert;\n\n\t\t\t\t\t\twriter.setAttribute( 'rowspan', rowspanToSet, cell );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Second step: create rows with single cell below split cell.\n\t\t\t\tconst newCellsAttributes = {};\n\n\t\t\t\t// Copy colspan of split cell.\n\t\t\t\tif ( colspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = colspan;\n\t\t\t\t}\n\n\t\t\t\tcreateEmptyRows( writer, table, splitCellRow + 1, cellsToInsert, 1, newCellsAttributes );\n\n\t\t\t\t// Update heading section if split cell is in heading section.\n\t\t\t\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\t\t\t\tif ( headingRows > splitCellRow ) {\n\t\t\t\t\tupdateNumericAttribute( 'headingRows', headingRows + cellsToInsert, table, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the number of columns for a given table.\n\t *\n\t *\t\teditor.plugins.get( 'TableUtils' ).getColumns( table );\n\t *\n\t * @param {module:engine/model/element~Element} table The table to analyze.\n\t * @returns {Number}\n\t */\n\tgetColumns( table ) {\n\t\t// Analyze first row only as all the rows should have the same width.\n\t\tconst row = table.getChild( 0 );\n\n\t\treturn [ ...row.getChildren() ].reduce( ( columns, row ) => {\n\t\t\tconst columnWidth = parseInt( row.getAttribute( 'colspan' ) || 1 );\n\n\t\t\treturn columns + columnWidth;\n\t\t}, 0 );\n\t}\n}\n\n// Creates empty rows at the given index in an existing table.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/element~Element} table\n// @param {Number} insertAt Row index of row insertion.\n// @param {Number} rows Number of rows to create.\n// @param {Number} tableCellToInsert Number of cells to insert in each row.\nfunction createEmptyRows( writer, table, insertAt, rows, tableCellToInsert, attributes = {} ) {\n\tfor ( let i = 0; i < rows; i++ ) {\n\t\tconst tableRow = writer.createElement( 'tableRow' );\n\n\t\twriter.insert( tableRow, table, insertAt );\n\n\t\tcreateCells( tableCellToInsert, writer, writer.createPositionAt( tableRow, 'end' ), attributes );\n\t}\n}\n\n// Creates cells at a given position.\n//\n// @param {Number} columns Number of columns to create\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/position~Position} insertPosition\nfunction createCells( cells, writer, insertPosition, attributes = {} ) {\n\tfor ( let i = 0; i < cells; i++ ) {\n\t\tcreateEmptyTableCell( writer, insertPosition, attributes );\n\t}\n}\n\n// Evenly distributes the span of a cell to a number of provided cells.\n// The resulting spans will always be integer values.\n//\n// For instance breaking a span of 7 into 3 cells will return:\n//\n//\t\t{ newCellsSpan: 2, updatedSpan: 3 }\n//\n// as two cells will have a span of 2 and the remainder will go the first cell so its span will change to 3.\n//\n// @param {Number} span Span value do break.\n// @param {Number} numberOfCells Number of resulting spans.\n// @returns {{newCellsSpan: Number, updatedSpan: Number}}\nfunction breakSpanEvenly( span, numberOfCells ) {\n\tif ( span < numberOfCells ) {\n\t\treturn { newCellsSpan: 1, updatedSpan: 1 };\n\t}\n\n\tconst newCellsSpan = Math.floor( span / numberOfCells );\n\tconst updatedSpan = ( span - newCellsSpan * numberOfCells ) + newCellsSpan;\n\n\treturn { newCellsSpan, updatedSpan };\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/table-layout-post-fixer\n */\n\nimport { createEmptyTableCell, findAncestor, updateNumericAttribute } from './../commands/utils';\nimport TableWalker from './../tablewalker';\n\n/**\n * Injects a table layout post-fixer into the model.\n *\n * The role of the table layout post-fixer is to ensure that the table rows have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * All table rows have the same size.\n * * None of a table cells that extend vertically beyond their section (either header or body).\n * * A table cell has always at least one element as child.\n *\n * If the table structure is not correct, the post-fixer will automatically correct it in two steps:\n *\n * 1. It will clip table cells that extends beyond it section.\n * 2. It will add empty table cells to those rows which are narrower then the widest table row.\n *\n * ## Clipping overlapping table cells\n *\n * Such situation may occur when pasting a table (or part of a table) to the editor from external sources.\n *\n * For example, see the following table which has the cell (FOO) with the rowspan attribute (2):\n *\n *\t\t<table headingRows=\"1\">\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell rowspan=\"2\"><paragraph>FOO</paragraph></tableCell>\n *\t\t\t\t<tableCell colspan=\"2\"><paragraph>BAR</paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell><paragraph>BAZ</paragraph></tableCell>\n *\t\t\t\t<tableCell><paragraph>XYZ</paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * will be rendered in the view as:\n *\n *\t\t<table>\n *\t\t\t<thead>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td rowspan=\"2\">FOO</td>\n *\t\t\t\t\t<td colspan=\"2\">BAR</td>\n *\t\t\t\t</tr>\n *\t\t\t</thead>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>BAZ</td>\n *\t\t\t\t\t<td>XYZ</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * In the above example the table will be rendered as a table with two rows - one in the header and second one in the body.\n * The table cell (FOO) cannot span over multiple rows as it would expand from the header to the body section.\n * The `rowspan` attribute must be changed to (1). The value (1) is a default value of the `rowspan` attribute\n * so the `rowspan` attribute will be removed from the model.\n *\n * The table cell with BAZ contents will be in the first column of the table.\n *\n * ## Adding missing table cells\n *\n * The table post-fixer will insert empty table cells to equalize table rows sizes (number of columns).\n * The size of a table row is calculated by counting column spans of table cells - both horizontal (from the same row) and\n * vertical (from rows above).\n *\n * In the above example, the table row in the body section of the table is narrower then the row from the header - it has two cells\n * with the default colspan (1). The header row has one cell with colspan (1) and second with colspan (2).\n * The table cell (FOO) does not expand beyond the head section (and as such will be fixed in the first step of this post-fixer).\n * The post-fixer will add a missing table cell to the row in the body section of the table.\n *\n * The table from the above example will be fixed and rendered to the view as below:\n *\n *\t\t<table>\n *\t\t\t<thead>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td rowspan=\"2\">FOO</td>\n *\t\t\t\t\t<td colspan=\"2\">BAR</td>\n *\t\t\t\t</tr>\n *\t\t\t</thead>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>BAZ</td>\n *\t\t\t\t\t<td>XYZ</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * ## Collaboration & Undo - Expectations vs post-fixer results\n *\n * The table post-fixer only ensures proper structure without deeper analysis of the nature of a change. As such, it might lead\n * to a structure which was not intended by the user changes. In particular, it will also fix undo steps (in conjunction with collaboration)\n * in which editor content might not return to the original state.\n *\n * This will usually happen when one or more users changes size of the table.\n *\n * As en example see a table below:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * and user actions:\n *\n * 1. Both user have table with two rows and two columns.\n * 2. User A adds a column at the end of the table - this will insert empty table cells to two rows.\n * 3. User B adds a row at the end of the table- this will insert a row with two empty table cells.\n * 4. Both users will have a table as below:\n *\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * The last row is shorter then others so table post-fixer will add empty row to tha last row:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * Unfortunately undo doesn't know the nature of changes and depending which user will apply post-fixer changes undoing them might lead to\n * broken table. If User B will undo inserting column to a table the undo engine will undo only operations of\n * inserting empty cells to rows from initial table state (row 1 & 2) but the cell in post-fixed row will remain:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * After undo the table post-fixer will detect that two rows are shorter then other and will fix table to:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer after undo)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer after undo)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableLayoutPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => tableLayoutPostFixer( writer, model ) );\n}\n\n// The table layout post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction tableLayoutPostFixer( writer, model ) {\n\tconst changes = model.document.differ.getChanges();\n\n\tlet wasFixed = false;\n\n\t// Do not analyze the same table more then once - may happen for multiple changes in the same table.\n\tconst analyzedTables = new Set();\n\n\tfor ( const entry of changes ) {\n\t\tlet table;\n\n\t\tif ( entry.name == 'table' && entry.type == 'insert' ) {\n\t\t\ttable = entry.position.nodeAfter;\n\t\t}\n\n\t\t// Fix table on adding/removing table cells and rows.\n\t\tif ( entry.name == 'tableRow' || entry.name == 'tableCell' ) {\n\t\t\ttable = findAncestor( 'table', entry.position );\n\t\t}\n\n\t\t// Fix table on any table's attribute change - including attributes of table cells.\n\t\tif ( isTableAttributeEntry( entry ) ) {\n\t\t\ttable = findAncestor( 'table', entry.range.start );\n\t\t}\n\n\t\tif ( table && !analyzedTables.has( table ) ) {\n\t\t\t// Step 1: correct rowspans of table cells if necessary.\n\t\t\t// The wasFixed flag should be true if any of tables in batch was fixed - might be more then one.\n\t\t\twasFixed = fixTableCellsRowspan( table, writer ) || wasFixed;\n\t\t\t// Step 2: fix table rows sizes.\n\t\t\twasFixed = fixTableRowsSizes( table, writer ) || wasFixed;\n\n\t\t\tanalyzedTables.add( table );\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes the invalid value of the rowspan attribute because a table cell cannot vertically extend beyond the table section it belongs to.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean} Returns true if table was fixed.\nfunction fixTableCellsRowspan( table, writer ) {\n\tlet wasFixed = false;\n\n\tconst cellsToTrim = findCellsToTrim( table );\n\n\tif ( cellsToTrim.length ) {\n\t\twasFixed = true;\n\n\t\tfor ( const data of cellsToTrim ) {\n\t\t\tupdateNumericAttribute( 'rowspan', data.rowspan, data.cell, writer, 1 );\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Makes all table rows in a table the same size.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean} Returns true if table was fixed.\nfunction fixTableRowsSizes( table, writer ) {\n\tlet wasFixed = false;\n\n\tconst rowsLengths = getRowsLengths( table );\n\tconst tableSize = rowsLengths[ 0 ];\n\n\tconst isValid = Object.values( rowsLengths ).every( length => length === tableSize );\n\n\tif ( !isValid ) {\n\t\tconst maxColumns = Object.values( rowsLengths ).reduce( ( prev, current ) => current > prev ? current : prev, 0 );\n\n\t\tfor ( const [ rowIndex, size ] of Object.entries( rowsLengths ) ) {\n\t\t\tconst columnsToInsert = maxColumns - size;\n\n\t\t\tif ( columnsToInsert ) {\n\t\t\t\tfor ( let i = 0; i < columnsToInsert; i++ ) {\n\t\t\t\t\tcreateEmptyTableCell( writer, writer.createPositionAt( table.getChild( rowIndex ), 'end' ) );\n\t\t\t\t}\n\n\t\t\t\twasFixed = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Searches for the table cells that extends beyond the table section to which they belong to. It will return an array of objects\n// that holds table cells to be trimmed and correct value of a rowspan attribute to set.\n//\n// @param {module:engine/model/element~Element} table\n// @returns {Array.<{{cell, rowspan}}>}\nfunction findCellsToTrim( table ) {\n\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) || 0 );\n\tconst maxRows = table.childCount;\n\n\tconst cellsToTrim = [];\n\n\tfor ( const { row, rowspan, cell } of new TableWalker( table ) ) {\n\t\t// Skip cells that do not expand over its row.\n\t\tif ( rowspan < 2 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst isInHeader = row < headingRows;\n\n\t\t// Row limit is either end of header section or whole table as table body is after the header.\n\t\tconst rowLimit = isInHeader ? headingRows : maxRows;\n\n\t\t// If table cell expands over its limit reduce it height to proper value.\n\t\tif ( row + rowspan > rowLimit ) {\n\t\t\tconst newRowspan = rowLimit - row;\n\n\t\t\tcellsToTrim.push( { cell, rowspan: newRowspan } );\n\t\t}\n\t}\n\n\treturn cellsToTrim;\n}\n\n// Returns an object with lengths of rows assigned to the corresponding row index.\n//\n// @param {module:engine/model/element~Element} table\n// @returns {Object}\nfunction getRowsLengths( table ) {\n\tconst lengths = {};\n\n\tfor ( const { row } of new TableWalker( table, { includeSpanned: true } ) ) {\n\t\tif ( !lengths[ row ] ) {\n\t\t\tlengths[ row ] = 0;\n\t\t}\n\n\t\tlengths[ row ] += 1;\n\t}\n\n\treturn lengths;\n}\n\n// Checks if the differ entry for an attribute change is one of table's attributes.\n//\n// @param entry\n// @returns {Boolean}\nfunction isTableAttributeEntry( entry ) {\n\tconst isAttributeType = entry.type === 'attribute';\n\tconst key = entry.attributeKey;\n\n\treturn isAttributeType && ( key === 'headingRows' || key === 'colspan' || key === 'rowspan' );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/table-cell-paragraph-post-fixer\n */\n\n/**\n * Injects a table cell post-fixer into the model which inserts `paragraph` element into empty table cells.\n *\n * A table cell must contain at least one block element as a child. An empty table cell will have empty `paragraph` as a child.\n *\n *\t\t<table>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * Will be fixed to:\n *\n *\t\t<table>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell><paragraph></paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableCellParagraphPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => tableCellContentsPostFixer( writer, model ) );\n}\n\n// The table cell contents post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction tableCellContentsPostFixer( writer, model ) {\n\tconst changes = model.document.differ.getChanges();\n\n\tlet wasFixed = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name == 'table' ) {\n\t\t\twasFixed = fixTable( entry.position.nodeAfter, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( entry.type == 'insert' && entry.name == 'tableRow' ) {\n\t\t\twasFixed = fixTableRow( entry.position.nodeAfter, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( entry.type == 'insert' && entry.name == 'tableCell' ) {\n\t\t\twasFixed = fixTableCellContent( entry.position.nodeAfter, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( checkTableCellChange( entry ) ) {\n\t\t\twasFixed = fixTableCellContent( entry.position.parent, writer ) || wasFixed;\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes all table cells in a table.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\nfunction fixTable( table, writer ) {\n\tlet wasFixed = false;\n\n\tfor ( const row of table.getChildren() ) {\n\t\twasFixed = fixTableRow( row, writer ) || wasFixed;\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes all table cells in a table row.\n//\n// @param {module:engine/model/element~Element} tableRow\n// @param {module:engine/model/writer~Writer} writer\nfunction fixTableRow( tableRow, writer ) {\n\tlet wasFixed = false;\n\n\tfor ( const tableCell of tableRow.getChildren() ) {\n\t\twasFixed = fixTableCellContent( tableCell, writer ) || wasFixed;\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes all table cell content by:\n// - adding paragraph to a table cell without any child.\n// - wrapping direct $text in <paragraph>.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean}\nfunction fixTableCellContent( tableCell, writer ) {\n\t// Insert paragraph to an empty table cell.\n\tif ( tableCell.childCount == 0 ) {\n\t\twriter.insertElement( 'paragraph', tableCell );\n\n\t\treturn true;\n\t}\n\n\t// Check table cell children for directly placed text nodes.\n\t// Temporary solution. See https://github.com/ckeditor/ckeditor5/issues/1464.\n\tconst textNodes = Array.from( tableCell.getChildren() ).filter( child => child.is( 'text' ) );\n\n\tfor ( const child of textNodes ) {\n\t\twriter.wrap( writer.createRangeOn( child ), 'paragraph' );\n\t}\n\n\t// Return true when there were text nodes to fix.\n\treturn !!textNodes.length;\n}\n\n// Check if differ change should fix table cell. This happens on:\n// - removing content from table cell (ie tableCell can be left empty).\n// - adding text node directly into a table cell.\n//\n// @param {Object} differ change entry\n// @returns {Boolean}\nfunction checkTableCellChange( entry ) {\n\tif ( !entry.position || !entry.position.parent.is( 'tableCell' ) ) {\n\t\treturn false;\n\t}\n\n\treturn entry.type == 'insert' && entry.name == '$text' || entry.type == 'remove';\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/table-cell-refresh-post-fixer\n */\n\n/**\n * Injects a table cell post-fixer into the model which marks the table cell in the differ to have it re-rendered.\n *\n * Model `paragraph` inside a table cell can be rendered as `<span>` or `<p>`. It is rendered as `<span>` if this is the only block\n * element in that table cell and it doesn't have any attributes. It is rendered as `<p>` otherwise.\n *\n * When table cell content changes, for example a second `paragraph` element is added we need to ensure that the first `paragraph` is\n * re-rendered so it changes to `<p>` from `<span>`. The easiest way to do it is to re-render whole table cell.\n *\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableCellRefreshPostFixer( model ) {\n\tmodel.document.registerPostFixer( () => tableCellRefreshPostFixer( model ) );\n}\n\nfunction tableCellRefreshPostFixer( model ) {\n\tconst differ = model.document.differ;\n\n\t// Stores cells to be refreshed so the table cell will be refreshed once for multiple changes.\n\tconst cellsToRefresh = new Set();\n\n\tfor ( const change of differ.getChanges() ) {\n\t\tconst parent = change.type == 'insert' || change.type == 'remove' ? change.position.parent : change.range.start.parent;\n\n\t\tif ( parent.is( 'tableCell' ) && checkRefresh( parent, change.type ) ) {\n\t\t\tcellsToRefresh.add( parent );\n\t\t}\n\t}\n\n\tif ( cellsToRefresh.size ) {\n\t\tfor ( const tableCell of cellsToRefresh.values() ) {\n\t\t\tdiffer.refreshItem( tableCell );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Checks if the model table cell requires refreshing to be re-rendered to a proper state in the view.\n//\n// This methods detects changes that will require renaming <span> to <p> (or vice versa) in the view.\n//\n// This method is a simple heuristic that checks only a single change and will sometimes give a false positive result when multiple changes\n// will result in a state that does not require renaming in the view (but will be seen as requiring a refresh).\n//\n// For instance: a `<span>` should be renamed to `<p>` when adding an attribute to a `<paragraph>`.\n// But adding one attribute and removing another one will result in a false positive: the check for added attribute will see one attribute\n// on a paragraph and will falsy qualify such change as adding an attribute to a paragraph without any attribute.\n//\n// @param {module:engine/model/element~Element} tableCell Table cell to check.\n// @param {String} type Type of change.\nfunction checkRefresh( tableCell, type ) {\n\tconst hasInnerParagraph = Array.from( tableCell.getChildren() ).some( child => child.is( 'paragraph' ) );\n\n\t// If there is no paragraph in table cell then the view doesn't require refreshing.\n\t//\n\t// Why? What we really want to achieve is to make all the old paragraphs (which weren't added in this batch) to be\n\t// converted once again, so that the paragraph-in-table-cell converter can correctly create a `<p>` or a `<span>` element.\n\t// If there are no paragraphs in the table cell, we don't care.\n\tif ( !hasInnerParagraph ) {\n\t\treturn false;\n\t}\n\n\t// For attribute change we only refresh if there is a single paragraph as in this case we may want to change existing `<span>` to `<p>`.\n\tif ( type == 'attribute' ) {\n\t\tconst attributesCount = Array.from( tableCell.getChild( 0 ).getAttributeKeys() ).length;\n\n\t\treturn tableCell.childCount === 1 && attributesCount < 2;\n\t}\n\n\t// For other changes (insert, remove) the `<span>` to `<p>` change is needed when:\n\t//\n\t// - another element is added to a single paragraph (childCount becomes >= 2)\n\t// - another element is removed and a single paragraph is left (childCount == 1)\n\treturn tableCell.childCount <= ( type == 'insert' ? 2 : 1 );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport upcastTable, { upcastTableCell } from './converters/upcasttable';\nimport {\n\tdowncastInsertCell,\n\tdowncastInsertRow,\n\tdowncastInsertTable,\n\tdowncastRemoveRow,\n\tdowncastTableHeadingColumnsChange,\n\tdowncastTableHeadingRowsChange\n} from './converters/downcast';\n\nimport InsertTableCommand from './commands/inserttablecommand';\nimport InsertRowCommand from './commands/insertrowcommand';\nimport InsertColumnCommand from './commands/insertcolumncommand';\nimport SplitCellCommand from './commands/splitcellcommand';\nimport MergeCellCommand from './commands/mergecellcommand';\nimport RemoveRowCommand from './commands/removerowcommand';\nimport RemoveColumnCommand from './commands/removecolumncommand';\nimport SetHeaderRowCommand from './commands/setheaderrowcommand';\nimport SetHeaderColumnCommand from './commands/setheadercolumncommand';\nimport { findAncestor } from './commands/utils';\nimport TableUtils from '../src/tableutils';\n\nimport injectTableLayoutPostFixer from './converters/table-layout-post-fixer';\nimport injectTableCellParagraphPostFixer from './converters/table-cell-paragraph-post-fixer';\nimport injectTableCellRefreshPostFixer from './converters/table-cell-refresh-post-fixer';\n\nimport '../theme/tableediting.css';\n\n/**\n * The table editing feature.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TableEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\t\tconst conversion = editor.conversion;\n\n\t\tschema.register( 'table', {\n\t\t\tallowWhere: '$block',\n\t\t\tallowAttributes: [ 'headingRows', 'headingColumns' ],\n\t\t\tisLimit: true,\n\t\t\tisObject: true,\n\t\t\tisBlock: true\n\t\t} );\n\n\t\tschema.register( 'tableRow', {\n\t\t\tallowIn: 'table',\n\t\t\tisLimit: true\n\t\t} );\n\n\t\tschema.register( 'tableCell', {\n\t\t\tallowIn: 'tableRow',\n\t\t\tallowAttributes: [ 'colspan', 'rowspan' ],\n\t\t\tisLimit: true\n\t\t} );\n\n\t\t// Allow all $block content inside table cell.\n\t\tschema.extend( '$block', { allowIn: 'tableCell' } );\n\n\t\t// Disallow table in table.\n\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t\t\tif ( childDefinition.name == 'table' && Array.from( context.getNames() ).includes( 'table' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// Table conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTable() );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertTable( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertTable() );\n\n\t\t// Table row conversion.\n\t\tconversion.for( 'upcast' ).elementToElement( { model: 'tableRow', view: 'tr' } );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertRow( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertRow() );\n\t\tconversion.for( 'downcast' ).add( downcastRemoveRow() );\n\n\t\t// Table cell conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTableCell( 'td' ) );\n\t\tconversion.for( 'upcast' ).add( upcastTableCell( 'th' ) );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertCell( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertCell() );\n\n\t\t// Table attributes conversion.\n\t\tconversion.attributeToAttribute( { model: 'colspan', view: 'colspan' } );\n\t\tconversion.attributeToAttribute( { model: 'rowspan', view: 'rowspan' } );\n\n\t\t// Table heading rows and cols conversion.\n\t\tconversion.for( 'editingDowncast' ).add( downcastTableHeadingColumnsChange( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastTableHeadingColumnsChange() );\n\t\tconversion.for( 'editingDowncast' ).add( downcastTableHeadingRowsChange( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastTableHeadingRowsChange() );\n\n\t\t// Define all the commands.\n\t\teditor.commands.add( 'insertTable', new InsertTableCommand( editor ) );\n\t\teditor.commands.add( 'insertTableRowAbove', new InsertRowCommand( editor, { order: 'above' } ) );\n\t\teditor.commands.add( 'insertTableRowBelow', new InsertRowCommand( editor, { order: 'below' } ) );\n\t\teditor.commands.add( 'insertTableColumnLeft', new InsertColumnCommand( editor, { order: 'left' } ) );\n\t\teditor.commands.add( 'insertTableColumnRight', new InsertColumnCommand( editor, { order: 'right' } ) );\n\n\t\teditor.commands.add( 'removeTableRow', new RemoveRowCommand( editor ) );\n\t\teditor.commands.add( 'removeTableColumn', new RemoveColumnCommand( editor ) );\n\n\t\teditor.commands.add( 'splitTableCellVertically', new SplitCellCommand( editor, { direction: 'vertically' } ) );\n\t\teditor.commands.add( 'splitTableCellHorizontally', new SplitCellCommand( editor, { direction: 'horizontally' } ) );\n\n\t\teditor.commands.add( 'mergeTableCellRight', new MergeCellCommand( editor, { direction: 'right' } ) );\n\t\teditor.commands.add( 'mergeTableCellLeft', new MergeCellCommand( editor, { direction: 'left' } ) );\n\t\teditor.commands.add( 'mergeTableCellDown', new MergeCellCommand( editor, { direction: 'down' } ) );\n\t\teditor.commands.add( 'mergeTableCellUp', new MergeCellCommand( editor, { direction: 'up' } ) );\n\n\t\teditor.commands.add( 'setTableColumnHeader', new SetHeaderColumnCommand( editor ) );\n\t\teditor.commands.add( 'setTableRowHeader', new SetHeaderRowCommand( editor ) );\n\n\t\tinjectTableLayoutPostFixer( model );\n\t\tinjectTableCellRefreshPostFixer( model );\n\t\tinjectTableCellParagraphPostFixer( model );\n\n\t\t// Handle tab key navigation.\n\t\tthis.editor.keystrokes.set( 'Tab', ( ...args ) => this._handleTabOnSelectedTable( ...args ), { priority: 'low' } );\n\t\tthis.editor.keystrokes.set( 'Tab', this._getTabHandler( true ), { priority: 'low' } );\n\t\tthis.editor.keystrokes.set( 'Shift+Tab', this._getTabHandler( false ), { priority: 'low' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TableUtils ];\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events for the <kbd>Tab</kbd> key executed\n\t * when the table widget is selected.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_handleTabOnSelectedTable( domEventData, cancel ) {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\n\t\tif ( !selection.isCollapsed && selection.rangeCount === 1 && selection.getFirstRange().isFlat ) {\n\t\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\t\tif ( !selectedElement || !selectedElement.is( 'table' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcancel();\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeIn( selectedElement.getChild( 0 ).getChild( 0 ) ) );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a handler for {@link module:engine/view/document~Document#event:keydown keydown} events for the <kbd>Tab</kbd> key executed\n\t * inside table cell.\n\t *\n\t * @private\n\t * @param {Boolean} isForward Whether this handler will move selection to the next cell or previous.\n\t */\n\t_getTabHandler( isForward ) {\n\t\tconst editor = this.editor;\n\n\t\treturn ( domEventData, cancel ) => {\n\t\t\tconst selection = editor.model.document.selection;\n\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\n\t\t\tif ( !tableCell ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcancel();\n\n\t\t\tconst tableRow = tableCell.parent;\n\t\t\tconst table = tableRow.parent;\n\n\t\t\tconst currentRowIndex = table.getChildIndex( tableRow );\n\t\t\tconst currentCellIndex = tableRow.getChildIndex( tableCell );\n\n\t\t\tconst isFirstCellInRow = currentCellIndex === 0;\n\n\t\t\tif ( !isForward && isFirstCellInRow && currentRowIndex === 0 ) {\n\t\t\t\t// It's the first cell of a table - don't do anything (stay in current position).\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isLastCellInRow = currentCellIndex === tableRow.childCount - 1;\n\t\t\tconst isLastRow = currentRowIndex === table.childCount - 1;\n\n\t\t\tif ( isForward && isLastRow && isLastCellInRow ) {\n\t\t\t\teditor.execute( 'insertTableRowBelow' );\n\n\t\t\t\t// Check if the command actually added a row. If `insertTableRowBelow` execution didn't add a row (because it was disabled\n\t\t\t\t// or it got overwritten) do not change the selection.\n\t\t\t\tif ( currentRowIndex === table.childCount - 1 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet cellToFocus;\n\n\t\t\t// Move to first cell in next row.\n\t\t\tif ( isForward && isLastCellInRow ) {\n\t\t\t\tconst nextRow = table.getChild( currentRowIndex + 1 );\n\n\t\t\t\tcellToFocus = nextRow.getChild( 0 );\n\t\t\t}\n\t\t\t// Move to last cell in a previous row.\n\t\t\telse if ( !isForward && isFirstCellInRow ) {\n\t\t\t\tconst previousRow = table.getChild( currentRowIndex - 1 );\n\n\t\t\t\tcellToFocus = previousRow.getChild( previousRow.childCount - 1 );\n\t\t\t}\n\t\t\t// Move to next/previous cell.\n\t\t\telse {\n\t\t\t\tcellToFocus = tableRow.getChild( currentCellIndex + ( isForward ? 1 : -1 ) );\n\t\t\t}\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeIn( cellToFocus ) );\n\t\t\t} );\n\t\t};\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/ui/inserttableview\n */\n\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n\nimport './../../theme/inserttable.css';\n\n/**\n * The table size view.\n *\n * It renders a 10x10 grid to choose the inserted table size.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class InsertTableView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * A collection of table size box items.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * The currently selected number of rows of the new table.\n\t\t *\n\t\t * @observable\n\t\t * @member {Number} #rows\n\t\t */\n\t\tthis.set( 'rows', 0 );\n\n\t\t/**\n\t\t * The currently selected number of columns of the new table.\n\t\t *\n\t\t * @observable\n\t\t * @member {Number} #columns\n\t\t */\n\t\tthis.set( 'columns', 0 );\n\n\t\t/**\n\t\t * The label text displayed under the boxes.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #label\n\t\t */\n\t\tthis.bind( 'label' )\n\t\t\t.to( this, 'columns', this, 'rows', ( columns, rows ) => `${ rows } × ${ columns }` );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [ 'ck' ]\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [ 'ck-insert-table-dropdown__grid' ]\n\t\t\t\t\t},\n\t\t\t\t\tchildren: this.items\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [ 'ck-insert-table-dropdown__label' ]\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: bind.to( 'label' )\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\n\t\t\ton: {\n\t\t\t\tmousedown: bind.to( evt => {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t} ),\n\n\t\t\t\tclick: bind.to( () => {\n\t\t\t\t\tthis.fire( 'execute' );\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\n\t\t// Add grid boxes to table selection view.\n\t\tfor ( let index = 0; index < 100; index++ ) {\n\t\t\tconst boxView = new TableSizeGridBoxView();\n\n\t\t\t// Listen to box view 'over' event which indicates that mouse is over this box.\n\t\t\tboxView.on( 'over', () => {\n\t\t\t\t// Translate box index to the row & column index.\n\t\t\t\tconst row = Math.floor( index / 10 );\n\t\t\t\tconst column = index % 10;\n\n\t\t\t\t// As row & column indexes are zero-based transform it to number of selected rows & columns.\n\t\t\t\tthis.set( 'rows', row + 1 );\n\t\t\t\tthis.set( 'columns', column + 1 );\n\t\t\t} );\n\n\t\t\tthis.items.add( boxView );\n\t\t}\n\n\t\tthis.on( 'change:columns', () => {\n\t\t\tthis._highlightGridBoxes();\n\t\t} );\n\n\t\tthis.on( 'change:rows', () => {\n\t\t\tthis._highlightGridBoxes();\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfocus() {\n\t\t// The dropdown panel expects DropdownPanelFocusable interface on views passed to dropdown panel. See #30.\n\t\t// The method should be implemented while working on keyboard support for this view. See #22.\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfocusLast() {\n\t\t// The dropdown panel expects DropdownPanelFocusable interface on views passed to dropdown panel. See #30.\n\t\t// The method should be implemented while working on keyboard support for this view. See #22.\n\t}\n\n\t/**\n\t * Highlights grid boxes depending on rows and columns selected.\n\t *\n\t * @private\n\t */\n\t_highlightGridBoxes() {\n\t\tconst rows = this.rows;\n\t\tconst columns = this.columns;\n\n\t\tthis.items.map( ( boxView, index ) => {\n\t\t\t// Translate box index to the row & column index.\n\t\t\tconst itemRow = Math.floor( index / 10 );\n\t\t\tconst itemColumn = index % 10;\n\n\t\t\t// Grid box is highlighted when its row & column index belongs to selected number of rows & columns.\n\t\t\tconst isOn = itemRow < rows && itemColumn < columns;\n\n\t\t\tboxView.set( 'isOn', isOn );\n\t\t} );\n\t}\n}\n\n/**\n * A single grid box view element.\n *\n * This class is used to render the table size selection grid in {@link module:table/ui/inserttableview~InsertTableView}.\n *\n * @private\n */\nclass TableSizeGridBoxView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Controls whether the grid box view is \"on\".\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isOn\n\t\t */\n\t\tthis.set( 'isOn', false );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-insert-table-dropdown-grid-box',\n\t\t\t\t\tbind.if( 'isOn', 'ck-on' )\n\t\t\t\t]\n\t\t\t},\n\t\t\ton: {\n\t\t\t\tmouseover: bind.to( 'over' )\n\t\t\t}\n\t\t} );\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 6v3h4V6H3zm0 4v3h4v-3H3zm0 4v3h4v-3H3zm5 3h4v-3H8v3zm5 0h4v-3h-4v3zm4-4v-3h-4v3h4zm0-4V6h-4v3h4zm1.5 8a1.5 1.5 0 0 1-1.5 1.5H3A1.5 1.5 0 0 1 1.5 17V4c.222-.863 1.068-1.5 2-1.5h13c.932 0 1.778.637 2 1.5v13zM12 13v-3H8v3h4zm0-4V6H8v3h4z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M18 7v1H2V7h16zm0 5v1H2v-1h16z\\\" opacity=\\\".6\\\"/><path d=\\\"M14 1v18a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1zm-2 1H8v4h4V2zm0 6H8v4h4V8zm0 6H8v4h4v-4z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 2h1v16H7V2zm5 0h1v16h-1V2z\\\" opacity=\\\".6\\\"/><path d=\\\"M1 6h18a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1zm1 2v4h4V8H2zm6 0v4h4V8H8zm6 0v4h4V8h-4z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 2h1v16H7V2zm5 0h1v7h-1V2zm6 5v1H2V7h16zM8 12v1H2v-1h6z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 7h12a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1zm1 2v9h10V9H8z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport {\n    addListToDropdown,\n    createDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport InsertTableView from './ui/inserttableview';\nimport tableIcon from './../theme/icons/table.svg';\nimport tableColumnIcon from './../theme/icons/table-column.svg';\nimport tableRowIcon from './../theme/icons/table-row.svg';\nimport tableMergeCellIcon from './../theme/icons/table-merge-cell.svg';\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` dropdown.\n *\n * The `'tableColumn'`, `'tableRow'`, `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        const contentLanguageDirection = editor.locale.contentLanguageDirection;\n        const isContentLtr = contentLanguageDirection === 'ltr';\n        editor.ui.componentFactory.add('insertTable', locale => {\n            const command = editor.commands.get('insertTable');\n            const dropdownView = createDropdown(locale);\n            dropdownView.bind('isEnabled').to(command);\n            // Decorate dropdown's button.\n            dropdownView.buttonView.set({\n                icon: tableIcon,\n                label: t('Insert table'),\n                tooltip: true\n            });\n            // Prepare custom view for dropdown's panel.\n            const insertTableView = new InsertTableView(locale);\n            dropdownView.panelView.children.add(insertTableView);\n            insertTableView.delegate('execute').to(dropdownView);\n            dropdownView.buttonView.on('open', () => {\n                // Reset the chooser before showing it to the user.\n                insertTableView.rows = 0;\n                insertTableView.columns = 0;\n            });\n            dropdownView.on('execute', () => {\n                editor.execute('insertTable', {\n                    rows: insertTableView.rows,\n                    columns: insertTableView.columns\n                });\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add('tableColumn', locale => {\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableColumnHeader',\n                        label: t('Header column'),\n                        bindIsOn: true\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'insertTableColumnLeft' : 'insertTableColumnRight',\n                        label: t('Insert column left')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'insertTableColumnRight' : 'insertTableColumnLeft',\n                        label: t('Insert column right')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableColumn',\n                        label: t('Delete column')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Column'), tableColumnIcon, options, locale);\n        });\n        editor.ui.componentFactory.add('tableRow', locale => {\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableRowHeader',\n                        label: t('Header row'),\n                        bindIsOn: true\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowBelow',\n                        label: t('Insert row below')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowAbove',\n                        label: t('Insert row above')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableRow',\n                        label: t('Delete row')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Row'), tableRowIcon, options, locale);\n        });\n        editor.ui.componentFactory.add('mergeTableCells', locale => {\n            const options = [\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellUp',\n                        label: t('Merge cell up')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'mergeTableCellRight' : 'mergeTableCellLeft',\n                        label: t('Merge cell right')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellDown',\n                        label: t('Merge cell down')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'mergeTableCellLeft' : 'mergeTableCellRight',\n                        label: t('Merge cell left')\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellVertically',\n                        label: t('Split cell vertically')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellHorizontally',\n                        label: t('Split cell horizontally')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Merge cells'), tableMergeCellIcon, options, locale);\n        });\n    }\n    /**\n\t * Creates a dropdown view from the set of options.\n\t *\n\t * @private\n\t * @param {String} label The dropdown button label.\n\t * @param {String} icon An icon for the dropdown button.\n\t * @param {Array.<module:ui/dropdown/utils~ListDropdownItemDefinition>} options The list of options for the dropdown.\n\t * @param {module:utils/locale~Locale} locale\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n    _prepareDropdown(label, icon, options, locale) {\n        const editor = this.editor;\n        const dropdownView = createDropdown(locale);\n        const commands = [];\n        // Prepare dropdown list items for list dropdown.\n        const itemDefinitions = new Collection();\n        for (const option of options) {\n            addListOption(option, editor, commands, itemDefinitions);\n        }\n        addListToDropdown(dropdownView, itemDefinitions);\n        // Decorate dropdown's button.\n        dropdownView.buttonView.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        // Make dropdown button disabled when all options are disabled.\n        dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n            return areEnabled.some(isEnabled => isEnabled);\n        });\n        this.listenTo(dropdownView, 'execute', evt => {\n            editor.execute(evt.source.commandName);\n            editor.editing.view.focus();\n        });\n        return dropdownView;\n    }\n}\n// Adds an option to a list view.\n//\n// @param {module:table/tableui~DropdownOption} option Configuration option.\n// @param {module:core/editor/editor~Editor} editor\n// @param {Array.<module:core/command~Command>} commands List of commands to update.\n// @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} itemDefinitions\n// Collection of dropdown items to update with given option.\nfunction addListOption(option, editor, commands, itemDefinitions) {\n    const model = option.model = new Model(option.model);\n    const {commandName, bindIsOn} = option.model;\n    if (option.type !== 'separator') {\n        const command = editor.commands.get(commandName);\n        commands.push(command);\n        model.set({ commandName });\n        model.bind('isEnabled').to(command);\n        if (bindIsOn) {\n            model.bind('isOn').to(command, 'value');\n        }\n    }\n    model.set({ withText: true });\n    itemDefinitions.add(option);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/table\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport TableEditing from './tableediting';\nimport TableUI from './tableui';\nimport Widget from '@ckeditor/ckeditor5-widget/src/widget';\n\nimport '../theme/table.css';\n\n/**\n * The table plugin.\n *\n * For a detailed overview, check the {@glink features/table Table feature documentation}.\n *\n * This is a \"glue\" plugin which loads the {@link module:table/tableediting~TableEditing table editing feature}\n * and {@link module:table/tableui~TableUI table UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Table extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TableEditing, TableUI, Widget ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Table';\n\t}\n}\n\n/**\n * The configuration of the table features. Used by the table features in the `@ckeditor/ckeditor5-table` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\ttable: ... // Table feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface TableConfig\n */\n\n/**\n * The configuration of the {@link module:table/table~Table} feature.\n *\n * Read more in {@link module:table/table~TableConfig}.\n *\n * @member {module:table/table~TableConfig} module:core/editor/editorconfig~EditorConfig#table\n */\n","\n/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/clickobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:click Click} event observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View view controller}\n * by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class ClickObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = 'click';\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when one of the editables has been clicked.\n *\n * Introduced by {@link module:engine/view/observer/clickobserver~ClickObserver}.\n *\n * Note that this event is not available by default. To make it available\n * {@link module:engine/view/observer/clickobserver~ClickObserver} needs to be added\n * to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:engine/view/observer/clickobserver~ClickObserver\n * @event module:engine/view/document~Document#event:click\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/ui/linkformview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport SwitchButtonView from '@ckeditor/ckeditor5-ui/src/button/switchbuttonview';\nimport LabeledInputView from '@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview';\nimport InputTextView from '@ckeditor/ckeditor5-ui/src/inputtext/inputtextview';\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\nimport '../../theme/linkform.css';\n/**\n * The link form view controller class.\n *\n * See {@link module:link/ui/linkformview~LinkFormView}.\n *\n * @extends module:ui/view~View\n */\nexport default class LinkFormView extends View {\n    /**\n\t * Creates an instance of the {@link module:link/ui/linkformview~LinkFormView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t * @param {module:utils/collection~Collection} [manualDecorators] Reference to manual decorators in\n\t * {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n\t */\n    constructor(locale, manualDecorators = []) {\n        super(locale);\n        const t = locale.t;\n        /**\n\t\t * Tracks information about DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * The URL input view.\n\t\t *\n\t\t * @member {module:ui/labeledinput/labeledinputview~LabeledInputView}\n\t\t */\n        this.urlInputView = this._createUrlInput();\n        /**\n\t\t * The Save button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.saveButtonView = this._createButton(t('Save'), checkIcon, 'ck-button-save');\n        this.saveButtonView.type = 'submit';\n        /**\n\t\t * The Cancel button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.cancelButtonView = this._createButton(t('Cancel'), cancelIcon, 'ck-button-cancel', 'cancel');\n        /**\n\t\t * A collection of {@link module:ui/button/switchbuttonview~SwitchButtonView},\n\t\t * which corresponds to {@link module:link/linkcommand~LinkCommand#manualDecorators manual decorators}\n\t\t * configured in the editor.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @type {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this._manualDecoratorSwitches = this._createManualDecoratorSwitches(manualDecorators);\n        /**\n\t\t * A collection of child views in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.children = this._createFormChildren(manualDecorators);\n        /**\n\t\t * A collection of views that can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this._focusables = new ViewCollection();\n        /**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        const classList = [\n            'ck',\n            'ck-link-form'\n        ];\n        if (manualDecorators.length) {\n            classList.push('ck-link-form_layout-vertical');\n        }\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: classList,\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n\t * Obtains the state of the {@link module:ui/button/switchbuttonview~SwitchButtonView switch buttons} representing\n\t * {@link module:link/linkcommand~LinkCommand#manualDecorators manual link decorators}\n\t * in the {@link module:link/ui/linkformview~LinkFormView}.\n\t *\n\t * @returns {Object.<String,Boolean>} Key-value pairs, where the key is the name of the decorator and the value is\n\t * its state.\n\t */\n    getDecoratorSwitchesState() {\n        return Array.from(this._manualDecoratorSwitches).reduce((accumulator, switchButton) => {\n            accumulator[switchButton.name] = switchButton.isOn;\n            return accumulator;\n        }, {});\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        submitHandler({ view: this });\n        const childViews = [\n            this.urlInputView,\n            ...this._manualDecoratorSwitches,\n            this.saveButtonView,\n            this.cancelButtonView\n        ];\n        childViews.forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Focuses the fist {@link #_focusables} in the form.\n\t */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Creates a labeled input view.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledinput/labeledinputview~LabeledInputView} Labeled input view instance.\n\t */\n    _createUrlInput() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledInputView(this.locale, InputTextView);\n        labeledInput.label = t('Link URL');\n        labeledInput.inputView.placeholder = 'https://example.com';\n        return labeledInput;\n    }\n    /**\n\t * Creates a button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button icon.\n\t * @param {String} className The additional button CSS class name.\n\t * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createButton(label, icon, className, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.extendTemplate({ attributes: { class: className } });\n        if (eventName) {\n            button.delegate('execute').to(this, eventName);\n        }\n        return button;\n    }\n    /**\n\t * Populates {@link module:ui/viewcollection~ViewCollection} of {@link module:ui/button/switchbuttonview~SwitchButtonView}\n\t * made based on {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n\t *\n\t * @private\n\t * @param {module:utils/collection~Collection} manualDecorators A reference to the\n\t * collection of manual decorators stored in the link command.\n\t * @returns {module:ui/viewcollection~ViewCollection} of switch buttons.\n\t */\n    _createManualDecoratorSwitches(manualDecorators) {\n        const switches = this.createCollection();\n        for (const manualDecorator of manualDecorators) {\n            const switchButton = new SwitchButtonView(this.locale);\n            switchButton.set({\n                name: manualDecorator.id,\n                label: manualDecorator.label,\n                withText: true\n            });\n            switchButton.bind('isOn').to(manualDecorator, 'value');\n            switchButton.on('execute', () => {\n                manualDecorator.set('value', !switchButton.isOn);\n            });\n            switches.add(switchButton);\n        }\n        return switches;\n    }\n    /**\n\t * Populates the {@link #children} collection of the form.\n\t *\n\t * If {@link module:link/linkcommand~LinkCommand#manualDecorators manual decorators} are configured in the editor, it creates an\n\t * additional `View` wrapping all {@link #_manualDecoratorSwitches} switch buttons corresponding\n\t * to these decorators.\n\t *\n\t * @private\n\t * @param {module:utils/collection~Collection} manualDecorators A reference to\n\t * the collection of manual decorators stored in the link command.\n\t * @returns {module:ui/viewcollection~ViewCollection} The children of link form view.\n\t */\n    _createFormChildren(manualDecorators) {\n        const children = this.createCollection();\n        children.add(this.urlInputView);\n        if (manualDecorators.length) {\n            const additionalButtonsView = new View();\n            additionalButtonsView.setTemplate({\n                tag: 'ul',\n                children: this._manualDecoratorSwitches.map(switchButton => ({\n                    tag: 'li',\n                    children: [switchButton],\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-list__item'\n                        ]\n                    }\n                })),\n                attributes: {\n                    class: [\n                        'ck',\n                        'ck-reset',\n                        'ck-list'\n                    ]\n                }\n            });\n            children.add(additionalButtonsView);\n        }\n        children.add(this.saveButtonView);\n        children.add(this.cancelButtonView);\n        return children;\n    }\n}    /**\n * Fired when the form view is submitted (when one of the children triggered the submit event),\n * for example with a click on {@link #saveButtonView}.\n *\n * @event submit\n */\n     /**\n * Fired when the form view is canceled, for example with a click on {@link #cancelButtonView}.\n *\n * @event cancel\n */","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184zm4.919 10.562l-1.414 1.414a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.061-1.06l1.414 1.414 1.414-1.415a.75.75 0 0 1 1.061 1.061l-1.414 1.414 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7.3 17.37l-.061.088a1.518 1.518 0 0 1-.934.535l-4.178.663-.806-4.153a1.495 1.495 0 0 1 .187-1.058l.056-.086L8.77 2.639c.958-1.351 2.803-1.076 4.296-.03 1.497 1.047 2.387 2.693 1.433 4.055L7.3 17.37zM9.14 4.728l-5.545 8.346 3.277 2.294 5.544-8.346L9.14 4.728zM6.07 16.512l-3.276-2.295.53 2.73 2.746-.435zM9.994 3.506L13.271 5.8c.316-.452-.16-1.333-1.065-1.966-.905-.634-1.895-.78-2.212-.328zM8 18.5L9.375 17H19v1.5H8z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/ui/linkactionsview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport { ensureSafeUrl } from '../utils';\nimport unlinkIcon from '../../theme/icons/unlink.svg';\nimport pencilIcon from '@ckeditor/ckeditor5-core/theme/icons/pencil.svg';\nimport '../../theme/linkactions.css';\n/**\n * The link actions view class. This view displays the link preview, allows\n * unlinking or editing the link.\n *\n * @extends module:ui/view~View\n */\nexport default class LinkActionsView extends View {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(locale) {\n        super(locale);\n        const t = locale.t;\n        /**\n\t\t * Tracks information about DOM focus in the actions.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * The href preview view.\n\t\t *\n\t\t * @member {module:ui/view~View}\n\t\t */\n        this.previewButtonView = this._createPreviewButton();\n        /**\n\t\t * The unlink button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.unlinkButtonView = this._createButton(t('Unlink'), unlinkIcon, 'unlink');\n        /**\n\t\t * The edit link button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.editButtonView = this._createButton(t('Edit link'), pencilIcon, 'edit');\n        /**\n\t\t * The value of the \"href\" attribute of the link to use in the {@link #previewButtonView}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String}\n\t\t */\n        this.set('href');\n        /**\n\t\t * A collection of views that can be focused in the view.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this._focusables = new ViewCollection();\n        /**\n\t\t * Helps cycling over {@link #_focusables} in the view.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-link-actions'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: [\n                this.previewButtonView,\n                this.editButtonView,\n                this.unlinkButtonView\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        const childViews = [\n            this.previewButtonView,\n            this.editButtonView,\n            this.unlinkButtonView\n        ];\n        childViews.forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Focuses the fist {@link #_focusables} in the actions.\n\t */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Creates a button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button icon.\n\t * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createButton(label, icon, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.delegate('execute').to(this, eventName);\n        return button;\n    }\n    /**\n\t * Creates a link href preview button.\n\t *\n\t * @private\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createPreviewButton() {\n        const button = new ButtonView(this.locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        button.set({\n            withText: true,\n            tooltip: t('Open link in new tab')\n        });\n        button.extendTemplate({\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-link-actions__preview'\n                ],\n                href: bind.to('href', href => href && ensureSafeUrl(href)),\n                target: '_blank'\n            }\n        });\n        button.bind('label').to(this, 'href', href => {\n            return href || t('This link has no URL');\n        });\n        button.bind('isEnabled').to(this, 'href', href => !!href);\n        button.template.tag = 'a';\n        button.template.eventListeners = {};\n        return button;\n    }\n}    /**\n * Fired when the {@link #editButtonView} is clicked.\n *\n * @event edit\n */\n     /**\n * Fired when the {@link #unlinkButtonView} is clicked.\n *\n * @event unlink\n */","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/linkui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ClickObserver from '@ckeditor/ckeditor5-engine/src/view/observer/clickobserver';\nimport { isLinkElement } from './utils';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LinkFormView from './ui/linkformview';\nimport LinkActionsView from './ui/linkactionsview';\nimport linkIcon from '../theme/icons/link.svg';\nconst linkKeystroke = 'Ctrl+K';\n/**\n * The link UI plugin. It introduces the `'link'` and `'unlink'` buttons and support for the <kbd>Ctrl+K</kbd> keystroke.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'LinkUI';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        editor.editing.view.addObserver(ClickObserver);\n        /**\n\t\t * The actions view displayed inside of the balloon.\n\t\t *\n\t\t * @member {module:link/ui/linkactionsview~LinkActionsView}\n\t\t */\n        this.actionsView = this._createActionsView();\n        /**\n\t\t * The form view displayed inside the balloon.\n\t\t *\n\t\t * @member {module:link/ui/linkformview~LinkFormView}\n\t\t */\n        this.formView = this._createFormView();\n        /**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        // Create toolbar buttons.\n        this._createToolbarLinkButton();\n        // Attach lifecycle actions to the the balloon.\n        this._enableUserBalloonInteractions();\n    }\n    /**\n\t * @inheritDoc\n\t */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n        this.formView.destroy();\n    }\n    /**\n\t * Creates the {@link module:link/ui/linkactionsview~LinkActionsView} instance.\n\t *\n\t * @private\n\t * @returns {module:link/ui/linkactionsview~LinkActionsView} The link actions view instance.\n\t */\n    _createActionsView() {\n        const editor = this.editor;\n        const actionsView = new LinkActionsView(editor.locale);\n        const linkCommand = editor.commands.get('link');\n        const unlinkCommand = editor.commands.get('unlink');\n        actionsView.bind('href').to(linkCommand, 'value');\n        actionsView.editButtonView.bind('isEnabled').to(linkCommand);\n        actionsView.unlinkButtonView.bind('isEnabled').to(unlinkCommand);\n        // Execute unlink command after clicking on the \"Edit\" button.\n        this.listenTo(actionsView, 'edit', () => {\n            this._addFormView();\n        });\n        // Execute unlink command after clicking on the \"Unlink\" button.\n        this.listenTo(actionsView, 'unlink', () => {\n            editor.execute('unlink');\n            this._hideUI();\n        });\n        // Close the panel on esc key press when the **actions have focus**.\n        actionsView.keystrokes.set('Esc', (data, cancel) => {\n            this._hideUI();\n            cancel();\n        });\n        // Open the form view on Ctrl+K when the **actions have focus**..\n        actionsView.keystrokes.set(linkKeystroke, (data, cancel) => {\n            this._addFormView();\n            cancel();\n        });\n        return actionsView;\n    }\n    /**\n\t * Creates the {@link module:link/ui/linkformview~LinkFormView} instance.\n\t *\n\t * @private\n\t * @returns {module:link/ui/linkformview~LinkFormView} The link form view instance.\n\t */\n    _createFormView() {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        const formView = new LinkFormView(editor.locale, linkCommand.manualDecorators);\n        formView.urlInputView.bind('value').to(linkCommand, 'value');\n        // Form elements should be read-only when corresponding commands are disabled.\n        formView.urlInputView.bind('isReadOnly').to(linkCommand, 'isEnabled', value => !value);\n        formView.saveButtonView.bind('isEnabled').to(linkCommand);\n        // Execute link command after clicking the \"Save\" button.\n        this.listenTo(formView, 'submit', () => {\n            editor.execute('link', formView.urlInputView.inputView.element.value, formView.getDecoratorSwitchesState());\n            this._closeFormView();\n        });\n        // Hide the panel after clicking the \"Cancel\" button.\n        this.listenTo(formView, 'cancel', () => {\n            this._closeFormView();\n        });\n        // Close the panel on esc key press when the **form has focus**.\n        formView.keystrokes.set('Esc', (data, cancel) => {\n            this._closeFormView();\n            cancel();\n        });\n        return formView;\n    }\n    /**\n\t * Creates a toolbar Link button. Clicking this button will show\n\t * a {@link #_balloon} attached to the selection.\n\t *\n\t * @private\n\t */\n    _createToolbarLinkButton() {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        const t = editor.t;\n        // Handle the `Ctrl+K` keystroke and show the panel.\n        editor.keystrokes.set(linkKeystroke, (keyEvtData, cancel) => {\n            // Prevent focusing the search bar in FF and opening new tab in Edge. #153, #154.\n            cancel();\n            if (linkCommand.isEnabled) {\n                this._showUI(true);\n            }\n        });\n        editor.ui.componentFactory.add('link', locale => {\n            const button = new ButtonView(locale);\n            button.isEnabled = true;\n            button.label = t('Link');\n            button.icon = linkIcon;\n            button.keystroke = linkKeystroke;\n            button.tooltip = true;\n            button.isToggleable = true;\n            // Bind button to the command.\n            button.bind('isEnabled').to(linkCommand, 'isEnabled');\n            button.bind('isOn').to(linkCommand, 'value', value => !!value);\n            // Show the panel on button click.\n            this.listenTo(button, 'execute', () => this._showUI(true));\n            return button;\n        });\n    }\n    /**\n\t * Attaches actions that control whether the balloon panel containing the\n\t * {@link #formView} is visible or not.\n\t *\n\t * @private\n\t */\n    _enableUserBalloonInteractions() {\n        const viewDocument = this.editor.editing.view.document;\n        // Handle click on view document and show panel when selection is placed inside the link element.\n        // Keep panel open until selection will be inside the same link element.\n        this.listenTo(viewDocument, 'click', () => {\n            const parentLink = this._getSelectedLinkElement();\n            if (parentLink) {\n                // Then show panel but keep focus inside editor editable.\n                this._showUI();\n            }\n        });\n        // Focus the form if the balloon is visible and the Tab key has been pressed.\n        this.editor.keystrokes.set('Tab', (data, cancel) => {\n            if (this._areActionsVisible && !this.actionsView.focusTracker.isFocused) {\n                this.actionsView.focus();\n                cancel();\n            }\n        }, {\n            // Use the high priority because the link UI navigation is more important\n            // than other feature's actions, e.g. list indentation.\n            // https://github.com/ckeditor/ckeditor5-link/issues/146\n            priority: 'high'\n        });\n        // Close the panel on the Esc key press when the editable has focus and the balloon is visible.\n        this.editor.keystrokes.set('Esc', (data, cancel) => {\n            if (this._isUIVisible) {\n                this._hideUI();\n                cancel();\n            }\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: this.formView,\n            activator: () => this._isUIInPanel,\n            contextElements: [this._balloon.view.element],\n            callback: () => this._hideUI()\n        });\n    }\n    /**\n\t * Adds the {@link #actionsView} to the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n    _addActionsView() {\n        if (this._areActionsInPanel) {\n            return;\n        }\n        this._balloon.add({\n            view: this.actionsView,\n            position: this._getBalloonPositionData()\n        });\n    }\n    /**\n\t * Adds the {@link #formView} to the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n    _addFormView() {\n        if (this._isFormInPanel) {\n            return;\n        }\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        this._balloon.add({\n            view: this.formView,\n            position: this._getBalloonPositionData()\n        });\n        // Select input when form view is currently visible.\n        if (this._balloon.visibleView === this.formView) {\n            this.formView.urlInputView.select();\n        }\n        // Make sure that each time the panel shows up, the URL field remains in sync with the value of\n        // the command. If the user typed in the input, then canceled the balloon (`urlInputView#value` stays\n        // unaltered) and re-opened it without changing the value of the link command (e.g. because they\n        // clicked the same link), they would see the old value instead of the actual value of the command.\n        // https://github.com/ckeditor/ckeditor5-link/issues/78\n        // https://github.com/ckeditor/ckeditor5-link/issues/123\n        this.formView.urlInputView.inputView.element.value = linkCommand.value || '';\n    }\n    /**\n\t * Closes the form view. Decides whether the balloon should be hidden completely or if the action view should be shown. This is\n\t * decided upon the link command value (which has a value if the document selection is in the link).\n\t *\n\t * Additionally, if any {@link module:link/link~LinkConfig#decorators} are defined in the editor configuration, the state of\n\t * switch buttons responsible for manual decorator handling is restored.\n\t *\n\t * @private\n\t */\n    _closeFormView() {\n        const linkCommand = this.editor.commands.get('link');\n        // Restore manual decorator states to represent the current model state. This case is important to reset the switch buttons\n        // when the user cancels the editing form.\n        linkCommand.restoreManualDecoratorStates();\n        if (linkCommand.value !== undefined) {\n            this._removeFormView();\n        } else {\n            this._hideUI();\n        }\n    }\n    /**\n\t * Removes the {@link #formView} from the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n    _removeFormView() {\n        if (this._isFormInPanel) {\n            // Blur the input element before removing it from DOM to prevent issues in some browsers.\n            // See https://github.com/ckeditor/ckeditor5/issues/1501.\n            this.formView.saveButtonView.focus();\n            this._balloon.remove(this.formView);\n            // Because the form has an input which has focus, the focus must be brought back\n            // to the editor. Otherwise, it would be lost.\n            this.editor.editing.view.focus();\n        }\n    }\n    /**\n\t * Shows the correct UI type for the current state of the command. It is either\n\t * {@link #formView} or {@link #actionsView}.\n\t *\n\t * @param {Boolean} forceVisible\n\t * @private\n\t */\n    _showUI(forceVisible = false) {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        if (!linkCommand.isEnabled) {\n            return;\n        }\n        // When there's no link under the selection, go straight to the editing UI.\n        if (!this._getSelectedLinkElement()) {\n            this._addActionsView();\n            // Be sure panel with link is visible.\n            if (forceVisible) {\n                this._balloon.showStack('main');\n            }\n            this._addFormView();\n        }    // If there's a link under the selection...\n        else {\n            // Go to the editing UI if actions are already visible.\n            if (this._areActionsVisible) {\n                this._addFormView();\n            }    // Otherwise display just the actions UI.\n            else {\n                this._addActionsView();\n            }\n            // Be sure panel with link is visible.\n            if (forceVisible) {\n                this._balloon.showStack('main');\n            }\n        }\n        // Begin responding to ui#update once the UI is added.\n        this._startUpdatingUI();\n    }\n    /**\n\t * Removes the {@link #formView} from the {@link #_balloon}.\n\t *\n\t * See {@link #_addFormView}, {@link #_addActionsView}.\n\t *\n\t * @protected\n\t */\n    _hideUI() {\n        if (!this._isUIInPanel) {\n            return;\n        }\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        this.stopListening(this._balloon, 'change:visibleView');\n        // Make sure the focus always gets back to the editable _before_ removing the focused form view.\n        // Doing otherwise causes issues in some browsers. See https://github.com/ckeditor/ckeditor5-link/issues/193.\n        editor.editing.view.focus();\n        // Remove form first because it's on top of the stack.\n        this._removeFormView();\n        // Then remove the actions view because it's beneath the form.\n        this._balloon.remove(this.actionsView);\n    }\n    /**\n\t * Makes the UI react to the {@link module:core/editor/editorui~EditorUI#event:update} event to\n\t * reposition itself when the editor UI should be refreshed.\n\t *\n\t * See: {@link #_hideUI} to learn when the UI stops reacting to the `update` event.\n\t *\n\t * @protected\n\t */\n    _startUpdatingUI() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        let prevSelectedLink = this._getSelectedLinkElement();\n        let prevSelectionParent = getSelectionParent();\n        const update = () => {\n            const selectedLink = this._getSelectedLinkElement();\n            const selectionParent = getSelectionParent();\n            // Hide the panel if:\n            //\n            // * the selection went out of the EXISTING link element. E.g. user moved the caret out\n            //   of the link,\n            // * the selection went to a different parent when creating a NEW link. E.g. someone\n            //   else modified the document.\n            // * the selection has expanded (e.g. displaying link actions then pressing SHIFT+Right arrow).\n            //\n            // Note: #_getSelectedLinkElement will return a link for a non-collapsed selection only\n            // when fully selected.\n            if (prevSelectedLink && !selectedLink || !prevSelectedLink && selectionParent !== prevSelectionParent) {\n                this._hideUI();\n            }    // Update the position of the panel when:\n                 //  * link panel is in the visible stack\n                 //  * the selection remains in the original link element,\n                 //  * there was no link element in the first place, i.e. creating a new link\n            else if (this._isUIVisible) {\n                // If still in a link element, simply update the position of the balloon.\n                // If there was no link (e.g. inserting one), the balloon must be moved\n                // to the new position in the editing view (a new native DOM range).\n                this._balloon.updatePosition(this._getBalloonPositionData());\n            }\n            prevSelectedLink = selectedLink;\n            prevSelectionParent = selectionParent;\n        };\n        function getSelectionParent() {\n            return viewDocument.selection.focus.getAncestors().reverse().find(node => node.is('element'));\n        }\n        this.listenTo(editor.ui, 'update', update);\n        this.listenTo(this._balloon, 'change:visibleView', update);\n    }\n    /**\n\t * Returns `true` when {@link #formView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _isFormInPanel() {\n        return this._balloon.hasView(this.formView);\n    }\n    /**\n\t * Returns `true` when {@link #actionsView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _areActionsInPanel() {\n        return this._balloon.hasView(this.actionsView);\n    }\n    /**\n\t * Returns `true` when {@link #actionsView} is in the {@link #_balloon} and it is\n\t * currently visible.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _areActionsVisible() {\n        return this._balloon.visibleView === this.actionsView;\n    }\n    /**\n\t * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _isUIInPanel() {\n        return this._isFormInPanel || this._areActionsInPanel;\n    }\n    /**\n\t * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon} and it is\n\t * currently visible.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _isUIVisible() {\n        const visibleView = this._balloon.visibleView;\n        return visibleView == this.formView || this._areActionsVisible;\n    }\n    /**\n\t * Returns positioning options for the {@link #_balloon}. They control the way the balloon is attached\n\t * to the target element or selection.\n\t *\n\t * If the selection is collapsed and inside a link element, the panel will be attached to the\n\t * entire link element. Otherwise, it will be attached to the selection.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n    _getBalloonPositionData() {\n        const view = this.editor.editing.view;\n        const viewDocument = view.document;\n        const targetLink = this._getSelectedLinkElement();\n        const target = targetLink ? // When selection is inside link element, then attach panel to this element.\n        view.domConverter.mapViewToDom(targetLink) : // Otherwise attach panel to the selection.\n        view.domConverter.viewRangeToDom(viewDocument.selection.getFirstRange());\n        return { target };\n    }\n    /**\n\t * Returns the link {@link module:engine/view/attributeelement~AttributeElement} under\n\t * the {@link module:engine/view/document~Document editing view's} selection or `null`\n\t * if there is none.\n\t *\n\t * **Note**: For a non–collapsed selection, the link element is only returned when **fully**\n\t * selected and the **only** element within the selection boundaries.\n\t *\n\t * @private\n\t * @returns {module:engine/view/attributeelement~AttributeElement|null}\n\t */\n    _getSelectedLinkElement() {\n        const view = this.editor.editing.view;\n        const selection = view.document.selection;\n        if (selection.isCollapsed) {\n            return findLinkElementAncestor(selection.getFirstPosition());\n        } else {\n            // The range for fully selected link is usually anchored in adjacent text nodes.\n            // Trim it to get closer to the actual link element.\n            const range = selection.getFirstRange().getTrimmed();\n            const startLink = findLinkElementAncestor(range.start);\n            const endLink = findLinkElementAncestor(range.end);\n            if (!startLink || startLink != endLink) {\n                return null;\n            }\n            // Check if the link element is fully selected.\n            if (view.createRangeIn(startLink).getTrimmed().isEqual(range)) {\n                return startLink;\n            } else {\n                return null;\n            }\n        }\n    }\n}\n// Returns a link element if there's one among the ancestors of the provided `Position`.\n//\n// @private\n// @param {module:engine/view/position~Position} View position to analyze.\n// @returns {module:engine/view/attributeelement~AttributeElement|null} Link element at the position or null.\nfunction findLinkElementAncestor(position) {\n    return position.getAncestors().find(ancestor => isLinkElement(ancestor));\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/link\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport LinkEditing from './linkediting';\nimport LinkUI from './linkui';\n\n/**\n * The link plugin.\n *\n * This is a \"glue\" plugin that loads the {@link module:link/linkediting~LinkEditing link editing feature}\n * and {@link module:link/linkui~LinkUI link UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Link extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ LinkEditing, LinkUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Link';\n\t}\n}\n\n/**\n * The configuration of the {@link module:link/link~Link} feature.\n *\n * Read more in {@link module:link/link~LinkConfig}.\n *\n * @member {module:link/link~LinkConfig} module:core/editor/editorconfig~EditorConfig#link\n */\n\n/**\n * The configuration of the {@link module:link/link~Link link feature}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\tlink:  ... // Link feature configuration.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n * @interface LinkConfig\n */\n\n/**\n * When set to `true`, the `target=\"blank\"` and `rel=\"noopener noreferrer\"` attributes are automatically added to all external links\n * in the editor. \"External links\" are all links in the editor content starting with `http`, `https`, or `//`.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tlink: {\n *\t\t\t\t\taddTargetToExternalLinks: true\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Internally, this option activates a predefined {@link module:link/link~LinkConfig#decorators automatic link decorator}\n * that extends all external links with the `target` and `rel` attributes.\n *\n * **Note**: To control the `target` and `rel` attributes of specific links in the edited content, a dedicated\n * {@link module:link/link~LinkDecoratorManualDefinition manual} decorator must be defined in the\n * {@link module:link/link~LinkConfig#decorators `config.link.decorators`} array. In such scenario,\n * the `config.link.addTargetToExternalLinks` option should remain `undefined` or `false` to not interfere with the manual decorator.\n *\n * It is possible to add other {@link module:link/link~LinkDecoratorAutomaticDefinition automatic}\n * or {@link module:link/link~LinkDecoratorManualDefinition manual} link decorators when this option is active.\n *\n * More information about decorators can be found in the {@link module:link/link~LinkConfig#decorators decorators configuration}\n * reference.\n *\n * @default false\n * @member {Boolean} module:link/link~LinkConfig#addTargetToExternalLinks\n */\n\n/**\n * Decorators provide an easy way to configure and manage additional link attributes in the editor content. There are\n * two types of link decorators:\n *\n * * {@link module:link/link~LinkDecoratorAutomaticDefinition Automatic} &ndash; They match links against pre–defined rules and\n * manage their attributes based on the results.\n * * {@link module:link/link~LinkDecoratorManualDefinition Manual} &ndash; They allow users to control link attributes individually,\n *  using the editor UI.\n *\n * Link decorators are defined as objects with key-value pairs, where the key is the name provided for a given decorator and the\n * value is the decorator definition.\n *\n * The name of the decorator also corresponds to the {@glink framework/guides/architecture/editing-engine#text-attributes text attribute}\n * in the model. For instance, the `isExternal` decorator below is represented as a `linkIsExternal` attribute in the model.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tlink: {\n *\t\t\t\t\tdecorators: {\n *\t\t\t\t\t\tisExternal: {\n *\t\t\t\t\t\t\tmode: 'automatic',\n *\t\t\t\t\t\t\tcallback: url => url.startsWith( 'http://' ),\n *\t\t\t\t\t\t\tattributes: {\n *\t\t\t\t\t\t\t\ttarget: '_blank',\n *\t\t\t\t\t\t\t\trel: 'noopener noreferrer'\n *\t\t\t\t\t\t\t}\n *\t\t\t\t\t\t},\n *\t\t\t\t\t\tisDownloadable: {\n *\t\t\t\t\t\t\tmode: 'manual',\n *\t\t\t\t\t\t\tlabel: 'Downloadable',\n *\t\t\t\t\t\t\tattributes: {\n *\t\t\t\t\t\t\t\tdownload: 'file.png',\n *\t\t\t\t\t\t\t}\n *\t\t\t\t\t\t},\n *\t\t\t\t\t\t// ...\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * To learn more about the configuration syntax, check out the {@link module:link/link~LinkDecoratorAutomaticDefinition automatic}\n * and {@link module:link/link~LinkDecoratorManualDefinition manual} decorator option reference.\n *\n * **Warning:** Currently, link decorators work independently of one another and no conflict resolution mechanism exists.\n * For example, configuring the `target` attribute using both an automatic and a manual decorator at the same time could end up with\n * quirky results. The same applies if multiple manual or automatic decorators were defined for the same attribute.\n *\n * **Note**: Since the `target` attribute management for external links is a common use case, there is a predefined automatic decorator\n * dedicated for that purpose which can be enabled by turning a single option on. Check out the\n * {@link module:link/link~LinkConfig#addTargetToExternalLinks `config.link.addTargetToExternalLinks`}\n * configuration description to learn more.\n *\n * See also the {@glink features/link#custom-link-attributes-decorators link feature guide} for more information.\n *\n * @member {Object.<String, module:link/link~LinkDecoratorDefinition>} module:link/link~LinkConfig#decorators\n */\n\n/**\n * Represents a link decorator definition ({@link module:link/link~LinkDecoratorManualDefinition `'manual'`}\n * or {@link module:link/link~LinkDecoratorAutomaticDefinition `'automatic'`}).\n *\n * @interface LinkDecoratorDefinition\n */\n\n/**\n * Link decorator type.\n *\n * Check out the {@glink features/link#custom-link-attributes-decorators link feature guide} for more information.\n *\n * @member {'manual'|'automatic'} module:link/link~LinkDecoratorDefinition#mode\n */\n\n/**\n * Describes an automatic {@link module:link/link~LinkConfig#decorators link decorator}. This decorator type matches\n * all links in the editor content against a function that decides whether the link should receive a pre–defined set of attributes.\n *\n * It takes an object with key-value pairs of attributes and a callback function that must return a Boolean value based on the link's\n * `href` (URL). When the callback returns `true`, attributes are applied to the link.\n *\n * For example, to add the `target=\"_blank\"` attribute to all links in the editor starting with `http://`, the\n * configuration could look like this:\n *\n *\t\t{\n *\t\t\tmode: 'automatic',\n *\t\t\tcallback: url => url.startsWith( 'http://' ),\n *\t\t\tattributes: {\n *\t\t\t\ttarget: '_blank'\n *\t\t\t}\n *\t\t}\n *\n * **Note**: Since the `target` attribute management for external links is a common use case, there is a predefined automatic decorator\n * dedicated for that purpose that can be enabled by turning a single option on. Check out the\n * {@link module:link/link~LinkConfig#addTargetToExternalLinks `config.link.addTargetToExternalLinks`}\n * configuration description to learn more.\n *\n * @typedef {Object} module:link/link~LinkDecoratorAutomaticDefinition\n * @property {'automatic'} mode Link decorator type. It is `'automatic'` for all automatic decorators.\n * @property {Function} callback Takes a `url` as a parameter and returns `true` if the `attributes` should be applied to the link.\n * @property {Object} attributes Key-value pairs used as link attributes added to the output during the\n * {@glink framework/guides/architecture/editing-engine#conversion downcasting}.\n * Attributes should follow the {@link module:engine/view/elementdefinition~ElementDefinition} syntax.\n */\n\n/**\n * Describes a manual {@link module:link/link~LinkConfig#decorators link decorator}. This decorator type is represented in\n * the link feature's {@link module:link/linkui user interface} as a switch that the user can use to control the presence\n * of a predefined set of attributes.\n *\n * For instance, to allow the users to manually control the presence of the `target=\"_blank\"` and\n * `rel=\"noopener noreferrer\"` attributes on specific links, the decorator could look as follows:\n *\n *\t\t{\n *\t\t\tmode: 'manual',\n *\t\t\tlabel: 'Open in a new tab',\n *\t\t\tattributes: {\n *\t\t\t\ttarget: '_blank',\n *\t\t\t\trel: 'noopener noreferrer'\n *\t\t\t}\n *\t\t}\n *\n * @typedef {Object} module:link/link~LinkDecoratorManualDefinition\n * @property {'manual'} mode Link decorator type. It is `'manual'` for all manual decorators.\n * @property {String} label The label of the UI button that the user can use to control the presence of link attributes.\n * @property {Object} attributes Key-value pairs used as link attributes added to the output during the\n * {@glink framework/guides/architecture/editing-engine#conversion downcasting}.\n * Attributes should follow the {@link module:engine/view/elementdefinition~ElementDefinition} syntax.\n */\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nexport default arrayMap;\n","import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n","import baseToString from './_baseToString.js';\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nexport default toString;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/converters\n */\n\n/**\n * Returns a function that converts the model \"url\" attribute to the view representation.\n *\n * Depending on the configuration, the view representation can be \"semantic\" (for the data pipeline):\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<oembed url=\"foo\"></oembed>\n *\t\t</figure>\n *\n * or \"non-semantic\" (for the editing view pipeline):\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<div data-oembed-url=\"foo\">[ non-semantic media preview for \"foo\" ]</div>\n *\t\t</figure>\n *\n * **Note:** Changing the model \"url\" attribute replaces the entire content of the\n * `<figure>` in the view.\n *\n * @param {module:media-embed/mediaregistry~MediaRegistry} registry The registry providing\n * the media and their content.\n * @param {Object} options\n * @param {String} [options.renderMediaPreview] When `true`, the converter will create the view in the non-semantic form.\n * @param {String} [options.renderForEditingView] When `true`, the converter will create a view specific for the\n * editing pipeline (e.g. including CSS classes, content placeholders).\n * @returns {Function}\n */\nexport function modelToViewUrlAttributeConverter( registry, options ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'attribute:url:media', converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst url = data.attributeNewValue;\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst figure = conversionApi.mapper.toViewElement( data.item );\n\n\t\t// TODO: removing it and creating it from scratch is a hack. We can do better than that.\n\t\tviewWriter.remove( viewWriter.createRangeIn( figure ) );\n\n\t\tconst mediaViewElement = registry.getMediaViewElement( viewWriter, url, options );\n\n\t\tviewWriter.insert( viewWriter.createPositionAt( figure, 0 ), mediaViewElement );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/utils\n */\n\nimport { isWidget, toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\n\n/**\n * Converts a given {@link module:engine/view/element~Element} to a media embed widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the media widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label.\n * @returns {module:engine/view/element~Element}\n */\nexport function toMediaWidget( viewElement, writer, label ) {\n\twriter.setCustomProperty( 'media', true, viewElement );\n\n\treturn toWidget( viewElement, writer, { label } );\n}\n\n/**\n * Returns a media widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\nexport function getSelectedMediaViewWidget( selection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\tif ( viewElement && isMediaWidget( viewElement ) ) {\n\t\treturn viewElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Checks if a given view element is a media widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\nexport function isMediaWidget( viewElement ) {\n\treturn !!viewElement.getCustomProperty( 'media' ) && isWidget( viewElement );\n}\n\n/**\n * Creates a view element representing the media. Either \"semantic\" one for the data pipeline:\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<oembed url=\"foo\"></oembed>\n *\t\t</figure>\n *\n * or \"non-semantic\" (for the editing view pipeline):\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<div data-oembed-url=\"foo\">[ non-semantic media preview for \"foo\" ]</div>\n *\t\t</figure>\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:media-embed/mediaregistry~MediaRegistry} registry\n * @param {String} url\n * @param {Object} options\n * @param {String} [options.useSemanticWrapper]\n * @param {String} [options.renderForEditingView]\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\nexport function createMediaFigureElement( writer, registry, url, options ) {\n\tconst figure = writer.createContainerElement( 'figure', { class: 'media' } );\n\n\t// TODO: This is a hack. Without it, the figure in the data pipeline will contain &nbsp; because\n\t// its only child is the UIElement (wrapper).\n\t//\n\t// Note: The hack is a copy&paste from widget utils; it makes the figure act like it's a widget.\n\tfigure.getFillerOffset = getFillerOffset;\n\n\twriter.insert( writer.createPositionAt( figure, 0 ), registry.getMediaViewElement( writer, url, options ) );\n\n\treturn figure;\n}\n\n/**\n * Returns a selected media element in the model, if any.\n *\n * @param {module:engine/model/selection~Selection} selection\n * @returns {module:engine/model/element~Element|null}\n */\nexport function getSelectedMediaModelWidget( selection ) {\n\tconst selectedElement = selection.getSelectedElement();\n\n\tif ( selectedElement && selectedElement.is( 'media' ) ) {\n\t\treturn selectedElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Creates a media element and inserts it into the model.\n *\n * **Note**: This method will use {@link module:engine/model/model~Model#insertContent `model.insertContent()`} logic of inserting content\n * if no `insertPosition` is passed.\n *\n * @param {module:engine/model/model~Model} model\n * @param {String} url An URL of an embeddable media.\n * @param {module:engine/model/position~Position} [insertPosition] Position to insert media. If not specified,\n * the default behavior of {@link module:engine/model/model~Model#insertContent `model.insertContent()`} will\n * be applied.\n */\nexport function insertMedia( model, url, insertPosition ) {\n\tmodel.change( writer => {\n\t\tconst mediaElement = writer.createElement( 'media', { url } );\n\n\t\tmodel.insertContent( mediaElement, insertPosition );\n\n\t\twriter.setSelection( mediaElement, 'on' );\n\t} );\n}\n\nfunction getFillerOffset() {\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/mediaembedcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findOptimalInsertionPosition } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { getSelectedMediaModelWidget, insertMedia } from './utils';\n\n/**\n * The insert media command.\n *\n * The command is registered by the {@link module:media-embed/mediaembedediting~MediaEmbedEditing} as `'mediaEmbed'`.\n *\n * To insert media at the current selection, execute the command and specify the URL:\n *\n *\t\teditor.execute( 'mediaEmbed', 'http://url.to.the/media' );\n *\n * @extends module:core/command~Command\n */\nexport default class MediaEmbedCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst schema = model.schema;\n\t\tconst position = selection.getFirstPosition();\n\t\tconst selectedMedia = getSelectedMediaModelWidget( selection );\n\n\t\tlet parent = position.parent;\n\n\t\tif ( parent != parent.root ) {\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\tthis.value = selectedMedia ? selectedMedia.getAttribute( 'url' ) : null;\n\t\tthis.isEnabled = schema.checkChild( parent, 'media' );\n\t}\n\n\t/**\n\t * Executes the command, which either:\n\t *\n\t * * updates the URL of the selected media,\n\t * * inserts the new media into the editor and puts the selection around it.\n\t *\n\t * @fires execute\n\t * @param {String} url The URL of the media.\n\t */\n\texecute( url ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst selectedMedia = getSelectedMediaModelWidget( selection );\n\n\t\tif ( selectedMedia ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setAttribute( 'url', url, selectedMedia );\n\t\t\t} );\n\t\t} else {\n\t\t\tconst insertPosition = findOptimalInsertionPosition( selection, model );\n\n\t\t\tinsertMedia( model, url, insertPosition );\n\t\t}\n\t}\n}\n\n","export default \"<svg viewBox=\\\"0 0 64 42\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M47.426 17V3.713L63.102 0v19.389h-.001l.001.272c0 1.595-2.032 3.43-4.538 4.098-2.506.668-4.538-.083-4.538-1.678 0-1.594 2.032-3.43 4.538-4.098.914-.244 2.032-.565 2.888-.603V4.516L49.076 7.447v9.556A1.014 1.014 0 0 0 49 17h-1.574zM29.5 17h-8.343a7.073 7.073 0 1 0-4.657 4.06v3.781H3.3a2.803 2.803 0 0 1-2.8-2.804V8.63a2.803 2.803 0 0 1 2.8-2.805h4.082L8.58 2.768A1.994 1.994 0 0 1 10.435 1.5h8.985c.773 0 1.477.448 1.805 1.149l1.488 3.177H26.7c1.546 0 2.8 1.256 2.8 2.805V17zm-11.637 0H17.5a1 1 0 0 0-1 1v.05A4.244 4.244 0 1 1 17.863 17zm29.684 2c.97 0 .953-.048.953.889v20.743c0 .953.016.905-.953.905H19.453c-.97 0-.953.048-.953-.905V19.89c0-.937-.016-.889.97-.889h28.077zm-4.701 19.338V22.183H24.154v16.155h18.692zM20.6 21.375v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616V37.53H20.6zm24.233-16.155v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615V37.53h-1.615zM29.485 25.283a.4.4 0 0 1 .593-.35l9.05 4.977a.4.4 0 0 1 0 .701l-9.05 4.978a.4.4 0 0 1-.593-.35v-9.956z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/mediaregistry\n */\n\n/* globals console */\n\nimport mediaPlaceholderIcon from '../theme/icons/media-placeholder.svg';\nimport TooltipView from '@ckeditor/ckeditor5-ui/src/tooltip/tooltipview';\nimport IconView from '@ckeditor/ckeditor5-ui/src/icon/iconview';\nimport Template from '@ckeditor/ckeditor5-ui/src/template';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nconst mediaPlaceholderIconViewBox = '0 0 64 42';\n\n/**\n * A bridge between the raw media content provider definitions and the editor view content.\n *\n * It helps translating media URLs to corresponding {@link module:engine/view/element~Element view elements}.\n *\n * Mostly used by the {@link module:media-embed/mediaembedediting~MediaEmbedEditing} plugin.\n */\nexport default class MediaRegistry {\n\t/**\n\t * Creates an instance of the {@link module:media-embed/mediaregistry~MediaRegistry} class.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t * @param {module:media-embed/mediaembed~MediaEmbedConfig} config The configuration of the media embed feature.\n\t */\n\tconstructor( locale, config ) {\n\t\tconst providers = config.providers;\n\t\tconst extraProviders = config.extraProviders || [];\n\t\tconst removedProviders = new Set( config.removeProviders );\n\t\tconst providerDefinitions = providers\n\t\t\t.concat( extraProviders )\n\t\t\t.filter( provider => {\n\t\t\t\tconst name = provider.name;\n\n\t\t\t\tif ( !name ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * One of the providers (or extra providers) specified in the media embed configuration\n\t\t\t\t\t * has no name and will not be used by the editor. In order to get this media\n\t\t\t\t\t * provider working, double check your editor configuration.\n\t\t\t\t\t *\n\t\t\t\t\t * @warning media-embed-no-provider-name\n\t\t\t\t\t */\n\t\t\t\t\tconsole.warn( attachLinkToDocumentation(\n\t\t\t\t\t\t'media-embed-no-provider-name: The configured media provider has no name and cannot be used.'\n\t\t\t\t\t), { provider } );\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn !removedProviders.has( name );\n\t\t\t} );\n\n\t\t/**\n\t\t * The locale {@link module:utils/locale~Locale} instance.\n\t\t *\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * The media provider definitions available for the registry. Usually corresponding with the\n\t\t * {@link module:media-embed/mediaembed~MediaEmbedConfig media configuration}.\n\t\t *\n\t\t * @member {Array}\n\t\t */\n\t\tthis.providerDefinitions = providerDefinitions;\n\t}\n\n\t/**\n\t * Checks whether the passed URL is representing a certain media type allowed in the editor.\n\t *\n\t * @param {String} url The URL to be checked\n\t * @returns {Boolean}\n\t */\n\thasMedia( url ) {\n\t\treturn !!this._getMedia( url );\n\t}\n\n\t/**\n\t * For the given media URL string and options, it returns the {@link module:engine/view/element~Element view element}\n\t * representing that media.\n\t *\n\t * **Note:** If no URL is specified, an empty view element is returned.\n\t *\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer The view writer used to produce a view element.\n\t * @param {String} url The URL to be translated into a view element.\n\t * @param {Object} options\n\t * @param {String} [options.renderMediaPreview]\n\t * @param {String} [options.renderForEditingView]\n\t * @returns {module:engine/view/element~Element}\n\t */\n\tgetMediaViewElement( writer, url, options ) {\n\t\treturn this._getMedia( url ).getViewElement( writer, options );\n\t}\n\n\t/**\n\t * Returns a `Media` instance for the given URL.\n\t *\n\t * @protected\n\t * @param {String} url The URL of the media.\n\t * @returns {module:media-embed/mediaregistry~Media|null} The `Media` instance or `null` when there is none.\n\t */\n\t_getMedia( url ) {\n\t\tif ( !url ) {\n\t\t\treturn new Media( this.locale );\n\t\t}\n\n\t\turl = url.trim();\n\n\t\tfor ( const definition of this.providerDefinitions ) {\n\t\t\tconst previewRenderer = definition.html;\n\t\t\tlet pattern = definition.url;\n\n\t\t\tif ( !Array.isArray( pattern ) ) {\n\t\t\t\tpattern = [ pattern ];\n\t\t\t}\n\n\t\t\tfor ( const subPattern of pattern ) {\n\t\t\t\tconst match = this._getUrlMatches( url, subPattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\treturn new Media( this.locale, url, match, previewRenderer );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Tries to match `url` to `pattern`.\n\t *\n\t * @private\n\t * @param {String} url The URL of the media.\n\t * @param {RegExp} pattern The pattern that should accept the media URL.\n\t * @returns {Array|null}\n\t */\n\t_getUrlMatches( url, pattern ) {\n\t\t// 1. Try to match without stripping the protocol and \"www\" subdomain.\n\t\tlet match = url.match( pattern );\n\n\t\tif ( match ) {\n\t\t\treturn match;\n\t\t}\n\n\t\t// 2. Try to match after stripping the protocol.\n\t\tlet rawUrl = url.replace( /^https?:\\/\\//, '' );\n\t\tmatch = rawUrl.match( pattern );\n\n\t\tif ( match ) {\n\t\t\treturn match;\n\t\t}\n\n\t\t// 3. Try to match after stripping the \"www\" subdomain.\n\t\trawUrl = rawUrl.replace( /^www\\./, '' );\n\t\tmatch = rawUrl.match( pattern );\n\n\t\tif ( match ) {\n\t\t\treturn match;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n/**\n * Represents media defined by the provider configuration.\n *\n * It can be rendered to the {@link module:engine/view/element~Element view element} and used in the editing or data pipeline.\n *\n * @private\n */\nclass Media {\n\tconstructor( locale, url, match, previewRenderer ) {\n\t\t/**\n\t\t * The URL this Media instance represents.\n\t\t *\n\t\t * @member {String}\n\t\t */\n\t\tthis.url = this._getValidUrl( url );\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method\n\t\t */\n\t\tthis._t = locale.t;\n\n\t\t/**\n\t\t * The output of the `RegExp.match` which validated the {@link #url} of this media.\n\t\t *\n\t\t * @member {Object}\n\t\t */\n\t\tthis._match = match;\n\n\t\t/**\n\t\t * The function returning the HTML string preview of this media.\n\t\t *\n\t\t * @member {Function}\n\t\t */\n\t\tthis._previewRenderer = previewRenderer;\n\t}\n\n\t/**\n\t * Returns the view element representation of the media.\n\t *\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer The view writer used to produce a view element.\n\t * @param {Object} options\n\t * @param {String} [options.renderMediaPreview]\n\t * @param {String} [options.renderForEditingView]\n\t * @returns {module:engine/view/element~Element}\n\t */\n\tgetViewElement( writer, options ) {\n\t\tconst attributes = {};\n\n\t\tif ( options.renderForEditingView || ( options.renderMediaPreview && this.url && this._previewRenderer ) ) {\n\t\t\tif ( this.url ) {\n\t\t\t\tattributes[ 'data-oembed-url' ] = this.url;\n\t\t\t}\n\n\t\t\tif ( options.renderForEditingView ) {\n\t\t\t\tattributes.class = 'ck-media__wrapper';\n\t\t\t}\n\n\t\t\tconst mediaHtml = this._getPreviewHtml( options );\n\n\t\t\treturn writer.createUIElement( 'div', attributes, function( domDocument ) {\n\t\t\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t\t\tdomElement.innerHTML = mediaHtml;\n\n\t\t\t\treturn domElement;\n\t\t\t} );\n\t\t} else {\n\t\t\tif ( this.url ) {\n\t\t\t\tattributes.url = this.url;\n\t\t\t}\n\n\t\t\treturn writer.createEmptyElement( 'oembed', attributes );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the HTML string of the media content preview.\n\t *\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer The view writer used to produce a view element.\n\t * @param {Object} options\n\t * @param {String} [options.renderForEditingView]\n\t * @returns {String}\n\t */\n\t_getPreviewHtml( options ) {\n\t\tif ( this._previewRenderer ) {\n\t\t\treturn this._previewRenderer( this._match );\n\t\t} else {\n\t\t\t// The placeholder only makes sense for editing view and media which have URLs.\n\t\t\t// Placeholder is never displayed in data and URL-less media have no content.\n\t\t\tif ( this.url && options.renderForEditingView ) {\n\t\t\t\treturn this._getPlaceholderHtml();\n\t\t\t}\n\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * Returns the placeholder HTML when the media has no content preview.\n\t *\n\t * @returns {String}\n\t */\n\t_getPlaceholderHtml() {\n\t\tconst tooltip = new TooltipView();\n\t\tconst icon = new IconView();\n\n\t\ttooltip.text = this._t( 'Open media in new tab' );\n\t\ticon.content = mediaPlaceholderIcon;\n\t\ticon.viewBox = mediaPlaceholderIconViewBox;\n\n\t\tconst placeholder = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck ck-reset_all ck-media__placeholder'\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: 'ck-media__placeholder__icon'\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [ icon ]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttag: 'a',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: 'ck-media__placeholder__url',\n\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\trel: 'noopener noreferrer',\n\t\t\t\t\t\thref: this.url\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'span',\n\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\tclass: 'ck-media__placeholder__url__text'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tchildren: [ this.url ]\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttooltip\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t} ).render();\n\n\t\treturn placeholder.outerHTML;\n\t}\n\n\t/**\n\t * Returns the full URL to the specified media.\n\t *\n\t * @param {String} url The URL of the media.\n\t * @returns {String|null}\n\t */\n\t_getValidUrl( url ) {\n\t\tif ( !url ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( url.match( /^https?/ ) ) {\n\t\t\treturn url;\n\t\t}\n\n\t\treturn 'https://' + url;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module media-embed/mediaembedediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { modelToViewUrlAttributeConverter } from './converters';\nimport MediaEmbedCommand from './mediaembedcommand';\nimport MediaRegistry from './mediaregistry';\nimport {\n    toMediaWidget,\n    createMediaFigureElement\n} from './utils';\nimport '../theme/mediaembedediting.css';\n/**\n * The media embed editing feature.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class MediaEmbedEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'MediaEmbedEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('mediaEmbed', {\n            providers: [\n                {\n                    name: 'dailymotion',\n                    url: /^dailymotion\\.com\\/video\\/(\\w+)/,\n                    html: match => {\n                        const id = match[1];\n                        return '<div style=\"position: relative; padding-bottom: 100%; height: 0; \">' + `<iframe src=\"https://www.dailymotion.com/embed/video/${ id }\" ` + 'style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" ' + 'frameborder=\"0\" width=\"480\" height=\"270\" allowfullscreen allow=\"autoplay\">' + '</iframe>' + '</div>';\n                    }\n                },\n                {\n                    name: 'spotify',\n                    url: [\n                        /^open\\.spotify\\.com\\/(artist\\/\\w+)/,\n                        /^open\\.spotify\\.com\\/(album\\/\\w+)/,\n                        /^open\\.spotify\\.com\\/(track\\/\\w+)/\n                    ],\n                    html: match => {\n                        const id = match[1];\n                        return '<div style=\"position: relative; padding-bottom: 100%; height: 0; padding-bottom: 126%;\">' + `<iframe src=\"https://open.spotify.com/embed/${ id }\" ` + 'style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" ' + 'frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\">' + '</iframe>' + '</div>';\n                    }\n                },\n                {\n                    name: 'youtube',\n                    url: [\n                        /^(?:m\\.)?youtube\\.com\\/watch\\?v=([\\w-]+)/,\n                        /^(?:m\\.)?youtube\\.com\\/v\\/([\\w-]+)/,\n                        /^youtube\\.com\\/embed\\/([\\w-]+)/,\n                        /^youtu\\.be\\/([\\w-]+)/\n                    ],\n                    html: match => {\n                        const id = match[1];\n                        return '<div style=\"position: relative; padding-bottom: 100%; height: 0; padding-bottom: 56.2493%;\">' + `<iframe src=\"https://www.youtube.com/embed/${ id }\" ` + 'style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" ' + 'frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen>' + '</iframe>' + '</div>';\n                    }\n                },\n                {\n                    name: 'vimeo',\n                    url: [\n                        /^vimeo\\.com\\/(\\d+)/,\n                        /^vimeo\\.com\\/[^/]+\\/[^/]+\\/video\\/(\\d+)/,\n                        /^vimeo\\.com\\/album\\/[^/]+\\/video\\/(\\d+)/,\n                        /^vimeo\\.com\\/channels\\/[^/]+\\/(\\d+)/,\n                        /^vimeo\\.com\\/groups\\/[^/]+\\/videos\\/(\\d+)/,\n                        /^vimeo\\.com\\/ondemand\\/[^/]+\\/(\\d+)/,\n                        /^player\\.vimeo\\.com\\/video\\/(\\d+)/\n                    ],\n                    html: match => {\n                        const id = match[1];\n                        return '<div style=\"position: relative; padding-bottom: 100%; height: 0; padding-bottom: 56.2493%;\">' + `<iframe src=\"https://player.vimeo.com/video/${ id }\" ` + 'style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" ' + 'frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen>' + '</iframe>' + '</div>';\n                    }\n                },\n                {\n                    name: 'instagram',\n                    url: /^instagram\\.com\\/p\\/(\\w+)/\n                },\n                {\n                    name: 'twitter',\n                    url: /^twitter\\.com/\n                },\n                {\n                    name: 'googleMaps',\n                    url: /^google\\.com\\/maps/\n                },\n                {\n                    name: 'flickr',\n                    url: /^flickr\\.com/\n                },\n                {\n                    name: 'facebook',\n                    url: /^facebook\\.com/\n                }\n            ]\n        });\n        /**\n\t\t * The media registry managing the media providers in the editor.\n\t\t *\n\t\t * @member {module:media-embed/mediaregistry~MediaRegistry} #registry\n\t\t */\n        this.registry = new MediaRegistry(editor.locale, editor.config.get('mediaEmbed'));\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.t;\n        const conversion = editor.conversion;\n        const renderMediaPreview = editor.config.get('mediaEmbed.previewsInData');\n        const registry = this.registry;\n        editor.commands.add('mediaEmbed', new MediaEmbedCommand(editor));\n        // Configure the schema.\n        schema.register('media', {\n            isObject: true,\n            isBlock: true,\n            allowWhere: '$block',\n            allowAttributes: ['url']\n        });\n        // Model -> Data\n        conversion.for('dataDowncast').elementToElement({\n            model: 'media',\n            view: (modelElement, viewWriter) => {\n                const url = modelElement.getAttribute('url');\n                return createMediaFigureElement(viewWriter, registry, url, { renderMediaPreview: url && renderMediaPreview });\n            }\n        });\n        // Model -> Data (url -> data-oembed-url)\n        conversion.for('dataDowncast').add(modelToViewUrlAttributeConverter(registry, { renderMediaPreview }));\n        // Model -> View (element)\n        conversion.for('editingDowncast').elementToElement({\n            model: 'media',\n            view: (modelElement, viewWriter) => {\n                const url = modelElement.getAttribute('url');\n                const figure = createMediaFigureElement(viewWriter, registry, url, { renderForEditingView: true });\n                return toMediaWidget(figure, viewWriter, t('media widget'));\n            }\n        });\n        // Model -> View (url -> data-oembed-url)\n        conversion.for('editingDowncast').add(modelToViewUrlAttributeConverter(registry, { renderForEditingView: true }));\n        // View -> Model (data-oembed-url -> url)\n        conversion.for('upcast')    // Upcast semantic media.\n.elementToElement({\n            view: {\n                name: 'oembed',\n                attributes: { url: true }\n            },\n            model: (viewMedia, modelWriter) => {\n                const url = viewMedia.getAttribute('url');\n                if (registry.hasMedia(url)) {\n                    return modelWriter.createElement('media', { url });\n                }\n            }\n        })    // Upcast non-semantic media.\n.elementToElement({\n            view: {\n                name: 'div',\n                attributes: { 'data-oembed-url': true }\n            },\n            model: (viewMedia, modelWriter) => {\n                const url = viewMedia.getAttribute('data-oembed-url');\n                if (registry.hasMedia(url)) {\n                    return modelWriter.createElement('media', { url });\n                }\n            }\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/automediaembed\n */\n\nimport MediaEmbedEditing from './mediaembedediting';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Clipboard from '@ckeditor/ckeditor5-clipboard/src/clipboard';\nimport LiveRange from '@ckeditor/ckeditor5-engine/src/model/liverange';\nimport LivePosition from '@ckeditor/ckeditor5-engine/src/model/liveposition';\nimport Undo from '@ckeditor/ckeditor5-undo/src/undo';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { insertMedia } from './utils';\n\nconst URL_REGEXP = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w.-]+)+[\\w\\-._~:/?#[\\]@!$&'()*+,;=]+$/;\n\n/**\n * The auto-media embed plugin. It recognizes media links in the pasted content and embeds\n * them shortly after they are injected into the document.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class AutoMediaEmbed extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Clipboard, Undo ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'AutoMediaEmbed';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The paste–to–embed `setTimeout` ID. Stored as a property to allow\n\t\t * cleaning of the timeout.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} #_timeoutId\n\t\t */\n\t\tthis._timeoutId = null;\n\n\t\t/**\n\t\t * The position where the `<media>` element will be inserted after the timeout,\n\t\t * determined each time the new content is pasted into the document.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/liveposition~LivePosition} #_positionToInsert\n\t\t */\n\t\tthis._positionToInsert = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst modelDocument = editor.model.document;\n\n\t\t// We need to listen on `Clipboard#inputTransformation` because we need to save positions of selection.\n\t\t// After pasting, the content between those positions will be checked for a URL that could be transformed\n\t\t// into media.\n\t\tthis.listenTo( editor.plugins.get( Clipboard ), 'inputTransformation', () => {\n\t\t\tconst firstRange = modelDocument.selection.getFirstRange();\n\n\t\t\tconst leftLivePosition = LivePosition.fromPosition( firstRange.start );\n\t\t\tleftLivePosition.stickiness = 'toPrevious';\n\n\t\t\tconst rightLivePosition = LivePosition.fromPosition( firstRange.end );\n\t\t\trightLivePosition.stickiness = 'toNext';\n\n\t\t\tmodelDocument.once( 'change:data', () => {\n\t\t\t\tthis._embedMediaBetweenPositions( leftLivePosition, rightLivePosition );\n\n\t\t\t\tleftLivePosition.detach();\n\t\t\t\trightLivePosition.detach();\n\t\t\t}, { priority: 'high' } );\n\t\t} );\n\n\t\teditor.commands.get( 'undo' ).on( 'execute', () => {\n\t\t\tif ( this._timeoutId ) {\n\t\t\t\tglobal.window.clearTimeout( this._timeoutId );\n\t\t\t\tthis._positionToInsert.detach();\n\n\t\t\t\tthis._timeoutId = null;\n\t\t\t\tthis._positionToInsert = null;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Analyzes the part of the document between provided positions in search for a URL representing media.\n\t * When the URL is found, it is automatically converted into media.\n\t *\n\t * @protected\n\t * @param {module:engine/model/liveposition~LivePosition} leftPosition Left position of the selection.\n\t * @param {module:engine/model/liveposition~LivePosition} rightPosition Right position of the selection.\n\t */\n\t_embedMediaBetweenPositions( leftPosition, rightPosition ) {\n\t\tconst editor = this.editor;\n\t\tconst mediaRegistry = editor.plugins.get( MediaEmbedEditing ).registry;\n\t\t// TODO: Use marker instead of LiveRange & LivePositions.\n\t\tconst urlRange = new LiveRange( leftPosition, rightPosition );\n\t\tconst walker = urlRange.getWalker( { ignoreElementEnd: true } );\n\n\t\tlet url = '';\n\n\t\tfor ( const node of walker ) {\n\t\t\tif ( node.item.is( 'textProxy' ) ) {\n\t\t\t\turl += node.item.data;\n\t\t\t}\n\t\t}\n\n\t\turl = url.trim();\n\n\t\t// If the URL does not match to universal URL regexp, let's skip that.\n\t\tif ( !url.match( URL_REGEXP ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If the URL represents a media, let's use it.\n\t\tif ( !mediaRegistry.hasMedia( url ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mediaEmbedCommand = editor.commands.get( 'mediaEmbed' );\n\n\t\t// Do not anything if media element cannot be inserted at the current position (#47).\n\t\tif ( !mediaEmbedCommand.isEnabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Position won't be available in the `setTimeout` function so let's clone it.\n\t\tthis._positionToInsert = LivePosition.fromPosition( leftPosition );\n\n\t\t// This action mustn't be executed if undo was called between pasting and auto-embedding.\n\t\tthis._timeoutId = global.window.setTimeout( () => {\n\t\t\teditor.model.change( writer => {\n\t\t\t\tthis._timeoutId = null;\n\n\t\t\t\twriter.remove( urlRange );\n\n\t\t\t\tlet insertionPosition;\n\n\t\t\t\t// Check if position where the media element should be inserted is still valid.\n\t\t\t\t// Otherwise leave it as undefined to use document.selection - default behavior of model.insertContent().\n\t\t\t\tif ( this._positionToInsert.root.rootName !== '$graveyard' ) {\n\t\t\t\t\tinsertionPosition = this._positionToInsert;\n\t\t\t\t}\n\n\t\t\t\tinsertMedia( editor.model, url, insertionPosition );\n\n\t\t\t\tthis._positionToInsert.detach();\n\t\t\t\tthis._positionToInsert = null;\n\t\t\t} );\n\t\t}, 100 );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module media-embed/ui/mediaformview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LabeledInputView from '@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview';\nimport InputTextView from '@ckeditor/ckeditor5-ui/src/inputtext/inputtextview';\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\nimport '../../theme/mediaform.css';\n/**\n * The media form view controller class.\n *\n * See {@link module:media-embed/ui/mediaformview~MediaFormView}.\n *\n * @extends module:ui/view~View\n */\nexport default class MediaFormView extends View {\n    /**\n\t * @param {Array.<Function>} validators Form validators used by {@link #isValid}.\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t */\n    constructor(validators, locale) {\n        super(locale);\n        const t = locale.t;\n        /**\n\t\t * Tracks information about DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * The URL input view.\n\t\t *\n\t\t * @member {module:ui/labeledinput/labeledinputview~LabeledInputView}\n\t\t */\n        this.urlInputView = this._createUrlInput();\n        /**\n\t\t * The Save button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.saveButtonView = this._createButton(t('Save'), checkIcon, 'ck-button-save');\n        this.saveButtonView.type = 'submit';\n        /**\n\t\t * The Cancel button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.cancelButtonView = this._createButton(t('Cancel'), cancelIcon, 'ck-button-cancel', 'cancel');\n        /**\n\t\t * A collection of views that can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this._focusables = new ViewCollection();\n        /**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        /**\n\t\t * An array of form validators used by {@link #isValid}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Array.<Function>}\n\t\t */\n        this._validators = validators;\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-media-form'\n                ],\n                tabindex: '-1'\n            },\n            children: [\n                this.urlInputView,\n                this.saveButtonView,\n                this.cancelButtonView\n            ]\n        });    /**\n\t\t * The default info text for the {@link #urlInputView}.\n\t\t *\n\t\t * @private\n\t\t * @member {String} #_urlInputViewInfoDefault\n\t\t */\n               /**\n\t\t * The info text with an additional tip for the {@link #urlInputView},\n\t\t * displayed when the input has some value.\n\t\t *\n\t\t * @private\n\t\t * @member {String} #_urlInputViewInfoTip\n\t\t */\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        submitHandler({ view: this });\n        const childViews = [\n            this.urlInputView,\n            this.saveButtonView,\n            this.cancelButtonView\n        ];\n        childViews.forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n        const stopPropagation = data => data.stopPropagation();\n        // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n        // keystroke handler would take over the key management in the URL input. We need to prevent\n        // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n        this.keystrokes.set('arrowright', stopPropagation);\n        this.keystrokes.set('arrowleft', stopPropagation);\n        this.keystrokes.set('arrowup', stopPropagation);\n        this.keystrokes.set('arrowdown', stopPropagation);\n        // Intercept the \"selectstart\" event, which is blocked by default because of the default behavior\n        // of the DropdownView#panelView.\n        // TODO: blocking \"selectstart\" in the #panelView should be configurable per–drop–down instance.\n        this.listenTo(this.urlInputView.element, 'selectstart', (evt, domEvt) => {\n            domEvt.stopPropagation();\n        }, { priority: 'high' });\n    }\n    /**\n\t * Focuses the fist {@link #_focusables} in the form.\n\t */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * The native DOM `value` of the {@link #urlInputView} element.\n\t *\n\t * **Note**: Do not confuse it with the {@link module:ui/inputtext/inputtextview~InputTextView#value}\n\t * which works one way only and may not represent the actual state of the component in the DOM.\n\t *\n\t * @type {Number}\n\t */\n    get url() {\n        return this.urlInputView.inputView.element.value.trim();\n    }\n    /**\n\t * Sets the native DOM `value` of the {@link #urlInputView} element.\n\t *\n\t * **Note**: Do not confuse it with the {@link module:ui/inputtext/inputtextview~InputTextView#value}\n\t * which works one way only and may not represent the actual state of the component in the DOM.\n\t *\n\t * @param {String} url\n\t */\n    set url(url) {\n        this.urlInputView.inputView.element.value = url.trim();\n    }\n    /**\n\t * Validates the form and returns `false` when some fields are invalid.\n\t *\n\t * @returns {Boolean}\n\t */\n    isValid() {\n        this.resetFormStatus();\n        for (const validator of this._validators) {\n            const errorText = validator(this);\n            // One error per field is enough.\n            if (errorText) {\n                // Apply updated error.\n                this.urlInputView.errorText = errorText;\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n\t * Cleans up the supplementary error and information text of the {@link #urlInputView}\n\t * bringing them back to the state when the form has been displayed for the first time.\n\t *\n\t * See {@link #isValid}.\n\t */\n    resetFormStatus() {\n        this.urlInputView.errorText = null;\n        this.urlInputView.infoText = this._urlInputViewInfoDefault;\n    }\n    /**\n\t * Creates a labeled input view.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledinput/labeledinputview~LabeledInputView} Labeled input view instance.\n\t */\n    _createUrlInput() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledInputView(this.locale, InputTextView);\n        const inputView = labeledInput.inputView;\n        this._urlInputViewInfoDefault = t('Paste the media URL in the input.');\n        this._urlInputViewInfoTip = t('Tip: Paste the URL into the content to embed faster.');\n        labeledInput.label = t('Media URL');\n        labeledInput.infoText = this._urlInputViewInfoDefault;\n        inputView.placeholder = 'https://example.com';\n        inputView.on('input', () => {\n            // Display the tip text only when there's some value. Otherwise fall back to the default info text.\n            labeledInput.infoText = inputView.element.value ? this._urlInputViewInfoTip : this._urlInputViewInfoDefault;\n        });\n        return labeledInput;\n    }\n    /**\n\t * Creates a button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button icon.\n\t * @param {String} className The additional button CSS class name.\n\t * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createButton(label, icon, className, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.extendTemplate({ attributes: { class: className } });\n        if (eventName) {\n            button.delegate('execute').to(this, eventName);\n        }\n        return button;\n    }\n}    /**\n * Fired when the form view is submitted (when one of the children triggered the submit event),\n * e.g. click on {@link #saveButtonView}.\n *\n * @event submit\n */\n     /**\n * Fired when the form view is canceled, e.g. click on {@link #cancelButtonView}.\n *\n * @event cancel\n */","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M18.68 2.53c.6 0 .59-.03.59.55v12.84c0 .59.01.56-.59.56H1.29c-.6 0-.59.03-.59-.56V3.08c0-.58-.01-.55.6-.55h17.38zM15.77 14.5v-10H4.2v10h11.57zM2 4v1h1V4H2zm0 2v1h1V6H2zm0 2v1h1V8H2zm0 2v1h1v-1H2zm0 2v1h1v-1H2zm0 2v1h1v-1H2zM17 4v1h1V4h-1zm0 2v1h1V6h-1zm0 2v1h1V8h-1zm0 2v1h1v-1h-1zm0 2v1h1v-1h-1zm0 2v1h1v-1h-1zM7.5 6.677a.4.4 0 0 1 .593-.351l5.133 2.824a.4.4 0 0 1 0 .7l-5.133 2.824a.4.4 0 0 1-.593-.35V6.676z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module media-embed/mediaembedui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { createDropdown } from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport MediaFormView from './ui/mediaformview';\nimport MediaEmbedEditing from './mediaembedediting';\nimport mediaIcon from '../theme/icons/media.svg';\n/**\n * The media embed UI plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class MediaEmbedUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [MediaEmbedEditing];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'MediaEmbedUI';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const command = editor.commands.get('mediaEmbed');\n        const registry = editor.plugins.get(MediaEmbedEditing).registry;\n        /**\n\t\t * The form view displayed inside the drop-down.\n\t\t *\n\t\t * @member {module:media-embed/ui/mediaformview~MediaFormView}\n\t\t */\n        this.form = new MediaFormView(getFormValidators(editor.t, registry), editor.locale);\n        // Setup `imageUpload` button.\n        editor.ui.componentFactory.add('mediaEmbed', locale => {\n            const dropdown = createDropdown(locale);\n            this._setUpDropdown(dropdown, this.form, command, editor);\n            this._setUpForm(this.form, dropdown, command);\n            return dropdown;\n        });\n    }\n    _setUpDropdown(dropdown, form, command) {\n        const editor = this.editor;\n        const t = editor.t;\n        const button = dropdown.buttonView;\n        dropdown.bind('isEnabled').to(command);\n        dropdown.panelView.children.add(form);\n        button.set({\n            label: t('Insert media'),\n            icon: mediaIcon,\n            tooltip: true\n        });\n        // Note: Use the low priority to make sure the following listener starts working after the\n        // default action of the drop-down is executed (i.e. the panel showed up). Otherwise, the\n        // invisible form/input cannot be focused/selected.\n        button.on('open', () => {\n            // Make sure that each time the panel shows up, the URL field remains in sync with the value of\n            // the command. If the user typed in the input, then canceled (`urlInputView#value` stays\n            // unaltered) and re-opened it without changing the value of the media command (e.g. because they\n            // didn't change the selection), they would see the old value instead of the actual value of the\n            // command.\n            form.url = command.value || '';\n            form.urlInputView.select();\n            form.focus();\n        }, { priority: 'low' });\n        dropdown.on('submit', () => {\n            if (form.isValid()) {\n                editor.execute('mediaEmbed', form.url);\n                closeUI();\n            }\n        });\n        dropdown.on('change:isOpen', () => form.resetFormStatus());\n        dropdown.on('cancel', () => closeUI());\n        function closeUI() {\n            editor.editing.view.focus();\n            dropdown.isOpen = false;\n        }\n    }\n    _setUpForm(form, dropdown, command) {\n        form.delegate('submit', 'cancel').to(dropdown);\n        form.urlInputView.bind('value').to(command, 'value');\n        // Form elements should be read-only when corresponding commands are disabled.\n        form.urlInputView.bind('isReadOnly').to(command, 'isEnabled', value => !value);\n        form.saveButtonView.bind('isEnabled').to(command);\n    }\n}\nfunction getFormValidators(t, registry) {\n    return [\n        form => {\n            if (!form.url.length) {\n                return t('The URL must not be empty.');\n            }\n        },\n        form => {\n            if (!registry.hasMedia(form.url)) {\n                return t('This media URL is not supported.');\n            }\n        }\n    ];\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/mediaembed\n */\n\nimport MediaEmbedEditing from './mediaembedediting';\nimport AutoMediaEmbed from './automediaembed';\nimport MediaEmbedUI from './mediaembedui';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Widget from '@ckeditor/ckeditor5-widget/src/widget';\n\nimport '../theme/mediaembed.css';\n\n/**\n * The media embed plugin.\n *\n * For a detailed overview, check the {@glink features/media-embed Media Embed feature documentation}.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n *\n * * The {@link module:media-embed/mediaembedediting~MediaEmbedEditing media embed editing feature},\n * * The {@link module:media-embed/mediaembedui~MediaEmbedUI media embed UI feature} and\n * * The {@link module:media-embed/automediaembed~AutoMediaEmbed auto-media embed feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class MediaEmbed extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ MediaEmbedEditing, MediaEmbedUI, AutoMediaEmbed, Widget ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'MediaEmbed';\n\t}\n}\n\n/**\n * The media embed provider descriptor. Used in\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#providers `config.mediaEmbed.providers`} and\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#extraProviders `config.mediaEmbed.extraProviders`}.\n *\n * See {@link module:media-embed/mediaembed~MediaEmbedConfig} to learn more.\n *\n *\t\t{\n *\t\t\tname: 'example',\n *\n *\t\t\t// The following RegExp matches https://www.example.com/media/{media id},\n *\t\t\t// (either with \"http(s)://\" and \"www\" or without), so the valid URLs are:\n *\t\t\t//\n *\t\t\t// * https://www.example.com/media/{media id},\n *\t\t\t// * http://www.example.com/media/{media id},\n *\t\t\t// * www.example.com/media/{media id},\n *\t\t\t// * example.com/media/{media id}\n *\t\t\turl: /^example\\.com\\/media\\/(\\w+)/,\n *\n *\t\t\t// The rendering function of the provider.\n *\t\t\t// Used to represent the media when editing the content (i.e. in the view)\n *\t\t\t// and also in the data output of the editor if semantic data output is disabled.\n *\t\t\thtml: match => `The HTML representing the media with ID=${ match[ 1 ] }.`\n *\t\t}\n *\n * You can allow any sort of media in the editor using the \"allow–all\" `RegExp`.\n * But mind that, since URLs are processed in the order of configuration, if one of the previous\n * `RegExps` matches the URL, it will have a precedence over this one.\n *\n *\t\t{\n *\t\t\tname: 'allow-all',\n *\t\t\turl: /^.+/\n *\t\t}\n *\n * To implement responsive media, you can use the following HTML structure:\n *\n *\t\t{\n *\t\t\t...\n *\t\t\thtml: match =>\n *\t\t\t\t'<div style=\"position:relative; padding-bottom:100%; height:0\">' +\n *\t\t\t\t\t'<iframe src=\"...\" frameborder=\"0\" ' +\n *\t\t\t\t\t\t'style=\"position:absolute; width:100%; height:100%; top:0; left:0\">' +\n *\t\t\t\t\t'</iframe>' +\n *\t\t\t\t'</div>'\n *\t\t}\n *\n * @typedef {Object} module:media-embed/mediaembed~MediaEmbedProvider\n * @property {String} name The name of the provider. Used e.g. when\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#removeProviders removing providers}.\n * @property {RegExp|Array.<RegExp>} url The `RegExp` object (or array of objects) defining the URL of the media.\n * If any URL matches the `RegExp`, it becomes the media in the editor model, as defined by the provider. The result\n * of matching (output of `String.prototype.match()`) is passed to the `html` rendering function of the media.\n *\n * **Note:** You do not need to include the protocol (`http://`, `https://`) and `www` subdomain in your `RegExps`,\n * they are stripped from the URLs before matching anyway.\n * @property {Function} [html] (optional) The rendering function of the media. The function receives the entire matching\n * array from the corresponding `url` `RegExp` as an argument, allowing rendering a dedicated\n * preview of the media identified by a certain ID or a hash. When not defined, the media embed feature\n * will use a generic media representation in the view and output data.\n * Note that when\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#previewsInData `config.mediaEmbed.previewsInData`}\n * is `true`, the rendering function **will always** be used for the media in the editor data output.\n */\n\n/**\n * The configuration of the {@link module:media-embed/mediaembed~MediaEmbed} feature.\n *\n * Read more in {@link module:media-embed/mediaembed~MediaEmbedConfig}.\n *\n * @member {module:media-embed/mediaembed~MediaEmbedConfig} module:core/editor/editorconfig~EditorConfig#mediaEmbed\n */\n\n/**\n * The configuration of the media embed features.\n *\n * Read more about {@glink features/media-embed#configuration configuring the media embed feature}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\tmediaEmbed: ... // Media embed feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface MediaEmbedConfig\n */\n\n/**\n * The default media providers supported by the editor.\n *\n * The names of providers with rendering functions (previews):\n *\n * * \"dailymotion\",\n * * \"spotify\",\n * * \"youtube\",\n * * \"vimeo\"\n *\n * The names of providers without rendering functions:\n *\n * * \"instagram\",\n * * \"twitter\",\n * * \"googleMaps\",\n * * \"flickr\",\n * * \"facebook\"\n *\n * See the {@link module:media-embed/mediaembed~MediaEmbedProvider provider syntax} to learn more about\n * different kinds of media and media providers.\n *\n * **Note**: The default media provider configuration may not support all possible media URLs,\n * only the most common are included.\n *\n * Media without rendering functions are always represented in the data using the \"semantic\" markup. See\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#previewsInData `config.mediaEmbed.previewsInData`} to\n * learn more about possible data outputs.\n *\n * The priority of media providers corresponds to the order of configuration. The first provider\n * to match the URL is always used, even if there are other providers that support a particular URL.\n * The URL is never matched against the remaining providers.\n *\n * To discard **all** default media providers, simply override this configuration with your own\n * {@link module:media-embed/mediaembed~MediaEmbedProvider definitions}:\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tplugins: [ MediaEmbed, ... ],\n *\t\t\t\tmediaEmbed: {\n *\t\t\t\t\tproviders: [\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\t name: 'myProvider',\n *\t\t\t\t\t\t\t url: /^example\\.com\\/media\\/(\\w+)/,\n *\t\t\t\t\t\t\t html: match => '...'\n *\t\t\t\t\t\t},\n *\t\t\t\t\t\t...\n * \t\t\t\t\t]\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * You can take inspiration from the default configuration of this feature which you can find in:\n * https://github.com/ckeditor/ckeditor5-media-embed/blob/master/src/mediaembedediting.js\n *\n * To **extend** the list of default providers, use\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#extraProviders `config.mediaEmbed.extraProviders`}.\n *\n * To **remove** certain providers, use\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#removeProviders `config.mediaEmbed.removeProviders`}.\n *\n * @member {Array.<module:media-embed/mediaembed~MediaEmbedProvider>} module:media-embed/mediaembed~MediaEmbedConfig#providers\n */\n\n/**\n * The additional media providers supported by the editor. This configuration helps extend the default\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#providers}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tplugins: [ MediaEmbed, ... ],\n *\t\t\t\tmediaEmbed: {\n *\t\t\t\t\textraProviders: [\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\t name: 'extraProvider',\n *\t\t\t\t\t\t\t url: /^example\\.com\\/media\\/(\\w+)/,\n *\t\t\t\t\t\t\t html: match => '...'\n *\t\t\t\t\t\t},\n *\t\t\t\t\t\t...\n * \t\t\t\t\t]\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See the {@link module:media-embed/mediaembed~MediaEmbedProvider provider syntax} to learn more.\n *\n * @member {Array.<module:media-embed/mediaembed~MediaEmbedProvider>} module:media-embed/mediaembed~MediaEmbedConfig#extraProviders\n */\n\n/**\n * The list of media providers that should not be used despite being available in\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#providers `config.mediaEmbed.providers`} and\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#extraProviders `config.mediaEmbed.extraProviders`}\n *\n *\t\tmediaEmbed: {\n *\t\t\tremoveProviders: [ 'youtube', 'twitter' ]\n *\t\t}\n *\n * @member {Array.<String>} module:media-embed/mediaembed~MediaEmbedConfig#removeProviders\n */\n\n/**\n * Controls the data format produced by the feature.\n *\n * When `false` (default), the feature produces \"semantic\" data, i.e. it does not include the preview of\n * the media, just the `<oembed>` tag with the `url` attribute:\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<oembed url=\"https://url\"></oembed>\n *\t\t</figure>\n *\n * When `true`, the media is represented in the output in the same way it looks in the editor,\n * i.e. the media preview is saved to the database:\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<div data-oembed-url=\"https://url\">\n *\t\t\t\t<iframe src=\"https://preview\"></iframe>\n *\t\t\t</div>\n *\t\t</figure>\n *\n * **Note:** Media without preview are always represented in the data using the \"semantic\" markup\n * regardless of the value of the `previewsInData`. Learn more about different kinds of media\n * in the {@link module:media-embed/mediaembed~MediaEmbedConfig#providers `config.mediaEmbed.providers`}\n * configuration description.\n *\n * @member {Boolean} [module:media-embed/mediaembed~MediaEmbedConfig#previewsInData=false]\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/getlasttextline\n */\n\n/**\n * Returns the last text line from the given range.\n *\n * \"The last text line\" is understood as text (from one or more text nodes) which is limited either by a parent block\n * or by inline elements (e.g. `<softBreak>`).\n *\n *\t\tconst rangeToCheck = model.createRange(\n *\t\t\tmodel.createPositionAt( paragraph, 0 ),\n *\t\t\tmodel.createPositionAt( paragraph, 'end' )\n *\t\t);\n *\n *\t\tconst { text, range } = getLastTextLine( rangeToCheck, model );\n *\n * For model below, the returned `text` will be \"Foo bar baz\" and `range` will be set on whole `<paragraph>` content:\n *\n *\t\t<paragraph>Foo bar baz<paragraph>\n *\n * However, in below case, `text` will be set to \"baz\" and `range` will be set only on \"baz\".\n *\n *\t\t<paragraph>Foo<softBreak></softBreak>bar<softBreak></softBreak>baz<paragraph>\n *\n * @protected\n * @param {module:engine/model/range~Range} range\n * @param {module:engine/model/model~Model} model\n * @returns {module:typing/utils/getlasttextline~LastTextLineData}\n */\nexport default function getLastTextLine( range, model ) {\n\tlet start = range.start;\n\n\tconst text = Array.from( range.getItems() ).reduce( ( rangeText, node ) => {\n\t\t// Trim text to a last occurrence of an inline element and update range start.\n\t\tif ( !( node.is( 'text' ) || node.is( 'textProxy' ) ) ) {\n\t\t\tstart = model.createPositionAfter( node );\n\n\t\t\treturn '';\n\t\t}\n\n\t\treturn rangeText + node.data;\n\t}, '' );\n\n\treturn { text, range: model.createRange( start, range.end ) };\n}\n\n/**\n * The value returned by {@link module:typing/utils/getlasttextline~getLastTextLine}.\n *\n * @typedef {Object} module:typing/utils/getlasttextline~LastTextLineData\n *\n * @property {String} text The text from the text nodes in the last text line.\n * @property {module:engine/model/range~Range} range The range set on the text nodes in the last text line.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport Command from './command';\n\n/**\n * @module core/multicommand\n */\n\n/**\n * A CKEditor command that aggregates other commands.\n *\n * This command is used to proxy multiple commands. The multi-command is enabled when\n * at least one of its registered child commands is enabled.\n * When executing a multi-command the first command that is enabled will be executed.\n *\n *\t\tconst multiCommand = new MultiCommand( editor );\n *\n *\t\tconst commandFoo = new Command( editor );\n *\t\tconst commandBar = new Command( editor );\n *\n *\t\t// Register child commands.\n *\t\tmultiCommand.registerChildCommand( commandFoo );\n *\t\tmultiCommand.registerChildCommand( commandBar );\n *\n *\t\t// Enable one of the commands.\n *\t\tcommandBar.isEnabled = true;\n *\n *\t\tmultiCommand.execute(); // Will execute commandBar.\n *\n * @extends module:core/command~Command\n */\nexport default class MultiCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Registered child commands.\n\t\t *\n\t\t * @type {Array.<module:core/command~Command>}\n\t\t * @private\n\t\t */\n\t\tthis._childCommands = [];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\t// Override base command refresh(): the command's state is changed when one of child commands changes states.\n\t}\n\n\t/**\n\t * Executes the first of it registered child commands.\n\t */\n\texecute( ...args ) {\n\t\tconst command = this._getFirstEnabledCommand();\n\n\t\tcommand.execute( args );\n\t}\n\n\t/**\n\t * Registers a child command.\n\t *\n\t * @param {module:core/command~Command} command\n\t */\n\tregisterChildCommand( command ) {\n\t\tthis._childCommands.push( command );\n\n\t\t// Change multi command enabled state when one of registered commands changes state.\n\t\tcommand.on( 'change:isEnabled', () => this._checkEnabled() );\n\n\t\tthis._checkEnabled();\n\t}\n\n\t/**\n\t * Checks if any of child commands is enabled.\n\t *\n\t * @private\n\t */\n\t_checkEnabled() {\n\t\tthis.isEnabled = !!this._getFirstEnabledCommand();\n\t}\n\n\t/**\n\t * Returns a first enabled command or undefined if none of them is enabled.\n\t *\n\t * @returns {module:core/command~Command|undefined}\n\t * @private\n\t */\n\t_getFirstEnabledCommand() {\n\t\treturn this._childCommands.find( command => command.isEnabled );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module indent/indentediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport MultiCommand from '@ckeditor/ckeditor5-core/src/multicommand';\n\n/**\n * The indent editing feature.\n *\n * This plugin registers the `'indent'` and `'outdent'` commands.\n *\n * **Note**: In order for the commands to work, at least one of the compatible features is required. Read more in the\n * {@link module:indent/indent~Indent indent feature} API documentation.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class IndentEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'IndentEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\teditor.commands.add( 'indent', new MultiCommand( editor ) );\n\t\teditor.commands.add( 'outdent', new MultiCommand( editor ) );\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm5 6c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM2.75 16.5h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 1 0 0 1.5z\\\"/><path d=\\\"M1.632 6.95L5.02 9.358a.4.4 0 0 1-.013.661l-3.39 2.207A.4.4 0 0 1 1 11.892V7.275a.4.4 0 0 1 .632-.326z\\\"/></svg>\\n\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm5 6c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM2.75 16.5h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 1 0 0 1.5z\\\"/><path d=\\\"M4.368 6.95L.98 9.358a.4.4 0 0 0 .013.661l3.39 2.207A.4.4 0 0 0 5 11.892V7.275a.4.4 0 0 0-.632-.326z\\\"/></svg>\\n\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module indent/indentui\n */\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport indentIcon from '../theme/icons/indent.svg';\nimport outdentIcon from '../theme/icons/outdent.svg';\n/**\n * The indent UI feature.\n *\n * This plugin registers the `'indent'` and `'outdent'` buttons.\n *\n * **Note**: In order for the commands to work, at least one of the compatible features is required. Read more in\n * the {@link module:indent/indent~Indent indent feature} API documentation.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class IndentUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'IndentUI';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = editor.t;\n        const localizedIndentIcon = locale.uiLanguageDirection == 'ltr' ? indentIcon : outdentIcon;\n        const localizedOutdentIcon = locale.uiLanguageDirection == 'ltr' ? outdentIcon : indentIcon;\n        this._defineButton('indent', t('Increase indent'), localizedIndentIcon);\n        this._defineButton('outdent', t('Decrease indent'), localizedOutdentIcon);\n    }\n    /**\n\t * Defines a UI button.\n\t *\n\t * @param {String} commandName\n\t * @param {String} label\n\t * @param {String} icon\n\t * @private\n\t */\n    _defineButton(commandName, label, icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(commandName, locale => {\n            const command = editor.commands.get(commandName);\n            const view = new ButtonView(locale);\n            view.set({\n                label,\n                icon,\n                tooltip: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            this.listenTo(view, 'execute', () => editor.execute(commandName));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module indent/indent\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport IndentEditing from './indentediting';\nimport IndentUI from './indentui';\n\n/**\n * The indent feature.\n *\n * This plugin acts as a single entry point plugin for other features that implement indentation of elements like lists or paragraphs.\n *\n * The compatible features are:\n *\n * * The {@link module:list/list~List} or {@link module:list/listediting~ListEditing} feature for list indentation.\n * * The {@link module:indent/indentblock~IndentBlock} feature for block indentation.\n *\n * This is a \"glue\" plugin that loads the following plugins:\n *\n * * The {@link module:indent/indentediting~IndentEditing indent editing feature}.\n * * The {@link module:indent/indentui~IndentUI indent UI feature}.\n *\n * The dependent plugins register the `'indent'` and `'outdent'` commands and introduce the `'indent'` and `'outdent'` buttons\n * that allow to increase or decrease text indentation of supported elements.\n *\n * **Note**: In order for the commands and buttons to work, at least one of compatible features is required.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Indent extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Indent';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ IndentEditing, IndentUI ];\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagetoolbar\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { getSelectedImageWidget } from './image/utils';\nimport WidgetToolbarRepository from '@ckeditor/ckeditor5-widget/src/widgettoolbarrepository';\n/**\n * The image toolbar plugin. It creates and manages the image toolbar (the toolbar displayed when an image is selected).\n *\n * For a detailed overview, check the {@glink features/image#image-contextual-toolbar image contextual toolbar} documentation.\n *\n * Instances of toolbar components (e.g. buttons) are created using the editor's\n * {@link module:ui/componentfactory~ComponentFactory component factory}\n * based on the {@link module:image/image~ImageConfig#toolbar `image.toolbar` configuration option}.\n *\n * The toolbar uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageToolbar extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [WidgetToolbarRepository];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'ImageToolbar';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    afterInit() {\n        const editor = this.editor;\n        const t = editor.t;\n        const widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n        widgetToolbarRepository.register('image', {\n            ariaLabel: t('Image toolbar'),\n            items: editor.config.get('image.toolbar') || [],\n            getRelatedElement: getSelectedImageWidget\n        });\n    }\n}    /**\n * Items to be placed in the image toolbar.\n * This option is used by the {@link module:image/imagetoolbar~ImageToolbar} feature.\n *\n * Assuming that you use the following features:\n *\n * * {@link module:image/imagestyle~ImageStyle} (with a default configuration),\n * * {@link module:image/imagetextalternative~ImageTextAlternative},\n *\n * three toolbar items will be available in {@link module:ui/componentfactory~ComponentFactory}:\n * `'imageStyle:full'`, `'imageStyle:side'`, and `'imageTextAlternative'` so you can configure the toolbar like this:\n *\n *\t\tconst imageConfig = {\n *\t\t\ttoolbar: [ 'imageStyle:full', 'imageStyle:side', '|', 'imageTextAlternative' ]\n *\t\t};\n *\n * Of course, the same buttons can also be used in the\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:image/image~ImageConfig#toolbar\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestylecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { isImage } from '../image/utils';\n\n/**\n * The image style command. It is used to apply different image styles.\n *\n * @extends module:core/command~Command\n */\nexport default class ImageStyleCommand extends Command {\n\t/**\n\t * Creates an instance of the image style command. Each command instance is handling one style.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles The styles that this command supports.\n\t */\n\tconstructor( editor, styles ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The name of the default style, if it is present. If there is no default style, it defaults to `false`.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Boolean|String}\n\t\t */\n\t\tthis.defaultStyle = false;\n\n\t\t/**\n\t\t * A style handled by this command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} #styles\n\t\t */\n\t\tthis.styles = styles.reduce( ( styles, style ) => {\n\t\t\tstyles[ style.name ] = style;\n\n\t\t\tif ( style.isDefault ) {\n\t\t\t\tthis.defaultStyle = style.name;\n\t\t\t}\n\n\t\t\treturn styles;\n\t\t}, {} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst element = this.editor.model.document.selection.getSelectedElement();\n\n\t\tthis.isEnabled = isImage( element );\n\n\t\tif ( !element ) {\n\t\t\tthis.value = false;\n\t\t} else if ( element.hasAttribute( 'imageStyle' ) ) {\n\t\t\tconst attributeValue = element.getAttribute( 'imageStyle' );\n\t\t\tthis.value = this.styles[ attributeValue ] ? attributeValue : false;\n\t\t} else {\n\t\t\tthis.value = this.defaultStyle;\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t *\t\teditor.execute( 'imageStyle', { value: 'side' } );\n\t *\n\t * @param {Object} options\n\t * @param {String} options.value The name of the style (based on the\n\t * {@link module:image/image~ImageConfig#styles `image.styles`} configuration option).\n\t * @fires execute\n\t */\n\texecute( options ) {\n\t\tconst styleName = options.value;\n\n\t\tconst model = this.editor.model;\n\t\tconst imageElement = model.document.selection.getSelectedElement();\n\n\t\tmodel.change( writer => {\n\t\t\t// Default style means that there is no `imageStyle` attribute in the model.\n\t\t\t// https://github.com/ckeditor/ckeditor5-image/issues/147\n\t\t\tif ( this.styles[ styleName ].isDefault ) {\n\t\t\t\twriter.removeAttribute( 'imageStyle', imageElement );\n\t\t\t} else {\n\t\t\t\twriter.setAttribute( 'imageStyle', styleName, imageElement );\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * @module image/imagestyle/converters\n */\n\n/**\n * Returns a converter for the `imageStyle` attribute. It can be used for adding, changing and removing the attribute.\n *\n * @param {Object} styles An object containing available styles. See {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\n * for more details.\n * @returns {Function} A model-to-view attribute converter.\n */\nexport function modelToViewStyleAttribute( styles ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if there is class name associated with given value.\n\t\tconst newStyle = getStyleByName( data.attributeNewValue, styles );\n\t\tconst oldStyle = getStyleByName( data.attributeOldValue, styles );\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\tif ( oldStyle ) {\n\t\t\tviewWriter.removeClass( oldStyle.className, viewElement );\n\t\t}\n\n\t\tif ( newStyle ) {\n\t\t\tviewWriter.addClass( newStyle.className, viewElement );\n\t\t}\n\t};\n}\n\n/**\n * Returns a view-to-model converter converting image CSS classes to a proper value in the model.\n *\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles The styles for which the converter is created.\n * @returns {Function} A view-to-model converter.\n */\nexport function viewToModelStyleAttribute( styles ) {\n\t// Convert only non–default styles.\n\tconst filteredStyles = styles.filter( style => !style.isDefault );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !data.modelRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewFigureElement = data.viewItem;\n\t\tconst modelImageElement = first( data.modelRange.getItems() );\n\n\t\t// Check if `imageStyle` attribute is allowed for current element.\n\t\tif ( !conversionApi.schema.checkAttribute( modelImageElement, 'imageStyle' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert style one by one.\n\t\tfor ( const style of filteredStyles ) {\n\t\t\t// Try to consume class corresponding with style.\n\t\t\tif ( conversionApi.consumable.consume( viewFigureElement, { classes: style.className } ) ) {\n\t\t\t\t// And convert this style to model attribute.\n\t\t\t\tconversionApi.writer.setAttribute( 'imageStyle', style.name, modelImageElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Returns the style with a given `name` from an array of styles.\n//\n// @param {String} name\n// @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat> } styles\n// @returns {module:image/imagestyle/imagestyleediting~ImageStyleFormat|undefined}\nfunction getStyleByName( name, styles ) {\n\tfor ( const style of styles ) {\n\t\tif ( style.name === name ) {\n\t\t\treturn style;\n\t\t}\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 4.5V3h16v1.5zm2.5 3V12h11V7.5h-11zM4.061 6H15.94c.586 0 1.061.407 1.061.91v5.68c0 .503-.475.91-1.061.91H4.06c-.585 0-1.06-.407-1.06-.91V6.91C3 6.406 3.475 6 4.061 6zM2 16.5V15h16v1.5z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" clip-rule=\\\"evenodd\\\" stroke-linejoin=\\\"round\\\" stroke-miterlimit=\\\"1.414\\\"><path d=\\\"M18 4.5V3H2v1.5h16zm0 3V6h-5.674v1.5H18zm0 3V9h-5.674v1.5H18zm0 3V12h-5.674v1.5H18zm-8.5-6V12h-6V7.5h6zm.818-1.5H2.682C2.305 6 2 6.407 2 6.91v5.68c0 .503.305.91.682.91h7.636c.377 0 .682-.407.682-.91V6.91c0-.503-.305-.91-.682-.91zM18 16.5V15H2v1.5h16z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 4.5V3h16v1.5zm4.5 3V12h7V7.5h-7zM5.758 6h8.484c.419 0 .758.407.758.91v5.681c0 .502-.34.909-.758.909H5.758c-.419 0-.758-.407-.758-.91V6.91c0-.503.34-.91.758-.91zM2 16.5V15h16v1.5z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 4.5V3h16v1.5zm0 3V6h5.674v1.5zm0 3V9h5.674v1.5zm0 3V12h5.674v1.5zm8.5-6V12h6V7.5h-6zM9.682 6h7.636c.377 0 .682.407.682.91v5.68c0 .503-.305.91-.682.91H9.682c-.377 0-.682-.407-.682-.91V6.91c0-.503.305-.91.682-.91zM2 16.5V15h16v1.5z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/utils\n */\n\n/* globals console */\n\nimport fullWidthIcon from '@ckeditor/ckeditor5-core/theme/icons/object-full-width.svg';\nimport leftIcon from '@ckeditor/ckeditor5-core/theme/icons/object-left.svg';\nimport centerIcon from '@ckeditor/ckeditor5-core/theme/icons/object-center.svg';\nimport rightIcon from '@ckeditor/ckeditor5-core/theme/icons/object-right.svg';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Default image styles provided by the plugin that can be referred in the\n * {@link module:image/image~ImageConfig#styles} configuration.\n *\n * Among them, 2 default semantic content styles are available:\n *\n * * `full` is a full–width image without any CSS class,\n * * `side` is a side image styled with the `image-style-side` CSS class.\n *\n * There are also 3 styles focused on formatting:\n *\n * * `alignLeft` aligns the image to the left using the `image-style-align-left` class,\n * * `alignCenter` centers the image using the `image-style-align-center` class,\n * * `alignRight` aligns the image to the right using the `image-style-align-right` class,\n *\n * @member {Object.<String,Object>}\n */\nconst defaultStyles = {\n\t// This option is equal to the situation when no style is applied.\n\tfull: {\n\t\tname: 'full',\n\t\ttitle: 'Full size image',\n\t\ticon: fullWidthIcon,\n\t\tisDefault: true\n\t},\n\n\t// This represents a side image.\n\tside: {\n\t\tname: 'side',\n\t\ttitle: 'Side image',\n\t\ticon: rightIcon,\n\t\tclassName: 'image-style-side'\n\t},\n\n\t// This style represents an image aligned to the left.\n\talignLeft: {\n\t\tname: 'alignLeft',\n\t\ttitle: 'Left aligned image',\n\t\ticon: leftIcon,\n\t\tclassName: 'image-style-align-left'\n\t},\n\n\t// This style represents a centered image.\n\talignCenter: {\n\t\tname: 'alignCenter',\n\t\ttitle: 'Centered image',\n\t\ticon: centerIcon,\n\t\tclassName: 'image-style-align-center'\n\t},\n\n\t// This style represents an image aligned to the right.\n\talignRight: {\n\t\tname: 'alignRight',\n\t\ttitle: 'Right aligned image',\n\t\ticon: rightIcon,\n\t\tclassName: 'image-style-align-right'\n\t}\n};\n\n/**\n * Default image style icons provided by the plugin that can be referred in the\n * {@link module:image/image~ImageConfig#styles} configuration.\n *\n * There are 4 icons available: `'full'`, `'left'`, `'center'` and `'right'`.\n *\n * @member {Object.<String, String>}\n */\nconst defaultIcons = {\n\tfull: fullWidthIcon,\n\tleft: leftIcon,\n\tright: rightIcon,\n\tcenter: centerIcon\n};\n\n/**\n * Returns a {@link module:image/image~ImageConfig#styles} array with items normalized in the\n * {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat} format and a complete `icon` markup for each style.\n *\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\n */\nexport function normalizeImageStyles( configuredStyles = [] ) {\n\treturn configuredStyles.map( _normalizeStyle );\n}\n\n// Normalizes an image style provided in the {@link module:image/image~ImageConfig#styles}\n// and returns it in a {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}.\n//\n// @param {Object} style\n// @returns {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\nfunction _normalizeStyle( style ) {\n\t// Just the name of the style has been passed.\n\tif ( typeof style == 'string' ) {\n\t\tconst styleName = style;\n\n\t\t// If it's one of the defaults, just use it.\n\t\tif ( defaultStyles[ styleName ] ) {\n\t\t\t// Clone the style to avoid overriding defaults.\n\t\t\tstyle = Object.assign( {}, defaultStyles[ styleName ] );\n\t\t}\n\t\t// If it's just a name but none of the defaults, warn because probably it's a mistake.\n\t\telse {\n\t\t\tconsole.warn(\n\t\t\t\tattachLinkToDocumentation( 'image-style-not-found: There is no such image style of given name.' ),\n\t\t\t\t{ name: styleName }\n\t\t\t);\n\n\t\t\t// Normalize the style anyway to prevent errors.\n\t\t\tstyle = {\n\t\t\t\tname: styleName\n\t\t\t};\n\t\t}\n\t}\n\t// If an object style has been passed and if the name matches one of the defaults,\n\t// extend it with defaults – the user wants to customize a default style.\n\t// Note: Don't override the user–defined style object, clone it instead.\n\telse if ( defaultStyles[ style.name ] ) {\n\t\tconst defaultStyle = defaultStyles[ style.name ];\n\t\tconst extendedStyle = Object.assign( {}, style );\n\n\t\tfor ( const prop in defaultStyle ) {\n\t\t\tif ( !style.hasOwnProperty( prop ) ) {\n\t\t\t\textendedStyle[ prop ] = defaultStyle[ prop ];\n\t\t\t}\n\t\t}\n\n\t\tstyle = extendedStyle;\n\t}\n\n\t// If an icon is defined as a string and correspond with a name\n\t// in default icons, use the default icon provided by the plugin.\n\tif ( typeof style.icon == 'string' && defaultIcons[ style.icon ] ) {\n\t\tstyle.icon = defaultIcons[ style.icon ];\n\t}\n\n\treturn style;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestyleediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageStyleCommand from './imagestylecommand';\nimport { viewToModelStyleAttribute, modelToViewStyleAttribute } from './converters';\nimport { normalizeImageStyles } from './utils';\n\n/**\n * The image style engine plugin. It sets the default configuration, creates converters and registers\n * {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand ImageStyleCommand}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyleEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageStyleEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst data = editor.data;\n\t\tconst editing = editor.editing;\n\n\t\t// Define default configuration.\n\t\teditor.config.define( 'image.styles', [ 'full', 'side' ] );\n\n\t\t// Get configuration.\n\t\tconst styles = normalizeImageStyles( editor.config.get( 'image.styles' ) );\n\n\t\t// Allow imageStyle attribute in image.\n\t\t// We could call it 'style' but https://github.com/ckeditor/ckeditor5-engine/issues/559.\n\t\tschema.extend( 'image', { allowAttributes: 'imageStyle' } );\n\n\t\t// Converters for imageStyle attribute from model to view.\n\t\tconst modelToViewConverter = modelToViewStyleAttribute( styles );\n\t\tediting.downcastDispatcher.on( 'attribute:imageStyle:image', modelToViewConverter );\n\t\tdata.downcastDispatcher.on( 'attribute:imageStyle:image', modelToViewConverter );\n\n\t\t// Converter for figure element from view to model.\n\t\tdata.upcastDispatcher.on( 'element:figure', viewToModelStyleAttribute( styles ), { priority: 'low' } );\n\n\t\t// Register imageStyle command.\n\t\teditor.commands.add( 'imageStyle', new ImageStyleCommand( editor, styles ) );\n\t}\n}\n\n/**\n * The image style format descriptor.\n *\n *\t\timport fullSizeIcon from 'path/to/icon.svg';\n *\n *\t\tconst imageStyleFormat = {\n *\t\t\tname: 'fullSize',\n *\t\t\ticon: fullSizeIcon,\n *\t\t\ttitle: 'Full size image',\n *\t\t\tclassName: 'image-full-size'\n *\t\t}\n *\n * @typedef {Object} module:image/imagestyle/imagestyleediting~ImageStyleFormat\n *\n * @property {String} name The unique name of the style. It will be used to:\n *\n * * Store the chosen style in the model by setting the `imageStyle` attribute of the `<image>` element.\n * * As a value of the {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand#execute `imageStyle` command},\n * * when registering a button for each of the styles (`'imageStyle:{name}'`) in the\n * {@link module:ui/componentfactory~ComponentFactory UI components factory} (this functionality is provided by the\n * {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugin).\n *\n * @property {Boolean} [isDefault] When set, the style will be used as the default one.\n * A default style does not apply any CSS class to the view element.\n *\n * @property {String} icon One of the following to be used when creating the style's button:\n *\n * * An SVG icon source (as an XML string).\n * * One of {@link module:image/imagestyle/utils~defaultIcons} to use a default icon provided by the plugin.\n *\n * @property {String} title The style's title.\n *\n * @property {String} className The CSS class used to represent the style in the view.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagestyle/imagestyleui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport { normalizeImageStyles } from './utils';\nimport '../../theme/imagestyle.css';\n/**\n * The image style UI plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyleUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'ImageStyleUI';\n    }\n    /**\n\t * Returns the default localized style titles provided by the plugin.\n\t *\n\t * The following localized titles corresponding with\n\t * {@link module:image/imagestyle/utils~defaultStyles} are available:\n\t *\n\t * * `'Full size image'`,\n\t * * `'Side image'`,\n\t * * `'Left aligned image'`,\n\t * * `'Centered image'`,\n\t * * `'Right aligned image'`\n\t *\n\t * @returns {Object.<String,String>}\n\t */\n    get localizedDefaultStylesTitles() {\n        const t = this.editor.t;\n        return {\n            'Full size image': t('Full size image'),\n            'Side image': t('Side image'),\n            'Left aligned image': t('Left aligned image'),\n            'Centered image': t('Centered image'),\n            'Right aligned image': t('Right aligned image')\n        };\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const configuredStyles = editor.config.get('image.styles');\n        const translatedStyles = translateStyles(normalizeImageStyles(configuredStyles), this.localizedDefaultStylesTitles);\n        for (const style of translatedStyles) {\n            this._createButton(style);\n        }\n    }\n    /**\n\t * Creates a button for each style and stores it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n\t *\n\t * @private\n\t * @param {module:image/imagestyle/imagestyleediting~ImageStyleFormat} style\n\t */\n    _createButton(style) {\n        const editor = this.editor;\n        const componentName = `imageStyle:${ style.name }`;\n        editor.ui.componentFactory.add(componentName, locale => {\n            const command = editor.commands.get('imageStyle');\n            const view = new ButtonView(locale);\n            view.set({\n                label: style.title,\n                icon: style.icon,\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            view.bind('isOn').to(command, 'value', value => value === style.name);\n            this.listenTo(view, 'execute', () => editor.execute('imageStyle', { value: style.name }));\n            return view;\n        });\n    }\n}\n/**\n * Returns the translated `title` from the passed styles array.\n *\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles\n * @param titles\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\n */\nfunction translateStyles(styles, titles) {\n    for (const style of styles) {\n        // Localize the titles of the styles, if a title corresponds with\n        // a localized default provided by the plugin.\n        if (titles[style.title]) {\n            style.title = titles[style.title];\n        }\n    }\n    return styles;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageStyleEditing from './imagestyle/imagestyleediting';\nimport ImageStyleUI from './imagestyle/imagestyleui';\n\n/**\n * The image style plugin.\n *\n * For a detailed overview, check the {@glink features/image#image-styles image styles} documentation.\n *\n * This is a \"glue\" plugin which loads the {@link module:image/imagestyle/imagestyleediting~ImageStyleEditing}\n * and {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyle extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageStyleEditing, ImageStyleUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageStyle';\n\t}\n}\n\n/**\n * Available image styles.\n *\n * The default value is:\n *\n *\t\tconst imageConfig = {\n *\t\t\tstyles: [ 'full', 'side' ]\n *\t\t};\n *\n * which configures two default styles:\n *\n *  * the \"full\" style which does not apply any class, e.g. for images styled to span 100% width of the content,\n *  * the \"side\" style with the `.image-style-side` CSS class.\n *\n * See {@link module:image/imagestyle/utils~defaultStyles} to learn more about default\n * styles provided by the image feature.\n *\n * The {@link module:image/imagestyle/utils~defaultStyles default styles} can be customized,\n * e.g. to change the icon, title or CSS class of the style. The feature also provides several\n * {@link module:image/imagestyle/utils~defaultIcons default icons} to choose from.\n *\n *\t\timport customIcon from 'custom-icon.svg';\n *\n *\t\t// ...\n *\n *\t\tconst imageConfig = {\n *\t\t\tstyles: [\n *\t\t\t\t// This will only customize the icon of the \"full\" style.\n *\t\t\t\t// Note: 'right' is one of default icons provided by the feature.\n *\t\t\t\t{ name: 'full', icon: 'right' },\n *\n *\t\t\t\t// This will customize the icon, title and CSS class of the default \"side\" style.\n *\t\t\t\t{ name: 'side', icon: customIcon, title: 'My side style', className: 'custom-side-image' }\n *\t\t\t]\n *\t\t};\n *\n * If none of the default styles is good enough, it is possible to define independent custom styles, too:\n *\n *\t\timport fullSizeIcon from '@ckeditor/ckeditor5-core/theme/icons/object-center.svg';\n *\t\timport sideIcon from '@ckeditor/ckeditor5-core/theme/icons/object-right.svg';\n *\n *\t\t// ...\n *\n *\t\tconst imageConfig = {\n *\t\t\tstyles: [\n *\t\t\t\t// A completely custom full size style with no class, used as a default.\n *\t\t\t\t{ name: 'fullSize', title: 'Full size', icon: fullSizeIcon, isDefault: true },\n *\n *\t\t\t\t{ name: 'side', title: 'To the side', icon: sideIcon, className: 'side-image' }\n *\t\t\t]\n *\t\t};\n *\n * Note: Setting `title` to one of {@link module:image/imagestyle/imagestyleui~ImageStyleUI#localizedDefaultStylesTitles}\n * will automatically translate it to the language of the editor.\n *\n * Read more about styling images in the {@glink features/image#image-styles Image styles guide}.\n *\n * The feature creates commands based on defined styles, so you can change the style of a selected image by executing\n * the following command:\n *\n *\t\teditor.execute( 'imageStyle' { value: 'side' } );\n *\n * The feature also creates buttons that execute the commands. So, assuming that you use the\n * default image styles setting, you can {@link module:image/image~ImageConfig#toolbar configure the image toolbar}\n * (or any other toolbar) to contain these options:\n *\n *\t\tconst imageConfig = {\n *\t\t\ttoolbar: [ 'imageStyle:full', 'imageStyle:side' ]\n *\t\t};\n *\n * @member {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} module:image/image~ImageConfig#styles\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module block-quote/blockquotecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The block quote command plugin.\n *\n * @extends module:core/command~Command\n */\nexport default class BlockQuoteCommand extends Command {\n\t/**\n\t * Whether the selection starts in a block quote.\n\t *\n\t * @observable\n\t * @readonly\n\t * @member {Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command. When the command {@link #value is on}, all top-most block quotes within\n\t * the selection will be removed. If it is off, all selected blocks will be wrapped with\n\t * a block quote.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Command options.\n\t * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply a block quote,\n\t * otherwise the command will remove the block quote. If not set, the command will act basing on its current value.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tconst blocks = Array.from( selection.getSelectedBlocks() );\n\n\t\tconst value = ( options.forceValue === undefined ) ? !this.value : options.forceValue;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( !value ) {\n\t\t\t\tthis._removeQuote( writer, blocks.filter( findQuote ) );\n\t\t\t} else {\n\t\t\t\tconst blocksToQuote = blocks.filter( block => {\n\t\t\t\t\t// Already quoted blocks needs to be considered while quoting too\n\t\t\t\t\t// in order to reuse their <bQ> elements.\n\t\t\t\t\treturn findQuote( block ) || checkCanBeQuoted( schema, block );\n\t\t\t\t} );\n\n\t\t\t\tthis._applyQuote( writer, blocksToQuote );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @private\n\t * @returns {Boolean} The current value.\n\t */\n\t_getValue() {\n\t\tconst selection = this.editor.model.document.selection;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\t// In the current implementation, the block quote must be an immediate parent of a block element.\n\t\treturn !!( firstBlock && findQuote( firstBlock ) );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn checkCanBeQuoted( schema, firstBlock );\n\t}\n\n\t/**\n\t * Removes the quote from given blocks.\n\t *\n\t * If blocks which are supposed to be \"unquoted\" are in the middle of a quote,\n\t * start it or end it, then the quote will be split (if needed) and the blocks\n\t * will be moved out of it, so other quoted blocks remained quoted.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer\n\t * @param {Array.<module:engine/model/element~Element>} blocks\n\t */\n\t_removeQuote( writer, blocks ) {\n\t\t// Unquote all groups of block. Iterate in the reverse order to not break following ranges.\n\t\tgetRangesOfBlockGroups( writer, blocks ).reverse().forEach( groupRange => {\n\t\t\tif ( groupRange.start.isAtStart && groupRange.end.isAtEnd ) {\n\t\t\t\twriter.unwrap( groupRange.start.parent );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The group of blocks are at the beginning of an <bQ> so let's move them left (out of the <bQ>).\n\t\t\tif ( groupRange.start.isAtStart ) {\n\t\t\t\tconst positionBefore = writer.createPositionBefore( groupRange.start.parent );\n\n\t\t\t\twriter.move( groupRange, positionBefore );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The blocks are in the middle of an <bQ> so we need to split the <bQ> after the last block\n\t\t\t// so we move the items there.\n\t\t\tif ( !groupRange.end.isAtEnd ) {\n\t\t\t\twriter.split( groupRange.end );\n\t\t\t}\n\n\t\t\t// Now we are sure that groupRange.end.isAtEnd is true, so let's move the blocks right.\n\n\t\t\tconst positionAfter = writer.createPositionAfter( groupRange.end.parent );\n\n\t\t\twriter.move( groupRange, positionAfter );\n\t\t} );\n\t}\n\n\t/**\n\t * Applies the quote to given blocks.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer\n\t * @param {Array.<module:engine/model/element~Element>} blocks\n\t */\n\t_applyQuote( writer, blocks ) {\n\t\tconst quotesToMerge = [];\n\n\t\t// Quote all groups of block. Iterate in the reverse order to not break following ranges.\n\t\tgetRangesOfBlockGroups( writer, blocks ).reverse().forEach( groupRange => {\n\t\t\tlet quote = findQuote( groupRange.start );\n\n\t\t\tif ( !quote ) {\n\t\t\t\tquote = writer.createElement( 'blockQuote' );\n\n\t\t\t\twriter.wrap( groupRange, quote );\n\t\t\t}\n\n\t\t\tquotesToMerge.push( quote );\n\t\t} );\n\n\t\t// Merge subsequent <bQ> elements. Reverse the order again because this time we want to go through\n\t\t// the <bQ> elements in the source order (due to how merge works – it moves the right element's content\n\t\t// to the first element and removes the right one. Since we may need to merge a couple of subsequent `<bQ>` elements\n\t\t// we want to keep the reference to the first (furthest left) one.\n\t\tquotesToMerge.reverse().reduce( ( currentQuote, nextQuote ) => {\n\t\t\tif ( currentQuote.nextSibling == nextQuote ) {\n\t\t\t\twriter.merge( writer.createPositionAfter( currentQuote ) );\n\n\t\t\t\treturn currentQuote;\n\t\t\t}\n\n\t\t\treturn nextQuote;\n\t\t} );\n\t}\n}\n\nfunction findQuote( elementOrPosition ) {\n\treturn elementOrPosition.parent.name == 'blockQuote' ? elementOrPosition.parent : null;\n}\n\n// Returns a minimal array of ranges containing groups of subsequent blocks.\n//\n// content:         abcdefgh\n// blocks:          [ a, b, d, f, g, h ]\n// output ranges:   [ab]c[d]e[fgh]\n//\n// @param {Array.<module:engine/model/element~Element>} blocks\n// @returns {Array.<module:engine/model/range~Range>}\nfunction getRangesOfBlockGroups( writer, blocks ) {\n\tlet startPosition;\n\tlet i = 0;\n\tconst ranges = [];\n\n\twhile ( i < blocks.length ) {\n\t\tconst block = blocks[ i ];\n\t\tconst nextBlock = blocks[ i + 1 ];\n\n\t\tif ( !startPosition ) {\n\t\t\tstartPosition = writer.createPositionBefore( block );\n\t\t}\n\n\t\tif ( !nextBlock || block.nextSibling != nextBlock ) {\n\t\t\tranges.push( writer.createRange( startPosition, writer.createPositionAfter( block ) ) );\n\t\t\tstartPosition = null;\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn ranges;\n}\n\n// Checks whether <bQ> can wrap the block.\nfunction checkCanBeQuoted( schema, block ) {\n\t// TMP will be replaced with schema.checkWrap().\n\tconst isBQAllowed = schema.checkChild( block.parent, 'blockQuote' );\n\tconst isBlockAllowedInBQ = schema.checkChild( [ '$root', 'blockQuote' ], block );\n\n\treturn isBQAllowed && isBlockAllowedInBQ;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module block-quote/blockquoteediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport BlockQuoteCommand from './blockquotecommand';\n\n/**\n * The block quote editing.\n *\n * Introduces the `'blockQuote'` command and the `'blockQuote'` model element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuoteEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'BlockQuoteEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\n\t\teditor.commands.add( 'blockQuote', new BlockQuoteCommand( editor ) );\n\n\t\tschema.register( 'blockQuote', {\n\t\t\tallowWhere: '$block',\n\t\t\tallowContentOf: '$root'\n\t\t} );\n\n\t\t// Disallow blockQuote in blockQuote.\n\t\tschema.addChildCheck( ( ctx, childDef ) => {\n\t\t\tif ( ctx.endsWith( 'blockQuote' ) && childDef.name == 'blockQuote' ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\teditor.conversion.elementToElement( { model: 'blockQuote', view: 'blockquote' } );\n\n\t\t// Postfixer which cleans incorrect model states connected with block quotes.\n\t\teditor.model.document.registerPostFixer( writer => {\n\t\t\tconst changes = editor.model.document.differ.getChanges();\n\n\t\t\tfor ( const entry of changes ) {\n\t\t\t\tif ( entry.type == 'insert' ) {\n\t\t\t\t\tconst element = entry.position.nodeAfter;\n\n\t\t\t\t\tif ( !element ) {\n\t\t\t\t\t\t// We are inside a text node.\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( element.is( 'blockQuote' ) && element.isEmpty ) {\n\t\t\t\t\t\t// Added an empty blockQuote - remove it.\n\t\t\t\t\t\twriter.remove( element );\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if ( element.is( 'blockQuote' ) && !schema.checkChild( entry.position, element ) ) {\n\t\t\t\t\t\t// Added a blockQuote in incorrect place - most likely inside another blockQuote. Unwrap it\n\t\t\t\t\t\t// so the content inside is not lost.\n\t\t\t\t\t\twriter.unwrap( element );\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if ( element.is( 'element' ) ) {\n\t\t\t\t\t\t// Just added an element. Check its children to see if there are no nested blockQuotes somewhere inside.\n\t\t\t\t\t\tconst range = writer.createRangeIn( element );\n\n\t\t\t\t\t\tfor ( const child of range.getItems() ) {\n\t\t\t\t\t\t\tif ( child.is( 'blockQuote' ) && !schema.checkChild( writer.createPositionBefore( child ), child ) ) {\n\t\t\t\t\t\t\t\twriter.unwrap( child );\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( entry.type == 'remove' ) {\n\t\t\t\t\tconst parent = entry.position.parent;\n\n\t\t\t\t\tif ( parent.is( 'blockQuote' ) && parent.isEmpty ) {\n\t\t\t\t\t\t// Something got removed and now blockQuote is empty. Remove the blockQuote as well.\n\t\t\t\t\t\twriter.remove( parent );\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst editor = this.editor;\n\t\tconst command = editor.commands.get( 'blockQuote' );\n\n\t\t// Overwrite default Enter key behavior.\n\t\t// If Enter key is pressed with selection collapsed in empty block inside a quote, break the quote.\n\t\t// This listener is added in afterInit in order to register it after list's feature listener.\n\t\t// We can't use a priority for this, because 'low' is already used by the enter feature, unless\n\t\t// we'd use numeric priority in this case.\n\t\tthis.listenTo( this.editor.editing.view.document, 'enter', ( evt, data ) => {\n\t\t\tconst doc = this.editor.model.document;\n\t\t\tconst positionParent = doc.selection.getLastPosition().parent;\n\n\t\t\tif ( doc.selection.isCollapsed && positionParent.isEmpty && command.value ) {\n\t\t\t\tthis.editor.execute( 'blockQuote' );\n\t\t\t\tthis.editor.editing.view.scrollToTheSelection();\n\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67C6.448 5.423 5.354 7.663 5.22 10H9c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574zm8 0a6.5 6.5 0 0 1 6.056-6.408l.038.67c-2.646.739-3.74 2.979-3.873 5.315H17c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module block-quote/blockquoteui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport quoteIcon from '@ckeditor/ckeditor5-core/theme/icons/quote.svg';\nimport '../theme/blockquote.css';\n/**\n * The block quote UI plugin.\n *\n * It introduces the `'blockQuote'` button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuoteUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('blockQuote', locale => {\n            const command = editor.commands.get('blockQuote');\n            const buttonView = new ButtonView(locale);\n            buttonView.set({\n                label: t('Block quote'),\n                icon: quoteIcon,\n                tooltip: true,\n                isToggleable: true\n            });\n            // Bind button model to command.\n            buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(buttonView, 'execute', () => editor.execute('blockQuote'));\n            return buttonView;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module block-quote/blockquote\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BlockQuoteEditing from './blockquoteediting';\nimport BlockQuoteUI from './blockquoteui';\n\n/**\n * The block quote plugin.\n *\n * For more information about this feature check the {@glink api/block-quote package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:block-quote/blockquoteediting~BlockQuoteEditing block quote editing feature}\n * and {@link module:block-quote/blockquoteui~BlockQuoteUI block quote UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuote extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ BlockQuoteEditing, BlockQuoteUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'BlockQuote';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption/utils\n */\n\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/src/view/placeholder';\nimport { toWidgetEditable } from '@ckeditor/ckeditor5-widget/src/utils';\n\n/**\n * Returns a function that creates a caption editable element for the given {@link module:engine/view/document~Document}.\n *\n * @param {module:engine/view/view~View} view\n * @param {String} placeholderText The text to be displayed when the caption is empty.\n * @returns {Function}\n */\nexport function captionElementCreator( view, placeholderText ) {\n\treturn writer => {\n\t\tconst editable = writer.createEditableElement( 'figcaption' );\n\t\twriter.setCustomProperty( 'imageCaption', true, editable );\n\n\t\tenablePlaceholder( {\n\t\t\tview,\n\t\t\telement: editable,\n\t\t\ttext: placeholderText\n\t\t} );\n\n\t\treturn toWidgetEditable( editable, writer );\n\t};\n}\n\n/**\n * Returns `true` if a given view element is the image caption editable.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\nexport function isCaption( viewElement ) {\n\treturn !!viewElement.getCustomProperty( 'imageCaption' );\n}\n\n/**\n * Returns the caption model element from a given image element. Returns `null` if no caption is found.\n *\n * @param {module:engine/model/element~Element} imageModelElement\n * @returns {module:engine/model/element~Element|null}\n */\nexport function getCaptionFromImage( imageModelElement ) {\n\tfor ( const node of imageModelElement.getChildren() ) {\n\t\tif ( !!node && node.is( 'caption' ) ) {\n\t\t\treturn node;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a `<figcaption>` element that is placed\n * inside the image `<figure>` element.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {Object|null} Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element\n * cannot be matched.\n */\nexport function matchImageCaption( element ) {\n\tconst parent = element.parent;\n\n\t// Convert only captions for images.\n\tif ( element.name == 'figcaption' && parent && parent.name == 'figure' && parent.hasClass( 'image' ) ) {\n\t\treturn { name: true };\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagecaption/imagecaptionediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { isImage } from '../image/utils';\nimport {\n    captionElementCreator,\n    getCaptionFromImage,\n    matchImageCaption\n} from './utils';\n/**\n * The image caption engine plugin.\n *\n * It registers proper converters. It takes care of adding a caption element if the image without it is inserted\n * to the model document.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageCaptionEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'ImageCaptionEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const schema = editor.model.schema;\n        const data = editor.data;\n        const editing = editor.editing;\n        const t = editor.t;\n        /**\n\t\t * The last selected caption editable.\n\t\t * It is used for hiding the editable when it is empty and the image widget is no longer selected.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/editableelement~EditableElement} #_lastSelectedCaption\n\t\t */\n        // Schema configuration.\n        schema.register('caption', {\n            allowIn: 'image',\n            allowContentOf: '$block',\n            isLimit: true\n        });\n        // Add caption element to each image inserted without it.\n        editor.model.document.registerPostFixer(writer => this._insertMissingModelCaptionElement(writer));\n        // View to model converter for the data pipeline.\n        editor.conversion.for('upcast').elementToElement({\n            view: matchImageCaption,\n            model: 'caption'\n        });\n        // Model to view converter for the data pipeline.\n        const createCaptionForData = writer => writer.createContainerElement('figcaption');\n        data.downcastDispatcher.on('insert:caption', captionModelToView(createCaptionForData, false));\n        // Model to view converter for the editing pipeline.\n        const createCaptionForEditing = captionElementCreator(view, t('Enter image caption'));\n        editing.downcastDispatcher.on('insert:caption', captionModelToView(createCaptionForEditing));\n        // Always show caption in view when something is inserted in model.\n        editing.downcastDispatcher.on('insert', this._fixCaptionVisibility(data => data.item), { priority: 'high' });\n        // Hide caption when everything is removed from it.\n        editing.downcastDispatcher.on('remove', this._fixCaptionVisibility(data => data.position.parent), { priority: 'high' });\n        // Update caption visibility on view in post fixer.\n        view.document.registerPostFixer(writer => this._updateCaptionVisibility(writer));\n    }\n    /**\n\t * Updates the view before each rendering, making sure that empty captions (so unnecessary ones) are hidden\n\t * and then visible when the image is selected.\n\t *\n\t * @private\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n\t * @returns {Boolean} Returns `true` when the view is updated.\n\t */\n    _updateCaptionVisibility(viewWriter) {\n        const mapper = this.editor.editing.mapper;\n        const lastCaption = this._lastSelectedCaption;\n        let viewCaption;\n        // If whole image is selected.\n        const modelSelection = this.editor.model.document.selection;\n        const selectedElement = modelSelection.getSelectedElement();\n        if (selectedElement && selectedElement.is('image')) {\n            const modelCaption = getCaptionFromImage(selectedElement);\n            viewCaption = mapper.toViewElement(modelCaption);\n        }\n        // If selection is placed inside caption.\n        const position = modelSelection.getFirstPosition();\n        const modelCaption = getParentCaption(position.parent);\n        if (modelCaption) {\n            viewCaption = mapper.toViewElement(modelCaption);\n        }\n        // Is currently any caption selected?\n        if (viewCaption) {\n            // Was any caption selected before?\n            if (lastCaption) {\n                // Same caption as before?\n                if (lastCaption === viewCaption) {\n                    return showCaption(viewCaption, viewWriter);\n                } else {\n                    hideCaptionIfEmpty(lastCaption, viewWriter);\n                    this._lastSelectedCaption = viewCaption;\n                    return showCaption(viewCaption, viewWriter);\n                }\n            } else {\n                this._lastSelectedCaption = viewCaption;\n                return showCaption(viewCaption, viewWriter);\n            }\n        } else {\n            // Was any caption selected before?\n            if (lastCaption) {\n                const viewModified = hideCaptionIfEmpty(lastCaption, viewWriter);\n                this._lastSelectedCaption = null;\n                return viewModified;\n            } else {\n                return false;\n            }\n        }\n    }\n    /**\n\t * Returns a converter that fixes caption visibility during the model-to-view conversion.\n\t * Checks if the changed node is placed inside the caption element and fixes its visibility in the view.\n\t *\n\t * @private\n\t * @param {Function} nodeFinder\n\t * @returns {Function}\n\t */\n    _fixCaptionVisibility(nodeFinder) {\n        return (evt, data, conversionApi) => {\n            const node = nodeFinder(data);\n            const modelCaption = getParentCaption(node);\n            const mapper = this.editor.editing.mapper;\n            const viewWriter = conversionApi.writer;\n            if (modelCaption) {\n                const viewCaption = mapper.toViewElement(modelCaption);\n                if (viewCaption) {\n                    if (modelCaption.childCount) {\n                        viewWriter.removeClass('ck-hidden', viewCaption);\n                    } else {\n                        viewWriter.addClass('ck-hidden', viewCaption);\n                    }\n                }\n            }\n        };\n    }\n    /**\n\t * Checks whether the data inserted to the model document have an image element that has no caption element inside it.\n\t * If there is none, it adds it to the image element.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer The writer to make changes with.\n\t * @returns {Boolean} `true` if any change was applied, `false` otherwise.\n\t */\n    _insertMissingModelCaptionElement(writer) {\n        const model = this.editor.model;\n        const changes = model.document.differ.getChanges();\n        const imagesWithoutCaption = [];\n        for (const entry of changes) {\n            if (entry.type == 'insert' && entry.name != '$text') {\n                const item = entry.position.nodeAfter;\n                if (item.is('image') && !getCaptionFromImage(item)) {\n                    imagesWithoutCaption.push(item);\n                }\n                // Check elements with children for nested images.\n                if (!item.is('image') && item.childCount) {\n                    for (const nestedItem of model.createRangeIn(item).getItems()) {\n                        if (nestedItem.is('image') && !getCaptionFromImage(nestedItem)) {\n                            imagesWithoutCaption.push(nestedItem);\n                        }\n                    }\n                }\n            }\n        }\n        for (const image of imagesWithoutCaption) {\n            writer.appendElement('caption', image);\n        }\n        return !!imagesWithoutCaption.length;\n    }\n}\n// Creates a converter that converts image caption model element to view element.\n//\n// @private\n// @param {Function} elementCreator\n// @param {Boolean} [hide=true] When set to `false` view element will not be inserted when it's empty.\n// @returns {Function}\nfunction captionModelToView(elementCreator, hide = true) {\n    return (evt, data, conversionApi) => {\n        const captionElement = data.item;\n        // Return if element shouldn't be present when empty.\n        if (!captionElement.childCount && !hide) {\n            return;\n        }\n        if (isImage(captionElement.parent)) {\n            if (!conversionApi.consumable.consume(data.item, 'insert')) {\n                return;\n            }\n            const viewImage = conversionApi.mapper.toViewElement(data.range.start.parent);\n            const viewCaption = elementCreator(conversionApi.writer);\n            const viewWriter = conversionApi.writer;\n            // Hide if empty.\n            if (!captionElement.childCount) {\n                viewWriter.addClass('ck-hidden', viewCaption);\n            }\n            insertViewCaptionAndBind(viewCaption, data.item, viewImage, conversionApi);\n        }\n    };\n}\n// Inserts `viewCaption` at the end of `viewImage` and binds it to `modelCaption`.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} viewCaption\n// @param {module:engine/model/element~Element} modelCaption\n// @param {module:engine/view/containerelement~ContainerElement} viewImage\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\nfunction insertViewCaptionAndBind(viewCaption, modelCaption, viewImage, conversionApi) {\n    const viewPosition = conversionApi.writer.createPositionAt(viewImage, 'end');\n    conversionApi.writer.insert(viewPosition, viewCaption);\n    conversionApi.mapper.bindElements(modelCaption, viewCaption);\n}\n// Checks if the provided node or one of its ancestors is a caption element, and returns it.\n//\n// @private\n// @param {module:engine/model/node~Node} node\n// @returns {module:engine/model/element~Element|null}\nfunction getParentCaption(node) {\n    const ancestors = node.getAncestors({ includeSelf: true });\n    const caption = ancestors.find(ancestor => ancestor.name == 'caption');\n    if (caption && caption.parent && caption.parent.name == 'image') {\n        return caption;\n    }\n    return null;\n}\n// Hides a given caption in the view if it is empty.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} caption\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @returns {Boolean} Returns `true` if the view was modified.\nfunction hideCaptionIfEmpty(caption, viewWriter) {\n    if (!caption.childCount && !caption.hasClass('ck-hidden')) {\n        viewWriter.addClass('ck-hidden', caption);\n        return true;\n    }\n    return false;\n}\n// Shows the caption.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} caption\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @returns {Boolean} Returns `true` if the view was modified.\nfunction showCaption(caption, viewWriter) {\n    if (caption.hasClass('ck-hidden')) {\n        viewWriter.removeClass('ck-hidden', caption);\n        return true;\n    }\n    return false;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageCaptionEditing from './imagecaption/imagecaptionediting';\n\nimport '../theme/imagecaption.css';\n\n/**\n * The image caption plugin.\n *\n * For a detailed overview, check the {@glink features/image#image-captions image caption} documentation.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageCaption extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageCaptionEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageCaption';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n// The editor creator to use.\nimport ClassicEditorBase from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\n\nimport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\nimport UploadAdapter from '@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter';\nimport Autoformat from '@ckeditor/ckeditor5-autoformat/src/autoformat';\nimport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\nimport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\nimport BlockQuote from '@ckeditor/ckeditor5-block-quote/src/blockquote';\nimport CKFinder from '@ckeditor/ckeditor5-ckfinder/src/ckfinder';\nimport EasyImage from '@ckeditor/ckeditor5-easy-image/src/easyimage';\nimport Heading from '@ckeditor/ckeditor5-heading/src/heading';\nimport Image from '@ckeditor/ckeditor5-image/src/image';\nimport ImageCaption from '@ckeditor/ckeditor5-image/src/imagecaption';\nimport ImageStyle from '@ckeditor/ckeditor5-image/src/imagestyle';\nimport ImageToolbar from '@ckeditor/ckeditor5-image/src/imagetoolbar';\nimport ImageUpload from '@ckeditor/ckeditor5-image/src/imageupload';\nimport Indent from '@ckeditor/ckeditor5-indent/src/indent';\nimport Link from '@ckeditor/ckeditor5-link/src/link';\nimport List from '@ckeditor/ckeditor5-list/src/list';\nimport MediaEmbed from '@ckeditor/ckeditor5-media-embed/src/mediaembed';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\nimport PasteFromOffice from '@ckeditor/ckeditor5-paste-from-office/src/pastefromoffice';\nimport Table from '@ckeditor/ckeditor5-table/src/table';\nimport TableToolbar from '@ckeditor/ckeditor5-table/src/tabletoolbar';\n\nexport default class ClassicEditor extends ClassicEditorBase {}\n\n// Plugins to include in the build.\nClassicEditor.builtinPlugins = [\n\tEssentials,\n\tUploadAdapter,\n\tAutoformat,\n\tBold,\n\tItalic,\n\tBlockQuote,\n\tCKFinder,\n\tEasyImage,\n\tHeading,\n\tImage,\n\tImageCaption,\n\tImageStyle,\n\tImageToolbar,\n\tImageUpload,\n\tIndent,\n\tLink,\n\tList,\n\tMediaEmbed,\n\tParagraph,\n\tPasteFromOffice,\n\tTable,\n\tTableToolbar\n];\n\n// Editor configuration.\nClassicEditor.defaultConfig = {\n\ttoolbar: {\n\t\titems: [\n\t\t\t'heading',\n\t\t\t'|',\n\t\t\t'bold',\n\t\t\t'italic',\n\t\t\t'link',\n\t\t\t'bulletedList',\n\t\t\t'numberedList',\n\t\t\t'|',\n\t\t\t'indent',\n\t\t\t'outdent',\n\t\t\t'|',\n\t\t\t'imageUpload',\n\t\t\t'blockQuote',\n\t\t\t'insertTable',\n\t\t\t'mediaEmbed',\n\t\t\t'undo',\n\t\t\t'redo'\n\t\t]\n\t},\n\timage: {\n\t\ttoolbar: [\n\t\t\t'imageStyle:full',\n\t\t\t'imageStyle:side',\n\t\t\t'|',\n\t\t\t'imageTextAlternative'\n\t\t]\n\t},\n\ttable: {\n\t\tcontentToolbar: [\n\t\t\t'tableColumn',\n\t\t\t'tableRow',\n\t\t\t'mergeTableCells'\n\t\t]\n\t},\n\t// This value must be kept in sync with the language defined in webpack.config.js.\n\tlanguage: 'en'\n};\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/blockautoformatediting\n */\n\nimport LiveRange from '@ckeditor/ckeditor5-engine/src/model/liverange';\n\n/**\n * The block autoformatting engine. It allows to format various block patterns. For example,\n * it can be configured to turn a paragraph starting with `*` and followed by a space into a list item.\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n */\nexport default class BlockAutoformatEditing {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'BlockAutoformatEditing';\n\t}\n\n\t/**\n\t * Creates a listener triggered on `change` event in the document.\n\t * Calls the callback when inserted text matches the regular expression or the command name\n\t * if provided instead of the callback.\n\t *\n\t * Examples of usage:\n\t *\n\t * To convert a paragraph to heading 1 when `- ` is typed, using just the command name:\n\t *\n\t *\t\tnew BlockAutoformatEditing( editor, /^\\- $/, 'heading1' );\n\t *\n\t * To convert a paragraph to heading 1 when `- ` is typed, using just the callback:\n\t *\n\t *\t\tnew BlockAutoformatEditing( editor, /^\\- $/, ( context ) => {\n\t *\t\t\tconst { match } = context;\n\t *\t\t\tconst headingLevel = match[ 1 ].length;\n\t *\n\t *\t\t\teditor.execute( 'heading', {\n\t *\t\t\t\tformatId: `heading${ headingLevel }`\n\t *\t\t\t} );\n\t * \t\t} );\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {RegExp} pattern The regular expression to execute on just inserted text.\n\t * @param {Function|String} callbackOrCommand The callback to execute or the command to run when the text is matched.\n\t * In case of providing the callback, it receives the following parameter:\n\t * * {Object} match RegExp.exec() result of matching the pattern to inserted text.\n\t */\n\tconstructor( editor, pattern, callbackOrCommand ) {\n\t\tlet callback;\n\t\tlet command = null;\n\n\t\tif ( typeof callbackOrCommand == 'function' ) {\n\t\t\tcallback = callbackOrCommand;\n\t\t} else {\n\t\t\t// We assume that the actual command name was provided.\n\t\t\tcommand = editor.commands.get( callbackOrCommand );\n\n\t\t\tcallback = () => {\n\t\t\t\teditor.execute( callbackOrCommand );\n\t\t\t};\n\t\t}\n\n\t\teditor.model.document.on( 'change', ( evt, batch ) => {\n\t\t\tif ( command && !command.isEnabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( batch.type == 'transparent' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst changes = Array.from( editor.model.document.differ.getChanges() );\n\t\t\tconst entry = changes[ 0 ];\n\n\t\t\t// Typing is represented by only a single change.\n\t\t\tif ( changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst item = entry.position.textNode || entry.position.nodeAfter;\n\n\t\t\tif ( !item.parent.is( 'paragraph' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst match = pattern.exec( item.data );\n\n\t\t\tif ( !match ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n\t\t\teditor.model.enqueueChange( writer => {\n\t\t\t\t// Matched range.\n\t\t\t\tconst start = writer.createPositionAt( item.parent, 0 );\n\t\t\t\tconst end = writer.createPositionAt( item.parent, match[ 0 ].length );\n\t\t\t\tconst range = new LiveRange( start, end );\n\n\t\t\t\tconst wasChanged = callback( { match } );\n\n\t\t\t\t// Remove matched text.\n\t\t\t\tif ( wasChanged !== false ) {\n\t\t\t\t\twriter.remove( range );\n\t\t\t\t}\n\n\t\t\t\trange.detach();\n\t\t\t} );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/inlineautoformatediting\n */\n\nimport getLastTextLine from '@ckeditor/ckeditor5-typing/src/utils/getlasttextline';\n\n/**\n * The inline autoformatting engine. It allows to format various inline patterns. For example,\n * it can be configured to make \"foo\" bold when typed `**foo**` (the `**` markers will be removed).\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n */\nexport default class InlineAutoformatEditing {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'InlineAutoformatEditing';\n\t}\n\n\t/**\n\t * Enables autoformatting mechanism for a given {@link module:core/editor/editor~Editor}.\n\t *\n\t * It formats the matched text by applying the given model attribute or by running the provided formatting callback.\n\t * On every change applied to the model the autoformatting engine checks the text on the left of the selection\n\t * and executes the provided action if the text matches given criteria (regular expression or callback).\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {Function|RegExp} testRegexpOrCallback The regular expression or callback to execute on text.\n\t * Provided regular expression *must* have three capture groups. The first and the third capture group\n\t * should match opening and closing delimiters. The second capture group should match the text to format.\n\t *\n\t *\t\t// Matches the `**bold text**` pattern.\n\t *\t\t// There are three capturing groups:\n\t *\t\t// - The first to match the starting `**` delimiter.\n\t *\t\t// - The second to match the text to format.\n\t *\t\t// - The third to match the ending `**` delimiter.\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, 'bold' );\n\t *\n\t * When a function is provided instead of the regular expression, it will be executed with the text to match as a parameter.\n\t * The function should return proper \"ranges\" to delete and format.\n\t *\n\t *\t\t{\n\t *\t\t\tremove: [\n\t *\t\t\t\t[ 0, 1 ],\t// Remove the first letter from the given text.\n\t *\t\t\t\t[ 5, 6 ]\t// Remove the 6th letter from the given text.\n\t *\t\t\t],\n\t *\t\t\tformat: [\n\t *\t\t\t\t[ 1, 5 ]\t// Format all letters from 2nd to 5th.\n\t *\t\t\t]\n\t *\t\t}\n\t *\n\t * @param {Function|String} attributeOrCallback The name of attribute to apply on matching text or a callback for manual\n\t * formatting. If callback is passed it should return `false` if changes should not be applied (e.g. if a command is disabled).\n\t *\n\t *\t\t// Use attribute name:\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, 'bold' );\n\t *\n\t *\t\t// Use formatting callback:\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, ( writer, rangesToFormat ) => {\n\t *\t\t\tconst command = editor.commands.get( 'bold' );\n\t *\n\t *\t\t\tif ( !command.isEnabled ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\n\t *\t\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, 'bold' );\n\t *\n\t *\t\t\tfor ( let range of validRanges ) {\n\t *\t\t\t\twriter.setAttribute( 'bold', true, range );\n\t *\t\t\t}\n\t *\t\t} );\n\t */\n\tconstructor( editor, testRegexpOrCallback, attributeOrCallback ) {\n\t\tlet regExp;\n\t\tlet attributeKey;\n\t\tlet testCallback;\n\t\tlet formatCallback;\n\n\t\tif ( testRegexpOrCallback instanceof RegExp ) {\n\t\t\tregExp = testRegexpOrCallback;\n\t\t} else {\n\t\t\ttestCallback = testRegexpOrCallback;\n\t\t}\n\n\t\tif ( typeof attributeOrCallback == 'string' ) {\n\t\t\tattributeKey = attributeOrCallback;\n\t\t} else {\n\t\t\tformatCallback = attributeOrCallback;\n\t\t}\n\n\t\t// A test callback run on changed text.\n\t\ttestCallback = testCallback || ( text => {\n\t\t\tlet result;\n\t\t\tconst remove = [];\n\t\t\tconst format = [];\n\n\t\t\twhile ( ( result = regExp.exec( text ) ) !== null ) {\n\t\t\t\t// There should be full match and 3 capture groups.\n\t\t\t\tif ( result && result.length < 4 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet {\n\t\t\t\t\tindex,\n\t\t\t\t\t'1': leftDel,\n\t\t\t\t\t'2': content,\n\t\t\t\t\t'3': rightDel\n\t\t\t\t} = result;\n\n\t\t\t\t// Real matched string - there might be some non-capturing groups so we need to recalculate starting index.\n\t\t\t\tconst found = leftDel + content + rightDel;\n\t\t\t\tindex += result[ 0 ].length - found.length;\n\n\t\t\t\t// Start and End offsets of delimiters to remove.\n\t\t\t\tconst delStart = [\n\t\t\t\t\tindex,\n\t\t\t\t\tindex + leftDel.length\n\t\t\t\t];\n\t\t\t\tconst delEnd = [\n\t\t\t\t\tindex + leftDel.length + content.length,\n\t\t\t\t\tindex + leftDel.length + content.length + rightDel.length\n\t\t\t\t];\n\n\t\t\t\tremove.push( delStart );\n\t\t\t\tremove.push( delEnd );\n\n\t\t\t\tformat.push( [ index + leftDel.length, index + leftDel.length + content.length ] );\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tremove,\n\t\t\t\tformat\n\t\t\t};\n\t\t} );\n\n\t\t// A format callback run on matched text.\n\t\tformatCallback = formatCallback || ( ( writer, rangesToFormat ) => {\n\t\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, attributeKey );\n\n\t\t\tfor ( const range of validRanges ) {\n\t\t\t\twriter.setAttribute( attributeKey, true, range );\n\t\t\t}\n\n\t\t\t// After applying attribute to the text, remove given attribute from the selection.\n\t\t\t// This way user is able to type a text without attribute used by auto formatter.\n\t\t\twriter.removeSelectionAttribute( attributeKey );\n\t\t} );\n\n\t\teditor.model.document.on( 'change', ( evt, batch ) => {\n\t\t\tif ( batch.type == 'transparent' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst model = editor.model;\n\t\t\tconst selection = model.document.selection;\n\n\t\t\t// Do nothing if selection is not collapsed.\n\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst changes = Array.from( model.document.differ.getChanges() );\n\t\t\tconst entry = changes[ 0 ];\n\n\t\t\t// Typing is represented by only a single change.\n\t\t\tif ( changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst focus = selection.focus;\n\t\t\tconst block = focus.parent;\n\t\t\tconst { text, range } = getLastTextLine( model.createRange( model.createPositionAt( block, 0 ), focus ), model );\n\t\t\tconst testOutput = testCallback( text );\n\t\t\tconst rangesToFormat = testOutputToRanges( range.start, testOutput.format, model );\n\t\t\tconst rangesToRemove = testOutputToRanges( range.start, testOutput.remove, model );\n\n\t\t\tif ( !( rangesToFormat.length && rangesToRemove.length ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n\t\t\tmodel.enqueueChange( writer => {\n\t\t\t\t// Apply format.\n\t\t\t\tconst hasChanged = formatCallback( writer, rangesToFormat );\n\n\t\t\t\t// Strict check on `false` to have backward compatibility (when callbacks were returning `undefined`).\n\t\t\t\tif ( hasChanged === false ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Remove delimiters - use reversed order to not mix the offsets while removing.\n\t\t\t\tfor ( const range of rangesToRemove.reverse() ) {\n\t\t\t\t\twriter.remove( range );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n}\n\n// Converts output of the test function provided to the InlineAutoformatEditing and converts it to the model ranges\n// inside provided block.\n//\n// @private\n// @param {module:engine/model/position~Position} start\n// @param {Array.<Array>} arrays\n// @param {module:engine/model/model~Model} model\nfunction testOutputToRanges( start, arrays, model ) {\n\treturn arrays\n\t\t.filter( array => ( array[ 0 ] !== undefined && array[ 1 ] !== undefined ) )\n\t\t.map( array => {\n\t\t\treturn model.createRange( start.getShiftedBy( array[ 0 ] ), start.getShiftedBy( array[ 1 ] ) );\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/autoformat\n */\n\nimport BlockAutoformatEditing from './blockautoformatediting';\nimport InlineAutoformatEditing from './inlineautoformatediting';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * Enables a set of predefined autoformatting actions.\n *\n * For a detailed overview, check the {@glink features/autoformat Autoformatting feature documentation}\n * and the {@glink api/autoformat package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Autoformat extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Autoformat';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tthis._addListAutoformats();\n\t\tthis._addBasicStylesAutoformats();\n\t\tthis._addHeadingAutoformats();\n\t\tthis._addBlockQuoteAutoformats();\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:list/list~List}.\n\t *\n\t * When typed:\n\t * - `* ` or `- ` &ndash; A paragraph will be changed to a bulleted list.\n\t * - `1. ` or `1) ` &ndash; A paragraph will be changed to a numbered list (\"1\" can be any digit or a list of digits).\n\t *\n\t * @private\n\t */\n\t_addListAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bulletedList' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^[*-]\\s$/, 'bulletedList' );\n\t\t}\n\n\t\tif ( commands.get( 'numberedList' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^1[.|)]\\s$/, 'numberedList' );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\n\t * {@link module:basic-styles/italic~Italic} and {@link module:basic-styles/code~Code}.\n\t *\n\t * When typed:\n\t * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\n\t * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\n\t * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\n\t * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\n\t * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code.\n\t *\n\t * @private\n\t */\n\t_addBasicStylesAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bold' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tconst boldCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'bold' );\n\n\t\t\tnew InlineAutoformatEditing( this.editor, /(\\*\\*)([^*]+)(\\*\\*)$/g, boldCallback );\n\t\t\tnew InlineAutoformatEditing( this.editor, /(__)([^_]+)(__)$/g, boldCallback );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\n\t\tif ( commands.get( 'italic' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tconst italicCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'italic' );\n\n\t\t\t// The italic autoformatter cannot be triggered by the bold markers, so we need to check the\n\t\t\t// text before the pattern (e.g. `(?:^|[^\\*])`).\n\t\t\tnew InlineAutoformatEditing( this.editor, /(?:^|[^*])(\\*)([^*_]+)(\\*)$/g, italicCallback );\n\t\t\tnew InlineAutoformatEditing( this.editor, /(?:^|[^_])(_)([^_]+)(_)$/g, italicCallback );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\n\t\tif ( commands.get( 'code' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tconst codeCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'code' );\n\n\t\t\tnew InlineAutoformatEditing( this.editor, /(`)([^`]+)(`)$/g, codeCallback );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:heading/heading~Heading}.\n\t *\n\t * It is using a number at the end of the command name to associate it with the proper trigger:\n\t *\n\t * * `heading` with value `heading1` will be executed when typing `#`,\n\t * * `heading` with value `heading2` will be executed when typing `##`,\n\t * * ... up to `heading6` and `######`.\n\t *\n\t * @private\n\t */\n\t_addHeadingAutoformats() {\n\t\tconst command = this.editor.commands.get( 'heading' );\n\n\t\tif ( command ) {\n\t\t\tcommand.modelElements\n\t\t\t\t.filter( name => name.match( /^heading[1-6]$/ ) )\n\t\t\t\t.forEach( commandValue => {\n\t\t\t\t\tconst level = commandValue[ 7 ];\n\t\t\t\t\tconst pattern = new RegExp( `^(#{${ level }})\\\\s$` );\n\n\t\t\t\t\t// eslint-disable-next-line no-new\n\t\t\t\t\tnew BlockAutoformatEditing( this.editor, pattern, () => {\n\t\t\t\t\t\tif ( !command.isEnabled ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.editor.execute( 'heading', { value: commandValue } );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\n\t *\n\t * When typed:\n\t * * `> ` &ndash; A paragraph will be changed to a block quote.\n\t *\n\t * @private\n\t */\n\t_addBlockQuoteAutoformats() {\n\t\tif ( this.editor.commands.get( 'blockQuote' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^>\\s$/, 'blockQuote' );\n\t\t}\n\t}\n}\n\n// Helper function for getting `InlineAutoformatEditing` callbacks that checks if command is enabled.\n//\n// @param {module:core/editor/editor~Editor} editor\n// @param {String} attributeKey\n// @returns {Function}\nfunction getCallbackFunctionForInlineAutoformat( editor, attributeKey ) {\n\treturn ( writer, rangesToFormat ) => {\n\t\tconst command = editor.commands.get( attributeKey );\n\n\t\tif ( !command.isEnabled ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, attributeKey );\n\n\t\tfor ( const range of validRanges ) {\n\t\t\twriter.setAttribute( attributeKey, true, range );\n\t\t}\n\n\t\t// After applying attribute to the text, remove given attribute from the selection.\n\t\t// This way user is able to type a text without attribute used by auto formatter.\n\t\twriter.removeSelectionAttribute( attributeKey );\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/elementreplacer\n */\n\n/**\n * Utility class allowing to hide existing HTML elements or replace them with given ones in a way that doesn't remove\n * the original elements from the DOM.\n */\nexport default class ElementReplacer {\n\tconstructor() {\n\t\t/**\n\t\t * The elements replaced by {@link #replace} and their replacements.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<Object>}\n\t\t */\n\t\tthis._replacedElements = [];\n\t}\n\n\t/**\n\t * Hides the `element` and, if specified, inserts the the given element next to it.\n\t *\n\t * The effect of this method can be reverted by {@link #restore}.\n\t *\n\t * @param {HTMLElement} element The element to replace.\n\t * @param {HTMLElement} [newElement] The replacement element. If not passed, then the `element` will just be hidden.\n\t */\n\treplace( element, newElement ) {\n\t\tthis._replacedElements.push( { element, newElement } );\n\n\t\telement.style.display = 'none';\n\n\t\tif ( newElement ) {\n\t\t\telement.parentNode.insertBefore( newElement, element.nextSibling );\n\t\t}\n\t}\n\n\t/**\n\t * Restores what {@link #replace} did.\n\t */\n\trestore() {\n\t\tthis._replacedElements.forEach( ( { element, newElement } ) => {\n\t\t\telement.style.display = '';\n\n\t\t\tif ( newElement ) {\n\t\t\t\tnewElement.remove();\n\t\t\t}\n\t\t} );\n\n\t\tthis._replacedElements = [];\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/list\n */\n\nimport Element from '@ckeditor/ckeditor5-engine/src/view/element';\nimport Matcher from '@ckeditor/ckeditor5-engine/src/view/matcher';\nimport UpcastWriter from '@ckeditor/ckeditor5-engine/src/view/upcastwriter';\n\n/**\n * Transforms Word specific list-like elements to the semantic HTML lists.\n *\n * Lists in Word are represented by block elements with special attributes like:\n *\n *\t\t<p class=MsoListParagraphCxSpFirst style='mso-list:l1 level1 lfo1'>...</p> // Paragraph based list.\n *\t\t<h1 style='mso-list:l0 level1 lfo1'>...</h1> // Heading 1 based list.\n *\n * @param {module:engine/view/documentfragment~DocumentFragment} documentFragment The view structure which to transform.\n * @param {String} stylesString Styles from which list-like elements styling will be extracted.\n */\nexport function transformListItemLikeElementsIntoLists( documentFragment, stylesString ) {\n\tif ( !documentFragment.childCount ) {\n\t\treturn;\n\t}\n\n\tconst writer = new UpcastWriter();\n\tconst itemLikeElements = findAllItemLikeElements( documentFragment, writer );\n\n\tif ( !itemLikeElements.length ) {\n\t\treturn;\n\t}\n\n\tlet currentList = null;\n\n\titemLikeElements.forEach( ( itemLikeElement, i ) => {\n\t\tif ( !currentList || isNewListNeeded( itemLikeElements[ i - 1 ], itemLikeElement ) ) {\n\t\t\tconst listStyle = detectListStyle( itemLikeElement, stylesString );\n\n\t\t\tcurrentList = insertNewEmptyList( listStyle, itemLikeElement.element, writer );\n\t\t}\n\n\t\tconst listItem = transformElementIntoListItem( itemLikeElement.element, writer );\n\n\t\twriter.appendChild( listItem, currentList );\n\t} );\n}\n\n/**\n * Removes paragraph wrapping content inside a list item.\n *\n * @param {module:engine/view/documentfragment~DocumentFragment} documentFragment\n * @param {module:engine/view/upcastwriter~UpcastWriter} writer\n */\nexport function unwrapParagraphInListItem( documentFragment, writer ) {\n\tfor ( const value of writer.createRangeIn( documentFragment ) ) {\n\t\tconst element = value.item;\n\n\t\tif ( element.is( 'li' ) ) {\n\t\t\t// Google Docs allows on single paragraph inside LI.\n\t\t\tconst firstChild = element.getChild( 0 );\n\n\t\t\tif ( firstChild.is( 'p' ) ) {\n\t\t\t\twriter.unwrapElement( firstChild );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Finds all list-like elements in a given document fragment.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment\n// in which to look for list-like nodes.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n// @returns {Array.<Object>} Array of found list-like items. Each item is an object containing:\n//\n//\t\t* {module:engine/src/view/element~Element} element List-like element.\n//\t\t* {Number} id List item id parsed from `mso-list` style (see `getListItemData()` function).\n//\t\t* {Number} order List item creation order parsed from `mso-list` style (see `getListItemData()` function).\n//\t\t* {Number} indent List item indentation level parsed from `mso-list` style (see `getListItemData()` function).\nfunction findAllItemLikeElements( documentFragment, writer ) {\n\tconst range = writer.createRangeIn( documentFragment );\n\n\t// Matcher for finding list-like elements.\n\tconst itemLikeElementsMatcher = new Matcher( {\n\t\tname: /^p|h\\d+$/,\n\t\tstyles: {\n\t\t\t'mso-list': /.*/\n\t\t}\n\t} );\n\n\tconst itemLikeElements = [];\n\n\tfor ( const value of range ) {\n\t\tif ( value.type === 'elementStart' && itemLikeElementsMatcher.match( value.item ) ) {\n\t\t\tconst itemData = getListItemData( value.item );\n\n\t\t\titemLikeElements.push( {\n\t\t\t\telement: value.item,\n\t\t\t\tid: itemData.id,\n\t\t\t\torder: itemData.order,\n\t\t\t\tindent: itemData.indent\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn itemLikeElements;\n}\n\n// Extracts list item style from the provided CSS.\n//\n// List item style is extracted from CSS stylesheet. Each list with its specific style attribute\n// value (`mso-list:l1 level1 lfo1`) has its dedicated properties in a CSS stylesheet defined with a selector like:\n//\n// \t\t@list l1:level1 { ... }\n//\n// It contains `mso-level-number-format` property which defines list numbering/bullet style. If this property\n// is not defined it means default `decimal` numbering.\n//\n// Here CSS string representation is used as `mso-level-number-format` property is an invalid CSS property\n// and will be removed during CSS parsing.\n//\n// @param {Object} listLikeItem List-like item for which list style will be searched for. Usually\n// a result of `findAllItemLikeElements()` function.\n// @param {String} stylesString CSS stylesheet.\n// @returns {Object} result\n// @returns {String} result.type List type, could be `ul` or `ol`.\n// @returns {String} result.style List style, for example: `decimal`, `lower-roman`, etc. It is extracted\n// directly from Word stylesheet without further processing and may be not compatible\n// with CSS `list-style-type` property accepted values.\nfunction detectListStyle( listLikeItem, stylesString ) {\n\tconst listStyleRegexp = new RegExp( `@list l${ listLikeItem.id }:level${ listLikeItem.indent }\\\\s*({[^}]*)`, 'gi' );\n\tconst listStyleTypeRegex = /mso-level-number-format:([^;]*);/gi;\n\n\tconst listStyleMatch = listStyleRegexp.exec( stylesString );\n\n\tlet listStyleType = 'decimal'; // Decimal is default one.\n\tif ( listStyleMatch && listStyleMatch[ 1 ] ) {\n\t\tconst listStyleTypeMatch = listStyleTypeRegex.exec( listStyleMatch[ 1 ] );\n\n\t\tif ( listStyleTypeMatch && listStyleTypeMatch[ 1 ] ) {\n\t\t\tlistStyleType = listStyleTypeMatch[ 1 ].trim();\n\t\t}\n\t}\n\n\treturn {\n\t\ttype: listStyleType !== 'bullet' && listStyleType !== 'image' ? 'ol' : 'ul',\n\t\tstyle: listStyleType\n\t};\n}\n\n// Creates empty list of a given type and inserts it after a specified element.\n//\n// @param {Object} listStyle List style object which determines the type of newly created list.\n// Usually a result of `detectListStyle()` function.\n// @param {module:engine/view/element~Element} element Element before which list is inserted.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n// @returns {module:engine/view/element~Element} Newly created list element.\nfunction insertNewEmptyList( listStyle, element, writer ) {\n\tconst list = new Element( listStyle.type );\n\tconst position = element.parent.getChildIndex( element );\n\n\twriter.insertChild( position, list, element.parent );\n\n\treturn list;\n}\n\n// Transforms given element into a semantic list item. As the function operates on a provided\n// {module:engine/src/view/element~Element element} it will modify the view structure to which this element belongs.\n//\n// @param {module:engine/view/element~Element} element Element which will be transformed into list item.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n// @returns {module:engine/view/element~Element} New element to which the given one was transformed. It is\n// inserted in place of the old element (the reference to the old element is lost due to renaming).\nfunction transformElementIntoListItem( element, writer ) {\n\tremoveBulletElement( element, writer );\n\n\treturn writer.rename( 'li', element );\n}\n\n// Extracts list item information from Word specific list-like element style:\n//\n//\t\t`style=\"mso-list:l1 level1 lfo1\"`\n//\n// where:\n//\n//\t\t* `l1` is a list id (however it does not mean this is a continuous list - see #43),\n//\t\t* `level1` is a list item indentation level,\n//\t\t* `lfo1` is a list insertion order in a document.\n//\n// @param {module:engine/view/element~Element} element Element from which style data is extracted.\n// @returns {Object} result\n// @returns {Number} result.id Parent list id.\n// @returns {Number} result.order List item creation order.\n// @returns {Number} result.indent List item indentation level.\nfunction getListItemData( element ) {\n\tconst data = {};\n\tconst listStyle = element.getStyle( 'mso-list' );\n\n\tif ( listStyle ) {\n\t\tdata.id = parseInt( listStyle.match( /(^|\\s+)l(\\d+)/i )[ 2 ] );\n\t\tdata.order = parseInt( listStyle.match( /\\s*lfo(\\d+)/i )[ 1 ] );\n\t\tdata.indent = parseInt( listStyle.match( /\\s*level(\\d+)/i )[ 1 ] );\n\t}\n\n\treturn data;\n}\n\n// Removes span with a numbering/bullet from a given element.\n//\n// @param {module:engine/view/element~Element} element\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\nfunction removeBulletElement( element, writer ) {\n\t// Matcher for finding `span` elements holding lists numbering/bullets.\n\tconst bulletMatcher = new Matcher( {\n\t\tname: 'span',\n\t\tstyles: {\n\t\t\t'mso-list': 'Ignore'\n\t\t}\n\t} );\n\n\tconst range = writer.createRangeIn( element );\n\n\tfor ( const value of range ) {\n\t\tif ( value.type === 'elementStart' && bulletMatcher.match( value.item ) ) {\n\t\t\twriter.remove( value.item );\n\t\t}\n\t}\n}\n\n// Whether previous and current item belongs to the same list. It is determined based on `item.id`\n// (extracted from `mso-list` style, see #getListItemData) and previous sibling of the current item.\n//\n// @param {Object} previousItem\n// @param {Object} currentItem\n// @returns {Boolean}\nfunction isNewListNeeded( previousItem, currentItem ) {\n\tif ( previousItem.id !== currentItem.id ) {\n\t\treturn true;\n\t}\n\n\tconst previousSibling = currentItem.element.previousSibling;\n\n\tif ( !previousSibling ) {\n\t\treturn true;\n\t}\n\n\t// Even with the same id the list does not have to be continuous (#43).\n\treturn !isList( previousSibling );\n}\n\nfunction isList( element ) {\n\treturn element.is( 'ol' ) || element.is( 'ul' );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/normalizers/googledocsnormalizer\n */\n\nimport removeBoldWrapper from '../filters/removeboldwrapper';\nimport { unwrapParagraphInListItem } from '../filters/list';\nimport UpcastWriter from '@ckeditor/ckeditor5-engine/src/view/upcastwriter';\n\nconst googleDocsMatch = /id=(\"|')docs-internal-guid-[-0-9a-f]+(\"|')/i;\n\n/**\n * Normalizer for the content pasted from Google Docs.\n *\n * @implements module:paste-from-office/normalizer~Normalizer\n */\nexport default class GoogleDocsNormalizer {\n\t/**\n\t * @inheritDoc\n\t */\n\tisActive( htmlString ) {\n\t\treturn googleDocsMatch.test( htmlString );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute( data ) {\n\t\tconst writer = new UpcastWriter();\n\n\t\tremoveBoldWrapper( data.content, writer );\n\t\tunwrapParagraphInListItem( data.content, writer );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/removeboldwrapper\n */\n\n/**\n * Removes `<b>` tag wrapper added by Google Docs to a copied content.\n *\n * @param {module:engine/view/documentfragment~DocumentFragment} documentFragment element `data.content` obtained from clipboard\n * @param {module:engine/view/upcastwriter~UpcastWriter} writer\n */\nexport default function removeBoldWrapper( documentFragment, writer ) {\n\tfor ( const child of documentFragment.getChildren() ) {\n\t\tif ( child.is( 'b' ) && child.getStyle( 'font-weight' ) === 'normal' ) {\n\t\t\tconst childIndex = documentFragment.getChildIndex( child );\n\n\t\t\twriter.remove( child );\n\t\t\twriter.insertChild( childIndex, child.getChildren(), documentFragment );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/space\n */\n\n/**\n * Replaces last space preceding elements closing tag with `&nbsp;`. Such operation prevents spaces from being removed\n * during further DOM/View processing (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n * This method also takes into account Word specific `<o:p></o:p>` empty tags.\n * Additionally multiline sequences of spaces and new lines between tags are removed (see #39 and #40).\n *\n * @param {String} htmlString HTML string in which spacing should be normalized.\n * @returns {String} Input HTML with spaces normalized.\n */\nexport function normalizeSpacing( htmlString ) {\n\t// Run normalizeSafariSpaceSpans() two times to cover nested spans.\n\treturn normalizeSafariSpaceSpans( normalizeSafariSpaceSpans( htmlString ) )\n\t\t// Remove all \\r\\n from \"spacerun spans\" so the last replace line doesn't strip all whitespaces.\n\t\t.replace( /(<span style=['\"]mso-spacerun:yes['\"]>[\\s]*?)[\\r\\n]+(\\s*<\\/span>)/g, '$1$2' )\n\t\t.replace( /<span style=['\"]mso-spacerun:yes['\"]><\\/span>/g, '' )\n\t\t.replace( / <\\//g, '\\u00A0</' )\n\t\t.replace( / <o:p><\\/o:p>/g, '\\u00A0<o:p></o:p>' )\n\t\t// Remove <o:p> block filler from empty paragraph. Safari uses \\u00A0 instead of &nbsp;.\n\t\t.replace( /<o:p>(&nbsp;|\\u00A0)<\\/o:p>/g, '' )\n\t\t// Remove all whitespaces when they contain any \\r or \\n.\n\t\t.replace( />(\\s*[\\r\\n]\\s*)</g, '><' );\n}\n\n/**\n * Normalizes spacing in special Word `spacerun spans` (`<span style='mso-spacerun:yes'>\\s+</span>`) by replacing\n * all spaces with `&nbsp; ` pairs. This prevents spaces from being removed during further DOM/View processing\n * (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n *\n * @param {Document} htmlDocument Native `Document` object in which spacing should be normalized.\n */\nexport function normalizeSpacerunSpans( htmlDocument ) {\n\thtmlDocument.querySelectorAll( 'span[style*=spacerun]' ).forEach( el => {\n\t\t// Use `el.childNodes[ 0 ].data.length` instead of `el.innerText.length`. For `el.innerText.length` which\n\t\t// contains spaces mixed with `&nbsp;` Edge browser returns incorrect length.\n\t\tconst innerTextLength = el.childNodes[ 0 ].data.length;\n\n\t\tel.innerHTML = Array( innerTextLength + 1 ).join( '\\u00A0 ' ).substr( 0, innerTextLength );\n\t} );\n}\n\n// Normalizes specific spacing generated by Safari when content pasted from Word (`<span class=\"Apple-converted-space\"> </span>`)\n// by replacing all spaces sequences longer than 1 space with `&nbsp; ` pairs. This prevents spaces from being removed during\n// further DOM/View processing (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n//\n// This function is similar to {@link module:clipboard/utils/normalizeclipboarddata normalizeClipboardData util} but uses\n// regular spaces / &nbsp; sequence for replacement.\n//\n// @param {String} htmlString HTML string in which spacing should be normalized\n// @returns {String} Input HTML with spaces normalized.\nfunction normalizeSafariSpaceSpans( htmlString ) {\n\treturn htmlString.replace( /<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, ( fullMatch, spaces ) => {\n\t\treturn spaces.length === 1 ? ' ' : Array( spaces.length + 1 ).join( '\\u00A0 ' ).substr( 0, spaces.length );\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/parse\n */\n\n/* globals DOMParser */\n\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\n\nimport { normalizeSpacing, normalizeSpacerunSpans } from './space';\n\n/**\n * Parses provided HTML extracting contents of `<body>` and `<style>` tags.\n *\n * @param {String} htmlString HTML string to be parsed.\n * @returns {Object} result\n * @returns {module:engine/view/documentfragment~DocumentFragment} result.body Parsed body\n * content as a traversable structure.\n * @returns {String} result.bodyString Entire body content as a string.\n * @returns {Array.<CSSStyleSheet>} result.styles Array of native `CSSStyleSheet` objects, each representing\n * separate `style` tag from the source HTML.\n * @returns {String} result.stylesString All `style` tags contents combined in the order of occurrence into one string.\n */\nexport function parseHtml( htmlString ) {\n\tconst domParser = new DOMParser();\n\n\t// Remove Word specific \"if comments\" so content inside is not omitted by the parser.\n\thtmlString = htmlString.replace( /<!--\\[if gte vml 1]>/g, '' );\n\n\tconst normalizedHtml = normalizeSpacing( cleanContentAfterBody( htmlString ) );\n\n\t// Parse htmlString as native Document object.\n\tconst htmlDocument = domParser.parseFromString( normalizedHtml, 'text/html' );\n\n\tnormalizeSpacerunSpans( htmlDocument );\n\n\t// Get `innerHTML` first as transforming to View modifies the source document.\n\tconst bodyString = htmlDocument.body.innerHTML;\n\n\t// Transform document.body to View.\n\tconst bodyView = documentToView( htmlDocument );\n\n\t// Extract stylesheets.\n\tconst stylesObject = extractStyles( htmlDocument );\n\n\treturn {\n\t\tbody: bodyView,\n\t\tbodyString,\n\t\tstyles: stylesObject.styles,\n\t\tstylesString: stylesObject.stylesString\n\t};\n}\n\n// Transforms native `Document` object into {@link module:engine/view/documentfragment~DocumentFragment}.\n//\n// @param {Document} htmlDocument Native `Document` object to be transformed.\n// @returns {module:engine/view/documentfragment~DocumentFragment}\nfunction documentToView( htmlDocument ) {\n\tconst domConverter = new DomConverter( { blockFillerMode: 'nbsp' } );\n\tconst fragment = htmlDocument.createDocumentFragment();\n\tconst nodes = htmlDocument.body.childNodes;\n\n\twhile ( nodes.length > 0 ) {\n\t\tfragment.appendChild( nodes[ 0 ] );\n\t}\n\n\treturn domConverter.domToView( fragment );\n}\n\n// Extracts both `CSSStyleSheet` and string representation from all `style` elements available in a provided `htmlDocument`.\n//\n// @param {Document} htmlDocument Native `Document` object from which styles will be extracted.\n// @returns {Object} result\n// @returns {Array.<CSSStyleSheet>} result.styles Array of native `CSSStyleSheet` object, each representing\n// separate `style` tag from the source object.\n// @returns {String} result.stylesString All `style` tags contents combined in the order of occurrence as one string.\nfunction extractStyles( htmlDocument ) {\n\tconst styles = [];\n\tconst stylesString = [];\n\tconst styleTags = Array.from( htmlDocument.getElementsByTagName( 'style' ) );\n\n\tfor ( const style of styleTags ) {\n\t\tif ( style.sheet && style.sheet.cssRules && style.sheet.cssRules.length ) {\n\t\t\tstyles.push( style.sheet );\n\t\t\tstylesString.push( style.innerHTML );\n\t\t}\n\t}\n\n\treturn {\n\t\tstyles,\n\t\tstylesString: stylesString.join( ' ' )\n\t};\n}\n\n// Removes leftover content from between closing </body> and closing </html> tag:\n//\n// \t\t<html><body><p>Foo Bar</p></body><span>Fo</span></html> -> <html><body><p>Foo Bar</p></body></html>\n//\n// This function is used as specific browsers (Edge) add some random content after `body` tag when pasting from Word.\n// @param {String} htmlString The HTML string to be cleaned.\n// @returns {String} The HTML string with leftover content removed.\nfunction cleanContentAfterBody( htmlString ) {\n\tconst regexp = /<\\/body>(.*?)(<\\/html>|$)/;\n\tconst match = htmlString.match( regexp );\n\n\tif ( match && match[ 1 ] ) {\n\t\thtmlString = htmlString.slice( 0, match.index ) + htmlString.slice( match.index ).replace( match[ 1 ], '' );\n\t}\n\n\treturn htmlString;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/image\n */\n\n/* globals btoa */\n\nimport ViewMatcher from '@ckeditor/ckeditor5-engine/src/view/matcher';\nimport UpcastWriter from '@ckeditor/ckeditor5-engine/src/view/upcastwriter';\n\n/**\n * Replaces source attribute of all `<img>` elements representing regular\n * images (not the Word shapes) with inlined base64 image representation extracted from RTF or Blob data.\n *\n * @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment on which transform images.\n * @param {String} rtfData The RTF data from which images representation will be used.\n */\nexport function replaceImagesSourceWithBase64( documentFragment, rtfData ) {\n\tif ( !documentFragment.childCount ) {\n\t\treturn;\n\t}\n\n\tconst upcastWriter = new UpcastWriter();\n\tconst shapesIds = findAllShapesIds( documentFragment, upcastWriter );\n\n\tremoveAllImgElementsRepresentingShapes( shapesIds, documentFragment, upcastWriter );\n\tremoveAllShapeElements( documentFragment, upcastWriter );\n\n\tconst images = findAllImageElementsWithLocalSource( documentFragment, upcastWriter );\n\n\tif ( images.length ) {\n\t\treplaceImagesFileSourceWithInlineRepresentation( images, extractImageDataFromRtf( rtfData ), upcastWriter );\n\t}\n}\n\n/**\n * Converts given HEX string to base64 representation.\n *\n * @protected\n * @param {String} hexString The HEX string to be converted.\n * @returns {String} Base64 representation of a given HEX string.\n */\nexport function _convertHexToBase64( hexString ) {\n\treturn btoa( hexString.match( /\\w{2}/g ).map( char => {\n\t\treturn String.fromCharCode( parseInt( char, 16 ) );\n\t} ).join( '' ) );\n}\n\n// Finds all shapes (`<v:*>...</v:*>`) ids. Shapes can represent images (canvas)\n// or Word shapes (which does not have RTF or Blob representation).\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment\n// from which to extract shape ids.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n// @returns {Array.<String>} Array of shape ids.\nfunction findAllShapesIds( documentFragment, writer ) {\n\tconst range = writer.createRangeIn( documentFragment );\n\n\tconst shapeElementsMatcher = new ViewMatcher( {\n\t\tname: /v:(.+)/\n\t} );\n\n\tconst shapesIds = [];\n\n\tfor ( const value of range ) {\n\t\tconst el = value.item;\n\t\tconst prevSiblingName = el.previousSibling && el.previousSibling.name || null;\n\n\t\t// If shape element have 'o:gfxdata' attribute and is not directly before `<v:shapetype>` element it means it represent Word shape.\n\t\tif ( shapeElementsMatcher.match( el ) && el.getAttribute( 'o:gfxdata' ) && prevSiblingName !== 'v:shapetype' ) {\n\t\t\tshapesIds.push( value.item.getAttribute( 'id' ) );\n\t\t}\n\t}\n\n\treturn shapesIds;\n}\n\n// Removes all `<img>` elements which represents Word shapes and not regular images.\n//\n// @param {Array.<String>} shapesIds Shape ids which will be checked against `<img>` elements.\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment from which to remove `<img>` elements.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\nfunction removeAllImgElementsRepresentingShapes( shapesIds, documentFragment, writer ) {\n\tconst range = writer.createRangeIn( documentFragment );\n\n\tconst imageElementsMatcher = new ViewMatcher( {\n\t\tname: 'img'\n\t} );\n\n\tconst imgs = [];\n\n\tfor ( const value of range ) {\n\t\tif ( imageElementsMatcher.match( value.item ) ) {\n\t\t\tconst el = value.item;\n\t\t\tconst shapes = el.getAttribute( 'v:shapes' ) ? el.getAttribute( 'v:shapes' ).split( ' ' ) : [];\n\n\t\t\tif ( shapes.length && shapes.every( shape => shapesIds.indexOf( shape ) > -1 ) ) {\n\t\t\t\timgs.push( el );\n\t\t\t// Shapes may also have empty source while content is paste in some browsers (Safari).\n\t\t\t} else if ( !el.getAttribute( 'src' ) ) {\n\t\t\t\timgs.push( el );\n\t\t\t}\n\t\t}\n\t}\n\n\tfor ( const img of imgs ) {\n\t\twriter.remove( img );\n\t}\n}\n\n// Removes all shape elements (`<v:*>...</v:*>`) so they do not pollute the output structure.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment from which to remove shape elements.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\nfunction removeAllShapeElements( documentFragment, writer ) {\n\tconst range = writer.createRangeIn( documentFragment );\n\n\tconst shapeElementsMatcher = new ViewMatcher( {\n\t\tname: /v:(.+)/\n\t} );\n\n\tconst shapes = [];\n\n\tfor ( const value of range ) {\n\t\tif ( shapeElementsMatcher.match( value.item ) ) {\n\t\t\tshapes.push( value.item );\n\t\t}\n\t}\n\n\tfor ( const shape of shapes ) {\n\t\twriter.remove( shape );\n\t}\n}\n\n// Finds all `<img>` elements in a given document fragment which have source pointing to local `file://` resource.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment in which to look for `<img>` elements.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n// @returns {Object} result All found images grouped by source type.\n// @returns {Array.<module:engine/view/element~Element>} result.file Array of found `<img>` elements with `file://` source.\n// @returns {Array.<module:engine/view/element~Element>} result.blob Array of found `<img>` elements with `blob:` source.\nfunction findAllImageElementsWithLocalSource( documentFragment, writer ) {\n\tconst range = writer.createRangeIn( documentFragment );\n\n\tconst imageElementsMatcher = new ViewMatcher( {\n\t\tname: 'img'\n\t} );\n\n\tconst imgs = [];\n\n\tfor ( const value of range ) {\n\t\tif ( imageElementsMatcher.match( value.item ) ) {\n\t\t\tif ( value.item.getAttribute( 'src' ).startsWith( 'file://' ) ) {\n\t\t\t\timgs.push( value.item );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn imgs;\n}\n\n// Extracts all images HEX representations from a given RTF data.\n//\n// @param {String} rtfData The RTF data from which to extract images HEX representation.\n// @returns {Array.<Object>} Array of found HEX representations. Each array item is an object containing:\n//\n// \t\t* {String} hex Image representation in HEX format.\n// \t\t* {string} type Type of image, `image/png` or `image/jpeg`.\nfunction extractImageDataFromRtf( rtfData ) {\n\tif ( !rtfData ) {\n\t\treturn [];\n\t}\n\n\tconst regexPictureHeader = /{\\\\pict[\\s\\S]+?\\\\bliptag-?\\d+(\\\\blipupi-?\\d+)?({\\\\\\*\\\\blipuid\\s?[\\da-fA-F]+)?[\\s}]*?/;\n\tconst regexPicture = new RegExp( '(?:(' + regexPictureHeader.source + '))([\\\\da-fA-F\\\\s]+)\\\\}', 'g' );\n\tconst images = rtfData.match( regexPicture );\n\tconst result = [];\n\n\tif ( images ) {\n\t\tfor ( const image of images ) {\n\t\t\tlet imageType = false;\n\n\t\t\tif ( image.includes( '\\\\pngblip' ) ) {\n\t\t\t\timageType = 'image/png';\n\t\t\t} else if ( image.includes( '\\\\jpegblip' ) ) {\n\t\t\t\timageType = 'image/jpeg';\n\t\t\t}\n\n\t\t\tif ( imageType ) {\n\t\t\t\tresult.push( {\n\t\t\t\t\thex: image.replace( regexPictureHeader, '' ).replace( /[^\\da-fA-F]/g, '' ),\n\t\t\t\t\ttype: imageType\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n\n// Replaces `src` attribute value of all given images with the corresponding base64 image representation.\n//\n// @param {Array.<module:engine/view/element~Element>} imageElements Array of image elements which will have its source replaced.\n// @param {Array.<Object>} imagesHexSources Array of images hex sources (usually the result of `extractImageDataFromRtf()` function).\n// The array should be the same length as `imageElements` parameter.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\nfunction replaceImagesFileSourceWithInlineRepresentation( imageElements, imagesHexSources, writer ) {\n\t// Assume there is an equal amount of image elements and images HEX sources so they can be matched accordingly based on existing order.\n\tif ( imageElements.length === imagesHexSources.length ) {\n\t\tfor ( let i = 0; i < imageElements.length; i++ ) {\n\t\t\tconst newSrc = `data:${ imagesHexSources[ i ].type };base64,${ _convertHexToBase64( imagesHexSources[ i ].hex ) }`;\n\t\t\twriter.setAttribute( 'src', newSrc, imageElements[ i ] );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/normalizers/mswordnormalizer\n */\n\nimport { parseHtml } from '../filters/parse';\nimport { transformListItemLikeElementsIntoLists } from '../filters/list';\nimport { replaceImagesSourceWithBase64 } from '../filters/image';\n\nconst msWordMatch1 = /<meta\\s*name=\"?generator\"?\\s*content=\"?microsoft\\s*word\\s*\\d+\"?\\/?>/i;\nconst msWordMatch2 = /xmlns:o=\"urn:schemas-microsoft-com/i;\n\n/**\n * Normalizer for the content pasted from Microsoft Word.\n *\n * @implements module:paste-from-office/normalizer~Normalizer\n */\nexport default class MSWordNormalizer {\n\t/**\n\t * @inheritDoc\n\t */\n\tisActive( htmlString ) {\n\t\treturn msWordMatch1.test( htmlString ) || msWordMatch2.test( htmlString );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute( data ) {\n\t\tconst { body, stylesString } = parseHtml( data.dataTransfer.getData( 'text/html' ) );\n\n\t\ttransformListItemLikeElementsIntoLists( body, stylesString );\n\t\treplaceImagesSourceWithBase64( body, data.dataTransfer.getData( 'text/rtf' ) );\n\n\t\tdata.content = body;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/pastefromoffice\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport GoogleDocsNormalizer from './normalizers/googledocsnormalizer';\nimport MSWordNormalizer from './normalizers/mswordnormalizer';\nimport Clipboard from '@ckeditor/ckeditor5-clipboard/src/clipboard';\n\n/**\n * The Paste from Office plugin.\n *\n * This plugin handles content pasted from Office apps and transforms it (if necessary)\n * to a valid structure which can then be understood by the editor features.\n *\n * Transformation is made by a set of predefined {@link module:paste-from-office/normalizer~Normalizer normalizers}.\n * This plugin includes following normalizers:\n *   * {@link module:paste-from-office/normalizers/mswordnormalizer~MSWordNormalizer Microsoft Word normalizer}\n *   * {@link module:paste-from-office/normalizers/googledocsnormalizer~GoogleDocsNormalizer Google Docs normalizer}\n *\n * For more information about this feature check the {@glink api/paste-from-office package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class PasteFromOffice extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'PasteFromOffice';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Clipboard ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst normalizers = [];\n\n\t\tnormalizers.push( new MSWordNormalizer() );\n\t\tnormalizers.push( new GoogleDocsNormalizer() );\n\n\t\teditor.plugins.get( 'Clipboard' ).on(\n\t\t\t'inputTransformation',\n\t\t\t( evt, data ) => {\n\t\t\t\tif ( data.isTransformedWithPasteFromOffice ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst htmlString = data.dataTransfer.getData( 'text/html' );\n\t\t\t\tconst activeNormalizer = normalizers.find( normalizer => normalizer.isActive( htmlString ) );\n\n\t\t\t\tif ( activeNormalizer ) {\n\t\t\t\t\tactiveNormalizer.execute( data );\n\n\t\t\t\t\tdata.isTransformedWithPasteFromOffice = true;\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ priority: 'high' }\n\t\t);\n\t}\n}\n","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.627 16.5zm5.873-.196zm0-7.001V8h-13v8.5h4.341c.191.54.457 1.044.785 1.5H2a1.5 1.5 0 0 1-1.5-1.5v-13A1.5 1.5 0 0 1 2 2h4.5a1.5 1.5 0 0 1 1.06.44L9.122 4H16a1.5 1.5 0 0 1 1.5 1.5v1A1.5 1.5 0 0 1 19 8v2.531a6.027 6.027 0 0 0-1.5-1.228zM16 6.5v-1H8.5l-2-2H2v13h1V8a1.5 1.5 0 0 1 1.5-1.5H16z\\\"/><path d=\\\"M14.5 19.5a5 5 0 1 1 0-10 5 5 0 0 1 0 10zM15 14v-2h-1v2h-2v1h2v2h1v-2h2v-1h-2z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ckfinder/ckfinderui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport browseFilesIcon from '../theme/icons/browse-files.svg';\n/**\n * The CKFinder UI plugin. It introduces the `'ckfinder'` toolbar button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CKFinderUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'CKFinderUI';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const componentFactory = editor.ui.componentFactory;\n        const t = editor.t;\n        componentFactory.add('ckfinder', locale => {\n            const command = editor.commands.get('ckfinder');\n            const button = new ButtonView(locale);\n            button.set({\n                label: t('Insert image or file'),\n                icon: browseFilesIcon,\n                tooltip: true\n            });\n            button.bind('isEnabled').to(command);\n            button.on('execute', () => {\n                editor.execute('ckfinder');\n                editor.editing.view.focus();\n            });\n            return button;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* global window */\n/**\n * @module ckfinder/ckfindercommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The CKFinder command. It is used by the {@link module:ckfinder/ckfinderediting~CKFinderEditing CKFinder editing feature}\n * to open the CKFinder file manager to insert an image or a link to a file into the editor content.\n *\n *\t\teditor.execute( 'ckfinder' );\n *\n * **Note:** This command uses other features to perform tasks:\n * - To insert images the {@link module:image/image/imageinsertcommand~ImageInsertCommand 'imageInsert'} command\n * from the {@link module:image/image~Image Image feature}.\n * - To insert links to files the {@link module:link/linkcommand~LinkCommand 'link'} command\n * from the {@link module:link/link~Link Link feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class CKFinderCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(editor) {\n        super(editor);\n        // Remove default document listener to lower its priority.\n        this.stopListening(this.editor.model.document, 'change');\n        // Lower this command listener priority to be sure that refresh() will be called after link & image refresh.\n        this.listenTo(this.editor.model.document, 'change', () => this.refresh(), { priority: 'low' });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    refresh() {\n        const imageCommand = this.editor.commands.get('imageInsert');\n        const linkCommand = this.editor.commands.get('link');\n        // The CKFinder command is enabled when one of image or link command is enabled.\n        this.isEnabled = imageCommand.isEnabled || linkCommand.isEnabled;\n    }\n    /**\n\t * @inheritDoc\n\t */\n    execute() {\n        const editor = this.editor;\n        const openerMethod = this.editor.config.get('ckfinder.openerMethod') || 'modal';\n        if (openerMethod != 'popup' && openerMethod != 'modal') {\n            throw new CKEditorError('ckfinder-unknown-openerMethod: The openerMethod config option must by \"popup\" or \"modal\".', editor);\n        }\n        const options = this.editor.config.get('ckfinder.options') || {};\n        options.chooseFiles = true;\n        // Cache the user-defined onInit method\n        const originalOnInit = options.onInit;\n        // Pass the lang code to the CKFinder if not defined by user.\n        if (!options.language) {\n            options.language = editor.locale.uiLanguage;\n        }\n        // The onInit method allows to extend CKFinder's behavior. It is used to attach event listeners to file choosing related events.\n        options.onInit = finder => {\n            // Call original options.onInit if it was defined by user.\n            if (originalOnInit) {\n                originalOnInit(finder);\n            }\n            finder.on('files:choose', evt => {\n                const files = evt.data.files.toArray();\n                // Insert links\n                const links = files.filter(file => !file.isImage());\n                const images = files.filter(file => file.isImage());\n                for (const linkFile of links) {\n                    editor.execute('link', linkFile.getUrl());\n                }\n                const imagesUrls = [];\n                for (const image of images) {\n                    const url = image.getUrl();\n                    imagesUrls.push(url ? url : finder.request('file:getProxyUrl', { file: image }));\n                }\n                if (imagesUrls.length) {\n                    insertImages(editor, imagesUrls);\n                }\n            });\n            finder.on('file:choose:resizedImage', evt => {\n                const resizedUrl = evt.data.resizedUrl;\n                if (!resizedUrl) {\n                    const notification = editor.plugins.get('Notification');\n                    const t = editor.locale.t;\n                    notification.showWarning(t('Could not obtain resized image URL.'), {\n                        title: t('Selecting resized image failed'),\n                        namespace: 'ckfinder'\n                    });\n                    return;\n                }\n                insertImages(editor, [resizedUrl]);\n            });\n        };\n        window.CKFinder[openerMethod](options);\n    }\n}\nfunction insertImages(editor, urls) {\n    const imageCommand = editor.commands.get('imageInsert');\n    // Check if inserting an image is actually possible - it might be possible to only insert a link.\n    if (!imageCommand.isEnabled) {\n        const notification = editor.plugins.get('Notification');\n        const t = editor.locale.t;\n        notification.showWarning(t('Could not insert image at the current position.'), {\n            title: t('Inserting image failed'),\n            namespace: 'ckfinder'\n        });\n        return;\n    }\n    editor.execute('imageInsert', { source: urls });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ckfinder/ckfinderediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageEditing from '@ckeditor/ckeditor5-image/src/image/imageediting';\nimport LinkEditing from '@ckeditor/ckeditor5-link/src/linkediting';\nimport Notification from '@ckeditor/ckeditor5-ui/src/notification/notification';\n\nimport CKFinderCommand from './ckfindercommand';\n\n/**\n * The CKFinder editing feature. It introduces the {@link module:ckfinder/ckfindercommand~CKFinderCommand CKFinder command}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CKFinderEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'CKFinderEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Notification, ImageEditing, LinkEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\teditor.commands.add( 'ckfinder', new CKFinderCommand( editor ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ckfinder/ckfinder\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport CKFinderUI from './ckfinderui';\nimport CKFinderEditing from './ckfinderediting';\nimport CKFinderUploadAdapter from '@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter';\n\n/**\n * The CKFinder feature, a bridge between the CKEditor 5 WYSIWYG editor and the\n * [CKFinder](https://ckeditor.com/ckfinder) file manager and uploader.\n *\n * This is a \"glue\" plugin which enables:\n *\n * * {@link module:ckfinder/ckfinderediting~CKFinderEditing},\n * * {@link module:ckfinder/ckfinderui~CKFinderUI},\n * * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}.\n *\n * See the {@glink features/image-upload/ckfinder \"CKFinder integration\" guide} to learn how to configure\n * and use this feature.\n *\n * Check out the {@glink features/image-upload/image-upload comprehensive \"Image upload\" guide} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CKFinder extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'CKFinder';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ CKFinderEditing, CKFinderUI, CKFinderUploadAdapter ];\n\t}\n}\n\n/**\n * The configuration of the {@link module:ckfinder/ckfinder~CKFinder CKFinder feature}.\n *\n * Read more in {@link module:ckfinder/ckfinder~CKFinderConfig}.\n *\n * @member {module:ckfinder/ckfinder~CKFinderConfig} module:core/editor/editorconfig~EditorConfig#ckfinder\n */\n\n/**\n * The configuration of the {@link module:ckfinder/ckfinder~CKFinder CKFinder feature}\n * and its {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter upload adapter}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tckfinder: {\n *\t\t\t\t\toptions: {\n *\t\t\t\t\t\tresourceType: 'Images'\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface CKFinderConfig\n */\n\n/**\n * The configuration options passed to the CKFinder file manager instance.\n *\n * Check the file manager [documentation](https://ckeditor.com/docs/ckfinder/ckfinder3/#!/api/CKFinder.Config-cfg-language)\n * for the complete list of options.\n *\n * @member {Object} module:ckfinder/ckfinder~CKFinderConfig#options\n */\n\n/**\n * The type of the CKFinder opener method.\n *\n * Supported types are:\n *\n * * `'modal'` &ndash; Opens CKFinder in a modal,\n * * `'popup'` &ndash; Opens CKFinder in a new \"pop-up\" window.\n *\n * Defaults to `'modal'`.\n *\n * @member {String} module:ckfinder/ckfinder~CKFinderConfig#openerMethod\n */\n\n/**\n * The path (URL) to the connector which handles the file upload in CKFinder file manager.\n * When specified, it enables the automatic upload of resources such as images inserted into the content.\n *\n * For instance, to use CKFinder's\n * [quick upload](https://ckeditor.com/docs/ckfinder/ckfinder3-php/commands.html#command_quick_upload)\n * command, your can use the following (or similar) path:\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tckfinder: {\n *\t\t\t\t\tuploadUrl: '/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Files&responseType=json'\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Used by the {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter upload adapter}.\n *\n * @member {String} module:ckfinder/ckfinder~CKFinderConfig#uploadUrl\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditorui\n */\n\nimport EditorUI from '@ckeditor/ckeditor5-core/src/editor/editorui';\nimport enableToolbarKeyboardFocus from '@ckeditor/ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus';\nimport normalizeToolbarConfig from '@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig';\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/src/view/placeholder';\nimport ElementReplacer from '@ckeditor/ckeditor5-utils/src/elementreplacer';\n\n/**\n * The classic editor UI class.\n *\n * @extends module:core/editor/editorui~EditorUI\n */\nexport default class ClassicEditorUI extends EditorUI {\n\t/**\n\t * Creates an instance of the classic editor UI class.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {module:ui/editorui/editoruiview~EditorUIView} view The view of the UI.\n\t */\n\tconstructor( editor, view ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The main (top–most) view of the editor UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/editorui/editoruiview~EditorUIView} #view\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * A normalized `config.toolbar` object.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._toolbarConfig = normalizeToolbarConfig( editor.config.get( 'toolbar' ) );\n\n\t\t/**\n\t\t * The element replacer instance used to hide the editor's source element.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/elementreplacer~ElementReplacer}\n\t\t */\n\t\tthis._elementReplacer = new ElementReplacer();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget element() {\n\t\treturn this.view.element;\n\t}\n\n\t/**\n\t * Initializes the UI.\n\t *\n\t * @param {HTMLElement|null} replacementElement The DOM element that will be the source for the created editor.\n\t */\n\tinit( replacementElement ) {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\t\tconst editingView = editor.editing.view;\n\t\tconst editable = view.editable;\n\t\tconst editingRoot = editingView.document.getRoot();\n\n\t\t// The editable UI and editing root should share the same name. Then name is used\n\t\t// to recognize the particular editable, for instance in ARIA attributes.\n\t\teditable.name = editingRoot.rootName;\n\n\t\tview.render();\n\n\t\t// The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n\t\t// But it can be available earlier if a DOM element has been passed to BalloonEditor.create().\n\t\tconst editableElement = editable.element;\n\n\t\t// Register the editable UI view in the editor. A single editor instance can aggregate multiple\n\t\t// editable areas (roots) but the classic editor has only one.\n\t\tthis.setEditableElement( editable.name, editableElement );\n\n\t\t// Let the global focus tracker know that the editable UI element is focusable and\n\t\t// belongs to the editor. From now on, the focus tracker will sustain the editor focus\n\t\t// as long as the editable is focused (e.g. the user is typing).\n\t\tthis.focusTracker.add( editableElement );\n\n\t\t// Let the editable UI element respond to the changes in the global editor focus\n\t\t// tracker. It has been added to the same tracker a few lines above but, in reality, there are\n\t\t// many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n\t\t// as they have focus, the editable should act like it is focused too (although technically\n\t\t// it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n\t\t// Doing otherwise will result in editable focus styles disappearing, once e.g. the\n\t\t// toolbar gets focused.\n\t\tview.editable.bind( 'isFocused' ).to( this.focusTracker );\n\n\t\t// Bind the editable UI element to the editing view, making it an end– and entry–point\n\t\t// of the editor's engine. This is where the engine meets the UI.\n\t\teditingView.attachDomRoot( editableElement );\n\n\t\t// If an element containing the initial data of the editor was provided, replace it with\n\t\t// an editor instance's UI in DOM until the editor is destroyed. For instance, a <textarea>\n\t\t// can be such element.\n\t\tif ( replacementElement ) {\n\t\t\tthis._elementReplacer.replace( replacementElement, this.element );\n\t\t}\n\n\t\tthis._initPlaceholder();\n\t\tthis._initToolbar();\n\t\tthis.fire( 'ready' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tconst view = this.view;\n\t\tconst editingView = this.editor.editing.view;\n\n\t\tthis._elementReplacer.restore();\n\t\teditingView.detachDomRoot( view.editable.name );\n\t\tview.destroy();\n\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Initializes the editor toolbar.\n\t *\n\t * @private\n\t */\n\t_initToolbar() {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\t\tconst editingView = editor.editing.view;\n\n\t\t// Set–up the sticky panel with toolbar.\n\t\tview.stickyPanel.bind( 'isActive' ).to( this.focusTracker, 'isFocused' );\n\t\tview.stickyPanel.limiterElement = view.element;\n\n\t\tif ( this._toolbarConfig.viewportTopOffset ) {\n\t\t\tview.stickyPanel.viewportTopOffset = this._toolbarConfig.viewportTopOffset;\n\t\t}\n\n\t\tview.toolbar.fillFromConfig( this._toolbarConfig.items, this.componentFactory );\n\n\t\tenableToolbarKeyboardFocus( {\n\t\t\torigin: editingView,\n\t\t\toriginFocusTracker: this.focusTracker,\n\t\t\toriginKeystrokeHandler: editor.keystrokes,\n\t\t\ttoolbar: view.toolbar\n\t\t} );\n\t}\n\n\t/**\n\t * Enable the placeholder text on the editing root, if any was configured.\n\t *\n\t * @private\n\t */\n\t_initPlaceholder() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst editingRoot = editingView.document.getRoot();\n\t\tconst sourceElement = editor.sourceElement;\n\n\t\tconst placeholderText = editor.config.get( 'placeholder' ) ||\n\t\t\tsourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.getAttribute( 'placeholder' );\n\n\t\tif ( placeholderText ) {\n\t\t\tenablePlaceholder( {\n\t\t\t\tview: editingView,\n\t\t\t\telement: editingRoot,\n\t\t\t\ttext: placeholderText,\n\t\t\t\tisDirectHost: false\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editorui/boxed/boxededitoruiview\n */\nimport EditorUIView from '../../editorui/editoruiview';\nimport LabelView from '../../label/labelview';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n/**\n * The boxed editor UI view class. This class represents an editor interface\n * consisting of a toolbar and an editable area, enclosed within a box.\n *\n * @extends module:ui/editorui/editoruiview~EditorUIView\n */\nexport default class BoxedEditorUIView extends EditorUIView {\n    /**\n\t * Creates an instance of the boxed editor UI view class.\n\t *\n\t * @param {module:utils/locale~Locale} locale The locale instance..\n\t */\n    constructor(locale) {\n        super(locale);\n        const ariaLabelUid = uid();\n        /**\n\t\t * Collection of the child views located in the top (`.ck-editor__top`)\n\t\t * area of the UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.top = this.createCollection();\n        /**\n\t\t * Collection of the child views located in the main (`.ck-editor__main`)\n\t\t * area of the UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this.main = this.createCollection();\n        /**\n\t\t * Voice label of the UI.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #_voiceLabelView\n\t\t */\n        this._voiceLabelView = this._createVoiceLabel(ariaLabelUid);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset',\n                    'ck-editor',\n                    'ck-rounded-corners'\n                ],\n                role: 'application',\n                dir: locale.uiLanguageDirection,\n                lang: locale.uiLanguage,\n                'aria-labelledby': `ck-editor__aria-label_${ ariaLabelUid }`\n            },\n            children: [\n                this._voiceLabelView,\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-editor__top',\n                            'ck-reset_all'\n                        ],\n                        role: 'presentation'\n                    },\n                    children: this.top\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-editor__main'\n                        ],\n                        role: 'presentation'\n                    },\n                    children: this.main\n                }\n            ]\n        });\n    }\n    /**\n\t * Creates a voice label view instance.\n\t *\n\t * @private\n\t * @returns {module:ui/label/labelview~LabelView}\n\t */\n    _createVoiceLabel(ariaLabelUid) {\n        const t = this.t;\n        const voiceLabel = new LabelView();\n        voiceLabel.text = t('Rich Text Editor');\n        voiceLabel.extendTemplate({\n            attributes: {\n                id: `ck-editor__aria-label_${ ariaLabelUid }`,\n                class: 'ck-voice-label'\n            }\n        });\n        return voiceLabel;\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/panel/sticky/stickypanelview\n */\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport View from '../../view';\nimport Template from '../../template';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\n\nimport '../../../theme/components/panel/stickypanel.css';\n\nconst toPx = toUnit( 'px' );\n\n/**\n * The sticky panel view class.\n */\nexport default class StickyPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Controls whether the sticky panel should be active.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isActive\n\t\t */\n\t\tthis.set( 'isActive', false );\n\n\t\t/**\n\t\t * Controls whether the sticky panel is in the \"sticky\" state.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isSticky\n\t\t */\n\t\tthis.set( 'isSticky', false );\n\n\t\t/**\n\t\t * The limiter element for the sticky panel instance. Its bounding rect limits\n\t\t * the \"stickyness\" of the panel, i.e. when the panel reaches the bottom\n\t\t * edge of the limiter, it becomes sticky to that edge and does not float\n\t\t * off the limiter. It is mandatory for the panel to work properly and once\n\t\t * set, it cannot be changed.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {HTMLElement} #limiterElement\n\t\t */\n\t\tthis.set( 'limiterElement', null );\n\n\t\t/**\n\t\t * The offset from the bottom edge of {@link #limiterElement}\n\t\t * which stops the panel from stickying any further to prevent limiter's content\n\t\t * from being completely covered.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @default 50\n\t\t * @member {Number} #limiterBottomOffset\n\t\t */\n\t\tthis.set( 'limiterBottomOffset', 50 );\n\n\t\t/**\n\t\t * The offset from the top edge of the web browser's viewport which makes the\n\t\t * panel become sticky. The default value is `0`, which means the panel becomes\n\t\t * sticky when it's upper edge touches the top of the page viewport.\n\t\t *\n\t\t * This attribute is useful when the web page has UI elements positioned to the top\n\t\t * either using `position: fixed` or `position: sticky`, which would cover the\n\t\t * sticky panel or vice–versa (depending on the `z-index` hierarchy).\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #viewportTopOffset\n\t\t */\n\t\tthis.set( 'viewportTopOffset', 0 );\n\n\t\t/**\n\t\t * Controls the `margin-left` CSS style of the panel.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String} #_marginLeft\n\t\t */\n\t\tthis.set( '_marginLeft', null );\n\n\t\t/**\n\t\t * Set `true` if the sticky panel reached the bottom edge of the\n\t\t * {@link #limiterElement}.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_isStickyToTheLimiter\n\t\t */\n\t\tthis.set( '_isStickyToTheLimiter', false );\n\n\t\t/**\n\t\t * Set `true` if the sticky panel uses the {@link #viewportTopOffset},\n\t\t * i.e. not {@link #_isStickyToTheLimiter} and the {@link #viewportTopOffset}\n\t\t * is not `0`.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_hasViewportTopOffset\n\t\t */\n\t\tthis.set( '_hasViewportTopOffset', false );\n\n\t\t/**\n\t\t * Collection of the child views which creates balloon panel contents.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.content = this.createCollection();\n\n\t\t/**\n\t\t * The DOM bounding client rect of the {@link module:ui/view~View#element} of the panel.\n\t\t *\n\t\t * @protected\n\t\t * @member {Object} #_panelRect\n\t\t */\n\n\t\t/**\n\t\t * The DOM bounding client rect of the {@link #limiterElement}\n\t\t * of the panel.\n\t\t *\n\t\t * @protected\n\t\t * @member {Object} #_limiterRect\n\t\t */\n\n\t\t/**\n\t\t * A dummy element which visually fills the space as long as the\n\t\t * actual panel is sticky. It prevents flickering of the UI.\n\t\t *\n\t\t * @protected\n\t\t * @property {HTMLElement}\n\t\t */\n\t\tthis._contentPanelPlaceholder = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-sticky-panel__placeholder'\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\tdisplay: bind.to( 'isSticky', isSticky => isSticky ? 'block' : 'none' ),\n\t\t\t\t\theight: bind.to( 'isSticky', isSticky => {\n\t\t\t\t\t\treturn isSticky ? toPx( this._panelRect.height ) : null;\n\t\t\t\t\t} )\n\t\t\t\t}\n\t\t\t}\n\t\t} ).render();\n\n\t\t/**\n\t\t * The panel which accepts children into {@link #content} collection.\n\t\t * Also an element which is positioned when {@link #isSticky}.\n\t\t *\n\t\t * @protected\n\t\t * @property {HTMLElement}\n\t\t */\n\t\tthis._contentPanel = new Template( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-sticky-panel__content',\n\t\t\t\t\t// Toggle class of the panel when \"sticky\" state changes in the view.\n\t\t\t\t\tbind.if( 'isSticky', 'ck-sticky-panel__content_sticky' ),\n\t\t\t\t\tbind.if( '_isStickyToTheLimiter', 'ck-sticky-panel__content_sticky_bottom-limit' ),\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\twidth: bind.to( 'isSticky', isSticky => {\n\t\t\t\t\t\treturn isSticky ? toPx( this._contentPanelPlaceholder.getBoundingClientRect().width ) : null;\n\t\t\t\t\t} ),\n\n\t\t\t\t\ttop: bind.to( '_hasViewportTopOffset', _hasViewportTopOffset => {\n\t\t\t\t\t\treturn _hasViewportTopOffset ? toPx( this.viewportTopOffset ) : null;\n\t\t\t\t\t} ),\n\n\t\t\t\t\tbottom: bind.to( '_isStickyToTheLimiter', _isStickyToTheLimiter => {\n\t\t\t\t\t\treturn _isStickyToTheLimiter ? toPx( this.limiterBottomOffset ) : null;\n\t\t\t\t\t} ),\n\n\t\t\t\t\tmarginLeft: bind.to( '_marginLeft' )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.content\n\t\t} ).render();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-sticky-panel'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis._contentPanelPlaceholder,\n\t\t\t\tthis._contentPanel\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Check if the panel should go into the sticky state immediately.\n\t\tthis._checkIfShouldBeSticky();\n\n\t\t// Update sticky state of the panel as the window is being scrolled.\n\t\tthis.listenTo( global.window, 'scroll', () => {\n\t\t\tthis._checkIfShouldBeSticky();\n\t\t} );\n\n\t\t// Synchronize with `model.isActive` because sticking an inactive panel is pointless.\n\t\tthis.listenTo( this, 'change:isActive', () => {\n\t\t\tthis._checkIfShouldBeSticky();\n\t\t} );\n\t}\n\n\t/**\n\t * Analyzes the environment to decide whether the panel should\n\t * be sticky or not.\n\t *\n\t * @protected\n\t */\n\t_checkIfShouldBeSticky() {\n\t\tconst panelRect = this._panelRect = this._contentPanel.getBoundingClientRect();\n\t\tlet limiterRect;\n\n\t\tif ( !this.limiterElement ) {\n\t\t\tthis.isSticky = false;\n\t\t} else {\n\t\t\tlimiterRect = this._limiterRect = this.limiterElement.getBoundingClientRect();\n\n\t\t\t// The panel must be active to become sticky.\n\t\t\tthis.isSticky = this.isActive &&\n\t\t\t\t// The limiter's top edge must be beyond the upper edge of the visible viewport (+the viewportTopOffset).\n\t\t\t\tlimiterRect.top < this.viewportTopOffset &&\n\t\t\t\t// The model#limiterElement's height mustn't be smaller than the panel's height and model#limiterBottomOffset.\n\t\t\t\t// There's no point in entering the sticky mode if the model#limiterElement is very, very small, because\n\t\t\t\t// it would immediately set model#_isStickyToTheLimiter true and, given model#limiterBottomOffset, the panel\n\t\t\t\t// would be positioned before the model#limiterElement.\n\t\t\t\tthis._panelRect.height + this.limiterBottomOffset < limiterRect.height;\n\t\t}\n\n\t\t// Stick the panel to the top edge of the viewport simulating CSS position:sticky.\n\t\t// TODO: Possibly replaced by CSS in the future http://caniuse.com/#feat=css-sticky\n\t\tif ( this.isSticky ) {\n\t\t\tthis._isStickyToTheLimiter =\n\t\t\t\tlimiterRect.bottom < panelRect.height + this.limiterBottomOffset + this.viewportTopOffset;\n\t\t\tthis._hasViewportTopOffset = !this._isStickyToTheLimiter && !!this.viewportTopOffset;\n\t\t\tthis._marginLeft = this._isStickyToTheLimiter ? null : toPx( -global.window.scrollX );\n\t\t}\n\t\t// Detach the panel from the top edge of the viewport.\n\t\telse {\n\t\t\tthis._isStickyToTheLimiter = false;\n\t\t\tthis._hasViewportTopOffset = false;\n\t\t\tthis._marginLeft = null;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditoruiview\n */\n\nimport BoxedEditorUIView from '@ckeditor/ckeditor5-ui/src/editorui/boxed/boxededitoruiview';\nimport InlineEditableUIView from '@ckeditor/ckeditor5-ui/src/editableui/inline/inlineeditableuiview';\nimport StickyPanelView from '@ckeditor/ckeditor5-ui/src/panel/sticky/stickypanelview';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\n\nimport '../theme/classiceditor.css';\n\n/**\n * Classic editor UI view. Uses an inline editable and a sticky toolbar, all\n * enclosed in a boxed UI view.\n *\n * @extends module:ui/editorui/boxed/boxededitoruiview~BoxedEditorUIView\n */\nexport default class ClassicEditorUIView extends BoxedEditorUIView {\n\t/**\n\t * Creates an instance of the classic editor UI view.\n\t *\n\t * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param {module:engine/view/view~View} editingView The editing view instance this view is related to.\n\t */\n\tconstructor( locale, editingView ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Sticky panel view instance. This is a parent view of a {@link #toolbar}\n\t\t * that makes toolbar sticky.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/panel/sticky/stickypanelview~StickyPanelView}\n\t\t */\n\t\tthis.stickyPanel = new StickyPanelView( locale );\n\n\t\t/**\n\t\t * Toolbar view instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarView}\n\t\t */\n\t\tthis.toolbar = new ToolbarView( locale, {\n\t\t\tshouldGroupWhenFull: true\n\t\t} );\n\n\t\t/**\n\t\t * Editable UI view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView}\n\t\t */\n\t\tthis.editable = new InlineEditableUIView( locale, editingView );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Set toolbar as a child of a stickyPanel and makes toolbar sticky.\n\t\tthis.stickyPanel.content.add( this.toolbar );\n\n\t\tthis.top.add( this.stickyPanel );\n\t\tthis.main.add( this.editable );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditor\n */\n\nimport Editor from '@ckeditor/ckeditor5-core/src/editor/editor';\nimport DataApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin';\nimport ElementApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/elementapimixin';\nimport attachToForm from '@ckeditor/ckeditor5-core/src/editor/utils/attachtoform';\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\nimport ClassicEditorUI from './classiceditorui';\nimport ClassicEditorUIView from './classiceditoruiview';\nimport getDataFromElement from '@ckeditor/ckeditor5-utils/src/dom/getdatafromelement';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isElement } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The {@glink builds/guides/overview#classic-editor classic editor} implementation.\n * It uses an inline editable and a sticky toolbar, all enclosed in a boxed UI.\n * See the {@glink examples/builds/classic-editor demo}.\n *\n * In order to create a classic editor instance, use the static\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method.\n *\n * # Classic editor and classic build\n *\n * The classic editor can be used directly from source (if you installed the\n * [`@ckeditor/ckeditor5-editor-classic`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-classic) package)\n * but it is also available in the {@glink builds/guides/overview#classic-editor classic build}.\n *\n * {@glink builds/guides/overview Builds} are ready-to-use editors with plugins bundled in. When using the editor from\n * source you need to take care of loading all plugins by yourself\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\n * Using the editor from source gives much better flexibility and allows easier customization.\n *\n * Read more about initializing the editor from source or as a build in\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n *\n * @mixes module:core/editor/utils/dataapimixin~DataApiMixin\n * @mixes module:core/editor/utils/elementapimixin~ElementApiMixin\n * @implements module:core/editor/editorwithui~EditorWithUI\n * @extends module:core/editor/editor~Editor\n */\nexport default class ClassicEditor extends Editor {\n\t/**\n\t * Creates an instance of the classic editor.\n\t *\n\t * **Note:** do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method instead.\n\t *\n\t * @protected\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data. For more information see\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n\t * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n\t */\n\tconstructor( sourceElementOrData, config ) {\n\t\tsuper( config );\n\n\t\tif ( isElement( sourceElementOrData ) ) {\n\t\t\tthis.sourceElement = sourceElementOrData;\n\t\t}\n\n\t\tthis.data.processor = new HtmlDataProcessor();\n\n\t\tthis.model.document.createRoot();\n\n\t\tthis.ui = new ClassicEditorUI( this, new ClassicEditorUIView( this.locale, this.editing.view ) );\n\n\t\tattachToForm( this );\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * Updates the editor's source element with the data.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\tif ( this.sourceElement ) {\n\t\t\tthis.updateSourceElement();\n\t\t}\n\n\t\tthis.ui.destroy();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Creates a new classic editor instance.\n\t *\n\t * There are three ways how the editor can be initialized.\n\t *\n\t * # Replacing a DOM element (and loading data from it)\n\t *\n\t * You can initialize the editor using an existing DOM element:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ) )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * The element's content will be used as the editor data and the element will be replaced by the editor UI.\n\t *\n\t * # Creating a detached editor\n\t *\n\t * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n\t * In this case, the editor will render an element that must be inserted into the DOM:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( '<p>Hello world!</p>' )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t *\t\t\t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n\t *\t\t\t\tdocument.body.appendChild( editor.ui.element );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n\t * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n\t *\n\t * # Replacing a DOM element (and data provided in `config.initialData`)\n\t *\n\t * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ), {\n\t *\t\t\t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n\t * makes it difficult to set the content of the source element.\n\t *\n\t * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n\t *\n\t * # Configuring the editor\n\t *\n\t * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n\t * customizing plugins, toolbar and more.\n\t *\n\t * # Using the editor from source\n\t *\n\t * The code samples listed in the previous sections of this documentation assume that you are using an\n\t * {@glink builds/guides/overview editor build} (for example – `@ckeditor/ckeditor5-build-classic`).\n\t *\n\t * If you want to use the classic editor from source (`@ckeditor/ckeditor5-editor-classic/src/classiceditor`),\n\t * you need to define the list of\n\t * {@link module:core/editor/editorconfig~EditorConfig#plugins plugins to be initialized} and\n\t * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar items}. Read more about using the editor from\n\t * source in the {@glink builds/guides/integration/advanced-setup \"Advanced setup\" guide}.\n\t *\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data.\n\t *\n\t * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization\n\t * and the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element editor element} will replace the passed element\n\t * in the DOM (the original one will be hidden and the editor will be injected next to it).\n\t *\n\t * Moreover, the editor data will be set back to the original element once the editor is destroyed and when a form, in which\n\t * this element is contained, is submitted (if the original element is a `<textarea>`). This ensures seamless integration with native\n\t * web forms.\n\t *\n\t * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n\t * It is available under the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element `editor.ui.element`} property.\n\t *\n\t * @param {module:core/editor/editorconfig~EditorConfig} [config] The editor configuration.\n\t * @returns {Promise} A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n\t */\n\tstatic create( sourceElementOrData, config = {} ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst editor = new this( sourceElementOrData, config );\n\n\t\t\tresolve(\n\t\t\t\teditor.initPlugins()\n\t\t\t\t\t.then( () => editor.ui.init( isElement( sourceElementOrData ) ? sourceElementOrData : null ) )\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\tif ( !isElement( sourceElementOrData ) && config.initialData ) {\n\t\t\t\t\t\t\t// Documented in core/editor/editorconfig.jdoc.\n\t\t\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t\t\t'editor-create-initial-data: ' +\n\t\t\t\t\t\t\t\t'The config.initialData option cannot be used together with initial data passed in Editor.create().',\n\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst initialData = config.initialData || getInitialData( sourceElementOrData );\n\n\t\t\t\t\t\treturn editor.data.init( initialData );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => editor.fire( 'ready' ) )\n\t\t\t\t\t.then( () => editor )\n\t\t\t);\n\t\t} );\n\t}\n}\n\nmix( ClassicEditor, DataApiMixin );\nmix( ClassicEditor, ElementApiMixin );\n\nfunction getInitialData( sourceElementOrData ) {\n\treturn isElement( sourceElementOrData ) ? getDataFromElement( sourceElementOrData ) : sourceElementOrData;\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.cloneWith` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @param {Function} [customizer] The function to customize cloning.\n * @returns {*} Returns the deep cloned value.\n * @see _.cloneWith\n * @example\n *\n * function customizer(value) {\n *   if (_.isElement(value)) {\n *     return value.cloneNode(true);\n *   }\n * }\n *\n * var el = _.cloneDeepWith(document.body, customizer);\n *\n * console.log(el === document.body);\n * // => false\n * console.log(el.nodeName);\n * // => 'BODY'\n * console.log(el.childNodes.length);\n * // => 20\n */\nfunction cloneDeepWith(value, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n}\n\nexport default cloneDeepWith;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/textwatcher\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport getLastTextLine from './utils/getlasttextline';\n\n/**\n * The text watcher feature.\n *\n * Fires the {@link module:typing/textwatcher~TextWatcher#event:matched:data `matched:data`},\n * {@link module:typing/textwatcher~TextWatcher#event:matched:selection `matched:selection`} and\n * {@link module:typing/textwatcher~TextWatcher#event:unmatched `unmatched`} events on typing or selection changes.\n *\n * @private\n */\nexport default class TextWatcher {\n\t/**\n\t * Creates a text watcher instance.\n\t * @param {module:engine/model/model~Model} model\n\t * @param {Function} testCallback The function used to match the text.\n\t */\n\tconstructor( model, testCallback ) {\n\t\tthis.model = model;\n\t\tthis.testCallback = testCallback;\n\t\tthis.hasMatch = false;\n\n\t\tthis._startListening();\n\t}\n\n\t/**\n\t * Starts listening to the editor for typing and selection events.\n\t *\n\t * @private\n\t */\n\t_startListening() {\n\t\tconst model = this.model;\n\t\tconst document = model.document;\n\n\t\tdocument.selection.on( 'change:range', ( evt, { directChange } ) => {\n\t\t\t// Indirect changes (i.e. when the user types or external changes are applied) are handled in the document's change event.\n\t\t\tif ( !directChange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Act only on collapsed selection.\n\t\t\tif ( !document.selection.isCollapsed ) {\n\t\t\t\tif ( this.hasMatch ) {\n\t\t\t\t\tthis.fire( 'unmatched' );\n\t\t\t\t\tthis.hasMatch = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._evaluateTextBeforeSelection( 'selection' );\n\t\t} );\n\n\t\tdocument.on( 'change:data', ( evt, batch ) => {\n\t\t\tif ( batch.type == 'transparent' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._evaluateTextBeforeSelection( 'data', { batch } );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the editor content for matched text.\n\t *\n\t * @fires matched:data\n\t * @fires matched:selection\n\t * @fires unmatched\n\t *\n\t * @private\n\t * @param {'data'|'selection'} suffix A suffix used for generating the event name.\n\t * @param {Object} data Data object for event.\n\t */\n\t_evaluateTextBeforeSelection( suffix, data = {} ) {\n\t\tconst model = this.model;\n\t\tconst document = model.document;\n\t\tconst selection = document.selection;\n\n\t\tconst rangeBeforeSelection = model.createRange( model.createPositionAt( selection.focus.parent, 0 ), selection.focus );\n\n\t\tconst { text, range } = getLastTextLine( rangeBeforeSelection, model );\n\n\t\tconst textHasMatch = this.testCallback( text );\n\n\t\tif ( !textHasMatch && this.hasMatch ) {\n\t\t\t/**\n\t\t\t * Fired whenever the text does not match anymore. Fired only when the text watcher found a match.\n\t\t\t *\n\t\t\t * @event unmatched\n\t\t\t */\n\t\t\tthis.fire( 'unmatched' );\n\t\t}\n\n\t\tthis.hasMatch = textHasMatch;\n\n\t\tif ( textHasMatch ) {\n\t\t\tconst eventData = Object.assign( data, { text, range } );\n\n\t\t\t/**\n\t\t\t * Fired whenever the text watcher found a match for data changes.\n\t\t\t *\n\t\t\t * @event matched:data\n\t\t\t * @param {Object} data Event data.\n\t\t\t * @param {String} data.text The full text before selection.\n\t\t\t * @param {module:engine/model/batch~Batch} data.batch A batch associated with a change.\n\t\t\t */\n\t\t\t/**\n\t\t\t * Fired whenever the text watcher found a match for selection changes.\n\t\t\t *\n\t\t\t * @event matched:selection\n\t\t\t * @param {Object} data Event data.\n\t\t\t * @param {String} data.text The full text before selection.\n\t\t\t */\n\t\t\tthis.fire( `matched:${ suffix }`, eventData );\n\t\t}\n\t}\n}\n\nmix( TextWatcher, EmitterMixin );\n\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module mention/mentioncommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { _addMentionAttributes } from './mentionediting';\n\n/**\n * The mention command.\n *\n * The command is registered by {@link module:mention/mentionediting~MentionEditing} as `'mention'`.\n *\n * To insert a mention onto a range, execute the command and specify a mention object with a range to replace:\n *\n *\t\tconst focus = editor.model.document.selection.focus;\n *\n *\t\t// It will replace one character before the selection focus with the '#1234' text\n *\t\t// with the mention attribute filled with passed attributes.\n *\t\teditor.execute( 'mention', {\n *\t\t\tmarker: '#',\n *\t\t\tmention: {\n *\t\t\t\tid: '#1234',\n *\t\t\t\tname: 'Foo',\n *\t\t\t\ttitle: 'Big Foo'\n *\t\t\t},\n *\t\t\trange: model.createRange( focus, focus.getShiftedBy( -1 ) )\n *\t\t} );\n *\n *\t\t// It will replace one character before the selection focus with the 'The \"Big Foo\"' text\n *\t\t// with the mention attribute filled with passed attributes.\n *\t\teditor.execute( 'mention', {\n *\t\t\tmarker: '#',\n *\t\t\tmention: {\n *\t\t\t\tid: '#1234',\n *\t\t\t\tname: 'Foo',\n *\t\t\t\ttitle: 'Big Foo'\n *\t\t\t},\n *\t\t\ttext: 'The \"Big Foo\"',\n *\t\t\trange: model.createRange( focus, focus.getShiftedBy( -1 ) )\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\nexport default class MentionCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, 'mention' );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @param {Object} [options] Options for the executed command.\n\t * @param {Object|String} options.mention The mention object to insert. When a string is passed, it will be used to create a plain\n\t * object with the name attribute that equals the passed string.\n\t * @param {String} options.marker The marker character (e.g. `'@'`).\n\t * @param {String} [options.text] The text of the inserted mention. Defaults to the full mention string composed from `marker` and\n\t * `mention` string or `mention.id` if an object is passed.\n\t * @param {String} [options.range] The range to replace. Note that the replaced range might be shorter than the inserted text with the\n\t * mention attribute.\n\t * @fires execute\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst selection = document.selection;\n\n\t\tconst mentionData = typeof options.mention == 'string' ? { id: options.mention } : options.mention;\n\t\tconst mentionID = mentionData.id;\n\n\t\tconst range = options.range || selection.getFirstRange();\n\n\t\tconst mentionText = options.text || mentionID;\n\n\t\tconst mention = _addMentionAttributes( { _text: mentionText, id: mentionID }, mentionData );\n\n\t\tif ( options.marker.length != 1 ) {\n\t\t\t/**\n\t\t\t * The marker must be a single character.\n\t\t\t *\n\t\t\t * Correct markers: `'@'`, `'#'`.\n\t\t\t *\n\t\t\t * Incorrect markers: `'$$'`, `'[@'`.\n\t\t\t *\n\t\t\t * See {@link module:mention/mention~MentionConfig}.\n\t\t\t *\n\t\t\t * @error mentioncommand-incorrect-marker\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'mentioncommand-incorrect-marker: The marker must be a single character.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tif ( mentionID.charAt( 0 ) != options.marker ) {\n\t\t\t/**\n\t\t\t * The feed item ID must start with the marker character.\n\t\t\t *\n\t\t\t * Correct mention feed setting:\n\t\t\t *\n\t\t\t *\t\tmentions: [\n\t\t\t *\t\t\t{\n\t\t\t *\t\t\t\tmarker: '@',\n\t\t\t *\t\t\t\tfeed: [ '@Ann', '@Barney', ... ]\n\t\t\t *\t\t\t}\n\t\t\t *\t\t]\n\t\t\t *\n\t\t\t * Incorrect mention feed setting:\n\t\t\t *\n\t\t\t *\t\tmentions: [\n\t\t\t *\t\t\t{\n\t\t\t *\t\t\t\tmarker: '@',\n\t\t\t *\t\t\t\tfeed: [ 'Ann', 'Barney', ... ]\n\t\t\t *\t\t\t}\n\t\t\t *\t\t]\n\t\t\t *\n\t\t\t * See {@link module:mention/mention~MentionConfig}.\n\t\t\t *\n\t\t\t * @error mentioncommand-incorrect-id\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'mentioncommand-incorrect-id: The item id must start with the marker character.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tconst currentAttributes = toMap( selection.getAttributes() );\n\t\t\tconst attributesWithMention = new Map( currentAttributes.entries() );\n\n\t\t\tattributesWithMention.set( 'mention', mention );\n\n\t\t\t// Replace a range with the text with a mention.\n\t\t\tmodel.insertContent( writer.createText( mentionText, attributesWithMention ), range );\n\t\t\tmodel.insertContent( writer.createText( ' ', currentAttributes ), range.start.getShiftedBy( mentionText.length ) );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module mention/mentionediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n\nimport MentionCommand from './mentioncommand';\n\n/**\n * The mention editing feature.\n *\n * It introduces the {@link module:mention/mentioncommand~MentionCommand command} and the `mention`\n * attribute in the {@link module:engine/model/model~Model model} which renders in the {@link module:engine/view/view view}\n * as a `<span class=\"mention\" data-mention=\"@mention\">`.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class MentionEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'MentionEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst doc = model.document;\n\n\t\t// Allow the mention attribute on all text nodes.\n\t\tmodel.schema.extend( '$text', { allowAttributes: 'mention' } );\n\n\t\t// Upcast conversion.\n\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: 'span',\n\t\t\t\tkey: 'data-mention',\n\t\t\t\tclasses: 'mention'\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'mention',\n\t\t\t\tvalue: _toMentionAttribute\n\t\t\t}\n\t\t} );\n\n\t\t// Downcast conversion.\n\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t\t\tmodel: 'mention',\n\t\t\tview: createViewMentionElement\n\t\t} );\n\t\teditor.conversion.for( 'downcast' ).add( preventPartialMentionDowncast );\n\n\t\tdoc.registerPostFixer( writer => removePartialMentionPostFixer( writer, doc, model.schema ) );\n\t\tdoc.registerPostFixer( writer => extendAttributeOnMentionPostFixer( writer, doc ) );\n\t\tdoc.registerPostFixer( writer => selectionMentionAttributePostFixer( writer, doc ) );\n\n\t\teditor.commands.add( 'mention', new MentionCommand( editor ) );\n\t}\n}\n\nexport function _addMentionAttributes( baseMentionData, data ) {\n\treturn Object.assign( { _uid: uid() }, baseMentionData, data || {} );\n}\n\n/**\n * Creates a mention attribute value from the provided view element and optional data.\n *\n * This function is exposed as\n * {@link module:mention/mention~Mention#toMentionAttribute `editor.plugins.get( 'Mention' ).toMentionAttribute()`}.\n *\n * @protected\n * @param {module:engine/view/element~Element} viewElementOrMention\n * @param {String|Object} [data] Mention data to be extended.\n * @return {module:mention/mention~MentionAttribute}\n */\nexport function _toMentionAttribute( viewElementOrMention, data ) {\n\tconst dataMention = viewElementOrMention.getAttribute( 'data-mention' );\n\n\tconst textNode = viewElementOrMention.getChild( 0 );\n\n\t// Do not convert empty mentions.\n\tif ( !textNode ) {\n\t\treturn;\n\t}\n\n\tconst baseMentionData = {\n\t\tid: dataMention,\n\t\t_text: textNode.data\n\t};\n\n\treturn _addMentionAttributes( baseMentionData, data );\n}\n\n// A converter that blocks partial mention from being converted.\n//\n// This converter is registered with 'highest' priority in order to consume mention attribute before it is converted by\n// any other converters. This converter only consumes partial mention - those whose `_text` attribute is not equal to text with mention\n// attribute. This may happen when copying part of mention text.\n//\n// @param {module:engine/conversion/dwoncastdispatcher~DowncastDispatcher}\nfunction preventPartialMentionDowncast( dispatcher ) {\n\tdispatcher.on( 'attribute:mention', ( evt, data, conversionApi ) => {\n\t\tconst mention = data.attributeNewValue;\n\n\t\tif ( !data.item.is( 'textProxy' ) || !mention ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst start = data.range.start;\n\t\tconst textNode = start.textNode || start.nodeAfter;\n\n\t\tif ( textNode.data != mention._text ) {\n\t\t\t// Consume item to prevent partial mention conversion.\n\t\t\tconversionApi.consumable.consume( data.item, evt.name );\n\t\t}\n\t}, { priority: 'highest' } );\n}\n\n// Creates a mention element from the mention data.\n//\n// @param {Object} mention\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @returns {module:engine/view/attributeelement~AttributeElement}\nfunction createViewMentionElement( mention, viewWriter ) {\n\tif ( !mention ) {\n\t\treturn;\n\t}\n\n\tconst attributes = {\n\t\tclass: 'mention',\n\t\t'data-mention': mention.id\n\t};\n\n\tconst options = {\n\t\tid: mention._uid,\n\t\tpriority: 20\n\t};\n\n\treturn viewWriter.createAttributeElement( 'span', attributes, options );\n}\n\n// Model post-fixer that disallows typing with selection when the selection is placed after the text node with the mention attribute or\n// before a text node with mention attribute.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/document~Document} doc\n// @returns {Boolean} Returns `true` if the selection was fixed.\nfunction selectionMentionAttributePostFixer( writer, doc ) {\n\tconst selection = doc.selection;\n\tconst focus = selection.focus;\n\n\tif ( selection.isCollapsed && selection.hasAttribute( 'mention' ) && shouldNotTypeWithMentionAt( focus ) ) {\n\t\twriter.removeSelectionAttribute( 'mention' );\n\n\t\treturn true;\n\t}\n}\n\n// Helper function to detect if mention attribute should be removed from selection.\n// This check makes only sense if the selection has mention attribute.\n//\n// The mention attribute should be removed from a selection when selection focus is placed:\n// a) after a text node\n// b) the position is at parents start - the selection will set attributes from node after.\nfunction shouldNotTypeWithMentionAt( position ) {\n\tconst isAtStart = position.isAtStart;\n\tconst isAfterAMention = position.nodeBefore && position.nodeBefore.is( 'text' );\n\n\treturn isAfterAMention || isAtStart;\n}\n\n// Model post-fixer that removes the mention attribute from the modified text node.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/document~Document} doc\n// @returns {Boolean} Returns `true` if the selection was fixed.\nfunction removePartialMentionPostFixer( writer, doc, schema ) {\n\tconst changes = doc.differ.getChanges();\n\n\tlet wasChanged = false;\n\n\tfor ( const change of changes ) {\n\t\t// Checks the text node on the current position.\n\t\tconst position = change.position;\n\n\t\tif ( change.name == '$text' ) {\n\t\t\tconst nodeAfterInsertedTextNode = position.textNode && position.textNode.nextSibling;\n\n\t\t\t// Checks the text node where the change occurred.\n\t\t\twasChanged = checkAndFix( position.textNode, writer ) || wasChanged;\n\n\t\t\t// Occurs on paste inside a text node with mention.\n\t\t\twasChanged = checkAndFix( nodeAfterInsertedTextNode, writer ) || wasChanged;\n\t\t\twasChanged = checkAndFix( position.nodeBefore, writer ) || wasChanged;\n\t\t\twasChanged = checkAndFix( position.nodeAfter, writer ) || wasChanged;\n\t\t}\n\n\t\t// Checks text nodes in inserted elements (might occur when splitting a paragraph or pasting content inside text with mention).\n\t\tif ( change.name != '$text' && change.type == 'insert' ) {\n\t\t\tconst insertedNode = position.nodeAfter;\n\n\t\t\tfor ( const item of writer.createRangeIn( insertedNode ).getItems() ) {\n\t\t\t\twasChanged = checkAndFix( item, writer ) || wasChanged;\n\t\t\t}\n\t\t}\n\n\t\t// Inserted inline elements might break mention.\n\t\tif ( change.type == 'insert' && schema.isInline( change.name ) ) {\n\t\t\tconst nodeAfterInserted = position.nodeAfter && position.nodeAfter.nextSibling;\n\n\t\t\twasChanged = checkAndFix( position.nodeBefore, writer ) || wasChanged;\n\t\t\twasChanged = checkAndFix( nodeAfterInserted, writer ) || wasChanged;\n\t\t}\n\t}\n\n\treturn wasChanged;\n}\n\n// This post-fixer will extend the attribute applied on the part of the mention so the whole text node of the mention will have\n// the added attribute.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/document~Document} doc\n// @returns {Boolean} Returns `true` if the selection was fixed.\nfunction extendAttributeOnMentionPostFixer( writer, doc ) {\n\tconst changes = doc.differ.getChanges();\n\n\tlet wasChanged = false;\n\n\tfor ( const change of changes ) {\n\t\tif ( change.type === 'attribute' && change.attributeKey != 'mention' ) {\n\t\t\t// Checks the node on the left side of the range...\n\t\t\tconst nodeBefore = change.range.start.nodeBefore;\n\t\t\t// ... and on the right side of the range.\n\t\t\tconst nodeAfter = change.range.end.nodeAfter;\n\n\t\t\tfor ( const node of [ nodeBefore, nodeAfter ] ) {\n\t\t\t\tif ( isBrokenMentionNode( node ) && node.getAttribute( change.attributeKey ) != change.attributeNewValue ) {\n\t\t\t\t\twriter.setAttribute( change.attributeKey, change.attributeNewValue, node );\n\n\t\t\t\t\twasChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn wasChanged;\n}\n\n// Checks if a node has a correct mention attribute if present.\n// Returns `true` if the node is text and has a mention attribute whose text does not match the expected mention text.\n//\n// @param {module:engine/model/node~Node} node The node to check.\n// @returns {Boolean}\nfunction isBrokenMentionNode( node ) {\n\tif ( !node || !( node.is( 'text' ) || node.is( 'textProxy' ) ) || !node.hasAttribute( 'mention' ) ) {\n\t\treturn false;\n\t}\n\n\tconst text = node.data;\n\tconst mention = node.getAttribute( 'mention' );\n\n\tconst expectedText = mention._text;\n\n\treturn text != expectedText;\n}\n\n// Fixes a mention on a text node if it needs a fix.\n//\n// @param {module:engine/model/text~Text} textNode\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean}\nfunction checkAndFix( textNode, writer ) {\n\tif ( isBrokenMentionNode( textNode ) ) {\n\t\twriter.removeAttribute( 'mention', textNode );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module mention/ui/mentionsview\n */\n\nimport ListView from '@ckeditor/ckeditor5-ui/src/list/listview';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\n\nimport '../../theme/mentionui.css';\n\n/**\n * The mention ui view.\n *\n * @extends module:ui/list/listview~ListView\n */\nexport default class MentionsView extends ListView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-mentions'\n\t\t\t\t],\n\n\t\t\t\ttabindex: '-1'\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * {@link #select Selects} the first item.\n\t */\n\tselectFirst() {\n\t\tthis.select( 0 );\n\t}\n\n\t/**\n\t * Selects next item to the currently {@link #select selected}.\n\t *\n\t * If the last item is already selected, it will select the first item.\n\t */\n\tselectNext() {\n\t\tconst item = this.selected;\n\t\tconst index = this.items.getIndex( item );\n\n\t\tthis.select( index + 1 );\n\t}\n\n\t/**\n\t * Selects previous item to the currently {@link #select selected}.\n\t *\n\t * If the first item is already selected, it will select the last item.\n\t */\n\tselectPrevious() {\n\t\tconst item = this.selected;\n\t\tconst index = this.items.getIndex( item );\n\n\t\tthis.select( index - 1 );\n\t}\n\n\t/**\n\t * Marks item at a given index as selected.\n\t *\n\t * Handles selection cycling when passed index is out of bounds:\n\t * - if the index is lower than 0, it will select the last item,\n\t * - if the index is higher than the last item index, it will select the first item.\n\t *\n\t * @param {Number} index Index of an item to be marked as selected.\n\t */\n\tselect( index ) {\n\t\tlet indexToGet = 0;\n\n\t\tif ( index > 0 && index < this.items.length ) {\n\t\t\tindexToGet = index;\n\t\t} else if ( index < 0 ) {\n\t\t\tindexToGet = this.items.length - 1;\n\t\t}\n\n\t\tconst item = this.items.get( indexToGet );\n\n\t\t// Return early if item is already selected.\n\t\tif ( this.selected === item ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove highlight of previously selected item.\n\t\tif ( this.selected ) {\n\t\t\tthis.selected.removeHighlight();\n\t\t}\n\n\t\titem.highlight();\n\t\tthis.selected = item;\n\n\t\t// Scroll the mentions view to the selected element.\n\t\tif ( !this._isItemVisibleInScrolledArea( item ) ) {\n\t\t\tthis.element.scrollTop = item.element.offsetTop;\n\t\t}\n\t}\n\n\t/**\n\t * Triggers the `execute` event on the {@link #select selected} item.\n\t */\n\texecuteSelected() {\n\t\tthis.selected.fire( 'execute' );\n\t}\n\n\t// Checks if an item is visible in the scrollable area.\n\t//\n\t// The item is considered visible when:\n\t// - its top boundary is inside the scrollable rect\n\t// - its bottom boundary is inside the scrollable rect (the whole item must be visible)\n\t_isItemVisibleInScrolledArea( item ) {\n\t\treturn new Rect( this.element ).contains( new Rect( item.element ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module mention/ui/domwrapperview\n */\n\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n\n/**\n * This class wraps DOM element as a CKEditor5 UI View.\n *\n * It allows to render any DOM element and use it in mentions list.\n */\nexport default class DomWrapperView extends View {\n\t/**\n\t * Creates an instance of {@link module:mention/ui/domwrapperview~DomWrapperView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t * @param {Element} domElement\n\t */\n\tconstructor( locale, domElement ) {\n\t\tsuper( locale );\n\n\t\t// Disable template rendering on this view.\n\t\tthis.template = false;\n\n\t\t/**\n\t\t * The DOM element for which wrapper was created.\n\t\t *\n\t\t * @type {Element}\n\t\t */\n\t\tthis.domElement = domElement;\n\n\t\t// Render dom wrapper as a button.\n\t\tthis.domElement.classList.add( 'ck-button' );\n\n\t\t/**\n\t\t * Controls whether the dom wrapper view is \"on\". This is in line with {@link module:ui/button/button~Button#isOn} property.\n\t\t *\n\t\t * @observable\n\t\t * @default true\n\t\t * @member {Boolean} #isOn\n\t\t */\n\t\tthis.set( 'isOn', false );\n\n\t\t// Handle isOn state as in buttons.\n\t\tthis.on( 'change:isOn', ( evt, name, isOn ) => {\n\t\t\tif ( isOn ) {\n\t\t\t\tthis.domElement.classList.add( 'ck-on' );\n\t\t\t\tthis.domElement.classList.remove( 'ck-off' );\n\t\t\t} else {\n\t\t\t\tthis.domElement.classList.add( 'ck-off' );\n\t\t\t\tthis.domElement.classList.remove( 'ck-on' );\n\t\t\t}\n\t\t} );\n\n\t\t// Pass click event as execute event.\n\t\tthis.listenTo( this.domElement, 'click', () => {\n\t\t\tthis.fire( 'execute' );\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.element = this.domElement;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module mention/ui/mentionlistitemview\n */\n\nimport ListItemView from '@ckeditor/ckeditor5-ui/src/list/listitemview';\n\nexport default class MentionListItemView extends ListItemView {\n\thighlight() {\n\t\tconst child = this.children.first;\n\n\t\tchild.isOn = true;\n\t}\n\n\tremoveHighlight() {\n\t\tconst child = this.children.first;\n\n\t\tchild.isOn = false;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module mention/mentionui\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\n\nimport TextWatcher from '@ckeditor/ckeditor5-typing/src/textwatcher';\n\nimport MentionsView from './ui/mentionsview';\nimport DomWrapperView from './ui/domwrapperview';\nimport MentionListItemView from './ui/mentionlistitemview';\n\nconst VERTICAL_SPACING = 3;\n\n/**\n * The mention UI feature.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class MentionUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'MentionUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The mention view.\n\t\t *\n\t\t * @type {module:mention/ui/mentionsview~MentionsView}\n\t\t * @private\n\t\t */\n\t\tthis._mentionsView = this._createMentionView();\n\n\t\t/**\n\t\t * Stores mention feeds configurations.\n\t\t *\n\t\t * @type {Map<String, Object>}\n\t\t * @private\n\t\t */\n\t\tthis._mentionsConfigurations = new Map();\n\n\t\teditor.config.define( 'mention', { feeds: [] } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t/**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n\t\tthis._balloon = editor.plugins.get( ContextualBalloon );\n\n\t\t// Key listener that handles navigation in mention view.\n\t\teditor.editing.view.document.on( 'keydown', ( evt, data ) => {\n\t\t\tif ( isHandledKey( data.keyCode ) && this._isUIVisible ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop(); // Required for Enter key overriding.\n\n\t\t\t\tif ( data.keyCode == keyCodes.arrowdown ) {\n\t\t\t\t\tthis._mentionsView.selectNext();\n\t\t\t\t}\n\n\t\t\t\tif ( data.keyCode == keyCodes.arrowup ) {\n\t\t\t\t\tthis._mentionsView.selectPrevious();\n\t\t\t\t}\n\n\t\t\t\tif ( data.keyCode == keyCodes.enter || data.keyCode == keyCodes.tab || data.keyCode == keyCodes.space ) {\n\t\t\t\t\tthis._mentionsView.executeSelected();\n\t\t\t\t}\n\n\t\t\t\tif ( data.keyCode == keyCodes.esc ) {\n\t\t\t\t\tthis._hideUIAndRemoveMarker();\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'highest' } ); // Required to override the Enter key.\n\n\t\t// Close the dropdown upon clicking outside of the plugin UI.\n\t\tclickOutsideHandler( {\n\t\t\temitter: this._mentionsView,\n\t\t\tactivator: () => this._isUIVisible,\n\t\t\tcontextElements: [ this._balloon.view.element ],\n\t\t\tcallback: () => this._hideUIAndRemoveMarker()\n\t\t} );\n\n\t\tconst feeds = editor.config.get( 'mention.feeds' );\n\n\t\tfor ( const mentionDescription of feeds ) {\n\t\t\tconst feed = mentionDescription.feed;\n\n\t\t\tconst marker = mentionDescription.marker;\n\n\t\t\tif ( !marker || marker.length != 1 ) {\n\t\t\t\t/**\n\t\t\t\t * The marker must be a single character.\n\t\t\t\t *\n\t\t\t\t * Correct markers: `'@'`, `'#'`.\n\t\t\t\t *\n\t\t\t\t * Incorrect markers: `'$$'`, `'[@'`.\n\t\t\t\t *\n\t\t\t\t * See {@link module:mention/mention~MentionConfig}.\n\t\t\t\t *\n\t\t\t\t * @error mentionconfig-incorrect-marker\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'mentionconfig-incorrect-marker: The marker must be provided and it must be a single character.',\n\t\t\t\t\tnull\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst minimumCharacters = mentionDescription.minimumCharacters || 0;\n\t\t\tconst feedCallback = typeof feed == 'function' ? feed.bind( this.editor ) : createFeedCallback( feed );\n\t\t\tconst watcher = this._setupTextWatcherForFeed( marker, minimumCharacters );\n\t\t\tconst itemRenderer = mentionDescription.itemRenderer;\n\n\t\t\tconst definition = { watcher, marker, feedCallback, itemRenderer };\n\n\t\t\tthis._mentionsConfigurations.set( marker, definition );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\t// Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n\t\tthis._mentionsView.destroy();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ContextualBalloon ];\n\t}\n\n\t/**\n\t * Returns true when {@link #_mentionsView} is in the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon} and it is\n\t * currently visible.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n\tget _isUIVisible() {\n\t\treturn this._balloon.visibleView === this._mentionsView;\n\t}\n\n\t/**\n\t * Creates the {@link #_mentionsView}.\n\t *\n\t * @private\n\t * @returns {module:mention/ui/mentionsview~MentionsView}\n\t */\n\t_createMentionView() {\n\t\tconst locale = this.editor.locale;\n\n\t\tconst mentionsView = new MentionsView( locale );\n\n\t\tthis._items = new Collection();\n\n\t\tmentionsView.items.bindTo( this._items ).using( data => {\n\t\t\tconst { item, marker } = data;\n\n\t\t\tconst listItemView = new MentionListItemView( locale );\n\n\t\t\tconst view = this._renderItem( item, marker );\n\t\t\tview.delegate( 'execute' ).to( listItemView );\n\n\t\t\tlistItemView.children.add( view );\n\t\t\tlistItemView.item = item;\n\t\t\tlistItemView.marker = marker;\n\n\t\t\tlistItemView.on( 'execute', () => {\n\t\t\t\tmentionsView.fire( 'execute', {\n\t\t\t\t\titem,\n\t\t\t\t\tmarker\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\treturn listItemView;\n\t\t} );\n\n\t\tmentionsView.on( 'execute', ( evt, data ) => {\n\t\t\tconst editor = this.editor;\n\t\t\tconst model = editor.model;\n\n\t\t\tconst item = data.item;\n\t\t\tconst marker = data.marker;\n\n\t\t\tconst mentionMarker = editor.model.markers.get( 'mention' );\n\n\t\t\t// Create a range on matched text.\n\t\t\tconst end = model.createPositionAt( model.document.selection.focus );\n\t\t\tconst start = model.createPositionAt( mentionMarker.getStart() );\n\t\t\tconst range = model.createRange( start, end );\n\n\t\t\tthis._hideUIAndRemoveMarker();\n\n\t\t\teditor.execute( 'mention', {\n\t\t\t\tmention: item,\n\t\t\t\ttext: item.text,\n\t\t\t\tmarker,\n\t\t\t\trange\n\t\t\t} );\n\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\treturn mentionsView;\n\t}\n\n\t/**\n\t * Returns item renderer for the marker.\n\t *\n\t * @private\n\t * @param {String} marker\n\t * @returns {Function|null}\n\t */\n\t_getItemRenderer( marker ) {\n\t\tconst { itemRenderer } = this._mentionsConfigurations.get( marker );\n\n\t\treturn itemRenderer;\n\t}\n\n\t/**\n\t * Returns a promise that resolves with autocomplete items for a given text.\n\t *\n\t * @param {String} marker\n\t * @param {String} feedText\n\t * @return {Promise<module:mention/mention~MentionFeedItem>}\n\t * @private\n\t */\n\t_getFeed( marker, feedText ) {\n\t\tconst { feedCallback } = this._mentionsConfigurations.get( marker );\n\n\t\treturn Promise.resolve().then( () => feedCallback( feedText ) );\n\t}\n\n\t/**\n\t * Registers a text watcher for the marker.\n\t *\n\t * @private\n\t * @param {String} marker\n\t * @param {Number} minimumCharacters\n\t * @returns {module:typing/textwatcher~TextWatcher}\n\t */\n\t_setupTextWatcherForFeed( marker, minimumCharacters ) {\n\t\tconst editor = this.editor;\n\n\t\tconst watcher = new TextWatcher( editor.model, createTestCallback( marker, minimumCharacters ) );\n\n\t\twatcher.on( 'matched', ( evt, data ) => {\n\t\t\tconst selection = editor.model.document.selection;\n\t\t\tconst focus = selection.focus;\n\n\t\t\t// The text watcher listens only to changed range in selection - so the selection attributes are not yet available\n\t\t\t// and you cannot use selection.hasAttribute( 'mention' ) just yet.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/1723.\n\t\t\tconst hasMention = focus.textNode && focus.textNode.hasAttribute( 'mention' );\n\n\t\t\tconst nodeBefore = focus.nodeBefore;\n\n\t\t\tif ( hasMention || nodeBefore && nodeBefore.is( 'text' ) && nodeBefore.hasAttribute( 'mention' ) ) {\n\t\t\t\tthis._hideUIAndRemoveMarker();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst feedText = getFeedText( marker, data.text );\n\t\t\tconst matchedTextLength = marker.length + feedText.length;\n\n\t\t\t// Create a marker range.\n\t\t\tconst start = focus.getShiftedBy( -matchedTextLength );\n\t\t\tconst end = focus.getShiftedBy( -feedText.length );\n\n\t\t\tconst markerRange = editor.model.createRange( start, end );\n\n\t\t\tlet mentionMarker;\n\n\t\t\tif ( editor.model.markers.has( 'mention' ) ) {\n\t\t\t\tmentionMarker = editor.model.markers.get( 'mention' );\n\t\t\t} else {\n\t\t\t\tmentionMarker = editor.model.change( writer => writer.addMarker( 'mention', {\n\t\t\t\t\trange: markerRange,\n\t\t\t\t\tusingOperation: false,\n\t\t\t\t\taffectsData: false\n\t\t\t\t} ) );\n\t\t\t}\n\n\t\t\tthis._getFeed( marker, feedText )\n\t\t\t\t.then( feed => {\n\t\t\t\t\tthis._items.clear();\n\n\t\t\t\t\tfor ( const feedItem of feed ) {\n\t\t\t\t\t\tconst item = typeof feedItem != 'object' ? { id: feedItem, text: feedItem } : feedItem;\n\n\t\t\t\t\t\tthis._items.add( { item, marker } );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this._items.length ) {\n\t\t\t\t\t\tthis._showUI( mentionMarker );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._hideUIAndRemoveMarker();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t} );\n\n\t\twatcher.on( 'unmatched', () => {\n\t\t\tthis._hideUIAndRemoveMarker();\n\t\t} );\n\n\t\treturn watcher;\n\t}\n\n\t/**\n\t * Shows the mentions balloon. If the panel is already visible, it will reposition it.\n\t *\n\t * @private\n\t */\n\t_showUI( markerMarker ) {\n\t\tif ( this._isUIVisible ) {\n\t\t\t// Update balloon position as the mention list view may change its size.\n\t\t\tthis._balloon.updatePosition( this._getBalloonPanelPositionData( markerMarker, this._mentionsView.position ) );\n\t\t} else {\n\t\t\tthis._balloon.add( {\n\t\t\t\tview: this._mentionsView,\n\t\t\t\tposition: this._getBalloonPanelPositionData( markerMarker, this._mentionsView.position ),\n\t\t\t\twithArrow: false,\n\t\t\t\tsingleViewMode: true\n\t\t\t} );\n\t\t}\n\n\t\tthis._mentionsView.position = this._balloon.view.position;\n\n\t\tthis._mentionsView.selectFirst();\n\t}\n\n\t/**\n\t * Hides the mentions balloon and removes the 'mention' marker from the markers collection.\n\t *\n\t * @private\n\t */\n\t_hideUIAndRemoveMarker() {\n\t\t// Remove the mention view from balloon before removing marker - it is used by balloon position target().\n\t\tif ( this._balloon.hasView( this._mentionsView ) ) {\n\t\t\tthis._balloon.remove( this._mentionsView );\n\t\t}\n\n\t\tif ( this.editor.model.markers.has( 'mention' ) ) {\n\t\t\tthis.editor.model.change( writer => writer.removeMarker( 'mention' ) );\n\t\t}\n\n\t\t// Make the last matched position on panel view undefined so the #_getBalloonPanelPositionData() method will return all positions\n\t\t// on the next call.\n\t\tthis._mentionsView.position = undefined;\n\t}\n\n\t/**\n\t * Renders a single item in the autocomplete list.\n\t *\n\t * @private\n\t * @param {module:mention/mention~MentionFeedItem} item\n\t * @param {String} marker\n\t * @returns {module:ui/button/buttonview~ButtonView|module:mention/ui/domwrapperview~DomWrapperView}\n\t */\n\t_renderItem( item, marker ) {\n\t\tconst editor = this.editor;\n\n\t\tlet view;\n\t\tlet label = item.id;\n\n\t\tconst renderer = this._getItemRenderer( marker );\n\n\t\tif ( renderer ) {\n\t\t\tconst renderResult = renderer( item );\n\n\t\t\tif ( typeof renderResult != 'string' ) {\n\t\t\t\tview = new DomWrapperView( editor.locale, renderResult );\n\t\t\t} else {\n\t\t\t\tlabel = renderResult;\n\t\t\t}\n\t\t}\n\n\t\tif ( !view ) {\n\t\t\tconst buttonView = new ButtonView( editor.locale );\n\n\t\t\tbuttonView.label = label;\n\t\t\tbuttonView.withText = true;\n\n\t\t\tview = buttonView;\n\t\t}\n\n\t\treturn view;\n\t}\n\n\t/**\n\t * Creates a position options object used to position the balloon panel.\n\t *\n\t * @param {module:engine/model/markercollection~Marker} mentionMarker\n\t * @param {String|undefined} preferredPosition The name of the last matched position name.\n\t * @returns {module:utils/dom/position~Options}\n\t * @private\n\t */\n\t_getBalloonPanelPositionData( mentionMarker, preferredPosition ) {\n\t\tconst editor = this.editor;\n\t\tconst editing = this.editor.editing;\n\t\tconst domConverter = editing.view.domConverter;\n\t\tconst mapper = editing.mapper;\n\n\t\treturn {\n\t\t\ttarget: () => {\n\t\t\t\tlet modelRange = mentionMarker.getRange();\n\n\t\t\t\t// Target the UI to the model selection range - the marker has been removed so probably the UI will not be shown anyway.\n\t\t\t\t// The logic is used by ContextualBalloon to display another panel in the same place.\n\t\t\t\tif ( modelRange.start.root.rootName == '$graveyard' ) {\n\t\t\t\t\tmodelRange = editor.model.document.selection.getFirstRange();\n\t\t\t\t}\n\n\t\t\t\tconst viewRange = mapper.toViewRange( modelRange );\n\t\t\t\tconst rangeRects = Rect.getDomRangeRects( domConverter.viewRangeToDom( viewRange ) );\n\n\t\t\t\treturn rangeRects.pop();\n\t\t\t},\n\t\t\tlimiter: () => {\n\t\t\t\tconst view = this.editor.editing.view;\n\t\t\t\tconst viewDocument = view.document;\n\t\t\t\tconst editableElement = viewDocument.selection.editableElement;\n\n\t\t\t\tif ( editableElement ) {\n\t\t\t\t\treturn view.domConverter.mapViewToDom( editableElement.root );\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\tpositions: getBalloonPanelPositions( preferredPosition )\n\t\t};\n\t}\n}\n\n// Returns the balloon positions data callbacks.\n//\n// @param {String} preferredPosition\n// @returns {Array.<module:utils/dom/position~Position>}\nfunction getBalloonPanelPositions( preferredPosition ) {\n\tconst positions = {\n\t\t// Positions the panel to the southeast of the caret rectangle.\n\t\t'caret_se': targetRect => {\n\t\t\treturn {\n\t\t\t\ttop: targetRect.bottom + VERTICAL_SPACING,\n\t\t\t\tleft: targetRect.right,\n\t\t\t\tname: 'caret_se'\n\t\t\t};\n\t\t},\n\n\t\t// Positions the panel to the northeast of the caret rectangle.\n\t\t'caret_ne': ( targetRect, balloonRect ) => {\n\t\t\treturn {\n\t\t\t\ttop: targetRect.top - balloonRect.height - VERTICAL_SPACING,\n\t\t\t\tleft: targetRect.right,\n\t\t\t\tname: 'caret_ne'\n\t\t\t};\n\t\t},\n\n\t\t// Positions the panel to the southwest of the caret rectangle.\n\t\t'caret_sw': ( targetRect, balloonRect ) => {\n\t\t\treturn {\n\t\t\t\ttop: targetRect.bottom + VERTICAL_SPACING,\n\t\t\t\tleft: targetRect.right - balloonRect.width,\n\t\t\t\tname: 'caret_sw'\n\t\t\t};\n\t\t},\n\n\t\t// Positions the panel to the northwest of the caret rect.\n\t\t'caret_nw': ( targetRect, balloonRect ) => {\n\t\t\treturn {\n\t\t\t\ttop: targetRect.top - balloonRect.height - VERTICAL_SPACING,\n\t\t\t\tleft: targetRect.right - balloonRect.width,\n\t\t\t\tname: 'caret_nw'\n\t\t\t};\n\t\t}\n\t};\n\n\t// Returns only the last position if it was matched to prevent the panel from jumping after the first match.\n\tif ( positions.hasOwnProperty( preferredPosition ) ) {\n\t\treturn [\n\t\t\tpositions[ preferredPosition ]\n\t\t];\n\t}\n\n\t// By default return all position callbacks.\n\treturn [\n\t\tpositions.caret_se,\n\t\tpositions.caret_sw,\n\t\tpositions.caret_ne,\n\t\tpositions.caret_nw\n\t];\n}\n\n// Creates a RegExp pattern for the marker.\n//\n// Function has to be exported to achieve 100% code coverage.\n//\n// @param {String} marker\n// @param {Number} minimumCharacters\n// @returns {RegExp}\nexport function createRegExp( marker, minimumCharacters ) {\n\tconst numberOfCharacters = minimumCharacters == 0 ? '*' : `{${ minimumCharacters },}`;\n\n\tconst openAfterCharacters = env.features.isRegExpUnicodePropertySupported ? '\\\\p{Ps}\\\\p{Pi}\"\\'' : '\\\\(\\\\[{\"\\'';\n\tconst mentionCharacters = env.features.isRegExpUnicodePropertySupported ? '\\\\p{L}\\\\p{N}' : 'a-zA-ZÀ-ž0-9';\n\n\t// The pattern consists of 3 groups:\n\t// - 0 (non-capturing): Opening sequence - start of the line, space or an opening punctuation character like \"(\" or \"\\\"\",\n\t// - 1: The marker character,\n\t// - 2: Mention input (taking the minimal length into consideration to trigger the UI),\n\t//\n\t// The pattern matches up to the caret (end of string switch - $).\n\t//               (0:      opening sequence       )(1:  marker   )(2:                typed mention                 )$\n\tconst pattern = `(?:^|[ ${ openAfterCharacters }])([${ marker }])([_${ mentionCharacters }]${ numberOfCharacters })$`;\n\n\treturn new RegExp( pattern, 'u' );\n}\n\n// Creates a test callback for the marker to be used in the text watcher instance.\n//\n// @param {String} marker\n// @param {Number} minimumCharacters\n// @returns {Function}\nfunction createTestCallback( marker, minimumCharacters ) {\n\tconst regExp = createRegExp( marker, minimumCharacters );\n\n\treturn text => regExp.test( text );\n}\n\n// Creates a text matcher from the marker.\n//\n// @param {String} marker\n// @returns {Function}\nfunction getFeedText( marker, text ) {\n\tconst regExp = createRegExp( marker, 0 );\n\n\tconst match = text.match( regExp );\n\n\treturn match[ 2 ];\n}\n\n// The default feed callback.\nfunction createFeedCallback( feedItems ) {\n\treturn feedText => {\n\t\tconst filteredItems = feedItems\n\t\t// Make the default mention feed case-insensitive.\n\t\t\t.filter( item => {\n\t\t\t\t// Item might be defined as object.\n\t\t\t\tconst itemId = typeof item == 'string' ? item : String( item.id );\n\n\t\t\t\t// The default feed is case insensitive.\n\t\t\t\treturn itemId.toLowerCase().includes( feedText.toLowerCase() );\n\t\t\t} )\n\t\t\t// Do not return more than 10 items.\n\t\t\t.slice( 0, 10 );\n\n\t\treturn Promise.resolve( filteredItems );\n\t};\n}\n\n// Checks if a given key code is handled by the mention UI.\n//\n// @param {Number}\n// @returns {Boolean}\nfunction isHandledKey( keyCode ) {\n\tconst handledKeyCodes = [\n\t\tkeyCodes.arrowup,\n\t\tkeyCodes.arrowdown,\n\t\tkeyCodes.enter,\n\t\tkeyCodes.tab,\n\t\tkeyCodes.space,\n\t\tkeyCodes.esc\n\t];\n\n\treturn handledKeyCodes.includes( keyCode );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module mention/mention\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport MentionEditing, { _toMentionAttribute } from './mentionediting';\nimport MentionUI from './mentionui';\n\nimport '../theme/mention.css';\n\n/**\n * The mention plugin.\n *\n * For a detailed overview, check the {@glink features/mentions Mention feature documentation}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Mention extends Plugin {\n\t/**\n\t * Creates a mention attribute value from the provided view element and optional data.\n\t *\n\t *\t\teditor.plugins.get( 'Mention' ).toMentionAttribute( viewElement, { userId: '1234' } );\n\t *\n\t *\t\t// For a view element: <span data-mention=\"@joe\">@John Doe</span>\n\t *\t\t// it will return:\n\t *\t\t// { id: '@joe', userId: '1234', _uid: '7a7bc7...', _text: '@John Doe' }\n\t *\n\t * @param {module:engine/view/element~Element} viewElement\n\t * @param {String|Object} [data] Additional data to be stored in the mention attribute.\n\t * @returns {module:mention/mention~MentionAttribute}\n\t */\n\ttoMentionAttribute( viewElement, data ) {\n\t\treturn _toMentionAttribute( viewElement, data );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Mention';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ MentionEditing, MentionUI ];\n\t}\n}\n\n/**\n * The configuration of the {@link module:mention/mention~Mention} feature.\n *\n * Read more in {@link module:mention/mention~MentionConfig}.\n *\n * @member {module:mention/mention~MentionConfig} module:core/editor/editorconfig~EditorConfig#mention\n * @type {Array.<module/mention~MentionFeed>}\n */\n\n/**\n * The configuration of the mention feature.\n *\n * Read more about {@glink features/mentions#configuration configuring the mention feature}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tmention: ... // Mention feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface MentionConfig\n */\n\n/**\n * The list of mention feeds supported by the editor.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tplugins: [ Mention, ... ],\n *\t\t\t\tmention: {\n *\t\t\t\t\tfeeds: [\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\tmarker: '@',\n *\t\t\t\t\t\t\tfeed: [ '@Barney', '@Lily', '@Marshall', '@Robin', '@Ted' ]\n *\t\t\t\t\t\t},\n *\t\t\t\t\t\t...\n * \t\t\t\t\t]\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * You can provide many mention feeds but they must use different `marker`s.\n * For example, you can use `'@'` to autocomplete people and `'#'` to autocomplete tags.\n *\n * @member {Array.<module:mention/mention~MentionFeed>} module:mention/mention~MentionConfig#feeds\n */\n\n/**\n * The mention feed descriptor. Used in {@link module:mention/mention~MentionConfig `config.mention`}.\n *\n * See {@link module:mention/mention~MentionConfig} to learn more.\n *\n *\t\t// Static configuration.\n *\t\tconst mentionFeedPeople = {\n *\t\t\tmarker: '@',\n *\t\t\tfeed: [ '@Alice', '@Bob', ... ],\n *\t\t\tminimumCharacters: 2\n *\t\t};\n *\n *\t\t// Simple synchronous callback.\n *\t\tconst mentionFeedTags = {\n *\t\t\tmarker: '#',\n *\t\t\tfeed: searchString => {\n *\t\t\t\treturn tags\n *\t\t\t\t\t// Filter the tags list.\n *\t\t\t\t\t.filter( tag => {\n *\t\t\t\t\t\treturn tag.toLowerCase().includes( queryText.toLowerCase() );\n *\t\t\t\t\t} )\n *\t\t\t\t\t// Return 10 items max - needed for generic queries when the list may contain hundreds of elements.\n *\t\t\t\t\t.slice( 0, 10 );\n *\t\t\t}\n * \t\t};\n *\n *\t\tconst tags = [ 'wysiwyg', 'rte', 'rich-text-edior', 'collaboration', 'real-time', ... ];\n *\n *\t\t// Asynchronous callback.\n *\t\tconst mentionFeedPlaceholders = {\n *\t\t\tmarker: '$',\n *\t\t\tfeed: searchString => {\n *\t\t\t\treturn getMatchingPlaceholders( searchString );\n *\t\t\t}\n * \t\t};\n *\n *\t\tfunction getMatchingPlaceholders( searchString ) {\n *\t\t\treturn new Promise( resolve => {\n *\t\t\t\tdoSomeXHRQuery( result => {\n *\t\t\t\t\t// console.log( result );\n *\t\t\t\t\t// -> [ '$name', '$surname', '$postal', ... ]\n *\n *\t\t\t\t\tresolve( result );\n * \t\t\t\t} );\n *\t\t\t} );\n *\t\t}\n *\n * @typedef {Object} module:mention/mention~MentionFeed\n * @property {String} [marker] The character which triggers autocompletion for mention. It must be a single character.\n * @property {Array.<module:mention/mention~MentionFeedItem>|Function} feed Autocomplete items. Provide an array for\n * a static configuration (the mention feature will show matching items automatically) or a function which returns an array of\n * matching items (directly, or via a promise). If a function is passed, it is executed in the context of the editor instance.\n * @property {Number} [minimumCharacters=0] Specifies after how many characters the autocomplete panel should be shown.\n * @property {Function} [itemRenderer] A function that renders a {@link module:mention/mention~MentionFeedItem}\n * to the autocomplete panel.\n */\n\n/**\n * The mention feed item. It may be defined as a string or a plain object.\n *\n * When defining a feed item as a plain object, the `id` property is obligatory. Additional properties\n * can be used when customizing the mention feature bahavior\n * (see {@glink features/mentions#customizing-the-autocomplete-list \"Customizing the autocomplete list\"}\n * and {@glink features/mentions#customizing-the-output \"Customizing the output\"} sections).\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tplugins: [ Mention, ... ],\n *\t\t\t\tmention: {\n *\t\t\t\t\tfeeds: [\n *\t\t\t\t\t\t// Feed items as objects.\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\tmarker: '@',\n *\t\t\t\t\t\t\tfeed: [\n *\t\t\t\t\t\t\t\t{\n *\t\t\t\t\t\t\t\t\tid: '@Barney',\n *\t\t\t\t\t\t\t\t\tfullName: 'Barney Bloom'\n *\t\t\t\t\t\t\t\t},\n *\t\t\t\t\t\t\t\t{\n *\t\t\t\t\t\t\t\t\tid: '@Lily',\n *\t\t\t\t\t\t\t\t\tfullName: 'Lily Smith'\n *\t\t\t\t\t\t\t\t},\n *\t\t\t\t\t\t\t\t{\n *\t\t\t\t\t\t\t\t\tid: '@Marshall',\n *\t\t\t\t\t\t\t\t\tfullName: 'Marshall McDonald'\n *\t\t\t\t\t\t\t\t},\n *\t\t\t\t\t\t\t\t{\n *\t\t\t\t\t\t\t\t\tid: '@Robin',\n *\t\t\t\t\t\t\t\t\tfullName: 'Robin Hood'\n *\t\t\t\t\t\t\t\t},\n *\t\t\t\t\t\t\t\t{\n *\t\t\t\t\t\t\t\t\tid: '@Ted',\n *\t\t\t\t\t\t\t\t\tfullName: 'Ted Cruze'\n *\t\t\t\t\t\t\t\t},\n *\t\t\t\t\t\t\t\t// ...\n *\t\t\t\t\t\t\t]\n *\t\t\t\t\t\t},\n *\n *\t\t\t\t\t\t// Feed items as plain strings.\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\tmarker: '#',\n *\t\t\t\t\t\t\tfeed: [ 'wysiwyg', 'rte', 'rich-text-edior', 'collaboration', 'real-time', ... ]\n *\t\t\t\t\t\t},\n * \t\t\t\t\t]\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * @typedef {Object|String} module:mention/mention~MentionFeedItem\n * @property {String} id A unique ID of the mention. It must start with the marker character.\n * @property {String} [text] Text inserted into the editor when creating a mention.\n */\n\n/**\n * Represents a mention in the model.\n *\n * See {@link module:mention/mention~Mention#toMentionAttribute `Mention#toMentionAttribute()`}.\n *\n * @interface module:mention/mention~MentionAttribute\n * @property {String} id The ID of a mention. It identifies the mention item in the mention feed.\n * @property {String} _uid An internal mention view item ID. Should be passed as an `option.id` when using\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement writer.createAttributeElement()}.\n * @property {String} _text Helper property that stores the text of the inserted mention. Used for detecting a broken mention\n * in the editing area.\n */\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window */\n\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic/src/ckeditor';\nimport Mention from '@ckeditor/ckeditor5-mention/src/mention';\n\nClassicEditor.builtinPlugins.push( Mention );\n\nwindow.ClassicEditor = ClassicEditor;\n"],"sourceRoot":""}